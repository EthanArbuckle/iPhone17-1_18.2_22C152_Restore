uint64_t *std::__hash_table<Espresso::AOT::BackendIdentifier,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::allocator<Espresso::AOT::BackendIdentifier>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,Espresso::AOT::BackendIdentifier const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v14;
  float v15;
  float v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(void *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6) {
        v3 = v6 % v7;
      }
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3) {
      v17 = (v7 & (v7 - 1)) != 0;
    }
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      prime = v19;
    }
    else {
      prime = v18;
    }
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          v21 = v23;
        }
      }
      if (prime <= v21) {
        prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      v6 = (v7 - 1) & v6;
    }
  }
  v24 = *(void *)a1;
  v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19248BEF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Espresso::AOT::AbstractValidator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<Espresso::AOT::AbstractValidator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DBF86BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DBF86BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DBF86BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DBF86BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<Espresso::AOT::ConstCostEstimator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3895D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::AOT::ConstCostEstimator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3895D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::AOT::ConstCostEstimator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::AOT::EstimatorMILDecisionTree>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::AOT::EstimatorMILDecisionTree>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389610;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::AOT::EvaluatorClassic>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3895A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::AOT::EvaluatorClassic>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3895A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::AOT::EvaluatorClassic>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    v7 = (uint64_t *)(a2 + 16);
  }
  else {
    v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!inserted)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *inserted;
  uint64_t *inserted = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node<std::pair<std::string const,std::unordered_set<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v4);
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__node_insert_multi(a1, v4[0]);
}

void sub_19248C300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p)
{
  int8x8_t v11 = __p;
  __p = 0;
  if (v11) {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>> const&>((uint64_t)&__p, v11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node<std::pair<std::string const,std::unordered_set<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (char *)operator new(0x50uLL);
  v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v8 = (uint64_t *)(v6 + 16);
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)(v7 + 40), a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  int v9 = v7[39];
  if (v9 >= 0) {
    v10 = v8;
  }
  else {
    v10 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v9 >= 0) {
    unint64_t v11 = v7[39];
  }
  else {
    unint64_t v11 = *((void *)v7 + 3);
  }
  unint64_t result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v13, v10, v11);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_19248C3D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_19248C3F0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (!*((unsigned char *)a1 + 16)) {
      goto LABEL_7;
    }
    uint64_t v3 = *(void ***)(v2 + 56);
    if (v3)
    {
      do
      {
        unint64_t v6 = (void **)*v3;
        if (*((char *)v3 + 39) < 0) {
          operator delete(v3[2]);
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v4) {
      operator delete(v4);
    }
    if (*(char *)(v2 + 39) < 0)
    {
      operator delete(*(void **)(v2 + 16));
      uint64_t v5 = (void *)v2;
    }
    else
    {
LABEL_7:
      uint64_t v5 = (void *)v2;
    }
    operator delete(v5);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unordered_set<std::string>&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      char v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = v16[1];
            if (v24 == v12)
            {
              uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v26 = v16[3];
              }
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          char v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = (char *)operator new(0x50uLL);
  v30 = v29;
  v46[0] = v29;
  v46[1] = a1 + 16;
  char v47 = 0;
  *(void *)v29 = 0;
  *((void *)v29 + 1) = v12;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v29 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v29 + 1) = *(_OWORD *)a3;
    *((void *)v29 + 4) = *(void *)(a3 + 16);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)(v30 + 40), a4);
  char v47 = 1;
  float v31 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v32 = *(float *)(a1 + 32);
  if (!v13 || (float)(v32 * (float)v13) < v31)
  {
    BOOL v35 = 1;
    if (v13 >= 3) {
      BOOL v35 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v13);
    unint64_t v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v39) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v39)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v39 < 3uLL || (uint8x8_t v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < *(void *)&v39) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v43 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        v33 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        v34 = (void *)v46[0];
        if (v33) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        v33 = *(void **)(*(void *)a1 + 8 * v12);
        v34 = (void *)v46[0];
        if (v33) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v43 & v12;
      v33 = *(void **)(*(void *)a1 + 8 * (v43 & v12));
      v34 = (void *)v46[0];
      if (v33) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v34 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v46[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v46[0])
    {
      unint64_t v44 = *(void *)(*(void *)v46[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v44 >= v13) {
          v44 %= v13;
        }
      }
      else
      {
        v44 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v44) = v46[0];
    }
    goto LABEL_92;
  }
  v33 = *(void **)(*(void *)a1 + 8 * v4);
  v34 = (void *)v46[0];
  if (!v33) {
    goto LABEL_81;
  }
LABEL_57:
  void *v34 = *v33;
  void *v33 = v46[0];
LABEL_92:
  char v16 = (uint64_t *)v46[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_19248C948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19248C960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19248C978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC5794) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC5794 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC5794)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC5794 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

unsigned char *OUTLINED_FUNCTION_0_0(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_0(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

void Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation(uint64_t *a1)
{
  uint64_t v3 = (void *)OUTLINED_FUNCTION_2_0(a1);
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = *v2;
  if (*v2)
  {
    void *v1 = v4;
    operator delete(v4);
  }
}

uint64_t Espresso::AOT::MILCompilerForE5::MakeBackendRegistry()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Espresso::AOT::MILCompilerForE5::Run()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void Espresso::AOT::MILCompilerForE5::Run(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_0_0(a1, a2);
  OUTLINED_FUNCTION_1_0(&dword_1920CB000, v2, v3, "Memory allocation completed", v4);
}

{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_0_0(a1, a2);
  OUTLINED_FUNCTION_1_0(&dword_1920CB000, v2, v3, "Lowering to E5RT opset completed", v4);
}

{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_0_0(a1, a2);
  OUTLINED_FUNCTION_1_0(&dword_1920CB000, v2, v3, "Segmenter completed", v4);
}

void Espresso::AOT::MILCompilerForE5::Run(uint8_t *buf, uint64_t *a2, void *a3, os_log_t log)
{
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = (uint64_t *)*a2;
  }
  *(_DWORD *)buf = 136315138;
  *a3 = v4;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "Compile for platform %s", buf, 0xCu);
}

void Espresso::AOT::MILCompilerForE5::Run(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((char *)a1 + 23) >= 0) {
    os_log_t v3 = a1;
  }
  else {
    os_log_t v3 = (uint64_t *)*a1;
  }
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = 136315394;
  unint64_t v6 = v3;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "MILCompilerForE5: Run(): Created E5 output dir @ %s. Permissions (octal) = 0%o", (uint8_t *)&v5, 0x12u);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>> const&>(uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 16))
  {
    os_log_t v3 = (void **)*((void *)__p + 7);
    if (v3)
    {
      do
      {
        int v4 = (void **)*v3;
        if (*((char *)v3 + 39) < 0) {
          operator delete(v3[2]);
        }
        operator delete(v3);
        os_log_t v3 = v4;
      }
      while (v4);
    }
    int v5 = (void *)*((void *)__p + 5);
    *((void *)__p + 5) = 0;
    if (v5) {
      operator delete(v5);
    }
    if (__p[39] < 0) {
      operator delete(*((void **)__p + 2));
    }
  }
  operator delete(__p);
}

double Espresso::AOT::GetSizeInMbForDims(char **a1, int a2)
{
  os_log_t v3 = *a1;
  int v2 = a1[1];
  if (*a1 != v2)
  {
    unint64_t v4 = v2 - v3 - 8;
    if (v4 >= 8)
    {
      uint64_t v8 = (v4 >> 3) + 1;
      unint64_t v6 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v9 = v3 + 8;
      uint64_t v10 = 1;
      uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      unint64_t v5 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v5 = 1;
      unint64_t v6 = *a1;
    }
    do
    {
      uint64_t v13 = *(void *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v2);
LABEL_9:
    double v7 = (double)v5 * 0.000000953674316;
    return v7 * (double)(unint64_t)Espresso::AOT::IRDataTypeToByteSize(a2);
  }
  double v7 = 0.000000953674316;
  return v7 * (double)(unint64_t)Espresso::AOT::IRDataTypeToByteSize(a2);
}

double Espresso::AOT::GetNumberOfElementsFromShapeValue(Espresso::AOT *this, const MIL::IRValue *a2)
{
  double v3 = 1.0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValue *))(*(void *)this + 40))(this, a2))
  {
    (*(void (**)(Espresso::AOT *))(*(void *)this + 40))(this);
    uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
    if (v5)
    {
      unint64_t v6 = (v5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v6 < 7)
      {
        double v7 = (int *)Data;
        do
        {
LABEL_8:
          int v26 = *v7++;
          double v3 = v3 * (double)v26;
        }
        while (v7 != (int *)(Data + 4 * v5));
        return v3;
      }
      unint64_t v8 = v6 + 1;
      uint64_t v9 = (v6 + 1) & 0x7FFFFFFFFFFFFFF8;
      double v7 = (int *)(Data + 4 * v9);
      uint64_t v10 = Data + 16;
      __asm { FMOV            V0.2D, #1.0 }
      uint64_t v16 = v9;
      float64x2_t v17 = _Q0;
      float64x2_t v18 = _Q0;
      float64x2_t v19 = _Q0;
      do
      {
        long long v20 = *(_OWORD *)(v10 - 16);
        v21.i64[0] = (int)v20;
        v21.i64[1] = SDWORD1(v20);
        float64x2_t v22 = vcvtq_f64_s64(v21);
        v21.i64[0] = SDWORD2(v20);
        v21.i64[1] = SHIDWORD(v20);
        float64x2_t v23 = vcvtq_f64_s64(v21);
        v21.i64[0] = (int)*(_OWORD *)v10;
        v21.i64[1] = (int)HIDWORD(*(void *)v10);
        float64x2_t v24 = vcvtq_f64_s64(v21);
        v21.i64[0] = (int)*(void *)(v10 + 8);
        v21.i64[1] = (int)HIDWORD(*(_OWORD *)v10);
        float64x2_t v17 = vmulq_f64(v17, v23);
        _Q0 = vmulq_f64(_Q0, v22);
        float64x2_t v19 = vmulq_f64(v19, vcvtq_f64_s64(v21));
        float64x2_t v18 = vmulq_f64(v18, v24);
        v10 += 32;
        v16 -= 8;
      }
      while (v16);
      float64x2_t v25 = vmulq_f64(vmulq_f64(v18, _Q0), vmulq_f64(v19, v17));
      double v3 = vmuld_lane_f64(v25.f64[0], v25, 1);
      if (v8 != v9) {
        goto LABEL_8;
      }
    }
  }
  return v3;
}

double Espresso::AOT::GetFlopCountForActivation(uint64_t *a1, unint64_t a2)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    double result = 0.0;
    switch(*((unsigned char *)a1 + 23))
    {
      case 4:
        if (*(_DWORD *)a1 == 1752064372) {
          goto LABEL_51;
        }
        if (*(_DWORD *)a1 == 1970038130) {
          goto LABEL_9;
        }
        return result;
      case 6:
        goto LABEL_29;
      case 7:
        if (*(_DWORD *)a1 == 1835493747 && *(_DWORD *)((char *)a1 + 3) == 1684631405) {
          goto LABEL_38;
        }
        return result;
      case 0xB:
        if (*a1 == 0x745F64656C616373 && *(uint64_t *)((char *)a1 + 3) == 0x686E61745F64656CLL) {
          goto LABEL_44;
        }
        return result;
      case 0xC:
        if (*a1 == 0x6769735F64726168 && *((_DWORD *)a1 + 2) == 1684631405) {
          goto LABEL_50;
        }
        return result;
      default:
        return result;
    }
  }
  double result = 0.0;
  switch(a1[1])
  {
    case 4:
      if (*(_DWORD *)*a1 == 1752064372)
      {
LABEL_51:
        double result = (double)a2 * 37.0;
      }
      else if (*(_DWORD *)*a1 == 1970038130)
      {
LABEL_9:
        double result = (double)a2;
      }
      break;
    case 6:
      a1 = (uint64_t *)*a1;
LABEL_29:
      if (bswap32(*(_DWORD *)a1) == 1818848869 && bswap32(*((unsigned __int16 *)a1 + 2)) >> 16 == 24946) {
        double result = (double)a2 + (double)a2;
      }
      break;
    case 7:
      if (*(_DWORD *)*a1 == 1835493747 && *(_DWORD *)(*a1 + 3) == 1684631405) {
LABEL_38:
      }
        double result = (double)a2 * 36.0;
      break;
    case 11:
      if (*(void *)*a1 == 0x745F64656C616373 && *(void *)(*a1 + 3) == 0x686E61745F64656CLL) {
LABEL_44:
      }
        double result = (double)a2 * 39.0;
      break;
    case 12:
      if (*(void *)*a1 == 0x6769735F64726168 && *(_DWORD *)(*a1 + 8) == 1684631405) {
LABEL_50:
      }
        double result = (double)a2 * 4.0;
      break;
    default:
      return result;
  }
  return result;
}

void Espresso::AOT::Backends::CostModel::GRUOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::GRUOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_19248D864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  *a9 = 0;
  MEMORY[0x192FF16B0](v36, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::MemOptimizerForMIL::MemOptimizerForMIL(Espresso::AOT::MemOptimizer::Optimizer *a1)
{
}

void sub_19248DA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v10);
  Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(v9);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::MemOptimizerForMIL::~MemOptimizerForMIL(std::__shared_weak_count **this)
{
  v1 = (Espresso::AOT::MemOptimizer::MemOptimizerForMIL *)this;
  *this = (std::__shared_weak_count *)&unk_1EE36B010;
  int v2 = this[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  Espresso::AOT::MemOptimizer::Optimizer::~Optimizer((Espresso::AOT::MemOptimizer::Optimizer *)this);
}

{
  Espresso::AOT::MemOptimizer::MemOptimizerForMIL *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  v1 = (Espresso::AOT::MemOptimizer::MemOptimizerForMIL *)this;
  *this = (std::__shared_weak_count *)&unk_1EE36B010;
  int v2 = this[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  Espresso::AOT::MemOptimizer::Optimizer::~Optimizer((Espresso::AOT::MemOptimizer::Optimizer *)this);
}

void Espresso::AOT::MemOptimizer::MemOptimizerForMIL::~MemOptimizerForMIL(Espresso::AOT::MemOptimizer::MemOptimizerForMIL *this)
{
  *(void *)this = &unk_1EE36B010;
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::AOT::MemOptimizer::MemOptimizerForMIL::HasEntryPoint(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16)) != 0;
}

BOOL Espresso::AOT::MemOptimizer::MemOptimizerForMIL::IsRangeOverlapped(_DWORD *a1, _DWORD *a2)
{
  return *a2 <= a1[1] && *a1 <= a2[1];
}

void Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(Espresso::AOT::MemOptimizer::InterferenceGraphBuilder *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::CreateBuilder(a1);
}

void sub_19248E090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  uint64_t v5 = *(void *)(v3 - 96);
  *(void *)(v3 - 96) = 0;
  if (!v5) {
    _Unwind_Resume(a1);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

__n128 std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x38uLL);
  *(void *)int v2 = &unk_1EE37E480;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37E480;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
  unint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)*v3;
  if ((void *)*v3 != v3 + 1)
  {
    do
    {
      uint64_t v9 = (MIL::IRArgument **)v5[7];
      if ((MIL::IRArgument **)v5[8] == v9) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t Name = MIL::IRArgument::GetName(*v9);
      uint64_t v11 = Name;
      uint64_t v12 = *(uint64_t ***)(*(void *)(a1 + 16) + 8);
      if (v12)
      {
        int v13 = *(char *)(Name + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(Name + 23);
        }
        else {
          size_t v14 = *(void *)(Name + 8);
        }
        if (v13 >= 0) {
          v15 = (const void *)Name;
        }
        else {
          v15 = *(const void **)Name;
        }
        do
        {
          int v16 = *((char *)v12 + 55);
          if (v16 >= 0) {
            size_t v17 = *((unsigned __int8 *)v12 + 55);
          }
          else {
            size_t v17 = (size_t)v12[5];
          }
          if (v16 >= 0) {
            float64x2_t v18 = (uint64_t *)(v12 + 4);
          }
          else {
            float64x2_t v18 = v12[4];
          }
          if (v17 >= v14) {
            size_t v19 = v14;
          }
          else {
            size_t v19 = v17;
          }
          int v20 = memcmp(v15, v18, v19);
          BOOL v21 = v14 < v17;
          if (v20) {
            BOOL v21 = v20 < 0;
          }
          if (!v21)
          {
            int v22 = memcmp(v18, v15, v19);
            BOOL v23 = v17 < v14;
            if (v22) {
              BOOL v23 = v22 < 0;
            }
            if (!v23) {
              goto LABEL_54;
            }
            ++v12;
          }
          uint64_t v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
      float64x2_t v24 = *(uint64_t **)(a1 + 24);
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      if (*v24 != v26)
      {
        char v27 = *(unsigned char *)(v11 + 23);
        if (v27 >= 0) {
          uint64_t v28 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          uint64_t v28 = *(void *)(v11 + 8);
        }
        if (v27 >= 0) {
          v29 = (unsigned __int8 *)v11;
        }
        else {
          v29 = *(unsigned __int8 **)v11;
        }
        while (1)
        {
          uint64_t v30 = *(unsigned __int8 *)(v25 + 23);
          if ((v30 & 0x80u) == 0) {
            uint64_t v31 = *(unsigned __int8 *)(v25 + 23);
          }
          else {
            uint64_t v31 = *(void *)(v25 + 8);
          }
          if (v31 == v28)
          {
            if ((v30 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v25, v29, *(void *)(v25 + 8))) {
                break;
              }
            }
            else
            {
              if (!*(unsigned char *)(v25 + 23)) {
                break;
              }
              uint64_t v32 = 0;
              while (*(unsigned __int8 *)(v25 + v32) == v29[v32])
              {
                if (v30 == ++v32) {
                  goto LABEL_48;
                }
              }
            }
          }
          v25 += 24;
          if (v25 == v26) {
            goto LABEL_49;
          }
        }
      }
LABEL_48:
      if (v25 == v26)
      {
LABEL_49:
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a1 + 48), v11))
        {
          v33 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(*(void **)(a1 + 8), v11);
          if (!v33)
          {
            if (*(char *)(v11 + 23) >= 0) {
              v73 = (unsigned __int8 *)v11;
            }
            else {
              v73 = *(unsigned __int8 **)v11;
            }
            __p = v73;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Input argument \"%s\" was not already visited", &__p);
          }
          unsigned int v34 = **(_DWORD **)(a1 + 32);
          if (*((_DWORD *)v33 + 11) < v34) {
            *((_DWORD *)v33 + 11) = v34;
          }
        }
      }
LABEL_54:
      BOOL v35 = (void *)v5[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          BOOL v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (void *)v5[2];
          BOOL v37 = *v36 == (void)v5;
          uint64_t v5 = v36;
        }
        while (!v37);
      }
      uint64_t v5 = v36;
    }
    while (v36 != v4);
  }
  uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  while (v7 != v8)
  {
    int8x8_t v39 = *(MIL::IRNamedValueType **)v7;
    v38 = *(std::__shared_weak_count **)(v7 + 8);
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = MIL::IRNamedValueType::GetName(v39);
    uint8x8_t v41 = (void *)v40;
    uint64_t v42 = *(uint64_t **)(a1 + 24);
    uint64_t v43 = *v42;
    uint64_t v44 = v42[1];
    if (*v42 != v44)
    {
      char v45 = *(unsigned char *)(v40 + 23);
      if (v45 >= 0) {
        uint64_t v46 = *(unsigned __int8 *)(v40 + 23);
      }
      else {
        uint64_t v46 = *(void *)(v40 + 8);
      }
      if (v45 >= 0) {
        char v47 = (unsigned __int8 *)v40;
      }
      else {
        char v47 = *(unsigned __int8 **)v40;
      }
      while (1)
      {
        uint64_t v48 = *(unsigned __int8 *)(v43 + 23);
        if ((v48 & 0x80u) == 0) {
          uint64_t v49 = *(unsigned __int8 *)(v43 + 23);
        }
        else {
          uint64_t v49 = *(void *)(v43 + 8);
        }
        if (v49 == v46)
        {
          if ((v48 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v43, v47, *(void *)(v43 + 8))) {
              break;
            }
          }
          else
          {
            if (!*(unsigned char *)(v43 + 23)) {
              break;
            }
            uint64_t v50 = 0;
            while (*(unsigned __int8 *)(v43 + v50) == v47[v50])
            {
              if (v48 == ++v50) {
                goto LABEL_82;
              }
            }
          }
        }
        v43 += 24;
        if (v43 == v44) {
          goto LABEL_83;
        }
      }
    }
LABEL_82:
    if (v43 == v44)
    {
LABEL_83:
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v39);
      if (E5Common::Utils::IsTensor((uint64_t)Type))
      {
        uint64_t v53 = MIL::IRValueType::AsTensorType(Type);
        v54 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v53 + 96))(v53);
        uint64_t v55 = *v54;
        uint64_t v56 = v54[1];
        if (*v54 == v56) {
          goto LABEL_94;
        }
        while ((*(uint64_t (**)(void))(**(void **)v55 + 16))())
        {
          v55 += 8;
          if (v55 == v56) {
            goto LABEL_94;
          }
        }
      }
      else
      {
        if (!E5Common::Utils::IsTensorBuffer(Type, v52))
        {
          if (E5Common::Utils::IsPixelBuffer(Type, v57))
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "isDynamicOperand: PixelBuffer type is not expected here.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
          }
LABEL_94:
          uint64_t v63 = *(void *)(a1 + 8);
          __p = v41;
          v64 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v63, (uint64_t)v41, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          v65 = *(_DWORD **)(a1 + 32);
          *((_DWORD *)v64 + 10) = *v65;
          *((_DWORD *)v64 + 11) = *v65;
          v66 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v39);
          if (E5Common::Utils::IsTensor((uint64_t)v66))
          {
            uint64_t v68 = MIL::IRValueType::AsTensorType(v66);
            uint64_t v77 = 0;
            uint64_t v78 = 0;
            Espresso::AOT::BuildTensorDescriptor((uint64_t)v41, v68);
          }
          if (E5Common::Utils::IsTensorBuffer(v66, v67))
          {
            v69 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v66);
            v70 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v69);
            uint64_t v77 = 0;
            uint64_t v78 = 0;
            Espresso::AOT::BuildTensorDescriptor((uint64_t)v41, v70);
          }
          v72 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v72, "Unsupported type for ComputeAllocationSize.");
          v72->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v72, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        v58 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(Type);
        v59 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v58);
        Shape = (uint64_t *)MIL::IRTensorBufferValueType::GetShape(v59);
        uint64_t v61 = *Shape;
        uint64_t v62 = Shape[1];
        if (*Shape == v62) {
          goto LABEL_94;
        }
        while ((*(uint64_t (**)(void))(**(void **)v61 + 16))())
        {
          v61 += 8;
          if (v61 == v62) {
            goto LABEL_94;
          }
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(void *)(a1 + 48), (uint64_t)v41, (uint64_t)v41);
    }
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    v7 += 16;
  }
  ++**(_DWORD **)(a1 + 32);
  return 1;
}

void sub_19248E9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK8Espresso3AOT12MemOptimizer18MemOptimizerForMIL22BuildInterferenceGraphERKNSt3__112basic_stringI"
                     "cNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK8Espresso3AOT12MemOptimizer18MemOptimizerForMIL22BuildInterferenceGraphERKNSt3__112ba"
                                "sic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK8Espresso3AOT12MemOptimizer18MemOptimizerForMIL22BuildInterferenceGraphERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK8Espresso3AOT12MemOptimizer18MemOptimizerForMIL22BuildInterferenceGraphERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    size_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              BOOL v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  BOOL v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v28 = operator new(0x38uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *uint64_t v28 = 0;
  v28[1] = v11;
  v29 = (std::string *)(v28 + 2);
  uint64_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v28[4] = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unsigned int v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        BOOL v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unsigned int v34 = *(void **)(*(void *)a1 + 8 * v11);
        BOOL v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unsigned int v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      BOOL v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *BOOL v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unsigned int v34 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *BOOL v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19248EFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19248EFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_3(a1);
  if (!v5)
  {
    uint64_t v6 = (std::__shared_weak_count *)v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)uint64_t v1 = v3;
  *(_DWORD *)(v1 + 8) = v2;
}

void Espresso::AOT::MILSegmenterAnalytics::UpdateWithOpToBackend(uint64_t a1, void *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a1) {
    return;
  }
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  MIL::IRTensorValueType::MakeScalar();
  uint64_t v62 = 0;
  uint64_t v5 = (char *)operator new(8uLL);
  unint64_t v6 = 0;
  *(void *)uint64_t v5 = v4;
  uint64_t v7 = v5 + 8;
  uint64_t v61 = v5;
  uint64_t v63 = v5 + 8;
  uint64_t v48 = a1;
  uint64_t v47 = v4;
  while (2)
  {
    uint64_t v8 = *((void *)v7 - 1);
    uint64_t v62 = v7 - 8;
    unint64_t v9 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
    unint64_t v11 = **v9;
    unint64_t v10 = (*v9)[1];
    uint64_t v50 = v10;
    while (1)
    {
      if (v11 == v10) {
        goto LABEL_3;
      }
      v51 = v11;
      unint64_t v12 = (uint64_t ***)(*(uint64_t (**)(void))(*(void *)*v11 + 208))(*v11);
      unint64_t v52 = v6;
      v15 = **v12;
      size_t v14 = (*v12)[1];
      if (v15 != v14)
      {
        char v16 = v62;
        while (1)
        {
          uint64_t v18 = *v15;
          if (v16 < v63)
          {
            *(void *)char v16 = v18;
            uint64_t v17 = (uint64_t)(v16 + 8);
            goto LABEL_10;
          }
          uint64_t v19 = v61;
          uint64_t v20 = (v16 - v61) >> 3;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v63 - v61;
          if ((v63 - v61) >> 2 > v21) {
            unint64_t v21 = v22 >> 2;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            if (v23 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v24 = operator new(8 * v23);
            uint64_t v25 = &v24[8 * v20];
            *(void *)uint64_t v25 = v18;
            uint64_t v17 = (uint64_t)(v25 + 8);
            if (v16 == v19)
            {
LABEL_21:
              uint64_t v61 = v25;
              uint64_t v62 = (char *)v17;
              uint64_t v63 = &v24[8 * v23];
              if (!v16) {
                goto LABEL_10;
              }
LABEL_28:
              operator delete(v16);
              goto LABEL_10;
            }
          }
          else
          {
            uint64_t v24 = 0;
            uint64_t v25 = (char *)(8 * v20);
            *(void *)(8 * v20) = v18;
            uint64_t v17 = 8 * v20 + 8;
            if (v16 == v19) {
              goto LABEL_21;
            }
          }
          unint64_t v26 = v16 - 8 - v19;
          if (v26 < 0x168)
          {
            char v27 = v16;
            goto LABEL_26;
          }
          if (&v24[v16 - v19 - 8 - (v26 & 0xFFFFFFFFFFFFFFF8)] > &v24[v16 - v19 - 8]) {
            break;
          }
          if (&v16[-(v26 & 0xFFFFFFFFFFFFFFF8) - 8] > v16 - 8)
          {
            char v27 = v16;
            goto LABEL_26;
          }
          if ((unint64_t)(v19 - v24) < 0x20)
          {
            char v27 = v16;
            goto LABEL_26;
          }
          uint64_t v29 = (v26 >> 3) + 1;
          uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          char v27 = &v16[-v30];
          v25 -= v30;
          long long v31 = &v24[8 * v20 - 16];
          float v32 = v16 - 16;
          uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *long long v31 = v34;
            v31 -= 2;
            v32 -= 32;
            v33 -= 4;
          }
          while (v33);
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_26;
          }
LABEL_27:
          char v16 = v61;
          uint64_t v61 = v25;
          uint64_t v62 = (char *)v17;
          uint64_t v63 = &v24[8 * v23];
          if (v16) {
            goto LABEL_28;
          }
LABEL_10:
          uint64_t v62 = (char *)v17;
          v15 += 2;
          char v16 = (char *)v17;
          if (v15 == v14) {
            goto LABEL_39;
          }
        }
        char v27 = v16;
        do
        {
LABEL_26:
          uint64_t v28 = *((void *)v27 - 1);
          v27 -= 8;
          *((void *)v25 - 1) = v28;
          v25 -= 8;
        }
        while (v27 != v19);
        goto LABEL_27;
      }
LABEL_39:
      unint64_t v6 = v52;
      if (v52 >= (uint64_t)(a2[1] - *a2) >> 3) {
        break;
      }
      unint64_t v35 = *(void *)(*a2 + 8 * v52);
      strcpy((char *)__p, "SelectedBackend");
      *(_DWORD *)v57 = v64[0];
      *(_DWORD *)&v57[3] = *(_DWORD *)((char *)v64 + 3);
      char v58 = 15;
      uint64_t v36 = *(void *)(v48 + 16);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v48 + 24) - v36) >> 3) <= v35) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v37 = (long long *)(v36 + 24 * v35);
      if (*((char *)v37 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v37, *((void *)v37 + 1));
      }
      else
      {
        long long v38 = *v37;
        v53.__r_.__value_.__r.__words[2] = *((void *)v37 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
      }
      MIL::IRTensorValueType::MakeStringValue();
      uint64_t v54 = *(void *)buf;
      if (*(void *)buf) {
        operator new();
      }
      uint64_t v55 = 0;
      *(void *)buf = 0;
      MIL::IRObject::SetAttribute();
      int8x8_t v39 = v55;
      if (!v55 || atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v40 = *(void *)buf;
        *(void *)buf = 0;
        if (!v40) {
          goto LABEL_50;
        }
LABEL_49:
        (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        goto LABEL_50;
      }
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      uint64_t v40 = *(void *)buf;
      *(void *)buf = 0;
      if (v40) {
        goto LABEL_49;
      }
LABEL_50:
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v53.__r_.__value_.__l.__data_);
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((v58 & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(__p[0]);
LABEL_5:
      unint64_t v6 = v52 + 1;
      unint64_t v10 = v50;
      unint64_t v11 = v51 + 2;
    }
    unint64_t v41 = Espresso::espresso_os_log_subsystem(0, v13);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      Espresso::AOT::MILSegmenterAnalytics::UpdateWithOpToBackend(&v59, v60, v41);
    }
    uint64_t v43 = Espresso::espresso_os_log_subsystem(0, v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 56))(v47);
      uint64_t v45 = (uint64_t)(*(void *)(*(void *)v44 + 8) - **(void **)v44) >> 4;
      uint64_t v46 = (uint64_t)(a2[1] - *a2) >> 3;
      *(_DWORD *)buf = 134218240;
      *(void *)&buf[4] = v45;
      __int16 v66 = 2048;
      uint64_t v67 = v46;
      _os_log_error_impl(&dword_1920CB000, v43, OS_LOG_TYPE_ERROR, "Input Program had %lu Ops. Op to backend mapping had %lu ops", buf, 0x16u);
    }
LABEL_3:
    uint64_t v7 = v62;
    if (v61 != v62) {
      continue;
    }
    break;
  }
  if (v61) {
    operator delete(v61);
  }
}

void sub_19248F764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void Espresso::AOT::MILSegmenterAnalytics::UpdateTransferCost(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)a1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 64))(&v27);
    (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v22, "_Dest_");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = *(char *)(a4 + 23);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)a4;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)a4;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a4 + 8);
    }
    uint8x8_t v13 = std::string::append(&v23, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v24, "_ms");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    std::string::size_type v26 = v15->__r_.__value_.__r.__words[2];
    long long v25 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    MIL::IRTensorValueType::MakeFloat64Value(v20, Scalar, a2);
    v20[1] = v20[0];
    if (v20[0]) {
      operator new();
    }
    unint64_t v21 = 0;
    v20[0] = 0;
    MIL::IRObject::SetAttribute();
    uint64_t v17 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = v20[0];
    v20[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    if (SHIBYTE(v26) < 0)
    {
      operator delete((void *)v25);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_24;
    }
LABEL_23:
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      uint64_t v19 = v28;
      if (!v28) {
        return;
      }
LABEL_25:
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      return;
    }
LABEL_24:
    operator delete(v22.__r_.__value_.__l.__data_);
    uint64_t v19 = v28;
    if (!v28) {
      return;
    }
    goto LABEL_25;
  }
}

void sub_19248FB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    if ((*(char *)(v30 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v30 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v30 - 96));
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(__p);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a18);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_6:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v30 - 64);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

void sub_19248FC60(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void sub_19248FC74(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILSegmenterAnalytics::UpdateLaunchCost(uint64_t a1, double a2)
{
  if (*(unsigned char *)a1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 64))(&v15);
    (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    std::operator+<char>();
    uint64_t v5 = std::string::append(&v12, "_ms");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    MIL::IRTensorValueType::MakeFloat64Value(v10, Scalar, a2);
    v10[1] = v10[0];
    if (v10[0]) {
      operator new();
    }
    unint64_t v11 = 0;
    v10[0] = 0;
    MIL::IRObject::SetAttribute();
    uint64_t v7 = v11;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = v10[0];
    v10[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    if (SHIBYTE(v14) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_11:
        long long v9 = v16;
        if (!v16) {
          return;
        }
LABEL_15:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v12.__r_.__value_.__l.__data_);
    long long v9 = v16;
    if (!v16) {
      return;
    }
    goto LABEL_15;
  }
}

void sub_19248FEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23 - 64);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

void sub_19248FFA8(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void sub_19248FFBC(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILSegmenterAnalytics::ConsolidateMetadata(Espresso::AOT::MILSegmenterAnalytics *this)
{
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  (*(void (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  MIL::IRTensorValueType::MakeScalar();
  (*(void (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  uint64_t Scalar = MIL::IRTensorValueType::MakeScalar();
  (*(void (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  MIL::IRListValueType::Make();
  (*(void (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  v96 = (MIL::IRTensorValueType *)Scalar;
  MIL::IRDictionaryValueType::Make();
  v95 = this;
  (*(void (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  MIL::IRDictionaryValueType::Make();
  uint64_t v5 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  uint64_t v6 = **v5;
  uint64_t v93 = (*v5)[1];
  if (v6 != v93)
  {
    do
    {
      uint64_t v94 = v6;
      v125 = 0;
      v126 = 0;
      i = 0;
      long long v9 = (long long *)*((void *)v95 + 2);
      uint64_t v8 = (long long *)*((void *)v95 + 3);
      while (v9 != v8)
      {
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v115, *(const std::string::value_type **)v9, *((void *)v9 + 1));
        }
        else
        {
          long long v10 = *v9;
          *(void *)&v115[16] = *((void *)v9 + 2);
          *(_OWORD *)v115 = v10;
        }
        if (MIL::IRObject::TryGetAttribute())
        {
          if ((v115[23] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v115, *(std::string::size_type *)&v115[8]);
          }
          else {
            std::string v124 = *(std::string *)v115;
          }
          MIL::IRTensorValueType::MakeStringValue();
          *(void *)v105 = __dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__r.__words[0]) {
            operator new();
          }
          *(_OWORD *)v105 = 0uLL;
          __dst.__r_.__value_.__r.__words[0] = 0;
          uint8x8_t v13 = v126;
          if (v126 < i)
          {
            *(void *)v126 = 0;
            *((void *)v13 + 1) = 0;
            std::string v12 = v13 + 16;
            *(_OWORD *)v105 = 0uLL;
          }
          else
          {
            std::string::size_type v14 = v125;
            uint64_t v15 = (v126 - v125) >> 4;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = i - v125;
            if ((i - v125) >> 3 > v16) {
              unint64_t v16 = v17 >> 3;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v19 = (char *)operator new(16 * v18);
            uint64_t v20 = &v19[16 * v15];
            *(void *)uint64_t v20 = 0;
            std::string v12 = v20 + 16;
            *(void *)&v19[v13 - v14 + 8] = 0;
            *(_OWORD *)v105 = 0uLL;
            if (v13 == v14)
            {
              v125 = v20;
              v126 = v20 + 16;
              i = &v19[16 * v18];
            }
            else
            {
              do
              {
                long long v21 = *((_OWORD *)v13 - 1);
                v13 -= 16;
                *((_OWORD *)v20 - 1) = v21;
                v20 -= 16;
                *(void *)uint8x8_t v13 = 0;
                *((void *)v13 + 1) = 0;
              }
              while (v13 != v14);
              uint8x8_t v13 = v125;
              std::string v22 = v126;
              v125 = v20;
              v126 = v12;
              i = &v19[16 * v18];
              while (v22 != v13)
              {
                uint64_t v23 = (std::__shared_weak_count *)*((void *)v22 - 1);
                if (v23)
                {
                  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
                v22 -= 16;
              }
            }
            if (v13) {
              operator delete(v13);
            }
          }
          v126 = v12;
          unint64_t v35 = *(std::__shared_weak_count **)&v105[8];
          if (*(void *)&v105[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v105[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
            std::string::size_type v36 = __dst.__r_.__value_.__r.__words[0];
            __dst.__r_.__value_.__r.__words[0] = 0;
            if (v36) {
LABEL_61:
            }
              (*(void (**)(std::string::size_type))(*(void *)v36 + 8))(v36);
          }
          else
          {
            std::string::size_type v36 = __dst.__r_.__value_.__r.__words[0];
            __dst.__r_.__value_.__r.__words[0] = 0;
            if (v36) {
              goto LABEL_61;
            }
          }
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          MIL::IRObject::RemoveAttribute();
LABEL_75:
          if ((v115[23] & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_76;
        }
        char v123 = 11;
        strcpy((char *)v122, "unsupported");
        MIL::IRTensorValueType::MakeStringValue();
        *(void *)v105 = __dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        *(_OWORD *)v105 = 0uLL;
        __dst.__r_.__value_.__r.__words[0] = 0;
        std::string v24 = v126;
        if (v126 < i)
        {
          *(void *)v126 = 0;
          *((void *)v24 + 1) = 0;
          unint64_t v11 = v24 + 16;
          *(_OWORD *)v105 = 0uLL;
        }
        else
        {
          long long v25 = v125;
          uint64_t v26 = (v126 - v125) >> 4;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = i - v125;
          if ((i - v125) >> 3 > v27) {
            unint64_t v27 = v28 >> 3;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v30 = (char *)operator new(16 * v29);
          long long v31 = &v30[16 * v26];
          *(void *)long long v31 = 0;
          unint64_t v11 = v31 + 16;
          *(void *)&v30[v24 - v25 + 8] = 0;
          *(_OWORD *)v105 = 0uLL;
          if (v24 == v25)
          {
            v125 = v31;
            v126 = v31 + 16;
            i = &v30[16 * v29];
          }
          else
          {
            do
            {
              long long v32 = *((_OWORD *)v24 - 1);
              v24 -= 16;
              *((_OWORD *)v31 - 1) = v32;
              v31 -= 16;
              *(void *)std::string v24 = 0;
              *((void *)v24 + 1) = 0;
            }
            while (v24 != v25);
            std::string v24 = v125;
            uint64_t v33 = v126;
            v125 = v31;
            v126 = v11;
            for (i = &v30[16 * v29]; v33 != v24; v33 -= 16)
            {
              long long v34 = (std::__shared_weak_count *)*((void *)v33 - 1);
              if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
          }
          if (v24) {
            operator delete(v24);
          }
        }
        v126 = v11;
        unint64_t v37 = *(std::__shared_weak_count **)&v105[8];
        if (!*(void *)&v105[8]
          || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v105[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          std::string::size_type v38 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (!v38) {
            goto LABEL_74;
          }
LABEL_73:
          (*(void (**)(std::string::size_type))(*(void *)v38 + 8))(v38);
          goto LABEL_74;
        }
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        std::string::size_type v38 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v38) {
          goto LABEL_73;
        }
LABEL_74:
        if ((v123 & 0x80000000) == 0) {
          goto LABEL_75;
        }
        operator delete(v122[0]);
        if ((v115[23] & 0x80000000) == 0) {
          goto LABEL_8;
        }
LABEL_76:
        operator delete(*(void **)v115);
LABEL_8:
        long long v9 = (long long *)((char *)v9 + 24);
      }
      strcpy((char *)v119, "BackendSupport");
      HIBYTE(v119[1]) = 0;
      *(_DWORD *)v120 = v132[0];
      *(_DWORD *)&v120[3] = *(_DWORD *)((char *)v132 + 3);
      char v121 = 14;
      MIL::IRListValueType::MakeValue();
      uint64_t v117 = *(void *)v115;
      if (*(void *)v115) {
        operator new();
      }
      v118 = 0;
      *(void *)v115 = 0;
      MIL::IRObject::SetAttribute();
      int8x8_t v39 = v118;
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        uint64_t v40 = *(MIL::IRListValue **)v115;
        *(void *)v115 = 0;
        if (v40)
        {
LABEL_84:
          MIL::IRListValue::~IRListValue(v40);
          MEMORY[0x192FF16B0]();
        }
      }
      else
      {
        uint64_t v40 = *(MIL::IRListValue **)v115;
        *(void *)v115 = 0;
        if (v40) {
          goto LABEL_84;
        }
      }
      if (v121 < 0) {
        operator delete(v119[0]);
      }
      memset(v115, 0, sizeof(v115));
      int v116 = 1065353216;
      unint64_t v41 = (long long *)*((void *)v95 + 2);
      uint8x8_t v42 = (long long *)*((void *)v95 + 3);
      if (v41 == v42) {
        goto LABEL_151;
      }
      char v43 = 0;
      while (2)
      {
        while (2)
        {
          if (*((char *)v41 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v105, *(const std::string::value_type **)v41, *((void *)v41 + 1));
          }
          else
          {
            long long v44 = *v41;
            *(void *)&v105[16] = *((void *)v41 + 2);
            *(_OWORD *)v105 = v44;
          }
          int v45 = v105[23];
          if (v105[23] >= 0) {
            size_t v46 = v105[23];
          }
          else {
            size_t v46 = *(void *)&v105[8];
          }
          unint64_t v47 = v46 + 17;
          if (v46 + 17 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v47 >= 0x17)
          {
            uint64_t v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v47 | 7) != 0x17) {
              uint64_t v49 = v47 | 7;
            }
            uint64_t v50 = v49 + 1;
            p_dst = (std::string *)operator new(v49 + 1);
            __dst.__r_.__value_.__l.__size_ = v46 + 17;
            __dst.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            p_dst = &__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v46 + 17;
            if (!v46) {
              goto LABEL_108;
            }
          }
          if (v45 >= 0) {
            v51 = v105;
          }
          else {
            v51 = *(unsigned char **)v105;
          }
          memmove(p_dst, v51, v46);
LABEL_108:
          strcpy((char *)p_dst + v46, "_estimatedRuntime");
          uint64_t Attribute = MIL::IRObject::TryGetAttribute();
          std::string v53 = (MIL::IRValue *)Attribute;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (v53) {
              goto LABEL_112;
            }
LABEL_89:
            if ((v105[23] & 0x80000000) != 0) {
              goto LABEL_139;
            }
LABEL_90:
            unint64_t v41 = (long long *)((char *)v41 + 24);
            if (v41 == v42) {
              goto LABEL_140;
            }
            continue;
          }
          break;
        }
        if (!Attribute) {
          goto LABEL_89;
        }
LABEL_112:
        MIL::IRValue::AsTensor(v53);
        MIL::IRValue::GetScalar<double>();
        double v55 = v54;
        if ((v105[23] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v105, *(std::string::size_type *)&v105[8]);
        }
        else {
          std::string v113 = *(std::string *)v105;
        }
        MIL::IRTensorValueType::MakeStringValue();
        MIL::IRTensorValueType::MakeFloat64Value((uint64_t *)&v104, v96, v55);
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_impl<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>>(v115, (uint64_t *)&__dst, (uint64_t *)&v104);
        std::string::size_type v56 = v104.__r_.__value_.__r.__words[0];
        v104.__r_.__value_.__r.__words[0] = 0;
        if (v56) {
          (*(void (**)(std::string::size_type))(*(void *)v56 + 8))(v56);
        }
        std::string::size_type v57 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v57) {
          (*(void (**)(std::string::size_type))(*(void *)v57 + 8))(v57);
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        int v58 = v105[23];
        if (v105[23] >= 0) {
          size_t v59 = v105[23];
        }
        else {
          size_t v59 = *(void *)&v105[8];
        }
        unint64_t v60 = v59 + 17;
        if (v59 + 17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v60 >= 0x17)
        {
          uint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17) {
            uint64_t v62 = v60 | 7;
          }
          uint64_t v63 = v62 + 1;
          uint64_t v61 = (std::string *)operator new(v62 + 1);
          __dst.__r_.__value_.__l.__size_ = v59 + 17;
          __dst.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          uint64_t v61 = &__dst;
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v59 + 17;
          if (!v59) {
            goto LABEL_135;
          }
        }
        if (v58 >= 0) {
          v64 = v105;
        }
        else {
          v64 = *(unsigned char **)v105;
        }
        memmove(v61, v64, v59);
LABEL_135:
        strcpy((char *)v61 + v59, "_estimatedRuntime");
        MIL::IRObject::RemoveAttribute();
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          char v43 = 1;
          if ((v105[23] & 0x80000000) != 0) {
            goto LABEL_139;
          }
          goto LABEL_90;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        char v43 = 1;
        if ((v105[23] & 0x80000000) == 0) {
          goto LABEL_90;
        }
LABEL_139:
        operator delete(*(void **)v105);
        unint64_t v41 = (long long *)((char *)v41 + 24);
        if (v41 != v42) {
          continue;
        }
        break;
      }
LABEL_140:
      if (v43)
      {
        strcpy(__p, "EstimatedRuntime");
        int v110 = v130;
        __int16 v111 = v131;
        char v112 = 16;
        MIL::IRDictionaryValueType::MakeValue();
        uint64_t v107 = *(void *)v105;
        if (*(void *)v105) {
          operator new();
        }
        v108 = 0;
        *(void *)v105 = 0;
        MIL::IRObject::SetAttribute();
        v65 = v108;
        if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          __int16 v66 = *(MIL::IRDictionaryValue **)v105;
          *(void *)v105 = 0;
          if (v66)
          {
LABEL_148:
            MIL::IRDictionaryValue::~IRDictionaryValue(v66);
            MEMORY[0x192FF16B0]();
          }
        }
        else
        {
          __int16 v66 = *(MIL::IRDictionaryValue **)v105;
          *(void *)v105 = 0;
          if (v66) {
            goto LABEL_148;
          }
        }
        if (v112 < 0) {
          operator delete(*(void **)__p);
        }
      }
LABEL_151:
      memset(v105, 0, sizeof(v105));
      int v106 = 1065353216;
      uint64_t v68 = (long long *)*((void *)v95 + 2);
      uint64_t v67 = (long long *)*((void *)v95 + 3);
      if (v68 == v67) {
        goto LABEL_219;
      }
      char v69 = 0;
      while (2)
      {
        while (2)
        {
          if (*((char *)v68 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v68, *((void *)v68 + 1));
          }
          else
          {
            long long v70 = *v68;
            __dst.__r_.__value_.__r.__words[2] = *((void *)v68 + 2);
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v70;
          }
          int v71 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = __dst.__r_.__value_.__l.__size_;
          }
          unint64_t v73 = size + 18;
          if (size + 18 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v73 >= 0x17)
          {
            uint64_t v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v73 | 7) != 0x17) {
              uint64_t v75 = v73 | 7;
            }
            uint64_t v76 = v75 + 1;
            v74 = (std::string *)operator new(v75 + 1);
            v104.__r_.__value_.__l.__size_ = size + 18;
            v104.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
            v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
          }
          else
          {
            memset(&v104, 0, sizeof(v104));
            v74 = &v104;
            *((unsigned char *)&v104.__r_.__value_.__s + 23) = size + 18;
            if (!size) {
              goto LABEL_172;
            }
          }
          if (v71 >= 0) {
            uint64_t v77 = &__dst;
          }
          else {
            uint64_t v77 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          memmove(v74, v77, size);
LABEL_172:
          strcpy((char *)v74 + size, "_validationMessage");
          uint64_t v78 = MIL::IRObject::TryGetAttribute();
          v79 = (MIL::IRValue *)v78;
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v104.__r_.__value_.__l.__data_);
            if (v79) {
              goto LABEL_176;
            }
LABEL_153:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_211;
            }
LABEL_154:
            uint64_t v68 = (long long *)((char *)v68 + 24);
            if (v68 == v67) {
              goto LABEL_212;
            }
            continue;
          }
          break;
        }
        if (!v78) {
          goto LABEL_153;
        }
LABEL_176:
        MIL::IRValue::AsTensor(v79);
        MIL::IRValue::GetScalar<std::string>();
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v103, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v103 = __dst;
        }
        MIL::IRTensorValueType::MakeStringValue();
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v101, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
        }
        else {
          std::string v101 = v104;
        }
        MIL::IRTensorValueType::MakeStringValue();
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_impl<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>>(v105, (uint64_t *)&v98, &v102);
        uint64_t v80 = v102;
        uint64_t v102 = 0;
        if (v80) {
          (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v101.__r_.__value_.__l.__data_);
          v81 = v98;
          v98 = 0;
          if (v81) {
LABEL_186:
          }
            (*(void (**)(void *))(*(void *)v81 + 8))(v81);
        }
        else
        {
          v81 = v98;
          v98 = 0;
          if (v81) {
            goto LABEL_186;
          }
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        int v82 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v83 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v83 = __dst.__r_.__value_.__l.__size_;
        }
        unint64_t v84 = v83 + 18;
        if (v83 + 18 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v84 >= 0x17)
        {
          uint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17) {
            uint64_t v86 = v84 | 7;
          }
          uint64_t v87 = v86 + 1;
          v85 = operator new(v86 + 1);
          size_t v99 = v83 + 18;
          unint64_t v100 = v87 | 0x8000000000000000;
          v98 = v85;
        }
        else
        {
          size_t v99 = 0;
          unint64_t v100 = 0;
          v98 = 0;
          v85 = &v98;
          HIBYTE(v100) = v83 + 18;
          if (!v83) {
            goto LABEL_203;
          }
        }
        if (v82 >= 0) {
          v88 = &__dst;
        }
        else {
          v88 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        memmove(v85, v88, v83);
LABEL_203:
        strcpy((char *)v85 + v83, "_validationMessage");
        MIL::IRObject::RemoveAttribute();
        if (SHIBYTE(v100) < 0)
        {
          operator delete(v98);
          if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_205;
          }
        }
        else if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_205:
          char v69 = 1;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_211;
          }
          goto LABEL_154;
        }
        operator delete(v104.__r_.__value_.__l.__data_);
        char v69 = 1;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_154;
        }
LABEL_211:
        operator delete(__dst.__r_.__value_.__l.__data_);
        uint64_t v68 = (long long *)((char *)v68 + 24);
        if (v68 != v67) {
          continue;
        }
        break;
      }
LABEL_212:
      if (v69)
      {
        strcpy((char *)v97, "ValidationMessage");
        *(_DWORD *)((char *)&v97[2] + 2) = v128;
        BYTE6(v97[2]) = v129;
        HIBYTE(v97[2]) = 17;
        MIL::IRDictionaryValueType::MakeValue();
        if (__dst.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        __dst.__r_.__value_.__r.__words[0] = 0;
        MIL::IRObject::SetAttribute();
        v89 = (MIL::IRDictionaryValue *)__dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v89)
        {
          MIL::IRDictionaryValue::~IRDictionaryValue(v89);
          MEMORY[0x192FF16B0]();
        }
        if (SHIBYTE(v97[2]) < 0) {
          operator delete(v97[0]);
        }
      }
LABEL_219:
      std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v105);
      std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v115);
      v90 = v125;
      if (v125)
      {
        v91 = v126;
        uint64_t v7 = v125;
        if (v126 != v125)
        {
          do
          {
            v92 = (std::__shared_weak_count *)*((void *)v91 - 1);
            if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
            v91 -= 16;
          }
          while (v91 != v90);
          uint64_t v7 = v125;
        }
        v126 = v90;
        operator delete(v7);
      }
      uint64_t v6 = v94 + 16;
    }
    while (v94 + 16 != v93);
  }
}

void sub_1924912B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  std::unique_ptr<MIL::IRDictionaryValue const>::~unique_ptr[abi:ne180100]((MIL::IRDictionaryValue **)&a58);
  if (a30 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a44);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a62);
  uint64_t v64 = *(void *)(v62 - 160);
  if (v64)
  {
    uint64_t v65 = *(void *)(v62 - 152);
    __int16 v66 = *(void **)(v62 - 160);
    if (v65 != v64)
    {
      do
      {
        uint64_t v67 = *(std::__shared_weak_count **)(v65 - 8);
        if (v67)
        {
          if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v65 -= 16;
      }
      while (v65 != v64);
      __int16 v66 = *(void **)(v62 - 160);
    }
    *(void *)(v62 - 152) = v64;
    operator delete(v66);
  }
  _Unwind_Resume(a1);
}

MIL::IRDictionaryValue **std::unique_ptr<MIL::IRDictionaryValue const>::~unique_ptr[abi:ne180100](MIL::IRDictionaryValue **a1)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

BOOL Espresso::AOT::MILSegmenterAnalytics::Serialize(Espresso::AOT::MILSegmenterAnalytics *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    Espresso::AOT::MILSegmenterAnalytics::ConsolidateMetadata(this);
    std::__fs::filesystem::path::__string_view v5 = std::__fs::filesystem::path::__parent_path(a2);
    if (v5.__size_ >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v5.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v7 = v5.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5.__size_;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5.__size_;
      p_dst = &__dst;
      if (!v5.__size_)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5.__size_] = 0;
        v25.__pn_ = __dst;
        std::__fs::filesystem::__create_directories(&v25, 0);
        if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v25.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_12;
          }
        }
        else if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_12:
          std::string __dst = a2->__pn_;
          goto LABEL_15;
        }
        std::string::__init_copy_ctor_external(&__dst, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
LABEL_15:
        std::__fs::filesystem::path::__string_view v9 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&__dst);
        if (v9.__size_)
        {
          std::string::size_type v10 = (std::string::size_type)&__dst;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v10 = __dst.__r_.__value_.__r.__words[0];
          }
          std::string::erase(&__dst, (std::string::size_type)&v9.__data_[-v10], 0xFFFFFFFFFFFFFFFFLL);
        }
        memset(&v24, 0, sizeof(v24));
        std::string::append[abi:ne180100]<char const*,0>(&v24, (std::string *)"weights", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v24, (uint64_t)&__dst, &v25);
        std::__fs::filesystem::__create_directories(&v25, 0);
        if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v25.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_21;
          }
        }
        else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_21;
        }
        operator delete(v24.__r_.__value_.__l.__data_);
LABEL_21:
        memset(&v27, 0, sizeof(v27));
        std::string::append[abi:ne180100]<char const*,0>(&v27, (std::string *)"weights", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v27, (uint64_t)&__dst, (std::__fs::filesystem::path *)&buf);
        memset(&__p, 0, sizeof(__p));
        std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)"weights.bin", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&buf, (std::__fs::filesystem::path *)&v24);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v25.__pn_ = v24;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_23;
          }
LABEL_31:
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_24:
            operator delete(buf.__r_.__value_.__l.__data_);
            if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_25;
            }
            goto LABEL_33;
          }
LABEL_32:
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_25:
            operator delete(v27.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_26:
              std::string::__init_copy_ctor_external(&v24, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
              goto LABEL_35;
            }
LABEL_34:
            std::string v24 = __dst;
LABEL_35:
            std::string v12 = Espresso::espresso_os_log_subsystem(0, v11);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              std::string::size_type v14 = &v25;
              if ((v25.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v14 = (std::__fs::filesystem::path *)v25.__pn_.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
              _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "[MILSegmenterAnalytics::Serialize] Copy weights to \"%s\" ", (uint8_t *)&buf, 0xCu);
            }
            uint64_t v15 = Espresso::espresso_os_log_subsystem(0, v13);
            if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
              goto LABEL_48;
            }
            unint64_t v16 = (void *)((char *)this + 40);
            if (*((char *)this + 63) < 0)
            {
              unint64_t v16 = (void *)*v16;
              if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_42;
              }
            }
            else if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_42:
              std::string buf = a2->__pn_;
              goto LABEL_45;
            }
            std::string::__init_copy_ctor_external(&buf, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
LABEL_45:
            p_std::string buf = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            LODWORD(v27.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
            WORD2(v27.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
            _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "[MILSegmenterAnalytics::Serialize] Analytics file for function %s: %s ", (uint8_t *)&v27, 0x16u);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              uint64_t v18 = *((void *)this + 1);
              if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_49;
              }
              goto LABEL_51;
            }
LABEL_48:
            uint64_t v18 = *((void *)this + 1);
            if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_49:
              std::string pn = a2->__pn_;
              goto LABEL_52;
            }
LABEL_51:
            std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
LABEL_52:
            if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v21, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
            }
            else {
              std::string v21 = v24;
            }
            if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v20, v25.__pn_.__r_.__value_.__l.__data_, v25.__pn_.__r_.__value_.__l.__size_);
            }
            else {
              std::string v20 = v25.__pn_;
            }
            Espresso::MILUtil::SerializeProgram(v18, (uint64_t)&pn, (uint64_t)&v21, (uint64_t)&v20, 0x100000004, 0);
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v20.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_60:
                if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_61;
                }
                goto LABEL_67;
              }
            }
            else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_60;
            }
            operator delete(v21.__r_.__value_.__l.__data_);
            if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_61:
              if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_62;
              }
              goto LABEL_68;
            }
LABEL_67:
            operator delete(pn.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_62:
              if ((SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_63;
              }
              goto LABEL_69;
            }
LABEL_68:
            operator delete(v24.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_63:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return v2 == 0;
              }
LABEL_70:
              operator delete(__dst.__r_.__value_.__l.__data_);
              return v2 == 0;
            }
LABEL_69:
            operator delete(v25.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return v2 == 0;
            }
            goto LABEL_70;
          }
LABEL_33:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_26;
          }
          goto LABEL_34;
        }
        std::string::__init_copy_ctor_external(&v25.__pn_, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v24.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_31;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_31;
        }
LABEL_23:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_24;
        }
        goto LABEL_32;
      }
    }
    memmove(p_dst, v5.__data_, v5.__size_);
    goto LABEL_10;
  }
  return v2 == 0;
}

void sub_192491C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a42);
LABEL_6:
  if (*(char *)(v47 - 137) < 0) {
    operator delete(*(void **)(v47 - 160));
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_unique(void *a1, void *a2)
{
  uint64_t v4 = a1 + 3;
  unint64_t v5 = MIL::IRValueMapHasher::operator()();
  a2[1] = v5;
  __n128 result = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5);
  if (!result)
  {
    int8x8_t v7 = (int8x8_t)a1[1];
    unint64_t v8 = a2[1];
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v7) {
        v8 %= *(void *)&v7;
      }
    }
    else
    {
      v8 &= *(void *)&v7 - 1;
    }
    std::string::size_type v10 = *(void **)(*a1 + 8 * v8);
    if (v10)
    {
      *a2 = *v10;
    }
    else
    {
      *a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v8) = a1 + 2;
      if (!*a2)
      {
LABEL_15:
        ++*v4;
        return a2;
      }
      unint64_t v11 = *(void *)(*a2 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v7) {
          v11 %= *(void *)&v7;
        }
      }
      else
      {
        v11 &= *(void *)&v7 - 1;
      }
      std::string::size_type v10 = (void *)(*a1 + 8 * v11);
    }
    void *v10 = a2;
    goto LABEL_15;
  }
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[5];
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_23;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 <= a2) {
      unint64_t v6 = a2 % v3;
    }
    else {
      unint64_t v6 = a2;
    }
    int8x8_t v7 = *(void **)(*(void *)a1 + 8 * v6);
    if (!v7) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v6 = (v3 - 1) & a2;
    int8x8_t v7 = *(void **)(*(void *)a1 + 8 * v6);
    if (!v7) {
      goto LABEL_23;
    }
  }
  unint64_t v8 = (void *)*v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v10 = v8[1];
        if (v10 == a2)
        {
          if (MIL::IRValueMapEq::operator()()) {
            return v8;
          }
        }
        else if ((v10 & (v3 - 1)) != v6)
        {
          goto LABEL_23;
        }
        unint64_t v8 = (void *)*v8;
        if (!v8) {
          goto LABEL_23;
        }
      }
    }
    do
    {
      unint64_t v9 = v8[1];
      if (v9 == a2)
      {
        if (MIL::IRValueMapEq::operator()()) {
          return v8;
        }
      }
      else
      {
        if (v9 >= v3) {
          v9 %= v3;
        }
        if (v9 != v6) {
          break;
        }
      }
      unint64_t v8 = (void *)*v8;
    }
    while (v8);
  }
LABEL_23:
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (v3 && (float)(v12 * (float)v3) >= v11) {
    return 0;
  }
  BOOL v13 = 1;
  if (v3 >= 3) {
    BOOL v13 = (v3 & (v3 - 1)) != 0;
  }
  unint64_t v14 = v13 | (2 * v3);
  unint64_t v15 = vcvtps_u32_f32(v11 / v12);
  if (v14 <= v15) {
    size_t prime = v15;
  }
  else {
    size_t prime = v14;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  int8x8_t v17 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v17) {
    goto LABEL_47;
  }
  if (prime < *(void *)&v17)
  {
    size_t v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v17 < 3uLL || (uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      size_t v21 = std::__next_prime(v18);
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime >= *(void *)&v17) {
        return 0;
      }
    }
    else
    {
      uint64_t v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2) {
        size_t v18 = v20;
      }
      if (prime <= v18) {
        size_t prime = v18;
      }
      if (prime >= *(void *)&v17) {
        return 0;
      }
    }
LABEL_47:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

MIL::IRDictionaryValue *std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(MIL::IRDictionaryValue **)(a1 + 24);
  if (result)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DBFBF4) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DBFBF4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DBFBF4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DBFBF4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t Espresso::AOT::MILSegmenterAnalytics::UpdateWithValidationResults()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void Espresso::AOT::MILSegmenterAnalytics::UpdateWithOpToBackend(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "MIL Compiler Analytics detected a mismatch between theprogram its handling and the op to backend mapping passed", buf, 2u);
}

uint64_t Espresso::AOT::MILSegmenterAnalytics::ConsolidateMetadata()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

float Espresso::AOT::DTrees::conv_transposeAneFp(double *a1)
{
  if (*a1 > 1.4165) {
    return 6414.1;
  }
  if (a1[4] <= 0.05469) {
    return 37832.0;
  }
  float result = 15205.0;
  if (a1[1] > 0.8282) {
    return 16850.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneIp(double *a1)
{
  if (*a1 > 1.4165) {
    return 6498.5;
  }
  if (a1[4] <= 0.05469) {
    return 12703.0;
  }
  float result = 3470.5;
  if (a1[1] > 0.8282) {
    return 12762.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneJp(double *a1)
{
  if (*a1 > 1.4165) {
    return 7109.0;
  }
  if (a1[4] <= 0.05469) {
    return 14264.0;
  }
  float result = 3896.5;
  if (a1[1] > 0.8282) {
    return 12308.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneKp(double *a1)
{
  if (*a1 > 1.4165) {
    return 7343.1;
  }
  if (a1[4] <= 0.05469) {
    return 14408.0;
  }
  float result = 3935.8;
  if (a1[1] > 0.8282) {
    return 12153.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneGp(double *a1)
{
  if (*a1 > 1.4165) {
    return 6728.0;
  }
  if (a1[4] <= 0.05469) {
    return 14409.0;
  }
  float result = 5435.5;
  if (a1[1] > 0.8282) {
    return 5001.5;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneHp(double *a1)
{
  if (*a1 > 1.4165) {
    return 6944.2;
  }
  if (a1[4] <= 0.05469) {
    return 14409.0;
  }
  float result = 5435.5;
  if (a1[1] > 0.8282) {
    return 5005.8;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuFp(double *a1)
{
  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 184.02;
    }
    else
    {
      float result = 54.896;
      if (a1[1] > 0.8282) {
        return 271.98;
      }
    }
  }
  else
  {
    float result = 497.72;
    if (*a1 > 400.0) {
      return 22419.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuIp(double *a1)
{
  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 122.57;
    }
    else
    {
      float result = 633.97;
      if (a1[1] > 0.8282) {
        return 503.17;
      }
    }
  }
  else
  {
    float result = 409.9;
    if (*a1 > 400.0) {
      return 22419.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuJp(double *a1)
{
  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 1388.0;
    }
    else
    {
      float result = 54.577;
      if (a1[1] > 0.8282) {
        return 174.7;
      }
    }
  }
  else
  {
    float result = 498.98;
    if (*a1 > 400.0) {
      return 22419.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuKp(double *a1)
{
  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 1388.0;
    }
    else
    {
      float result = 1387.9;
      if (a1[1] > 0.8282) {
        return 420.21;
      }
    }
  }
  else
  {
    float result = 491.59;
    if (*a1 > 400.0) {
      return 22419.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuGp(double *a1)
{
  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 314.79;
    }
    else
    {
      float result = 24.398;
      if (a1[1] > 0.8282) {
        return 702.29;
      }
    }
  }
  else
  {
    float result = 806.45;
    if (*a1 > 400.0) {
      return 22419.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuHp(double *a1)
{
  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 108.24;
    }
    else
    {
      float result = 1461.9;
      if (a1[1] > 0.8282) {
        return 416.77;
      }
    }
  }
  else
  {
    float result = 504.71;
    if (*a1 > 400.0) {
      return 22419.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuFp(double *a1)
{
  if (*a1 > 1.4165) {
    return 1162.4;
  }
  if (a1[4] <= 0.05469) {
    return 491.52;
  }
  float result = 761.62;
  if (a1[1] > 0.8282) {
    return 2533.8;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuIp(double *a1)
{
  if (*a1 > 1.4165) {
    return 843.22;
  }
  if (a1[4] <= 0.05469) {
    return 2620.0;
  }
  float result = 1860.5;
  if (a1[1] > 0.8282) {
    return 729.21;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuJp(double *a1)
{
  if (*a1 > 1.4165) {
    return 3282.6;
  }
  if (a1[4] <= 0.05469) {
    return 10619.0;
  }
  float result = 10621.0;
  if (a1[1] > 0.8282) {
    return 2205.7;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuKp(double *a1)
{
  if (*a1 > 1.4165) {
    return 1705.4;
  }
  if (a1[4] <= 0.05469) {
    return 1350.2;
  }
  float result = 5310.3;
  if (a1[1] > 0.8282) {
    return 1314.2;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuGp(double *a1)
{
  if (*a1 > 1.4165) {
    return 2161.3;
  }
  if (a1[4] <= 0.05469) {
    return 2733.3;
  }
  float result = 5609.8;
  if (a1[1] > 0.8282) {
    return 2191.6;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuHp(double *a1)
{
  if (*a1 > 1.4165) {
    return 3511.1;
  }
  if (a1[4] <= 0.05469) {
    return 13600.0;
  }
  float result = 4449.5;
  if (a1[1] > 0.8282) {
    return 7549.2;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneCp(uint64_t a1)
{
  float result = 8222.9;
  if (*(double *)(a1 + 88) > 72.0) {
    return 20895.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneDp(uint64_t a1)
{
  float result = 10828.0;
  if (*(double *)(a1 + 88) > 72.0) {
    return 25771.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneEp(uint64_t a1)
{
  float result = 9358.8;
  if (*(double *)(a1 + 88) > 72.0) {
    return 30035.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuCp(double *a1)
{
  float v1 = 152.95;
  if (a1[11] > 72.0) {
    float v1 = 476.4;
  }
  float result = 22419.0;
  if (*a1 <= 400.0) {
    return v1;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuDp(double *a1)
{
  float v1 = 128.68;
  if (a1[11] > 72.0) {
    float v1 = 551.53;
  }
  float result = 22419.0;
  if (*a1 <= 400.0) {
    return v1;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuEp(double *a1)
{
  float v1 = 207.86;
  if (a1[11] > 72.0) {
    float v1 = 569.22;
  }
  float result = 22419.0;
  if (*a1 <= 400.0) {
    return v1;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuCp(uint64_t a1)
{
  float result = 86.277;
  if (*(double *)(a1 + 88) > 72.0) {
    return 322.73;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuDp(uint64_t a1)
{
  float result = 151.11;
  if (*(double *)(a1 + 88) > 72.0) {
    return 478.52;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuEp(uint64_t a1)
{
  float result = 83.662;
  if (*(double *)(a1 + 88) > 72.0) {
    return 453.79;
  }
  return result;
}

uint64_t std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  int v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      uint64_t v4 = *((unsigned int *)v2 + 16);
      if (v4 != -1) {
        ((void (*)(char *, void **))off_1EE39B858[v4])(&v7, v2 + 5);
      }
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint8x8_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

float Espresso::AOT::DTrees::upsample_bilinearAneFp()
{
  return 39.659;
}

float Espresso::AOT::DTrees::upsample_bilinearAneIp()
{
  return 33.18;
}

float Espresso::AOT::DTrees::upsample_bilinearAneJp(uint64_t a1)
{
  float result = 31.012;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 31.006;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearAneKp(uint64_t a1)
{
  float result = 31.231;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 31.225;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearAneGp(uint64_t a1)
{
  float result = 39.41;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 39.404;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearAneHp()
{
  return 39.293;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuFp(uint64_t a1)
{
  float result = 15.213;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 0.22808;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuIp(uint64_t a1)
{
  float result = 10.14;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 0.19378;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuJp(uint64_t a1)
{
  float result = 10.14;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 0.18542;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuKp(uint64_t a1)
{
  float result = 10.14;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 0.19812;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuGp(uint64_t a1)
{
  float result = 15.213;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 0.21885;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuHp(uint64_t a1)
{
  float result = 15.213;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 0.14238;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuFp(uint64_t a1)
{
  float result = 21.897;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 18.894;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuIp(uint64_t a1)
{
  float result = 14.606;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 9.6933;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuJp(uint64_t a1)
{
  float result = 2.3458;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 57.74;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuKp(uint64_t a1)
{
  float result = 0.33273;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 12.962;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuGp(uint64_t a1)
{
  float result = 43.773;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 32.683;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuHp(uint64_t a1)
{
  float result = 87.545;
  if (*(double *)(a1 + 32) > 0.07326) {
    return 14.064;
  }
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearAneCp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearAneDp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearAneEp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuCp()
{
  return 0.01;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuDp()
{
  return 0.01;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuEp()
{
  return 0.01;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuCp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuDp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuEp()
{
  return 0.37;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    char v7 = (uint64_t *)(a2 + 16);
  }
  else {
    char v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  float result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    unint64_t v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      unint64_t v14 = (void *)(*a1 + 8 * v15);
    }
    *unint64_t v14 = a2;
    goto LABEL_21;
  }
  return result;
}

std::string *Espresso::AOT::MILCompilerForE5MinimalCpu::MILCompilerForE5MinimalCpu(std::string *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v21, a2);
  unint64_t v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  unint64_t v9 = *(void **)(a3 + 24);
  v19[0] = v8;
  v19[1] = v9;
  int v20 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v19;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v21, (uint64_t)__p);
  int8x8_t v11 = (void **)v19[0];
  if (v19[0])
  {
    do
    {
      char v16 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_17:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v11);
      int8x8_t v11 = v16;
    }
    while (v16);
  }
  unint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v21);
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE36B600;
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(a2);
  unint64_t v14 = a1 + 11;
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)Output, *(void *)(Output + 8));
  }
  else
  {
    long long v15 = *(_OWORD *)Output;
    a1[11].__r_.__value_.__r.__words[2] = *(void *)(Output + 16);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  a1[12].__r_.__value_.__r.__words[0] = 0;
  a1[12].__r_.__value_.__l.__size_ = 0;
  a1[12].__r_.__value_.__r.__words[2] = 0;
  return a1;
}

void sub_1924936A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_1924936C0(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::ExtractOptions(Espresso::AOT::MILCompilerForE5MinimalCpu *this@<X0>, std::string *a2@<X8>)
{
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    unint64_t v6 = *(const std::string::value_type **)Output;
    std::string::size_type v7 = *(void *)(Output + 8);
    std::string::__init_copy_ctor_external(a2, v6, v7);
  }
  else
  {
    long long v5 = *(_OWORD *)Output;
    a2->__r_.__value_.__r.__words[2] = *(void *)(Output + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
}

uint64_t Espresso::AOT::MILCompilerForE5MinimalCpu::Options::AssertValid(uint64_t this)
{
  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(this + 23)) {
      return this;
    }
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!*(void *)(this + 8)) {
    goto LABEL_5;
  }
  return this;
}

void sub_1924937A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long long>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v3 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    std::string::size_type v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_192493830(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::WriteInterleavedEmbeddingsFile<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  MEMORY[0x192FEF4E0](v12, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  MIL::Blob::StorageReader::GetDataView<float>();
  unint64_t v6 = v5;
  if (v5)
  {
    if (v5 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v7 = operator new(4 * v5);
    bzero(v7, 4 * v6);
  }
  unint64_t v8 = *(const void **)a4;
  size_t v9 = *(void *)(a4 + 8) - *(void *)a4;
  if (v9)
  {
    if ((v9 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(v9);
    memcpy(__p, v8, v9);
  }
  Espresso::AOT::InterleaveSpan<float>();
}

void sub_192493D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  MEMORY[0x192FF16B0](v44, 0x1093C402D7449D9);
  if (v43) {
    operator delete(v43);
  }
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&a37);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::Run(uint64_t a1, uint64_t a2, std::string::size_type *a3)
{
  uint64_t v51 = 0x2B23835800000000;
  long long v52 = 0u;
  long long v53 = 0u;
  kdebug_trace();
  std::string::size_type v7 = a3;
  std::string::size_type v6 = *a3;
  if (v7[1] - v6 != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Too many or too few entry points for E5MinimalCpu.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  long long v48 = 0u;
  long long v49 = 0u;
  int v50 = 1065353216;
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string::size_type))(*(void *)a2 + 64))(&__dst, a2, v6);
  v47.__pn_.__r_.__value_.__r.__words[0] = v6;
  unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v48, (unsigned __int8 *)v6, (uint64_t)&std::piecewise_construct, (long long **)&v47);
  long long v9 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  unint64_t v10 = (std::__shared_weak_count *)*((void *)v8 + 6);
  *(_OWORD *)(v8 + 40) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  size_t size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  memset(&v47, 0, sizeof(v47));
  char v12 = *(unsigned char *)(a1 + 287);
  if (v12 >= 0) {
    uint64_t v13 = (std::string *)(a1 + 264);
  }
  else {
    uint64_t v13 = *(std::string **)(a1 + 264);
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a1 + 287);
  }
  else {
    uint64_t v14 = *(void *)(a1 + 272);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v47.__pn_, v13, (std::string *)((char *)v13 + v14));
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v15 = *(unsigned __int8 *)(v6 + 23);
  if ((v15 & 0x80u) == 0) {
    char v16 = (std::string *)v6;
  }
  else {
    char v16 = *(std::string **)v6;
  }
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(v6 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v16, (std::string *)((char *)v16 + v15));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v47, &v46);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__create_directories(&v46, 0);
  uint64_t v45 = 0;
  int8x8_t v17 = (*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 48))(&v43, a2);
  if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, v46.__pn_.__r_.__value_.__l.__data_, v46.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v46.__pn_;
  }
  Espresso::AOT::MILCompilerForE5MinimalCpu::TransformInterleavedEmbeddings((uint64_t)v17, &v43, (uint64_t)&v48);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  size_t v18 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"fragment.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v46, &v42);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::__string_view v19 = std::__fs::filesystem::path::__parent_path(&v47);
  if (v19.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v21 = (v19.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v21 = v19.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v22 = v21 + 1;
    p_dst = operator new(v21 + 1);
    __dst.__r_.__value_.__l.__size_ = v19.__size_;
    __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_38;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19.__size_;
  p_dst = &__dst;
  if (v19.__size_) {
LABEL_38:
  }
    memmove(p_dst, v19.__data_, v19.__size_);
  *((unsigned char *)p_dst + v19.__size_) = 0;
  __base.__pn_ = __dst;
  std::__fs::filesystem::path::lexically_relative(&v41, &v42, &__base);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  }
  memset(&__base, 0, sizeof(__base));
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"weights.bin", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&v46, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    std::__fs::filesystem::path __base = v41;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&__base.__pn_, v41.__pn_.__r_.__value_.__l.__data_, v41.__pn_.__r_.__value_.__l.__size_);
LABEL_46:
  uint64_t v23 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)uint64_t v23 = *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_;
  *(void *)(a1 + 304) = *((void *)&__base.__pn_.__r_.__value_.__l + 2);
  Espresso::AOT::MakeIRProgramWithFunctions((uint64_t)&v48, 0, &v39);
  uint64_t v24 = v39;
  if (SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v42.__pn_.__r_.__value_.__l.__data_, v42.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v42.__pn_;
  }
  if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v37, v46.__pn_.__r_.__value_.__l.__data_, v46.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v37 = v46.__pn_;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v36, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v36 = __dst;
  }
  Espresso::MILUtil::SerializeProgram(v24, (uint64_t)&pn, (uint64_t)&v37, (uint64_t)&v36, 0x100000004, 0);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_59:
      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_60;
      }
LABEL_64:
      operator delete(pn.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_65;
    }
  }
  else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_64;
  }
LABEL_60:
  if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_61:
    std::string __p = v42.__pn_;
    goto LABEL_66;
  }
LABEL_65:
  std::string::__init_copy_ctor_external(&__p, v42.__pn_.__r_.__value_.__l.__data_, v42.__pn_.__r_.__value_.__l.__size_);
LABEL_66:
  __base.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&__base, 0);
  unsigned __int8 v25 = v55;
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_68;
    }
LABEL_71:
    operator delete(__p.__r_.__value_.__l.__data_);
    int v26 = v25;
    if (v25 == 255) {
      goto LABEL_102;
    }
    goto LABEL_72;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_71;
  }
LABEL_68:
  int v26 = v25;
  if (v25 == 255)
  {
LABEL_102:
    uint64_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Failed in serializing MIL fragment on disk.");
    __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_72:
  if (!v26) {
    goto LABEL_102;
  }
  uint64_t v27 = v39;
  uint64_t v39 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_77:
      if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_78;
      }
      goto LABEL_86;
    }
  }
  else if ((SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(v41.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_78:
    uint64_t v28 = v45;
    if (!v45) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
LABEL_86:
  operator delete(v42.__pn_.__r_.__value_.__l.__data_);
  uint64_t v28 = v45;
  if (v45) {
LABEL_79:
  }
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
LABEL_80:
  if ((SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_82;
    }
LABEL_89:
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
    uint64_t v29 = (void **)v49;
    if ((void)v49) {
      goto LABEL_93;
    }
    goto LABEL_97;
  }
  operator delete(v46.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_89;
  }
LABEL_82:
  uint64_t v29 = (void **)v49;
  if ((void)v49)
  {
    do
    {
      while (1)
      {
LABEL_93:
        uint64_t v30 = (void **)*v29;
        long long v31 = (std::__shared_weak_count *)v29[6];
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        if (*((char *)v29 + 39) < 0) {
          break;
        }
        operator delete(v29);
        uint64_t v29 = v30;
        if (!v30) {
          goto LABEL_97;
        }
      }
      operator delete(v29[2]);
      operator delete(v29);
      uint64_t v29 = v30;
    }
    while (v30);
  }
LABEL_97:
  long long v32 = (void *)v48;
  *(void *)&long long v48 = 0;
  if (v32) {
    operator delete(v32);
  }
  if (E5RT::g_trace_analysis_level >= v51) {
    kdebug_trace();
  }
}

void sub_1924946F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a36) {
    (*(void (**)(uint64_t))(*(void *)a36 + 8))(a36);
  }
  if (*(char *)(v63 - 73) < 0) {
    operator delete(*(void **)(v63 - 96));
  }
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a57) {
    (*(void (**)(uint64_t))(*(void *)a57 + 8))(a57);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (*(char *)(v63 - 177) < 0) {
    operator delete(*(void **)(v63 - 200));
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v63 - 176);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v63 - 136));
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::GetOutputPaths(Espresso::AOT::MILCompilerForE5MinimalCpu *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 311) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 36), *((void *)this + 37));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)this + 12);
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192494A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForE5MinimalCpu::GetOptions(Espresso::AOT::MILCompilerForE5MinimalCpu *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::~MILCompilerForE5MinimalCpu(void **this)
{
  Espresso::AOT::MILCompilerForE5MinimalCpu::~MILCompilerForE5MinimalCpu(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  Espresso::AOT::AOTCompilerBackend *v3;
  void **v4;
  void *v5;
  uint64_t vars8;

  *this = &unk_1EE36B600;
  if (*((char *)this + 311) < 0)
  {
    operator delete(this[36]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_3:
      *this = &unk_1EE36B370;
      int v2 = (void **)this[29];
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v4 = (void **)this[30];
      if (v4 == v2)
      {
        this[30] = v2;
        operator delete(v2);
        if (*((char *)this + 231) < 0) {
          goto LABEL_18;
        }
      }
      else
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v2);
        unint64_t v5 = this[29];
        this[30] = v2;
        operator delete(v5);
        if (*((char *)this + 231) < 0) {
          goto LABEL_18;
        }
      }
LABEL_5:
      if ((*((char *)this + 207) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_19;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[33]);
  *this = &unk_1EE36B370;
  int v2 = (void **)this[29];
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  if ((*((char *)this + 231) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_18:
  operator delete(this[26]);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t v3 = (Espresso::AOT::AOTCompilerBackend *)this;
    goto LABEL_8;
  }
LABEL_19:
  operator delete(this[23]);
  uint64_t v3 = (Espresso::AOT::AOTCompilerBackend *)this;

LABEL_8:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v3);
}

Espresso::MILTranslator::NameGenerator **std::unique_ptr<Espresso::MILTranslator::NameGenerator>::~unique_ptr[abi:ne180100](Espresso::MILTranslator::NameGenerator **a1)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Espresso::MILTranslator::NameGenerator::~NameGenerator(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,unsigned long const&,unsigned long>(char *a1, void *a2, void *a3, void *a4)
{
}

void **std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::~vector[abi:ne180100](uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

BOOL Espresso::AOT::SegmentsLowerer::CallDef::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  std::string::size_type v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
    goto LABEL_16;
  }
  if (!a1[23])
  {
LABEL_16:
    uint64_t v10 = *((void *)a1 + 3);
    uint64_t v9 = *((void *)a1 + 4);
    std::string v11 = (unsigned __int8 **)v6[3];
    if (v9 - v10 == v6[4] - (void)v11)
    {
      if (v10 == v9)
      {
LABEL_35:
        uint64_t v19 = *((void *)a1 + 6);
        uint64_t v18 = *((void *)a1 + 7);
        int v20 = (unsigned __int8 **)v6[6];
        if (v18 - v19 == v6[7] - (void)v20)
        {
          if (v19 == v18)
          {
LABEL_54:
            uint64_t v28 = *((void *)a1 + 9);
            uint64_t v27 = *((void *)a1 + 10);
            uint64_t v29 = (unsigned __int8 **)v6[9];
            if (v27 - v28 == v6[10] - (void)v29)
            {
              while (1)
              {
                if (v28 == v27) {
                  return *((void *)a1 + 12) == v6[12];
                }
                uint64_t v31 = *(unsigned __int8 *)(v28 + 23);
                if ((v31 & 0x80u) == 0) {
                  long long v32 = (unsigned __int8 *)*(unsigned __int8 *)(v28 + 23);
                }
                else {
                  long long v32 = *(unsigned __int8 **)(v28 + 8);
                }
                uint64_t v33 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 23);
                int v34 = (char)v33;
                if ((char)v33 < 0) {
                  uint64_t v33 = v29[1];
                }
                if (v32 != v33) {
                  return 0;
                }
                if (v34 >= 0) {
                  unint64_t v35 = (unsigned __int8 *)v29;
                }
                else {
                  unint64_t v35 = *v29;
                }
                if ((v31 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)v28, v35, *(void *)(v28 + 8))) {
                    return 0;
                  }
                }
                else if (*(unsigned char *)(v28 + 23))
                {
                  uint64_t v36 = 0;
                  while (*(unsigned __int8 *)(v28 + v36) == v35[v36])
                  {
                    if (v31 == ++v36) {
                      goto LABEL_57;
                    }
                  }
                  return 0;
                }
LABEL_57:
                v28 += 24;
                v29 += 3;
              }
            }
          }
          else
          {
            while (1)
            {
              uint64_t v21 = *(unsigned __int8 *)(v19 + 23);
              if ((v21 & 0x80u) == 0) {
                std::basic_string_view<_CharT, _Traits>::size_type v22 = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 23);
              }
              else {
                std::basic_string_view<_CharT, _Traits>::size_type v22 = *(unsigned __int8 **)(v19 + 8);
              }
              uint64_t v23 = (unsigned __int8 *)*((unsigned __int8 *)v20 + 23);
              int v24 = (char)v23;
              if ((char)v23 < 0) {
                uint64_t v23 = v20[1];
              }
              if (v22 != v23) {
                break;
              }
              if (v24 >= 0) {
                unsigned __int8 v25 = (unsigned __int8 *)v20;
              }
              else {
                unsigned __int8 v25 = *v20;
              }
              if ((v21 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v19, v25, *(void *)(v19 + 8))) {
                  return 0;
                }
              }
              else if (*(unsigned char *)(v19 + 23))
              {
                uint64_t v26 = 0;
                while (*(unsigned __int8 *)(v19 + v26) == v25[v26])
                {
                  if (v21 == ++v26) {
                    goto LABEL_53;
                  }
                }
                return 0;
              }
LABEL_53:
              v19 += 24;
              v20 += 3;
              if (v19 == v18) {
                goto LABEL_54;
              }
            }
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
          if ((v12 & 0x80u) == 0) {
            uint64_t v13 = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 23);
          }
          else {
            uint64_t v13 = *(unsigned __int8 **)(v10 + 8);
          }
          uint64_t v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
          int v15 = (char)v14;
          if ((char)v14 < 0) {
            uint64_t v14 = v11[1];
          }
          if (v13 != v14) {
            break;
          }
          if (v15 >= 0) {
            char v16 = (unsigned __int8 *)v11;
          }
          else {
            char v16 = *v11;
          }
          if ((v12 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v16, *(void *)(v10 + 8))) {
              return 0;
            }
          }
          else if (*(unsigned char *)(v10 + 23))
          {
            uint64_t v17 = 0;
            while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
            {
              if (v12 == ++v17) {
                goto LABEL_34;
              }
            }
            return 0;
          }
LABEL_34:
          v10 += 24;
          v11 += 3;
          if (v10 == v9) {
            goto LABEL_35;
          }
        }
      }
    }
    return 0;
  }
  unint64_t v8 = a1;
  while (*v8 == *a2)
  {
    ++v8;
    ++a2;
    if (!--v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t Espresso::AOT::SegmentsLowerer::CallDef::CallDef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  Espresso::AOT::SegmentsLowerer::CallDef::CallDef(a1, (long long *)__p, a3, a2 + 24, (__n128 *)(a2 + 48), *(void *)(a2 + 72));
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

{
  void *__p[2];
  uint64_t v6;

  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  Espresso::AOT::SegmentsLowerer::CallDef::CallDef(a1, (long long *)__p, a3, a2 + 24, (__n128 *)(a2 + 48), *(void *)(a2 + 72));
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_192495058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1924950F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::AOT::SegmentsLowerer::TransferDef::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 39);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 24);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 39);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 24);
  }
  if (v3 != v4) {
    return 0;
  }
  unint64_t v8 = (const void **)(a1 + 16);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 16);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 16);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 24))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      unint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v10 = *(unsigned __int8 *)(a1 + 63);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 48);
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 63);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 48);
  }
  if (v11 != v12) {
    return 0;
  }
  uint64_t v14 = (const void **)(a1 + 40);
  if (v13 >= 0) {
    int v15 = (unsigned __int8 *)(a2 + 40);
  }
  else {
    int v15 = *(unsigned __int8 **)(a2 + 40);
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(void *)(a1 + 48))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 63))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      uint64_t v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10) {
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_31:
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return *(void *)(a1 + 64) == *(void *)(a2 + 64);
  }
  return 0;
}

BOOL Espresso::AOT::SegmentsLowerer::OpHasEndOfSegmentAttribute(Espresso::AOT::SegmentsLowerer *this, const MIL::IROperation *a2)
{
  strcpy((char *)__p, "EndOfSegment");
  return MIL::IRObject::TryGetAttribute() != 0;
}

void sub_1924952F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 Espresso::AOT::SegmentsLowerer::SegmentFuncDef::SegmentFuncDef(uint64_t a1, long long *a2, uint64_t a3, __n128 *a4, uint64_t a5)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  __n128 result = *a4;
  *(__n128 *)(a1 + 48) = *a4;
  *(void *)(a1 + 64) = a4[1].n128_u64[0];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  *(void *)(a1 + 72) = a5;
  return result;
}

{
  long long v5;
  __n128 result;

  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  __n128 result = *a4;
  *(__n128 *)(a1 + 48) = *a4;
  *(void *)(a1 + 64) = a4[1].n128_u64[0];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  *(void *)(a1 + 72) = a5;
  return result;
}

__n128 Espresso::AOT::SegmentsLowerer::SegmentFuncDef::SegmentFuncDef(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)(a1 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(void *)(a1 + 40) = a2[5];
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  __n128 result = *((__n128 *)a2 + 3);
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *(void *)(a1 + 72) = v3;
  return result;
}

{
  uint64_t v3;
  long long v4;
  __n128 result;

  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)(a1 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(void *)(a1 + 40) = a2[5];
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  __n128 result = *((__n128 *)a2 + 3);
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *(void *)(a1 + 72) = v3;
  return result;
}

void Espresso::AOT::SegmentsLowerer::SegmentFuncDef::~SegmentFuncDef(Espresso::AOT::SegmentsLowerer::SegmentFuncDef *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 7);
    long long v4 = (void *)*((void *)this + 6);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      long long v4 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 4);
    std::string::size_type v7 = (void *)*((void *)this + 3);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      std::string::size_type v7 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t anonymous namespace'::CanMergeTwoSegments<Espresso::AOT::SegmentsLowerer::SegmentDef>(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  std::string::size_type v7 = a5;
  unint64_t v8 = a4;
  uint64_t v10 = a2;
  int v13 = *(char **)(a6 + 8);
  unint64_t v12 = *(void *)(a6 + 16);
  uint64_t v14 = v13;
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v18 = *(char **)a6;
    uint64_t v19 = (uint64_t)&v13[-*(void *)a6];
    uint64_t v20 = v19 >> 3;
    unint64_t v21 = (v19 >> 3) + 1;
    if (v21 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v12 - (void)v18;
    if (v22 >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v24 = operator new(8 * v23);
      unsigned __int8 v25 = (unint64_t *)&v24[8 * v20];
      uint64_t v26 = &v24[8 * v23];
      *unsigned __int8 v25 = a1;
      uint64_t v15 = (uint64_t)(v25 + 1);
      int64_t v27 = v13 - v18;
      if (v13 != v18)
      {
LABEL_17:
        unint64_t v28 = v27 - 8;
        if (v28 >= 0x58)
        {
          unint64_t v30 = v13 - v24 - v19;
          unint64_t v8 = a4;
          uint64_t v10 = a2;
          if (v30 >= 0x20)
          {
            uint64_t v31 = (v28 >> 3) + 1;
            uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v14 = &v13[-v32];
            unsigned __int8 v25 = (unint64_t *)((char *)v25 - v32);
            uint64_t v33 = &v24[8 * v20 - 16];
            int v34 = v13 - 16;
            uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v36 = *(_OWORD *)v34;
              *(v33 - 1) = *((_OWORD *)v34 - 1);
              _OWORD *v33 = v36;
              v33 -= 2;
              v34 -= 32;
              v35 -= 4;
            }
            while (v35);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_27:
              *(void *)a6 = v25;
              *(void *)(a6 + 8) = v15;
              *(void *)(a6 + 16) = v26;
              if (v18) {
                operator delete(v18);
              }
              std::string::size_type v7 = a5;
              *(void *)(a6 + 8) = v15;
              if (a1 == v10)
              {
LABEL_3:
                for (i = *(char **)a6; i != (char *)v15; i += 8)
                {
                  if (0x8E38E38E38E38E39 * ((uint64_t)(v7[1] - *v7) >> 3) <= *(void *)i) {
                    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                  }
                  if (*(void *)(*v7 + 72 * *(void *)i) != a3) {
                    return 0;
                  }
                }
LABEL_50:
                uint64_t result = 1;
                goto LABEL_51;
              }
              goto LABEL_30;
            }
          }
        }
        else
        {
          unint64_t v8 = a4;
          uint64_t v10 = a2;
        }
        do
        {
          unint64_t v37 = *((void *)v14 - 1);
          v14 -= 8;
          *--unsigned __int8 v25 = v37;
        }
        while (v14 != v18);
        goto LABEL_27;
      }
    }
    else
    {
      int v24 = 0;
      unsigned __int8 v25 = (unint64_t *)(8 * v20);
      uint64_t v26 = 0;
      *(void *)(8 * v20) = a1;
      uint64_t v15 = 8 * v20 + 8;
      int64_t v27 = v13 - v18;
      if (v13 != v18) {
        goto LABEL_17;
      }
    }
    unint64_t v8 = a4;
    uint64_t v10 = a2;
    goto LABEL_27;
  }
  *(void *)int v13 = a1;
  uint64_t v15 = (uint64_t)(v13 + 8);
  *(void *)(a6 + 8) = v13 + 8;
  if (a1 == a2) {
    goto LABEL_3;
  }
LABEL_30:
  int8x8_t v38 = (int8x8_t)v8[1];
  if (!*(void *)&v38) {
    goto LABEL_50;
  }
  uint8x8_t v39 = (uint8x8_t)vcnt_s8(v38);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    unint64_t v40 = a1;
    if (*(void *)&v38 <= a1) {
      unint64_t v40 = a1 % *(void *)&v38;
    }
  }
  else
  {
    unint64_t v40 = (*(void *)&v38 - 1) & a1;
  }
  std::__fs::filesystem::path v41 = *(void **)(*v8 + 8 * v40);
  if (!v41) {
    goto LABEL_50;
  }
  std::__fs::filesystem::path v42 = (void *)*v41;
  if (!*v41) {
    goto LABEL_50;
  }
  uint64_t v43 = *(void *)&v38 - 1;
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v44 = v42[1];
      if (v44 == a1)
      {
        if (v42[2] == a1) {
          goto LABEL_52;
        }
      }
      else if ((v44 & v43) != v40)
      {
        goto LABEL_50;
      }
      std::__fs::filesystem::path v42 = (void *)*v42;
      if (!v42) {
        goto LABEL_50;
      }
    }
  }
  while (1)
  {
    unint64_t v45 = v42[1];
    if (v45 == a1) {
      break;
    }
    if (v45 >= *(void *)&v38) {
      v45 %= *(void *)&v38;
    }
    if (v45 != v40) {
      goto LABEL_50;
    }
LABEL_45:
    std::__fs::filesystem::path v42 = (void *)*v42;
    if (!v42) {
      goto LABEL_50;
    }
  }
  if (v42[2] != a1) {
    goto LABEL_45;
  }
LABEL_52:
  if (v39.u32[0] > 1uLL)
  {
    unint64_t v46 = a1;
    if (*(void *)&v38 <= a1) {
      unint64_t v46 = a1 % *(void *)&v38;
    }
  }
  else
  {
    unint64_t v46 = v43 & a1;
  }
  std::__fs::filesystem::path v47 = *(void **)(*v8 + 8 * v46);
  if (!v47 || (long long v48 = (void *)*v47) == 0) {
LABEL_90:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v49 = v48[1];
      if (v49 == a1)
      {
        if (v48[2] == a1) {
          goto LABEL_64;
        }
      }
      else if ((v49 & v43) != v46)
      {
        goto LABEL_90;
      }
      long long v48 = (void *)*v48;
      if (!v48) {
        goto LABEL_90;
      }
    }
  }
  while (2)
  {
    unint64_t v59 = v48[1];
    if (v59 != a1)
    {
      if (v59 >= *(void *)&v38) {
        v59 %= *(void *)&v38;
      }
      if (v59 != v46) {
        goto LABEL_90;
      }
      goto LABEL_81;
    }
    if (v48[2] != a1)
    {
LABEL_81:
      long long v48 = (void *)*v48;
      if (!v48) {
        goto LABEL_90;
      }
      continue;
    }
    break;
  }
LABEL_64:
  int v50 = (void *)v48[3];
  uint64_t v51 = v48 + 4;
  int v52 = 1;
  if (v50 != v48 + 4)
  {
    while (1)
    {
      uint64_t v53 = v50[4];
      uint64_t v55 = *(char **)a6;
      double v54 = *(char **)(a6 + 8);
      if (*(char **)a6 != v54)
      {
        while (*(void *)v55 != v53)
        {
          v55 += 8;
          if (v55 == v54)
          {
            uint64_t v55 = *(char **)(a6 + 8);
            break;
          }
        }
      }
      if (v55 == v54)
      {
        std::string::size_type v56 = (void *)v50[1];
        if (v56)
        {
          do
          {
LABEL_75:
            std::string::size_type v57 = v56;
            std::string::size_type v56 = (void *)*v56;
          }
          while (v56);
          goto LABEL_66;
        }
      }
      else
      {
        std::string::size_type v56 = (void *)v50[1];
        if (v56) {
          goto LABEL_75;
        }
      }
      do
      {
        std::string::size_type v57 = (void *)v50[2];
        BOOL v58 = *v57 == (void)v50;
        int v50 = v57;
      }
      while (!v58);
LABEL_66:
      int v50 = v57;
      if (v57 == v51)
      {
        uint64_t v15 = *(void *)(a6 + 8);
        break;
      }
    }
  }
  uint64_t result = v52 & 1;
LABEL_51:
  *(void *)(a6 + 8) = v15 - 8;
  return result;
}

uint64_t std::pair<std::unordered_map<unsigned long,std::set<unsigned long>>,std::unordered_map<std::string,int>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 56);
  if (v2)
  {
    do
    {
      unint64_t v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v8;
    }
    while (v8);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    operator delete(v3);
  }
  long long v4 = *(void ***)(a1 + 16);
  if (v4)
  {
    do
    {
      uint64_t v5 = *v4;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v4 + 3), v4[4]);
      operator delete(v4);
      long long v4 = (void **)v5;
    }
    while (v5);
  }
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned long,std::pair<std::string,unsigned long>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void Espresso::AOT::SegmentsLowerer::TransferDef::~TransferDef(void **this)
{
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[2]);
    return;
  }
  operator delete(this[5]);
  if (*((char *)this + 39) < 0) {
    goto LABEL_5;
  }
}

void ***std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::~vector[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    long long v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    uint64_t v5 = a1[1];
    while (1)
    {
      unint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      std::string::size_type v7 = v8;
      if (!v8) {
        goto LABEL_6;
      }
      uint64_t v9 = (void **)*(v3 - 2);
      uint64_t v6 = v7;
      if (v9 != v7) {
        break;
      }
LABEL_5:
      *(v3 - 2) = v7;
      operator delete(v6);
LABEL_6:
      uint64_t v3 = v5;
      if (v5 == v2)
      {
        long long v4 = *a1;
        goto LABEL_17;
      }
    }
    while (1)
    {
      if (*((char *)v9 - 9) < 0)
      {
        operator delete(*(v9 - 4));
        if (*((char *)v9 - 33) < 0) {
LABEL_15:
        }
          operator delete(*(v9 - 7));
      }
      else if (*((char *)v9 - 33) < 0)
      {
        goto LABEL_15;
      }
      v9 -= 9;
      if (v9 == v7)
      {
        uint64_t v6 = *v5;
        goto LABEL_5;
      }
    }
  }
  return a1;
}

void **std::vector<Espresso::AOT::SegmentsLowerer::CallDef>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = v2;
    if (v3 != v2)
    {
      do
        Espresso::AOT::SegmentsLowerer::CallDef::~CallDef((Espresso::AOT::SegmentsLowerer::CallDef *)(v3 - 104));
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  v36[0] = (long long *)a5;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a5, (uint64_t)&std::piecewise_construct, v36)[5];
  uint64_t v14 = *a6;
  v36[0] = (long long *)a4;
  if (v13 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, a4, (uint64_t)&std::piecewise_construct, v36)[5])
  {
    uint64_t v16 = *(void *)(a4 + 16);
    long long v17 = *(_OWORD *)a4;
    uint64_t v18 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v18;
    *(_OWORD *)a5 = v17;
    *(void *)(a5 + 16) = v16;
    uint64_t v19 = *a6;
    v36[0] = (long long *)a4;
    unint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, a4, (uint64_t)&std::piecewise_construct, v36)[5];
    uint64_t v21 = *a6;
    v36[0] = (long long *)a3;
    if (v20 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, a3, (uint64_t)&std::piecewise_construct, v36)[5])
    {
      uint64_t v22 = *(void *)(a3 + 16);
      long long v23 = *(_OWORD *)a3;
      uint64_t v24 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v24;
      *(_OWORD *)a4 = v23;
      *(void *)(a4 + 16) = v22;
      uint64_t v25 = *a6;
      v36[0] = (long long *)a3;
      unint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, a3, (uint64_t)&std::piecewise_construct, v36)[5];
      uint64_t v27 = *a6;
      v36[0] = (long long *)a2;
      if (v26 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, a2, (uint64_t)&std::piecewise_construct, v36)[5])
      {
        uint64_t v28 = *(void *)(a2 + 16);
        long long v29 = *(_OWORD *)a2;
        uint64_t v30 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v30;
        *(_OWORD *)a3 = v29;
        *(void *)(a3 + 16) = v28;
        uint64_t v31 = *a6;
        v36[0] = (long long *)a2;
        unint64_t v32 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, a2, (uint64_t)&std::piecewise_construct, v36)[5];
        uint64_t v33 = *a6;
        v36[0] = (long long *)a1;
        if (v32 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, a1, (uint64_t)&std::piecewise_construct, v36)[5])
        {
          uint64_t v34 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v35 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v35;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v34;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  v37[0] = (long long *)a2;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, v37)[5];
  uint64_t v10 = *a4;
  v37[0] = (long long *)a1;
  unint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, a1, (uint64_t)&std::piecewise_construct, v37)[5];
  uint64_t v12 = *a4;
  if (v9 >= v11)
  {
    v37[0] = (long long *)a3;
    unint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a3, (uint64_t)&std::piecewise_construct, v37)[5];
    uint64_t v20 = *a4;
    v37[0] = (long long *)a2;
    __n128 result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, a2, (uint64_t)&std::piecewise_construct, v37);
    if (v19 < result[5])
    {
      uint64_t v21 = *(void *)(a2 + 16);
      long long v22 = *(_OWORD *)a2;
      uint64_t v23 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v23;
      *(_OWORD *)a3 = v22;
      *(void *)(a3 + 16) = v21;
      uint64_t v24 = *a4;
      v37[0] = (long long *)a2;
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, v37)[5];
      uint64_t v26 = *a4;
      v37[0] = (long long *)a1;
      __n128 result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, a1, (uint64_t)&std::piecewise_construct, v37);
      if (v25 < result[5])
      {
        uint64_t v27 = *(void *)(a1 + 16);
        long long v28 = *(_OWORD *)a1;
        uint64_t v29 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v29;
        *(_OWORD *)a2 = v28;
        *(void *)(a2 + 16) = v27;
      }
    }
  }
  else
  {
    v37[0] = (long long *)a3;
    unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a3, (uint64_t)&std::piecewise_construct, v37)[5];
    uint64_t v14 = *a4;
    v37[0] = (long long *)a2;
    __n128 result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, a2, (uint64_t)&std::piecewise_construct, v37);
    if (v13 < result[5])
    {
      uint64_t v16 = *(void *)(a1 + 16);
      long long v17 = *(_OWORD *)a1;
      uint64_t v18 = *(void *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(void *)(a1 + 16) = v18;
LABEL_10:
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v16;
      return result;
    }
    uint64_t v30 = *(void *)(a1 + 16);
    long long v31 = *(_OWORD *)a1;
    uint64_t v32 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v32;
    *(_OWORD *)a2 = v31;
    *(void *)(a2 + 16) = v30;
    uint64_t v33 = *a4;
    v37[0] = (long long *)a3;
    unint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, a3, (uint64_t)&std::piecewise_construct, v37)[5];
    uint64_t v35 = *a4;
    v37[0] = (long long *)a2;
    __n128 result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, a2, (uint64_t)&std::piecewise_construct, v37);
    if (v34 < result[5])
    {
      uint64_t v16 = *(void *)(a2 + 16);
      long long v17 = *(_OWORD *)a2;
      uint64_t v36 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v36;
      goto LABEL_10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (_OWORD *)(a2 - 24);
      uint64_t v9 = *a3;
      *(void *)&long long v30 = a2 - 24;
      unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, a2 - 24, (uint64_t)&std::piecewise_construct, (long long **)&v30)[5];
      uint64_t v11 = *a3;
      *(void *)&long long v30 = a1;
      if (v10 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, a1, (uint64_t)&std::piecewise_construct, (long long **)&v30)[5])
      {
        uint64_t v12 = *(void *)(a1 + 16);
        long long v13 = *(_OWORD *)a1;
        uint64_t v14 = *(void *)(v4 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v14;
        *uint64_t v8 = v13;
        *(void *)(v4 - 8) = v12;
      }
      return 1;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      return 1;
    default:
      uint64_t v15 = a1 + 48;
      uint64_t v16 = a1 + 72;
      if (a1 + 72 == v4) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      uint64_t v29 = v4;
      break;
  }
  while (1)
  {
    uint64_t v20 = *a3;
    *(void *)&long long v30 = v16;
    unint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v16, (uint64_t)&std::piecewise_construct, (long long **)&v30)[5];
    uint64_t v22 = *a3;
    *(void *)&long long v30 = v15;
    if (v21 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, v15, (uint64_t)&std::piecewise_construct, (long long **)&v30)[5])
    {
      long long v30 = *(_OWORD *)v16;
      uint64_t v31 = *(void *)(v16 + 16);
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)uint64_t v16 = 0;
      uint64_t v23 = v17;
      do
      {
        uint64_t v24 = a1 + v23;
        unint64_t v25 = (void **)(a1 + v23 + 72);
        if (*(char *)(a1 + v23 + 95) < 0) {
          operator delete(*v25);
        }
        *(_OWORD *)unint64_t v25 = *(_OWORD *)(v24 + 48);
        *(void *)(a1 + v23 + 88) = *(void *)(v24 + 64);
        *(unsigned char *)(v24 + 71) = 0;
        *(unsigned char *)(v24 + 48) = 0;
        if (v23 == -48)
        {
          uint64_t v19 = a1;
          goto LABEL_7;
        }
        uint64_t v26 = *a3;
        uint64_t v32 = &v30;
        unint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (uint64_t)&v30, (uint64_t)&std::piecewise_construct, &v32)[5];
        uint64_t v28 = *a3;
        uint64_t v32 = (long long *)(a1 + v23 + 24);
        v23 -= 24;
      }
      while (v27 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (uint64_t)v32, (uint64_t)&std::piecewise_construct, &v32)[5]);
      uint64_t v19 = a1 + v23 + 72;
      if (*(char *)(v19 + 23) < 0) {
        operator delete(*(void **)v19);
      }
LABEL_7:
      uint64_t v4 = v29;
      *(_OWORD *)uint64_t v19 = v30;
      *(void *)(v19 + 16) = v31;
      if (++v18 == 8) {
        return v16 + 24 == v29;
      }
    }
    uint64_t v15 = v16;
    v17 += 24;
    v16 += 24;
    if (v16 == v4) {
      return 1;
    }
  }
}

void sub_19249642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  v28[0] = (long long *)a4;
  unint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, a4, (uint64_t)&std::piecewise_construct, v28)[5];
  uint64_t v12 = *a5;
  v28[0] = (long long *)a3;
  if (v11 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a3, (uint64_t)&std::piecewise_construct, v28)[5])
  {
    uint64_t v14 = *(void *)(a3 + 16);
    long long v15 = *(_OWORD *)a3;
    uint64_t v16 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v16;
    *(_OWORD *)a4 = v15;
    *(void *)(a4 + 16) = v14;
    uint64_t v17 = *a5;
    v28[0] = (long long *)a3;
    unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, a3, (uint64_t)&std::piecewise_construct, v28)[5];
    uint64_t v19 = *a5;
    v28[0] = (long long *)a2;
    if (v18 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, a2, (uint64_t)&std::piecewise_construct, v28)[5])
    {
      uint64_t v20 = *(void *)(a2 + 16);
      long long v21 = *(_OWORD *)a2;
      uint64_t v22 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v22;
      *(_OWORD *)a3 = v21;
      *(void *)(a3 + 16) = v20;
      uint64_t v23 = *a5;
      v28[0] = (long long *)a2;
      unint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, a2, (uint64_t)&std::piecewise_construct, v28)[5];
      uint64_t v25 = *a5;
      v28[0] = (long long *)a1;
      if (v24 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, a1, (uint64_t)&std::piecewise_construct, v28)[5])
      {
        uint64_t v26 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v27 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v27;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v26;
      }
    }
  }
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    std::string::size_type v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    long long v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      std::string::size_type v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v91);
    std::__fs::filesystem::path v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    std::string::size_type v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            int v82 = &v34[8 * v43];
            std::__fs::filesystem::path v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              std::__fs::filesystem::path v47 = &v35[v84];
              v7 += v84;
              v85 = (long long *)(v41 + 3);
              uint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *uint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            std::__fs::filesystem::path v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)std::__fs::filesystem::path v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  uint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            char v69 = (long long *)(v27 + 16);
            long long v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)long long v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          std::string::size_type v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_192496B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_192496B94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_192496BA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_192496BC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      std::string::size_type v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      BOOL v3 = *v2;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      unint64_t v2 = (void **)v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<Espresso::MILTranslator::NameGenerator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DBFDAELL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DBFDAELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DBFDAELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DBFDAELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            long long v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          long long v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *uint64_t v28 = 0;
  v28[1] = v11;
  uint64_t v29 = (std::string *)(v28 + 2);
  unint64_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v28[4] = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[6] = 0;
  v28[7] = 0;
  v28[5] = v28 + 6;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      uint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  long long v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1924971D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924971EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2 + 40, *(void **)(v2 + 48));
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__emplace_back_slow_path<std::unordered_set<std::string>,std::unordered_set<std::string>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1[1] - *a1;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 4) + 1;
  if (v5 > 0x333333333333333) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v8 = 0x333333333333333;
  }
  else {
    unint64_t v8 = v5;
  }
  unint64_t v30 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(80 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[16 * (v4 >> 4)];
  std::string __p = v9;
  uint64_t v27 = v10;
  uint64_t v28 = v10;
  uint64_t v29 = &v9[80 * v8];
  uint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(void *)unint64_t v10 = v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = a2[2];
  *((void *)v10 + 2) = v13;
  uint64_t v14 = a2[3];
  *((void *)v10 + 3) = v14;
  *((_DWORD *)v10 + 8) = *((_DWORD *)a2 + 8);
  if (v14)
  {
    unint64_t v15 = *(void *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12) {
        v15 %= v12;
      }
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(void *)(v11 + 8 * v15) = v10 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  uint64_t v16 = *a3;
  unint64_t v17 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v18 = a3[2];
  *(void *)&v9[v4 + 56] = v18;
  uint64_t v19 = (uint64_t)&v9[v4 + 56];
  *(void *)(v19 - 16) = v16;
  *(void *)(v19 - 8) = v17;
  uint64_t v20 = a3[3];
  *(void *)(v19 + 8) = v20;
  *(_DWORD *)(v19 + 16) = *((_DWORD *)a3 + 8);
  if (v20)
  {
    unint64_t v21 = *(void *)(v18 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v21 >= v17) {
        v21 %= v17;
      }
    }
    else
    {
      v21 &= v17 - 1;
    }
    *(void *)(v16 + 8 * v21) = v19;
    a3[2] = 0;
    a3[3] = 0;
  }
  uint64_t v28 = v10 + 80;
  std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v22 = a1[1];
  uint64_t v24 = v27;
  for (i = v28; v28 != v24; i = v28)
  {
    uint64_t v28 = i - 80;
    std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100]((uint64_t)v30, (uint64_t)(i - 80));
  }
  if (__p) {
    operator delete(__p);
  }
  return v22;
}

void sub_192497450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v7 = v4 + v5;
      uint64_t v8 = v2 + v5;
      uint64_t v9 = *(void *)(v2 + v5 - 80);
      *(void *)(v8 - 80) = 0;
      *(void *)(v7 - 80) = v9;
      *(void *)(v7 - 72) = *(void *)(v2 + v5 - 72);
      *(void *)(v8 - 72) = 0;
      uint64_t v10 = *(void *)(v2 + v5 - 64);
      *(void *)(v4 + v5 - 64) = v10;
      uint64_t v11 = *(void *)(v2 + v5 - 56);
      *(void *)(v7 - 56) = v11;
      *(_DWORD *)(v7 - 48) = *(_DWORD *)(v2 + v5 - 48);
      if (v11)
      {
        unint64_t v12 = *(void *)(v10 + 8);
        unint64_t v13 = *(void *)(v7 - 72);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13) {
            v12 %= v13;
          }
        }
        else
        {
          v12 &= v13 - 1;
        }
        *(void *)(v9 + 8 * v12) = v4 + v5 - 64;
        *(void *)(v2 + v5 - 64) = 0;
        *(void *)(v2 + v5 - 56) = 0;
      }
      uint64_t v14 = *(void *)(v8 - 40);
      *(void *)(v8 - 40) = 0;
      *(void *)(v7 - 40) = v14;
      *(void *)(v7 - 32) = *(void *)(v8 - 32);
      *(void *)(v8 - 32) = 0;
      uint64_t v17 = *(void *)(v8 - 24);
      uint64_t v15 = v8 - 24;
      uint64_t v16 = v17;
      *(void *)(v7 - 24) = v17;
      uint64_t v18 = v7 - 24;
      uint64_t v19 = *(void *)(v15 + 8);
      *(void *)(v7 - 16) = v19;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v15 + 16);
      if (v19)
      {
        unint64_t v6 = *(void *)(v16 + 8);
        unint64_t v20 = *(void *)(v7 - 32);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v6 >= v20) {
            v6 %= v20;
          }
        }
        else
        {
          v6 &= v20 - 1;
        }
        *(void *)(v14 + 8 * v6) = v18;
        *(void *)uint64_t v15 = 0;
        *(void *)(v15 + 8) = 0;
      }
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v21 = *result;
  *__n128 result = v4;
  a2[1] = v21;
  uint64_t v22 = result[1];
  result[1] = a2[2];
  a2[2] = v22;
  uint64_t v23 = result[2];
  result[2] = a2[3];
  a2[3] = v23;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 80;
    std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100](v4, i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void ***)(a2 + 56);
  if (v3)
  {
    do
    {
      uint64_t v7 = (void **)*v3;
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v7;
    }
    while (v7);
  }
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void ***)(a2 + 16);
  if (v5)
  {
    do
    {
      uint64_t v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  unint64_t v6 = *(void **)a2;
  *(void *)a2 = 0;
  if (v6)
  {
    operator delete(v6);
  }
}

uint64_t std::unordered_map<unsigned long,std::set<unsigned long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::set<unsigned long>> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1924977E8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1924977FC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::set<unsigned long>> const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      __n128 result = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = result[1];
            if (v12 == v6)
            {
              if (result[2] == v6) {
                return result;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            __n128 result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6) {
              return result;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  uint64_t v28 = operator new(0x30uLL);
  *uint64_t v28 = 0;
  v28[1] = v6;
  unint64_t v13 = (void *)a3[1];
  v28[2] = *a3;
  v28[5] = 0;
  v28[4] = 0;
  v28[3] = v28 + 4;
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(v28 + 3, v13, a3 + 2);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v16 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        uint64_t v17 = v28;
        if (v16) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v16 = *(void **)(*(void *)a1 + 8 * v6);
        uint64_t v17 = v28;
        if (v16) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v16 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      uint64_t v17 = v28;
      if (v16) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *uint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v28)
    {
      unint64_t v27 = *(void *)(*v28 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v27 >= v7) {
          v27 %= v7;
        }
      }
      else
      {
        v27 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v28;
    }
    goto LABEL_61;
  }
  uint64_t v16 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v17 = v28;
  if (!v16) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v17 = *v16;
  *uint64_t v16 = v28;
LABEL_61:
  __n128 result = v28;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_192497B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192497B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2, *v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
    }
    operator delete(v2);
  }
  return a1;
}

void *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    unint64_t v6 = a2;
    unint64_t v7 = (void **)result;
    uint8x8_t v8 = result + 1;
    do
    {
      __n128 result = std::__tree<unsigned long>::__find_equal<unsigned long>(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        uint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = (uint64_t **)result;
        unint64_t v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        uint64_t v12 = v18[0];
        *unint64_t v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        char *v10 = v11;
        unint64_t v13 = (void *)**v7;
        if (v13)
        {
          void *v7 = v13;
          float v14 = *v10;
        }
        else
        {
          float v14 = v11;
        }
        __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v7[1], v14);
        v7[2] = (void *)((char *)v7[2] + 1);
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            float v15 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        float v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        unint64_t v6 = v15;
      }
      while (!v16);
LABEL_3:
      unint64_t v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void *std::__tree<unsigned long>::__find_equal<unsigned long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  int8x8_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      float v14 = a2;
      do
      {
        uint64_t v10 = (void *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        float v14 = v10;
      }
      while (v15);
    }
    unint64_t v16 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    BOOL v18 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v19 = v18;
          unint64_t v20 = v18[4];
          if (v16 >= v20) {
            break;
          }
          BOOL v18 = (void *)*v19;
          int8x8_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        int8x8_t v5 = v19 + 1;
        BOOL v18 = (void *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (void *)a2[1];
      do
      {
        unint64_t v13 = v12;
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        unint64_t v13 = (void *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      int8x8_t v22 = (void *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            unint64_t v23 = v22;
            unint64_t v24 = v22[4];
            if (v6 >= v24) {
              break;
            }
            int8x8_t v22 = (void *)*v23;
            int8x8_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          int8x8_t v5 = v23 + 1;
          int8x8_t v22 = (void *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  float v14 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  uint64_t v15 = **a4;
  v11[5] = 0;
  v11[4] = 0;
  v11[2] = v15;
  v11[3] = v11 + 4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    unint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *uint64_t v11 = *v19;
LABEL_61:
      *unint64_t v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v11 = *v14;
  *float v14 = v11;
  *(void *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v28 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1924981D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = *((void *)v11 + 1);
            if (v13 == v7)
            {
              if (*((void *)v11 + 2) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = *(char **)v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  float v14 = (void *)(a1 + 16);
  uint64_t v11 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(void *)uint64_t v11 = *v18;
LABEL_61:
      *uint64_t v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v8) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v7);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v26 & v7;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v7));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *(void *)uint64_t v11 = *v14;
  *float v14 = v11;
  *(void *)(v17 + 8 * v4) = v14;
  if (*(void *)v11)
  {
    unint64_t v27 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_192498510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void Espresso::AOT::SegmentsLowerer::FindSegmentDefs(void **a1)
{
  do
  {
    OUTLINED_FUNCTION_0_1();
    if (v3 < 0) {
      operator delete(a1[2]);
    }
    operator delete(a1);
    a1 = v1;
  }
  while (v1);
}

void Espresso::AOT::SegmentsLowerer::GenerateAndMergeSegmentFunctions(void **a1)
{
  do
  {
    uint64_t v2 = *a1;
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(a1 + 3), a1[4]);
    operator delete(a1);
    a1 = (void **)v2;
  }
  while (v2);
}

void std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::vector(void ***a1, void **a2, void **a3)
{
  int8x8_t v5 = *a1;
  unint64_t v6 = a2;
  if (v5 != a2)
  {
    unint64_t v8 = v5;
    do
    {
      uint64_t v10 = (void **)*(v8 - 3);
      v8 -= 3;
      uint8x8_t v9 = v10;
      if (v10)
      {
        uint64_t v11 = (void **)*(v5 - 2);
        unint64_t v12 = v9;
        if (v11 != v9)
        {
          do
          {
            if (*((char *)v11 - 9) < 0) {
              operator delete(*(v11 - 4));
            }
            if (*((char *)v11 - 33) < 0) {
              operator delete(*(v11 - 7));
            }
            v11 -= 9;
          }
          while (v11 != v9);
          unint64_t v12 = *v8;
        }
        *(v5 - 2) = v9;
        operator delete(v12);
      }
      int8x8_t v5 = v8;
    }
    while (v8 != a2);
    unint64_t v6 = *a3;
  }
  *a1 = a2;

  operator delete(v6);
}

double Espresso::AOT::EstimatorMILDecisionTree::GetLocalCost(Espresso::AOT::EstimatorMILDecisionTree *this, double a2, double a3, double a4, double a5)
{
  double v5 = a3 / a5;
  if (a5 <= 0.0) {
    double v5 = 0.0;
  }
  double v6 = a2 / a4;
  if (a4 <= 0.0) {
    double v6 = 0.0;
  }
  return fmax(v6, v5) * 1000.0;
}

BOOL Espresso::AOT::EstimatorMILDecisionTree::IsMemoryBoundInTheory(Espresso::AOT::EstimatorMILDecisionTree *this, double a2, double a3)
{
  uint64_t v6 = E5Common::E5PlatformManager::Instance(this);
  unint64_t v7 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
  {
    uint8x8_t v9 = (char *)*((void *)this + 1);
    uint64_t v8 = *((void *)this + 2);
  }
  else
  {
    uint64_t v8 = *((unsigned __int8 *)this + 31);
    uint8x8_t v9 = (char *)this + 8;
  }
  int BackendIdentifier = Espresso::AOT::GetBackendIdentifier((uint64_t)v9, v8);
  double v10 = (*(double (**)(uint64_t, char *, int *))(*(void *)v6 + 104))(v6, (char *)this + 32, &BackendIdentifier);
  if (*((char *)this + 31) < 0)
  {
    unint64_t v7 = (char *)*((void *)this + 1);
    uint64_t v11 = *((void *)this + 2);
  }
  else
  {
    uint64_t v11 = *((unsigned __int8 *)this + 31);
  }
  int v17 = Espresso::AOT::GetBackendIdentifier((uint64_t)v7, v11);
  double v12 = (*(double (**)(uint64_t, char *, int *))(*(void *)v6 + 112))(v6, (char *)this + 32, &v17);
  double v13 = a3 / v12;
  BOOL v14 = v12 <= 0.0;
  double v15 = 0.0;
  if (v14) {
    double v13 = 0.0;
  }
  if (v10 > 0.0) {
    double v15 = a2 / v10;
  }
  return v13 > v15;
}

void sub_1924988B4(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void *std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t Espresso::AOT::GetCallees@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  MIL::IRProgram::GetFunction();
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v7[0] = &unk_1EE37CCC8;
  v7[1] = a1;
  v7[2] = a2;
  uint64_t v8 = v7;
  char v4 = MIL::Util::Walk();
  uint64_t result = (uint64_t)v8;
  if (v8 == v7)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    uint64_t result = (*(uint64_t (**)(void))(*v8 + 40))();
  }
  if ((v4 & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in walking on function to collect its callees.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_192498B50(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192498B64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192498B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(MIL::IROperation const&)>::~function((uint64_t *)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MakeMILShape@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (MIL::IRConstantDimension *)result;
    uint64_t v9 = (char *)operator new(v4 - v5);
    *a3 = v9;
    a3[2] = &v9[8 * (v6 >> 3)];
    bzero(v9, v6);
    unint64_t v10 = 0;
    a3[1] = &v9[v6];
    do
    {
      uint64_t result = MIL::IRConstantDimension::Make(v8, *(MIL::MILContext **)(v5 + 8 * v10));
      *(void *)&v9[8 * v10++] = result;
      uint64_t v5 = *a2;
    }
    while (v10 < (a2[1] - *a2) >> 3);
  }
  return result;
}

void sub_192498C54(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MakeMILTypeWithPackedAlignments(Espresso::AOT *this, MIL::MILContext *a2, const MIL::IRValueType *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(MIL::MILContext *))(*(void *)a2 + 24))(a2);
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only tensor types are supported.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v5 = v4;
  int64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  float v32 = 0;
  float v33 = 0;
  long long v31 = 0;
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = (char *)operator new(v7 - v8);
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    long long v31 = v10;
    float v33 = v11;
    memset_pattern16(v10, &xmmword_192DBFE40, v9 & 0xFFFFFFFFFFFFFFF8);
    float v32 = v11;
  }
  Espresso::AOT::MakeMILTensorValue((uint64_t)this, (const void **)&v31);
  (*(void (**)(uint64_t))(*(void *)v5 + 88))(v5);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  BOOL v14 = *(const void **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  int64_t v15 = v13 - *(void *)v12;
  if (v13 != *(void *)v12)
  {
    if (v15 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = operator new(v13 - *(void *)v12);
    uint64_t v29 = (char *)v27 + 8 * (v15 >> 3);
    memcpy(v27, v14, v15);
    unint64_t v28 = v29;
  }
  strcpy((char *)v34, "alignments");
  char v35 = 10;
  uint64_t v36 = v30;
  if (v30) {
    operator new();
  }
  unint64_t v37 = 0;
  uint64_t v30 = 0;
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v25, (uint64_t)v34, 1);
  uint64_t v16 = MIL::IRTensorValueType::MakeWithShape();
  int v17 = (void **)__p;
  if (__p)
  {
    do
    {
      while (1)
      {
        uint64_t v18 = (void **)*v17;
        BOOL v19 = (std::__shared_weak_count *)v17[6];
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        if (*((char *)v17 + 39) < 0) {
          break;
        }
        operator delete(v17);
        int v17 = v18;
        if (!v18) {
          goto LABEL_18;
        }
      }
      operator delete(v17[2]);
      operator delete(v17);
      int v17 = v18;
    }
    while (v18);
  }
LABEL_18:
  unint64_t v20 = v25;
  uint64_t v25 = 0;
  if (v20) {
    operator delete(v20);
  }
  unint64_t v21 = v37;
  if (!v37 || atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (v35 < 0) {
LABEL_23:
  }
    operator delete(v34[0]);
LABEL_24:
  if (v27)
  {
    unint64_t v28 = v27;
    operator delete(v27);
  }
  uint64_t v22 = v30;
  uint64_t v30 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  if (v31) {
    operator delete(v31);
  }
  return v16;
}

void sub_192499070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192499084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    unint64_t v28 = a14;
    if (!a14)
    {
LABEL_3:
      uint64_t v29 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v28 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v28);
  uint64_t v29 = a17;
  if (!a17)
  {
LABEL_4:
    if (!v26) {
LABEL_10:
    }
      _Unwind_Resume(exception_object);
LABEL_9:
    operator delete(v26);
    goto LABEL_10;
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  if (!v26) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_192499174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    JUMPOUT(0x192499168);
  }
  JUMPOUT(0x19249916CLL);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, a2, a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_1924991F0(_Unwind_Exception *a1)
{
  int v3 = *(char **)(v1 + 16);
  if (v3) {
    std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(v3);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::RemoveTensorAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = 0;
  unint64_t v65 = 0;
  unint64_t v63 = &v64;
  int v3 = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 128))(a2);
  uint64_t v5 = v3 + 1;
  uint64_t v4 = *v3;
  if (*v3 != (const void **)(v3 + 1))
  {
    do
    {
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v4[7];
      if (E5Common::Utils::IsTensor((uint64_t)v59.__r_.__value_.__l.__data_))
      {
        uint64_t v9 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v4[7]);
        if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9) + 24))
        {
          uint64_t v10 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v4[7]);
          (*(void (**)(uint64_t))(*(void *)v10 + 88))(v10);
          uint64_t v11 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v4[7]);
          uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
          std::string __p = 0;
          unint64_t v61 = 0;
          int64_t v62 = 0;
          BOOL v14 = *(const void **)v12;
          uint64_t v13 = *(void *)(v12 + 8);
          int64_t v15 = v13 - *(void *)v12;
          if (v13 != *(void *)v12)
          {
            if (v15 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            std::string __p = operator new(v13 - *(void *)v12);
            unint64_t v61 = __p;
            uint64_t v16 = (char *)__p + 8 * (v15 >> 3);
            int64_t v62 = v16;
            memcpy(__p, v14, v15);
            unint64_t v61 = v16;
          }
          v59.__r_.__value_.__r.__words[0] = MIL::IRTensorValueType::MakeWithShape();
          if (__p)
          {
            unint64_t v61 = __p;
            operator delete(__p);
          }
        }
      }
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*&>((uint64_t **)&v63, v4 + 4, (uint64_t)(v4 + 4), &v59);
      int v17 = (const void **)v4[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = (const void ***)v17;
          int v17 = (const void **)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (const void ***)v4[2];
          BOOL v19 = *v18 == v4;
          uint64_t v4 = (const void **)v18;
        }
        while (!v19);
      }
      uint64_t v4 = (const void **)v18;
    }
    while (v18 != v5);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 136))(a2, &v63);
  std::__tree<std::string>::destroy((uint64_t)&v63, v64);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v7 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
  uint64_t v8 = (void *)**v7;
  unint64_t v56 = (void *)(*v7)[1];
  if (v8 != v56)
  {
    do
    {
      std::string::size_type v57 = v8;
      uint64_t v21 = *v8;
      unint64_t v63 = 0;
      uint64_t v64 = 0;
      unint64_t v65 = 0;
      uint64_t v58 = v21;
      uint64_t v22 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v21 + 176))();
      uint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      while (v23 != v24)
      {
        unint64_t v26 = *(MIL::IRNamedValueType **)v23;
        uint64_t v25 = *(std::__shared_weak_count **)(v23 + 8);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v26);
        if (E5Common::Utils::IsTensor((uint64_t)Type))
        {
          uint64_t v28 = MIL::IRValueType::AsTensorType(Type);
          if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v28 + 80))(v28) + 24))
          {
            uint64_t v29 = MIL::IRValueType::AsTensorType(Type);
            (*(void (**)(uint64_t))(*(void *)v29 + 88))(v29);
            uint64_t v30 = MIL::IRValueType::AsTensorType(Type);
            uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 96))(v30);
            std::string __p = 0;
            unint64_t v61 = 0;
            int64_t v62 = 0;
            float v33 = *(const void **)v31;
            uint64_t v32 = *(void *)(v31 + 8);
            int64_t v34 = v32 - *(void *)v31;
            if (v32 != *(void *)v31)
            {
              if (v34 < 0) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              std::string __p = operator new(v32 - *(void *)v31);
              unint64_t v61 = __p;
              char v35 = (char *)__p + 8 * (v34 >> 3);
              int64_t v62 = v35;
              memcpy(__p, v33, v34);
              unint64_t v61 = v35;
            }
            MIL::IRTensorValueType::MakeWithShape();
            if (__p)
            {
              unint64_t v61 = __p;
              operator delete(__p);
            }
          }
        }
        uint64_t Name = MIL::IRNamedValueType::GetName(v26);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)Name, *(void *)(Name + 8));
        }
        else
        {
          long long v37 = *(_OWORD *)Name;
          v59.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v37;
        }
        MIL::IRNamedValueType::Make();
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v59.__r_.__value_.__l.__data_);
          uint64_t v38 = __p;
          if (__p) {
LABEL_38:
          }
            operator new();
        }
        else
        {
          uint64_t v38 = __p;
          if (__p) {
            goto LABEL_38;
          }
        }
        std::string __p = 0;
        int8x8_t v40 = v64;
        if ((unint64_t)v64 < v65)
        {
          *(void *)uint64_t v64 = v38;
          *((void *)v40 + 1) = 0;
          unint64_t v39 = v40 + 16;
        }
        else
        {
          unint64_t v41 = (char *)v63;
          uint64_t v42 = v64 - (unsigned char *)v63;
          int64_t v43 = (v64 - (unsigned char *)v63) >> 4;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v45 = v65 - (void)v63;
          if ((uint64_t)(v65 - (void)v63) >> 3 > v44) {
            unint64_t v44 = v45 >> 3;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v46 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::__fs::filesystem::path v47 = (char *)operator new(16 * v46);
          char v48 = &v47[16 * v43];
          *(void *)char v48 = v38;
          unint64_t v39 = v48 + 16;
          *(void *)&v47[v42 + 8] = 0;
          if (v40 == v41)
          {
            unint64_t v63 = v48;
            uint64_t v64 = v48 + 16;
            unint64_t v65 = (unint64_t)&v47[16 * v46];
          }
          else
          {
            do
            {
              long long v49 = *((_OWORD *)v40 - 1);
              v40 -= 16;
              *((_OWORD *)v48 - 1) = v49;
              v48 -= 16;
              *(void *)int8x8_t v40 = 0;
              *((void *)v40 + 1) = 0;
            }
            while (v40 != v41);
            int8x8_t v40 = (char *)v63;
            uint64_t v50 = v64;
            unint64_t v63 = v48;
            uint64_t v64 = v39;
            unint64_t v65 = (unint64_t)&v47[16 * v46];
            while (v50 != v40)
            {
              uint64_t v51 = (std::__shared_weak_count *)*((void *)v50 - 1);
              if (v51)
              {
                if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              v50 -= 16;
            }
          }
          if (v40) {
            operator delete(v40);
          }
        }
        uint64_t v64 = v39;
        int v52 = (MIL::IRNamedValueType *)__p;
        std::string __p = 0;
        if (v52)
        {
          MIL::IRNamedValueType::~IRNamedValueType(v52);
          MEMORY[0x192FF16B0]();
        }
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        v23 += 16;
      }
      (*(void (**)(uint64_t, void **))(*(void *)v58 + 184))(v58, &v63);
      uint64_t v53 = (char *)v63;
      if (v63)
      {
        uint64_t v54 = v64;
        unint64_t v20 = v63;
        if (v64 != v63)
        {
          do
          {
            uint64_t v55 = (std::__shared_weak_count *)*((void *)v54 - 1);
            if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            v54 -= 16;
          }
          while (v54 != v53);
          unint64_t v20 = v63;
        }
        uint64_t v64 = v53;
        operator delete(v20);
      }
      uint64_t v8 = v57 + 2;
    }
    while (v57 + 2 != v56);
  }
}

void sub_19249991C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,char *a21)
{
}

void sub_19249997C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char *a23,char *a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (a23)
  {
    unint64_t v26 = a24;
    unint64_t v27 = a23;
    if (a24 != a23)
    {
      do
      {
        uint64_t v28 = (std::__shared_weak_count *)*((void *)v26 - 1);
        if (v28)
        {
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 16;
      }
      while (v26 != a23);
      unint64_t v27 = a23;
    }
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

MIL::Attributes::BuildInfo **std::unique_ptr<MIL::Attributes::BuildInfo>::~unique_ptr[abi:ne180100](MIL::Attributes::BuildInfo **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Attributes::BuildInfo::~BuildInfo(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void Espresso::AOT::MakeIRProgramWithFunctions(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (MIL::IRObject *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 40) + 168))(*(void *)(*(void *)(a1 + 16) + 40));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 48))(&v39);
  uint64_t v36 = v39;
  long long v37 = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::Make();
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(v6);
  uint64_t v8 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v34 = *LocationPtr;
  char v35 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::SetLocation();
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    uint64_t v9 = *(uint64_t ***)(a1 + 16);
    if (!v9) {
      goto LABEL_40;
    }
    while (1)
    {
LABEL_13:
      (*(void (**)(uint64_t *__return_ptr))(*v9[5] + 232))(&v25);
      uint64_t v10 = v39;
      uint64_t v11 = v40;
      uint64_t v32 = v39;
      float v33 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = v33;
      if (!v33 || atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (a2) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v28 = v39;
      uint64_t v29 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v26[7] = v25;
      if (v25) {
        operator new();
      }
      unint64_t v27 = 0;
      uint64_t v25 = 0;
      MIL::Builder::FunctionBuilder::Make();
      std::string::size_type v30 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v31 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::ProgramBuilder::AddFunction();
      uint64_t v13 = v31;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        __p.__r_.__value_.__r.__words[0] = 0;
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = 0;
      }
      BOOL v14 = v27;
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        int64_t v15 = v29;
        if (v29)
        {
LABEL_31:
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      else
      {
        int64_t v15 = v29;
        if (v29) {
          goto LABEL_31;
        }
      }
      uint64_t v16 = v25;
      uint64_t v25 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      uint64_t v9 = (uint64_t **)*v9;
      if (!v9) {
        goto LABEL_40;
      }
    }
    if (!a2) {
      goto LABEL_19;
    }
LABEL_18:
    Espresso::AOT::RemoveTensorAttributes(v39, v25);
    goto LABEL_19;
  }
  uint64_t v9 = *(uint64_t ***)(a1 + 16);
  if (v9) {
    goto LABEL_13;
  }
LABEL_40:
  MIL::Builder::ProgramBuilder::CreateProgram(&v25, v38);
  if (((*(uint64_t (**)(void *))(v26[0] + 16))(v26) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)v26);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "buildInfo");
  if (MIL::IRObject::TryGetAttribute())
  {
    MIL::Attributes::BuildInfo::Make();
    MIL::Attributes::BuildInfo::Replace();
    int v17 = (MIL::Attributes::BuildInfo *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v17)
    {
      MIL::Attributes::BuildInfo::~BuildInfo(v17);
      MEMORY[0x192FF16B0](v18, 0x20C4093837F09);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  *a3 = v19;
  MEMORY[0x192FEF390](v26);
  uint64_t v20 = v25;
  uint64_t v25 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v38;
  uint64_t v38 = 0;
  if (v21) {
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = v40;
  if (v40)
  {
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_19249A1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair(&a15);
      uint64_t v33 = *(void *)(v31 - 104);
      *(void *)(v31 - 104) = 0;
      if (!v33)
      {
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v31 - 96);
        _Unwind_Resume(a1);
      }
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v31 - 96);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t *std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(void *)(v2 + 48) = v3;
      operator delete(v3);
    }
    if (*(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
    *a1 = 0;
  }
  return a1;
}

BOOL Espresso::AOT::HasFlexibleShape()
{
  std::string __p = (char *)operator new(0x20uLL);
  strcpy(__p, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v2 != 0;
  }
  ((void (*)())v3->__on_zero_shared)();
  std::__shared_weak_count::__release_weak(v3);
  return v2 != 0;
}

void sub_19249A4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::AOT::HasFlexibleShapeWithEnumeratedConfig(uint64_t a1)
{
  if (!Espresso::AOT::HasFlexibleShape()) {
    return 0;
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 48))(&v7);
  MIL::Attributes::FlexibleShapeInfo::Make();
  BOOL v3 = *(void *)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v6) + 24) != 0;
  if (v6)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v6);
    MEMORY[0x192FF16B0]();
  }
  uint64_t v4 = v8;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v3;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v3;
}

void sub_19249A654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  BOOL v3 = va_arg(va1, MIL::Attributes::FlexibleShapeInfo *);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100]((MIL::Attributes::FlexibleShapeInfo **)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19249A670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::AOT::HasFlexibleShapeWithRangeConfig(uint64_t a1)
{
  if (!Espresso::AOT::HasFlexibleShape()) {
    return 0;
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 48))(&v11);
  MIL::Attributes::FlexibleShapeInfo::Make();
  MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(&v8, v10);
  BOOL v3 = v9;
  BOOL v4 = v8 != 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v5 = v10;
  uint64_t v10 = 0;
  if (v5)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v5);
    MEMORY[0x192FF16B0]();
  }
  uint64_t v6 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v4;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return v4;
}

void sub_19249A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, MIL::Attributes::FlexibleShapeInfo *);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100]((MIL::Attributes::FlexibleShapeInfo **)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19249A828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AddBackwardCompatibilityAttributes(uint64_t *a1, uint64_t a2, std::string::size_type a3)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v24 = a1[1];
  if (*a1 == v24) {
    return;
  }
  while (2)
  {
    uint64_t v6 = 0;
    v38[0] = "E5_FlagsEir";
    v38[1] = "E5_FlagsAne";
    do
    {
LABEL_7:
      uint64_t v7 = (const char *)v38[v6];
      size_t v8 = strlen(v7);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v9 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v11 = v8 | 7;
        }
        uint64_t v12 = v11 + 1;
        p_dst = (std::string *)operator new(v11 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
        p_dst = &__dst;
        if (!v8) {
          goto LABEL_15;
        }
      }
      memmove(p_dst, v7, v9);
LABEL_15:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 64))(&v32, a2, v3);
      if (!v32) {
        goto LABEL_62;
      }
      MIL::IRObject::TryGetAttributeSharedPtr();
      if (!v30) {
        goto LABEL_60;
      }
      MIL::IRProgram::GetFunction();
      *(_OWORD *)unint64_t v27 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v29 = 1065353216;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE37CCC8;
      v35.__r_.__value_.__l.__size_ = a3;
      v35.__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
      uint64_t v36 = &v35;
      char v13 = MIL::Util::Walk();
      if (v36 == &v35)
      {
        (*(void (**)(std::string *))(v35.__r_.__value_.__r.__words[0] + 32))(&v35);
        if ((v13 & 1) == 0) {
          goto LABEL_69;
        }
      }
      else
      {
        if (v36) {
          (*(void (**)(void))(v36->__r_.__value_.__r.__words[0] + 40))();
        }
        if ((v13 & 1) == 0)
        {
LABEL_69:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Failed in walking on function to collect its callees.");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      BOOL v14 = (const std::string::value_type *)__p[0];
      if (!__p[0]) {
        goto LABEL_58;
      }
      do
      {
        while (1)
        {
          if (v14[39] < 0) {
            std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)v14 + 2), *((void *)v14 + 3));
          }
          else {
            std::string v35 = *(std::string *)(v14 + 16);
          }
          int64_t v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
          uint64_t v36 = (std::string *)*((void *)v14 + 5);
          long long v37 = v15;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v26, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else {
            std::string v26 = __dst;
          }
          uint64_t v25 = v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::IRObject::SetAttribute();
          if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
            if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_42:
              uint64_t v16 = v37;
              if (!v37) {
                goto LABEL_27;
              }
              goto LABEL_48;
            }
          }
          else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_42;
          }
          operator delete(v26.__r_.__value_.__l.__data_);
          uint64_t v16 = v37;
          if (!v37) {
            goto LABEL_27;
          }
LABEL_48:
          if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
LABEL_27:
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            break;
          }
          BOOL v14 = *(const std::string::value_type **)v14;
          if (!v14) {
            goto LABEL_50;
          }
        }
        operator delete(v35.__r_.__value_.__l.__data_);
        BOOL v14 = *(const std::string::value_type **)v14;
      }
      while (v14);
LABEL_50:
      int v17 = (void **)__p[0];
      if (__p[0])
      {
        do
        {
          while (1)
          {
            uint64_t v18 = (void **)*v17;
            uint64_t v19 = (std::__shared_weak_count *)v17[6];
            if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
            if (*((char *)v17 + 39) < 0) {
              break;
            }
            operator delete(v17);
            int v17 = v18;
            if (!v18) {
              goto LABEL_58;
            }
          }
          operator delete(v17[2]);
          operator delete(v17);
          int v17 = v18;
        }
        while (v18);
      }
LABEL_58:
      uint64_t v20 = v27[0];
      v27[0] = 0;
      if (v20) {
        operator delete(v20);
      }
LABEL_60:
      uint64_t v21 = v31;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        uint64_t v22 = v33;
        if (v33) {
          goto LABEL_63;
        }
      }
      else
      {
LABEL_62:
        uint64_t v22 = v33;
        if (v33)
        {
LABEL_63:
          if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (++v6 == 2) {
          break;
        }
        goto LABEL_7;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      ++v6;
    }
    while (v6 != 2);
    v3 += 24;
    if (v3 != v24) {
      continue;
    }
    break;
  }
}

void sub_19249AD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a20);
  uint64_t v36 = a26;
  if (a26 && !atomic_fetch_add(&a26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  long long v37 = a28;
  if (a28 && !atomic_fetch_add(&a28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::InferTensorToTensorBufferOpInputsFromOutputs(Espresso::AOT *this, MIL::MILContext *a2, MIL::IROperation *a3, const MIL::IRValueType *a4)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*(uint64_t (**)(MIL::MILContext *))(*(void *)a2 + 56))(a2);
  Espresso::AOT::GetOperatorType(v6, &v136);
  if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) != 23) {
      return;
    }
    BOOL v7 = v136.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
      && v136.__r_.__value_.__l.__size_ == 0x726F736E65745F6FLL;
    if (!v7 || *(std::string::size_type *)((char *)&v136.__r_.__value_.__r.__words[1] + 7) != 0x7265666675625F72) {
      return;
    }
LABEL_23:
    uint64_t v12 = (void *)(*(uint64_t (**)(MIL::MILContext *))(*(void *)a2 + 160))(a2);
    v131[0] = 0;
    v131[1] = 0;
    int v130 = v131;
    BOOL v14 = v12 + 1;
    char v13 = (void *)*v12;
    if ((void *)*v12 != v12 + 1)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v130, v131, v13 + 4, (uint64_t)(v13 + 4));
        uint64_t v24 = (void *)v13[1];
        if (v24)
        {
          do
          {
            uint64_t v25 = v24;
            uint64_t v24 = (void *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            uint64_t v25 = (void *)v13[2];
            BOOL v7 = *v25 == (void)v13;
            char v13 = v25;
          }
          while (!v7);
        }
        char v13 = v25;
      }
      while (v25 != v14);
    }
    *((unsigned char *)&v136.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v136, "input");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v16 = MIL::IRValueType::AsTensorType(ParameterType);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 88))(v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 96))(v16);
    v127 = 0;
    int v128 = 0;
    char v129 = 0;
    uint64_t v20 = *(const void **)v18;
    uint64_t v19 = *(void *)(v18 + 8);
    int64_t v21 = v19 - *(void *)v18;
    if (v19 == *(void *)v18)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
    }
    else
    {
      if (v21 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = (char *)operator new(v19 - *(void *)v18);
      uint64_t v23 = &v22[8 * (v21 >> 3)];
      v127 = v22;
      char v129 = v23;
      memcpy(v22, v20, v21);
      int v128 = v23;
    }
    std::string v26 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a3);
    unint64_t v27 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v26);
    int DataType = MIL::IRTensorBufferValueType::GetDataType(v27);
    uint64_t Shape = MIL::IRTensorBufferValueType::GetShape(v27);
    std::string v124 = 0;
    v125 = 0;
    v126 = 0;
    uint64_t v31 = *(const void **)Shape;
    uint64_t v30 = *(void *)(Shape + 8);
    int64_t v32 = v30 - *(void *)Shape;
    if (v30 == *(void *)Shape)
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
    }
    else
    {
      if (v32 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = (char *)operator new(v30 - *(void *)Shape);
      uint64_t v34 = &v33[8 * (v32 >> 3)];
      std::string v124 = v33;
      v126 = v34;
      memcpy(v33, v31, v32);
      v125 = v34;
    }
    int v97 = DataType;
    uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides(v27);
    char v121 = 0;
    v122 = 0;
    char v123 = 0;
    long long v37 = *(const void **)Strides;
    uint64_t v36 = *(void *)(Strides + 8);
    int64_t v38 = v36 - *(void *)Strides;
    v96 = v23;
    if (v36 == *(void *)Strides)
    {
      uint64_t v39 = 0;
      int8x8_t v40 = 0;
    }
    else
    {
      if (v38 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = (char *)operator new(v38);
      int8x8_t v40 = &v39[8 * (v38 >> 3)];
      char v121 = v39;
      char v123 = v40;
      memcpy(v39, v37, v38);
      v122 = v40;
    }
    InterleaveFactors = (const void **)MIL::IRTensorBufferValueType::GetInterleaveFactors(v27);
    v118 = 0;
    v119 = 0;
    v120 = 0;
    int64_t v43 = *InterleaveFactors;
    uint64_t v42 = InterleaveFactors[1];
    int64_t v44 = v42 - (unsigned char *)*InterleaveFactors;
    if (v42 == *InterleaveFactors)
    {
      uint64_t v45 = 0;
      std::__fs::filesystem::path v47 = 0;
      if (v17 == v97)
      {
LABEL_49:
        if (v96 - v22 == v34 - v33 && !memcmp(v22, v33, v96 - v22))
        {
          v115 = 0;
          int v116 = 0;
          uint64_t v117 = 0;
          int64_t v48 = v40 - v39;
          unint64_t v49 = v48 >> 3;
          if (v48)
          {
            if (v48 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            v115 = operator new(v48);
            uint64_t v117 = (char *)v115 + 8 * v49;
            bzero(v115, v48);
            uint64_t v50 = 0;
            int v116 = (char *)v115 + v48;
            while (!MIL::IRProperty::TryAsUnknown(*(MIL::IRProperty **)&v39[8 * v50]))
            {
              if (++v50 >= v49)
              {
                unint64_t v51 = 0;
                do
                {
                  int v52 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v39[8 * v51]);
                  *((void *)v115 + v51++) = MIL::IRConstantProperty::GetInt64ScalarValue(v52);
                }
                while (v51 < v49);
                goto LABEL_63;
              }
            }
            if (v116 - (unsigned char *)v115 >= 1) {
              memset(v115, 255, 8 * (((unint64_t)(v116 - (unsigned char *)v115) >> 3) - ((unint64_t)(v116 - (unsigned char *)v115) > 7))+ 8);
            }
          }
LABEL_63:
          uint64_t v54 = operator new(8uLL);
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
          void *v54 = v49;
          v136.__r_.__value_.__l.__size_ = (std::string::size_type)(v54 + 1);
          v136.__r_.__value_.__r.__words[2] = (std::string::size_type)(v54 + 1);
          MIL::IRTensorValueType::Make();
          if (v136.__r_.__value_.__r.__words[0])
          {
            v136.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          MIL::IRTensorValueType::MakeInt64Value();
          __int16 v111 = 0;
          char v112 = 0;
          std::string v113 = 0;
          unint64_t v55 = v47 - v45;
          if (v47 != v45)
          {
            if ((char *)v47 - (char *)v45 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v56 = (char *)operator new(v47 - v45);
            std::string::size_type v57 = &v56[v55];
            __int16 v111 = v56;
            std::string v113 = &v56[v55];
            bzero(v56, v47 - v45);
            unint64_t v58 = 0;
            char v112 = v57;
            do
            {
              std::string v59 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v45[v58]);
              *((unsigned char *)v111 + v58++) = MIL::IRConstantProperty::GetUInt8ScalarValue(v59);
            }
            while (v58 < v55);
          }
          unint64_t v60 = operator new(8uLL);
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
          *unint64_t v60 = v55;
          v136.__r_.__value_.__l.__size_ = (std::string::size_type)(v60 + 1);
          v136.__r_.__value_.__r.__words[2] = (std::string::size_type)(v60 + 1);
          MIL::IRTensorValueType::Make();
          if (v136.__r_.__value_.__r.__words[0])
          {
            v136.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          MIL::IRTensorValueType::MakeUInt8Value();
          char v107 = 5;
          strcpy((char *)__s1, "input");
          unint64_t v61 = v131[0];
          if (!v131[0]) {
LABEL_90:
          }
            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
          while (1)
          {
            while (1)
            {
              int v62 = v61[55];
              if (v62 >= 0) {
                unint64_t v63 = v61[55];
              }
              else {
                unint64_t v63 = *((void *)v61 + 5);
              }
              if (v62 >= 0) {
                uint64_t v64 = v61 + 32;
              }
              else {
                uint64_t v64 = (const void *)*((void *)v61 + 4);
              }
              if (v63 >= 5) {
                size_t v65 = 5;
              }
              else {
                size_t v65 = v63;
              }
              int v66 = memcmp(__s1, v64, v65);
              BOOL v67 = v66 < 0;
              if (!v66) {
                BOOL v67 = v63 > 5;
              }
              if (!v67) {
                break;
              }
              unint64_t v61 = *(char **)v61;
              if (!v61) {
                goto LABEL_90;
              }
            }
            int v68 = memcmp(v64, __s1, v65);
            BOOL v69 = v63 < 5;
            if (v68) {
              BOOL v69 = v68 < 0;
            }
            if (!v69) {
              break;
            }
            unint64_t v61 = (char *)*((void *)v61 + 1);
            if (!v61) {
              goto LABEL_90;
            }
          }
          std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]<char const(&)[6],std::vector<std::shared_ptr<MIL::IRArgument>>&,0>(&v136, "input", (void **)v61 + 7);
          uint64_t v101 = v114;
          if (v114) {
            operator new();
          }
          uint64_t v102 = 0;
          uint64_t v114 = 0;
          MIL::IRArgument::Make();
          uint64_t v134 = v103;
          if (v103) {
            operator new();
          }
          v135 = 0;
          uint64_t v103 = 0;
          std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100](&v104, &v134, 1uLL);
          v139[0] = (void *)0x73656469727473;
          char v140 = 7;
          std::vector<std::shared_ptr<MIL::IRArgument>>::vector(&v141, (uint64_t)&v104);
          if (v110) {
            operator new();
          }
          uint64_t v110 = 0;
          MIL::IRArgument::Make();
          uint64_t v132 = v98;
          if (v98) {
            operator new();
          }
          v133 = 0;
          std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100](&__p, &v132, 1uLL);
          strcpy((char *)v143, "interleave_factors");
          HIBYTE(v143[2]) = 18;
          std::vector<std::shared_ptr<MIL::IRArgument>>::vector(&v144, (uint64_t)&__p);
          v109[0] = 0;
          v109[1] = 0;
          v108 = v109;
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v108, v109, &v136, (uint64_t)&v136);
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v108, v109, v139, (uint64_t)v139);
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v108, v109, v143, (uint64_t)v143);
          (*(void (**)(MIL::MILContext *, char ***))(*(void *)a2 + 168))(a2, &v108);
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v108, v109[0]);
          long long v70 = v144;
          if (v144)
          {
            uint64_t v71 = v145;
            long long v72 = v144;
            if (v145 != v144)
            {
              do
              {
                uint64_t v73 = (std::__shared_weak_count *)*((void *)v71 - 1);
                if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
                v71 -= 16;
              }
              while (v71 != v70);
              long long v72 = v144;
            }
            v145 = v70;
            operator delete(v72);
          }
          if (SHIBYTE(v143[2]) < 0) {
            operator delete(v143[0]);
          }
          v74 = v141;
          if (v141)
          {
            uint64_t v75 = v142;
            uint64_t v76 = v141;
            if (v142 != v141)
            {
              do
              {
                uint64_t v77 = (std::__shared_weak_count *)*((void *)v75 - 1);
                if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
                v75 -= 16;
              }
              while (v75 != v74);
              uint64_t v76 = v141;
            }
            v142 = v74;
            operator delete(v76);
          }
          if (v140 < 0) {
            operator delete(v139[0]);
          }
          uint64_t v78 = v137;
          if (v137)
          {
            uint64_t v79 = v138;
            long long v80 = v137;
            if (v138 != v137)
            {
              do
              {
                uint64_t v81 = (std::__shared_weak_count *)*((void *)v79 - 1);
                if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
                v79 -= 16;
              }
              while (v79 != v78);
              long long v80 = v137;
            }
            v138 = v78;
            operator delete(v80);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          int v82 = (char *)__p;
          if (__p)
          {
            uint64_t v83 = v100;
            uint64_t v84 = __p;
            if (v100 != __p)
            {
              do
              {
                v85 = (std::__shared_weak_count *)*((void *)v83 - 1);
                if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
                v83 -= 16;
              }
              while (v83 != v82);
              uint64_t v84 = __p;
            }
            unint64_t v100 = v82;
            operator delete(v84);
          }
          uint64_t v86 = v133;
          if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
          uint64_t v87 = (char *)v104;
          if (v104)
          {
            long long v88 = v105;
            uint64_t v89 = v104;
            if (v105 != v104)
            {
              do
              {
                v90 = (std::__shared_weak_count *)*((void *)v88 - 1);
                if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                  std::__shared_weak_count::__release_weak(v90);
                }
                v88 -= 16;
              }
              while (v88 != v87);
              uint64_t v89 = v104;
            }
            v105 = v87;
            operator delete(v89);
          }
          v91 = v135;
          if (v135 && !atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
          uint64_t v92 = v103;
          uint64_t v103 = 0;
          if (v92) {
            (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
          }
          uint64_t v93 = v102;
          if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
          if (v107 < 0) {
            operator delete(__s1[0]);
          }
          uint64_t v94 = v110;
          uint64_t v110 = 0;
          if (v94) {
            (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
          }
          if (v111)
          {
            char v112 = v111;
            operator delete(v111);
          }
          uint64_t v95 = v114;
          uint64_t v114 = 0;
          if (v95) {
            (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
          }
          if (v115)
          {
            int v116 = (char *)v115;
            operator delete(v115);
          }
          if (v118) {
            operator delete(v118);
          }
          if (v121) {
            operator delete(v121);
          }
          if (v124) {
            operator delete(v124);
          }
          if (v127) {
            operator delete(v127);
          }
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v130, v131[0]);
          return;
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Expected output shape should be identical the input shape.");
LABEL_182:
        __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
      }
    }
    else
    {
      if (v44 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v45 = (MIL::IRProperty **)operator new(v42 - (unsigned char *)*InterleaveFactors);
      v118 = v45;
      v120 = &v45[v44 >> 3];
      unint64_t v46 = v43;
      std::__fs::filesystem::path v47 = v120;
      memcpy(v45, v46, v44);
      v119 = v120;
      if (v17 == v97) {
        goto LABEL_49;
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Expected output dtype should be identical the input dtype.");
    goto LABEL_182;
  }
  if (v136.__r_.__value_.__l.__size_ != 23)
  {
    operator delete(v136.__r_.__value_.__l.__data_);
    return;
  }
  BOOL v11 = *(void *)v136.__r_.__value_.__l.__data_ != 0x745F726F736E6574
     || *(void *)(v136.__r_.__value_.__r.__words[0] + 8) != 0x726F736E65745F6FLL
     || *(void *)(v136.__r_.__value_.__r.__words[0] + 15) != 0x7265666675625F72;
  operator delete(v136.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_23;
  }
}

void sub_19249BE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53,char *a54,uint64_t a55,char a56)
{
  __cxa_free_exception(v56);
  if (v57) {
    operator delete(v57);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a50) {
    operator delete(a50);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&a53, a54);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 2 * a3;
    uint64_t v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    BOOL v7 = &a2[v5];
    do
    {
      uint64_t v8 = a2[1];
      *uint64_t v6 = *a2;
      v6[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
      a2 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_19249C2EC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100]((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MakeAneCompatibleStrides(Espresso::AOT *this@<X0>, MIL::MILContext *a2@<X1>, void *a3@<X8>)
{
  int DataType = MIL::IRTensorBufferValueType::GetDataType(a2);
  unint64_t __val = Espresso::AOT::IRDataTypeToByteSize(DataType);
  uint64_t Shape = MIL::IRTensorBufferValueType::GetShape(a2);
  unint64_t v63 = 0;
  uint64_t v64 = 0;
  int v62 = 0;
  std::string::size_type v9 = *(const void **)Shape;
  uint64_t v8 = *(void *)(Shape + 8);
  int64_t v10 = v8 - *(void *)Shape;
  if (v8 == *(void *)Shape)
  {
    BOOL v11 = 0;
  }
  else
  {
    if (v10 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v11 = (char *)operator new(v8 - *(void *)Shape);
    int v62 = v11;
    uint64_t v64 = &v11[8 * (v10 >> 3)];
    memcpy(v11, v9, v10);
    unint64_t v63 = v64;
  }
  uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides(a2);
  std::string v59 = 0;
  unint64_t v60 = 0;
  unint64_t v61 = 0;
  BOOL v14 = *(const void **)Strides;
  uint64_t v13 = *(void *)(Strides + 8);
  int64_t v15 = v13 - *(void *)Strides;
  if (v13 == *(void *)Strides)
  {
    uint64_t v16 = 0;
    int v17 = 0;
  }
  else
  {
    if (v15 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (char *)operator new(v13 - *(void *)Strides);
    int v17 = &v16[8 * (v15 >> 3)];
    std::string v59 = v16;
    unint64_t v61 = v17;
    memcpy(v16, v14, v15);
    unint64_t v60 = v17;
  }
  uint64_t InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(a2);
  unint64_t v56 = 0;
  std::string::size_type v57 = 0;
  unint64_t v58 = 0;
  uint64_t v20 = *(const void **)InterleaveFactors;
  uint64_t v19 = *(void *)(InterleaveFactors + 8);
  int64_t v21 = v19 - *(void *)InterleaveFactors;
  if (v19 == *(void *)InterleaveFactors)
  {
    uint64_t v22 = 0;
    if (!(0x40u % __val)) {
      goto LABEL_12;
    }
LABEL_27:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v54, __val);
    unint64_t v46 = std::string::insert(&v54, 0, "Unexpected element size: ");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v55);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (v21 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v22 = (char *)operator new(v19 - *(void *)InterleaveFactors);
  unint64_t v56 = v22;
  unint64_t v58 = &v22[8 * (v21 >> 3)];
  memcpy(v22, v20, v21);
  std::string::size_type v57 = v58;
  if (0x40u % __val) {
    goto LABEL_27;
  }
LABEL_12:
  int64_t v23 = v17 - v16;
  if ((unint64_t)(v17 - v16) <= 0xF)
  {
    *a3 = v16;
    a3[1] = v17;
    a3[2] = v17;
    uint64_t v16 = 0;
    if (v22) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string __p = v22;
  if (v23 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v24 = (char *)operator new(v17 - v16);
  uint64_t v25 = v23 >> 3;
  *a3 = v24;
  a3[2] = &v24[8 * (v23 >> 3)];
  bzero(v24, v23);
  a3[1] = &v24[v23];
  *(void *)&v24[v23 - 8] = *(void *)&v16[v23 - 8];
  uint64_t v26 = (v23 >> 3) - 1;
  if (v23 >> 3 == 1)
  {
    uint64_t v22 = __p;
    if (__p)
    {
LABEL_14:
      operator delete(v22);
      if (!v16) {
        goto LABEL_33;
      }
LABEL_32:
      operator delete(v16);
      goto LABEL_33;
    }
LABEL_31:
    if (!v16) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v27 = v24 - 8;
  uint64_t v28 = v16;
  uint64_t v29 = 8 * v25;
  int64_t v48 = v28;
  unint64_t v49 = v11;
  int v52 = &v28[8 * v25];
  uint64_t v30 = __p - 8;
  uint64_t v31 = v11 - 8;
  uint64_t v32 = -16;
  do
  {
    uint64_t v33 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v52[v32]);
    uint64_t Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v33);
    std::string v35 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v30[v29]);
    unsigned int UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue(v35);
    uint64_t v37 = (*(uint64_t (**)(void))(**(void **)&v31[v29] + 16))(*(void *)&v31[v29]);
    if (v37)
    {
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 48))(v37);
      uint64_t v39 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v27[v29]);
      uint64_t v40 = MIL::IRConstantProperty::GetInt64ScalarValue(v39);
      unint64_t v41 = (E5RT::CastToSizeT<long long>(Int64ScalarValue) + 0x40 / __val - 1) / (0x40 / __val);
      if (v40 * ((v38 - 1) / UInt8ScalarValue + 1) <= (uint64_t)(v41 * (0x40 / __val))) {
        uint64_t v42 = v41 * (0x40 / __val);
      }
      else {
        uint64_t v42 = v40 * ((v38 - 1) / UInt8ScalarValue + 1);
      }
      Int64uint64_t Scalar = MIL::IRConstantProperty::MakeInt64Scalar(this, (MIL::MILContext *)v42);
    }
    else
    {
      uint64_t v44 = E5RT::CastToSizeT<long long>(Int64ScalarValue);
      Int64uint64_t Scalar = MIL::IRConstantProperty::MakeInt64Scalar(this, (MIL::MILContext *)((v44 + 0x40 / __val - 1) / (0x40 / __val) * (0x40 / __val)));
    }
    v32 -= 8;
    *(void *)&v27[v29 - 8] = Int64Scalar;
    v30 -= 8;
    v31 -= 8;
    v27 -= 8;
    --v26;
  }
  while (v26);
  uint64_t v16 = v48;
  BOOL v11 = v49;
  operator delete(__p);
  if (v48) {
    goto LABEL_32;
  }
LABEL_33:
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_19249C7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v32 & 1) == 0)
    {
LABEL_8:
      if (a13) {
        operator delete(a13);
      }
      if (a11) {
        operator delete(a11);
      }
      if (a12) {
        operator delete(a12);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void Espresso::AOT::ReplaceTensorBufferByTensor(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (MIL::Transform::ProgramTransformer *)MEMORY[0x192FEFD50](v126, a1);
  MIL::Transform::ProgramTransformer::GetProgramBuilder(&v124, v3);
  MIL::Builder::ProgramBuilder::GetFunction();
  MIL::Builder::FunctionBuilder::SelectedSpecialization(v122);
  MIL::Builder::FunctionBuilder::GetBlock();
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v118, v120);
  uint64_t v5 = (uint64_t)v118;
  uint64_t v4 = v119;
  long long v115 = 0u;
  long long v116 = 0u;
  for (int i = 1065353216; v5 != v4; v5 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v115, v5, v5);
  uint64_t v86 = a2;
  MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)&v114, v122);
  uint64_t v6 = (void *)v114.__r_.__value_.__r.__words[2];
  if (v114.__r_.__value_.__r.__words[2])
  {
    while (1)
    {
      BOOL v7 = (MIL::Builder::Variable *)v6[2];
      uint64_t Name = MIL::Builder::Variable::GetName(v7);
      if (!MIL::Builder::Variable::TryGetType(v7))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Failed in retrieving the type of a function input.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      Type = (E5Common::Utils *)MIL::Builder::Variable::TryGetType(v7);
      if ((E5Common::Utils::IsTensorBuffer(Type, v10) & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
      if (*(void *)(OperationsByInput + 24) != 1)
      {
        uint64_t v83 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v83, "Only one consumer for a tensor buffer is supported.");
        v83->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v83, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v12 = *(void *)(OperationsByInput + 16);
      BOOL v14 = *(MIL::Builder::OperationBuilder **)(v12 + 16);
      uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
      char v112 = v14;
      std::string v113 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v14);
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
      Espresso::AOT::GetOperatorType(v16, &v111);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v111.__r_.__value_.__l.__size_ != 23)
        {
          operator delete(v111.__r_.__value_.__l.__data_);
LABEL_215:
          v85 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v85, "Consumer is not tensor_buffer_to_tensor.");
          v85->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v85, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        BOOL v21 = *(void *)v111.__r_.__value_.__l.__data_ != 0x625F726F736E6574
           || *(void *)(v111.__r_.__value_.__r.__words[0] + 8) != 0x6F745F7265666675
           || *(void *)(v111.__r_.__value_.__r.__words[0] + 15) != 0x726F736E65745F6FLL;
        operator delete(v111.__r_.__value_.__l.__data_);
        if (v21) {
          goto LABEL_215;
        }
      }
      else
      {
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) != 23) {
          goto LABEL_215;
        }
        BOOL v17 = v111.__r_.__value_.__r.__words[0] == 0x625F726F736E6574
           && v111.__r_.__value_.__l.__size_ == 0x6F745F7265666675;
        if (!v17 || *(std::string::size_type *)((char *)&v111.__r_.__value_.__r.__words[1] + 7) != 0x726F736E65745F6FLL) {
          goto LABEL_215;
        }
      }
      MIL::Builder::FunctionBuilder::RemoveInput();
      Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName(v14);
      OutputType = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType(v14);
      MIL::IRValueType::AsTensorType(OutputType);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)Name, *(void *)(Name + 8));
      }
      else
      {
        long long v24 = *(_OWORD *)Name;
        v110.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v24;
      }
      uint64_t v108 = 0;
      v109 = 0;
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      uint64_t v25 = v109;
      if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_45:
          operator delete(v110.__r_.__value_.__l.__data_);
          uint64_t v26 = v113;
          int v106 = v112;
          char v107 = v113;
          if (!v113) {
            goto LABEL_40;
          }
LABEL_39:
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_40;
        }
      }
      else if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_45;
      }
      uint64_t v26 = v113;
      int v106 = v112;
      char v107 = v113;
      if (v113) {
        goto LABEL_39;
      }
LABEL_40:
      MIL::Builder::BlockBuilder::RemoveOperation();
      unint64_t v27 = v107;
      if (v107 && !atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if ((*(char *)(Name + 23) & 0x80000000) == 0)
        {
LABEL_43:
          long long v28 = *(_OWORD *)Name;
          v105.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v28;
          goto LABEL_49;
        }
      }
      else if ((*(char *)(Name + 23) & 0x80000000) == 0)
      {
        goto LABEL_43;
      }
      std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)Name, *(void *)(Name + 8));
LABEL_49:
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v105.__r_.__value_.__l.__data_);
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v115, OutputName))goto LABEL_81; {
      }
        }
      else if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v115, OutputName))
      {
        goto LABEL_81;
      }
      *((unsigned char *)&v111.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v111, "identity");
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      char v99 = 1;
      LOWORD(__p) = 120;
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)Name, *(void *)(Name + 8));
      }
      else
      {
        long long v29 = *(_OWORD *)Name;
        v97.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v29;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (*(char *)(OutputName + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)OutputName, *(void *)(OutputName + 8));
      }
      else
      {
        long long v30 = *(_OWORD *)OutputName;
        v96.__r_.__value_.__r.__words[2] = *(void *)(OutputName + 16);
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v30;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v96.__r_.__value_.__l.__data_);
        uint64_t v31 = v103;
        if (!v103) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v31 = v103;
        if (!v103) {
          goto LABEL_64;
        }
      }
      if (atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_64:
        if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_65;
        }
        goto LABEL_69;
      }
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_65:
        if ((v99 & 0x80000000) == 0) {
          goto LABEL_66;
        }
        goto LABEL_70;
      }
LABEL_69:
      operator delete(v97.__r_.__value_.__l.__data_);
      if ((v99 & 0x80000000) == 0)
      {
LABEL_66:
        int v32 = v102;
        if (!v102) {
          goto LABEL_72;
        }
        goto LABEL_71;
      }
LABEL_70:
      operator delete(__p);
      int v32 = v102;
      if (!v102) {
        goto LABEL_72;
      }
LABEL_71:
      if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
        uint64_t v33 = v101;
        if (!v101) {
          goto LABEL_76;
        }
        goto LABEL_73;
      }
LABEL_72:
      uint64_t v33 = v101;
      if (!v101) {
        goto LABEL_76;
      }
LABEL_73:
      if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
LABEL_76:
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v111.__r_.__value_.__l.__data_);
        uint64_t v34 = v104;
        if (!v104) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v34 = v104;
        if (!v104) {
          goto LABEL_81;
        }
      }
      if (atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_81:
        std::string v35 = v113;
        if (v113) {
          goto LABEL_82;
        }
        goto LABEL_5;
      }
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      std::string v35 = v113;
      if (v113)
      {
LABEL_82:
        if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
LABEL_5:
      uint64_t v6 = (void *)*v6;
      if (!v6)
      {
        uint64_t v36 = (void *)v114.__r_.__value_.__r.__words[2];
        if (v114.__r_.__value_.__r.__words[2])
        {
          do
          {
            uint64_t v37 = (void *)*v36;
            operator delete(v36);
            uint64_t v36 = v37;
          }
          while (v37);
        }
        break;
      }
    }
  }
  uint64_t v38 = (void *)v114.__r_.__value_.__r.__words[0];
  v114.__r_.__value_.__r.__words[0] = 0;
  if (v38) {
    operator delete(v38);
  }
  uint64_t v39 = (uint64_t)v118;
  if ((void *)v119 != v118)
  {
    for (unint64_t j = 0; j < 0xAAAAAAAAAAAAAAABLL * ((v119 - (uint64_t)v118) >> 3); ++j)
    {
      unint64_t v41 = v39 + 24 * j;
      Variable = (MIL::Builder::Variable *)MIL::Builder::BlockBuilder::GetVariable();
      if (!MIL::Builder::Variable::TryGetType(Variable))
      {
        int v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v82, "Failed in retrieving the type of a function output.");
        __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int64_t v43 = (E5Common::Utils *)MIL::Builder::Variable::TryGetType(Variable);
      if ((E5Common::Utils::IsTensorBuffer(v43, v44) & 1) == 0) {
        goto LABEL_92;
      }
      MIL::Builder::BlockBuilder::GetOperation();
      uint64_t v45 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v111.__r_.__value_.__l.__data_);
      uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 16))(v45);
      Espresso::AOT::GetOperatorType(v46, &v114);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v114.__r_.__value_.__l.__size_ != 23)
        {
          operator delete(v114.__r_.__value_.__l.__data_);
LABEL_217:
          uint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v84, "Producer is not tensor_to_tensor_buffer.");
LABEL_218:
          v84->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v84, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        BOOL v51 = *(void *)v114.__r_.__value_.__l.__data_ != 0x745F726F736E6574
           || *(void *)(v114.__r_.__value_.__r.__words[0] + 8) != 0x726F736E65745F6FLL
           || *(void *)(v114.__r_.__value_.__r.__words[0] + 15) != 0x7265666675625F72;
        operator delete(v114.__r_.__value_.__l.__data_);
        if (v51) {
          goto LABEL_217;
        }
      }
      else
      {
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) != 23) {
          goto LABEL_217;
        }
        BOOL v47 = v114.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
           && v114.__r_.__value_.__l.__size_ == 0x726F736E65745F6FLL;
        if (!v47 || *(std::string::size_type *)((char *)&v114.__r_.__value_.__r.__words[1] + 7) != 0x7265666675625F72) {
          goto LABEL_217;
        }
      }
      if (*(void *)(MIL::Builder::BlockBuilder::GetOperationsByInput() + 24))
      {
        uint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v84, "A tensor_buffer that is a block output cannot be consumed by other operations.");
        goto LABEL_218;
      }
      long long v95 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      if (v111.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v111.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::RemoveOperation();
      int v52 = (std::__shared_weak_count *)*((void *)&v95 + 1);
      if (*((void *)&v95 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      *((unsigned char *)&v114.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v114, "input");
      ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
      uint64_t v54 = MIL::Builder::Variable::GetName(ArgumentForParameter);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v114.__r_.__value_.__l.__data_);
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v115, v54))
        {
          goto LABEL_124;
        }
LABEL_127:
        MIL::Builder::BlockBuilder::GetOperation();
        unint64_t v57 = 0;
        while (2)
        {
          if (v57 >= MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v114.__r_.__value_.__l.__data_))
          {
            size_t size = (std::__shared_weak_count *)v114.__r_.__value_.__l.__size_;
            if (!v114.__r_.__value_.__l.__size_) {
              goto LABEL_181;
            }
LABEL_180:
            if (atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_181;
            }
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
            uint64_t v71 = (std::__shared_weak_count *)v111.__r_.__value_.__l.__size_;
            if (!v111.__r_.__value_.__l.__size_) {
              goto LABEL_92;
            }
LABEL_182:
            if (!atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
            goto LABEL_92;
          }
          unint64_t v58 = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v114.__r_.__value_.__l.__data_);
          uint64_t v59 = v58[23];
          if ((v59 & 0x80u) == 0) {
            uint64_t v60 = v58[23];
          }
          else {
            uint64_t v60 = *((void *)v58 + 1);
          }
          uint64_t v61 = *(unsigned __int8 *)(v54 + 23);
          int v62 = (char)v61;
          if ((v61 & 0x80u) != 0) {
            uint64_t v61 = *(void *)(v54 + 8);
          }
          if (v60 == v61)
          {
            if (v62 >= 0) {
              unint64_t v63 = (const std::string::value_type *)v54;
            }
            else {
              unint64_t v63 = *(const std::string::value_type **)v54;
            }
            if ((v59 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v58, v63, *((void *)v58 + 1))) {
                goto LABEL_144;
              }
            }
            else
            {
              if (v58[23])
              {
                while (*v58 == *(unsigned __int8 *)v63)
                {
                  ++v58;
                  ++v63;
                  if (!--v59) {
                    goto LABEL_144;
                  }
                }
                goto LABEL_129;
              }
LABEL_144:
              if (*(char *)(v41 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)v41, *(void *)(v41 + 8));
              }
              else
              {
                long long v64 = *(_OWORD *)v41;
                v93.__r_.__value_.__r.__words[2] = *(void *)(v41 + 16);
                *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v64;
              }
              MIL::Builder::OperationBuilder::RenameOutput();
              size_t v65 = v94;
              if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
                if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
LABEL_150:
                }
                  operator delete(v93.__r_.__value_.__l.__data_);
              }
              else if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              {
                goto LABEL_150;
              }
            }
          }
LABEL_129:
          ++v57;
          continue;
        }
      }
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v115, v54))goto LABEL_127; {
LABEL_124:
      }
      std::string v55 = (MIL::Builder::Variable *)MIL::Builder::BlockBuilder::GetVariable();
      MIL::Builder::Variable::TryGetType(v55);
      *((unsigned char *)&v114.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v114, "identity");
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      char v90 = 1;
      LOWORD(v89) = 120;
      if (*(char *)(v54 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v54, *(void *)(v54 + 8));
      }
      else
      {
        long long v56 = *(_OWORD *)v54;
        v88.__r_.__value_.__r.__words[2] = *(void *)(v54 + 16);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v56;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (*(char *)(v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v41, *(void *)(v41 + 8));
      }
      else
      {
        long long v67 = *(_OWORD *)v41;
        v87.__r_.__value_.__r.__words[2] = *(void *)(v41 + 16);
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v67;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v87.__r_.__value_.__l.__data_);
        int v68 = v104;
        if (!v104) {
          goto LABEL_164;
        }
      }
      else
      {
        int v68 = v104;
        if (!v104) {
          goto LABEL_164;
        }
      }
      if (atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_164:
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_165;
        }
        goto LABEL_169;
      }
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_165:
        if ((v90 & 0x80000000) == 0) {
          goto LABEL_166;
        }
        goto LABEL_170;
      }
LABEL_169:
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((v90 & 0x80000000) == 0)
      {
LABEL_166:
        BOOL v69 = v103;
        if (!v103) {
          goto LABEL_172;
        }
        goto LABEL_171;
      }
LABEL_170:
      operator delete(v89);
      BOOL v69 = v103;
      if (!v103) {
        goto LABEL_172;
      }
LABEL_171:
      if (atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_172:
        long long v70 = v92;
        if (v92) {
          goto LABEL_173;
        }
        goto LABEL_176;
      }
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
      long long v70 = v92;
      if (v92)
      {
LABEL_173:
        if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
LABEL_176:
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v114.__r_.__value_.__l.__data_);
        size_t size = v113;
        if (!v113) {
          goto LABEL_181;
        }
        goto LABEL_180;
      }
      size_t size = v113;
      if (v113) {
        goto LABEL_180;
      }
LABEL_181:
      uint64_t v71 = (std::__shared_weak_count *)v111.__r_.__value_.__l.__size_;
      if (v111.__r_.__value_.__l.__size_) {
        goto LABEL_182;
      }
LABEL_92:
      uint64_t v39 = (uint64_t)v118;
    }
  }
  MIL::Transform::ProgramTransformer::GetProgram(v86, (MIL::Transform::ProgramTransformer *)v126);
  long long v72 = (void **)v116;
  if ((void)v116)
  {
    do
    {
      uint64_t v77 = (void **)*v72;
      if (*((char *)v72 + 39) < 0) {
        operator delete(v72[2]);
      }
      operator delete(v72);
      long long v72 = v77;
    }
    while (v77);
  }
  uint64_t v73 = (void *)v115;
  *(void *)&long long v115 = 0;
  if (v73) {
    operator delete(v73);
  }
  uint64_t v74 = (uint64_t)v118;
  if (v118)
  {
    uint64_t v75 = v119;
    uint64_t v76 = v118;
    if ((void *)v119 != v118)
    {
      do
      {
        if (*(char *)(v75 - 1) < 0) {
          operator delete(*(void **)(v75 - 24));
        }
        v75 -= 24;
      }
      while (v75 != v74);
      uint64_t v76 = v118;
    }
    uint64_t v119 = v74;
    operator delete(v76);
  }
  uint64_t v78 = v121;
  if (v121 && !atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  uint64_t v79 = v123;
  if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
  long long v80 = v125;
  if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v126);
}

void sub_19249D8EC(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1 - 224);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v1 - 176));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 152);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 136);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 120);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::ReplacePixelBufferByTensor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v183 = (*(uint64_t (**)(void))(*(void *)Function + 40))();
  MIL::EdgeIndexes::BuildForBlock();
  uint64_t v4 = (MIL::Transform::ProgramTransformer *)MEMORY[0x192FEFD50](v244, a1);
  MIL::Transform::ProgramTransformer::GetProgramBuilder(&v242, v4);
  MIL::Builder::ProgramBuilder::GetFunction();
  (*(void (**)(uint64_t))(*(void *)Function + 32))(Function);
  MIL::Builder::FunctionBuilder::GetBlock();
  v236 = 0;
  v237 = 0;
  v238 = 0;
  v233 = 0;
  v234 = 0;
  unint64_t v235 = 0;
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
  uint64_t v8 = v5 + 1;
  BOOL v7 = (void *)*v5;
  if ((void *)*v5 != v5 + 1)
  {
    v181 = v5 + 1;
    while (1)
    {
      if ((E5Common::Utils::IsPixelBuffer((E5Common::Utils *)v7[7], v6) & 1) == 0) {
        goto LABEL_153;
      }
      std::string::size_type v9 = (std::string *)(v7 + 4);
      int64_t v10 = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v245 + 16))(v245, v7 + 4);
      if (v10[1] - *v10 != 16)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Found more than one edge for a pixel buffer.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      int v11 = (*(uint64_t (**)(void))(**(void **)*v10 + 24))();
      uint64_t v12 = *(void **)(*(uint64_t (**)(uint64_t))(*(void *)v183 + 56))(v183);
      if (v11 >= (unint64_t)((uint64_t)(v12[1] - *v12) >> 4)) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v13 = *(void *)(*v12 + 16 * v11);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
      Espresso::AOT::GetOperatorType(v14, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 22)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_384:
          v179 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v179, "Consumer is not pixel_buffer_to_tensor.");
          v179->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v179, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        BOOL v19 = *(void *)__p.__r_.__value_.__l.__data_ != 0x75625F6C65786970
           || *(void *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x5F6F745F72656666
           || *(void *)(__p.__r_.__value_.__r.__words[0] + 14) != 0x726F736E65745F6FLL;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v19) {
          goto LABEL_384;
        }
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 22) {
          goto LABEL_384;
        }
        BOOL v15 = __p.__r_.__value_.__r.__words[0] == 0x75625F6C65786970
           && __p.__r_.__value_.__l.__size_ == 0x5F6F745F72656666;
        if (!v15 || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) != 0x726F736E65745F6FLL) {
          goto LABEL_384;
        }
      }
      uint64_t v20 = v237;
      if (v237 >= v238) {
        break;
      }
      *(void *)v237 = v11;
      BOOL v21 = v20 + 8;
LABEL_49:
      v237 = v21;
      MIL::Builder::FunctionBuilder::RemoveInput();
      int64_t v43 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 176))(v13);
      uint64_t v44 = *v43;
      if (v43[1] == *v43) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v46 = *(MIL::IRNamedValueType **)v44;
      uint64_t v45 = *(std::__shared_weak_count **)(v44 + 8);
      v231 = v46;
      v232 = v45;
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v46);
      uint64_t v48 = MIL::IRValueType::AsTensorType(Type);
      (*(void (**)(uint64_t))(*(void *)v48 + 88))(v48);
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 96))(v48);
      memset(&v230, 0, sizeof(v230));
      BOOL v51 = *(const void **)v49;
      uint64_t v50 = *(void *)(v49 + 8);
      int64_t v52 = v50 - *(void *)v49;
      if (v50 != *(void *)v49)
      {
        if (v52 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        v230.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v50 - *(void *)v49);
        v230.__r_.__value_.__l.__size_ = v230.__r_.__value_.__r.__words[0];
        std::string::size_type v53 = v230.__r_.__value_.__r.__words[0] + 8 * (v52 >> 3);
        v230.__r_.__value_.__r.__words[2] = v53;
        memcpy(v230.__r_.__value_.__l.__data_, v51, v52);
        v230.__r_.__value_.__l.__size_ = v53;
      }
      uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 80))(v48);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&__p, v54);
      MIL::IRTensorValueType::MakeWithShape();
      if (*((char *)v7 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v227, (const std::string::value_type *)v7[4], v7[5]);
      }
      else {
        std::string v227 = *v9;
      }
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v227.__r_.__value_.__l.__data_);
      }
      uint64_t v55 = v245;
      uint64_t Name = MIL::IRNamedValueType::GetName(v46);
      unint64_t v57 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v55 + 16))(v55, Name);
      uint64_t v58 = *v57;
      uint64_t v59 = v57[1];
      while (v58 != v59)
      {
        (*(void (**)(void))(**(void **)v58 + 24))();
        MIL::Builder::BlockBuilder::GetOperation(v239);
        uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v226);
        uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
        Espresso::AOT::GetOperatorType(v61, (std::string *)&v203);
        if (SBYTE7(v205) < 0)
        {
          if (v204 == (std::string *)4)
          {
            int data = (int)v203->__r_.__value_.__l.__data_;
            operator delete(v203);
            if (data == 1953718627) {
              goto LABEL_69;
            }
          }
          else
          {
            operator delete(v203);
          }
        }
        else if (SBYTE7(v205) == 4 && v203 == 1953718627)
        {
LABEL_69:
          MIL::IRNamedValueType::GetName(v231);
          if (*((char *)v7 + 55) < 0) {
            std::string::__init_copy_ctor_external(&v225, (const std::string::value_type *)v7[4], v7[5]);
          }
          else {
            std::string v225 = *v9;
          }
          MIL::Builder::OperationBuilder::RenameArgument();
          if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v225.__r_.__value_.__l.__data_);
            uint64_t v78 = (std::__shared_weak_count *)*((void *)&v226 + 1);
            if (!*((void *)&v226 + 1)) {
              goto LABEL_61;
            }
            goto LABEL_135;
          }
          goto LABEL_134;
        }
        BYTE7(v205) = 5;
        strcpy((char *)&v203, "ios17");
        MIL::MILContext::GetOpset();
        HIBYTE(v221) = 4;
        strcpy((char *)&v219, "cast");
        MIL::IROpset::TryGetOperatorSharedPtr();
        MIL::Builder::OperationBuilder::Make();
        unint64_t v63 = v222;
        if (v222 && !atomic_fetch_add(&v222->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
          if (SHIBYTE(v221) < 0)
          {
LABEL_93:
            operator delete(v219);
            if ((SBYTE7(v205) & 0x80000000) == 0) {
              goto LABEL_76;
            }
            goto LABEL_94;
          }
        }
        else if (SHIBYTE(v221) < 0)
        {
          goto LABEL_93;
        }
        if ((SBYTE7(v205) & 0x80000000) == 0) {
          goto LABEL_76;
        }
LABEL_94:
        operator delete(v203);
LABEL_76:
        char v217 = 1;
        LOWORD(v216) = 120;
        if (*((char *)v7 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v215, (const std::string::value_type *)v7[4], v7[5]);
        }
        else {
          std::string v215 = *v9;
        }
        MIL::Builder::OperationBuilder::AddInput();
        long long v64 = v218;
        if (v218 && !atomic_fetch_add(&v218->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_96:
            operator delete(v215.__r_.__value_.__l.__data_);
            if ((v217 & 0x80000000) == 0) {
              goto LABEL_83;
            }
            goto LABEL_97;
          }
        }
        else if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_96;
        }
        if ((v217 & 0x80000000) == 0) {
          goto LABEL_83;
        }
LABEL_97:
        operator delete(v216);
LABEL_83:
        MIL::IRTensorValueType::MakeScalar();
        MIL::IRDataTypeToString();
        MIL::IRTensorValueType::MakeStringValue();
        v219 = v203;
        if (v203) {
          operator new();
        }
        v220 = 0;
        v203 = 0;
        if (v214 < 0) {
          operator delete(v213);
        }
        char v211 = 5;
        strcpy((char *)v210, "dtype");
        uint64_t v208 = 0;
        v209 = 0;
        MIL::Builder::OperationBuilder::AddInput();
        size_t v65 = v212;
        if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          int v66 = v209;
          if (!v209) {
            goto LABEL_99;
          }
        }
        else
        {
          int v66 = v209;
          if (!v209) {
            goto LABEL_99;
          }
        }
        if (!atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
LABEL_99:
        if (v211 < 0) {
          operator delete(v210[0]);
        }
        uint64_t v67 = MIL::IRNamedValueType::GetName(v231);
        if (*(char *)(v67 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)v67, *(void *)(v67 + 8));
        }
        else
        {
          long long v68 = *(_OWORD *)v67;
          v206.__r_.__value_.__r.__words[2] = *(void *)(v67 + 16);
          *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v68;
        }
        MIL::Builder::OperationBuilder::AddOutput();
        BOOL v69 = v207;
        if (v207 && !atomic_fetch_add(&v207->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
          if ((SHIBYTE(v206.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_107:
            long long v70 = v223;
            uint64_t v71 = v224;
            v203 = v223;
            v204 = (std::string *)v224;
            if (!v224) {
              goto LABEL_109;
            }
LABEL_108:
            atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_109;
          }
        }
        else if ((SHIBYTE(v206.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_107;
        }
        operator delete(v206.__r_.__value_.__l.__data_);
        long long v70 = v223;
        uint64_t v71 = v224;
        v203 = v223;
        v204 = (std::string *)v224;
        if (v224) {
          goto LABEL_108;
        }
LABEL_109:
        long long v205 = v226;
        if (*((void *)&v226 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v226 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v72 = v234;
        if ((unint64_t)v234 >= v235)
        {
          uint64_t v74 = (std::string **)std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::__push_back_slow_path<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>((void **)&v233, (uint64_t)&v203);
          uint64_t v75 = (std::__shared_weak_count *)*((void *)&v205 + 1);
          v234 = v74;
          if (*((void *)&v205 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v205 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
            uint64_t v73 = (std::__shared_weak_count *)v204;
            if (!v204) {
              goto LABEL_119;
            }
          }
          else
          {
            uint64_t v73 = (std::__shared_weak_count *)v204;
            if (!v204) {
              goto LABEL_119;
            }
          }
        }
        else
        {
          *v234 = v70;
          v72[1] = v204;
          v203 = 0;
          v204 = 0;
          *((_OWORD *)v72 + 1) = v205;
          long long v205 = 0uLL;
          v234 = v72 + 4;
          uint64_t v73 = (std::__shared_weak_count *)v204;
          if (!v204) {
            goto LABEL_119;
          }
        }
        if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
LABEL_119:
        uint64_t v76 = v220;
        if (v220 && !atomic_fetch_add(&v220->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
          uint64_t v77 = v224;
          if (!v224) {
            goto LABEL_134;
          }
        }
        else
        {
          uint64_t v77 = v224;
          if (!v224) {
            goto LABEL_134;
          }
        }
        if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
          uint64_t v78 = (std::__shared_weak_count *)*((void *)&v226 + 1);
          if (!*((void *)&v226 + 1)) {
            goto LABEL_61;
          }
          goto LABEL_135;
        }
LABEL_134:
        uint64_t v78 = (std::__shared_weak_count *)*((void *)&v226 + 1);
        if (!*((void *)&v226 + 1)) {
          goto LABEL_61;
        }
LABEL_135:
        if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
LABEL_61:
        v58 += 16;
      }
      uint64_t v79 = (void **)__p.__r_.__value_.__r.__words[2];
      uint64_t v8 = v181;
      if (__p.__r_.__value_.__r.__words[2])
      {
        do
        {
          while (1)
          {
            long long v80 = (void **)*v79;
            uint64_t v81 = (std::__shared_weak_count *)v79[6];
            if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
            if (*((char *)v79 + 39) < 0) {
              break;
            }
            operator delete(v79);
            uint64_t v79 = v80;
            if (!v80) {
              goto LABEL_147;
            }
          }
          operator delete(v79[2]);
          operator delete(v79);
          uint64_t v79 = v80;
        }
        while (v80);
      }
LABEL_147:
      int v82 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v82) {
        operator delete(v82);
      }
      if (v230.__r_.__value_.__r.__words[0])
      {
        v230.__r_.__value_.__l.__size_ = v230.__r_.__value_.__r.__words[0];
        operator delete(v230.__r_.__value_.__l.__data_);
      }
      uint64_t v83 = v232;
      if (v232 && !atomic_fetch_add(&v232->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        uint64_t v84 = (void *)v7[1];
        if (v84) {
          goto LABEL_154;
        }
      }
      else
      {
LABEL_153:
        uint64_t v84 = (void *)v7[1];
        if (v84)
        {
          do
          {
LABEL_154:
            v85 = v84;
            uint64_t v84 = (void *)*v84;
          }
          while (v84);
          goto LABEL_3;
        }
      }
      do
      {
        v85 = (void *)v7[2];
        BOOL v15 = *v85 == (void)v7;
        BOOL v7 = v85;
      }
      while (!v15);
LABEL_3:
      BOOL v7 = v85;
      if (v85 == v8) {
        goto LABEL_160;
      }
    }
    uint64_t v22 = v236;
    int64_t v23 = v237 - v236;
    uint64_t v24 = (v237 - v236) >> 3;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v238 - v236;
    if ((v238 - v236) >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      int64_t v184 = v237 - v236;
      if (v27 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v28 = v3;
      unint64_t v29 = v27;
      long long v30 = (char *)operator new(8 * v27);
      unint64_t v27 = v29;
      uint64_t v3 = v28;
      std::string::size_type v9 = (std::string *)(v7 + 4);
      int64_t v23 = v184;
      uint64_t v31 = &v30[8 * v24];
      *(void *)uint64_t v31 = v11;
      BOOL v21 = v31 + 8;
      if (v20 == v22) {
        goto LABEL_47;
      }
    }
    else
    {
      long long v30 = 0;
      uint64_t v31 = (char *)(8 * v24);
      int v32 = (void *)(8 * v24);
      *int v32 = v11;
      BOOL v21 = (char *)(v32 + 1);
      if (v20 == v22)
      {
LABEL_47:
        v236 = v31;
        v238 = &v30[8 * v27];
        if (v22) {
          operator delete(v22);
        }
        goto LABEL_49;
      }
    }
    unint64_t v33 = v20 - 8 - v22;
    if (v33 < 0x58) {
      goto LABEL_389;
    }
    uint64_t v34 = &v30[v23];
    if ((unint64_t)(v20 - &v30[v23]) < 0x20) {
      goto LABEL_389;
    }
    uint64_t v35 = (v33 >> 3) + 1;
    uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v37 = &v20[-v36];
    v31 -= v36;
    uint64_t v38 = v34 - 16;
    uint64_t v39 = v20 - 16;
    uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v41 = *(_OWORD *)v39;
      *((_OWORD *)v38 - 1) = *((_OWORD *)v39 - 1);
      *(_OWORD *)uint64_t v38 = v41;
      v38 -= 32;
      v39 -= 32;
      v40 -= 4;
    }
    while (v40);
    uint64_t v20 = v37;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_389:
      do
      {
        uint64_t v42 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v31 - 1) = v42;
        v31 -= 8;
      }
      while (v20 != v22);
    }
    goto LABEL_47;
  }
LABEL_160:
  MIL::Builder::BlockBuilder::RemoveOperations();
  uint64_t v86 = v233;
  std::string v87 = (std::string::size_type *)v234;
  if (v233 != (std::string::size_type *)v234)
  {
    do
    {
      std::string::size_type v88 = *v86;
      __p.__r_.__value_.__r.__words[0] = *v86;
      std::string::size_type v89 = v86[1];
      __p.__r_.__value_.__l.__size_ = v89;
      if (v89) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type v90 = v86[2];
      __p.__r_.__value_.__r.__words[2] = v90;
      uint64_t v91 = (std::__shared_weak_count *)v86[3];
      v229 = v91;
      if (v91) {
        atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v201 = v88;
      v202 = (std::__shared_weak_count *)v89;
      if (v89) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type v199 = v90;
      v200 = v91;
      if (v91) {
        atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::AddOperation();
      if (v200 && !atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
        uint64_t v92 = v202;
        if (!v202) {
          goto LABEL_177;
        }
      }
      else
      {
        uint64_t v92 = v202;
        if (!v202) {
          goto LABEL_177;
        }
      }
      if (!atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
LABEL_177:
      std::string v93 = v229;
      if (v229 && !atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        size_t size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
LABEL_180:
          if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
      else
      {
        size_t size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_) {
          goto LABEL_180;
        }
      }
      v86 += 4;
    }
    while (v86 != v87);
  }
  long long v95 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v183 + 88))(v183);
  std::vector<std::string>::vector((std::vector<std::string> *)&v203, 0xAAAAAAAAAAAAAAABLL * ((v95[1] - *v95) >> 3));
  for (unint64_t i = 0; ; ++i)
  {
    std::string v97 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v183 + 88))(v183);
    if (i >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97[1] - *v97) >> 3)) {
      break;
    }
    uint64_t v98 = *v95;
    (*(void (**)(std::string *__return_ptr))(*(void *)Function + 160))(&__p);
    if (i >= (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    int IsPixelBuffer = E5Common::Utils::IsPixelBuffer(*(E5Common::Utils **)(__p.__r_.__value_.__r.__words[0] + 8 * i), v99);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v101 = (const std::string *)(v98 + 24 * i);
    if (IsPixelBuffer)
    {
      MIL::Builder::BlockBuilder::GetOperation();
      uint64_t v102 = MIL::Builder::OperationBuilder::GetOperator(v231);
      uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)v102 + 16))(v102);
      Espresso::AOT::GetOperatorType(v103, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 22)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_381:
          v178 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v178, "Producer is not tensor_to_pixel_buffer.");
          v178->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v178, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        BOOL v109 = *(void *)__p.__r_.__value_.__l.__data_ != 0x745F726F736E6574
            || *(void *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x5F6C657869705F6FLL
            || *(void *)(__p.__r_.__value_.__r.__words[0] + 14) != 0x7265666675625F6CLL;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v109) {
          goto LABEL_381;
        }
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 22) {
          goto LABEL_381;
        }
        BOOL v104 = __p.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
            && __p.__r_.__value_.__l.__size_ == 0x5F6C657869705F6FLL;
        if (!v104 || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) != 0x7265666675625F6CLL) {
          goto LABEL_381;
        }
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "input");
      ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v111 = MIL::Builder::Variable::GetName(ArgumentForParameter);
      uint64_t v112 = v111;
      uint64_t v114 = *v95;
      uint64_t v113 = v95[1];
      if (*v95 != v113)
      {
        char v115 = *(unsigned char *)(v111 + 23);
        if (v115 >= 0) {
          uint64_t v116 = *(unsigned __int8 *)(v111 + 23);
        }
        else {
          uint64_t v116 = *(void *)(v111 + 8);
        }
        if (v115 >= 0) {
          uint64_t v117 = (unsigned __int8 *)v111;
        }
        else {
          uint64_t v117 = *(unsigned __int8 **)v111;
        }
        for (uint64_t j = *v95; j != v113; j += 24)
        {
          uint64_t v119 = *(unsigned __int8 *)(j + 23);
          if ((v119 & 0x80u) == 0) {
            uint64_t v120 = *(unsigned __int8 *)(j + 23);
          }
          else {
            uint64_t v120 = *(void *)(j + 8);
          }
          if (v120 == v116)
          {
            if ((v119 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)j, v117, *(void *)(j + 8))) {
                goto LABEL_238;
              }
            }
            else
            {
              if (!*(unsigned char *)(j + 23))
              {
LABEL_238:
                if (j != v113)
                {
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v204 - (char *)v203) >> 3) <= 0xAAAAAAAAAAAAAAABLL
                                                                                    * ((j - v114) >> 3))
                    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                  std::string::operator=((std::string *)((char *)v203 + 8 * ((j - v114) >> 3)), v101);
                }
                break;
              }
              uint64_t v121 = 0;
              while (*(unsigned __int8 *)(j + v121) == v117[v121])
              {
                if (v119 == ++v121) {
                  goto LABEL_238;
                }
              }
            }
          }
        }
      }
      v197 = v231;
      v198 = v232;
      if (v232) {
        atomic_fetch_add_explicit(&v232->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::RemoveOperation();
      v122 = v198;
      if (v198 && !atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
      MIL::Builder::BlockBuilder::GetOperation();
      if (MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v226) != 1)
      {
        v176 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v176, "Unsupported number of outputs. Only one output is supported.");
        v176->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v176, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v123 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v226);
      uint64_t v124 = (*(uint64_t (**)(uint64_t))(*(void *)v123 + 16))(v123);
      Espresso::AOT::GetOperatorType(v124, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 4)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_258;
        }
        int v125 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v125 != 1953718627) {
          goto LABEL_258;
        }
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4 || LODWORD(__p.__r_.__value_.__l.__data_) != 1953718627)
      {
LABEL_258:
        OutputType = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder *)v226);
        uint64_t v132 = MIL::IRValueType::AsTensorType(OutputType);
        uint64_t v133 = (*(uint64_t (**)(uint64_t))(*(void *)v132 + 96))(v132);
        memset(&v230, 0, sizeof(v230));
        v135 = *(const void **)v133;
        uint64_t v134 = *(void *)(v133 + 8);
        int64_t v136 = v134 - *(void *)v133;
        if (v134 != *(void *)v133)
        {
          if (v136 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          v230.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v134 - *(void *)v133);
          v230.__r_.__value_.__l.__size_ = v230.__r_.__value_.__r.__words[0];
          std::string::size_type v137 = v230.__r_.__value_.__r.__words[0] + 8 * (v136 >> 3);
          v230.__r_.__value_.__r.__words[2] = v137;
          memcpy(v230.__r_.__value_.__l.__data_, v135, v136);
          v230.__r_.__value_.__l.__size_ = v137;
        }
        uint64_t v138 = (*(uint64_t (**)(uint64_t))(*(void *)v132 + 80))(v132);
        std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&__p, v138);
        v187 = v239;
        v188 = v240;
        if (v240) {
          atomic_fetch_add_explicit(&v240->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v185 = 0;
        v186 = 0;
        v139 = v190;
        if (v190 && !atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
          char v140 = v186;
          if (v186) {
            goto LABEL_266;
          }
        }
        else
        {
          char v140 = v186;
          if (v186)
          {
LABEL_266:
            if (!atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
        }
        v141 = v188;
        if (v188 && !atomic_fetch_add(&v188->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
          v142 = (void **)__p.__r_.__value_.__r.__words[2];
          if (__p.__r_.__value_.__r.__words[2]) {
            goto LABEL_277;
          }
        }
        else
        {
          v142 = (void **)__p.__r_.__value_.__r.__words[2];
          if (__p.__r_.__value_.__r.__words[2])
          {
            do
            {
              while (1)
              {
LABEL_277:
                v143 = (void **)*v142;
                v144 = (std::__shared_weak_count *)v142[6];
                if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                  std::__shared_weak_count::__release_weak(v144);
                }
                if (*((char *)v142 + 39) < 0) {
                  break;
                }
                operator delete(v142);
                v142 = v143;
                if (!v143) {
                  goto LABEL_281;
                }
              }
              operator delete(v142[2]);
              operator delete(v142);
              v142 = v143;
            }
            while (v143);
          }
        }
LABEL_281:
        v145 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v145) {
          operator delete(v145);
        }
        uint64_t v146 = (void *)v230.__r_.__value_.__r.__words[0];
        if (v230.__r_.__value_.__r.__words[0])
        {
          v230.__r_.__value_.__l.__size_ = v230.__r_.__value_.__r.__words[0];
          goto LABEL_285;
        }
        goto LABEL_286;
      }
      v126 = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder *)v226);
      uint64_t v127 = MIL::IRValueType::AsTensorType(v126);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 1;
      LOWORD(__p.__r_.__value_.__l.__data_) = 120;
      int v128 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
      uint64_t v129 = MIL::Builder::Variable::GetName(v128);
      if (*(char *)(v129 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)v129, *(void *)(v129 + 8));
      }
      else
      {
        long long v130 = *(_OWORD *)v129;
        v230.__r_.__value_.__r.__words[2] = *(void *)(v129 + 16);
        *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v130;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v148 = (*(uint64_t (**)(uint64_t))(*(void *)v127 + 96))(v127);
      v219 = 0;
      v220 = 0;
      v221 = 0;
      v150 = *(const void **)v148;
      uint64_t v149 = *(void *)(v148 + 8);
      int64_t v151 = v149 - *(void *)v148;
      if (v149 != *(void *)v148)
      {
        if (v151 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        v219 = operator new(v149 - *(void *)v148);
        v220 = (std::__shared_weak_count *)v219;
        v152 = (std::__shared_weak_count *)((char *)v219 + 8 * (v151 >> 3));
        v221 = v152;
        memcpy(v219, v150, v151);
        v220 = v152;
      }
      uint64_t v153 = (*(uint64_t (**)(uint64_t))(*(void *)v127 + 80))(v127);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&__p, v153);
      v193 = v239;
      v194 = v240;
      if (v240) {
        atomic_fetch_add_explicit(&v240->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v192 = v226;
      if (*((void *)&v226 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v226 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v154 = v196;
      if (v196 && !atomic_fetch_add(&v196->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
        v155 = (std::__shared_weak_count *)*((void *)&v192 + 1);
        if (*((void *)&v192 + 1)) {
          goto LABEL_308;
        }
      }
      else
      {
        v155 = (std::__shared_weak_count *)*((void *)&v192 + 1);
        if (*((void *)&v192 + 1))
        {
LABEL_308:
          if (!atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
      }
      v156 = v194;
      if (v194 && !atomic_fetch_add(&v194->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
        uint64_t v157 = *((void *)&v226 + 1);
        long long v191 = v226;
        if (*((void *)&v226 + 1)) {
LABEL_314:
        }
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v157 + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v157 = *((void *)&v226 + 1);
        long long v191 = v226;
        if (*((void *)&v226 + 1)) {
          goto LABEL_314;
        }
      }
      MIL::Builder::BlockBuilder::RemoveOperation();
      v158 = (std::__shared_weak_count *)*((void *)&v191 + 1);
      if (*((void *)&v191 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v191 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
        v159 = (void **)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2]) {
          goto LABEL_325;
        }
      }
      else
      {
        v159 = (void **)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          do
          {
            while (1)
            {
LABEL_325:
              v160 = (void **)*v159;
              v161 = (std::__shared_weak_count *)v159[6];
              if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
              if (*((char *)v159 + 39) < 0) {
                break;
              }
              operator delete(v159);
              v159 = v160;
              if (!v160) {
                goto LABEL_329;
              }
            }
            operator delete(v159[2]);
            operator delete(v159);
            v159 = v160;
          }
          while (v160);
        }
      }
LABEL_329:
      v162 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v162) {
        operator delete(v162);
      }
      if (v219)
      {
        v220 = (std::__shared_weak_count *)v219;
        operator delete(v219);
      }
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v146 = (void *)v230.__r_.__value_.__r.__words[0];
LABEL_285:
        operator delete(v146);
      }
LABEL_286:
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v204 - (char *)v203) >> 3) <= i) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      std::string::operator=(&v203[i], v101);
      v147 = (std::__shared_weak_count *)*((void *)&v226 + 1);
      if (*((void *)&v226 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v226 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
        int v106 = v232;
        if (!v232) {
          continue;
        }
      }
      else
      {
        int v106 = v232;
        if (!v232) {
          continue;
        }
      }
LABEL_290:
      if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
      continue;
    }
    MIL::Builder::BlockBuilder::TryGetOperation();
    if (__p.__r_.__value_.__r.__words[0])
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v204 - (char *)v203) >> 3) <= i) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      std::string::operator=(&v203[i], (const std::string *)(v98 + 24 * i));
    }
    int v106 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_) {
      goto LABEL_290;
    }
  }
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&__p, v239);
  std::string::size_type v163 = __p.__r_.__value_.__l.__size_;
  std::string::size_type v164 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      MIL::Builder::BlockBuilder::RemoveOutput();
      v164 += 24;
    }
    while (v164 != v163);
    std::string::size_type v164 = __p.__r_.__value_.__r.__words[0];
  }
  if (v164)
  {
    std::string::size_type v165 = __p.__r_.__value_.__l.__size_;
    v166 = (void *)v164;
    if (__p.__r_.__value_.__l.__size_ != v164)
    {
      do
      {
        if (*(char *)(v165 - 1) < 0) {
          operator delete(*(void **)(v165 - 24));
        }
        v165 -= 24;
      }
      while (v165 != v164);
      v166 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v164;
    operator delete(v166);
  }
  v167 = v203;
  for (k = v204; v167 != k; ++v167)
    MIL::Builder::BlockBuilder::AddOutput();
  MIL::Transform::ProgramTransformer::GetProgram(a2, (MIL::Transform::ProgramTransformer *)v244);
  v169 = v203;
  if (v203)
  {
    v170 = v204;
    v171 = v203;
    if (v204 != v203)
    {
      do
      {
        if (SHIBYTE(v170[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v170[-1].__r_.__value_.__l.__data_);
        }
        --v170;
      }
      while (v170 != v169);
      v171 = v203;
    }
    v204 = v169;
    operator delete(v171);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v233;
  std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v236) {
    operator delete(v236);
  }
  v172 = v240;
  if (v240 && !atomic_fetch_add(&v240->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
    std::__shared_weak_count::__release_weak(v172);
  }
  v173 = v241;
  if (v241 && !atomic_fetch_add(&v241->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
  }
  v174 = v243;
  if (v243 && !atomic_fetch_add(&v243->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v244);
  uint64_t result = v245;
  uint64_t v245 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19249FB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  std::vector<std::string>::~vector[abi:ne180100](&a35);
  a35 = (void *)(v35 - 208);
  std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  uint64_t v37 = *(void **)(v35 - 184);
  if (v37)
  {
    *(void *)(v35 - 176) = v37;
    operator delete(v37);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 144);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 128);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)(v35 - 112));
  uint64_t v38 = *(void *)(v35 - 104);
  *(void *)(v35 - 104) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::AddFp32CastOp(uint64_t a1, MIL::Builder::BlockBuilder **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  MIL::Builder::BlockBuilder::GetContext(&v34, *a2);
  char v33 = 4;
  strcpy((char *)&v31, "cast");
  int64_t v10 = (std::__shared_weak_count *)a7[1];
  uint64_t v29 = *a7;
  long long v30 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::AddOperation();
  if (!v30 || atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (v33 < 0) {
LABEL_6:
  }
    operator delete(v31);
LABEL_7:
  char v27 = 1;
  LOWORD(v26) = 120;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v25 = *(std::string *)a3;
  }
  MIL::Builder::OperationBuilder::AddInput();
  int v11 = v28;
  if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_40:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_40;
  }
LABEL_13:
  if ((v27 & 0x80000000) == 0) {
    goto LABEL_14;
  }
LABEL_41:
  operator delete(v26);
LABEL_14:
  MIL::IRTensorValueType::MakeScalar();
  char v23 = 4;
  strcpy((char *)__p, "fp32");
  MIL::IRTensorValueType::MakeStringValue();
  uint64_t v31 = v24;
  if (v24) {
    operator new();
  }
  int v32 = 0;
  uint64_t v24 = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  char v20 = 5;
  strcpy((char *)v19, "dtype");
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  MIL::Builder::OperationBuilder::AddInput();
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  MIL::IRTensorValueType::MakeWithShape();
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v15 = *(std::string *)a4;
  }
  MIL::Builder::OperationBuilder::AddOutput();
  uint64_t v12 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
LABEL_29:
  }
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_30:
  uint64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v35;
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1924A0514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v46);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v47 - 80);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ReplaceGatherNDWithGather(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  MEMORY[0x192FEFD50](v8, a1);
  char v6 = 16;
  strcpy(__p, "ios18::gather_nd");
  MIL::Matching::Op();
  v9[0] = &unk_1EE37D2F8;
  int64_t v10 = v9;
  MIL::Transform::ProgramTransformer::MatchAndReplace();
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v7);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_7:
    operator delete(*(void **)__p);
    goto LABEL_5;
  }
  if (v10) {
    (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 40))(v10, v3, v4);
  }
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v7);
  if (v6 < 0) {
    goto LABEL_7;
  }
LABEL_5:
  MIL::Transform::ProgramTransformer::GetProgram(a2, (MIL::Transform::ProgramTransformer *)v8);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v8);
}

void sub_1924A075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)va);
  _Unwind_Resume(a1);
}

void sub_1924A0770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, uint64_t a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a18);
  _Unwind_Resume(a1);
}

void *std::function<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void Espresso::AOT::MakeDefaultStrides(MIL::IRConstantProperty *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v9 = v7 - *a2;
  if (v7 == *a2)
  {
    uint64_t v11 = 0;
    int64_t v10 = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = v13 - *a3;
    if (v13 != *a3) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v36 = 0;
    uint64_t v16 = 0;
    if (v7 != v8) {
      goto LABEL_6;
    }
LABEL_12:
    if (v13 == v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v9 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int64_t v10 = (char *)operator new(v7 - v8);
  bzero(v10, v7 - v8);
  uint64_t v11 = &v10[v9];
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v14 = v13 - *a3;
  if (v13 == *a3) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v35 = v11;
  if (v14 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14 >> 3;
  uint64_t v16 = (char *)operator new(v14 >> 3);
  bzero(v16, v15);
  uint64_t v36 = &v16[v15];
  uint64_t v11 = v35;
  if (v7 == v8) {
    goto LABEL_12;
  }
LABEL_6:
  unint64_t v17 = 0;
  do
  {
    uint64_t v18 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v8 + 8 * v17));
    *(void *)&v10[8 * v17++] = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18);
    uint64_t v8 = *a2;
  }
  while (v17 < (a2[1] - *a2) >> 3);
  uint64_t v12 = *a3;
  if (a3[1] != *a3)
  {
LABEL_13:
    unint64_t v19 = 0;
    do
    {
      char v20 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v12 + 8 * v19));
      v16[v19++] = MIL::IRConstantProperty::GetUInt8ScalarValue(v20);
      uint64_t v12 = *a3;
    }
    while (v19 < (a3[1] - *a3) >> 3);
  }
LABEL_15:
  size_t v21 = v11 - v10;
  unint64_t v22 = (v11 - v10) >> 3;
  if (v22 != v36 - v16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Length of shape and interleaveFactors must be equal.");
    goto LABEL_26;
  }
  if (v10 == v11)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (v16) {
LABEL_36:
    }
      operator delete(v16);
  }
  else
  {
    if (v36 != v16)
    {
      if (v22 <= 1) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = (v11 - v10) >> 3;
      }
      unsigned int v24 = 1;
      std::string v25 = (unsigned __int8 *)v16;
      while (1)
      {
        unsigned int v27 = *v25++;
        unsigned int v26 = v27;
        if (v27 != 1)
        {
          BOOL v28 = v24 == 1;
          unsigned int v24 = v26;
          if (!v28) {
            break;
          }
        }
        if (!--v23) {
          goto LABEL_30;
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Found multiple interleave factors that are not 1.");
LABEL_26:
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
    unsigned int v24 = 1;
LABEL_30:
    if ((v21 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v30 = (char *)operator new(v11 - v10);
    bzero(v30, v11 - v10);
    uint64_t v31 = v24;
    size_t v32 = v21 >> 3;
    for (*(void *)&v30[v21 - 8] = v24; v32 != 1; --v32)
    {
      v31 += v31 * ((*(void *)&v10[8 * v32 - 8] - 1) / v16[v32 - 1]);
      *(void *)&v30[8 * v32 - 16] = v31;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    char v33 = (char *)operator new(v11 - v10);
    *a4 = v33;
    a4[2] = &v33[8 * v22];
    bzero(v33, v21);
    unint64_t v34 = 0;
    a4[1] = &v33[v21];
    do
    {
      *(void *)&v33[8 * v34] = MIL::IRConstantProperty::MakeInt64Scalar(a1, *(MIL::MILContext **)&v30[8 * v34]);
      ++v34;
    }
    while (v34 < v22);
    operator delete(v30);
    if (v16) {
      goto LABEL_36;
    }
  }
  if (v10)
  {
    operator delete(v10);
  }
}

void sub_1924A0C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  __cxa_free_exception(v23);
  if (v22) {
    operator delete(v22);
  }
  if (v21) {
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::AOT::ShapeHasUnknownDims(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  uint64_t v2 = *a1 + 8;
  do
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(v2 - 8) + 24))(*(void *)(v2 - 8));
    BOOL v5 = v3 == 0;
    BOOL result = v3 != 0;
    BOOL v5 = !v5 || v2 == v1;
    v2 += 8;
  }
  while (!v5);
  return result;
}

void Espresso::AOT::Make64ByteAlignmentsVec(uint64_t *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v7 = v5 - v6;
  if (v5 == v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *a3 = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    a3[2] = v9;
    memset_pattern16(v8, &xmmword_192DBFE40, v7 & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v9;
  }
  if ((unint64_t)(v9 - v8) > 0x10) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = ((v9 - v8) >> 3) - v10;
  if (v11 >= 2)
  {
    memset_pattern16(v8, &unk_192DBFE50, 8 * v11 - 8);
  }
}

void sub_1924A0E14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::ReorderOps(int a1, MIL::Builder::BlockBuilder *this, unint64_t **a3)
{
  Opsetuint64_t Name = MIL::Builder::BlockBuilder::GetOpsetName(this);
  if (*(char *)(OpsetName + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)OpsetName, *(void *)(OpsetName + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)OpsetName;
    v57.__r_.__value_.__r.__words[2] = *(void *)(OpsetName + 16);
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v6;
  }
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v55, this);
  uint64_t v8 = (uint64_t)v55;
  uint64_t v7 = v56;
  unint64_t v9 = v56 - (void)v55;
  unint64_t v10 = (v56 - (uint64_t)v55) >> 4;
  *(_OWORD *)int64_t v52 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v54 = 1065353216;
  unint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  if (*a3 != v12)
  {
    do
    {
      unint64_t __val = 0;
      unint64_t v13 = *v11;
      unint64_t __val = v13;
      if (v13 >= v10)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v48, __val);
        uint64_t v36 = std::string::insert(&v48, 0, "Index ");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        uint64_t v38 = std::string::append(&v49, " in newOpIdxToOld is out of boundary");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v50);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      if (v52[1])
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v52[1]);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v15 = v13;
          if ((void *)v13 >= v52[1]) {
            unint64_t v15 = v13 % (unint64_t)v52[1];
          }
        }
        else
        {
          unint64_t v15 = ((unint64_t)v52[1] - 1) & v13;
        }
        uint64_t v16 = (void *)*((void *)v52[0] + v15);
        if (v16)
        {
          unint64_t v17 = (void *)*v16;
          if (v17)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v19 = v17[1];
                if (v19 == v13)
                {
                  if (v17[2] == v13) {
                    goto LABEL_42;
                  }
                }
                else if ((v19 & ((uint64_t)v52[1] - 1)) != v15)
                {
                  goto LABEL_26;
                }
                unint64_t v17 = (void *)*v17;
                if (!v17) {
                  goto LABEL_26;
                }
              }
            }
            do
            {
              unint64_t v18 = v17[1];
              if (v18 == v13)
              {
                if (v17[2] == v13)
                {
LABEL_42:
                  size_t v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::to_string(&v49, __val);
                  char v33 = std::string::insert(&v49, 0, "newOpIdxToOld has duplicated old op index: ");
                  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
                  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
                  v33->__r_.__value_.__l.__size_ = 0;
                  v33->__r_.__value_.__r.__words[2] = 0;
                  v33->__r_.__value_.__r.__words[0] = 0;
                  std::logic_error::logic_error(v32, &v50);
                  v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
                  __cxa_throw(v32, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
                }
              }
              else
              {
                if ((void *)v18 >= v52[1]) {
                  v18 %= (unint64_t)v52[1];
                }
                if (v18 != v15) {
                  break;
                }
              }
              unint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_26:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v52, &__val, &__val);
      ++v11;
    }
    while (v11 != v12);
    char v20 = __p[0];
    if (__p[0])
    {
      do
      {
        size_t v21 = (void *)*v20;
        operator delete(v20);
        char v20 = v21;
      }
      while (v21);
    }
  }
  unint64_t v22 = v52[0];
  v52[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  v52[0] = 0;
  v52[1] = 0;
  __p[0] = 0;
  if (v7 == v8)
  {
    unsigned int v24 = 0;
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v23 = v9 >> 1;
    unsigned int v24 = (int64x2_t *)operator new(v9 >> 1);
    v52[0] = v24;
    __p[0] = (char *)v24 + 8 * v10;
    bzero(v24, v23);
    v52[1] = &v24->i8[v23];
    if (v10 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = v10;
    }
    if (v25 >= 4)
    {
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v27 = (int64x2_t)xmmword_192DBFE30;
      BOOL v28 = v24 + 1;
      int64x2_t v29 = vdupq_n_s64(2uLL);
      int64x2_t v30 = vdupq_n_s64(4uLL);
      unint64_t v31 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v28[-1] = v27;
        *BOOL v28 = vaddq_s64(v27, v29);
        int64x2_t v27 = vaddq_s64(v27, v30);
        v28 += 2;
        v31 -= 4;
      }
      while (v31);
      goto LABEL_45;
    }
    unint64_t v26 = 0;
    do
    {
      v24->i64[v26] = v26;
      ++v26;
LABEL_45:
      ;
    }
    while (v25 != v26);
  }
  MIL::Builder::BlockBuilder::RemoveOperations();
  uint64_t v40 = *a3;
  long long v41 = a3[1];
  if (*a3 != v41)
  {
    do
    {
      long long v42 = v55[*v40];
      uint64_t v47 = (std::__shared_weak_count *)*((void *)&v42 + 1);
      if (*((void *)&v42 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::AddOperation();
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      ++v40;
    }
    while (v40 != v41);
    unsigned int v24 = (int64x2_t *)v52[0];
  }
  if (v24)
  {
    v52[1] = v24;
    operator delete(v24);
  }
  uint64_t v43 = (uint64_t)v55;
  if (v55)
  {
    uint64_t v44 = v56;
    uint64_t v45 = v55;
    if ((_OWORD *)v56 != v55)
    {
      do
      {
        uint64_t v46 = *(std::__shared_weak_count **)(v44 - 8);
        if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        v44 -= 16;
      }
      while (v44 != v43);
      uint64_t v45 = v55;
    }
    uint64_t v56 = v43;
    operator delete(v45);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_1924A14E4()
{
  if (v0) {
    JUMPOUT(0x1924A1508);
  }
  JUMPOUT(0x1924A12E4);
}

void Espresso::AOT::MoveFp32IOCasts(uint64_t a1, MIL::Builder::FunctionBuilder *this)
{
  MIL::Builder::FunctionBuilder::SelectedSpecialization(this);
  MIL::Builder::FunctionBuilder::GetBlock();
  unint64_t NumOperations = MIL::Builder::BlockBuilder::GetNumOperations(v143);
  if (!NumOperations) {
    goto LABEL_239;
  }
  uint64_t v5 = 0;
  long long v140 = 0u;
  long long v141 = 0u;
  int v142 = 1065353216;
  do
  {
    MIL::Builder::BlockBuilder::GetOperation(v143);
    *(void *)&long long v134 = &v137;
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)&v140, (uint64_t *)&v137, (uint64_t)&std::piecewise_construct, (void **)&v134)[4] = v5;
    long long v6 = v138;
    if (v138 && !atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    ++v5;
  }
  while (NumOperations != v5);
  MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)&v137, this);
  long long v134 = 0u;
  long long v135 = 0u;
  int v136 = 1065353216;
  for (unint64_t i = v139; i; unint64_t i = (void *)*i)
  {
    uint64_t Name = MIL::Builder::Variable::GetName((MIL::Builder::Variable *)i[2]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v134, Name, Name);
  }
  MIL::Builder::BlockBuilder::GetOutputs((uint64_t *)&v132, v143);
  unint64_t v10 = (uint64_t *)v132;
  unint64_t v9 = v133;
  long long v129 = 0u;
  long long v130 = 0u;
  int v131 = 1065353216;
  if (v132 != v133)
  {
    do
    {
      std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>((uint64_t)&v129, v10, v10);
      ++v10;
    }
    while (v10 != v9);
  }
  v126 = 0;
  uint64_t v127 = 0;
  int v128 = 0;
  if (NumOperations >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v112 = a1;
  v126 = operator new(8 * NumOperations);
  int v128 = (char *)v126 + 8 * NumOperations;
  bzero(v126, 8 * NumOperations);
  std::string::size_type v11 = 0;
  uint64_t v127 = v128;
  long long v123 = 0u;
  long long v124 = 0u;
  int v125 = 1065353216;
  if (NumOperations <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = NumOperations;
  }
  *(_OWORD *)uint64_t v120 = 0uLL;
  *(_OWORD *)uint64_t v121 = 0uLL;
  int v122 = 1065353216;
  do
  {
    MIL::Builder::BlockBuilder::GetOperation(v143);
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v118);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
    Espresso::AOT::GetOperatorType(v14, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 4)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        size_t v23 = v119;
        if (!v119) {
          goto LABEL_16;
        }
        goto LABEL_120;
      }
      int v16 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v16 == 1953718627)
      {
LABEL_23:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 1;
        LOWORD(__p.__r_.__value_.__l.__data_) = 120;
        ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v18 = MIL::Builder::Variable::GetName(ArgumentForParameter);
        unint64_t Output = MIL::Builder::OperationBuilder::GetOutput(v118);
        MIL::Builder::Variable::GetName((MIL::Builder::Variable *)Output);
        MIL::Builder::BlockBuilder::TryGetOperation();
        uint64_t OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
        uint64_t Type = MIL::Builder::Variable::TryGetType(ArgumentForParameter);
        if (Type
          && (uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 24))(Type)) != 0
          && (*(unsigned int (**)(uint64_t))(*(void *)v22 + 88))(v22) == 5)
        {
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v134, v18))
          {
            __p.__r_.__value_.__r.__words[0] = v11;
            *((void *)v126 + *((void *)&v124 + 1)) = v11;
            LODWORD(v15) = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v123, (unint64_t *)&__p, &__p);
            goto LABEL_117;
          }
          LODWORD(v15) = v115;
          if (!v115) {
            goto LABEL_117;
          }
          uint64_t v29 = MIL::Builder::OperationBuilder::GetOperator(v115);
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 16))(v29);
          Espresso::AOT::GetOperatorType(v30, &__p);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 23) {
              goto LABEL_117;
            }
            BOOL v31 = __p.__r_.__value_.__r.__words[0] == 0x625F726F736E6574
               && __p.__r_.__value_.__l.__size_ == 0x6F745F7265666675;
            if (!v31
              || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) != 0x726F736E65745F6FLL)
            {
              goto LABEL_117;
            }
LABEL_106:
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&__p, "input");
            std::string v57 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v58 = MIL::Builder::Variable::GetName(v57);
            unint64_t v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v134, v58);
            if (v15)
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
              uint64_t v59 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)&v140, (uint64_t *)&v115, (uint64_t)&std::piecewise_construct, &__p);
              uint64_t v60 = v126;
              __p.__r_.__value_.__r.__words[0] = v59[4];
              *((void *)v126 + *((void *)&v124 + 1)) = __p.__r_.__value_.__r.__words[0];
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v123, (unint64_t *)&__p, &__p);
              __p.__r_.__value_.__r.__words[0] = v11;
              v60[*((void *)&v124 + 1)] = v11;
              LODWORD(v15) = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v123, (unint64_t *)&__p, &__p);
            }
            goto LABEL_117;
          }
          if (__p.__r_.__value_.__l.__size_ != 23)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_117;
          }
          BOOL v56 = *(void *)__p.__r_.__value_.__l.__data_ != 0x625F726F736E6574
             || *(void *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x6F745F7265666675
             || *(void *)(__p.__r_.__value_.__r.__words[0] + 15) != 0x726F736E65745F6FLL;
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v56) {
            goto LABEL_106;
          }
        }
        else
        {
          unint64_t v15 = (void *)MIL::Builder::Variable::TryGetType((MIL::Builder::Variable *)Output);
          if (!v15) {
            goto LABEL_117;
          }
          unint64_t v15 = (void *)(*(uint64_t (**)(void *))(*v15 + 24))(v15);
          if (!v15) {
            goto LABEL_117;
          }
          LODWORD(v15) = (*(uint64_t (**)(void *))(*v15 + 88))(v15);
          if (v15 != 5) {
            goto LABEL_117;
          }
          if (*((void *)&v129 + 1))
          {
            unint64_t v24 = 0x9DDFEA08EB382D69 * (((8 * Output) + 8) ^ HIDWORD(Output));
            unint64_t v25 = 0x9DDFEA08EB382D69 * (HIDWORD(Output) ^ (v24 >> 47) ^ v24);
            unint64_t v26 = 0x9DDFEA08EB382D69 * (v25 ^ (v25 >> 47));
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v129 + 8));
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              unint64_t v28 = v26;
              if (v26 >= *((void *)&v129 + 1)) {
                unint64_t v28 = v26 % *((void *)&v129 + 1);
              }
            }
            else
            {
              unint64_t v28 = (*((void *)&v129 + 1) - 1) & v26;
            }
            char v33 = *(void **)(v129 + 8 * v28);
            if (v33)
            {
              long long v34 = (void *)*v33;
              if (v34)
              {
                if (v27.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v36 = v34[1];
                    if (v26 == v36)
                    {
                      if (v34[2] == Output) {
                        goto LABEL_114;
                      }
                    }
                    else if ((v36 & (*((void *)&v129 + 1) - 1)) != v28)
                    {
                      goto LABEL_67;
                    }
                    long long v34 = (void *)*v34;
                    if (!v34) {
                      goto LABEL_67;
                    }
                  }
                }
                do
                {
                  unint64_t v35 = v34[1];
                  if (v26 == v35)
                  {
                    if (v34[2] == Output)
                    {
LABEL_114:
                      if (!*(void *)(OperationsByInput + 24))
                      {
                        __p.__r_.__value_.__r.__words[0] = v11;
                        *((void *)v126 + NumOperations + ~(uint64_t)v121[1]) = v11;
                        LODWORD(v15) = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v120, (unint64_t *)&__p, &__p);
                      }
                      goto LABEL_117;
                    }
                  }
                  else
                  {
                    if (v35 >= *((void *)&v129 + 1)) {
                      v35 %= *((void *)&v129 + 1);
                    }
                    if (v35 != v28) {
                      break;
                    }
                  }
                  long long v34 = (void *)*v34;
                }
                while (v34);
              }
            }
          }
LABEL_67:
          if (*(void *)(OperationsByInput + 24) == 1)
          {
            uint64_t v37 = *(void *)(OperationsByInput + 16);
            uint64_t v38 = *(MIL::Builder::OperationBuilder **)(v37 + 16);
            long long v39 = *(std::__shared_weak_count **)(v37 + 24);
            uint64_t v113 = v38;
            uint64_t v114 = v39;
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v40 = MIL::Builder::OperationBuilder::GetOperator(v38);
            uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 16))(v40);
            Espresso::AOT::GetOperatorType(v41, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__p.__r_.__value_.__l.__size_ != 23)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_111;
              }
              BOOL v47 = *(void *)__p.__r_.__value_.__l.__data_ != 0x745F726F736E6574
                 || *(void *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x726F736E65745F6FLL
                 || *(void *)(__p.__r_.__value_.__r.__words[0] + 15) != 0x7265666675625F72;
              operator delete(__p.__r_.__value_.__l.__data_);
              if (v47) {
                goto LABEL_111;
              }
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 23) {
                goto LABEL_111;
              }
              BOOL v43 = __p.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
                 && __p.__r_.__value_.__l.__size_ == 0x726F736E65745F6FLL;
              if (!v43
                || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) != 0x7265666675625F72)
              {
                goto LABEL_111;
              }
            }
            unint64_t v48 = MIL::Builder::OperationBuilder::GetOutput(v113);
            unint64_t v15 = (void *)MIL::Builder::Variable::GetName((MIL::Builder::Variable *)v48);
            long long v42 = v15;
            if (*((void *)&v129 + 1))
            {
              unint64_t v49 = 0x9DDFEA08EB382D69 * (((8 * v48) + 8) ^ HIDWORD(v48));
              unint64_t v50 = 0x9DDFEA08EB382D69 * (HIDWORD(v48) ^ (v49 >> 47) ^ v49);
              unint64_t v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
              uint8x8_t v52 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v129 + 8));
              v52.i16[0] = vaddlv_u8(v52);
              if (v52.u32[0] > 1uLL)
              {
                unint64_t v53 = v51;
                if (v51 >= *((void *)&v129 + 1)) {
                  unint64_t v53 = v51 % *((void *)&v129 + 1);
                }
              }
              else
              {
                unint64_t v53 = (*((void *)&v129 + 1) - 1) & v51;
              }
              unint64_t v63 = *(void **)(v129 + 8 * v53);
              if (v63)
              {
                long long v64 = (void *)*v63;
                if (v64)
                {
                  if (v52.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v66 = v64[1];
                      if (v51 == v66)
                      {
                        if (v64[2] == v48) {
                          goto LABEL_142;
                        }
                      }
                      else if ((v66 & (*((void *)&v129 + 1) - 1)) != v53)
                      {
                        goto LABEL_111;
                      }
                      long long v64 = (void *)*v64;
                      if (!v64) {
                        goto LABEL_111;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v65 = v64[1];
                    if (v51 == v65)
                    {
                      if (v64[2] == v48)
                      {
LABEL_142:
                        unint64_t v15 = (void *)MIL::Builder::BlockBuilder::GetOperationsByInput();
                        if (!v15[3])
                        {
                          __p.__r_.__value_.__r.__words[0] = v11;
                          uint64_t v67 = v126;
                          *((void *)v126 + NumOperations + ~(uint64_t)v121[1]) = v11;
                          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v120, (unint64_t *)&__p, &__p);
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
                          __p.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)&v140, (uint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__p)[4];
                          v67[NumOperations + ~(uint64_t)v121[1]] = __p.__r_.__value_.__r.__words[0];
                          LODWORD(v15) = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v120, (unint64_t *)&__p, &__p);
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v65 >= *((void *)&v129 + 1)) {
                        v65 %= *((void *)&v129 + 1);
                      }
                      if (v65 != v53) {
                        break;
                      }
                    }
                    long long v64 = (void *)*v64;
                  }
                  while (v64);
                }
              }
            }
LABEL_111:
            uint64_t v61 = v114;
            if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, void *))v61->__on_zero_shared)(v61, v42);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
        }
LABEL_117:
        int v62 = v116;
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
          size_t v23 = v119;
          if (!v119) {
            goto LABEL_16;
          }
          goto LABEL_120;
        }
      }
    }
    else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 4 && LODWORD(__p.__r_.__value_.__l.__data_) == 1953718627)
    {
      goto LABEL_23;
    }
    size_t v23 = v119;
    if (!v119) {
      goto LABEL_16;
    }
LABEL_120:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
LABEL_16:
    ++v11;
  }
  while (v11 != v12);
  uint64_t v68 = *((void *)&v124 + 1);
  if (*((void *)&v124 + 1) | (uint64_t)v121[1])
  {
    BOOL v69 = (void *)v124;
    if ((void)v124)
    {
      while (v69[2] < *((void *)&v124 + 1))
      {
        BOOL v69 = (void *)*v69;
        if (!v69) {
          goto LABEL_148;
        }
      }
LABEL_152:
      if ((uint64_t)v121[1] >= 2)
      {
        uint64_t v71 = v127 - 8;
        unint64_t v72 = (unint64_t)&v127[-8 * (uint64_t)v121[1] + 8];
        do
        {
          uint64_t v73 = *(void *)(v72 - 8);
          *(void *)(v72 - 8) = *(void *)v71;
          *(void *)uint64_t v71 = v73;
          v71 -= 8;
          BOOL v74 = v72 >= (unint64_t)v71;
          v72 += 8;
        }
        while (!v74);
      }
      unint64_t v75 = 0;
      uint64_t v76 = v120[0];
      uint64_t v77 = v123;
      uint64_t v78 = v126;
      do
      {
        if (v120[1])
        {
          uint8x8_t v79 = (uint8x8_t)vcnt_s8((int8x8_t)v120[1]);
          v79.i16[0] = vaddlv_u8(v79);
          if (v79.u32[0] > 1uLL)
          {
            unint64_t v80 = v75;
            if ((void *)v75 >= v120[1]) {
              unint64_t v80 = v75 % (unint64_t)v120[1];
            }
          }
          else
          {
            unint64_t v80 = ((unint64_t)v120[1] - 1) & v75;
          }
          uint64_t v81 = (void *)v76[v80];
          if (v81)
          {
            int v82 = (void *)*v81;
            if (v82)
            {
              if (v79.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v84 = v82[1];
                  if (v84 == v75)
                  {
                    if (v82[2] == v75) {
                      goto LABEL_158;
                    }
                  }
                  else if ((v84 & ((unint64_t)v120[1] - 1)) != v80)
                  {
                    goto LABEL_179;
                  }
                  int v82 = (void *)*v82;
                  if (!v82) {
                    goto LABEL_179;
                  }
                }
              }
              do
              {
                unint64_t v83 = v82[1];
                if (v83 == v75)
                {
                  if (v82[2] == v75) {
                    goto LABEL_158;
                  }
                }
                else
                {
                  if ((void *)v83 >= v120[1]) {
                    v83 %= (unint64_t)v120[1];
                  }
                  if (v83 != v80) {
                    break;
                  }
                }
                int v82 = (void *)*v82;
              }
              while (v82);
            }
          }
        }
LABEL_179:
        if (*((void *)&v123 + 1))
        {
          uint8x8_t v85 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v123 + 8));
          v85.i16[0] = vaddlv_u8(v85);
          if (v85.u32[0] > 1uLL)
          {
            unint64_t v86 = v75;
            if (v75 >= *((void *)&v123 + 1)) {
              unint64_t v86 = v75 % *((void *)&v123 + 1);
            }
          }
          else
          {
            unint64_t v86 = (*((void *)&v123 + 1) - 1) & v75;
          }
          std::string v87 = *(void **)(v77 + 8 * v86);
          if (v87)
          {
            std::string::size_type v88 = (void *)*v87;
            if (v88)
            {
              if (v85.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v90 = v88[1];
                  if (v90 == v75)
                  {
                    if (v88[2] == v75) {
                      goto LABEL_158;
                    }
                  }
                  else if ((v90 & (*((void *)&v123 + 1) - 1)) != v86)
                  {
                    goto LABEL_157;
                  }
                  std::string::size_type v88 = (void *)*v88;
                  if (!v88) {
                    goto LABEL_157;
                  }
                }
              }
              do
              {
                unint64_t v89 = v88[1];
                if (v89 == v75)
                {
                  if (v88[2] == v75) {
                    goto LABEL_158;
                  }
                }
                else
                {
                  if (v89 >= *((void *)&v123 + 1)) {
                    v89 %= *((void *)&v123 + 1);
                  }
                  if (v89 != v86) {
                    break;
                  }
                }
                std::string::size_type v88 = (void *)*v88;
              }
              while (v88);
            }
          }
        }
LABEL_157:
        v78[v68++] = v75;
LABEL_158:
        ++v75;
      }
      while (v75 != v12);
      uint64_t v91 = *(std::__shared_weak_count **)(v112 + 8);
      if (v91) {
        atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::AOT::ReorderOps((int)v15, v143, (unint64_t **)&v126);
      if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    else
    {
LABEL_148:
      long long v70 = v121[0];
      if (v121[0])
      {
        while (v70[2] >= NumOperations - (unint64_t)v121[1])
        {
          long long v70 = (void *)*v70;
          if (!v70) {
            goto LABEL_205;
          }
        }
        goto LABEL_152;
      }
    }
  }
LABEL_205:
  uint64_t v92 = v121[0];
  if (v121[0])
  {
    do
    {
      std::string v93 = (void *)*v92;
      operator delete(v92);
      uint64_t v92 = v93;
    }
    while (v93);
  }
  uint64_t v94 = v120[0];
  v120[0] = 0;
  if (v94) {
    operator delete(v94);
  }
  long long v95 = (void *)v124;
  if ((void)v124)
  {
    do
    {
      std::string v96 = (void *)*v95;
      operator delete(v95);
      long long v95 = v96;
    }
    while (v96);
  }
  std::string v97 = (void *)v123;
  *(void *)&long long v123 = 0;
  if (v97) {
    operator delete(v97);
  }
  if (v126) {
    operator delete(v126);
  }
  uint64_t v98 = (void *)v130;
  if ((void)v130)
  {
    do
    {
      char v99 = (void *)*v98;
      operator delete(v98);
      uint64_t v98 = v99;
    }
    while (v99);
  }
  uint64_t v100 = (void *)v129;
  *(void *)&long long v129 = 0;
  if (v100) {
    operator delete(v100);
  }
  if (v132)
  {
    uint64_t v133 = (uint64_t *)v132;
    operator delete(v132);
  }
  uint64_t v101 = (void **)v135;
  if ((void)v135)
  {
    do
    {
      char v107 = (void **)*v101;
      if (*((char *)v101 + 39) < 0) {
        operator delete(v101[2]);
      }
      operator delete(v101);
      uint64_t v101 = v107;
    }
    while (v107);
  }
  uint64_t v102 = (void *)v134;
  *(void *)&long long v134 = 0;
  if (v102) {
    operator delete(v102);
  }
  uint64_t v103 = v139;
  if (v139)
  {
    do
    {
      BOOL v104 = (void *)*v103;
      operator delete(v103);
      uint64_t v103 = v104;
    }
    while (v104);
  }
  std::string v105 = v137;
  std::string::size_type v137 = 0;
  if (v105) {
    operator delete(v105);
  }
  int v106 = (void *)v141;
  while (v106)
  {
    uint64_t v108 = v106;
    int v106 = (void *)*v106;
    BOOL v109 = (std::__shared_weak_count *)v108[3];
    if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
    operator delete(v108);
  }
  std::string v110 = (void *)v140;
  *(void *)&long long v140 = 0;
  if (v110) {
    operator delete(v110);
  }
LABEL_239:
  uint64_t v111 = v144;
  if (v144)
  {
    if (!atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
}

void sub_1924A2440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a24);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a30);
  if (__p) {
    operator delete(__p);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a38);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v44 - 240);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v44 - 200);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v44 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 120);
  _Unwind_Resume(a1);
}

void Espresso::AOT::CoalesceOpsWithConsumers(int a1, MIL::Builder::FunctionBuilder *this, uint64_t a3)
{
  MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)&v204, this);
  long long v201 = 0u;
  long long v202 = 0u;
  int v203 = 1065353216;
  for (unint64_t i = v205; i; unint64_t i = (void *)*i)
  {
    uint64_t Name = MIL::Builder::Variable::GetName((MIL::Builder::Variable *)i[2]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v201, Name, Name);
  }
  MIL::Builder::FunctionBuilder::SelectedSpecialization(this);
  MIL::Builder::FunctionBuilder::GetBlock();
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v197, v199);
  uint64_t NumOperations = MIL::Builder::BlockBuilder::GetNumOperations(v199);
  if (!NumOperations) {
    goto LABEL_301;
  }
  uint64_t v8 = 0;
  *(_OWORD *)v194 = 0u;
  *(_OWORD *)v195 = 0u;
  int v196 = 1065353216;
  do
  {
    MIL::Builder::BlockBuilder::GetOperation(v199);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)v194, (uint64_t *)&v189, (uint64_t)&std::piecewise_construct, &__p)[4] = v8;
    unint64_t v9 = (std::__shared_weak_count *)v190;
    if (v190 && !atomic_fetch_add(v190 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    ++v8;
  }
  while (NumOperations != v8);
  uint64_t v167 = a3;
  if (!a3) {
    goto LABEL_260;
  }
  uint64_t v10 = 0;
  uint64_t v174 = NumOperations;
  while (2)
  {
    uint64_t v168 = v10;
    uint64_t v11 = 0;
    while (2)
    {
      MIL::Builder::BlockBuilder::GetOperation(v199);
      uint64_t v169 = v11;
      MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)&v189, v192);
      uint64_t v12 = (MIL::Builder::Variable *)v191;
      if (!v191) {
        goto LABEL_254;
      }
      while (2)
      {
        uint64_t v13 = MIL::Builder::Variable::TryGetName(*((MIL::Builder::Variable **)v12 + 2));
        if (!v13
          || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v201, v13))
        {
          goto LABEL_16;
        }
        MIL::Builder::BlockBuilder::GetOperation();
        if (!v194[1]) {
          goto LABEL_324;
        }
        unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * v187) + 8) ^ ((unint64_t)v187 >> 32));
        unint64_t v15 = 0x9DDFEA08EB382D69 * (((unint64_t)v187 >> 32) ^ (v14 >> 47) ^ v14);
        unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v194[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t v18 = v16;
          if ((void *)v16 >= v194[1]) {
            unint64_t v18 = v16 % (unint64_t)v194[1];
          }
        }
        else
        {
          unint64_t v18 = v16 & ((unint64_t)v194[1] - 1);
        }
        uint64_t v19 = (uint64_t ***)*((void *)v194[0] + v18);
        if (!v19 || (char v20 = *v19) == 0) {
LABEL_324:
        }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v172 = v12;
        if (v17.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v20[1];
            if (v22 == (uint64_t *)v16)
            {
              if (v20[2] == (uint64_t *)v187) {
                goto LABEL_39;
              }
            }
            else if (((unint64_t)v22 & ((unint64_t)v194[1] - 1)) != v18)
            {
              goto LABEL_324;
            }
            char v20 = (uint64_t **)*v20;
            if (!v20) {
              goto LABEL_324;
            }
          }
        }
        while (1)
        {
          unint64_t v21 = (unint64_t)v20[1];
          if (v21 == v16) {
            break;
          }
          if ((void *)v21 >= v194[1]) {
            v21 %= (unint64_t)v194[1];
          }
          if (v21 != v18) {
            goto LABEL_324;
          }
LABEL_29:
          char v20 = (uint64_t **)*v20;
          if (!v20) {
            goto LABEL_324;
          }
        }
        if (v20[2] != (uint64_t *)v187) {
          goto LABEL_29;
        }
LABEL_39:
        size_t v23 = v20[4];
        uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v187);
        uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
        Espresso::AOT::GetOperatorType(v25, &__p);
        v173 = v23;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__p.__r_.__value_.__l.__size_ != 10)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_108;
          }
          BOOL v28 = *(void *)__p.__r_.__value_.__l.__data_ != 0x6174735F64616572
             || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 25972;
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v28) {
            goto LABEL_55;
          }
LABEL_108:
          int v170 = 0;
          unint64_t v171 = NumOperations;
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 10) {
            goto LABEL_108;
          }
          if (__p.__r_.__value_.__r.__words[0] != 0x6174735F64616572
            || LOWORD(__p.__r_.__value_.__r.__words[1]) != 25972)
          {
            goto LABEL_108;
          }
LABEL_55:
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&__p, "input");
          ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          MIL::Builder::Variable::GetName(ArgumentForParameter);
          MIL::Builder::BlockBuilder::GetStateOperationsByInput();
          v175[0] = 0;
          v175[1] = 0;
          *(void *)&long long v176 = 0;
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          BOOL v31 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
          {
LABEL_60:
            unint64_t v32 = *v31;
            char v33 = (std::__shared_weak_count *)v31[1];
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (!v194[1]) {
              goto LABEL_323;
            }
            unint64_t v34 = 0x9DDFEA08EB382D69 * (((8 * v32) + 8) ^ HIDWORD(v32));
            unint64_t v35 = 0x9DDFEA08EB382D69 * (HIDWORD(v32) ^ (v34 >> 47) ^ v34);
            unint64_t v36 = 0x9DDFEA08EB382D69 * (v35 ^ (v35 >> 47));
            uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v194[1]);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              unint64_t v38 = v36;
              if ((void *)v36 >= v194[1]) {
                unint64_t v38 = v36 % (unint64_t)v194[1];
              }
            }
            else
            {
              unint64_t v38 = ((unint64_t)v194[1] - 1) & v36;
            }
            long long v39 = (void *)*((void *)v194[0] + v38);
            if (!v39 || (uint64_t v40 = (void *)*v39) == 0) {
LABEL_323:
            }
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            if (v37.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v42 = v40[1];
                if (v42 == v36)
                {
                  if (v40[2] == v32) {
                    goto LABEL_82;
                  }
                }
                else if ((v42 & ((uint64_t)v194[1] - 1)) != v38)
                {
                  goto LABEL_323;
                }
                uint64_t v40 = (void *)*v40;
                if (!v40) {
                  goto LABEL_323;
                }
              }
            }
            while (1)
            {
              unint64_t v41 = v40[1];
              if (v41 == v36)
              {
                if (v40[2] == v32)
                {
LABEL_82:
                  BOOL v43 = (char *)v175[1];
                  if (v175[1] < (void *)v176)
                  {
                    *(void *)v175[1] = v40[4];
                    uint64_t v44 = v43 + 8;
                    goto LABEL_104;
                  }
                  uint64_t v45 = (char *)v175[0];
                  int64_t v46 = (char *)v175[1] - (char *)v175[0];
                  int64_t v47 = ((char *)v175[1] - (char *)v175[0]) >> 3;
                  unint64_t v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v49 = v176 - (unint64_t)v175[0];
                  if ((uint64_t)(v176 - (unint64_t)v175[0]) >> 2 > v48) {
                    unint64_t v48 = v49 >> 2;
                  }
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v50 = v48;
                  }
                  if (!v50)
                  {
                    unint64_t v51 = 0;
                    uint8x8_t v52 = (void *)(8 * v47);
                    *(void *)(8 * v47) = v40[4];
                    uint64_t v44 = (void *)(8 * v47 + 8);
                    if (v43 != v45) {
                      goto LABEL_93;
                    }
LABEL_96:
                    uint64_t NumOperations = v174;
                    goto LABEL_102;
                  }
                  if (v50 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v51 = operator new(8 * v50);
                  uint8x8_t v52 = &v51[8 * v47];
                  void *v52 = v40[4];
                  uint64_t v44 = v52 + 1;
                  if (v43 == v45) {
                    goto LABEL_96;
                  }
LABEL_93:
                  unint64_t v53 = v43 - 8 - v45;
                  if (v53 < 0x58)
                  {
                    uint64_t NumOperations = v174;
                    goto LABEL_101;
                  }
                  uint64_t NumOperations = v174;
                  if ((unint64_t)(v43 - &v51[v46]) < 0x20) {
                    goto LABEL_332;
                  }
                  uint64_t v54 = (v53 >> 3) + 1;
                  uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
                  BOOL v56 = &v43[-v55];
                  uint8x8_t v52 = (void *)((char *)v52 - v55);
                  std::string v57 = &v51[v46 - 16];
                  uint64_t v58 = v43 - 16;
                  uint64_t v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v60 = *(_OWORD *)v58;
                    *(v57 - 1) = *((_OWORD *)v58 - 1);
                    _OWORD *v57 = v60;
                    v57 -= 2;
                    v58 -= 32;
                    v59 -= 4;
                  }
                  while (v59);
                  BOOL v43 = v56;
                  if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_332:
                    do
                    {
LABEL_101:
                      uint64_t v61 = *((void *)v43 - 1);
                      v43 -= 8;
                      *--uint8x8_t v52 = v61;
                    }
                    while (v43 != v45);
                  }
LABEL_102:
                  v175[0] = v52;
                  v175[1] = v44;
                  *(void *)&long long v176 = &v51[8 * v50];
                  if (v45) {
                    operator delete(v45);
                  }
LABEL_104:
                  v175[1] = v44;
                  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                  v31 += 2;
                  if (v31 == (unint64_t *)size) {
                    break;
                  }
                  goto LABEL_60;
                }
              }
              else
              {
                if ((void *)v41 >= v194[1]) {
                  v41 %= (unint64_t)v194[1];
                }
                if (v41 != v38) {
                  goto LABEL_323;
                }
              }
              uint64_t v40 = (void *)*v40;
              if (!v40) {
                goto LABEL_323;
              }
            }
          }
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
          long long v129 = (char *)v175[0];
          if (v175[0] != v175[1])
          {
            while (*(uint64_t **)v129 != v173)
            {
              v129 += 8;
              if (v129 == v175[1])
              {
                long long v129 = (char *)v175[1];
                break;
              }
            }
          }
          uint64_t v130 = v129 - (char *)v175[0];
          if ((((char *)v175[1] - (char *)v175[0]) >> 3) - 1 > (unint64_t)(v130 >> 3))
          {
            unint64_t v171 = *(void *)((char *)v175[0] + v130 + 8);
            goto LABEL_241;
          }
          unint64_t v171 = NumOperations;
          if (v175[0])
          {
LABEL_241:
            v175[1] = v175[0];
            operator delete(v175[0]);
          }
          std::string::size_type v131 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0])
          {
            std::string::size_type v132 = __p.__r_.__value_.__l.__size_;
            uint64_t v133 = (void *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              do
              {
                long long v134 = *(std::__shared_weak_count **)(v132 - 8);
                if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                  std::__shared_weak_count::__release_weak(v134);
                }
                v132 -= 16;
              }
              while (v132 != v131);
              uint64_t v133 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            __p.__r_.__value_.__l.__size_ = v131;
            operator delete(v133);
          }
          int v170 = 1;
        }
        MIL::Builder::OperationBuilder::GetChildOperations((uint64_t *)&__p, v187);
        uint64_t v183 = 0;
        int64_t v184 = 0;
        uint64_t v185 = 0;
        int v62 = (void *)__p.__r_.__value_.__r.__words[2];
        while (2)
        {
          unint64_t v63 = v62[2];
          long long v64 = (std::__shared_weak_count *)v62[3];
          if (v64) {
            atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v194[1]) {
            goto LABEL_259;
          }
          unint64_t v65 = 0x9DDFEA08EB382D69 * (((8 * v63) + 8) ^ HIDWORD(v63));
          unint64_t v66 = 0x9DDFEA08EB382D69 * (HIDWORD(v63) ^ (v65 >> 47) ^ v65);
          unint64_t v67 = 0x9DDFEA08EB382D69 * (v66 ^ (v66 >> 47));
          uint8x8_t v68 = (uint8x8_t)vcnt_s8((int8x8_t)v194[1]);
          v68.i16[0] = vaddlv_u8(v68);
          if (v68.u32[0] > 1uLL)
          {
            unint64_t v69 = v67;
            if ((void *)v67 >= v194[1]) {
              unint64_t v69 = v67 % (unint64_t)v194[1];
            }
          }
          else
          {
            unint64_t v69 = ((unint64_t)v194[1] - 1) & v67;
          }
          long long v70 = (void *)*((void *)v194[0] + v69);
          if (!v70 || (uint64_t v71 = (void *)*v70) == 0) {
LABEL_259:
          }
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (v68.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v73 = v71[1];
              if (v73 == v67)
              {
                if (v71[2] == v63) {
                  goto LABEL_133;
                }
              }
              else if ((v73 & ((uint64_t)v194[1] - 1)) != v69)
              {
                goto LABEL_259;
              }
              uint64_t v71 = (void *)*v71;
              if (!v71) {
                goto LABEL_259;
              }
            }
          }
          while (2)
          {
            unint64_t v72 = v71[1];
            if (v72 != v67)
            {
              if ((void *)v72 >= v194[1]) {
                v72 %= (unint64_t)v194[1];
              }
              if (v72 != v69) {
                goto LABEL_259;
              }
              goto LABEL_123;
            }
            if (v71[2] != v63)
            {
LABEL_123:
              uint64_t v71 = (void *)*v71;
              if (!v71) {
                goto LABEL_259;
              }
              continue;
            }
            break;
          }
LABEL_133:
          BOOL v74 = v184;
          if (v184 < v185)
          {
            *(void *)int64_t v184 = v71[4];
            uint64_t v75 = (uint64_t)(v74 + 8);
            goto LABEL_155;
          }
          uint64_t v76 = (char *)v183;
          int64_t v77 = v184 - (unsigned char *)v183;
          uint64_t v78 = (v184 - (unsigned char *)v183) >> 3;
          unint64_t v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v80 = v185 - (unsigned char *)v183;
          if ((v185 - (unsigned char *)v183) >> 2 > v79) {
            unint64_t v79 = v80 >> 2;
          }
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v79;
          }
          if (v81)
          {
            if (v81 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v82 = (char *)operator new(8 * v81);
            unint64_t v83 = &v82[8 * v78];
            *(void *)unint64_t v83 = v71[4];
            uint64_t v75 = (uint64_t)(v83 + 8);
            if (v74 != v76)
            {
LABEL_144:
              unint64_t v84 = v74 - 8 - v76;
              if (v84 < 0x58) {
                goto LABEL_333;
              }
              if ((unint64_t)(v74 - &v82[v77]) < 0x20) {
                goto LABEL_333;
              }
              uint64_t v85 = (v84 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              std::string v87 = &v74[-v86];
              v83 -= v86;
              std::string::size_type v88 = &v82[v77 - 16];
              unint64_t v89 = v74 - 16;
              uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v91 = *(_OWORD *)v89;
                *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
                *(_OWORD *)std::string::size_type v88 = v91;
                v88 -= 32;
                v89 -= 32;
                v90 -= 4;
              }
              while (v90);
              BOOL v74 = v87;
              if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_333:
                do
                {
                  uint64_t v92 = *((void *)v74 - 1);
                  v74 -= 8;
                  *((void *)v83 - 1) = v92;
                  v83 -= 8;
                }
                while (v74 != v76);
              }
            }
          }
          else
          {
            int v82 = 0;
            unint64_t v83 = (char *)(8 * v78);
            *(void *)(8 * v78) = v71[4];
            uint64_t v75 = 8 * v78 + 8;
            if (v74 != v76) {
              goto LABEL_144;
            }
          }
          uint64_t v183 = v83;
          int64_t v184 = (char *)v75;
          uint64_t v185 = &v82[8 * v81];
          if (v76) {
            operator delete(v76);
          }
LABEL_155:
          int64_t v184 = (char *)v75;
          if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          int v62 = (void *)*v62;
          if (v62) {
            continue;
          }
          break;
        }
        std::string v93 = (char *)v183;
        uint64_t v94 = (unint64_t *)v183;
        if (v183 != v184)
        {
          long long v95 = (char *)v183 + 8;
          uint64_t v94 = (unint64_t *)v183;
          if ((char *)v183 + 8 != v184)
          {
            unint64_t v96 = *(void *)v183;
            uint64_t v94 = (unint64_t *)v183;
            std::string v97 = (char *)v183 + 8;
            do
            {
              unint64_t v99 = *(void *)v97;
              v97 += 8;
              unint64_t v98 = v99;
              if (v99 < v96)
              {
                unint64_t v96 = v98;
                uint64_t v94 = (unint64_t *)v95;
              }
              long long v95 = v97;
            }
            while (v97 != v184);
          }
        }
        unint64_t v100 = *v94;
        if (*v94 >= v171) {
          unint64_t v100 = v171;
        }
        uint64_t NumOperations = v174;
        if (v173 != (uint64_t *)(v100 - 1))
        {
          v181 = v187;
          v182 = v188;
          if (v188) {
            atomic_fetch_add_explicit(&v188->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::BlockBuilder::RemoveOperation();
          uint64_t v101 = v182;
          if (v182 && !atomic_fetch_add(&v182->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
            uint64_t v102 = v187;
            uint64_t v103 = v188;
            if (v188) {
LABEL_172:
            }
              atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v102 = v187;
            uint64_t v103 = v188;
            if (v188) {
              goto LABEL_172;
            }
          }
          v178 = 0;
          v179 = 0;
          v180 = 0;
          BOOL v104 = operator new(0x10uLL);
          v178 = v104;
          v179 = (char *)v104;
          v180 = v104 + 2;
          *BOOL v104 = v102;
          v104[1] = v103;
          if (v103)
          {
            atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
            v179 = (char *)(v104 + 2);
            if (!atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          else
          {
            v179 = (char *)(v104 + 2);
          }
          MIL::Builder::BlockBuilder::InsertOperations();
          uint64_t v105 = 0;
          *(_OWORD *)v175 = 0u;
          long long v176 = 0u;
          int v177 = 1065353216;
          do
          {
            MIL::Builder::BlockBuilder::GetOperation(v199);
            uint64_t v208 = &v206;
            std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)v175, &v206, (uint64_t)&std::piecewise_construct, &v208)[4] = v105;
            int v106 = v207;
            if (v207 && !atomic_fetch_add(&v207->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
            ++v105;
          }
          while (v174 != v105);
          if (v195[1])
          {
            char v107 = v195[0];
            if (v195[0])
            {
              do
              {
                char v115 = v107;
                char v107 = (void *)*v107;
                uint64_t v116 = (std::__shared_weak_count *)v115[3];
                if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
                operator delete(v115);
              }
              while (v107);
            }
            v195[0] = 0;
            uint64_t v108 = (char *)v194[1];
            if (v194[1])
            {
              BOOL v109 = 0;
              do
                *((void *)v194[0] + (void)v109++) = 0;
              while (v108 != v109);
            }
            v195[1] = 0;
          }
          std::string v110 = v175[0];
          v175[0] = 0;
          uint64_t v111 = v194[0];
          v194[0] = v110;
          if (v111) {
            operator delete(v111);
          }
          unint64_t v112 = (unint64_t)v175[1];
          uint64_t v113 = (void *)v176;
          v175[1] = 0;
          *(_OWORD *)v195 = v176;
          int v196 = v177;
          v194[1] = (void *)v112;
          if (*((void *)&v176 + 1))
          {
            unint64_t v114 = *(void *)(v176 + 8);
            if ((v112 & (v112 - 1)) != 0)
            {
              if (v114 >= v112) {
                v114 %= v112;
              }
            }
            else
            {
              v114 &= v112 - 1;
            }
            *((void *)v194[0] + v114) = v195;
            long long v176 = 0uLL;
          }
          else if ((void)v176)
          {
            do
            {
              uint64_t v117 = v113;
              uint64_t v113 = (void *)*v113;
              v118 = (std::__shared_weak_count *)v117[3];
              if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
              operator delete(v117);
            }
            while (v113);
          }
          uint64_t v119 = v175[0];
          v175[0] = 0;
          if (v119) {
            operator delete(v119);
          }
          if (v170) {
            MIL::Builder::BlockBuilder::UpdateStateDependencyMap(v199);
          }
          uint64_t v120 = (char *)v178;
          if (v178)
          {
            uint64_t v121 = v179;
            int v122 = v178;
            if (v179 != v178)
            {
              do
              {
                long long v123 = (std::__shared_weak_count *)*((void *)v121 - 1);
                if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                  std::__shared_weak_count::__release_weak(v123);
                }
                v121 -= 16;
              }
              while (v121 != v120);
              int v122 = v178;
            }
            v179 = v120;
            operator delete(v122);
          }
          std::string v93 = (char *)v183;
        }
        if (v93)
        {
          int64_t v184 = v93;
          operator delete(v93);
        }
        long long v124 = (void *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          do
          {
            uint64_t v127 = v124;
            long long v124 = (void *)*v124;
            int v128 = (std::__shared_weak_count *)v127[3];
            if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
            operator delete(v127);
          }
          while (v124);
        }
        int v125 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v125) {
          operator delete(v125);
        }
        v126 = v188;
        uint64_t v12 = v172;
        if (v188 && !atomic_fetch_add(&v188->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
LABEL_16:
        uint64_t v12 = *(MIL::Builder::Variable **)v12;
        if (v12) {
          continue;
        }
        break;
      }
      long long v135 = v191;
      if (v191)
      {
        do
        {
          int v136 = (void *)*v135;
          operator delete(v135);
          long long v135 = v136;
        }
        while (v136);
      }
LABEL_254:
      std::string::size_type v137 = v189;
      v189 = 0;
      if (v137) {
        operator delete(v137);
      }
      uint64_t v138 = v193;
      if (v193 && !atomic_fetch_add(&v193->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
      uint64_t v11 = v169 + 1;
      if (v169 + 1 != NumOperations) {
        continue;
      }
      break;
    }
    uint64_t v10 = v168 + 1;
    if (v168 + 1 != v167) {
      continue;
    }
    break;
  }
LABEL_260:
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v189, v199);
  uint64_t v139 = (uint64_t)v197;
  uint64_t v140 = v198;
  while (v139 != v140)
  {
    long long v141 = (atomic_ullong *)v189;
    int v142 = v190;
    if (v189 != v190)
    {
      char v143 = *(unsigned char *)(v139 + 23);
      if (v143 >= 0) {
        uint64_t v144 = *(unsigned __int8 *)(v139 + 23);
      }
      else {
        uint64_t v144 = *(void *)(v139 + 8);
      }
      if (v143 >= 0) {
        v145 = (unsigned __int8 *)v139;
      }
      else {
        v145 = *(unsigned __int8 **)v139;
      }
      while (1)
      {
        uint64_t v146 = *((unsigned __int8 *)v141 + 23);
        if ((v146 & 0x80u) == 0) {
          atomic_ullong v147 = *((unsigned __int8 *)v141 + 23);
        }
        else {
          atomic_ullong v147 = v141[1];
        }
        if (v147 == v144)
        {
          if ((v146 & 0x80) != 0)
          {
            if (!memcmp((const void *)*v141, v145, v141[1])) {
              break;
            }
          }
          else
          {
            if (!*((unsigned char *)v141 + 23)) {
              break;
            }
            uint64_t v148 = 0;
            while (*((unsigned __int8 *)v141 + v148) == v145[v148])
            {
              if (v146 == ++v148) {
                goto LABEL_281;
              }
            }
          }
        }
        v141 += 3;
        if (v141 == v142) {
          goto LABEL_282;
        }
      }
    }
LABEL_281:
    if (v141 == v142) {
LABEL_282:
    }
      MIL::Builder::BlockBuilder::AddOutput();
    v139 += 24;
  }
  if (MIL::Builder::BlockBuilder::GetNumOperations(v199) != NumOperations)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Internal bug: Number of ops should not change by MakeOpsConsecutive.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v149 = (atomic_ullong *)v189;
  if (v189)
  {
    v150 = v190;
    int64_t v151 = v189;
    if (v190 != v189)
    {
      do
      {
        if (*((char *)v150 - 1) < 0) {
          operator delete((void *)*(v150 - 3));
        }
        v150 -= 3;
      }
      while (v150 != v149);
      int64_t v151 = v189;
    }
    v190 = v149;
    operator delete(v151);
  }
  v152 = v195[0];
  if (v195[0])
  {
    do
    {
      uint64_t v153 = v152;
      v152 = (void *)*v152;
      v154 = (std::__shared_weak_count *)v153[3];
      if (v154 && !atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
      operator delete(v153);
    }
    while (v152);
  }
  v155 = v194[0];
  v194[0] = 0;
  if (v155) {
    operator delete(v155);
  }
LABEL_301:
  uint64_t v156 = (uint64_t)v197;
  if (v197)
  {
    uint64_t v157 = v198;
    v158 = v197;
    if ((void *)v198 != v197)
    {
      do
      {
        if (*(char *)(v157 - 1) < 0) {
          operator delete(*(void **)(v157 - 24));
        }
        v157 -= 24;
      }
      while (v157 != v156);
      v158 = v197;
    }
    uint64_t v198 = v156;
    operator delete(v158);
  }
  v159 = v200;
  if (v200 && !atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
  }
  v160 = (void **)v202;
  if ((void)v202)
  {
    do
    {
      std::string::size_type v165 = (void **)*v160;
      if (*((char *)v160 + 39) < 0) {
        operator delete(v160[2]);
      }
      operator delete(v160);
      v160 = v165;
    }
    while (v165);
  }
  v161 = (void *)v201;
  *(void *)&long long v201 = 0;
  if (v161) {
    operator delete(v161);
  }
  v162 = v205;
  if (v205)
  {
    do
    {
      std::string::size_type v163 = (void *)*v162;
      operator delete(v162);
      v162 = v163;
    }
    while (v163);
  }
  std::string::size_type v164 = v204;
  v204 = 0;
  if (v164) {
    operator delete(v164);
  }
}

void sub_1924A3960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,void *__p)
{
  __cxa_free_exception(v52);
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  uint64_t v55 = __p;
  while (v55)
  {
    uint64_t v59 = v55;
    uint64_t v55 = (void *)*v55;
    long long v60 = (std::__shared_weak_count *)v59[3];
    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
    operator delete(v59);
  }
  BOOL v56 = a50;
  a50 = 0;
  if (v56)
  {
    operator delete(v56);
    std::string v57 = *(void ***)(v53 - 248);
    if (!v57)
    {
LABEL_4:
      uint64_t v58 = *(std::__shared_weak_count **)(v53 - 216);
      if (!v58) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    std::string v57 = *(void ***)(v53 - 248);
    if (!v57) {
      goto LABEL_4;
    }
  }
  uint64_t v61 = *(void ***)(v53 - 240);
  if (v61 == v57)
  {
    *(void *)(v53 - 240) = v57;
    operator delete(v57);
    uint64_t v58 = *(std::__shared_weak_count **)(v53 - 216);
    if (!v58) {
      goto LABEL_21;
    }
  }
  else
  {
    do
    {
      if (*((char *)v61 - 1) < 0) {
        operator delete(*(v61 - 3));
      }
      v61 -= 3;
    }
    while (v61 != v57);
    int v62 = *(void **)(v53 - 248);
    *(void *)(v53 - 240) = v57;
    operator delete(v62);
    uint64_t v58 = *(std::__shared_weak_count **)(v53 - 216);
    if (!v58)
    {
LABEL_21:
      unint64_t v63 = *(void ***)(v53 - 192);
      if (v63)
      {
        do
        {
          uint8x8_t v68 = (void **)*v63;
          if (*((char *)v63 + 39) < 0) {
            operator delete(v63[2]);
          }
          operator delete(v63);
          unint64_t v63 = v68;
        }
        while (v68);
      }
      long long v64 = *(void **)(v53 - 208);
      *(void *)(v53 - 208) = 0;
      if (v64) {
        operator delete(v64);
      }
      unint64_t v65 = *(void **)(v53 - 144);
      if (v65)
      {
        do
        {
          unint64_t v66 = (void *)*v65;
          operator delete(v65);
          unint64_t v65 = v66;
        }
        while (v66);
      }
      unint64_t v67 = *(void **)(v53 - 160);
      *(void *)(v53 - 160) = 0;
      if (v67) {
        operator delete(v67);
      }
      _Unwind_Resume(a1);
    }
  }
LABEL_19:
  if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  goto LABEL_21;
}

void *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder> const,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder> const>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 2 * a3;
    long long v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    uint64_t v7 = &a2[v5];
    do
    {
      uint64_t v8 = a2[1];
      *long long v6 = *a2;
      v6[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
      a2 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_1924A3FC4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100]((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::FuncHasFlexibleInputsOrOutputs(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v22);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a2);
  uint64_t v5 = v4;
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v18 = std::string::append(&v20, " does not exist.");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  long long v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 128))(v4);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v5 + 160))(&__p, v5);
  unint64_t v9 = (void *)*v6;
  uint64_t v7 = v6 + 1;
  uint64_t v8 = v9;
  if (v9 != v7)
  {
    do
    {
      (*(void (**)(void))(*(void *)v8[7] + 16))(v8[7]);
      unint64_t v14 = (void *)v8[1];
      if (v14)
      {
        do
        {
          unint64_t v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v15 = (void *)v8[2];
          BOOL v16 = *v15 == (void)v8;
          uint64_t v8 = v15;
        }
        while (!v16);
      }
      uint64_t v8 = v15;
    }
    while (v15 != v7);
  }
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  uint64_t v11 = (char *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
  {
    if (!__p.__r_.__value_.__r.__words[0]) {
      goto LABEL_7;
    }
  }
  else
  {
    do
    {
      (*(void (**)(void))(**(void **)v11 + 16))();
      v11 += 8;
    }
    while (v11 != (char *)size);
    uint64_t v11 = (char *)__p.__r_.__value_.__r.__words[0];
    if (!__p.__r_.__value_.__r.__words[0]) {
      goto LABEL_7;
    }
  }
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  operator delete(v11);
LABEL_7:
  uint64_t v12 = v23;
  if (!v23 || atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return 0;
}

void sub_1924A42A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23 - 48);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::InterleaveSpan<float>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  long long v6 = *(unint64_t **)a5;
  if (*(void *)(a5 + 8) - *(void *)a5 != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only shape of size 2 is supported.");
    goto LABEL_24;
  }
  if (a2 != a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Spans must have the same size.");
    goto LABEL_24;
  }
  unint64_t v8 = *v6;
  uint64_t v9 = v6[1];
  if (a2 != v9 * *v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Span size must match the product of its dims.");
LABEL_24:
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (v8) {
    BOOL v10 = a6 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    uint64_t v13 = result;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = a6;
    uint64_t v25 = v9 * a6;
    unint64_t v26 = v8;
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v27 = v15;
      uint64_t v28 = v14;
      uint64_t v19 = v15 * v9;
      uint64_t v29 = v13;
      do
      {
        uint64_t v20 = 0;
        do
        {
          lldiv_t v21 = lldiv(v17 + v20, v9);
          BOOL result = v21.quot;
          if (a2 <= v14 + v20 || (unint64_t v22 = v21.quot + v19 + v21.rem * v16, a2 <= v22))
          {
            uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::range_error::range_error[abi:ne180100](v23, "index out of bounds");
            __cxa_throw(v23, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
          }
          *(_DWORD *)(a3 + 4 * v22) = *(_DWORD *)(v13 + 4 * v20++);
        }
        while (v9 != v20);
        ++v18;
        v13 += 4 * v9;
        v14 += v9;
        v17 += v9;
      }
      while (v18 != v16);
      uint64_t v15 = v27 + v16;
      uint64_t v13 = v29 + 4 * v25;
      uint64_t v14 = v28 + v25;
    }
    while (v27 + v16 < v26);
  }
  return result;
}

void sub_1924A45CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A45E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A45F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A4608(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A461C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::InterleaveSpan<MIL::Fp16>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  long long v6 = *(unint64_t **)a5;
  if (*(void *)(a5 + 8) - *(void *)a5 != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only shape of size 2 is supported.");
    goto LABEL_24;
  }
  if (a2 != a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Spans must have the same size.");
    goto LABEL_24;
  }
  unint64_t v8 = *v6;
  uint64_t v9 = v6[1];
  if (a2 != v9 * *v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Span size must match the product of its dims.");
LABEL_24:
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (v8) {
    BOOL v10 = a6 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    uint64_t v13 = result;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = a6;
    uint64_t v25 = v9 * a6;
    unint64_t v26 = v8;
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v27 = v15;
      uint64_t v28 = v14;
      uint64_t v19 = v15 * v9;
      uint64_t v29 = v13;
      do
      {
        uint64_t v20 = 0;
        do
        {
          lldiv_t v21 = lldiv(v17 + v20, v9);
          BOOL result = v21.quot;
          if (a2 <= v14 + v20 || (unint64_t v22 = v21.quot + v19 + v21.rem * v16, a2 <= v22))
          {
            uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::range_error::range_error[abi:ne180100](v23, "index out of bounds");
            __cxa_throw(v23, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
          }
          *(_WORD *)(a3 + 2 * v22) = *(_WORD *)(v13 + 2 * v20++);
        }
        while (v9 != v20);
        ++v18;
        v13 += 2 * v9;
        v14 += v9;
        v17 += v9;
      }
      while (v18 != v16);
      uint64_t v15 = v27 + v16;
      uint64_t v13 = v29 + 2 * v25;
      uint64_t v14 = v28 + v25;
    }
    while (v27 + v16 < v26);
  }
  return result;
}

void sub_1924A483C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A4850(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A4864(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A4878(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A488C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::InterleaveSpan<signed char>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  long long v6 = *(unint64_t **)a5;
  if (*(void *)(a5 + 8) - *(void *)a5 != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only shape of size 2 is supported.");
    goto LABEL_24;
  }
  if (a2 != a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Spans must have the same size.");
    goto LABEL_24;
  }
  unint64_t v8 = *v6;
  uint64_t v9 = v6[1];
  if (a2 != v9 * *v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Span size must match the product of its dims.");
LABEL_24:
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (v8) {
    BOOL v10 = a6 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    uint64_t v13 = result;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = a6;
    uint64_t v25 = v9 * a6;
    unint64_t v26 = v8;
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v27 = v15;
      uint64_t v28 = v14;
      uint64_t v19 = v15 * v9;
      uint64_t v29 = v13;
      do
      {
        uint64_t v20 = 0;
        do
        {
          lldiv_t v21 = lldiv(v17 + v20, v9);
          BOOL result = v21.quot;
          if (a2 <= v14 + v20 || (unint64_t v22 = v21.quot + v19 + v21.rem * v16, a2 <= v22))
          {
            uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::range_error::range_error[abi:ne180100](v23, "index out of bounds");
            __cxa_throw(v23, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
          }
          *(unsigned char *)(a3 + v22) = *(unsigned char *)(v13 + v20++);
        }
        while (v9 != v20);
        ++v18;
        v13 += v9;
        v14 += v9;
        v17 += v9;
      }
      while (v18 != v16);
      uint64_t v15 = v27 + v16;
      uint64_t v13 = v29 + v25;
      uint64_t v14 = v28 + v25;
    }
    while (v27 + v16 < v26);
  }
  return result;
}

void sub_1924A4A94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A4AA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A4ABC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A4AD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A4AE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MergeFunctions(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void **a6@<X8>)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11);
  int v142 = 0;
  uint64_t v143 = 0;
  long long v141 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v141, *v12, v12[1], 0xAAAAAAAAAAAAAAABLL * ((v12[1] - *v12) >> 3));
  uint64_t v13 = (uint64_t)v141;
  uint64_t v14 = v142;
  long long v138 = 0u;
  long long v139 = 0u;
  for (int i = 1065353216; (void **)v13 != v14; v13 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v138, v13, v13);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  uint64_t v135 = *a1;
  int v136 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a4[1];
  uint64_t v133 = *a4;
  long long v134 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::FunctionBuilder::Make();
  if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
  }
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
  MIL::Builder::FunctionBuilder::SelectedSpecialization(v137);
  MIL::Builder::FunctionBuilder::GetBlock();
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v129, v131);
  uint64_t v17 = (uint64_t)v129;
  uint64_t v18 = v130;
  long long v126 = 0u;
  long long v127 = 0u;
  for (int j = 1065353216; v17 != v18; v17 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v126, v17, v17);
  *(_OWORD *)long long v123 = 0u;
  *(_OWORD *)long long v124 = 0u;
  int v125 = 1065353216;
  MIL::Builder::FunctionBuilder::CreateFunction((uint64_t *)&v111, v137);
  uint64_t v19 = (void *)(*(uint64_t (**)(void *))(*(void *)v111 + 128))(v111);
  v122[0] = 0;
  v122[1] = 0;
  uint64_t v121 = v122;
  uint64_t v20 = v19 + 1;
  lldiv_t v21 = (void *)*v19;
  if ((void *)*v19 != v19 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t **)&v121, v122, v21 + 4, (uint64_t)(v21 + 4));
      unint64_t v34 = (void *)v21[1];
      if (v34)
      {
        do
        {
          unint64_t v35 = v34;
          unint64_t v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          unint64_t v35 = (void *)v21[2];
          BOOL v36 = *v35 == (void)v21;
          lldiv_t v21 = v35;
        }
        while (!v36);
      }
      lldiv_t v21 = v35;
    }
    while (v35 != v20);
  }
  unint64_t v22 = v111;
  uint64_t v111 = 0;
  if (v22) {
    (*(void (**)(void *))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = (uint64_t *)v121;
  if (v121 != v122)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v123, (uint64_t)(v23 + 4), (uint64_t)(v23 + 4));
      uint8x8_t v37 = (char *)v23[1];
      if (v37)
      {
        do
        {
          unint64_t v38 = (char **)v37;
          uint8x8_t v37 = *(char **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          unint64_t v38 = (char **)v23[2];
          BOOL v36 = *v38 == (char *)v23;
          uint64_t v23 = (uint64_t *)v38;
        }
        while (!v36);
      }
      uint64_t v23 = (uint64_t *)v38;
    }
    while (v38 != v122);
  }
  unint64_t v24 = (std::__shared_weak_count *)a1[1];
  uint64_t v118 = *a1;
  uint64_t v119 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = (std::__shared_weak_count *)a5[1];
  uint64_t v116 = *a5;
  uint64_t v117 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::FunctionBuilder::Make();
  unint64_t v26 = v117;
  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  uint64_t v27 = v119;
  if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  MIL::Builder::FunctionBuilder::SelectedSpecialization(v120);
  MIL::Builder::FunctionBuilder::GetBlock();
  uint64_t v111 = 0;
  unint64_t v112 = 0;
  unint64_t v113 = 0;
  MIL::Builder::FunctionBuilder::CreateFunction((uint64_t *)&v107, v120);
  uint64_t v28 = (void *)(*(uint64_t (**)(void *))(*(void *)v107 + 128))(v107);
  v110[0] = 0;
  v110[1] = 0;
  BOOL v109 = v110;
  uint64_t v29 = v28 + 1;
  uint64_t v30 = (void *)*v28;
  if ((void *)*v28 != v28 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t **)&v109, v110, v30 + 4, (uint64_t)(v30 + 4));
      long long v39 = (void *)v30[1];
      if (v39)
      {
        do
        {
          uint64_t v40 = v39;
          long long v39 = (void *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          uint64_t v40 = (void *)v30[2];
          BOOL v36 = *v40 == (void)v30;
          uint64_t v30 = v40;
        }
        while (!v36);
      }
      uint64_t v30 = v40;
    }
    while (v40 != v29);
  }
  BOOL v31 = v107;
  char v107 = 0;
  if (v31) {
    (*(void (**)(void *))(*(void *)v31 + 8))(v31);
  }
  unint64_t v32 = (uint64_t *)v109;
  if (v109 != v110)
  {
    char v33 = v112;
    do
    {
      unint64_t v41 = (long long *)(v32 + 4);
      if ((unint64_t)v33 >= v113)
      {
        char v33 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v111, (uint64_t)v41);
        unint64_t v112 = v33;
        BOOL v43 = (char *)v32[1];
        if (v43) {
          goto LABEL_63;
        }
      }
      else if (*((char *)v32 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v33++, (const std::string::value_type *)v32[4], v32[5]);
        unint64_t v112 = v33;
        BOOL v43 = (char *)v32[1];
        if (v43)
        {
          do
          {
LABEL_63:
            uint64_t v44 = (char **)v43;
            BOOL v43 = *(char **)v43;
          }
          while (v43);
          goto LABEL_55;
        }
      }
      else
      {
        long long v42 = *v41;
        v33->__r_.__value_.__r.__words[2] = v32[6];
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v42;
        unint64_t v112 = ++v33;
        BOOL v43 = (char *)v32[1];
        if (v43) {
          goto LABEL_63;
        }
      }
      do
      {
        uint64_t v44 = (char **)v32[2];
        BOOL v36 = *v44 == (char *)v32;
        unint64_t v32 = (uint64_t *)v44;
      }
      while (!v36);
LABEL_55:
      unint64_t v32 = (uint64_t *)v44;
    }
    while (v44 != v110);
  }
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v107, v114);
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&__p, v114);
  uint64_t v45 = (MIL::Builder::OperationBuilder **)__p;
  int64_t v46 = v106;
  if (__p == v106) {
    goto LABEL_83;
  }
  do
  {
    MIL::Builder::OperationBuilder::CreateOperation(v102, *v45);
    v102[1] = v102[0];
    if (v102[0]) {
      operator new();
    }
    uint64_t v103 = 0;
    v102[0] = 0;
    MIL::Builder::OperationBuilder::Make();
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    MIL::Builder::BlockBuilder::AddOperation();
    int64_t v47 = v104;
    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    unint64_t v48 = v103;
    if (!v103 || atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v49 = v102[0];
      v102[0] = 0;
      if (!v49) {
        goto LABEL_70;
      }
LABEL_79:
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
      goto LABEL_70;
    }
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    uint64_t v49 = v102[0];
    v102[0] = 0;
    if (v49) {
      goto LABEL_79;
    }
LABEL_70:
    v45 += 2;
  }
  while (v45 != v46);
  uint64_t v45 = (MIL::Builder::OperationBuilder **)__p;
LABEL_83:
  if (v45)
  {
    unint64_t v50 = v106;
    unint64_t v51 = v45;
    if (v106 != v45)
    {
      do
      {
        uint8x8_t v52 = (std::__shared_weak_count *)*(v50 - 1);
        if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
        v50 -= 2;
      }
      while (v50 != v45);
      unint64_t v51 = __p;
    }
    int v106 = v45;
    operator delete(v51);
  }
  uint64_t v53 = (uint64_t)v129;
  uint64_t v54 = v130;
  uint64_t v55 = v112;
  while (2)
  {
    if (v53 != v54)
    {
      BOOL v56 = (std::string *)v111;
      std::string v57 = v55;
      if (v111 == v55)
      {
LABEL_93:
        v53 += 24;
        continue;
      }
      while (2)
      {
        uint64_t v58 = *(unsigned __int8 *)(v53 + 23);
        if ((v58 & 0x80u) == 0) {
          uint64_t v59 = *(unsigned __int8 *)(v53 + 23);
        }
        else {
          uint64_t v59 = *(void *)(v53 + 8);
        }
        std::string::size_type size = HIBYTE(v56->__r_.__value_.__r.__words[2]);
        int v61 = (char)size;
        if ((size & 0x80u) != 0) {
          std::string::size_type size = v56->__r_.__value_.__l.__size_;
        }
        if (v59 == size)
        {
          if (v61 >= 0) {
            int v62 = v56;
          }
          else {
            int v62 = (std::string *)v56->__r_.__value_.__r.__words[0];
          }
          if ((v58 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v53, v62, *(void *)(v53 + 8))) {
              goto LABEL_98;
            }
          }
          else if (*(unsigned char *)(v53 + 23))
          {
            uint64_t v63 = 0;
            while (*(unsigned __int8 *)(v53 + v63) == v62->__r_.__value_.__s.__data_[v63])
            {
              if (v58 == ++v63) {
                goto LABEL_114;
              }
            }
            goto LABEL_98;
          }
LABEL_114:
          long long v64 = v56;
          if (&v56[1] != v57)
          {
            do
            {
              if (SHIBYTE(v64->__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v64->__r_.__value_.__l.__data_);
              }
              *(_OWORD *)&v64->__r_.__value_.__l.__data_ = *(_OWORD *)&v64[1].__r_.__value_.__l.__data_;
              v64->__r_.__value_.__r.__words[2] = v64[1].__r_.__value_.__r.__words[2];
              *((unsigned char *)&v64[1].__r_.__value_.__s + 23) = 0;
              unint64_t v65 = v64 + 2;
              v64[1].__r_.__value_.__s.__data_[0] = 0;
              ++v64;
            }
            while (v65 != v57);
            std::string v57 = v112;
          }
          while (v57 != v64)
          {
            if (SHIBYTE(v57[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57[-1].__r_.__value_.__l.__data_);
            }
            --v57;
          }
          unint64_t v112 = v64;
          if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v138, v53))
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, (unsigned __int8 *)v53))goto LABEL_128; {
            unint64_t v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a3, (unsigned __int8 *)v53);
            }
            if (!v66) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            int v67 = *((_DWORD *)v66 + 10) - 1;
            *((_DWORD *)v66 + 10) = v67;
            if (!v67) {
LABEL_128:
            }
              MIL::Builder::BlockBuilder::RemoveOutput();
          }
        }
        else
        {
LABEL_98:
          ++v56;
        }
        std::string v57 = v112;
        uint64_t v55 = v56;
        if (v56 == v112) {
          goto LABEL_93;
        }
        continue;
      }
    }
    break;
  }
  for (k = (std::string *)v111; k != v55; ++k)
  {
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v123, (uint64_t)k))
    {
      Input = (MIL::Builder::Variable *)MIL::Builder::FunctionBuilder::TryGetInput();
      if (SHIBYTE(k->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v99, k->__r_.__value_.__l.__data_, k->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v70 = *(_OWORD *)&k->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = k->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v70;
      }
      MIL::Builder::Variable::TryGetType(Input);
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v71 = (char *)v107;
  unint64_t v72 = (char *)v108;
  if (v107 != v108)
  {
    do
    {
      MIL::Builder::BlockBuilder::AddOutput();
      v71 += 24;
    }
    while (v71 != v72);
  }
  MIL::Builder::BlockBuilder::UpdateStateDependencyMap(v131);
  MIL::Builder::FunctionBuilder::CreateFunction((uint64_t *)&__p, v137);
  uint64_t v73 = __p;
  *a6 = __p;
  if (v73) {
    operator new();
  }
  a6[1] = 0;
  BOOL v74 = (void **)v107;
  if (v107)
  {
    uint64_t v75 = v108;
    uint64_t v76 = v107;
    if (v108 != v107)
    {
      do
      {
        if (*((char *)v75 - 1) < 0) {
          operator delete(*(v75 - 3));
        }
        v75 -= 3;
      }
      while (v75 != v74);
      uint64_t v76 = v107;
    }
    uint64_t v108 = v74;
    operator delete(v76);
  }
  std::__tree<std::string>::destroy((uint64_t)&v109, v110[0]);
  int64_t v77 = (std::string *)v111;
  if (v111)
  {
    uint64_t v78 = v112;
    unint64_t v79 = v111;
    if (v112 != v111)
    {
      do
      {
        if (SHIBYTE(v78[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78[-1].__r_.__value_.__l.__data_);
        }
        --v78;
      }
      while (v78 != v77);
      unint64_t v79 = v111;
    }
    unint64_t v112 = v77;
    operator delete(v79);
  }
  uint64_t v80 = v115;
  if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  unint64_t v81 = v120;
  uint64_t v120 = 0;
  if (v81) {
    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(void *)v81 + 8))(v81);
  }
  std::__tree<std::string>::destroy((uint64_t)&v121, v122[0]);
  int v82 = (void **)v124[0];
  if (v124[0])
  {
    do
    {
      unint64_t v89 = (void **)*v82;
      if (*((char *)v82 + 39) < 0) {
        operator delete(v82[2]);
      }
      operator delete(v82);
      int v82 = v89;
    }
    while (v89);
  }
  unint64_t v83 = v123[0];
  v123[0] = 0;
  if (v83) {
    operator delete(v83);
  }
  unint64_t v84 = (void **)v127;
  if ((void)v127)
  {
    do
    {
      uint64_t v90 = (void **)*v84;
      if (*((char *)v84 + 39) < 0) {
        operator delete(v84[2]);
      }
      operator delete(v84);
      unint64_t v84 = v90;
    }
    while (v90);
  }
  uint64_t v85 = (void *)v126;
  *(void *)&long long v126 = 0;
  if (v85) {
    operator delete(v85);
  }
  uint64_t v86 = (uint64_t)v129;
  if (v129)
  {
    uint64_t v87 = v130;
    std::string::size_type v88 = v129;
    if ((void *)v130 != v129)
    {
      do
      {
        if (*(char *)(v87 - 1) < 0) {
          operator delete(*(void **)(v87 - 24));
        }
        v87 -= 24;
      }
      while (v87 != v86);
      std::string::size_type v88 = v129;
    }
    uint64_t v130 = v86;
    operator delete(v88);
  }
  long long v91 = v132;
  if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
  }
  uint64_t v92 = v137;
  std::string::size_type v137 = 0;
  if (v92) {
    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(void *)v92 + 8))(v92);
  }
  std::string v93 = (void **)v139;
  if ((void)v139)
  {
    do
    {
      unint64_t v98 = (void **)*v93;
      if (*((char *)v93 + 39) < 0) {
        operator delete(v93[2]);
      }
      operator delete(v93);
      std::string v93 = v98;
    }
    while (v98);
  }
  uint64_t v94 = (void *)v138;
  *(void *)&long long v138 = 0;
  if (v94) {
    operator delete(v94);
  }
  long long v95 = v141;
  if (v141)
  {
    unint64_t v96 = v142;
    std::string v97 = v141;
    if (v142 != v141)
    {
      do
      {
        if (*((char *)v96 - 1) < 0) {
          operator delete(*(v96 - 3));
        }
        v96 -= 3;
      }
      while (v96 != v95);
      std::string v97 = v141;
    }
    int v142 = v95;
    operator delete(v97);
  }
}

void sub_1924A58D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,char *a42,uint64_t a43,char a44)
{
  if (a22) {
    Espresso::AOT::MILCompilerForE5::Run();
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a25);
  std::__tree<std::string>::destroy((uint64_t)&a28, a29);
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a31);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  uint64_t v46 = a40;
  a40 = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  std::__tree<std::string>::destroy((uint64_t)&a41, a42);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a44);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v44 - 256);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v44 - 208));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 184);
  uint64_t v47 = *(void *)(v44 - 136);
  *(void *)(v44 - 136) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v44 - 128);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v44 - 88));
  _Unwind_Resume(a1);
}

void Espresso::AOT::RequireDecompositionForANE(uint64_t **a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  uint64_t v4 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  uint64_t v5 = **v4;
  long long v6 = (*v4)[1];
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    uint64_t v40 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*v5 + 56))(*v5);
      Espresso::AOT::GetOperatorType(v10, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v9 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != 28) {
          goto LABEL_4;
        }
        BOOL v17 = *(void *)__p.__r_.__value_.__l.__data_ != 0x645F64656C616373
           || *(void *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x75646F72705F746FLL
           || *(void *)(__p.__r_.__value_.__r.__words[0] + 16) != 0x6E657474615F7463
           || *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 24) != 1852795252;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v17) {
          goto LABEL_5;
        }
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 28) {
          goto LABEL_5;
        }
        BOOL v11 = __p.__r_.__value_.__r.__words[0] == 0x645F64656C616373
           && __p.__r_.__value_.__l.__size_ == 0x75646F72705F746FLL;
        BOOL v12 = v11 && __p.__r_.__value_.__r.__words[2] == 0x6E657474615F7463;
        if (!v12 || v42 != 1852795252) {
          goto LABEL_5;
        }
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "query");
      Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      uint64_t v19 = MIL::IRValueType::AsTensorType(ParameterType);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 88))(v19) != 4) {
        goto LABEL_5;
      }
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 96))(v19);
      if (!(*(uint64_t (**)(void))(**(void **)(*(void *)(v20 + 8) - 8) + 16))(*(void *)(*(void *)(v20 + 8) - 8))) {
        goto LABEL_5;
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "milId");
      uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute();
      MIL::IRValue::AsTensor(Attribute);
      uint64_t v22 = MIL::IRValue::GetScalar<unsigned long long>();
      uint64_t v23 = v22;
      if (v8 < v40)
      {
        *v8++ = v22;
        a1[1] = v8;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_3;
      }
      int64_t v24 = (char *)v8 - (char *)v7;
      uint64_t v25 = v8 - v7;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v40 - (char *)v7) >> 2 > v26) {
        unint64_t v26 = ((char *)v40 - (char *)v7) >> 2;
      }
      if ((unint64_t)((char *)v40 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27)
      {
        if (v27 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v28 = operator new(8 * v27);
        uint64_t v29 = (uint64_t *)&v28[8 * v25];
        uint64_t *v29 = v23;
        uint64_t v30 = v29 + 1;
        if (v8 != v7)
        {
LABEL_50:
          unint64_t v31 = (char *)(v8 - 1) - (char *)v7;
          if (v31 < 0x168
            || &v28[v24 - 8 - (v31 & 0xFFFFFFFFFFFFFFF8)] > &v28[v24 - 8]
            || (uint64_t *)((char *)v8 - (v31 & 0xFFFFFFFFFFFFFFF8) - 8) > v8 - 1
            || (unint64_t)((char *)v7 - v28) < 0x20)
          {
            unint64_t v32 = v8;
          }
          else
          {
            uint64_t v34 = (v31 >> 3) + 1;
            uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v32 = &v8[v35 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v29 = (uint64_t *)((char *)v29 - v35);
            BOOL v36 = &v28[v24 - 16];
            uint8x8_t v37 = v8 - 2;
            uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *BOOL v36 = v39;
              v36 -= 2;
              v37 -= 4;
              v38 -= 4;
            }
            while (v38);
            if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_53:
              *a1 = v29;
              a1[1] = v30;
              uint64_t v40 = (uint64_t *)&v28[8 * v27];
              a1[2] = v40;
              if (!v7) {
                goto LABEL_55;
              }
LABEL_54:
              operator delete(v7);
              goto LABEL_55;
            }
          }
          do
          {
            uint64_t v33 = *--v32;
            *--uint64_t v29 = v33;
          }
          while (v32 != v7);
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (uint64_t *)(8 * v25);
        uint64_t *v29 = v23;
        uint64_t v30 = v29 + 1;
        if (v8 != v7) {
          goto LABEL_50;
        }
      }
      *a1 = v29;
      a1[1] = v30;
      uint64_t v40 = (uint64_t *)&v28[8 * v27];
      a1[2] = v40;
      if (v7) {
        goto LABEL_54;
      }
LABEL_55:
      uint64_t v7 = v29;
      unint64_t v8 = v30;
      a1[1] = v30;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_3:
      uint64_t v9 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_4:
      operator delete(v9);
LABEL_5:
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_1924A6068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    BOOL v17 = *(void **)v15;
    if (!*(void *)v15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    BOOL v17 = *(void **)v15;
    if (!*(void *)v15) {
      goto LABEL_3;
    }
  }
  *(void *)(v15 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

MIL::IRNamedValueType **std::unique_ptr<MIL::IRNamedValueType>::~unique_ptr[abi:ne180100](MIL::IRNamedValueType **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::IRNamedValueType::~IRNamedValueType(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DBFEDELL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DBFEDELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DBFEDELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DBFEDELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                uint64_t v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (int i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    uint64_t v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              uint64_t v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (int j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  uint64_t v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v27 = operator new(0x30uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  *unint64_t v27 = 0;
  v27[1] = v10;
  uint64_t v28 = (std::string *)(v27 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v27[4] = *(void *)(a3 + 16);
  }
  v27[5] = *(void *)(a3 + 24);
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    BOOL v33 = 1;
    if (v11 >= 3) {
      BOOL v33 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v11);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v41 & v10;
      unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v10));
      unint64_t v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11) {
          v42 %= v11;
        }
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  unint64_t v31 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v32 = *v31;
  *unint64_t v31 = v44[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924A65DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924A65F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::MakeTypeWithTotalSizeAttr(_anonymous_namespace_ *this, MIL::MILContext *a2, const MIL::IRValueType *a3)
{
  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    uint64_t v5 = (*(uint64_t (**)(MIL::MILContext *))(*(void *)a2 + 24))(a2);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v48, v6);
    uint64_t Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    MIL::IRTensorValueType::MakeUInt64Value(Scalar);
    strcpy((char *)&__p, "total_size");
    HIBYTE(v45) = 10;
    uint64_t v46 = v42;
    if (v42) {
      operator new();
    }
    uint64_t v47 = 0;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>((uint64_t)v48, (uint64_t)&__p, (uint64_t)&__p);
    lldiv_t v21 = v47;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if ((SHIBYTE(v45) & 0x80000000) == 0)
      {
LABEL_20:
        (*(void (**)(uint64_t))(*(void *)v5 + 88))(v5);
        uint64_t v22 = *(unsigned char **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
        uint64_t v23 = *(unsigned char **)((*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5) + 8);
        long long __p = 0uLL;
        char v45 = 0;
        int64_t v24 = v23 - v22;
        if (v23 != v22)
        {
          if (v24 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = (char *)operator new(v23 - v22);
          unint64_t v26 = &v25[8 * (v24 >> 3)];
          *(void *)&long long __p = v25;
          char v45 = v26;
          memmove(v25, v22, v24);
          *((void *)&__p + 1) = v26;
        }
        uint64_t v27 = MIL::IRTensorValueType::MakeWithShape();
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        uint64_t v28 = v49;
        if (v49)
        {
          do
          {
            while (1)
            {
              float v29 = (void **)*v28;
              float v30 = (std::__shared_weak_count *)v28[6];
              if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
              if (*((char *)v28 + 39) < 0) {
                break;
              }
              operator delete(v28);
              uint64_t v28 = v29;
              if (!v29) {
                goto LABEL_33;
              }
            }
            operator delete(v28[2]);
            operator delete(v28);
            uint64_t v28 = v29;
          }
          while (v29);
        }
LABEL_33:
        unint64_t v31 = (void *)v48[0];
        v48[0] = 0;
        if (!v31) {
          return v27;
        }
LABEL_54:
        operator delete(v31);
        return v27;
      }
    }
    else if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete((void *)__p);
    goto LABEL_20;
  }
  if (!E5Common::Utils::IsTensorBuffer(a2, v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected type.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v8 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  unint64_t v9 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v8);
  unint64_t v10 = *(unsigned char **)MIL::IRTensorBufferValueType::GetShape(v9);
  unint64_t v11 = *(unsigned char **)(MIL::IRTensorBufferValueType::GetShape(v9) + 8);
  BOOL v43 = 0;
  size_t v12 = v11 - v10;
  if (v11 != v10)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v43 = operator new(v11 - v10);
    memmove(v43, v10, v12);
  }
  uint64_t v13 = *(unsigned char **)MIL::IRTensorBufferValueType::GetStrides(v9);
  uint64_t v14 = *(unsigned char **)(MIL::IRTensorBufferValueType::GetStrides(v9) + 8);
  unint64_t v41 = 0;
  size_t v15 = v14 - v13;
  if (v14 != v13)
  {
    if ((v15 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = operator new(v14 - v13);
    memmove(v41, v13, v15);
  }
  uint64_t v16 = *(unsigned char **)MIL::IRTensorBufferValueType::GetInterleaveFactors(v9);
  unint64_t v17 = *(unsigned char **)(MIL::IRTensorBufferValueType::GetInterleaveFactors(v9) + 8);
  uint64_t v40 = 0;
  size_t v18 = v17 - v16;
  if (v17 != v16)
  {
    if ((v18 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v40 = operator new(v17 - v16);
    memmove(v40, v16, v18);
  }
  uint64_t Attributes = MIL::IRTensorBufferValueType::GetAttributes(v9);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v48, Attributes);
  uint64_t v20 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRTensorValueType::MakeUInt64Value(v20);
  strcpy((char *)&__p, "total_size");
  HIBYTE(v45) = 10;
  uint64_t v46 = v39;
  if (v39) {
    operator new();
  }
  uint64_t v47 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>((uint64_t)v48, (uint64_t)&__p, (uint64_t)&__p);
  unint64_t v32 = v47;
  if (!v47 || atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (SHIBYTE(v45) < 0) {
LABEL_38:
  }
    operator delete((void *)__p);
LABEL_39:
  MIL::IRTensorBufferValueType::GetDataType(v9);
  uint64_t v27 = MIL::IRTensorBufferValueType::MakeWithShape();
  BOOL v33 = v49;
  if (v49)
  {
    do
    {
      while (1)
      {
        unint64_t v34 = (void **)*v33;
        unint64_t v35 = (std::__shared_weak_count *)v33[6];
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
        if (*((char *)v33 + 39) < 0) {
          break;
        }
        operator delete(v33);
        BOOL v33 = v34;
        if (!v34) {
          goto LABEL_47;
        }
      }
      operator delete(v33[2]);
      operator delete(v33);
      BOOL v33 = v34;
    }
    while (v34);
  }
LABEL_47:
  BOOL v36 = (void *)v48[0];
  v48[0] = 0;
  if (v36) {
    operator delete(v36);
  }
  if (v40) {
    operator delete(v40);
  }
  if (v41) {
    operator delete(v41);
  }
  unint64_t v31 = v43;
  if (v43) {
    goto LABEL_54;
  }
  return v27;
}

void sub_1924A6D34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924A6D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v24 - 88);
  if (a10)
  {
    operator delete(a10);
    unint64_t v26 = a13;
    if (!a13)
    {
LABEL_7:
      uint64_t v27 = a16;
      if (!a16) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v26 = a13;
    if (!a13) {
      goto LABEL_7;
    }
  }
  operator delete(v26);
  uint64_t v27 = a16;
  if (!a16) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(v27);
  goto LABEL_9;
}

void sub_1924A6E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x1924A6E80);
  }
  JUMPOUT(0x1924A6E58);
}

void *std::vector<std::shared_ptr<MIL::IRArgument>>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = (uint64_t)v4 - *(void *)a2;
  if (v4 != *(void **)a2)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = operator new((size_t)v4 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      uint64_t v7 = v3[1];
      *uint64_t v6 = *v3;
      v6[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
      v3 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_1924A6F94(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100]((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::CreateCastOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 24))(a6);
  if (!v8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only tensor types are supported.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v9 = v8;
  MIL::MILContext::GetOpset();
  char v35 = 4;
  strcpy((char *)&v33, "cast");
  MIL::IROpset::TryGetOperatorSharedPtr();
  MIL::IRTensorValueType::MakeScalar();
  (*(void (**)(uint64_t))(*(void *)v9 + 88))(v9);
  MIL::IRDataTypeToString();
  MIL::IRTensorValueType::MakeStringValue();
  if (v31 < 0) {
    operator delete(v30);
  }
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::Make();
  char v25 = 1;
  LOWORD(v24) = 120;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v23 = *(std::string *)a4;
  }
  MIL::Builder::OperationBuilder::AddInput();
  char v22 = 5;
  strcpy((char *)v21, "dtype");
  uint64_t v19 = v32;
  if (v32) {
    operator new();
  }
  uint64_t v20 = 0;
  uint64_t v32 = 0;
  MIL::Builder::OperationBuilder::AddInput();
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  MIL::Builder::OperationBuilder::AddOutput();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v10 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unint64_t v11 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v22 < 0) {
LABEL_22:
  }
    operator delete(v21[0]);
LABEL_23:
  size_t v12 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_27;
      }
LABEL_33:
      operator delete(v24);
      uint64_t v13 = v28;
      if (!v28) {
        goto LABEL_36;
      }
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (v25 < 0) {
    goto LABEL_33;
  }
LABEL_27:
  uint64_t v13 = v28;
  if (!v28) {
    goto LABEL_36;
  }
LABEL_34:
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_36:
  uint64_t v14 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
  uint64_t v15 = v32;
  uint64_t v32 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v37;
  if (v37)
  {
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1924A74A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v40 - 104);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  uint64_t v42 = *(void *)(v40 - 112);
  *(void *)(v40 - 112) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v40 - 80);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

__n128 std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE37CD78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37CD78;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT19IsFunctionSegmentedERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIc"
                     "EENS5_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT19IsFunctionSegmentedERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11ch"
                                "ar_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT19IsFunctionSegmentedERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT19IsFunctionSegmentedERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

__n128 std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37CCC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37CCC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 128))(v4)) {
    return 1;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  (*(void (**)(void **__return_ptr))(*(void *)v5 + 120))(v17);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 64))(&v15);
  if (!v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(void **)(a1 + 16), (unsigned __int8 *)v17))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::IRFunction>&>(*(void *)(a1 + 16), (uint64_t)v17, (uint64_t)v17, &v15);
    if (!v6)
    {
      unint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      unint64_t v11 = std::string::append(&v13, " into function map of callees.");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v10, &v14);
      __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v7 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((v18 & 0x80000000) == 0) {
      return 1;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v17[0]);
  return 1;
}

void sub_1924A7A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v24)
  {
LABEL_8:
    if (a23 && !atomic_fetch_add(&a23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
    if (*(char *)(v25 - 33) < 0) {
      operator delete(*(void **)(v25 - 56));
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT10GetCalleesERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9al"
                     "locatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT10GetCalleesERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traits"
                                "IcEENS5_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT10GetCalleesERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT10GetCalleesERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::IRFunction>&>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = v16[1];
            if (v24 == v12)
            {
              uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v26 = v16[3];
              }
              if (v26 == v18)
              {
                uint64_t v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  for (int i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    uint64_t v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              char v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                for (int j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  char v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  float v29 = operator new(0x38uLL);
  v47[0] = v29;
  v47[1] = a1 + 16;
  char v48 = 0;
  void *v29 = 0;
  v29[1] = v12;
  float v30 = (std::string *)(v29 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v29[4] = *(void *)(a3 + 16);
  }
  uint64_t v31 = a4[1];
  v29[5] = *a4;
  v29[6] = v31;
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v13 || (float)(v33 * (float)v13) < v32)
  {
    BOOL v36 = 1;
    if (v13 >= 3) {
      BOOL v36 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v13);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_70;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_70:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v44 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        char v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v4 = v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v12);
        char v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v12;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v12));
      char v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_59;
      }
    }
LABEL_83:
    *char v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v45 >= v13) {
          v45 %= v13;
        }
      }
      else
      {
        v45 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_94;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  char v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_83;
  }
LABEL_59:
  *char v35 = *v34;
  void *v34 = v47[0];
LABEL_94:
  uint64_t v16 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_1924A7FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924A8008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37D350;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37D350;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT34ValidateAlignmentsAttrForE5BackendERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_"
                     "11char_traitsIcEENS5_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT34ValidateAlignmentsAttrForE5BackendERKN3MIL9IRProgramERKNSt3__112basic_s"
                                "tringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT34ValidateAlignmentsAttrForE5BackendERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT34ValidateAlignmentsAttrForE5BackendERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC033DLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC033DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC033DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC033DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<MIL::IRArgument  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192E07B16) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192E07B16 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192E07B16)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192E07B16 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char *__p)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    if (!__p) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v3 = *((void *)__p + 5);
  if (v3)
  {
    uint64_t v4 = *((void *)__p + 6);
    uint64_t v5 = (void *)*((void *)__p + 5);
    if (v4 == v3)
    {
LABEL_16:
      *((void *)__p + 6) = v3;
      operator delete(v5);
      goto LABEL_17;
    }
    while (1)
    {
      if (*(char *)(v4 - 1) < 0)
      {
        operator delete(*(void **)(v4 - 24));
        if (*(char *)(v4 - 25) < 0) {
LABEL_10:
        }
          operator delete(*(void **)(v4 - 48));
      }
      else if (*(char *)(v4 - 25) < 0)
      {
        goto LABEL_10;
      }
      v4 -= 48;
      if (v4 == v3)
      {
        uint64_t v5 = (void *)*((void *)__p + 5);
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  if ((__p[39] & 0x80000000) == 0)
  {
LABEL_12:
    char v6 = __p;
    goto LABEL_14;
  }
  operator delete(*((void **)__p + 2));
  char v6 = __p;

LABEL_14:
  operator delete(v6);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 40);
      if (v3)
      {
        *(void *)(v2 + 48) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint8x8_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                uint64_t v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (int i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    uint64_t v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint8x8_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              uint64_t v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (int j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  uint64_t v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint8x8_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v27 = (char *)operator new(0x50uLL);
  uint64_t v28 = v27;
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v27 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)(v28 + 40), a3 + 24);
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    BOOL v33 = 1;
    if (v11 >= 3) {
      BOOL v33 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v11);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        float v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * v10);
        float v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v41 & v10;
      uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v10));
      float v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *float v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11) {
          v42 %= v11;
        }
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v3);
  float v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  *float v32 = *v31;
  *uint64_t v31 = v44[0];
LABEL_92:
  uint8x8_t v14 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924A8804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924A8818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924A882C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 40);
  if (v2)
  {
    do
    {
      uint64_t v4 = *(char **)v2;
      uint64_t v5 = (void *)*((void *)v2 + 5);
      if (v5)
      {
        *((void *)v2 + 6) = v5;
        operator delete(v5);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  unint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v6 = *(void **)a1;
    operator delete(v6);
  }
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0)
    {
      operator delete(*((void **)a2 + 5));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

uint64_t std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (int i = *(void **)(a2 + 16); i; int i = (void *)*i)
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1924A8AE0(_Unwind_Exception *a1)
{
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924A8AF4(_Unwind_Exception *a1)
{
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v3[3];
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

uint64_t *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi(void *a1, uint64_t *a2)
{
  int8x8_t v5 = a2 + 2;
  unint64_t v4 = a2[2];
  unint64_t v6 = HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  *(v5 - 1) = v8;
  inserted = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_prepare((uint64_t)a1, v8, v5);
  int8x8_t v10 = (int8x8_t)a1[1];
  unint64_t v11 = *(v5 - 1);
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v11 % *(void *)&v10;
  if (v11 < *(void *)&v10) {
    unint64_t v13 = *(v5 - 1);
  }
  uint64_t v14 = *(void *)&v10 - 1;
  uint64_t v15 = (*(void *)&v10 - 1) & v11;
  if (v12.u32[0] <= 1uLL) {
    unint64_t v13 = v15;
  }
  if (!inserted)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v13) = a1 + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v16 = *(void *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v10) {
        v16 %= *(void *)&v10;
      }
    }
    else
    {
      v16 &= v14;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v16) = a2;
    goto LABEL_19;
  }
  *a2 = *inserted;
  uint64_t *inserted = (uint64_t)a2;
  if (*a2)
  {
    unint64_t v16 = *(void *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v10) {
        v16 %= *(void *)&v10;
      }
    }
    else
    {
      v16 &= v14;
    }
    if (v16 != v13) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    unint64_t v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0) {
      goto LABEL_4;
    }
    goto LABEL_36;
  }
  BOOL v16 = 1;
  if (v6 >= 3) {
    BOOL v16 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v6);
  unint64_t v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (prime > v6) {
    goto LABEL_22;
  }
  if (prime < v6)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          size_t v20 = v22;
        }
        if (prime <= v20) {
          size_t prime = v20;
        }
        if (prime >= v6) {
          goto LABEL_35;
        }
LABEL_22:
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__do_rehash<false>(a1, prime);
        goto LABEL_35;
      }
    }
    size_t v23 = std::__next_prime(v20);
    if (prime <= v23) {
      size_t prime = v23;
    }
    if (prime < v6) {
      goto LABEL_22;
    }
  }
LABEL_35:
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    int8x8_t v10 = *(void **)(*(void *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      char v11 = 0;
      uint64_t v12 = *a3;
      while (1)
      {
        uint64_t result = v10;
        int8x8_t v10 = (void *)*v10;
        if (!v10) {
          break;
        }
        uint64_t v15 = v10[1];
        if ((v15 & v9) != (v9 & a2)) {
          break;
        }
        if (v15 == a2)
        {
          char v13 = v11 & (v10[2] != v12);
          v11 |= v10[2] == v12;
          if (v13) {
            return result;
          }
        }
        else if (v11)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  unint64_t v24 = a2;
  if (v6 <= a2) {
    unint64_t v24 = a2 % v6;
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v24);
  if (!v25) {
    return 0;
  }
  unsigned __int8 v26 = 0;
  uint64_t v27 = *a3;
  while (1)
  {
    uint64_t result = v25;
    uint64_t v25 = (void *)*v25;
    if (!v25) {
      break;
    }
    unint64_t v29 = v25[1];
    unint64_t v30 = v29;
    if (v29 >= v6) {
      unint64_t v30 = v29 % v6;
    }
    if (v30 != v24) {
      break;
    }
    if (v29 == a2)
    {
      int v28 = v26 & (v25[2] != v27);
      v26 |= v25[2] == v27;
      if (v28 == 1) {
        return result;
      }
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  unint64_t v4 = (char *)v1[1];
  int8x8_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    unint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      float v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      float v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 32;
  }
  while (v4 != v2);
  int8x8_t v5 = **a1;
LABEL_14:
  v1[1] = v2;

  operator delete(v5);
}

_OWORD *std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::__push_back_slow_path<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>(void **a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
  unint64_t v4 = (v3 >> 5) + 1;
  if (v4 >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 32 * v7;
  int8x8_t v10 = (char *)operator new(32 * v7);
  char v11 = &v10[32 * (v3 >> 5)];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v11 = *(_OWORD *)a2;
  char v13 = v11 + 32;
  uint64_t v14 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)&v10[v3 + 16] = v12;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v15 = (char *)*a1;
  BOOL v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v14;
    if (!v16) {
      return v13;
    }
    goto LABEL_21;
  }
  do
  {
    long long v17 = *((_OWORD *)v16 - 2);
    v16 -= 32;
    *((_OWORD *)v11 - 2) = v17;
    v11 -= 32;
    *(void *)BOOL v16 = 0;
    *((void *)v16 + 1) = 0;
    *((_OWORD *)v11 + 1) = *((_OWORD *)v16 + 1);
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = 0;
  }
  while (v16 != v15);
  unint64_t v18 = (char *)*a1;
  BOOL v16 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v14;
  if (v16 != v18)
  {
    while (1)
    {
      uint64_t v19 = (std::__shared_weak_count *)*((void *)v16 - 1);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        size_t v20 = (std::__shared_weak_count *)*((void *)v16 - 3);
        if (v20)
        {
LABEL_15:
          if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      else
      {
        size_t v20 = (std::__shared_weak_count *)*((void *)v16 - 3);
        if (v20) {
          goto LABEL_15;
        }
      }
      v16 -= 32;
      if (v16 == v18)
      {
        BOOL v16 = v18;
        break;
      }
    }
  }
  if (v16) {
LABEL_21:
  }
    operator delete(v16);
  return v13;
}

void std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE37D2F8;
  return result;
}

void std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D2F8;
}

void std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  MIL::Matching::MatchView::MatchView();
  strcpy((char *)__p, "batch_dims");
  if (!MIL::Matching::MatchView::GetArgumentCount()) {
    goto LABEL_6;
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "batch_dims");
  MIL::Matching::MatchView::GetArgument();
  Value = (MIL::IRValue *)MIL::Matching::ArgumentView::GetValue((MIL::Matching::ArgumentView *)v58);
  MIL::IRValue::AsTensor(Value);
  int v4 = MIL::IRValue::GetScalar<int>();
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v58);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    HIBYTE(__p[2]) = 1;
    LOWORD(__p[0]) = 120;
    MIL::Matching::MatchView::GetArgument();
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = (MIL::IRValue *)MIL::Matching::ArgumentView::TryGetValue((MIL::Matching::ArgumentView *)v61);
    if (!v5) {
      goto LABEL_29;
    }
    uint64_t v6 = MIL::IRValue::AsTensor(v5);
    unint64_t v7 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7) != 4
      || !(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v7 + 104))(v7))
    {
      goto LABEL_29;
    }
    float v8 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      while (!(*(uint64_t (**)(void))(**(void **)v9 + 24))())
      {
        v9 += 8;
        if (v9 == v10) {
          goto LABEL_14;
        }
      }
      goto LABEL_29;
    }
LABEL_14:
    char v11 = (MIL::IRDimension ***)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
    if (MIL::IRTensorValueType::Rank(v7) != 3
      || (uint64_t v12 = MIL::IRDimension::AsConstant((*v11)[1]),
          (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12) != 1))
    {
LABEL_29:
      MIL::Transform::MatchContext::RejectMatch(a2);
LABEL_30:
      MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v61);
      goto LABEL_31;
    }
    HIBYTE(__p[2]) = 7;
    strcpy((char *)__p, "indices");
    MIL::Matching::MatchView::GetArgument();
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t Type = (MIL::IRValueType *)MIL::Matching::ArgumentView::GetType((MIL::Matching::ArgumentView *)v60);
    uint64_t v14 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(Type);
    if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v14 + 104))(v14)) {
      goto LABEL_41;
    }
    uint64_t v15 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v14 + 96))(v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    if (*v15 != v17)
    {
      while (!(*(uint64_t (**)(void))(**(void **)v16 + 24))())
      {
        v16 += 8;
        if (v16 == v17) {
          goto LABEL_22;
        }
      }
      goto LABEL_41;
    }
LABEL_22:
    uint64_t v18 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v14 + 96))(v14);
    if (MIL::IRTensorValueType::Rank(v14) != 2
      || (uint64_t v19 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(void *)v18 + 8)),
          (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19) != 1))
    {
LABEL_41:
      MIL::Transform::MatchContext::RejectMatch(a2);
LABEL_42:
      MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v60);
      goto LABEL_30;
    }
    MIL::Transform::MatchContext::GetMILContext(a2);
    (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
    uint64_t v20 = MIL::IRDimension::AsConstant(**v11);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
    uint64_t v22 = MIL::IRDimension::AsConstant((*v11)[2]);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 48))(v22);
    unint64_t v24 = operator new(0x10uLL);
    __p[1] = v24 + 2;
    __p[2] = v24 + 2;
    *unint64_t v24 = v21;
    v24[1] = v23;
    __p[0] = v24;
    MIL::IRTensorValueType::Make();
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
    if (v25)
    {
      MIL::Transform::MatchContext::GetMILContext(a2);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)__p, v25);
      MIL::IRTensorValueType::MakeValueFromFileProperties();
      unsigned __int8 v26 = v58[0];
      v58[0] = 0;
      uint64_t v27 = (void **)__p[2];
      if (__p[2])
      {
        do
        {
          while (1)
          {
            int v28 = (void **)*v27;
            unint64_t v29 = (std::__shared_weak_count *)v27[6];
            if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
            if (*((char *)v27 + 39) < 0) {
              break;
            }
            operator delete(v27);
            uint64_t v27 = v28;
            if (!v28) {
              goto LABEL_39;
            }
          }
          operator delete(v27[2]);
          operator delete(v27);
          uint64_t v27 = v28;
        }
        while (v28);
      }
LABEL_39:
      unint64_t v30 = __p[0];
      __p[0] = 0;
      if (!v30) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v31 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      uint64_t v33 = v32;
      memset(__p, 0, 24);
      if (v32)
      {
        size_t v34 = 2 * v32;
        if (2 * v32 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v35 = (const void *)v31;
        __p[0] = operator new(2 * v32);
        __p[1] = __p[0];
        BOOL v36 = (char *)__p[0] + 2 * ((2 * v33) >> 1);
        __p[2] = v36;
        memcpy(__p[0], v35, v34);
        __p[1] = v36;
      }
      MIL::IRTensorValueType::MakeFloat16Value();
      unsigned __int8 v26 = v58[0];
      v58[0] = 0;
      unint64_t v30 = __p[0];
      if (!__p[0]) {
        goto LABEL_49;
      }
      __p[1] = __p[0];
    }
    operator delete(v30);
LABEL_49:
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    uint8x8_t v52 = v26;
    if (v26) {
      operator new();
    }
    uint64_t v53 = 0;
    MEMORY[0x192FEFD70](v58, &v52);
    __p[0] = "x";
    MEMORY[0x192FEFD80](&__p[1], v58);
    int8x8_t v37 = v55;
    if ((unint64_t)v55 >= v56)
    {
      unint64_t v38 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((char **)&v54, __p);
    }
    else
    {
      *uint64_t v55 = __p[0];
      MEMORY[0x192FEFD80](v37 + 1, &__p[1]);
      unint64_t v38 = (char *)(v37 + 5);
    }
    uint64_t v55 = (void **)v38;
    MEMORY[0x192FEFDC0](&__p[1]);
    MEMORY[0x192FEFDC0](v58);
    uint8x8_t v39 = v53;
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    __p[0] = "indices";
    MEMORY[0x192FEFD90](&__p[1], v60);
    uint64_t v40 = v55;
    if ((unint64_t)v55 >= v56)
    {
      unint64_t v41 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((char **)&v54, __p);
    }
    else
    {
      *uint64_t v55 = __p[0];
      MEMORY[0x192FEFD80](v40 + 1, &__p[1]);
      unint64_t v41 = (char *)(v40 + 5);
    }
    uint64_t v55 = (void **)v41;
    MEMORY[0x192FEFDC0](&__p[1]);
    __p[0] = "axis";
    MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)&__p[1]);
    unint64_t v42 = v55;
    if ((unint64_t)v55 >= v56)
    {
      uint64_t v43 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((char **)&v54, __p);
    }
    else
    {
      *uint64_t v55 = __p[0];
      MEMORY[0x192FEFD80](v42 + 1, &__p[1]);
      uint64_t v43 = (char *)(v42 + 5);
    }
    uint64_t v55 = (void **)v43;
    MEMORY[0x192FEFDC0](&__p[1]);
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "validate_indices");
    uint64_t ArgumentCount = MIL::Matching::MatchView::GetArgumentCount();
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (ArgumentCount)
    {
      HIBYTE(v58[2]) = 16;
      strcpy((char *)v58, "validate_indices");
      MIL::Matching::MatchView::GetArgument();
      __p[0] = "validate_indices";
      MEMORY[0x192FEFD90](&__p[1], v57);
      char v45 = v55;
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v46 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((char **)&v54, __p);
      }
      else
      {
        *uint64_t v55 = __p[0];
        MEMORY[0x192FEFD80](v45 + 1, &__p[1]);
        uint64_t v46 = (char *)(v45 + 5);
      }
      uint64_t v55 = (void **)v46;
      MEMORY[0x192FEFDC0](&__p[1]);
      MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v57);
      if (SHIBYTE(v58[2]) < 0) {
        operator delete(v58[0]);
      }
    }
    MIL::Matching::MatchView::GetAttributes((MIL::Matching::MatchView *)v51);
    MIL::Transform::MatchContext::AddOperation();
    MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)__p);
    uint64_t v47 = (void **)v54;
    if (v54)
    {
      char v48 = v55;
      uint64_t v49 = v54;
      if (v55 != v54)
      {
        do
        {
          unint64_t v50 = v48 - 5;
          MEMORY[0x192FEFDC0](v48 - 4);
          char v48 = v50;
        }
        while (v50 != v47);
        uint64_t v49 = v54;
      }
      uint64_t v55 = v47;
      operator delete(v49);
    }
    goto LABEL_42;
  }
LABEL_4:
  MIL::Transform::MatchContext::RejectMatch(a2);
LABEL_31:
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)v51);
}

void sub_1924A9CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char *a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,void *a28)
{
  MEMORY[0x192FEFDC0](v28);
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)&a17);
  if (a24 < 0) {
    operator delete(__p);
  }
  uint64_t v31 = a14;
  if (a14)
  {
    uint64_t v32 = a15;
    uint64_t v33 = a14;
    if (a15 != a14)
    {
      do
      {
        size_t v34 = v32 - 40;
        MEMORY[0x192FEFDC0](v32 - 32);
        uint64_t v32 = v34;
      }
      while (v34 != v31);
      uint64_t v33 = a14;
    }
    a15 = v31;
    operator delete(v33);
  }
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v29 - 104));
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v29 - 88));
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a11);
  _Unwind_Resume(a1);
}

void sub_1924A9F3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void sub_1924A9F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)va);
  JUMPOUT(0x1924A9F9CLL);
}

uint64_t std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT25ReplaceGatherNDWithGatherERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_tr"
                     "aitsIcEENS5_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT25ReplaceGatherNDWithGatherERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS"
                                "5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT25ReplaceGatherNDWithGatherERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT25ReplaceGatherNDWithGatherERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

char *std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>(char **a1, void *a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3) + 1;
  if (v4 > 0x666666666666666) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v18 = &v7[8 * (v3 >> 3)];
  *((void *)&v19 + 1) = &v7[40 * v6];
  *(void *)uint64_t v18 = *a2;
  MEMORY[0x192FEFD80](&v7[v3 + 8], a2 + 1);
  uint64_t v9 = *a1;
  float v8 = a1[1];
  for (uint64_t i = 48; ; i -= 40)
  {
    char v11 = &v18[i];
    uint64_t v12 = &v8[i];
    if (&v8[i - 48] == v9) {
      break;
    }
    *((void *)v11 - 11) = *((void *)v12 - 11);
    MEMORY[0x192FEFDA0](v11 - 80, v12 - 80);
  }
  char v13 = v11 - 48;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  *a1 = v13;
  *(void *)&long long v19 = v18 + 40;
  *(_OWORD *)(a1 + 1) = v19;
  if (v14 != v15)
  {
    do
    {
      uint64_t v16 = v14 - 40;
      MEMORY[0x192FEFDC0](v14 - 32);
      uint64_t v14 = v16;
    }
    while (v16 != v15);
  }
  if (v15) {
    operator delete(v15);
  }
  return v18 + 40;
}

void sub_1924AA1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    MEMORY[0x192FEFDC0](i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v18 = operator new(0x28uLL);
  uint64_t v14 = v18;
  *uint64_t v18 = 0;
  v18[1] = v10;
  long long v19 = *a4;
  v18[2] = **a4;
  uint64_t v20 = v19[1];
  v18[3] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  v18[4] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_28:
      *uint64_t v14 = *v24;
LABEL_63:
      *unint64_t v24 = v14;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v33 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v33 & v10;
      uint64_t v23 = *(void *)a1;
      unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v33 & v10));
      if (v24) {
        goto LABEL_28;
      }
    }
  }
  *uint64_t v14 = *v17;
  *uint64_t v17 = v14;
  *(void *)(v23 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11) {
        v34 %= v11;
      }
    }
    else
    {
      v34 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924AA5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      char v13 = (void *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            char v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          char v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  uint64_t v17 = operator new(0x18uLL);
  *uint64_t v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    float v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *uint64_t v17 = *v21;
LABEL_61:
      *float v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_37;
    }
    if (prime < v10)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v10) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        float v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        float v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v20 = *(void *)a1;
      float v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    unint64_t v30 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    float v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_1924AA92C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_0(void **a1)
{
}

uint64_t OUTLINED_FUNCTION_5_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Espresso::AOT::CreateMILAOTContext(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void Espresso::AOT::GetAllOpInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(a1, a2);
  if (!v7)
  {
    unint64_t v8 = v6;
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 24;
    }
    while (v4 != v2);
    uint64_t v5 = *v8;
  }
  *unint64_t v3 = v2;
  operator delete(v5);
}

void Espresso::AOT::AlignCalleeWithCallOp(char *__p, void **a2)
{
  if (__p[39] < 0) {
    operator delete(*a2);
  }
  operator delete(__p);
}

void std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)OUTLINED_FUNCTION_1_1(a1, a2);
  if (!v7)
  {
    unint64_t v8 = v6;
    do
    {
      unint64_t v9 = *(std::__shared_weak_count **)(v4 - 8);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v10 = OUTLINED_FUNCTION_4();
        v11(v10);
        std::__shared_weak_count::__release_weak(v9);
      }
      v4 -= 16;
    }
    while (v4 != v2);
    uint64_t v5 = *v8;
  }
  *unint64_t v3 = v2;

  operator delete(v5);
}

void std::vector<std::string>::vector(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(a1, a2);
  if (!v7)
  {
    unint64_t v8 = v6;
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 24;
    }
    while (v4 != v2);
    uint64_t v5 = *v8;
  }
  *unint64_t v3 = v2;

  operator delete(v5);
}

void Espresso::AOT::CoalesceOpsWithConsumers(std::__shared_weak_count *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v8 + 16))();
    std::__shared_weak_count::__release_weak(a1);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

void std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100](void **a1)
{
  if (*((char *)a1 + 23) < 0) {
    OUTLINED_FUNCTION_3_0(a1);
  }
}

uint64_t std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
}

void std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, char *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = a2;
  if (v4 != a2)
  {
    do
    {
      uint64_t v6 = v4 - 40;
      MEMORY[0x192FEFDC0](v4 - 32);
      uint64_t v4 = v6;
    }
    while (v6 != a2);
    uint64_t v5 = *(void **)a1;
  }
  *(void *)(a1 + 8) = a2;
  operator delete(v5);
}

void *std::function<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<MIL::ValidationResult ()(MIL::IROperation const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<std::string ()(MIL::IROperation const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void ***std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = (char *)*v2;
    if (*v2)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          v4 -= 16;
        }
        while (v4 != v3);
        uint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x192FF16B0](v2, 0x20C40960023A9);
  }
  return a1;
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE379CA8;
  return result;
}

uint64_t std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_trait"
                     "sIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_1"
                                "1char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE379D00;
  return result;
}

uint64_t std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_trait"
                     "sIcEENS6_9allocatorIcEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_1"
                                "1char_traitsIcEENS6_9allocatorIcEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC09CCLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC09CCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC09CCLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC09CCLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC0AECLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC0AECLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC0AECLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC0AECLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t E5AOT::Operators::E5ML_ios16::Call::Make()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t E5AOT::Operators::E5ML_ios16::Transfer::Make()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Espresso::AOT::Validators::AneValidator::AneValidator(uint64_t a1, _OWORD *a2, long long *a3, char a4)
{
  uint64_t v8 = Espresso::AOT::AbstractValidator::AbstractValidator((void *)a1);
  *uint64_t v8 = &unk_1EE36AE80;
  *(_OWORD *)(v8 + 1) = *a2;
  unint64_t v9 = (std::string *)(v8 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(unsigned char *)(a1 + 48) = a4;
  return a1;
}

{
  void *v8;
  std::string *v9;
  long long v10;

  uint64_t v8 = Espresso::AOT::AbstractValidator::AbstractValidator((void *)a1);
  *uint64_t v8 = &unk_1EE36AE80;
  *(_OWORD *)(v8 + 1) = *a2;
  unint64_t v9 = (std::string *)(v8 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(unsigned char *)(a1 + 48) = a4;
  return a1;
}

void sub_1924AB268(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  Espresso::AOT::AbstractValidator::~AbstractValidator(v1);
  _Unwind_Resume(a1);
}

void sub_1924AB328(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  Espresso::AOT::AbstractValidator::~AbstractValidator(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::AneValidator::Validate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t Function = MIL::IRProgram::GetFunction();
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 32))(Function);
    uint64_t v9 = v8;
    int v10 = *(char *)(v8 + 23);
    uint64_t v11 = *(void *)v8;
    if (v10 >= 0) {
      size_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      size_t v12 = *(void *)(v8 + 8);
    }
    Opsetuint64_t Name = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName((MIL::Opsets::Train::ios16Train::ios16_trainOpset *)v8);
    if (v12 == v14)
    {
      uint64_t v15 = (const void *)OpsetName;
      uint64_t v16 = (const void *)(v10 >= 0 ? v9 : v11);
      if (!memcmp(v16, v15, v12))
      {
        memset(&v49, 0, sizeof(v49));
        std::string __p = 0;
        *(void *)char v45 = 0;
        uint64_t v46 = 0;
        operator new();
      }
    }
    unint64_t v17 = ANEGetValidateNetworkSupportedVersion();
    id v18 = [MEMORY[0x1E4F4E038] aneSubType];
    float v19 = (const char *)[v18 UTF8String];
    size_t v20 = strlen(v19);
    if (v20 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v21 = v20;
    if (v20 >= 0x17)
    {
      uint64_t v38 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v38 = v20 | 7;
      }
      uint64_t v39 = v38 + 1;
      BOOL v22 = (uint64_t *)operator new(v38 + 1);
      __dst[1] = v21;
      unint64_t v48 = v39 | 0x8000000000000000;
      __dst[0] = (uint64_t)v22;
    }
    else
    {
      HIBYTE(v48) = v20;
      BOOL v22 = __dst;
      if (!v20)
      {
LABEL_38:
        *((unsigned char *)v22 + v21) = 0;

        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],std::string const&,0>(&v49, "scratchPadPath", (long long *)(a1 + 24));
        std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&__p, (uint64_t)&v49, 1);
        Espresso::AOT::Utils::MakeValidationInput(v17, a2, a3, __dst, (uint64_t)&__p);
        objc_claimAutoreleasedReturnValue();
        uint64_t v40 = v46;
        if (!v46)
        {
LABEL_45:
          unint64_t v42 = __p;
          std::string __p = 0;
          if (v42) {
            operator delete(v42);
          }
          if (v51 < 0)
          {
            operator delete(v50);
            if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_49;
            }
          }
          else if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_49;
          }
          operator delete(v49.__r_.__value_.__l.__data_);
LABEL_49:
          uint64_t v43 = (void *)ANEValidateNetworkCreate();
          Espresso::AOT::Utils::ParseValidationOutput(v17, v43);
        }
        while (1)
        {
          unint64_t v41 = *(char **)v40;
          if (v40[63] < 0)
          {
            operator delete(*((void **)v40 + 5));
            if ((v40[39] & 0x80000000) == 0) {
              goto LABEL_41;
            }
LABEL_44:
            operator delete(*((void **)v40 + 2));
            operator delete(v40);
            uint64_t v40 = v41;
            if (!v41) {
              goto LABEL_45;
            }
          }
          else
          {
            if (v40[39] < 0) {
              goto LABEL_44;
            }
LABEL_41:
            operator delete(v40);
            uint64_t v40 = v41;
            if (!v41) {
              goto LABEL_45;
            }
          }
        }
      }
    }
    memmove(v22, v19, v21);
    goto LABEL_38;
  }
  uint64_t v23 = MIL::IRProgram::GetFunction();
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 32))(v23);
  uint64_t v25 = v24;
  int v26 = *(char *)(v24 + 23);
  uint64_t v27 = *(void *)v24;
  if (v26 >= 0) {
    size_t v28 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    size_t v28 = *(void *)(v24 + 8);
  }
  uint64_t v29 = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName((MIL::Opsets::Train::ios16Train::ios16_trainOpset *)v24);
  if (v28 == v30)
  {
    uint8x8_t v31 = (const void *)v29;
    uint64_t v32 = (const void *)(v26 >= 0 ? v25 : v27);
    if (!memcmp(v32, v31, v28))
    {
      memset(&v49, 0, sizeof(v49));
      std::string __p = 0;
      *(void *)char v45 = 0;
      uint64_t v46 = 0;
      operator new();
    }
  }
  unint64_t v33 = ANECGetValidateNetworkSupportedVersion();
  Espresso::AOT::GetANENameForE5Platform(a1 + 8, __dst);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],std::string const&,0>(&v49, "scratchPadPath", (long long *)(a1 + 24));
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&__p, (uint64_t)&v49, 1);
  Espresso::AOT::Utils::MakeValidationInput(v33, a2, a3, __dst, (uint64_t)&__p);
  objc_claimAutoreleasedReturnValue();
  unint64_t v34 = v46;
  if (!v46)
  {
LABEL_29:
    BOOL v36 = __p;
    std::string __p = 0;
    if (v36) {
      operator delete(v36);
    }
    if (v51 < 0)
    {
      operator delete(v50);
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v49.__r_.__value_.__l.__data_);
LABEL_33:
    int8x8_t v37 = (void *)ANECValidateNetworkCreate();
    Espresso::AOT::Utils::ParseValidationOutput(v33, v37);
  }
  while (1)
  {
    unint64_t v35 = *(char **)v34;
    if (v34[63] < 0)
    {
      operator delete(*((void **)v34 + 5));
      if ((v34[39] & 0x80000000) == 0) {
        goto LABEL_25;
      }
LABEL_28:
      operator delete(*((void **)v34 + 2));
      operator delete(v34);
      unint64_t v34 = v35;
      if (!v35) {
        goto LABEL_29;
      }
    }
    else
    {
      if (v34[39] < 0) {
        goto LABEL_28;
      }
LABEL_25:
      operator delete(v34);
      unint64_t v34 = v35;
      if (!v35) {
        goto LABEL_29;
      }
    }
  }
}

void sub_1924ABA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22)
{
  MEMORY[0x192FF16B0](v23, 0x10B1C40E94733EDLL);
  std::vector<Espresso::AOT::ValidationMessage>::~vector[abi:ne180100](&a10);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
    *BOOL v22 = 0;
    _Unwind_Resume(a1);
  }
  *BOOL v22 = 0;
  _Unwind_Resume(a1);
}

void sub_1924ABC8C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void **std::vector<Espresso::AOT::ValidationMessage>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void Espresso::AOT::Validators::AneValidator::~AneValidator(void **this)
{
  *this = &unk_1EE36AE80;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));

  Espresso::AOT::AbstractValidator::~AbstractValidator((Espresso::AOT::AbstractValidator *)this);
}

{
  uint64_t vars8;

  *this = &unk_1EE36AE80;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  Espresso::AOT::AbstractValidator::~AbstractValidator((Espresso::AOT::AbstractValidator *)this);

  JUMPOUT(0x192FF16B0);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],std::string const&,0>(std::string *a1, char *__s, long long *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v8 = operator new(v12 + 1);
    a1->__r_.__value_.__l.__size_ = v7;
    a1->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    a1->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    uint64_t v9 = a1 + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  *((unsigned char *)&a1->__r_.__value_.__s + 23) = v6;
  uint64_t v8 = a1;
  if (v6) {
    goto LABEL_9;
  }
  a1->__r_.__value_.__s.__data_[0] = 0;
  uint64_t v9 = a1 + 1;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_5:
    long long v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    return a1;
  }
LABEL_10:
  std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  return a1;
}

void sub_1924ABF30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ***std::__exception_guard_exceptions<std::vector<Espresso::AOT::ValidationMessage>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  uint64_t v11 = __src;
  uint64_t v13 = v7 >> 3;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v20 = v18;
      size_t v21 = operator new(8 * v18);
      unint64_t v18 = v20;
      uint64_t v8 = (char *)v19;
      uint64_t v13 = v7 >> 3;
      uint64_t v11 = __src;
    }
    else
    {
      size_t v21 = 0;
    }
    uint64_t v43 = &v21[8 * v13];
    unint64_t v44 = &v43[8 * a5];
    char v45 = v43;
    uint64_t v46 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_57;
    }
    char v45 = &v21[8 * v13];
    uint64_t v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v47 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    char v45 = &v43[v48];
    uint64_t v46 = &v11[v48];
    std::string v49 = (long long *)(v11 + 16);
    unint64_t v50 = &v21[8 * v13 + 16];
    uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *unint64_t v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        uint64_t v53 = *(void *)v46;
        v46 += 8;
        *(void *)char v45 = v53;
        v45 += 8;
      }
      while (v45 != v44);
    }
    uint64_t v54 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      uint64_t v55 = v8;
      uint64_t v54 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68) {
        goto LABEL_58;
      }
      uint64_t v55 = v8;
      uint64_t v54 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
        goto LABEL_58;
      }
      unint64_t v56 = ((unint64_t)(v7 - 8) >> 3) + 1;
      uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v55 = &v8[-v57];
      uint64_t v54 = &v43[-v57];
      uint64_t v58 = 8 * v13 - 16;
      uint64_t v59 = &v21[v58];
      long long v60 = (long long *)(v6 + v58);
      uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        _OWORD *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          uint64_t v63 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v54 - 1) = v63;
          v54 -= 8;
        }
        while (v55 != (char *)v6);
      }
    }
    long long v64 = &v21[8 * v18];
    size_t v65 = v15 - (void)v8;
    if (v65) {
      memmove(&v43[8 * a5], v8, v65);
    }
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6) {
      operator delete((void *)v6);
    }
    return v43;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 3;
  if (v23 >= a5)
  {
    uint64_t v24 = &__src[8 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    uint64_t v24 = &__src[8 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      uint64_t v13 = v7 >> 3;
      uint64_t v8 = (char *)v70;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  uint64_t v27 = &v8[8 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 3;
  uint64_t v30 = (uint64_t *)(v26 - 8 * a5);
  uint8x8_t v31 = (void *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    unint64_t v33 = (char *)(v32 + v6);
    unint64_t v34 = v32 + v6 + 8;
    if (v15 > v34) {
      unint64_t v34 = v15;
    }
    unint64_t v35 = v34 + ~v6 - v32;
    if (v35 < 0x58)
    {
      uint8x8_t v31 = (void *)v26;
    }
    else
    {
      unint64_t v36 = v26 - (void)v33;
      uint8x8_t v31 = (void *)v26;
      if (v36 >= 0x20)
      {
        uint64_t v37 = (v35 >> 3) + 1;
        uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v30 = (uint64_t *)((char *)v30 + v38);
        uint8x8_t v31 = (void *)(v26 + v38);
        uint64_t v39 = (_OWORD *)(v26 + 16);
        uint64_t v40 = (long long *)(8 * v29 + 8 * v13 + v6 + 16);
        uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *uint64_t v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      uint64_t v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    int v67 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    uint64_t v8 = v67;
  }
  if (v24 != v11)
  {
    uint64_t v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

void std::unordered_map<std::string,std::string>::unordered_map(void **__p)
{
  do
  {
    uint64_t v2 = (void **)*__p;
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
    operator delete(__p);
    std::string __p = v2;
  }
  while (v2);
}

uint64_t *Espresso::AOT::BackendRegistry::CheckAndGetBackend(void *a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, a2);
  if (!v3)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    uint64_t v6 = v5;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Backend %s is not registered", &v6);
  }
  return v3 + 5;
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>(char *a1, void *a2)
{
}

void anonymous namespace'::LogValidationResultAndThrow(void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v5 = Espresso::espresso_os_log_subsystem(0, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = [NSString stringWithFormat:@"Validation result:\n%@", v3];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v9 = [v6 UTF8String];
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v7 = (const char *)a2;
  }
  else {
    uint64_t v7 = *(const char **)a2;
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>(v7);
}

void sub_1924AC524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::AOT::ValidationMessage>::__push_back_slow_path<Espresso::AOT::ValidationMessage>(char **a1, uint64_t a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = (v3 >> 5) + 1;
  if (v4 >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(32 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[32 * (v3 >> 5)];
  *(void *)uint64_t v9 = *(void *)a2;
  uint64_t v10 = v9 + 32;
  uint64_t v11 = &v8[32 * v7];
  uint64_t v12 = &v8[v3];
  *((void *)v12 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    if (!v14) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    uint64_t v15 = *((void *)v14 - 4);
    v14 -= 32;
    *((void *)v9 - 4) = v15;
    v9 -= 32;
    long long v16 = *(_OWORD *)(v14 + 8);
    *((void *)v9 + 3) = *((void *)v14 + 3);
    *(_OWORD *)(v9 + 8) = v16;
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 1) = 0;
  }
  while (v14 != v13);
  uint64_t v17 = *a1;
  unint64_t v14 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v11;
  if (v14 != v17)
  {
    do
    {
      if (*(v14 - 1) < 0) {
        operator delete(*((void **)v14 - 3));
      }
      v14 -= 32;
    }
    while (v14 != v17);
    unint64_t v14 = v17;
  }
  if (v14) {
LABEL_20:
  }
    operator delete(v14);
  return v10;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned long>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  unint64_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    long long v16 = &v15[8 * v11];
    *long long v16 = *a2;
    uint64_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v7 = &v6[-v19];
      long long v16 = (void *)((char *)v16 - v19);
      unint64_t v20 = &v15[8 * v11 - 16];
      size_t v21 = v6 - 16;
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *unint64_t v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--long long v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v6 = *a2;
    uint64_t v8 = v6 + 8;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

void Espresso::AOT::Utils::ParseValidationOutput(uint64_t *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl(&dword_1920CB000, a2, OS_LOG_TYPE_DEBUG, "Unsupported function: %s", (uint8_t *)&v3, 0xCu);
}

MIL::IROpset **std::unique_ptr<E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset>::~unique_ptr[abi:ne180100](MIL::IROpset **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::IROpset::~IROpset(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

const char *E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this)
{
  return "E5RT_ios16";
}

const char *E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetName(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this)
{
  return "E5RT_ios16";
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC0D15) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC0D15 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC0D15)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC0D15 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::Register()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

float Espresso::AOT::DTrees::mulAneFp()
{
  return 43.0;
}

float Espresso::AOT::DTrees::mulAneIp()
{
  return 41.0;
}

float Espresso::AOT::DTrees::mulAneJp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::mulAneKp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::mulAneGp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::mulAneHp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::mulCpuFp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuJp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuKp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuGp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuHp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulGpuFp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::mulGpuIp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::mulGpuJp()
{
  return 110.0;
}

float Espresso::AOT::DTrees::mulGpuKp()
{
  return 55.0;
}

float Espresso::AOT::DTrees::mulGpuGp()
{
  return 100.0;
}

float Espresso::AOT::DTrees::mulGpuHp()
{
  return 55.0;
}

float Espresso::AOT::DTrees::mulAneCp()
{
  return 80.0;
}

float Espresso::AOT::DTrees::mulAneDp()
{
  return 80.0;
}

float Espresso::AOT::DTrees::mulAneEp()
{
  return 80.0;
}

float Espresso::AOT::DTrees::mulCpuCp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::mulCpuDp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::mulGpuCp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulGpuDp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulGpuEp()
{
  return 10.0;
}

uint64_t Espresso::AOT::MemOptimizer::operator|(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t Espresso::AOT::MemOptimizer::operator&(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

void Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE36B070;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x192FF16B0](v2, 0x1060C40DA1CAF76);
  }
}

void Espresso::AOT::MemOptimizer::Optimizer::Optimizer(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  *(void *)this = &unk_1EE36B070;
  *((void *)this + 1) = 0;
  operator new();
}

void sub_1924ACC24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    MEMORY[0x192FF16B0](v3, 0x1060C40DA1CAF76);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::SetOptimizationMode(uint64_t result, int a2)
{
  *(unsigned char *)(*(void *)(result + 8) + 8) = a2;
  if (a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported optimization mode");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  return result;
}

void sub_1924ACCC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::GetOptimizationMode(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 8);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::SetOptimizationAlgos(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 16) = a2;
  if (a2 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported optimization algo(s)");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  return result;
}

void sub_1924ACD48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::GetOptimizationAlgos(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  return *(void *)(*((void *)this + 1) + 16);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::SetAllocAlignment(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 8) + 24) = a2;
  if (!a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid alloc alignment");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  return this;
}

void sub_1924ACDC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::GetAllocAlignment(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::SetMaxAllocSize(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 8) + 32) = a2;
  return this;
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::GetMaxAllocSize(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  return *(void *)(*((void *)this + 1) + 32);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::Run@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return kdebug_trace();
}

void sub_1924ACE98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::Optimizer::Impl::Run(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported optimization mode");
    goto LABEL_17;
  }
  if (*(void *)(a1 + 16) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported optimization algo(s)");
    goto LABEL_17;
  }
  if (!*(void *)(a1 + 24))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid alloc alignment");
LABEL_17:
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  Espresso::AOT::MemOptimizer::Optimizer::Impl::ValidateEntryPoints((void *)a1, a2);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v6 = (long long *)*a2;
  unint64_t v7 = (long long *)a2[1];
  if ((long long *)*a2 != v7)
  {
    do
    {
      Espresso::AOT::MemOptimizer::Optimizer::Impl::GetOptimizedAllocInfo((Espresso::AOT::MemOptimizer::Optimizer::Impl *)a1, (uint64_t)__p);
      unint64_t v14 = v6;
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (uint64_t)v6, (uint64_t)&std::piecewise_construct, &v14);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)(v8 + 5), (uint64_t *)__p);
      uint64_t v9 = (void **)__p[2];
      v8[10] = (uint64_t)__p[5];
      if (v9)
      {
        do
        {
          uint64_t v11 = (void **)*v9;
          if (*((char *)v9 + 39) < 0) {
            operator delete(v9[2]);
          }
          operator delete(v9);
          uint64_t v9 = v11;
        }
        while (v11);
      }
      uint64_t v10 = __p[0];
      __p[0] = 0;
      if (v10) {
        operator delete(v10);
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
}

void sub_1924AD044(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924AD058(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924AD06C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924AD080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void sub_1924AD09C(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::Optimizer::Impl::ValidateEntryPoints(void *a1, uint64_t *a2)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3 == *a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Empty entry points list");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_192DAA350;
  strcpy(v25.__r_.__value_.__l.__data_, "Invalid entry point(s): ");
  char v5 = 1;
  do
  {
    if (((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16))(*a1, v2) & 1) == 0)
    {
      if (v5)
      {
        int v6 = *(char *)(v2 + 23);
        if (v6 >= 0) {
          unint64_t v7 = (const std::string::value_type *)v2;
        }
        else {
          unint64_t v7 = *(const std::string::value_type **)v2;
        }
        if (v6 >= 0) {
          std::string::size_type v8 = *(unsigned __int8 *)(v2 + 23);
        }
        else {
          std::string::size_type v8 = *(void *)(v2 + 8);
        }
        std::string::append(&v25, v7, v8);
LABEL_10:
        char v5 = 0;
        goto LABEL_11;
      }
      int v9 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v25.__r_.__value_.__l.__size_;
      }
      unint64_t v11 = size + 2;
      if (size + 2 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v11 >= 0x17)
      {
        uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v13 = v11 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_dst = (std::string *)operator new(v13 + 1);
        __dst.__r_.__value_.__l.__size_ = size + 2;
        __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 2;
        if (!size)
        {
LABEL_28:
          strcpy((char *)p_dst + size, ", ");
          int v16 = *(char *)(v2 + 23);
          if (v16 >= 0) {
            unint64_t v17 = (const std::string::value_type *)v2;
          }
          else {
            unint64_t v17 = *(const std::string::value_type **)v2;
          }
          if (v16 >= 0) {
            std::string::size_type v18 = *(unsigned __int8 *)(v2 + 23);
          }
          else {
            std::string::size_type v18 = *(void *)(v2 + 8);
          }
          uint64_t v19 = std::string::append(&__dst, v17, v18);
          std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
          v26[0] = v19->__r_.__value_.__l.__size_;
          *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
          char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
          v25.__r_.__value_.__r.__words[0] = v20;
          v25.__r_.__value_.__l.__size_ = v26[0];
          *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v26 + 7);
          *((unsigned char *)&v25.__r_.__value_.__s + 23) = v21;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          goto LABEL_10;
        }
      }
      if (v9 >= 0) {
        uint64_t v15 = &v25;
      }
      else {
        uint64_t v15 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      memmove(p_dst, v15, size);
      goto LABEL_28;
    }
LABEL_11:
    v2 += 24;
  }
  while (v2 != v3);
  if ((v5 & 1) == 0)
  {
    long long v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, &v25);
    v23->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v23, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1924AD3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const Espresso::AOT::MemOptimizer::InterferenceGraph *Espresso::AOT::MemOptimizer::Optimizer::Impl::GetOptimizedAllocInfo@<X0>(Espresso::AOT::MemOptimizer::Optimizer::Impl *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  (*(void (**)(const Espresso::AOT::MemOptimizer::InterferenceGraph **__return_ptr))(**(void **)a1 + 24))(&v10);
  if (*((unsigned char *)a1 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported optimization mode encountered post mode validation");
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  Espresso::AOT::MemOptimizer::Optimizer::Impl::OptimizeAllocMinMemory(a1, v10, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(a2, (uint64_t *)__p);
  uint64_t v4 = (void **)__p[2];
  *(void **)(a2 + 40) = __p[5];
  if (v4)
  {
    do
    {
      unint64_t v7 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      uint64_t v4 = v7;
    }
    while (v7);
  }
  char v5 = __p[0];
  __p[0] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (const Espresso::AOT::MemOptimizer::InterferenceGraph *)(*(uint64_t (**)(const Espresso::AOT::MemOptimizer::InterferenceGraph *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1924AD56C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 40);
  *(void *)(v2 - 40) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::Optimizer::Impl::OptimizeAllocMinMemory(Espresso::AOT::MemOptimizer::Optimizer::Impl *this@<X0>, const Espresso::AOT::MemOptimizer::InterferenceGraph *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if ((*((unsigned char *)this + 16) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported optimization algo encountered post algo validation");
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  Espresso::AOT::MemOptimizer::Algorithms::DSatur::DSatur((Espresso::AOT::MemOptimizer::Algorithms::DSatur *)&v22, a2, *((void *)this + 3));
  Espresso::AOT::MemOptimizer::Algorithms::DSatur::Optimize((Espresso::AOT::MemOptimizer::Algorithms::DSatur *)&v22, (uint64_t)&v23);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(a3, (uint64_t *)&v23);
  char v5 = (void **)v23.__r_.__value_.__r.__words[2];
  *(void *)(a3 + 40) = v24;
  if (v5)
  {
    do
    {
      std::string::size_type v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      char v5 = v8;
    }
    while (v8);
  }
  int v6 = (void *)v23.__r_.__value_.__r.__words[0];
  v23.__r_.__value_.__r.__words[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  Espresso::AOT::MemOptimizer::Algorithms::DSatur::~DSatur((Espresso::AOT::MemOptimizer::Algorithms::DSatur *)&v22);
  unint64_t v7 = *((void *)this + 4);
  if (v7 && *(void *)(a3 + 40) > v7)
  {
    uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v20, *(void *)(a3 + 40));
    unint64_t v11 = std::string::insert(&v20, 0, "Optimized alloc size ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = std::string::append(&v21, " is higher than max allowed ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v19, *((void *)this + 4));
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v19;
    }
    else {
      uint64_t v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v19.__r_.__value_.__l.__size_;
    }
    unint64_t v17 = std::string::append(&v23, (const std::string::value_type *)v15, size);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v10, &v22);
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_1924AD7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if (a14 < 0)
    {
LABEL_5:
      operator delete(a9);
      if (*(char *)(v36 - 57) < 0)
      {
LABEL_8:
        operator delete(*(void **)(v36 - 80));
        if (a26 < 0)
        {
LABEL_11:
          operator delete(a21);
          if ((a20 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_15;
        }
LABEL_14:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_12:
          if (!v35)
          {
LABEL_17:
            std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v33);
            _Unwind_Resume(a1);
          }
LABEL_16:
          __cxa_free_exception(v34);
          std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v33);
          _Unwind_Resume(a1);
        }
LABEL_15:
        operator delete(a15);
        if ((v35 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
LABEL_10:
      if (a26 < 0) {
        goto LABEL_11;
      }
      goto LABEL_14;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v36 - 57) < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          int v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                unint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    unint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              std::string v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (int j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  std::string v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  size_t v28 = (char *)operator new(0x58uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)size_t v28 = 0;
  *((void *)v28 + 1) = v11;
  uint64_t v29 = (std::string *)(v28 + 16);
  uint64_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    *((void *)v28 + 4) = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  *(_OWORD *)(v28 + 72) = 0u;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *((_DWORD *)v28 + 18) = 1065353216;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        int v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        int v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      int v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  int v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *int v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1924ADD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1924ADD90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    unint64_t v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        char v16 = (void **)*v4;
        if (*((char *)v4 + 39) < 0) {
          operator delete(v4[2]);
        }
        operator delete(v4);
        unint64_t v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  unint64_t v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  unint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    void *v10 = 0;
    v10[1] = 0;
  }
}

float Espresso::AOT::DTrees::addAneFp()
{
  return 35.981;
}

float Espresso::AOT::DTrees::addAneIp()
{
  return 32.949;
}

float Espresso::AOT::DTrees::addAneKp()
{
  return 29.763;
}

float Espresso::AOT::DTrees::addAneGp()
{
  return 26.545;
}

float Espresso::AOT::DTrees::addAneHp()
{
  return 32.826;
}

float Espresso::AOT::DTrees::addCpuFp()
{
  return 18.364;
}

float Espresso::AOT::DTrees::addCpuIp()
{
  return 12.654;
}

float Espresso::AOT::DTrees::addCpuKp()
{
  return 15.998;
}

float Espresso::AOT::DTrees::addCpuGp()
{
  return 17.746;
}

float Espresso::AOT::DTrees::addCpuHp()
{
  return 14.539;
}

float Espresso::AOT::DTrees::addGpuFp()
{
  return 27.417;
}

float Espresso::AOT::DTrees::addGpuIp()
{
  return 20.415;
}

float Espresso::AOT::DTrees::addAneJp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::addCpuJp()
{
  return 15.0;
}

float Espresso::AOT::DTrees::addGpuJp()
{
  return 90.0;
}

float Espresso::AOT::DTrees::addGpuKp()
{
  return 54.822;
}

float Espresso::AOT::DTrees::addGpuGp()
{
  return 55.045;
}

float Espresso::AOT::DTrees::addGpuHp()
{
  return 100.5;
}

float Espresso::AOT::DTrees::addAneCp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::addAneDp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::addAneEp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::addCpuCp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::addCpuDp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::addGpuCp()
{
  return 13.0;
}

float Espresso::AOT::DTrees::addGpuDp()
{
  return 13.0;
}

float Espresso::AOT::DTrees::addGpuEp()
{
  return 13.0;
}

float Espresso::AOT::DTrees::transposeAneFp(uint64_t a1)
{
  float result = 34.437;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 22.857;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeAneIp(uint64_t a1)
{
  float result = 31.021;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 17.559;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeAneJp(uint64_t a1)
{
  float result = 30.978;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 14.41;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeAneKp(uint64_t a1)
{
  float result = 30.375;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 14.459;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeAneGp(uint64_t a1)
{
  float result = 20.63;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 13.592;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeAneHp(uint64_t a1)
{
  float result = 19.565;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 13.617;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeCpuFp(uint64_t a1)
{
  float result = 38.03;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 1.6305;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeCpuIp(uint64_t a1)
{
  float result = 25.358;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 1.0019;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeCpuJp(uint64_t a1)
{
  float result = 2.0949;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 1.1068;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeCpuKp(uint64_t a1)
{
  float result = 2.0949;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 1.1046;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeCpuGp(uint64_t a1)
{
  float result = 2.0949;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 1.0077;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeCpuHp(uint64_t a1)
{
  float result = 2.0949;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 1.0597;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeGpuFp(uint64_t a1)
{
  float result = 54.785;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 16.308;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeGpuIp(uint64_t a1)
{
  float result = 35.386;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 15.807;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeGpuJp(uint64_t a1)
{
  float result = 2.6146;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 20.54;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeGpuKp(uint64_t a1)
{
  float result = 2.0038;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 11.977;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeGpuGp(uint64_t a1)
{
  float result = 4.1833;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 26.228;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeGpuHp(uint64_t a1)
{
  float result = 4.1833;
  if (*(double *)(a1 + 32) > 0.16393) {
    return 20.228;
  }
  return result;
}

float Espresso::AOT::DTrees::transposeAneCp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::transposeAneDp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::transposeAneEp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::transposeCpuCp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::transposeCpuDp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::transposeGpuCp()
{
  return 9.0;
}

float Espresso::AOT::DTrees::transposeGpuDp()
{
  return 9.0;
}

float Espresso::AOT::DTrees::transposeGpuEp()
{
  return 9.0;
}

double Espresso::AOT::Backends::CostModel::GetMAC(uint64_t a1, uint64_t a2, Espresso::AOT *a3, uint64_t *a4)
{
  unint64_t v70 = 0;
  uint64_t v71 = 0;
  unint64_t v69 = &v70;
  char v66 = 2;
  strcpy((char *)&__p, "->");
  E5Common::StringUtils::Split(a4, (char *)&__p, (uint64_t)&v67);
  if (v66 < 0)
  {
    operator delete(__p);
    uint64_t v7 = (uint64_t *)v67;
    double NumElementsSkipUnknownDims = 0.0;
    if ((char *)v68 - (unsigned char *)v67 != 48)
    {
LABEL_3:
      if (!v7) {
        goto LABEL_119;
      }
      goto LABEL_112;
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)v67;
    double NumElementsSkipUnknownDims = 0.0;
    if ((char *)v68 - (unsigned char *)v67 != 48) {
      goto LABEL_3;
    }
  }
  *((unsigned char *)&v63.__r_.__value_.__s + 23) = 1;
  LOWORD(v63.__r_.__value_.__l.__data_) = 44;
  E5Common::StringUtils::Split(v7, (char *)&v63, (uint64_t)&__p);
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v9 = (void **)__p;
    if ((char *)v65 - (unsigned char *)__p != 48) {
      goto LABEL_8;
    }
LABEL_12:
    if (*((char *)v9 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)v9[3], (std::string::size_type)v9[4]);
    }
    else {
      std::string v63 = *(std::string *)((unsigned char *)v9 + 1);
    }
    if (*((char *)v67 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v62, *((const std::string::value_type **)v67 + 3), *((void *)v67 + 4));
    }
    else {
      std::string v62 = *(std::string *)((unsigned char *)v67 + 1);
    }
    long long v60 = 0;
    uint64_t v61 = 0;
    uint64_t v59 = &v60;
    if (*((char *)v9 + 23) < 0)
    {
      uint64_t v11 = (char *)*v9;
      unint64_t v10 = (char *)v9[1];
      if (!v10) {
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (char *)*((unsigned __int8 *)v9 + 23);
      uint64_t v11 = (char *)v9;
      if (!*((unsigned char *)v9 + 23)) {
        goto LABEL_22;
      }
    }
    do
    {
      unint64_t v45 = std::__tree<char>::__find_equal<char>(&v59, (uint64_t *)&v60, v73, &v72, v11);
      if (!*v45)
      {
        uint64_t v46 = operator new(0x20uLL);
        v46[25] = *v11;
        uint64_t v47 = v73[0];
        *(void *)uint64_t v46 = 0;
        *((void *)v46 + 1) = 0;
        *((void *)v46 + 2) = v47;
        *unint64_t v45 = (uint64_t)v46;
        if (*v59)
        {
          uint64_t v59 = (uint64_t **)*v59;
          uint64_t v46 = (unsigned char *)*v45;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v46);
        ++v61;
      }
      ++v11;
      --v10;
    }
    while (v10);
LABEL_22:
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v63;
    }
    else {
      uint64_t v12 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v63.__r_.__value_.__l.__size_;
    }
    for (; size; --size)
    {
      char v48 = std::__tree<char>::__find_equal<char>(&v59, (uint64_t *)&v60, v73, &v72, (char *)v12);
      if (!*v48)
      {
        std::string v49 = operator new(0x20uLL);
        v49[25] = v12->__r_.__value_.__s.__data_[0];
        unint64_t v50 = v73[0];
        *(void *)std::string v49 = 0;
        *((void *)v49 + 1) = 0;
        *((void *)v49 + 2) = v50;
        *char v48 = (uint64_t)v49;
        if (*v59)
        {
          uint64_t v59 = (uint64_t **)*v59;
          std::string v49 = (unsigned char *)*v48;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v49);
        ++v61;
      }
      uint64_t v12 = (std::string *)((char *)v12 + 1);
    }
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v14 = &v62;
    }
    else {
      unint64_t v14 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = v62.__r_.__value_.__l.__size_;
    }
    for (; v15; --v15)
    {
      uint64_t v51 = std::__tree<char>::__find_equal<char>(&v59, (uint64_t *)&v60, v73, &v72, (char *)v14);
      if (!*v51)
      {
        long long v52 = operator new(0x20uLL);
        v52[25] = v14->__r_.__value_.__s.__data_[0];
        uint64_t v53 = v73[0];
        *(void *)long long v52 = 0;
        *((void *)v52 + 1) = 0;
        *((void *)v52 + 2) = v53;
        uint64_t *v51 = (uint64_t)v52;
        if (*v59)
        {
          uint64_t v59 = (uint64_t **)*v59;
          long long v52 = (unsigned char *)*v51;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v52);
        ++v61;
      }
      unint64_t v14 = (std::string *)((char *)v14 + 1);
    }
    uint64_t v58 = a3;
    char v16 = v59;
    if (v59 == &v60)
    {
LABEL_37:
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      unint64_t v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 96))(v17);
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 96))(v19);
      double NumElementsSkipUnknownDims = (double)(unint64_t)Espresso::AOT::GetNumElementsSkipUnknownDims(v58, v21);
      std::string v22 = v69;
      if (v69 == &v70)
      {
LABEL_38:
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v59, v60);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v62.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_40:
            uint64_t v9 = (void **)__p;
            if (__p) {
              goto LABEL_105;
            }
            goto LABEL_9;
          }
        }
        else if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_40;
        }
        operator delete(v63.__r_.__value_.__l.__data_);
        uint64_t v9 = (void **)__p;
        if (__p) {
          goto LABEL_105;
        }
LABEL_9:
        uint64_t v7 = (uint64_t *)v67;
        if (!v67) {
          goto LABEL_119;
        }
        goto LABEL_112;
      }
      while (1)
      {
        uint64_t v36 = *(void *)(*v18 + 8 * *((int *)v22 + 7));
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 16))(v36);
        if (v37) {
          unint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 48))(v37);
        }
        else {
          unint64_t v38 = 1;
        }
        uint64_t v39 = *(void *)(*v20 + 8 * *((int *)v22 + 8));
        uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 16))(v39);
        if (v40)
        {
          unint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 48))(v40);
          if (v38 <= v41) {
            uint64_t v42 = v41;
          }
          else {
            uint64_t v42 = v38;
          }
          uint64_t v43 = v22[1];
          if (v43) {
            goto LABEL_83;
          }
        }
        else
        {
          if (v38 <= 1) {
            uint64_t v42 = 1;
          }
          else {
            uint64_t v42 = v38;
          }
          uint64_t v43 = v22[1];
          if (v43)
          {
            do
            {
LABEL_83:
              unint64_t v44 = (uint64_t **)v43;
              uint64_t v43 = (uint64_t *)*v43;
            }
            while (v43);
            goto LABEL_69;
          }
        }
        do
        {
          unint64_t v44 = (uint64_t **)v22[2];
          BOOL v26 = *v44 == (uint64_t *)v22;
          std::string v22 = v44;
        }
        while (!v26);
LABEL_69:
        double NumElementsSkipUnknownDims = NumElementsSkipUnknownDims * (double)(unint64_t)(2 * v42);
        std::string v22 = v44;
        if (v44 == &v70) {
          goto LABEL_38;
        }
      }
    }
    while (1)
    {
      std::string::size_type v23 = std::string::find((const std::string *)v9, *((unsigned char *)v16 + 25), 0);
      std::string::size_type v24 = std::string::find(&v63, *((unsigned char *)v16 + 25), 0);
      std::string::size_type v25 = std::string::find(&v62, *((unsigned char *)v16 + 25), 0);
      BOOL v26 = v23 == -1 || v24 == -1;
      if (!v26 && v25 == -1) {
        break;
      }
LABEL_63:
      unint64_t v34 = v16[1];
      if (v34)
      {
        do
        {
          int v35 = (uint64_t **)v34;
          unint64_t v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          int v35 = (uint64_t **)v16[2];
          BOOL v26 = *v35 == (uint64_t *)v16;
          char v16 = v35;
        }
        while (!v26);
      }
      char v16 = v35;
      if (v35 == &v60) {
        goto LABEL_37;
      }
    }
    size_t v28 = v70;
    uint64_t v29 = &v70;
    uint64_t v30 = &v70;
    if (!v70)
    {
LABEL_60:
      float v33 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v33 + 28) = v23 | ((unint64_t)v24 << 32);
      uint64_t *v33 = 0;
      v33[1] = 0;
      v33[2] = (uint64_t)v29;
      long long *v30 = v33;
      if (*v69)
      {
        unint64_t v69 = (uint64_t **)*v69;
        float v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v70, v33);
      ++v71;
      goto LABEL_63;
    }
    while (1)
    {
      uint64_t v29 = (uint64_t **)v28;
      int v31 = *((_DWORD *)v28 + 7);
      if (v31 > (int)v23) {
        goto LABEL_53;
      }
      if (v31 < (int)v23)
      {
LABEL_58:
        size_t v28 = v29[1];
        if (!v28)
        {
          uint64_t v30 = v29 + 1;
          goto LABEL_60;
        }
      }
      else
      {
        int v32 = *((_DWORD *)v29 + 8);
        if (v32 <= (int)v24)
        {
          if (v32 >= (int)v24) {
            goto LABEL_63;
          }
          goto LABEL_58;
        }
LABEL_53:
        size_t v28 = *v29;
        uint64_t v30 = v29;
        if (!*v29) {
          goto LABEL_60;
        }
      }
    }
  }
  operator delete(v63.__r_.__value_.__l.__data_);
  uint64_t v9 = (void **)__p;
  if ((char *)v65 - (unsigned char *)__p == 48) {
    goto LABEL_12;
  }
LABEL_8:
  if (!v9) {
    goto LABEL_9;
  }
LABEL_105:
  uint64_t v54 = v65;
  if (v65 == v9)
  {
    size_t v65 = v9;
    operator delete(v9);
    uint64_t v7 = (uint64_t *)v67;
    if (!v67) {
      goto LABEL_119;
    }
    goto LABEL_112;
  }
  do
  {
    if (*((char *)v54 - 1) < 0) {
      operator delete(*(v54 - 3));
    }
    v54 -= 3;
  }
  while (v54 != v9);
  size_t v65 = v9;
  operator delete(__p);
  uint64_t v7 = (uint64_t *)v67;
  if (v67)
  {
LABEL_112:
    uint64_t v55 = v68;
    unint64_t v56 = v7;
    if (v68 != v7)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete((void *)*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v7);
      unint64_t v56 = v67;
    }
    uint8x8_t v68 = v7;
    operator delete(v56);
  }
LABEL_119:
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v69, v70);
  return NumElementsSkipUnknownDims;
}

void sub_1924AEB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,char a36,void *a37)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a27);
  std::vector<std::string>::~vector[abi:ne180100](&a33);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Backends::CostModel::EinsumOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::EinsumOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_1924AEE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  *uint64_t v20 = 0;
  MEMORY[0x192FF16B0](v21, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<char>::__find_equal<char>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, char *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((char *)a2 + 25), v6 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v14 = a2;
      do
      {
        unint64_t v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        unint64_t v14 = v10;
      }
      while (v15);
    }
    int v16 = *a5;
    if (*((char *)v10 + 25) < v16) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = (uint64_t *)v18;
          int v20 = *(char *)(v18 + 25);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          uint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        uint64_t v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (uint64_t *)a2[1];
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        uint64_t v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((char *)v13 + 25))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            std::string::size_type v23 = (uint64_t *)v22;
            int v24 = *(char *)(v22 + 25);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          uint64_t v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void Espresso::AOT::Builder::~Builder(Espresso::AOT::Builder *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE36B730;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE36B730;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE36B730;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

void Espresso::AOT::Builder::Builder(E5RT::E5ProgramBuilder *a1)
{
  *(void *)a1 = &unk_1EE36B730;
  E5RT::E5ProgramBuilder::Create(a1);
}

void sub_1924AF3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
    uint64_t v16 = a10;
    if (!a10)
    {
LABEL_3:
      uint64_t v17 = a14;
      if (!a14) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v16 = a10;
    if (!a10) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  uint64_t v17 = a14;
  if (!a14)
  {
LABEL_4:
    uint64_t v18 = *v14;
    *unint64_t v14 = 0;
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  uint64_t v18 = *v14;
  *unint64_t v14 = 0;
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::Builder::BuildTensorOperand(E5RT::E5OperandBuilder *a1)
{
}

void sub_1924AF9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v27 = *(void *)(v25 - 88);
  *(void *)(v25 - 88) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::Builder::BuildSurfaceOperand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Espresso::AOT *a6)
{
  std::string __p = 0;
  unint64_t v50 = 0;
  uint64_t v51 = 0;
  long long v9 = *(_OWORD *)(a1 + 24);
  long long v46 = *(_OWORD *)(a1 + 8);
  long long v47 = v9;
  uint64_t v48 = *(void *)(a1 + 40);
  if (&__p != (void **)(a1 + 48)) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, *(char **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__src, (const Espresso::layer_shape *)&v46, 0);
  if (__p)
  {
    unint64_t v50 = __p;
    operator delete(__p);
  }
  uint64_t bias_g_low = SLODWORD(__src.bias_g);
  if (LODWORD(__src.bias_g) <= 1) {
    Espresso::throw_exception_selector<Espresso::generic_error>("A surface must have at least two dimensions.");
  }
  long long v46 = 0uLL;
  *(void *)&long long v47 = 0;
  if ((LODWORD(__src.bias_g) & 0x80000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (int *)operator new(4 * SLODWORD(__src.bias_g));
  memcpy(v11, &__src, 4 * bias_g_low);
  unint64_t v12 = v11[bias_g_low - 1];
  operator delete(v11);
  if (SLODWORD(__src.bias_g) < 1)
  {
    int v15 = 1;
    goto LABEL_24;
  }
  if (LODWORD(__src.bias_g) >= 8)
  {
    uint64_t v13 = LODWORD(__src.bias_g) & 0xFFFFFFF8;
    p_bias_r = &__src.bias_r;
    v17.i64[0] = 0x100000001;
    v17.i64[1] = 0x100000001;
    uint64_t v18 = v13;
    v19.i64[0] = 0x100000001;
    v19.i64[1] = 0x100000001;
    do
    {
      int32x4_t v17 = vmulq_s32(*(int32x4_t *)(p_bias_r - 4), v17);
      int32x4_t v19 = vmulq_s32(*(int32x4_t *)p_bias_r, v19);
      p_bias_r += 8;
      v18 -= 8;
    }
    while (v18);
    int8x16_t v20 = (int8x16_t)vmulq_s32(v19, v17);
    *(int32x2_t *)v20.i8 = vmul_s32(*(int32x2_t *)v20.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
    int v14 = v20.i32[0] * v20.i32[1];
    if (v13 == LODWORD(__src.bias_g))
    {
LABEL_16:
      if (!v14) {
        Espresso::throw_exception_selector<Espresso::generic_error>("A surface may not have a 0 length dimension.");
      }
      if (LODWORD(__src.bias_g) >= 8)
      {
        uint64_t v24 = LODWORD(__src.bias_g) & 0xFFFFFFF8;
        uint64_t v25 = &__src.bias_r;
        v26.i64[0] = 0x100000001;
        v26.i64[1] = 0x100000001;
        uint64_t v27 = v24;
        v28.i64[0] = 0x100000001;
        v28.i64[1] = 0x100000001;
        do
        {
          int32x4_t v26 = vmulq_s32(*(int32x4_t *)(v25 - 4), v26);
          int32x4_t v28 = vmulq_s32(*(int32x4_t *)v25, v28);
          v25 += 8;
          v27 -= 8;
        }
        while (v27);
        int8x16_t v29 = (int8x16_t)vmulq_s32(v28, v26);
        *(int32x2_t *)v29.i8 = vmul_s32(*(int32x2_t *)v29.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
        int v15 = v29.i32[0] * v29.i32[1];
        if (v24 == LODWORD(__src.bias_g))
        {
LABEL_24:
          unint64_t v33 = v15 / v12;
          unsigned int SurfaceFormatGivenBlobProperties = Espresso::AOT::GetSurfaceFormatGivenBlobProperties(a5, a6, &__src);
          unint64_t v35 = 2;
          if (SurfaceFormatGivenBlobProperties <= 0x21)
          {
            if (((1 << SurfaceFormatGivenBlobProperties) & 0x7FC0D92D) != 0)
            {
              LODWORD(v35) = *(_DWORD *)(a1 + 16);
              if ((int)v35 <= 1) {
                LODWORD(v35) = 1;
              }
              if (v35 >= 4) {
                unint64_t v35 = 4;
              }
              else {
                unint64_t v35 = v35;
              }
            }
            else if (((1 << SurfaceFormatGivenBlobProperties) & 0x3003F2682) != 0)
            {
              unint64_t v35 = 1;
            }
          }
          if (v35 <= v33)
          {
            BOOL IsMultiSliceFormat = E5RT::IsMultiSliceFormat(SurfaceFormatGivenBlobProperties);
            if (bias_g_low >= 3 && IsMultiSliceFormat)
            {
              uint64_t v37 = SLODWORD(__src.bias_g);
              *(void *)&long long v47 = 0;
              long long v46 = 0uLL;
              if ((LODWORD(__src.bias_g) & 0x80000000) != 0) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              size_t v38 = 4 * SLODWORD(__src.bias_g);
              uint64_t v39 = (char *)operator new(v38);
              uint64_t v40 = v39;
              if (v37 <= 1) {
                uint64_t v41 = 1;
              }
              else {
                uint64_t v41 = v37;
              }
              size_t v42 = 4 * v41;
              BOOL v43 = v38 >= 4 * v41;
              size_t v44 = v38 - 4 * v41;
              if (v43) {
                size_t v45 = v44;
              }
              else {
                size_t v45 = 0;
              }
              bzero(&v39[v42], v45);
              memcpy(v40, &__src, v42);
              operator delete(v40);
            }
            E5RT::E5OperandBuilder::Create((E5RT::E5OperandBuilder *)IsMultiSliceFormat);
          }
          Espresso::throw_exception_selector<Espresso::generic_error>("Surface has height 0.");
        }
      }
      else
      {
        uint64_t v24 = 0;
        int v15 = 1;
      }
      uint64_t v30 = LODWORD(__src.bias_g) - v24;
      int v31 = (int *)(&__src.scale + v24);
      do
      {
        int v32 = *v31++;
        v15 *= v32;
        --v30;
      }
      while (v30);
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = 1;
  }
  uint64_t v21 = LODWORD(__src.bias_g) - v13;
  uint64_t v22 = (int *)(&__src.scale + v13);
  do
  {
    int v23 = *v22++;
    v14 *= v23;
    --v21;
  }
  while (v21);
  goto LABEL_16;
}

void sub_1924B03D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v30 = a28;
    if (!a28)
    {
LABEL_3:
      uint64_t v31 = a22;
      if (a22) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v30 = a28;
    if (!a28) {
      goto LABEL_3;
    }
  }
  operator delete(v30);
  uint64_t v31 = a22;
  if (a22)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::Builder::BuildOperand(E5RT::E5OperandBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Espresso::AOT *a7, int a8)
{
  if (a6)
  {
    BOOL v8 = *(void *)(a6 + 16) == *(void *)(a6 + 24);
    if (a7) {
      BOOL v8 = 0;
    }
    if (!a8) {
LABEL_9:
    }
      Espresso::AOT::Builder::BuildTensorOperand(a1);
  }
  else
  {
    BOOL v8 = a7 == 0;
    if (!a8) {
      goto LABEL_9;
    }
  }
  if (!v8) {
    Espresso::AOT::Builder::BuildSurfaceOperand((uint64_t)a1, a2, a4, a5, a6, a7);
  }
  goto LABEL_9;
}

uint64_t Espresso::AOT::Builder::BuildOperands(Espresso::AOT *a1, const Espresso::net *a2, void *a3, void *a4)
{
  uint64_t v5 = a1;
  uint64_t result = Espresso::AOT::AreSurfaceDescriptorsEnabled(a1, a2);
  uint64_t v7 = *((void *)v5 + 4);
  if (*((void *)v5 + 5) == v7) {
    return result;
  }
  unint64_t v8 = 0;
  uint64_t v146 = (void *)((char *)v5 + 240);
  uint64_t v143 = (void *)((char *)v5 + 336);
  uint64_t v144 = (void *)((char *)v5 + 136);
  char v139 = result ^ 1;
  v145 = (void *)((char *)v5 + 264);
  uint64_t v135 = v5;
  while (2)
  {
    unint64_t v136 = v8;
    long long v9 = (uint64_t *)(v7 + 16 * v8);
    Espresso::AOT::GetPlatformForLayer(v9, 1);
    int8x8_t v10 = *(int8x8_t *)((char *)v5 + 64);
    if (!*(void *)&v10) {
      goto LABEL_241;
    }
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v136;
      if (v136 >= *(void *)&v10) {
        unint64_t v12 = v136 % *(void *)&v10;
      }
    }
    else
    {
      unint64_t v12 = (*(void *)&v10 - 1) & v136;
    }
    uint64_t v13 = *(void **)(*((void *)v5 + 7) + 8 * v12);
    if (!v13) {
      goto LABEL_241;
    }
    int v14 = (void *)*v13;
    if (!v14) {
      goto LABEL_241;
    }
    long long v141 = v9;
    if (v11.u32[0] < 2uLL)
    {
      uint64_t v15 = *(void *)&v10 - 1;
      while (1)
      {
        uint64_t v17 = v14[1];
        if (v136 == v17)
        {
          if (v14[2] == v136) {
            goto LABEL_24;
          }
        }
        else if ((v17 & v15) != v12)
        {
          goto LABEL_241;
        }
        int v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_241;
        }
      }
    }
    while (1)
    {
      unint64_t v16 = v14[1];
      if (v136 == v16) {
        break;
      }
      if (v16 >= *(void *)&v10) {
        v16 %= *(void *)&v10;
      }
      if (v16 != v12) {
        goto LABEL_241;
      }
LABEL_14:
      int v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_241;
      }
    }
    if (v14[2] != v136) {
      goto LABEL_14;
    }
LABEL_24:
    uint64_t v19 = v14[3];
    uint64_t v18 = v14[4];
    while (v19 != v18)
    {
      int8x16_t v20 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v144, (unsigned __int8 *)v19);
      if (!v20) {
        goto LABEL_241;
      }
      uint64_t v21 = *v146;
      if (!*v146) {
        goto LABEL_25;
      }
      uint64_t v22 = *((void *)v20 + 5);
      int v23 = *(char *)(v19 + 23);
      size_t v24 = v23 >= 0 ? *(unsigned __int8 *)(v19 + 23) : *(void *)(v19 + 8);
      uint64_t v25 = v23 >= 0 ? (const void *)v19 : *(const void **)v19;
      int32x4_t v26 = v146;
      do
      {
        int v27 = *(char *)(v21 + 55);
        if (v27 >= 0) {
          size_t v28 = *(unsigned __int8 *)(v21 + 55);
        }
        else {
          size_t v28 = *(void *)(v21 + 40);
        }
        if (v27 >= 0) {
          int8x16_t v29 = (const void *)(v21 + 32);
        }
        else {
          int8x16_t v29 = *(const void **)(v21 + 32);
        }
        if (v24 >= v28) {
          size_t v30 = v28;
        }
        else {
          size_t v30 = v24;
        }
        int v31 = memcmp(v29, v25, v30);
        BOOL v32 = v28 < v24;
        if (v31) {
          BOOL v32 = v31 < 0;
        }
        BOOL v33 = !v32;
        if (v32) {
          unint64_t v34 = (uint64_t *)(v21 + 8);
        }
        else {
          unint64_t v34 = (uint64_t *)v21;
        }
        if (v33) {
          int32x4_t v26 = (void *)v21;
        }
        uint64_t v21 = *v34;
      }
      while (*v34);
      if (v26 == v146) {
        goto LABEL_25;
      }
      uint64_t v37 = (const void *)v26[4];
      uint64_t v36 = v26 + 4;
      unint64_t v35 = v37;
      int v38 = *((char *)v36 + 23);
      if (v38 >= 0) {
        size_t v39 = *((unsigned __int8 *)v36 + 23);
      }
      else {
        size_t v39 = v36[1];
      }
      if (v38 >= 0) {
        uint64_t v40 = v36;
      }
      else {
        uint64_t v40 = v35;
      }
      if (v39 >= v24) {
        size_t v41 = v24;
      }
      else {
        size_t v41 = v39;
      }
      int v42 = memcmp(v25, v40, v41);
      BOOL v43 = v24 < v39;
      if (v42) {
        BOOL v43 = v42 < 0;
      }
      if (v43)
      {
LABEL_25:
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, v19))Espresso::throw_exception_selector<Espresso::generic_error>("Cannot find operand in cache. Error in topological sort"); {
      }
        }
      else if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, v19))
      {
        size_t v44 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v144, (unsigned __int8 *)v19);
        if (v44)
        {
          size_t v45 = (E5RT::E5OperandBuilder *)*((void *)v44 + 5);
          long long v46 = v143;
          uint64_t v47 = *v143;
          if (*v143)
          {
            long long v138 = (E5RT::E5OperandBuilder *)*((void *)v44 + 5);
            int v48 = *(char *)(v19 + 23);
            if (v48 >= 0) {
              size_t v49 = *(unsigned __int8 *)(v19 + 23);
            }
            else {
              size_t v49 = *(void *)(v19 + 8);
            }
            if (v48 >= 0) {
              unint64_t v50 = (const void *)v19;
            }
            else {
              unint64_t v50 = *(const void **)v19;
            }
            do
            {
              int v51 = *(char *)(v47 + 55);
              if (v51 >= 0) {
                size_t v52 = *(unsigned __int8 *)(v47 + 55);
              }
              else {
                size_t v52 = *(void *)(v47 + 40);
              }
              if (v51 >= 0) {
                uint64_t v53 = (const void *)(v47 + 32);
              }
              else {
                uint64_t v53 = *(const void **)(v47 + 32);
              }
              if (v49 >= v52) {
                size_t v54 = v52;
              }
              else {
                size_t v54 = v49;
              }
              int v55 = memcmp(v53, v50, v54);
              BOOL v56 = v52 < v49;
              if (v55) {
                BOOL v56 = v55 < 0;
              }
              BOOL v57 = !v56;
              if (v56) {
                uint64_t v58 = (uint64_t *)(v47 + 8);
              }
              else {
                uint64_t v58 = (uint64_t *)v47;
              }
              if (v57) {
                long long v46 = (void *)v47;
              }
              uint64_t v47 = *v58;
            }
            while (*v58);
            if (v46 == v143)
            {
              uint8x8_t v68 = 0;
            }
            else
            {
              uint64_t v61 = (const void *)v46[4];
              long long v60 = v46 + 4;
              uint64_t v59 = v61;
              int v62 = *((char *)v60 + 23);
              if (v62 >= 0) {
                size_t v63 = *((unsigned __int8 *)v60 + 23);
              }
              else {
                size_t v63 = v60[1];
              }
              if (v62 >= 0) {
                long long v64 = v60;
              }
              else {
                long long v64 = v59;
              }
              if (v63 >= v49) {
                size_t v65 = v49;
              }
              else {
                size_t v65 = v63;
              }
              int v66 = memcmp(v50, v64, v65);
              BOOL v67 = v49 < v63;
              if (v66) {
                BOOL v67 = v66 < 0;
              }
              if (v67) {
                uint8x8_t v68 = 0;
              }
              else {
                uint8x8_t v68 = (Espresso::AOT *)(v60 + 3);
              }
            }
            size_t v45 = v138;
          }
          else
          {
            uint8x8_t v68 = 0;
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a3, v19))
          {
            if (v68) {
              BOOL v69 = 0;
            }
            else {
              BOOL v69 = *(void *)(v22 + 128) == *(void *)(v22 + 136);
            }
            char v70 = v139;
            if (v69) {
              char v70 = 1;
            }
            if (v70) {
              Espresso::AOT::Builder::BuildTensorOperand(v45);
            }
            Espresso::AOT::Builder::BuildSurfaceOperand((uint64_t)v45, v19, 0, 0, v22 + 112, v68);
          }
        }
        goto LABEL_241;
      }
      v19 += 24;
    }
    uint64_t result = Espresso::AOT::GetPlatformForLayer(v141, 0);
    int8x8_t v71 = *(int8x8_t *)((char *)v135 + 104);
    if (!*(void *)&v71) {
      goto LABEL_241;
    }
    uint8x8_t v72 = (uint8x8_t)vcnt_s8(v71);
    v72.i16[0] = vaddlv_u8(v72);
    if (v72.u32[0] > 1uLL)
    {
      unint64_t v73 = v136;
      if (v136 >= *(void *)&v71) {
        unint64_t v73 = v136 % *(void *)&v71;
      }
    }
    else
    {
      unint64_t v73 = (*(void *)&v71 - 1) & v136;
    }
    BOOL v74 = *(void **)(*((void *)v135 + 12) + 8 * v73);
    if (!v74 || (uint64_t v75 = (void *)*v74) == 0) {
LABEL_241:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v72.u32[0] < 2uLL)
    {
      uint64_t v76 = *(void *)&v71 - 1;
      while (1)
      {
        uint64_t v78 = v75[1];
        if (v136 == v78)
        {
          if (v75[2] == v136) {
            goto LABEL_143;
          }
        }
        else if ((v78 & v76) != v73)
        {
          goto LABEL_241;
        }
        uint64_t v75 = (void *)*v75;
        if (!v75) {
          goto LABEL_241;
        }
      }
    }
    while (2)
    {
      unint64_t v77 = v75[1];
      if (v136 != v77)
      {
        if (v77 >= *(void *)&v71) {
          v77 %= *(void *)&v71;
        }
        if (v77 != v73) {
          goto LABEL_241;
        }
        goto LABEL_133;
      }
      if (v75[2] != v136)
      {
LABEL_133:
        uint64_t v75 = (void *)*v75;
        if (!v75) {
          goto LABEL_241;
        }
        continue;
      }
      break;
    }
LABEL_143:
    uint64_t v79 = v75[3];
    if (v79 != v75[4])
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, v79))
      {
        Espresso::throw_exception_selector<Espresso::generic_error>("Logic error: output operand already built");
      }
      uint64_t v80 = *v145;
      if (!*v145) {
        goto LABEL_184;
      }
      int v81 = *(char *)(v79 + 23);
      size_t v82 = v81 >= 0 ? *(unsigned __int8 *)(v79 + 23) : *(void *)(v79 + 8);
      unint64_t v83 = v81 >= 0 ? (const void *)v79 : *(const void **)v79;
      unint64_t v84 = v145;
      do
      {
        int v85 = *(char *)(v80 + 55);
        if (v85 >= 0) {
          size_t v86 = *(unsigned __int8 *)(v80 + 55);
        }
        else {
          size_t v86 = *(void *)(v80 + 40);
        }
        if (v85 >= 0) {
          uint64_t v87 = (const void *)(v80 + 32);
        }
        else {
          uint64_t v87 = *(const void **)(v80 + 32);
        }
        if (v82 >= v86) {
          size_t v88 = v86;
        }
        else {
          size_t v88 = v82;
        }
        int v89 = memcmp(v87, v83, v88);
        BOOL v90 = v86 < v82;
        if (v89) {
          BOOL v90 = v89 < 0;
        }
        BOOL v91 = !v90;
        if (v90) {
          uint64_t v92 = (uint64_t *)(v80 + 8);
        }
        else {
          uint64_t v92 = (uint64_t *)v80;
        }
        if (v91) {
          unint64_t v84 = (void *)v80;
        }
        uint64_t v80 = *v92;
      }
      while (*v92);
      if (v84 == v145) {
        goto LABEL_184;
      }
      long long v95 = (const void *)v84[4];
      uint64_t v94 = v84 + 4;
      std::string v93 = v95;
      int v96 = *((char *)v94 + 23);
      if (v96 >= 0) {
        size_t v97 = *((unsigned __int8 *)v94 + 23);
      }
      else {
        size_t v97 = v94[1];
      }
      if (v96 >= 0) {
        unint64_t v98 = v94;
      }
      else {
        unint64_t v98 = v93;
      }
      if (v97 >= v82) {
        size_t v99 = v82;
      }
      else {
        size_t v99 = v97;
      }
      int v100 = memcmp(v83, v98, v99);
      BOOL v101 = v82 < v97;
      if (v100) {
        BOOL v101 = v100 < 0;
      }
      if (v101)
      {
LABEL_184:
        uint64_t v102 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a2, v79);
        if (v102)
        {
          uint64_t v103 = v102[5];
          uint64_t v104 = 1;
          uint64_t v105 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v144, (unsigned __int8 *)v79);
          if (v105) {
            goto LABEL_186;
          }
        }
      }
      else
      {
        uint64_t v104 = 0;
        uint64_t v103 = 0;
        uint64_t v105 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v144, (unsigned __int8 *)v79);
        if (v105)
        {
LABEL_186:
          int v106 = (E5RT::E5OperandBuilder *)*((void *)v105 + 5);
          char v107 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v144, (unsigned __int8 *)v79);
          if (v107)
          {
            uint64_t v108 = *((void *)v107 + 5);
            BOOL v109 = v143;
            uint64_t v110 = *v143;
            if (*v143)
            {
              unsigned int v142 = v104;
              uint64_t v111 = v103;
              int v112 = *(char *)(v79 + 23);
              if (v112 >= 0) {
                size_t v113 = *(unsigned __int8 *)(v79 + 23);
              }
              else {
                size_t v113 = *(void *)(v79 + 8);
              }
              if (v112 >= 0) {
                unint64_t v114 = (const void *)v79;
              }
              else {
                unint64_t v114 = *(const void **)v79;
              }
              do
              {
                int v115 = *(char *)(v110 + 55);
                if (v115 >= 0) {
                  size_t v116 = *(unsigned __int8 *)(v110 + 55);
                }
                else {
                  size_t v116 = *(void *)(v110 + 40);
                }
                if (v115 >= 0) {
                  uint64_t v117 = (const void *)(v110 + 32);
                }
                else {
                  uint64_t v117 = *(const void **)(v110 + 32);
                }
                if (v113 >= v116) {
                  size_t v118 = v116;
                }
                else {
                  size_t v118 = v113;
                }
                int v119 = memcmp(v117, v114, v118);
                BOOL v120 = v116 < v113;
                if (v119) {
                  BOOL v120 = v119 < 0;
                }
                BOOL v121 = !v120;
                if (v120) {
                  int v122 = (uint64_t *)(v110 + 8);
                }
                else {
                  int v122 = (uint64_t *)v110;
                }
                if (v121) {
                  BOOL v109 = (void *)v110;
                }
                uint64_t v110 = *v122;
              }
              while (*v122);
              if (v109 == v143)
              {
                std::string::size_type v132 = 0;
              }
              else
              {
                int v125 = (const void *)v109[4];
                long long v124 = v109 + 4;
                long long v123 = v125;
                int v126 = *((char *)v124 + 23);
                if (v126 >= 0) {
                  size_t v127 = *((unsigned __int8 *)v124 + 23);
                }
                else {
                  size_t v127 = v124[1];
                }
                if (v126 >= 0) {
                  int v128 = v124;
                }
                else {
                  int v128 = v123;
                }
                if (v127 >= v113) {
                  size_t v129 = v113;
                }
                else {
                  size_t v129 = v127;
                }
                int v130 = memcmp(v114, v128, v129);
                BOOL v131 = v113 < v127;
                if (v130) {
                  BOOL v131 = v130 < 0;
                }
                if (v131) {
                  std::string::size_type v132 = 0;
                }
                else {
                  std::string::size_type v132 = (Espresso::AOT *)(v124 + 3);
                }
              }
              uint64_t v103 = v111;
              uint64_t v104 = v142;
            }
            else
            {
              std::string::size_type v132 = 0;
            }
            if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a3, v79))
            {
              if (v132) {
                BOOL v133 = 0;
              }
              else {
                BOOL v133 = *(void *)(v108 + 128) == *(void *)(v108 + 136);
              }
              char v134 = v139;
              if (v133) {
                char v134 = 1;
              }
              if (v134) {
                Espresso::AOT::Builder::BuildTensorOperand(v106);
              }
              Espresso::AOT::Builder::BuildSurfaceOperand((uint64_t)v106, v79, v104, v103, v108 + 112, v132);
            }
          }
        }
      }
      goto LABEL_241;
    }
    uint64_t v5 = v135;
    unint64_t v8 = v136 + 1;
    uint64_t v7 = *((void *)v135 + 4);
    if (v136 + 1 < (*((void *)v135 + 5) - v7) >> 4) {
      continue;
    }
    return result;
  }
}

void sub_1924B0FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924B0FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildCastOps(void *a1, const char *a2, unint64_t a3)
{
  uint64_t v4 = a1[4];
  if (a3 >= (a1[5] - v4) >> 4) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v6 = (uint64_t *)(v4 + 16 * a3);
  uint64_t v7 = *v6;
  unint64_t v8 = *(const void **)(*v6 + 64);
  if (v8
  {
    int8x8_t v10 = v9;
    uint8x8_t v11 = *(std::__shared_weak_count **)(v7 + 72);
    BOOL v32 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = *v6;
      unint64_t v8 = *(const void **)(*v6 + 64);
      if (!v8) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    int8x8_t v10 = 0;
    BOOL v32 = 0;
    if (!v8) {
      goto LABEL_11;
    }
  }
  {
    unint64_t v12 = *(std::__shared_weak_count **)(v7 + 72);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v12 = 0;
  if (!v10) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Cast op can be built only for ctx transfer or cast kernels.");
  }
LABEL_12:
  int8x8_t v13 = (int8x8_t)a1[8];
  if (!*(void *)&v13) {
    goto LABEL_65;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a3;
    if (*(void *)&v13 <= a3) {
      unint64_t v15 = a3 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v13 - 1) & a3;
  }
  unint64_t v16 = *(void **)(a1[7] + 8 * v15);
  if (!v16 || (uint64_t v17 = (void *)*v16) == 0) {
LABEL_65:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v14.u32[0] < 2uLL)
  {
    uint64_t v18 = *(void *)&v13 - 1;
    while (1)
    {
      uint64_t v20 = v17[1];
      if (v20 == a3)
      {
        if (v17[2] == a3) {
          goto LABEL_32;
        }
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_65;
      }
      uint64_t v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_65;
      }
    }
  }
  while (1)
  {
    unint64_t v19 = v17[1];
    if (v19 == a3) {
      break;
    }
    if (v19 >= *(void *)&v13) {
      v19 %= *(void *)&v13;
    }
    if (v19 != v15) {
      goto LABEL_65;
    }
LABEL_22:
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      goto LABEL_65;
    }
  }
  if (v17[2] != a3) {
    goto LABEL_22;
  }
LABEL_32:
  int8x8_t v21 = (int8x8_t)a1[13];
  if (!*(void *)&v21) {
    goto LABEL_66;
  }
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    unint64_t v23 = a3;
    if (*(void *)&v21 <= a3) {
      unint64_t v23 = a3 % *(void *)&v21;
    }
  }
  else
  {
    unint64_t v23 = (*(void *)&v21 - 1) & a3;
  }
  size_t v24 = *(void **)(a1[12] + 8 * v23);
  if (!v24 || (uint64_t v25 = (void *)*v24) == 0) {
LABEL_66:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v22.u32[0] < 2uLL)
  {
    uint64_t v26 = *(void *)&v21 - 1;
    while (1)
    {
      uint64_t v28 = v25[1];
      if (v28 == a3)
      {
        if (v25[2] == a3) {
          goto LABEL_52;
        }
      }
      else if ((v28 & v26) != v23)
      {
        goto LABEL_66;
      }
      uint64_t v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_66;
      }
    }
  }
  while (2)
  {
    unint64_t v27 = v25[1];
    if (v27 != a3)
    {
      if (v27 >= *(void *)&v21) {
        v27 %= *(void *)&v21;
      }
      if (v27 != v23) {
        goto LABEL_66;
      }
      goto LABEL_42;
    }
    if (v25[2] != a3)
    {
LABEL_42:
      uint64_t v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_66;
      }
      continue;
    }
    break;
  }
LABEL_52:
  uint64_t v30 = v17[3];
  uint64_t v29 = v17[4];
  if (0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3) != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25[4] - v25[3]) >> 3)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Mismatched input/output numbers for cast op");
  }
  if (v29 != v30) {
    E5RT::E5OperationBuilder::Create(3);
  }
  int v31 = Espresso::espresso_os_log_subsystem(0, a2);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    Espresso::AOT::Builder::BuildCastOps(v31);

    if (v12) {
      goto LABEL_57;
    }
  }
  else
  {

    if (v12)
    {
LABEL_57:
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1924B1C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v42 - 120);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v42 - 104);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildDevOp(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (a3 < (*(void *)(a1 + 40) - v4) >> 4)
  {
    uint64_t v5 = *(void *)(v4 + 16 * a3);
    int v6 = *(const void **)(v5 + 64);
    if (v6)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(v5 + 72);
        unint64_t v12 = v7;
        uint64_t v13 = v8;
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        long long v9 = (const Espresso::dev_op_params_t *)(*(uint64_t (**)(void *))(*(void *)v7 + 320))(v7);
        Espresso::dev_op_params_t::dev_op_params_t((Espresso::dev_op_params_t *)v11, v9);
        LODWORD(__p) = v11[0];
        if (is_cpu((int *)&__p))
        {
          if (*(unsigned char *)(a1 + 1409)) {
            E5RT::E5OperationBuilder::Create(7);
          }
          E5RT::E5OperationBuilder::Create(2);
        }
        LODWORD(__p) = v11[0];
        if (is_gpu((int *)&__p)) {
          E5RT::E5OperationBuilder::Create(8);
        }
        LODWORD(__p) = v11[0];
        if (is_ane(&__p)) {
          E5RT::E5OperationBuilder::Create(1);
        }
        Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported dev_op platform");
      }
    }
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to dev_op kernel");
  }
  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
}

void sub_1924B33C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  Espresso::dev_op_params_t::~dev_op_params_t((Espresso::dev_op_params_t *)&a58);
  (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v59 - 144);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildQuantizeOp(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3 < (*(void *)(a1 + 40) - v3) >> 4)
  {
    uint64_t v4 = *(void *)(v3 + 16 * a3);
    uint64_t v5 = *(const void **)(v4 + 64);
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(v4 + 72);
        uint64_t v8 = v6;
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        E5RT::E5OperationBuilder::Create(4);
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to static quantize kernel");
  }
  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
}

void sub_1924B42E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a33) {
    Espresso::AOT::Builder::BuildCastOps();
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 160);
  uint64_t v46 = *(void *)(v44 - 136);
  *(void *)(v44 - 136) = 0;
  if (v46)
  {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 128);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 128);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildDequantizeOp(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3 < (*(void *)(a1 + 40) - v3) >> 4)
  {
    uint64_t v4 = *(void *)(v3 + 16 * a3);
    uint64_t v5 = *(const void **)(v4 + 64);
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(v4 + 72);
        uint64_t v8 = v6;
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        E5RT::E5OperationBuilder::Create(5);
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to static dequantize kernel");
  }
  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
}

void sub_1924B50A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a33) {
    Espresso::AOT::Builder::BuildCastOps();
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 160);
  uint64_t v46 = *(void *)(v44 - 136);
  *(void *)(v44 - 136) = 0;
  if (v46)
  {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 128);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 128);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildOps(void *a1, const char *a2)
{
  uint64_t v2 = a1[4];
  if (a1[5] != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(v2 + v5);
      uint64_t v8 = (int *)(v7 + 40);
      int v9 = *(char *)(v7 + 63);
      if ((v9 & 0x80000000) == 0)
      {
        int v10 = *(unsigned __int8 *)(v7 + 63);
        switch((char)v9)
        {
          case 4:
            goto LABEL_61;
          case 6:
            int v11 = *v8;
            int v12 = *((unsigned __int16 *)v8 + 2);
            if (v11 != 1601594724 || v12 != 28783) {
              goto LABEL_65;
            }
            goto LABEL_40;
          case 15:
            if (*(void *)v8 != 0x715F636974617473 || *(void *)((char *)v8 + 7) != 0x657A69746E617571) {
              goto LABEL_60;
            }
            goto LABEL_3;
          case 16:
            goto LABEL_56;
          case 17:
            if (*(void *)v8 == 0x645F636974617473
              && *((void *)v8 + 1) == 0x7A69746E61757165
              && *((unsigned char *)v8 + 16) == 101)
            {
              goto LABEL_63;
            }
            if (v10 == 4) {
              goto LABEL_61;
            }
            if (v10 != 16) {
              goto LABEL_65;
            }
LABEL_56:
            if (*(void *)v8 == 0x5F747865746E6F63 && *((void *)v8 + 1) == 0x726566736E617274) {
              goto LABEL_62;
            }
LABEL_60:
            if (v10 == 4) {
              goto LABEL_61;
            }
            goto LABEL_65;
          default:
            goto LABEL_65;
        }
      }
      uint64_t v14 = *(void *)(v7 + 48);
      if (v14 == 6 && **(_DWORD **)v8 == 1601594724 && *(_WORD *)(*(void *)v8 + 4) == 28783) {
LABEL_40:
      }
        Espresso::AOT::Builder::BuildDevOp((uint64_t)a1, (uint64_t)a2, v6);
      if (v14 == 15)
      {
        if (**(void **)v8 == 0x715F636974617473 && *(void *)(*(void *)v8 + 7) == 0x657A69746E617571) {
LABEL_3:
        }
          Espresso::AOT::Builder::BuildQuantizeOp((uint64_t)a1, (uint64_t)a2, v6);
        uint64_t v14 = *(void *)(v7 + 48);
      }
      if (v14 == 17)
      {
        if (**(void **)v8 == 0x645F636974617473
          && *(void *)(*(void *)v8 + 8) == 0x7A69746E61757165
          && *(unsigned char *)(*(void *)v8 + 16) == 101)
        {
LABEL_63:
          Espresso::AOT::Builder::BuildDequantizeOp((uint64_t)a1, (uint64_t)a2, v6);
        }
        uint64_t v14 = *(void *)(v7 + 48);
      }
      if (v14 != 16) {
        goto LABEL_38;
      }
      if (**(void **)v8 != 0x5F747865746E6F63 || *(void *)(*(void *)v8 + 8) != 0x726566736E617274) {
        break;
      }
LABEL_62:
      Espresso::AOT::Builder::BuildCastOps(a1, a2, v6++);
      uint64_t v2 = a1[4];
      v5 += 16;
      if (v6 >= (a1[5] - v2) >> 4) {
        return;
      }
    }
    uint64_t v14 = *(void *)(v7 + 48);
LABEL_38:
    if (v14 != 4) {
      goto LABEL_65;
    }
    uint64_t v8 = *(int **)v8;
LABEL_61:
    if (*v8 != 1953718627) {
LABEL_65:
    }
      Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported op encountered while serializing");
    goto LABEL_62;
  }
}

void Espresso::AOT::Builder::BuildFunction(int a1, int a2, int a3, Espresso::AOT *this)
{
  Espresso::AOT::GetIntermediateBlobOffsets(this, (uint64_t)&v5);
  E5RT::E5FunctionBuilder::Create(v4);
}

void sub_1924B6018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  if (a12) {
    Espresso::AOT::Builder::BuildFunction();
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100]((uint64_t)&a38);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v38 - 176);
  uint64_t v40 = *(void *)(v38 - 136);
  *(void *)(v38 - 136) = 0;
  if (v40)
  {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    uint64_t v41 = *(void *)(v38 - 128);
    *(void *)(v38 - 128) = 0;
    if (!v41)
    {
LABEL_10:
      std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v38 - 120);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v41 = *(void *)(v38 - 128);
    *(void *)(v38 - 128) = 0;
    if (!v41) {
      goto LABEL_10;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v38 - 120);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::Builder::SerializeToFile(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t v7 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v28 = v7;
  E5RT::E5ProgramBuilder::Finish(&v28, &v29);
  uint64_t v8 = v28;
  uint64_t v28 = 0;
  if (v8) {
    (*(void (**)(const void *))(*(void *)v8 + 8))(v8);
  }
  int v9 = *((char *)a3 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v10 = (size_t)a3[1];
  }
  unint64_t v11 = v10 + 1;
  if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v10 + 1;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10 + 1;
    if (!v10) {
      goto LABEL_17;
    }
  }
  if (v9 >= 0) {
    unint64_t v15 = a3;
  }
  else {
    unint64_t v15 = *a3;
  }
  memmove(p_dst, v15, v10);
LABEL_17:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v10) = 47;
  int v16 = *(char *)(a4 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a4;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a4 + 8);
  }
  unint64_t v19 = std::string::append(&__dst, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int8x8_t v21 = std::string::append(&v25, ".e5");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v27 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v29 + 56))(v29, a2, __p);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1924B6460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  uint64_t v30 = *(void *)(v28 - 72);
  *(void *)(v28 - 72) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dev_op_params_t::~dev_op_params_t(Espresso::dev_op_params_t *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (void *)*((void *)this + 14);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 14);
    }
    *((void *)this + 15) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 12);
    uint64_t v7 = (void *)*((void *)this + 11);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 11);
    }
    *((void *)this + 12) = v5;
    operator delete(v7);
  }
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    uint64_t v8 = (void *)*((void *)this + 5);
    if (!v8) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  operator delete(*((void **)this + 8));
  uint64_t v8 = (void *)*((void *)this + 5);
  if (v8)
  {
LABEL_19:
    *((void *)this + 6) = v8;
    operator delete(v8);
  }
LABEL_20:
  int v9 = (void *)*((void *)this + 2);
  if (v9)
  {
    *((void *)this + 3) = v9;
    operator delete(v9);
  }
}

uint64_t std::__shared_ptr_pointer<E5RT::E5BuildInfo const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5BuildInfo const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC0EA9) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC0EA9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC0EA9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC0EA9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Operand const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Operand const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC0F39) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC0F39 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC0F39)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC0F39 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<CastOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CastOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<CastOpT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Operation const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Operation const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC1005) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC1005 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC1005)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC1005 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<MlcCpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3803F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MlcCpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3803F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<MlcCpuInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::__shared_ptr_emplace<CpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3802D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3802D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<CpuInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 24);

  operator delete(v2);
}

void std::__shared_ptr_emplace<MpsGraphInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3804D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MpsGraphInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3804D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<MpsGraphInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 96);
    uint64_t v4 = *(void **)(a1 + 88);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 88);
    }
    *(void *)(a1 + 96) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v5 = *(void **)(a1 + 24);

  operator delete(v5);
}

void std::__shared_ptr_emplace<AneInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3802A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AneInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3802A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<AneInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v5 = *(void **)(a1 + 24);

  operator delete(v5);
}

void std::__shared_ptr_emplace<QuantOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3806C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QuantOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3806C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<QuantOpT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<DequantOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DequantOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<DequantOpT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Block const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Block const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC122CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC122CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC122CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC122CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Function const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Function const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC12B9) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC12B9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC12B9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC12B9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void Espresso::AOT::Builder::BuildCastOps(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "Ignoring empty context transfer", v1, 2u);
}

uint64_t Espresso::AOT::Builder::BuildCastOps()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Espresso::AOT::Builder::BuildFunction()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Espresso::AOT::Builder::SerializeToFile()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *Espresso::AOT::Validators::MlcValidator::MlcValidator(void *a1, long long *a2, int a3)
{
  uint64_t v6 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *uint64_t v6 = &unk_1EE36AED0;
  long long v7 = *a2;
  *(_OWORD *)(v6 + 3) = 0u;
  *(_OWORD *)(v6 + 1) = v7;
  *(_OWORD *)(v6 + 5) = 0u;
  *((_DWORD *)v6 + 14) = 1065353216;
  if (!a3) {
    return a1;
  }
  char v11 = 10;
  strcpy((char *)__p, "bnns-graph");
  int v12 = __p;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v6 + 3), (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v12);
  MEMORY[0x192FF0F50](v8 + 40, "true");
  if ((v11 & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__p[0]);
  return a1;
}

void sub_1924B7130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v16);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v17);
  Espresso::AOT::AbstractValidator::~AbstractValidator(v15);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::MlcValidator::Validate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (E5Common::E5PlatformManager *)mlc_services_validation_version();
  uint64_t v7 = E5Common::E5PlatformManager::Instance(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1 + 8);
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    v11.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
  }
  Espresso::AOT::Utils::MakeValidationInput((unint64_t)v6, a2, a3, (uint64_t *)&v11, a1 + 24);
  objc_claimAutoreleasedReturnValue();
  size_t v10 = (void *)mlc_services_validate();
  Espresso::AOT::Utils::ParseValidationOutput((unint64_t)v6, v10);
}

void sub_1924B7280(_Unwind_Exception *a1, std::string *a2, std::string *a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::MlcValidator::~MlcValidator(Espresso::AOT::Validators::MlcValidator *this)
{
  *(void *)this = &unk_1EE36AED0;
  uint64_t v2 = (void **)*((void *)this + 5);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_12:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_12;
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    operator delete(v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::MlcValidator *)((char *)this + 8));

  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
}

{
  void **v2;
  void *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE36AED0;
  uint64_t v2 = (void **)*((void *)this + 5);
  if (!v2)
  {
LABEL_2:
    uint64_t v3 = (void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v3) {
      operator delete(v3);
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::MlcValidator *)((char *)this + 8));
    Espresso::AOT::AbstractValidator::~AbstractValidator(this);
    JUMPOUT(0x192FF16B0);
  }
  while (1)
  {
    uint64_t v4 = (void **)*v2;
    if (*((char *)v2 + 63) < 0)
    {
      operator delete(v2[5]);
      if (*((char *)v2 + 39) < 0) {
LABEL_12:
      }
        operator delete(v2[2]);
    }
    else if (*((char *)v2 + 39) < 0)
    {
      goto LABEL_12;
    }
    operator delete(v2);
    uint64_t v2 = v4;
    if (!v4) {
      goto LABEL_2;
    }
  }
}

float Espresso::AOT::DTrees::lstmCpu()
{
  return 1.0;
}

float Espresso::AOT::DTrees::lstmGpu(uint64_t a1)
{
  float result = 5.0;
  if (*(double *)(a1 + 8) < 128.0) {
    return 0.5;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmCpuFp(uint64_t a1)
{
  float result = 0.062484;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 1.952;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmCpuIp(uint64_t a1)
{
  float result = 0.062634;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 2.0062;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmCpuJp(uint64_t a1)
{
  float result = 0.060813;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 4.012;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmCpuKp(uint64_t a1)
{
  float result = 0.06202;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 3.3098;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmCpuGp(uint64_t a1)
{
  float result = 0.064678;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 3.7468;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmCpuHp(uint64_t a1)
{
  float result = 0.06358;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 4.3615;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmGpuFp(uint64_t a1)
{
  float result = 0.027114;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 4.5486;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmGpuIp(uint64_t a1)
{
  float result = 0.024272;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 4.2935;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmGpuJp(uint64_t a1)
{
  float result = 0.020839;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 22.943;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmGpuKp(uint64_t a1)
{
  float result = 0.02051;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 11.866;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmGpuGp(uint64_t a1)
{
  float result = 0.025326;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 12.362;
  }
  return result;
}

float Espresso::AOT::DTrees::lstmGpuHp(uint64_t a1)
{
  float result = 0.025842;
  if (*(double *)(a1 + 32) > 64.9365) {
    return 22.586;
  }
  return result;
}

uint64_t Espresso::AOT::TensorBufferToTensorPlacementPass::MatchOp(Espresso::AOT::TensorBufferToTensorPlacementPass *this, MIL::Builder::OperationBuilder *a2)
{
  MIL::Builder::OperationBuilder::GetContext((uint64_t *)&__p, a2);
  uint64_t v3 = __p;
  uint64_t v4 = (std::__shared_weak_count *)v20;
  if (v20 && !atomic_fetch_add(v20 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  (*(void (**)(void **__return_ptr, void *))(*(void *)v3 + 24))(&__p, v3);
  uint64_t v5 = (std::string::size_type *)__p;
  uint64_t v6 = v20;
  if (__p == v20)
  {
LABEL_21:
    if (v5)
    {
      size_t v10 = v20;
      std::string v11 = v5;
      if (v20 != (atomic_ullong *)v5)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete((void *)*(v10 - 3));
          }
          v10 -= 3;
        }
        while (v10 != (atomic_ullong *)v5);
        std::string v11 = __p;
      }
      long long v20 = (atomic_ullong *)v5;
      operator delete(v11);
    }
    return 0;
  }
  while (1)
  {
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)*v5, v5[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v5;
      v18.__r_.__value_.__r.__words[2] = v5[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    }
    MIL::MILContext::GetOpset();
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v18.__r_.__value_.__r.__words[1] = xmmword_192DBD8E0;
    strcpy(v18.__r_.__value_.__l.__data_, "tensor_buffer_to_tensor");
    MIL::IROpset::TryGetOperatorSharedPtr();
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr((uint64_t *)&v18, a2);
    long long v8 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    if (v18.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v18.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v8 + 1) + 16))(*((void *)&v8 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
      long long v9 = v17;
      if (!v17) {
        goto LABEL_18;
      }
    }
    else
    {
      long long v9 = v17;
      if (!v17) {
        goto LABEL_18;
      }
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_18:
    if (v16 == (void)v8) {
      break;
    }
    v5 += 3;
    if (v5 == (std::string::size_type *)v6)
    {
      uint64_t v5 = (std::string::size_type *)__p;
      goto LABEL_21;
    }
  }
  int v12 = (atomic_ullong *)__p;
  if (__p)
  {
    uint64_t v13 = v20;
    uint64_t v14 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete((void *)*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = __p;
    }
    long long v20 = v12;
    operator delete(v14);
  }
  return 1;
}

void sub_1924B7A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1924B7AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1924B7ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ConstantPlacementPass::~ConstantPlacementPass(Espresso::AOT::ConstantPlacementPass *this)
{
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);

  JUMPOUT(0x192FF16B0);
}

void std::__function::__func<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EE379AF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379AF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_114CollectOpnamesERKN3MIL9IRProgramEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_114CollectOpnamesERKN3MIL9IRProgramEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_114CollectOpnamesERKN3MIL9IRProgramEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_114CollectOpnamesERKN3MIL9IRProgramEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(void **a1, void **a2, void **a3)
{
  uint64_t v5 = (void **)*a1;
  uint64_t v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0) {
        operator delete(*(v5 - 3));
      }
      v5 -= 3;
    }
    while (v5 != a2);
    uint64_t v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

void *Espresso::AOT::MILCompilerForBnns::MILCompilerForBnns(void *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  uint64_t v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  uint64_t v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  int v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v16;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  std::string v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      uint64_t v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_16:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      std::string v11 = v14;
    }
    while (v14);
  }
  int v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &unk_1EE36B330;
  Espresso::AOT::MILCompilerForBnns::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[46] = 0;
  a1[47] = 0;
  a1[48] = 0;
  return a1;
}

void sub_1924B7DE8(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_1924B7DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void Espresso::AOT::MILCompilerForBnns::ExtractOptions(Espresso::AOT::MILCompilerForBnns *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = this;
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)v43, this);
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(v3);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(void *)(Output + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)Output;
    *(void *)(a2 + 16) = *(void *)(Output + 16);
    *(_OWORD *)a2 = v6;
  }
  *(unsigned char *)(a2 + 24) = 0;
  char DumpIrOnly = Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly((Espresso::AOT::CompilerOptionsForE5 *)v43);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(unsigned char *)(a2 + 25) = DumpIrOnly;
  *(_OWORD *)(a2 + 80) = 0u;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 96) = 1065353216;
  __p[23] = 4;
  strcpy(__p, "bnns");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)v3, (uint64_t)__p, (uint64_t)v41);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 15;
  strcpy(__p, "compile-on-load");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v41, (uint64_t)__p);
  uint64_t v9 = v8;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v9) {
      goto LABEL_12;
    }
  }
  else if (!v8)
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)v9 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 24) = *((unsigned char *)v9 + 40);
LABEL_12:
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_192DAB6A0;
  strcpy(*(char **)__p, "experimental-target-override");
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v41, (uint64_t)__p);
  std::string v11 = v10;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v11) {
      goto LABEL_21;
    }
  }
  else if (!v10)
  {
    goto LABEL_21;
  }
  if (*((_DWORD *)v11 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v11 + 63) < 0)
  {
    if (v11[6]) {
      goto LABEL_19;
    }
LABEL_21:
    Platforms = (E5Common::E5PlatformManager *)Espresso::AOT::CompilerOptionsForE5::GetPlatforms((Espresso::AOT::CompilerOptionsForE5 *)v43);
    uint64_t v13 = Platforms;
    if (*((void *)Platforms + 3) != 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Only one platform is supported.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
    uint64_t v14 = E5Common::E5PlatformManager::Instance(Platforms);
    unint64_t v15 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 24))(v14, *((void *)v13 + 2) + 16);
    std::string::operator=((std::string *)(a2 + 32), v15);
    goto LABEL_23;
  }
  if (!*((unsigned char *)v11 + 63)) {
    goto LABEL_21;
  }
LABEL_19:
  std::string::operator=((std::string *)(a2 + 32), (const std::string *)(v11 + 5));
LABEL_23:
  __p[23] = 7;
  strcpy(__p, "options");
  uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v41, (uint64_t)__p);
  int v17 = v16;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v17) {
      goto LABEL_61;
    }
  }
  else if (!v16)
  {
    goto LABEL_61;
  }
  if (*((_DWORD *)v17 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  char v39 = 1;
  LOWORD(v37) = 44;
  E5Common::StringUtils::Split(v17 + 5, (char *)&v37, (uint64_t)__p);
  if (v39 < 0)
  {
    operator delete(v37);
    std::string v18 = *(uint64_t **)__p;
    unint64_t v19 = *(uint64_t **)&__p[8];
    if (*(void *)__p == *(void *)&__p[8])
    {
LABEL_30:
      if (v18) {
        goto LABEL_54;
      }
      goto LABEL_61;
    }
  }
  else
  {
    std::string v18 = *(uint64_t **)__p;
    unint64_t v19 = *(uint64_t **)&__p[8];
    if (*(void *)__p == *(void *)&__p[8]) {
      goto LABEL_30;
    }
  }
  unint64_t v35 = v3;
  do
  {
    *((unsigned char *)&v36.__r_.__value_.__s + 23) = 1;
    LOWORD(v36.__r_.__value_.__l.__data_) = 61;
    E5Common::StringUtils::Split(v18, (char *)&v36, (uint64_t)&v37);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v36.__r_.__value_.__l.__data_);
      int8x8_t v21 = (char *)v37;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (unsigned char *)v37) >> 3) < 2)
      {
LABEL_42:
        memset(&v36, 0, sizeof(v36));
        goto LABEL_44;
      }
    }
    else
    {
      int8x8_t v21 = (char *)v37;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (unsigned char *)v37) >> 3) < 2) {
        goto LABEL_42;
      }
    }
    if (v21[47] < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)v21 + 3), *((void *)v21 + 4));
      int8x8_t v21 = (char *)v37;
    }
    else
    {
      std::string v36 = *(std::string *)(v21 + 1);
    }
LABEL_44:
    uint64_t v44 = (long long *)v21;
    long long v22 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 64, (uint64_t)v21, (uint64_t)&std::piecewise_construct, &v44);
    unint64_t v23 = v22 + 5;
    if (*((char *)v22 + 63) < 0)
    {
      operator delete((void *)*v23);
      *(_OWORD *)unint64_t v23 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      size_t v24 = (void **)v37;
      v23[2] = v36.__r_.__value_.__r.__words[2];
      if (!v24) {
        goto LABEL_36;
      }
    }
    else
    {
      *(_OWORD *)unint64_t v23 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      size_t v24 = (void **)v37;
      v22[7] = v36.__r_.__value_.__r.__words[2];
      if (!v24) {
        goto LABEL_36;
      }
    }
    std::string v25 = v38;
    long long v20 = v24;
    if (v38 != v24)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      long long v20 = v37;
    }
    uint64_t v38 = v24;
    operator delete(v20);
LABEL_36:
    v18 += 3;
  }
  while (v18 != v19);
  std::string v18 = *(uint64_t **)__p;
  unint64_t v3 = v35;
  if (*(void *)__p)
  {
LABEL_54:
    uint64_t v26 = *(uint64_t **)&__p[8];
    std::string::size_type v27 = v18;
    if (*(uint64_t **)&__p[8] != v18)
    {
      do
      {
        if (*((char *)v26 - 1) < 0) {
          operator delete((void *)*(v26 - 3));
        }
        v26 -= 3;
      }
      while (v26 != v18);
      std::string::size_type v27 = *(uint64_t **)__p;
    }
    *(void *)&__p[8] = v18;
    operator delete(v27);
  }
LABEL_61:
  *(unsigned char *)(a2 + 56) = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(v3);
  uint64_t v28 = *(unsigned __int8 *)(a2 + 23);
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(a2 + 8);
  }
  if (!v28)
  {
    BOOL v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "--output is required and must be non-empty.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v33, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v29 = (void **)v42;
  if (v42)
  {
    do
    {
      uint64_t v30 = (void **)*v29;
      uint64_t v31 = *((unsigned int *)v29 + 16);
      if (v31 != -1) {
        ((void (*)(unsigned char *, void **))off_1EE39B878[v31])(__p, v29 + 5);
      }
      *((_DWORD *)v29 + 16) = -1;
      if (*((char *)v29 + 39) < 0) {
        operator delete(v29[2]);
      }
      operator delete(v29);
      uint64_t v29 = v30;
    }
    while (v30);
  }
  BOOL v32 = v41[0];
  v41[0] = 0;
  if (v32) {
    operator delete(v32);
  }
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)v43);
}

void sub_1924B8410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  __cxa_free_exception(v35);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a29);
  Espresso::AOT::MILCompilerForBnns::Options::~Options(v34);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)&a34);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForBnns::Options::AssertValid(uint64_t this)
{
  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(this + 23)) {
      return this;
    }
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!*(void *)(this + 8)) {
    goto LABEL_5;
  }
  return this;
}

void sub_1924B85A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForBnns::Options::~Options(Espresso::AOT::MILCompilerForBnns::Options *this)
{
  uint64_t v2 = (void **)*((void *)this + 10);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_12:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_12;
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  unint64_t v3 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0) {
    goto LABEL_14;
  }
}

void Espresso::AOT::MILCompilerForBnns::Run(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v97[3] = *MEMORY[0x1E4F143B8];
  uint64_t v92 = 0x2B2382DC00000000;
  long long v93 = 0u;
  long long v94 = 0u;
  kdebug_trace();
  long long v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5 == *a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "At least one entry point is needed.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  long long v89 = 0u;
  long long v90 = 0u;
  int v91 = 1065353216;
  do
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *))(*(void *)a2 + 64))(v87, a2, v6);
    *(void *)&long long __dst = v6;
    unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v89, v6, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
    long long v8 = *(_OWORD *)v87;
    *(_OWORD *)uint64_t v87 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 + 6);
    *(_OWORD *)(v7 + 40) = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      unint64_t v10 = *(std::__shared_weak_count **)&v87[8];
      if (!*(void *)&v87[8]) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v10 = *(std::__shared_weak_count **)&v87[8];
      if (!*(void *)&v87[8]) {
        goto LABEL_10;
      }
    }
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_10:
    Espresso::AOT::GetCallees(a2, (uint64_t)v87);
    std::string v11 = *(void **)&v87[16];
    if (*(void *)&v87[16])
    {
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>((uint64_t)&v89, (uint64_t)(v11 + 2), (uint64_t)(v11 + 2));
        std::string v11 = (void *)*v11;
      }
      while (v11);
      int v12 = *(void ***)&v87[16];
      if (*(void *)&v87[16])
      {
        do
        {
          while (1)
          {
            uint64_t v13 = (void **)*v12;
            uint64_t v14 = (std::__shared_weak_count *)v12[6];
            if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
            if (*((char *)v12 + 39) < 0) {
              break;
            }
            operator delete(v12);
            int v12 = v13;
            if (!v13) {
              goto LABEL_20;
            }
          }
          operator delete(v12[2]);
          operator delete(v12);
          int v12 = v13;
        }
        while (v13);
      }
    }
LABEL_20:
    unint64_t v15 = *(void **)v87;
    *(void *)uint64_t v87 = 0;
    if (v15) {
      operator delete(v15);
    }
    v6 += 24;
  }
  while (v6 != v5);
  memset(&v86, 0, sizeof(v86));
  char v16 = *(unsigned char *)(a1 + 287);
  if (v16 >= 0) {
    int v17 = (std::string *)(a1 + 264);
  }
  else {
    int v17 = *(std::string **)(a1 + 264);
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a1 + 287);
  }
  else {
    uint64_t v18 = *(void *)(a1 + 272);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v86.__pn_, v17, (std::string *)((char *)v17 + v18));
  unint64_t v19 = *a3;
  memset(v87, 0, 24);
  signed __int8 v20 = v19[23];
  if (v20 >= 0) {
    int8x8_t v21 = (std::string *)v19;
  }
  else {
    int8x8_t v21 = *(std::string **)v19;
  }
  if (v20 >= 0) {
    uint64_t v22 = v19[23];
  }
  else {
    uint64_t v22 = *((void *)v19 + 1);
  }
  std::string::append[abi:ne180100]<char const*,0>((std::string *)v87, v21, (std::string *)((char *)v21 + v22));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v87, (uint64_t)&v86, &v85);
  if ((v87[23] & 0x80000000) != 0) {
    operator delete(*(void **)v87);
  }
  std::__fs::filesystem::__create_directories(&v85, 0);
  (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
  MIL::IRTensorValueType::MakeScalar();
  (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
  MIL::IRDictionaryValueType::Make();
  memset(v87, 0, sizeof(v87));
  int v88 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a1 + 344); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string v84 = *(std::string *)(i + 2);
    }
    MIL::IRTensorValueType::MakeStringValue();
    if (*((char *)i + 63) < 0) {
      std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)i[5], i[6]);
    }
    else {
      std::string v83 = *(std::string *)(i + 5);
    }
    MIL::IRTensorValueType::MakeStringValue();
    *(void *)&long long __dst = v73.__pn_.__r_.__value_.__r.__words[0];
    if (v73.__pn_.__r_.__value_.__r.__words[0]) {
      operator new();
    }
    long long __dst = 0uLL;
    v73.__pn_.__r_.__value_.__r.__words[0] = 0;
    *(void *)&long long v81 = __base.__pn_.__r_.__value_.__r.__words[0];
    if (__base.__pn_.__r_.__value_.__r.__words[0]) {
      operator new();
    }
    long long v81 = 0uLL;
    __base.__pn_.__r_.__value_.__r.__words[0] = 0;
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>>((uint64_t)v87, (uint64_t)&__dst, (uint64_t)&__dst);
    size_t v24 = (std::__shared_weak_count *)*((void *)&v81 + 1);
    if (*((void *)&v81 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v81 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      std::string v25 = (std::__shared_weak_count *)*((void *)&__dst + 1);
      if (*((void *)&__dst + 1))
      {
LABEL_52:
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      std::string v25 = (std::__shared_weak_count *)*((void *)&__dst + 1);
      if (*((void *)&__dst + 1)) {
        goto LABEL_52;
      }
    }
    __base.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    v73.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v26 = (void *)v90;
  if ((void)v90)
  {
    while (2)
    {
      BYTE7(v81) = 11;
      strcpy((char *)&__dst, "BNNSOptions");
      uint64_t Attribute = MIL::IRObject::TryGetAttribute();
      uint64_t v28 = Attribute;
      if (SBYTE7(v81) < 0)
      {
        operator delete((void *)__dst);
        if (!v28) {
          goto LABEL_73;
        }
      }
      else if (!Attribute)
      {
LABEL_73:
        std::unordered_map<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>,MIL::IRValueMapHasher,MIL::IRValueMapEq,std::allocator<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>>>::unordered_map((uint64_t)&__dst, (uint64_t)v87);
        MIL::IRDictionaryValueType::MakeValue();
        v74.__pn_.__r_.__value_.__r.__words[0] = v73.__pn_.__r_.__value_.__r.__words[0];
        if (v73.__pn_.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        *(_OWORD *)&v74.__pn_.__r_.__value_.__l.__data_ = 0uLL;
        v76[23] = 11;
        v75[2] = 0;
        strcpy(v76, "BNNSOptions");
        v75[1] = 0;
        MIL::IRObject::SetAttribute();
        goto LABEL_61;
      }
      uint64_t v29 = (MIL::IRDictionaryValue *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 64))(v28);
      uint64_t v30 = v29;
      if (!v29) {
        goto LABEL_73;
      }
      long long __dst = 0u;
      long long v81 = 0u;
      int v82 = 1065353216;
      uint64_t v31 = (void *)MIL::IRDictionaryValue::begin(v29);
      for (j = MIL::IRDictionaryValue::end(v30); v31 != (void *)j; uint64_t v31 = (void *)*v31)
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>> const&>((uint64_t)&__dst, (uint64_t)(v31 + 2), v31 + 2);
      BOOL v33 = *(void **)&v87[16];
      if (*(void *)&v87[16])
      {
        do
        {
          std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>> const&>((uint64_t)&__dst, (uint64_t)(v33 + 2), v33 + 2);
          BOOL v33 = (void *)*v33;
        }
        while (v33);
      }
      MIL::IRDictionaryValueType::MakeValue();
      v74.__pn_.__r_.__value_.__r.__words[0] = v73.__pn_.__r_.__value_.__r.__words[0];
      if (v73.__pn_.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      *(_OWORD *)&v74.__pn_.__r_.__value_.__l.__data_ = 0uLL;
      v79[23] = 11;
      uint64_t v78 = 0;
      strcpy(v79, "BNNSOptions");
      uint64_t v77 = 0;
      MIL::IRObject::SetAttribute();
LABEL_61:
      std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&__dst);
      uint64_t v26 = (void *)*v26;
      if (!v26) {
        break;
      }
      continue;
    }
  }
  Espresso::AOT::MakeIRProgramWithFunctions((uint64_t)&v89, 0, v75);
  unint64_t v34 = (char *)a1;
  if (!*(unsigned char *)(a1 + 288) && !*(unsigned char *)(a1 + 289))
  {
    long long __dst = 0uLL;
    *(void *)&long long v81 = 0;
    std::string::append[abi:ne180100]<char const*,0>((std::string *)&__dst, (std::string *)"bnns_program.bnnsir", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v85, &v74);
    if (SBYTE7(v81) < 0) {
      operator delete((void *)__dst);
    }
    std::__fs::filesystem::path::__string_view v43 = std::__fs::filesystem::path::__parent_path(&v86);
    if (v43.__size_ > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v43.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v45 = (v43.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v45 = v43.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v46 = v45 + 1;
      p_dst = (long long *)operator new(v45 + 1);
      *((void *)&__dst + 1) = v43.__size_;
      *(void *)&long long v81 = v46 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      BYTE7(v81) = v43.__size_;
      p_dst = &__dst;
      if (!v43.__size_)
      {
LABEL_142:
        *((unsigned char *)p_dst + v43.__size_) = 0;
        *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_ = __dst;
        __base.__pn_.__r_.__value_.__r.__words[2] = v81;
        std::__fs::filesystem::path::lexically_relative(&v73, &v74, &__base);
        if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__base.__pn_.__r_.__value_.__l.__data_);
        }
        uint64_t v47 = MEMORY[0x1E4F1CC38];
        v97[0] = MEMORY[0x1E4F1CC38];
        v96[0] = E5Common::kBnnsGraphPrecompiledStrKey[0];
        v96[1] = E5Common::kBnnsGraphOutputPathStrKey[0];
        int v48 = NSString;
        int v49 = SHIBYTE(v74.__pn_.__r_.__value_.__r.__words[2]);
        std::string::size_type v50 = v74.__pn_.__r_.__value_.__r.__words[0];
        uint64_t v51 = objc_msgSend(NSString, "defaultCStringEncoding", a1);
        if (v49 >= 0) {
          size_t v52 = &v74;
        }
        else {
          size_t v52 = (std::__fs::filesystem::path *)v50;
        }
        uint64_t v53 = [v48 stringWithCString:v52 encoding:v51];
        size_t v54 = (void *)v53;
        v96[2] = E5Common::kBnnsGraphGenerateDebugInfoKey;
        if (v34[320]) {
          uint64_t v55 = v47;
        }
        else {
          uint64_t v55 = MEMORY[0x1E4F1CC28];
        }
        v97[1] = v53;
        v97[2] = v55;
        BOOL v56 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v97 forKeys:v96 count:3];
        BOOL v57 = (void *)[v56 mutableCopy];

        if (!Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)v34))
        {
          uint64_t v58 = v34 + 296;
          if (v34[319] < 0) {
            uint64_t v58 = (void *)*v58;
          }
          uint64_t v59 = objc_msgSend(NSString, "stringWithCString:encoding:", v58, objc_msgSend(NSString, "defaultCStringEncoding"));
          [v57 setObject:v59 forKeyedSubscript:E5Common::kBnnsGraphTargetStrKey[0]];
        }
        BYTE7(v81) = 0;
        LOBYTE(__dst) = 0;
        E5Common::CreateBnnsGraphProgramFromMIL(v75[0], (uint64_t)&__dst, v57);
      }
    }
    memmove(p_dst, v43.__data_, v43.__size_);
    goto LABEL_142;
  }
  long long __dst = 0uLL;
  *(void *)&long long v81 = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&__dst, (std::string *)"bnns_program.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v85, &v74);
  if (SBYTE7(v81) < 0) {
    operator delete((void *)__dst);
  }
  std::__fs::filesystem::path::__string_view v35 = std::__fs::filesystem::path::__parent_path(&v86);
  if (v35.__size_ > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v35.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v37 = (v35.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v37 = v35.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v38 = v37 + 1;
    std::string v36 = (long long *)operator new(v37 + 1);
    *((void *)&__dst + 1) = v35.__size_;
    *(void *)&long long v81 = v38 | 0x8000000000000000;
    *(void *)&long long __dst = v36;
    goto LABEL_88;
  }
  BYTE7(v81) = v35.__size_;
  std::string v36 = &__dst;
  if (v35.__size_) {
LABEL_88:
  }
    memmove(v36, v35.__data_, v35.__size_);
  *((unsigned char *)v36 + v35.__size_) = 0;
  *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_ = __dst;
  __base.__pn_.__r_.__value_.__r.__words[2] = v81;
  std::__fs::filesystem::path::lexically_relative(&v73, &v74, &__base);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  }
  memset(&__base, 0, sizeof(__base));
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"weights.bin", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&v85, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_95;
    }
LABEL_93:
    std::__fs::filesystem::path __base = v73;
  }
  else
  {
    if ((SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_93;
    }
LABEL_95:
    std::string::__init_copy_ctor_external(&__base.__pn_, v73.__pn_.__r_.__value_.__l.__data_, v73.__pn_.__r_.__value_.__l.__size_);
  }
  char v39 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*v39);
  }
  *(_OWORD *)char v39 = *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_;
  *(void *)(a1 + 384) = *((void *)&__base.__pn_.__r_.__value_.__l + 2);
  uint64_t v40 = v75[0];
  if (SHIBYTE(v74.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v74.__pn_.__r_.__value_.__l.__data_, v74.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v74.__pn_;
  }
  if (SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v70, v85.__pn_.__r_.__value_.__l.__data_, v85.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v70 = v85.__pn_;
  }
  if (Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1))
  {
    memset(&__base, 0, sizeof(__base));
    std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"", (std::string *)"");
  }
  else if (SBYTE7(v81) < 0)
  {
    std::string::__init_copy_ctor_external(&__base.__pn_, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_ = __dst;
    __base.__pn_.__r_.__value_.__r.__words[2] = v81;
  }
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v69, __base.__pn_.__r_.__value_.__l.__data_, __base.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v69 = __base.__pn_;
  }
  Espresso::MILUtil::SerializeProgram(v40, (uint64_t)&pn, (uint64_t)&v70, (uint64_t)&v69, 0x100000004, 0);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_119;
    }
LABEL_114:
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_115;
    }
LABEL_120:
    operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_121;
    }
LABEL_116:
    if ((SHIBYTE(v74.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_117;
    }
LABEL_122:
    std::string::__init_copy_ctor_external(&v68, v74.__pn_.__r_.__value_.__l.__data_, v74.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_114;
    }
LABEL_119:
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_120;
    }
LABEL_115:
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_116;
    }
LABEL_121:
    operator delete(pn.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_122;
    }
LABEL_117:
    std::string v68 = v74.__pn_;
  }
  __base.__pn_ = v68;
  memset(&v68, 0, sizeof(v68));
  std::__fs::filesystem::__status(&__base, 0);
  unsigned __int8 v41 = v95;
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
LABEL_128:
    operator delete(v68.__r_.__value_.__l.__data_);
    int v42 = v41;
    if (v41 != 255) {
      goto LABEL_129;
    }
LABEL_180:
    size_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v65, "Failed in serializing BNNS MIL program on disk.");
    __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_128;
  }
LABEL_125:
  int v42 = v41;
  if (v41 == 255) {
    goto LABEL_180;
  }
LABEL_129:
  if (!v42) {
    goto LABEL_180;
  }
  if (SBYTE7(v81) < 0) {
    operator delete((void *)__dst);
  }
  if ((SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v74.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_157;
    }
LABEL_164:
    operator delete(v74.__pn_.__r_.__value_.__l.__data_);
    uint64_t v60 = v75[0];
    v75[0] = 0;
    if (!v60) {
      goto LABEL_159;
    }
LABEL_158:
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
    goto LABEL_159;
  }
  operator delete(v73.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_164;
  }
LABEL_157:
  uint64_t v60 = v75[0];
  v75[0] = 0;
  if (v60) {
    goto LABEL_158;
  }
LABEL_159:
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v87);
  if (SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v85.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v86.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_161;
    }
    goto LABEL_167;
  }
  if (SHIBYTE(v86.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_167:
    operator delete(v86.__pn_.__r_.__value_.__l.__data_);
    uint64_t v61 = (void **)v90;
    if ((void)v90) {
      goto LABEL_171;
    }
    goto LABEL_175;
  }
LABEL_161:
  uint64_t v61 = (void **)v90;
  if ((void)v90)
  {
    do
    {
      while (1)
      {
LABEL_171:
        int v62 = (void **)*v61;
        size_t v63 = (std::__shared_weak_count *)v61[6];
        if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        if (*((char *)v61 + 39) < 0) {
          break;
        }
        operator delete(v61);
        uint64_t v61 = v62;
        if (!v62) {
          goto LABEL_175;
        }
      }
      operator delete(v61[2]);
      operator delete(v61);
      uint64_t v61 = v62;
    }
    while (v62);
  }
LABEL_175:
  long long v64 = (void *)v89;
  *(void *)&long long v89 = 0;
  if (v64) {
    operator delete(v64);
  }
  if (E5RT::g_trace_analysis_level >= v92) {
    kdebug_trace();
  }
}

void sub_1924B9870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8))(a42);
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a75);
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0)
  {
    operator delete(a73);
    std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v76 - 240);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v76 - 200));
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v76 - 240);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v76 - 200));
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForBnns::GetOutputPaths(Espresso::AOT::MILCompilerForBnns *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 391) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 46), *((void *)this + 47));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 368);
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1924B9DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForBnns::GetOptions(Espresso::AOT::MILCompilerForBnns *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForBnns::~MILCompilerForBnns(void **this)
{
  Espresso::AOT::MILCompilerForBnns::~MILCompilerForBnns(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  void *v3;
  void **v4;
  Espresso::AOT::AOTCompilerBackend *v5;
  void **v6;
  void **v7;
  void *v8;
  uint64_t vars8;

  *this = &unk_1EE36B330;
  if (*((char *)this + 391) < 0)
  {
    operator delete(this[46]);
    uint64_t v2 = (void **)this[43];
    if (!v2) {
      goto LABEL_5;
    }
    while (1)
    {
LABEL_16:
      long long v6 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_20:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_20;
      }
      operator delete(v2);
      uint64_t v2 = v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v2 = (void **)this[43];
  if (v2) {
    goto LABEL_16;
  }
LABEL_5:
  unint64_t v3 = this[41];
  this[41] = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*((char *)this + 319) < 0)
  {
    operator delete(this[37]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_9:
      *this = &unk_1EE36B370;
      uint64_t v4 = (void **)this[29];
      if (!v4) {
        goto LABEL_10;
      }
LABEL_23:
      unint64_t v7 = (void **)this[30];
      if (v7 == v4)
      {
        this[30] = v4;
        operator delete(v4);
        if (*((char *)this + 231) < 0) {
          goto LABEL_30;
        }
      }
      else
      {
        do
        {
          if (*((char *)v7 - 1) < 0) {
            operator delete(*(v7 - 3));
          }
          v7 -= 3;
        }
        while (v7 != v4);
        long long v8 = this[29];
        this[30] = v4;
        operator delete(v8);
        if (*((char *)this + 231) < 0) {
          goto LABEL_30;
        }
      }
LABEL_11:
      if ((*((char *)this + 207) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_31;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(this[33]);
  *this = &unk_1EE36B370;
  uint64_t v4 = (void **)this[29];
  if (v4) {
    goto LABEL_23;
  }
LABEL_10:
  if ((*((char *)this + 231) & 0x80000000) == 0) {
    goto LABEL_11;
  }
LABEL_30:
  operator delete(this[26]);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_12:
    uint64_t v5 = (Espresso::AOT::AOTCompilerBackend *)this;
    goto LABEL_14;
  }
LABEL_31:
  operator delete(this[23]);
  uint64_t v5 = (Espresso::AOT::AOTCompilerBackend *)this;

LABEL_14:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v5);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (void *)(a1 + 24);
  unint64_t v7 = MIL::IRValueMapHasher::operator()();
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    std::string v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (MIL::IRValueMapEq::operator()()) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (MIL::IRValueMapEq::operator()()) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  unint64_t v15 = (void *)(a1 + 16);
  char v16 = operator new(0x30uLL);
  int v12 = v16;
  *char v16 = 0;
  v16[1] = v8;
  uint64_t v17 = *(void *)(a3 + 8);
  v16[2] = *(void *)a3;
  v16[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v9 && (float)(v19 * (float)v9) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    int8x8_t v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_28:
      *int v12 = *v21;
LABEL_63:
      *int8x8_t v21 = v12;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_39:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v20 = *(void *)a1;
        int8x8_t v21 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v21) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v20 = *(void *)a1;
        int8x8_t v21 = *(void **)(*(void *)a1 + 8 * v8);
        if (v21) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v8;
      uint64_t v20 = *(void *)a1;
      int8x8_t v21 = *(void **)(*(void *)a1 + 8 * (v30 & v8));
      if (v21) {
        goto LABEL_28;
      }
    }
  }
  *int v12 = *v15;
  void *v15 = v12;
  *(void *)(v20 + 8 * v3) = v15;
  if (*v12)
  {
    unint64_t v31 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9) {
        v31 %= v9;
      }
    }
    else
    {
      v31 &= v9 - 1;
    }
    int8x8_t v21 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_63;
  }
LABEL_64:
  ++*v6;
  return v12;
}

void sub_1924BA394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>> const&>(uint64_t a1, uint64_t a2, void *a3)
{
  long long v6 = (void *)(a1 + 24);
  unint64_t v7 = MIL::IRValueMapHasher::operator()();
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    std::string v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (MIL::IRValueMapEq::operator()()) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (MIL::IRValueMapEq::operator()()) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  unint64_t v15 = (void *)(a1 + 16);
  char v16 = operator new(0x30uLL);
  int v12 = v16;
  *char v16 = 0;
  v16[1] = v8;
  uint64_t v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = a3[3];
  v16[4] = a3[2];
  v16[5] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_30:
      *int v12 = *v22;
LABEL_65:
      *BOOL v22 = v12;
      goto LABEL_66;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v27) {
      goto LABEL_41;
    }
    if (prime < *(void *)&v27)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v27 < 3uLL || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < *(void *)&v27) {
LABEL_41:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v31 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v8;
      uint64_t v21 = *(void *)a1;
      BOOL v22 = *(void **)(*(void *)a1 + 8 * (v31 & v8));
      if (v22) {
        goto LABEL_30;
      }
    }
  }
  *int v12 = *v15;
  void *v15 = v12;
  *(void *)(v21 + 8 * v3) = v15;
  if (*v12)
  {
    unint64_t v32 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9) {
        v32 %= v9;
      }
    }
    else
    {
      v32 &= v9 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_65;
  }
LABEL_66:
  ++*v6;
  return v12;
}

void sub_1924BA714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>,MIL::IRValueMapHasher,MIL::IRValueMapEq,std::allocator<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>> const&>(a1, (uint64_t)(i + 2), i + 2);
  return a1;
}

void sub_1924BA844(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1924BA858(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  operator delete(*(void **)a1);
  return a1;
}

void Espresso::AOT::Backends::CostModel::anonymous namespace'::DecisionTreeGroup::~DecisionTreeGroup(Espresso::AOT::Backends::CostModel::_anonymous_namespace_::DecisionTreeGroup *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::~__func()
{
}

void *std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EE377F70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC1539) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC1539 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC1539)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC1539 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::target_type()
{
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 80);
      if (v3 != v2 + 56)
      {
        if (v3) {
          (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
        }
        if ((*(char *)(v2 + 55) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_10;
      }
      (*(void (**)(uint64_t))(*(void *)(v2 + 56) + 32))(v2 + 56);
      if (*(char *)(v2 + 55) < 0) {
LABEL_10:
      }
        operator delete(*(void **)(v2 + 32));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

void E5AOT::Operators::E5ML_ios16::CustomValidators::ValidateCast(E5AOT::Operators::E5ML_ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  *((unsigned char *)&v56.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v56, "execution_device");
  uint64_t Attribute = MIL::IRObject::TryGetAttribute();
  if (Attribute)
  {
    BOOL v6 = (unsigned int *)MEMORY[0x192FF0A10](Attribute);
    if (v6)
    {
      unint64_t v7 = v6;
      if (*v6 == 1)
      {
        MIL::ValidationResult::ValidationResult(a2);
        goto LABEL_25;
      }
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v14 = (std::__shared_weak_count *)LocationPtr[1];
      uint64_t v54 = *LocationPtr;
      uint64_t v55 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v53, *v7);
      unint64_t v15 = std::string::insert(&v53, 0, "Unexpected value for execution_device: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x192FEF370](a2, &v54, 307, &v56);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          std::string::size_type size = v55;
          if (!v55) {
            goto LABEL_25;
          }
          goto LABEL_23;
        }
      }
      else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(v53.__r_.__value_.__l.__data_);
      std::string::size_type size = v55;
      if (!v55) {
        goto LABEL_25;
      }
LABEL_23:
      if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
      goto LABEL_25;
    }
    uint8x8_t v10 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
    std::string::size_type v11 = v10[1];
    v53.__r_.__value_.__r.__words[0] = *v10;
    v53.__r_.__value_.__l.__size_ = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&v56.__r_.__value_.__r.__words[1] = xmmword_192DA88C0;
    strcpy(v56.__r_.__value_.__l.__data_, "Attribute execution_device must be an integer");
    MEMORY[0x192FEF370](a2, &v53, 306, &v56);
  }
  else
  {
    uint8x8_t v8 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
    std::string::size_type v9 = v8[1];
    v53.__r_.__value_.__r.__words[0] = *v8;
    v53.__r_.__value_.__l.__size_ = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v56.__r_.__value_.__r.__words[1] = xmmword_192DAB6B0;
    strcpy(v56.__r_.__value_.__l.__data_, "Missing attribute execution_device");
    MEMORY[0x192FEF370](a2, &v53, 321, &v56);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
  if (v53.__r_.__value_.__l.__size_) {
    goto LABEL_23;
  }
LABEL_25:
  if (!MIL::ValidationResult::IsGood(a2)) {
    return;
  }
  MEMORY[0x192FEF390](a2);
  if ((*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(void *)this + 192))(this) != 1)
  {
    int8x8_t v27 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    unint64_t v28 = (std::__shared_weak_count *)v27[1];
    uint64_t v51 = *v27;
    size_t v52 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v29 = (*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(void *)this + 192))(this);
    std::to_string(&v56, v29);
    uint64_t v30 = std::string::insert(&v56, 0, "Unexpected number of outputs: ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    std::string::size_type v50 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x192FEF370](a2, &v51, 315, __p);
    if (SHIBYTE(v50) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_40:
        unint64_t v32 = v52;
        if (!v52) {
          return;
        }
        goto LABEL_63;
      }
    }
    else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_40;
    }
    operator delete(v56.__r_.__value_.__l.__data_);
    unint64_t v32 = v52;
    if (!v52) {
      return;
    }
    goto LABEL_63;
  }
  *((unsigned char *)&v56.__r_.__value_.__s + 23) = 1;
  LOWORD(v56.__r_.__value_.__l.__data_) = 120;
  Parameteruint64_t Type = MIL::IROperation::GetParameterType();
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(void *)this + 176))(this);
  if (*(void *)(v18 + 8) == *(void *)v18) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t Type = MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v18);
  uint64_t v20 = (*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(void *)this + 64))(this);
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 64))(v20);
  *((unsigned char *)&v56.__r_.__value_.__s + 23) = 1;
  LOWORD(v56.__r_.__value_.__l.__data_) = 120;
  BOOL v22 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v21, (unsigned __int8 *)&v56);
  if (!v22) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  char v23 = (*(uint64_t (**)(void, uint64_t))(**((void **)v22 + 5) + 72))(*((void *)v22 + 5), ParameterType);
  char v24 = v23;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if (v24) {
      goto LABEL_33;
    }
LABEL_46:
    BOOL v33 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    unint64_t v34 = (std::__shared_weak_count *)v33[1];
    uint64_t v47 = *v33;
    int v48 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)ParameterType + 56))(&v56, ParameterType);
    std::__fs::filesystem::path::__string_view v35 = std::string::insert(&v56, 0, "Invalid input type '");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    std::string::size_type v46 = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::basic_string_view<_CharT, _Traits>::size_type v45 = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x192FEF370](a2, &v47, 315, v45);
    if (SHIBYTE(v46) < 0)
    {
      operator delete(v45[0]);
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_50:
        unint64_t v32 = v48;
        if (!v48) {
          return;
        }
        goto LABEL_63;
      }
    }
    else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_50;
    }
    operator delete(v56.__r_.__value_.__l.__data_);
    unint64_t v32 = v48;
    if (!v48) {
      return;
    }
    goto LABEL_63;
  }
  if ((v23 & 1) == 0) {
    goto LABEL_46;
  }
LABEL_33:
  uint64_t v25 = (*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(void *)this + 64))(this);
  int8x8_t v26 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 80))(v25);
  if (v26[1] == *v26) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if ((*(uint64_t (**)(void, uint64_t))(*(void *)**v26 + 72))(**v26, Type))
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  std::basic_string_view<_CharT, _Traits>::size_type v37 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  std::basic_string_view<_CharT, _Traits>::size_type v38 = (std::__shared_weak_count *)v37[1];
  uint64_t v43 = *v37;
  uint64_t v44 = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)Type + 56))(&v56, Type);
  char v39 = std::string::insert(&v56, 0, "Invalid output type '");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  std::string::size_type v42 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)unsigned __int8 v41 = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x192FEF370](a2, &v43, 313, v41);
  if (SHIBYTE(v42) < 0)
  {
    operator delete(v41[0]);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      unint64_t v32 = v44;
      if (!v44) {
        return;
      }
      goto LABEL_63;
    }
  }
  else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  unint64_t v32 = v44;
  if (!v44) {
    return;
  }
LABEL_63:
  if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
}

void sub_1924BB298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1924BB3EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC1620) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC1620 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC1620)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC1620 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EE377730;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC16E3) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC16E3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC16E3)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC16E3 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t E5AOT::Operators::E5ML_ios16::Cast::Make(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

float Espresso::AOT::DTrees::reduce_sumAneCp()
{
  return 22.0;
}

float Espresso::AOT::DTrees::reduce_sumAneDp()
{
  return 22.0;
}

float Espresso::AOT::DTrees::reduce_sumAneEp()
{
  return 22.0;
}

float Espresso::AOT::DTrees::reduce_sumCpuCp()
{
  return 12.0;
}

float Espresso::AOT::DTrees::reduce_sumCpuDp()
{
  return 12.0;
}

float Espresso::AOT::DTrees::reduce_sumGpuCp()
{
  return 18.0;
}

float Espresso::AOT::DTrees::reduce_sumGpuDp()
{
  return 18.0;
}

float Espresso::AOT::DTrees::reduce_sumGpuEp()
{
  return 18.0;
}

void Espresso::AOT::AOTCompilerOptionsManager::~AOTCompilerOptionsManager(cxxopts::Options **this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Espresso::AOT::AOTCompilerOptionsManager::Impl>::operator()[abi:ne180100]((int)this, v1);
  }
}

{
  cxxopts::Options *v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Espresso::AOT::AOTCompilerOptionsManager::Impl>::operator()[abi:ne180100]((int)this, v1);
  }
}

void Espresso::AOT::AOTCompilerOptionsManager::AOTCompilerOptionsManager()
{
}

{
  std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>();
}

void std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>()
{
}

void sub_1924BB758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>((uint64_t)&a16);
  MEMORY[0x192FF16B0](v16, 0x10B2C4059EA387FLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptionsManager::AddOption(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOption(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 0:
      __int16 v24 = 261;
      strcpy(v23, "false");
      LOBYTE(v20) = 0;
      char v22 = 0;
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(a1, a2, a3, 0, (uint64_t)v23, (uint64_t)&v20);
      if (v22 && v21 < 0) {
        operator delete(v20);
      }
      if (HIBYTE(v24) && (char)v24 < 0)
      {
        uint64_t v4 = (void **)v23;
        goto LABEL_26;
      }
      break;
    case 1:
      v18[0] = 0;
      char v19 = 0;
      LOBYTE(__p) = 0;
      char v17 = 0;
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(a1, a2, a3, 1, (uint64_t)v18, (uint64_t)&__p);
      if (v17 && v16 < 0) {
        operator delete(__p);
      }
      if (v19 && (v18[23] & 0x80000000) != 0)
      {
        uint64_t v4 = (void **)v18;
        goto LABEL_26;
      }
      break;
    case 2:
      v13[0] = 0;
      char v14 = 0;
      LOBYTE(v10) = 0;
      char v12 = 0;
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(a1, a2, a3, 2, (uint64_t)v13, (uint64_t)&v10);
      if (v12 && v11 < 0) {
        operator delete(v10);
      }
      if (v14 && (v13[23] & 0x80000000) != 0)
      {
        uint64_t v4 = (void **)v13;
        goto LABEL_26;
      }
      break;
    case 3:
      v8[0] = 0;
      char v9 = 0;
      LOBYTE(v5) = 0;
      char v7 = 0;
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(a1, a2, a3, 3, (uint64_t)v8, (uint64_t)&v5);
      if (v7 && v6 < 0) {
        operator delete(v5);
      }
      if (v9 && (v8[23] & 0x80000000) != 0)
      {
        uint64_t v4 = (void **)v8;
LABEL_26:
        operator delete(*v4);
      }
      break;
    default:
      return;
  }
}

void sub_1924BB97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a15 && a14 < 0) {
    operator delete(__p);
  }
  if (a23)
  {
    if (a22 < 0) {
      operator delete(a17);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  LOBYTE(__p) = 0;
  char v8 = 0;
  Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionWithDefaultAndImplicit(v5, a2, a3, a4, a5, (uint64_t)&__p);
  if (v8)
  {
    if (v7 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1924BBABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionWithDefaultAndImplicit(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  switch(a4)
  {
    case 0:
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
        char v26 = 1;
        v23.__r_.__value_.__s.__data_[0] = 0;
        char v24 = 0;
        if (!*(unsigned char *)(a6 + 24)) {
          goto LABEL_44;
        }
      }
      else
      {
        std::string v25 = *(std::string *)a5;
        char v26 = 1;
        v23.__r_.__value_.__s.__data_[0] = 0;
        char v24 = 0;
        if (!*(unsigned char *)(a6 + 24)) {
          goto LABEL_44;
        }
      }
      if (*(char *)(a6 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
      }
      else {
        std::string v23 = *(std::string *)a6;
      }
      char v24 = 1;
LABEL_44:
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(a1, a2, a3, 0, (uint64_t)&v25, (uint64_t)&v23);
      if (v24 && SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (v26 && SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        uint8x8_t v10 = &v25;
        goto LABEL_58;
      }
      return;
    case 1:
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
        char v22 = 1;
        v19.__r_.__value_.__s.__data_[0] = 0;
        char v20 = 0;
        if (!*(unsigned char *)(a6 + 24)) {
          goto LABEL_52;
        }
      }
      else
      {
        std::string v21 = *(std::string *)a5;
        char v22 = 1;
        v19.__r_.__value_.__s.__data_[0] = 0;
        char v20 = 0;
        if (!*(unsigned char *)(a6 + 24)) {
          goto LABEL_52;
        }
      }
      if (*(char *)(a6 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
      }
      else {
        std::string v19 = *(std::string *)a6;
      }
      char v20 = 1;
LABEL_52:
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(a1, a2, a3, 1, (uint64_t)&v21, (uint64_t)&v19);
      if (v20 && SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (v22 && SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      {
        uint8x8_t v10 = &v21;
        goto LABEL_58;
      }
      return;
    case 2:
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
        char v18 = 1;
        v15.__r_.__value_.__s.__data_[0] = 0;
        char v16 = 0;
        if (!*(unsigned char *)(a6 + 24)) {
          goto LABEL_28;
        }
      }
      else
      {
        std::string v17 = *(std::string *)a5;
        char v18 = 1;
        v15.__r_.__value_.__s.__data_[0] = 0;
        char v16 = 0;
        if (!*(unsigned char *)(a6 + 24)) {
          goto LABEL_28;
        }
      }
      if (*(char *)(a6 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
      }
      else {
        std::string v15 = *(std::string *)a6;
      }
      char v16 = 1;
LABEL_28:
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(a1, a2, a3, 2, (uint64_t)&v17, (uint64_t)&v15);
      if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v18 && SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      {
        uint8x8_t v10 = &v17;
        goto LABEL_58;
      }
      return;
    case 3:
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
        char v14 = 1;
        __p.__r_.__value_.__s.__data_[0] = 0;
        char v12 = 0;
        if (!*(unsigned char *)(a6 + 24)) {
          goto LABEL_36;
        }
      }
      else
      {
        std::string v13 = *(std::string *)a5;
        char v14 = 1;
        __p.__r_.__value_.__s.__data_[0] = 0;
        char v12 = 0;
        if (!*(unsigned char *)(a6 + 24)) {
          goto LABEL_36;
        }
      }
      if (*(char *)(a6 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
      }
      else {
        std::string __p = *(std::string *)a6;
      }
      char v12 = 1;
LABEL_36:
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(a1, a2, a3, 3, (uint64_t)&v13, (uint64_t)&__p);
      if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v14 && SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      {
        uint8x8_t v10 = &v13;
LABEL_58:
        operator delete(v10->__r_.__value_.__l.__data_);
      }
      return;
    default:
      return;
  }
}

void sub_1924BBEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  if (a49 && a48 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v49 - 120))
  {
    if (*(char *)(v49 - 121) < 0) {
      operator delete(*(void **)(v49 - 144));
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefaultAndImplicit(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string __p = *(std::string *)a6;
  }
  char v12 = 1;
  Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionWithDefaultAndImplicit(v10, a2, a3, a4, a5, (uint64_t)&__p);
  if (v12)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1924BC068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Parse(Espresso::AOT::AOTCompilerOptionsManager::Impl **a1@<X0>, uint64_t *a2@<X1>, Espresso::AOT::AOTCompilerOptions *a3@<X8>)
{
  long long v40 = 0;
  unsigned __int8 v41 = 0;
  uint64_t v42 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v5 = (char *)v40;
  char v6 = v41;
  uint64_t v7 = v41 - (unsigned char *)v40;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (unsigned char *)v40) >> 3);
  unint64_t v9 = v8 + 1;
  if (v8 == -1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    if (v9 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    char v12 = (char *)operator new(8 * v9);
    uint64_t v10 = v12;
    uint64_t v11 = (uint64_t)&v12[8 * v8 + 8];
    std::string __p = (char **)v12;
    char v39 = (char *)v11;
    if (v7 >= -23)
    {
      *(void *)char v12 = 0;
      std::string v13 = v12 + 8;
      goto LABEL_14;
    }
  }
  uint64_t v14 = v11 - (void)v10;
  uint64_t v15 = v14 >> 2;
  if ((unint64_t)(v14 >> 2) <= 1) {
    uint64_t v15 = 1;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  std::string v17 = operator new(8 * v16);
  *std::string v17 = 0;
  std::string v13 = (char *)(v17 + 1);
  std::string __p = (char **)v17;
  char v39 = (char *)&v17[v16];
  if (v10)
  {
    operator delete(v10);
    uint64_t v5 = (char *)v40;
    char v6 = v41;
  }
LABEL_14:
  std::basic_string_view<_CharT, _Traits>::size_type v37 = a3;
  if (v5 == v6)
  {
    uint64_t v18 = (uint64_t)v13;
LABEL_50:
    Espresso::AOT::AOTCompilerOptionsManager::Impl::Parse(*a1, __p, (unint64_t)(v18 - (void)__p) >> 3, v37);
  }
  while (1)
  {
    std::string v19 = v5;
    if (v5[23] < 0)
    {
      std::string v19 = *(char **)v5;
      char v20 = v39;
      if (v13 >= v39)
      {
LABEL_22:
        uint64_t v21 = (v13 - (char *)__p) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v20 - (char *)__p;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          if (v24 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string v25 = operator new(8 * v24);
          char v26 = (char **)&v25[8 * v21];
          int8x8_t v27 = &v25[8 * v24];
          *char v26 = v19;
          uint64_t v18 = (uint64_t)(v26 + 1);
          if (v13 != (char *)__p)
          {
LABEL_31:
            unint64_t v28 = v13 - 8 - (char *)__p;
            if (v28 < 0x168)
            {
              unint64_t v29 = (char **)v13;
              goto LABEL_33;
            }
            if (&v25[v13 - (char *)__p - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v25[v13 - (char *)__p - 8])
            {
              unint64_t v29 = (char **)v13;
              goto LABEL_33;
            }
            if (&v13[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v13 - 8)
            {
              unint64_t v29 = (char **)v13;
              goto LABEL_33;
            }
            if ((unint64_t)((char *)__p - v25) < 0x20)
            {
              unint64_t v29 = (char **)v13;
              goto LABEL_33;
            }
            uint64_t v31 = (v28 >> 3) + 1;
            uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v29 = (char **)&v13[-v32];
            char v26 = (char **)((char *)v26 - v32);
            uint64_t v33 = &v25[8 * v21 - 16];
            unint64_t v34 = v13 - 16;
            uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v36 = *(_OWORD *)v34;
              *(v33 - 1) = *((_OWORD *)v34 - 1);
              _OWORD *v33 = v36;
              v33 -= 2;
              v34 -= 32;
              v35 -= 4;
            }
            while (v35);
            if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_33:
                uint64_t v30 = *--v29;
                *--char v26 = v30;
              }
              while (v29 != __p);
            }
            std::string v13 = (char *)__p;
            std::string __p = v26;
            char v39 = v27;
            if (!v13) {
              goto LABEL_17;
            }
LABEL_38:
            operator delete(v13);
            goto LABEL_17;
          }
        }
        else
        {
          std::string v25 = 0;
          char v26 = (char **)(8 * v21);
          int8x8_t v27 = 0;
          *(void *)(8 * v21) = v19;
          uint64_t v18 = 8 * v21 + 8;
          if (v13 != (char *)__p) {
            goto LABEL_31;
          }
        }
        std::string __p = v26;
        char v39 = v27;
        goto LABEL_38;
      }
    }
    else
    {
      char v20 = v39;
      if (v13 >= v39) {
        goto LABEL_22;
      }
    }
    *(void *)std::string v13 = v19;
    uint64_t v18 = (uint64_t)(v13 + 8);
LABEL_17:
    v5 += 24;
    std::string v13 = (char *)v18;
    if (v5 == v6) {
      goto LABEL_50;
    }
  }
}

void sub_1924BC420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptionsManager::Parse(Espresso::AOT::AOTCompilerOptionsManager::Impl **this@<X0>, char **a2@<X2>, int a3@<W1>, Espresso::AOT::AOTCompilerOptions *a4@<X8>)
{
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::Parse(Espresso::AOT::AOTCompilerOptionsManager::Impl *this@<X0>, char **a2@<X2>, int a3@<W1>, Espresso::AOT::AOTCompilerOptions *a4@<X8>)
{
  int v8 = a3;
  uint64_t v7 = a2;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(a4);
  cxxopts::Options::Options(&v6, this);
  cxxopts::Options::parse((cxxopts::Options *)&v6, &v8, &v7, (uint64_t)v5);
}

void sub_1924BC5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  cxxopts::Options::~Options((cxxopts::Options *)&a30);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v30);
  _Unwind_Resume(a1);
}

void sub_1924BC608(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v1);
  _Unwind_Resume(a1);
}

void sub_1924BC61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  __cxa_free_exception(v31);
  cxxopts::ParseResult::~ParseResult((cxxopts::ParseResult *)&a10);
  cxxopts::Options::~Options((cxxopts::Options *)&a30);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v30);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptionsManager::GetUsage(Espresso::AOT::AOTCompilerOptionsManager::Impl **this@<X0>, std::string *a2@<X8>)
{
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::GetUsage(Espresso::AOT::AOTCompilerOptionsManager::Impl *this@<X0>, std::string *a2@<X8>)
{
  cxxopts::Options::groups(this, (uint64_t)&v22);
  std::string __p = 0;
  char v20 = 0;
  unint64_t v21 = 0;
  uint64_t v4 = (unsigned __int8 *)v22;
  uint64_t v5 = (unsigned __int8 *)v23;
  if (v22 != v23)
  {
    std::string v6 = 0;
    do
    {
      uint64_t v8 = v4[23];
      if ((char)v4[23] < 0)
      {
        unint64_t v9 = *(const std::string::value_type **)v4;
        if (*((void *)v4 + 1) != 12) {
          goto LABEL_16;
        }
      }
      else
      {
        unint64_t v9 = (const std::string::value_type *)v4;
        if (v8 != 12) {
          goto LABEL_16;
        }
      }
      uint64_t v10 = *(void *)v9;
      int v11 = *((_DWORD *)v9 + 2);
      if (v10 != 0x656D697265707865 || v11 != 1818326126)
      {
LABEL_16:
        if ((unint64_t)v6 < v21)
        {
          if ((v8 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v4, *((void *)v4 + 1));
          }
          else
          {
            long long v7 = *(_OWORD *)v4;
            v6->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
            *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
          }
          ++v6;
        }
        else
        {
          std::string v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p, (uint64_t)v4);
        }
        char v20 = v6;
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  cxxopts::Options::help((uint64_t)this, (uint64_t *)&__p, a2);
  std::string v13 = (std::string *)__p;
  if (__p)
  {
    uint64_t v14 = v20;
    uint64_t v15 = __p;
    if (v20 != __p)
    {
      do
      {
        if (SHIBYTE(v14[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14[-1].__r_.__value_.__l.__data_);
        }
        --v14;
      }
      while (v14 != v13);
      uint64_t v15 = __p;
    }
    char v20 = v13;
    operator delete(v15);
  }
  unint64_t v16 = (void **)v22;
  if (v22)
  {
    std::string v17 = v23;
    uint64_t v18 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      uint64_t v18 = v22;
    }
    uint64_t v23 = v16;
    operator delete(v18);
  }
}

void sub_1924BC818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void Espresso::AOT::AOTCompilerOptionsManager::GetVerboseUsage(Espresso::AOT::AOTCompilerOptionsManager *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  std::string __p = 0;
  long long v7 = 0;
  uint64_t v8 = 0;
  cxxopts::Options::help(v2, (uint64_t *)&__p, a2);
  uint64_t v3 = (void **)__p;
  if (__p)
  {
    uint64_t v4 = v7;
    uint64_t v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = __p;
    }
    long long v7 = v3;
    operator delete(v5);
  }
}

void sub_1924BC8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (a10) {
    Espresso::AOT::AOTCompilerOptionsManager::GetVerboseUsage(&a10, a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = v7 + 1;
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  if (v8 >= 0x17)
  {
    uint64_t v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v15 = v8 | 7;
    }
    uint64_t v20 = v15 + 1;
    uint64_t v14 = operator new(v15 + 1);
    uint64_t v10 = a5;
    uint64_t v9 = a6;
    uint64_t v13 = a1;
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    *(void *)&__dst[8] = v7 + 1;
    *(void *)&__dst[16] = v20 | 0x8000000000000000;
    *(void *)long long __dst = v14;
  }
  else
  {
    memset(__dst, 0, 24);
    uint64_t v14 = __dst;
    __dst[23] = v7 + 1;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    unint64_t v21 = (const std::string::value_type *)v12;
  }
  else {
    unint64_t v21 = *(const std::string::value_type **)v12;
  }
  memmove(v14, v21, v7);
LABEL_15:
  *(_WORD *)&v14[v7] = 45;
  int v22 = *(char *)(v11 + 23);
  if (v22 >= 0) {
    uint64_t v23 = (const std::string::value_type *)v11;
  }
  else {
    uint64_t v23 = *(const std::string::value_type **)v11;
  }
  if (v22 >= 0) {
    std::string::size_type v24 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    std::string::size_type v24 = *(void *)(v11 + 8);
  }
  std::string v25 = std::string::append((std::string *)__dst, v23, v24);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v37 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(v13 + 216), (uint64_t)__p))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)__dst);
    long long v35 = *(_OWORD *)__dst;
    if (*(unsigned char *)(v10 + 24)
      && ((*(void (**)(uint64_t *__return_ptr, __n128))(**(void **)__dst + 80))(&v33, *(__n128 *)__dst),
          (int8x8_t v27 = v34) != 0)
      && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (!*(unsigned char *)(v9 + 24)) {
        goto LABEL_35;
      }
    }
    else if (!*(unsigned char *)(v9 + 24))
    {
      goto LABEL_35;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v35 + 88))(&v31);
    unint64_t v28 = v32;
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_35:
    if (*(char *)(v12 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
    }
    else {
      std::string v30 = *(std::string *)v12;
    }
    *(_OWORD *)&__dst[8] = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    *(void *)&__dst[23] = *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 7);
    *(void *)long long __dst = v13;
    char v39 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    memset(&v30, 0, sizeof(v30));
    if (*((void *)&v35 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    cxxopts::OptionAdder::operator()();
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1924BCFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = v7 + 1;
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  if (v8 >= 0x17)
  {
    uint64_t v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v15 = v8 | 7;
    }
    uint64_t v20 = v15 + 1;
    uint64_t v14 = operator new(v15 + 1);
    uint64_t v10 = a5;
    uint64_t v9 = a6;
    uint64_t v13 = a1;
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    *(void *)&__dst[8] = v7 + 1;
    *(void *)&__dst[16] = v20 | 0x8000000000000000;
    *(void *)long long __dst = v14;
  }
  else
  {
    memset(__dst, 0, 24);
    uint64_t v14 = __dst;
    __dst[23] = v7 + 1;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    unint64_t v21 = (const std::string::value_type *)v12;
  }
  else {
    unint64_t v21 = *(const std::string::value_type **)v12;
  }
  memmove(v14, v21, v7);
LABEL_15:
  *(_WORD *)&v14[v7] = 45;
  int v22 = *(char *)(v11 + 23);
  if (v22 >= 0) {
    uint64_t v23 = (const std::string::value_type *)v11;
  }
  else {
    uint64_t v23 = *(const std::string::value_type **)v11;
  }
  if (v22 >= 0) {
    std::string::size_type v24 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    std::string::size_type v24 = *(void *)(v11 + 8);
  }
  std::string v25 = std::string::append((std::string *)__dst, v23, v24);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v37 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(v13 + 216), (uint64_t)__p))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIiEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__dst);
    long long v35 = *(_OWORD *)__dst;
    if (*(unsigned char *)(v10 + 24)
      && ((*(void (**)(uint64_t *__return_ptr, __n128))(**(void **)__dst + 80))(&v33, *(__n128 *)__dst),
          (int8x8_t v27 = v34) != 0)
      && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (!*(unsigned char *)(v9 + 24)) {
        goto LABEL_35;
      }
    }
    else if (!*(unsigned char *)(v9 + 24))
    {
      goto LABEL_35;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v35 + 88))(&v31);
    unint64_t v28 = v32;
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_35:
    if (*(char *)(v12 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
    }
    else {
      std::string v30 = *(std::string *)v12;
    }
    *(_OWORD *)&__dst[8] = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    *(void *)&__dst[23] = *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 7);
    *(void *)long long __dst = v13;
    char v39 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    memset(&v30, 0, sizeof(v30));
    if (*((void *)&v35 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    cxxopts::OptionAdder::operator()();
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1924BD800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = v7 + 1;
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  if (v8 >= 0x17)
  {
    uint64_t v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v15 = v8 | 7;
    }
    uint64_t v20 = v15 + 1;
    uint64_t v14 = operator new(v15 + 1);
    uint64_t v10 = a5;
    uint64_t v9 = a6;
    uint64_t v13 = a1;
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    *(void *)&__dst[8] = v7 + 1;
    *(void *)&__dst[16] = v20 | 0x8000000000000000;
    *(void *)long long __dst = v14;
  }
  else
  {
    memset(__dst, 0, 24);
    uint64_t v14 = __dst;
    __dst[23] = v7 + 1;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    unint64_t v21 = (const std::string::value_type *)v12;
  }
  else {
    unint64_t v21 = *(const std::string::value_type **)v12;
  }
  memmove(v14, v21, v7);
LABEL_15:
  *(_WORD *)&v14[v7] = 45;
  int v22 = *(char *)(v11 + 23);
  if (v22 >= 0) {
    uint64_t v23 = (const std::string::value_type *)v11;
  }
  else {
    uint64_t v23 = *(const std::string::value_type **)v11;
  }
  if (v22 >= 0) {
    std::string::size_type v24 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    std::string::size_type v24 = *(void *)(v11 + 8);
  }
  std::string v25 = std::string::append((std::string *)__dst, v23, v24);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v37 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(v13 + 216), (uint64_t)__p))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIfEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__dst);
    long long v35 = *(_OWORD *)__dst;
    if (*(unsigned char *)(v10 + 24)
      && ((*(void (**)(uint64_t *__return_ptr, __n128))(**(void **)__dst + 80))(&v33, *(__n128 *)__dst),
          (int8x8_t v27 = v34) != 0)
      && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (!*(unsigned char *)(v9 + 24)) {
        goto LABEL_35;
      }
    }
    else if (!*(unsigned char *)(v9 + 24))
    {
      goto LABEL_35;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v35 + 88))(&v31);
    unint64_t v28 = v32;
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_35:
    if (*(char *)(v12 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
    }
    else {
      std::string v30 = *(std::string *)v12;
    }
    *(_OWORD *)&__dst[8] = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    *(void *)&__dst[23] = *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 7);
    *(void *)long long __dst = v13;
    char v39 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    memset(&v30, 0, sizeof(v30));
    if (*((void *)&v35 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    cxxopts::OptionAdder::operator()();
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1924BE01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = v7 + 1;
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  if (v8 >= 0x17)
  {
    uint64_t v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v15 = v8 | 7;
    }
    uint64_t v20 = v15 + 1;
    uint64_t v14 = operator new(v15 + 1);
    uint64_t v10 = a5;
    uint64_t v9 = a6;
    uint64_t v13 = a1;
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    *(void *)&__dst[8] = v7 + 1;
    *(void *)&__dst[16] = v20 | 0x8000000000000000;
    *(void *)long long __dst = v14;
  }
  else
  {
    memset(__dst, 0, 24);
    uint64_t v14 = __dst;
    __dst[23] = v7 + 1;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    unint64_t v21 = (const std::string::value_type *)v12;
  }
  else {
    unint64_t v21 = *(const std::string::value_type **)v12;
  }
  memmove(v14, v21, v7);
LABEL_15:
  *(_WORD *)&v14[v7] = 45;
  int v22 = *(char *)(v11 + 23);
  if (v22 >= 0) {
    uint64_t v23 = (const std::string::value_type *)v11;
  }
  else {
    uint64_t v23 = *(const std::string::value_type **)v11;
  }
  if (v22 >= 0) {
    std::string::size_type v24 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    std::string::size_type v24 = *(void *)(v11 + 8);
  }
  std::string v25 = std::string::append((std::string *)__dst, v23, v24);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v37 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(v13 + 216), (uint64_t)__p))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS7_ISA_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__dst);
    long long v35 = *(_OWORD *)__dst;
    if (*(unsigned char *)(v10 + 24)
      && ((*(void (**)(uint64_t *__return_ptr, __n128))(**(void **)__dst + 80))(&v33, *(__n128 *)__dst),
          (int8x8_t v27 = v34) != 0)
      && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (!*(unsigned char *)(v9 + 24)) {
        goto LABEL_35;
      }
    }
    else if (!*(unsigned char *)(v9 + 24))
    {
      goto LABEL_35;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v35 + 88))(&v31);
    unint64_t v28 = v32;
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_35:
    if (*(char *)(v12 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
    }
    else {
      std::string v30 = *(std::string *)v12;
    }
    *(_OWORD *)&__dst[8] = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    *(void *)&__dst[23] = *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 7);
    *(void *)long long __dst = v13;
    char v39 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    memset(&v30, 0, sizeof(v30));
    if (*((void *)&v35 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    cxxopts::OptionAdder::operator()();
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1924BE838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void cxxopts::OptionAdder::operator()()
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v0, "(([[:alnum:]]),)?[ ]*([[:alnum:]][-_[:alnum:]]*)?", 0);
}

void sub_1924BED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  __cxa_free_exception(v32);
  if (__p) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)(v33 - 128));
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification::~OptionSpecification(Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification *this)
{
  uint64_t v1 = (char *)this + 8;
  uint64_t v2 = (char *)*((void *)this + 4);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = &v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381068;
  uint64_t v4 = cxxopts::values::standard_value<BOOL>::standard_value((uint64_t)&v2[1]);
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);

  std::__shared_weak_count::__release_weak(v2);
}

void sub_1924BEF98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<cxxopts::values::standard_value<BOOL>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t cxxopts::values::standard_value<BOOL>::standard_value(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE327558;
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1EE38D580;
  *(void *)(a1 + 32) = v2;
  *((unsigned char *)v2 + 24) = 0;
  v2 += 3;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)a1 = &unk_1EE327738;
  *(_WORD *)(a1 + 48) = 1;
  MEMORY[0x192FF0F50](a1 + 56, "false");
  *(unsigned char *)(a1 + 49) = 1;
  MEMORY[0x192FF0F50](a1 + 80, "true");
  return a1;
}

void sub_1924BF12C(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v2;
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  cxxopts::values::standard_value<BOOL>::standard_value(v1, (void **)(v1 + 56), (std::__shared_weak_count **)(v1 + 32));
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::standard_value<BOOL>::~standard_value(uint64_t a1)
{
  *(void *)a1 = &unk_1EE327558;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return a1;
    }
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
LABEL_9:
  }
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void cxxopts::values::standard_value<BOOL>::~standard_value(uint64_t a1)
{
  *(void *)a1 = &unk_1EE327558;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3)
    {
LABEL_10:
      JUMPOUT(0x192FF16B0);
    }
LABEL_9:
    std::__shared_weak_count::__release_weak(v3);
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

double cxxopts::values::standard_value<BOOL>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<BOOL>,std::allocator<cxxopts::values::standard_value<BOOL>>,cxxopts::values::standard_value<BOOL> const&,void>(a1, (uint64_t *)v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void cxxopts::values::abstract_value<BOOL>::parse()
{
}

{
  cxxopts::values::parse_value();
}

uint64_t cxxopts::values::abstract_value<BOOL>::has_default(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t cxxopts::values::abstract_value<BOOL>::has_implicit(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

void cxxopts::values::abstract_value<BOOL>::get_default_value(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 56);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 72);
  }
}

void cxxopts::values::abstract_value<BOOL>::get_implicit_value(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 80);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 96);
  }
}

std::__shared_weak_count *cxxopts::values::abstract_value<BOOL>::default_value@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, void *a3@<X8>)
{
  *(unsigned char *)(a1 + 48) = 1;
  std::string::operator=((std::string *)(a1 + 56), a2);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  *a3 = *(void *)(a1 + 8);
  if (!v5)
  {
    a3[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  double result = std::__shared_weak_count::lock(v5);
  a3[1] = result;
  if (!result) {
    goto LABEL_5;
  }
  return result;
}

std::__shared_weak_count *cxxopts::values::abstract_value<BOOL>::implicit_value@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, void *a3@<X8>)
{
  *(unsigned char *)(a1 + 49) = 1;
  std::string::operator=((std::string *)(a1 + 80), a2);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  *a3 = *(void *)(a1 + 8);
  if (!v5)
  {
    a3[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  double result = std::__shared_weak_count::lock(v5);
  a3[1] = result;
  if (!result) {
    goto LABEL_5;
  }
  return result;
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D580;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<BOOL>,std::allocator<cxxopts::values::standard_value<BOOL>>,cxxopts::values::standard_value<BOOL> const&,void>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381068;
  uint64_t v6 = cxxopts::values::abstract_value<BOOL>::abstract_value((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE327738;
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);

  std::__shared_weak_count::__release_weak(v4);
}

void sub_1924BF648(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::abstract_value<BOOL>::abstract_value(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE327558;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(void *)(a2 + 24))
  {
    uint64_t v5 = operator new(0x20uLL);
    v5[1] = 0;
    v5[2] = 0;
    *uint64_t v5 = &unk_1EE38D580;
    *((unsigned char *)v5 + 24) = 0;
    uint64_t v6 = (char *)(v5 + 3);
    *(void *)(a1 + 24) = v5 + 3;
    *(void *)(a1 + 32) = v5;
  }
  else
  {
    uint64_t v6 = *(char **)(a2 + 40);
  }
  *(void *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_1924BF748(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void cxxopts::values::parse_value()
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v0, "(t|T)(rue)?", 0);
}

void sub_1924BFAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31)
{
  if (__p) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a23);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  _Unwind_Resume(a1);
}

void cxxopts::argument_incorrect_type::~argument_incorrect_type(std::exception *this)
{
  uint64_t v1 = this;
  this->__vftable = (std::exception_vtbl *)&unk_1EE327328;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1EE327328;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t cxxopts::argument_incorrect_type::argument_incorrect_type(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  uint64_t v4 = std::string::insert(&v20, 0, "Argument ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = (const std::string::value_type *)a2;
  }
  else {
    size_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v19 = 3;
  LODWORD(__p) = 10060002;
  uint64_t v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v23, " failed to parse");
  uint64_t v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  std::string::size_type size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = &unk_1EE327328;
  if ((v16 & 0x80000000) == 0)
  {
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(unsigned char *)(a1 + 31) = v16;
    *(void *)a1 = &unk_1EE3273A0;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(void *)a1 = &unk_1EE3273A0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
  }
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  *(void *)a1 = &unk_1EE3273C8;
  return a1;
}

void sub_1924BFDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::OptionException::what(cxxopts::OptionException *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

double cxxopts::OptionAdder::operator()(std::string const&,std::string const&,std::shared_ptr<cxxopts::Value const>,std::string)::{lambda(std::sub_match<char const*> const&,std::sub_match<char const*> const&)#1}::operator()@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16) || (int v6 = *(char **)a2, v7 = *(char **)(a2 + 8), &v7[-*(void *)a2] != (char *)1))
  {
    if (!*((unsigned char *)a1 + 16))
    {
      long long v50 = 0uLL;
      unint64_t v51 = 0;
      if (!v5) {
        goto LABEL_21;
      }
LABEL_29:
      unint64_t v28 = *(char **)a2;
      int8x8_t v27 = *(char **)(a2 + 8);
      unint64_t v29 = (unint64_t)&v27[-*(void *)a2];
      if (v29 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v29 > 0x16)
      {
        uint64_t v30 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17) {
          uint64_t v30 = v29 | 7;
        }
        uint64_t v31 = v30 + 1;
        uint64_t v13 = (long long *)operator new(v30 + 1);
        *((void *)&v48 + 1) = v29;
        unint64_t v49 = v31 | 0x8000000000000000;
        *(void *)&long long v48 = v13;
        if (v28 == v27) {
          goto LABEL_54;
        }
      }
      else
      {
        HIBYTE(v49) = (_BYTE)v27 - *(unsigned char *)a2;
        uint64_t v13 = &v48;
        if (v28 == v27) {
          goto LABEL_54;
        }
      }
      if (v29 < 0x20 || (unint64_t)((char *)v13 - v28) < 0x20)
      {
        uint64_t v32 = v28;
        uint64_t v33 = v13;
      }
      else
      {
        uint64_t v32 = &v28[v29 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v33 = (long long *)((char *)v13 + (v29 & 0xFFFFFFFFFFFFFFE0));
        unint64_t v34 = v13 + 1;
        uint64_t v35 = (long long *)(v28 + 16);
        unint64_t v36 = v29 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          _OWORD *v34 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 32;
        }
        while (v36);
        if (v29 == (v29 & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_57;
        }
      }
      do
      {
        char v38 = *v32++;
        *(unsigned char *)uint64_t v33 = v38;
        uint64_t v33 = (long long *)((char *)v33 + 1);
      }
      while (v32 != v27);
      goto LABEL_57;
    }
    uint64_t v15 = *a1;
    uint64_t v14 = (char *)a1[1];
    unint64_t v16 = (unint64_t)&v14[-*a1];
    if (v16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v16 > 0x16)
    {
      uint64_t v24 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v24 = v16 | 7;
      }
      uint64_t v25 = v24 + 1;
      std::string v17 = (long long *)operator new(v24 + 1);
      *((void *)&v50 + 1) = v16;
      unint64_t v51 = v25 | 0x8000000000000000;
      *(void *)&long long v50 = v17;
      if ((char *)v15 != v14)
      {
LABEL_14:
        if (v16 < 0x20 || (unint64_t)v17 - v15 < 0x20)
        {
          uint64_t v18 = (char *)v15;
          char v19 = v17;
        }
        else
        {
          uint64_t v18 = (char *)(v15 + (v16 & 0xFFFFFFFFFFFFFFE0));
          char v19 = (long long *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFE0));
          std::string v20 = v17 + 1;
          std::string v21 = (long long *)(v15 + 16);
          unint64_t v22 = v16 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v23 = *v21;
            *(v20 - 1) = *(v21 - 1);
            *std::string v20 = v23;
            v20 += 2;
            v21 += 2;
            v22 -= 32;
          }
          while (v22);
          if (v16 == (v16 & 0x7FFFFFFFFFFFFFE0))
          {
LABEL_28:
            *(unsigned char *)char v19 = 0;
            if (!*(unsigned char *)(a2 + 16)) {
              goto LABEL_21;
            }
            goto LABEL_29;
          }
        }
        do
        {
          char v26 = *v18++;
          *(unsigned char *)char v19 = v26;
          char v19 = (long long *)((char *)v19 + 1);
        }
        while (v18 != v14);
        goto LABEL_28;
      }
    }
    else
    {
      HIBYTE(v51) = (_BYTE)v14 - *(unsigned char *)a1;
      std::string v17 = &v50;
      if ((char *)v15 != v14) {
        goto LABEL_14;
      }
    }
    char v19 = v17;
    goto LABEL_28;
  }
  HIBYTE(v51) = 1;
  for (uint64_t i = &v50; v6 != v7; uint64_t i = (long long *)((char *)i + 1))
  {
    char v9 = *v6++;
    *(unsigned char *)uint64_t i = v9;
  }
  *(unsigned char *)uint64_t i = 0;
  if (*((unsigned char *)a1 + 16))
  {
    uint64_t v11 = *a1;
    long long v10 = (char *)a1[1];
    unint64_t v12 = (unint64_t)&v10[-*a1];
    if (v12 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v12 > 0x16)
    {
      uint64_t v39 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v39 = v12 | 7;
      }
      uint64_t v40 = v39 + 1;
      uint64_t v13 = (long long *)operator new(v39 + 1);
      *((void *)&v48 + 1) = v12;
      unint64_t v49 = v40 | 0x8000000000000000;
      *(void *)&long long v48 = v13;
      if ((char *)v11 == v10) {
        goto LABEL_54;
      }
    }
    else
    {
      HIBYTE(v49) = (_BYTE)v10 - *(unsigned char *)a1;
      uint64_t v13 = &v48;
      if ((char *)v11 == v10)
      {
LABEL_54:
        *(unsigned char *)uint64_t v13 = 0;
        goto LABEL_58;
      }
    }
    if (v12 < 0x20 || (unint64_t)v13 - v11 < 0x20)
    {
      unsigned __int8 v41 = (char *)v11;
      uint64_t v33 = v13;
    }
    else
    {
      unsigned __int8 v41 = (char *)(v11 + (v12 & 0xFFFFFFFFFFFFFFE0));
      uint64_t v33 = (long long *)((char *)v13 + (v12 & 0xFFFFFFFFFFFFFFE0));
      uint64_t v42 = v13 + 1;
      uint64_t v43 = (long long *)(v11 + 16);
      unint64_t v44 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v45 = *v43;
        *(v42 - 1) = *(v43 - 1);
        *uint64_t v42 = v45;
        v42 += 2;
        v43 += 2;
        v44 -= 32;
      }
      while (v44);
      if (v12 == (v12 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_57;
      }
    }
    do
    {
      char v46 = *v41++;
      *(unsigned char *)uint64_t v33 = v46;
      uint64_t v33 = (long long *)((char *)v33 + 1);
    }
    while (v41 != v10);
LABEL_57:
    *(unsigned char *)uint64_t v33 = 0;
    goto LABEL_58;
  }
LABEL_21:
  long long v48 = 0uLL;
  unint64_t v49 = 0;
LABEL_58:
  *(_OWORD *)a3 = v50;
  *(void *)(a3 + 16) = v51;
  double result = *(double *)&v48;
  *(_OWORD *)(a3 + 24) = v48;
  *(void *)(a3 + 40) = v49;
  return result;
}

void sub_1924C02E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cxxopts::Options::add_option(uint64_t a1, const void **a2, uint64_t a3, long long *a4, std::string *a5, std::string::size_type *a6, uint64_t a7)
{
  std::string v51 = *a5;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  a5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = (std::string *)operator new(0x78uLL);
  std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(v13, (long long *)a3, a4, (long long *)&v51, a6);
  unint64_t v49 = v13 + 1;
  long long v50 = (std::__shared_weak_count *)v13;
  uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a3 + 8);
  }
  if (!v14) {
    goto LABEL_7;
  }
  uint64_t v47 = v13 + 1;
  long long v48 = (std::__shared_weak_count *)v13;
  atomic_fetch_add_explicit((atomic_ullong *volatile)&v13->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::IRFunction>&>(*(void *)(a1 + 104), a3, a3, &v47);
  if ((v15 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::option_exists_error::option_exists_error((uint64_t)exception, a3);
  }
  unint64_t v16 = v48;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    uint64_t v20 = *((unsigned __int8 *)a4 + 23);
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = *((void *)a4 + 1);
    }
    if (v20) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_7:
    uint64_t v17 = *((unsigned __int8 *)a4 + 23);
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *((void *)a4 + 1);
    }
    if (v17)
    {
LABEL_10:
      long long v45 = v49;
      char v46 = v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::IRFunction>&>(*(void *)(a1 + 104), (uint64_t)a4, (uint64_t)a4, &v45);
      if ((v18 & 1) == 0)
      {
        uint64_t v32 = __cxa_allocate_exception(0x20uLL);
        cxxopts::option_exists_error::option_exists_error((uint64_t)v32, (uint64_t)a4);
      }
      char v19 = v46;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  std::string v21 = std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 192), a2, (uint64_t)&std::piecewise_construct, (long long **)&v33);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v33 = *(std::string *)a3;
  }
  if (*((char *)a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else {
    std::string v34 = *(std::string *)a4;
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v35, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = v51;
  }
  char v36 = (*(uint64_t (**)(void))(*(void *)*a6 + 40))();
  (*(void (**)(long long *__return_ptr))(*(void *)*a6 + 64))(&v37);
  char v39 = (*(uint64_t (**)(void))(*(void *)*a6 + 56))();
  (*(void (**)(long long *__return_ptr))(*(void *)*a6 + 72))(&v40);
  *(_OWORD *)std::string __p = *(_OWORD *)a7;
  uint64_t v43 = *(void *)(a7 + 16);
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = 0;
  LOBYTE(v44) = (*(uint64_t (**)(void))(*(void *)*a6 + 48))();
  HIBYTE(v44) = (*(uint64_t (**)(void))(*(void *)*a6 + 96))();
  unint64_t v22 = v21[14];
  if (v22 >= v21[15])
  {
    unint64_t v29 = std::vector<cxxopts::HelpOptionDetails>::__emplace_back_slow_path<cxxopts::HelpOptionDetails>((void **)v21 + 13, (uint64_t)&v33);
  }
  else
  {
    long long v23 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    v22[2] = v33.__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v22 = v23;
    memset(&v33, 0, sizeof(v33));
    uint64_t v24 = v34.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v22 + 3) = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
    v22[5] = v24;
    memset(&v34, 0, sizeof(v34));
    long long v25 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    v22[8] = v35.__r_.__value_.__r.__words[2];
    *((_OWORD *)v22 + 3) = v25;
    memset(&v35, 0, sizeof(v35));
    *((unsigned char *)v22 + 72) = v36;
    long long v26 = v37;
    v22[12] = v38;
    *((_OWORD *)v22 + 5) = v26;
    uint64_t v38 = 0;
    long long v37 = 0uLL;
    *((unsigned char *)v22 + 104) = v39;
    long long v27 = v40;
    v22[16] = v41;
    *((_OWORD *)v22 + 7) = v27;
    uint64_t v41 = 0;
    long long v40 = 0uLL;
    long long v28 = *(_OWORD *)__p;
    v22[19] = v43;
    *(_OWORD *)(v22 + 17) = v28;
    __p[1] = 0;
    uint64_t v43 = 0;
    __p[0] = 0;
    *((_WORD *)v22 + 80) = v44;
    unint64_t v29 = (char *)(v22 + 21);
  }
  v21[14] = (uint64_t *)v29;
  if (SHIBYTE(v43) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(v38) & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete((void *)v40);
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete((void *)v37);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v35.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_44:
    operator delete(v33.__r_.__value_.__l.__data_);
    uint64_t v30 = v50;
    if (!v50) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_43:
  operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_44;
  }
LABEL_37:
  uint64_t v30 = v50;
  if (!v50)
  {
LABEL_46:
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_47;
  }
LABEL_45:
  if (atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
LABEL_47:
  }
    operator delete(v51.__r_.__value_.__l.__data_);
}

void sub_1924C08EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  __cxa_free_exception(v46);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v47 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v47 - 128);
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_1924C0A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    JUMPOUT(0x1924C0A10);
  }
  JUMPOUT(0x1924C09A0);
}

void sub_1924C0A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    JUMPOUT(0x1924C0A30);
  }
  JUMPOUT(0x1924C09A8);
}

uint64_t cxxopts::invalid_option_format_error::invalid_option_format_error(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v18.__r_.__value_.__s + 23) = 3;
  LODWORD(v18.__r_.__value_.__l.__data_) = 9994466;
  uint64_t v4 = std::string::insert(&v18, 0, "Invalid option format ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = (const std::string::value_type *)a2;
  }
  else {
    size_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  char v9 = std::string::append(&v19, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v17 = 3;
  LODWORD(__p) = 10060002;
  uint64_t v11 = std::string::append(&v20, (const std::string::value_type *)&__p, 3uLL);
  uint64_t v13 = (std::string::value_type *)v11->__r_.__value_.__r.__words[0];
  std::string::size_type size = v11->__r_.__value_.__l.__size_;
  v21[0] = v11->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v11->__r_.__value_.__r.__words[2] + 3);
  int v14 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = &unk_1EE327328;
  if ((v14 & 0x80000000) == 0)
  {
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v21[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v21 + 3);
    *(unsigned char *)(a1 + 31) = v14;
    *(void *)a1 = &unk_1EE327350;
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v13, size);
  *(void *)a1 = &unk_1EE327350;
  operator delete(v13);
  if (v17 < 0) {
LABEL_9:
  }
    operator delete(__p);
LABEL_10:
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_17:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_18:
    operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
LABEL_12:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_13:
  *(void *)a1 = &unk_1EE327440;
  return a1;
}

void sub_1924C0C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  operator delete(v27);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v28 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v28 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v28 - 64));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void cxxopts::HelpOptionDetails::~HelpOptionDetails(void **this)
{
  if (*((char *)this + 159) < 0)
  {
    operator delete(this[17]);
    if ((*((char *)this + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 103) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[14]);
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(this[10]);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*((char *)this + 47) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(*this);
    return;
  }
LABEL_12:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_13;
  }
}

std::string *std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(std::string *a1, long long *a2, long long *a3, long long *a4, std::string::size_type *a5)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE380FF8;
  int v6 = a1 + 1;
  std::string::size_type v7 = a5[1];
  std::string::size_type v10 = *a5;
  uint64_t v11 = (std::__shared_weak_count *)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  cxxopts::OptionDetails::OptionDetails(v6, a2, a3, a4, &v10);
  std::string::size_type v8 = v11;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_1924C0E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::OptionDetails>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::OptionDetails>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<cxxopts::OptionDetails>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_4:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(*(void **)(a1 + 48));
      if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_9;
  }
LABEL_5:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
    return;
  }
LABEL_10:
  uint64_t v3 = *(void **)(a1 + 24);

  operator delete(v3);
}

std::string *cxxopts::OptionDetails::OptionDetails(std::string *this, long long *a2, long long *a3, long long *a4, std::string::size_type *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::string::size_type v10 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
    std::string::size_type v10 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v11 = *a3;
      v10->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_6:
  unint64_t v12 = this + 2;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  std::string::size_type v14 = a5[1];
  this[3].__r_.__value_.__r.__words[0] = *a5;
  this[3].__r_.__value_.__l.__size_ = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(this[3].__r_.__value_.__r.__words[2]) = 0;
  return this;
}

void sub_1924C10B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t cxxopts::option_exists_error::option_exists_error(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  uint64_t v4 = std::string::insert(&v20, 0, "Option ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    std::string::size_type v7 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  long long v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v19 = 3;
  LODWORD(__p) = 10060002;
  long long v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  long long v13 = std::string::append(&v23, " already exists");
  char v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  std::string::size_type size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = &unk_1EE327328;
  if ((v16 & 0x80000000) == 0)
  {
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(unsigned char *)(a1 + 31) = v16;
    *(void *)a1 = &unk_1EE327350;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(void *)a1 = &unk_1EE327350;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
  }
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  *(void *)a1 = &unk_1EE327378;
  return a1;
}

void sub_1924C1338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  std::string::size_type v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      long long v10 = a2;
    }
    else {
      long long v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        long long v11 = (uint64_t **)v6;
        std::string::size_type v14 = (const void *)v6[4];
        long long v12 = v6 + 4;
        long long v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          char v17 = v12;
        }
        else {
          char v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        int v6 = *v11;
        std::string::size_type v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      int v6 = v11[1];
      if (!v6)
      {
        std::string::size_type v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    long long v11 = a1 + 1;
LABEL_27:
    std::string v23 = (char *)operator new(0x80uLL);
    uint64_t v24 = (std::string *)(v23 + 32);
    long long v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((void *)v23 + 15) = 0;
    *(_OWORD *)(v23 + 104) = 0u;
    *(_OWORD *)(v23 + 88) = 0u;
    *(_OWORD *)(v23 + 72) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(void *)std::string v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    const std::string::value_type *v7 = (uint64_t *)v23;
    long long v27 = (uint64_t *)**a1;
    uint64_t v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1924C15A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,cxxopts::HelpGroupDetails>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v3 -= 168;
        std::allocator<cxxopts::HelpOptionDetails>::destroy[abi:ne180100](a1 + 88, v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v2;
    operator delete(v4);
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_11;
  }
LABEL_8:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return;
  }
LABEL_12:
  long long v5 = *(void **)a1;

  operator delete(v5);
}

void std::allocator<cxxopts::HelpOptionDetails>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 159) < 0)
  {
    operator delete(*(void **)(a2 + 136));
    if ((*(char *)(a2 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a2 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a2 + 112));
  if ((*(char *)(a2 + 103) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a2 + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a2 + 80));
  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    operator delete(*(void **)(a2 + 24));
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
    return;
  }
LABEL_13:
  uint64_t v3 = *(void **)a2;

  operator delete(v3);
}

char *std::vector<cxxopts::HelpOptionDetails>::__emplace_back_slow_path<cxxopts::HelpOptionDetails>(void **a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * (v3 >> 3) + 1;
  if (v4 > 0x186186186186186) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v5 = 0x186186186186186;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x186186186186186) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 168 * v5;
  int v8 = (char *)operator new(168 * v5);
  size_t v9 = &v8[8 * (v3 >> 3)];
  *(_OWORD *)size_t v9 = *(_OWORD *)a2;
  long long v10 = &v8[v7];
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v11 = &v8[v3];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  v11[72] = *(unsigned char *)(a2 + 72);
  long long v12 = *(_OWORD *)(a2 + 80);
  *((void *)v11 + 12) = *(void *)(a2 + 96);
  *((_OWORD *)v11 + 5) = v12;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  v11[104] = *(unsigned char *)(a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *((_OWORD *)v11 + 7) = v13;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  long long v14 = *(_OWORD *)(a2 + 136);
  *((void *)v11 + 19) = *(void *)(a2 + 152);
  *(_OWORD *)(v11 + 136) = v14;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *((_WORD *)v11 + 80) = *(_WORD *)(a2 + 160);
  int v15 = v9 + 168;
  size_t v16 = (char *)*a1;
  char v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v9;
    a1[1] = v15;
    a1[2] = v10;
    if (!v17) {
      return v15;
    }
    goto LABEL_15;
  }
  uint64_t v18 = 0;
  do
  {
    int v19 = &v9[v18];
    BOOL v20 = &v17[v18];
    long long v21 = *(_OWORD *)&v17[v18 - 168];
    *((void *)v19 - 19) = *(void *)&v17[v18 - 152];
    *(_OWORD *)(v19 - 168) = v21;
    *((void *)v20 - 20) = 0;
    *((void *)v20 - 19) = 0;
    long long v22 = *(_OWORD *)&v17[v18 - 144];
    uint64_t v23 = *(void *)&v17[v18 - 128];
    *((void *)v20 - 21) = 0;
    *((void *)v19 - 16) = v23;
    *((_OWORD *)v19 - 9) = v22;
    *((void *)v20 - 17) = 0;
    *((void *)v20 - 16) = 0;
    *((void *)v20 - 18) = 0;
    long long v24 = *(_OWORD *)&v17[v18 - 120];
    *((void *)v19 - 13) = *(void *)&v17[v18 - 104];
    *(_OWORD *)(v19 - 120) = v24;
    *((void *)v20 - 14) = 0;
    *((void *)v20 - 13) = 0;
    *((void *)v20 - 15) = 0;
    *(v19 - 96) = v17[v18 - 96];
    long long v25 = *(_OWORD *)&v17[v18 - 88];
    *((void *)v19 - 9) = *(void *)&v17[v18 - 72];
    *(_OWORD *)(v19 - 88) = v25;
    *((void *)v20 - 10) = 0;
    *((void *)v20 - 9) = 0;
    *((void *)v20 - 11) = 0;
    *(v19 - 64) = v17[v18 - 64];
    long long v26 = *(_OWORD *)&v17[v18 - 56];
    *((void *)v19 - 5) = *(void *)&v17[v18 - 40];
    *(_OWORD *)(v19 - 56) = v26;
    *((void *)v20 - 6) = 0;
    *((void *)v20 - 5) = 0;
    *((void *)v20 - 7) = 0;
    long long v27 = *(_OWORD *)&v17[v18 - 32];
    *((void *)v19 - 2) = *(void *)&v17[v18 - 16];
    *((_OWORD *)v19 - 2) = v27;
    *((void *)v20 - 3) = 0;
    *((void *)v20 - 2) = 0;
    *((void *)v20 - 4) = 0;
    *((_WORD *)v19 - 4) = *(_WORD *)&v17[v18 - 8];
    v18 -= 168;
  }
  while (&v17[v18] != v16);
  uint64_t v28 = (char *)*a1;
  char v17 = (char *)a1[1];
  *a1 = &v9[v18];
  a1[1] = v15;
  a1[2] = v10;
  if (v17 != v28)
  {
    do
    {
      v17 -= 168;
      std::allocator<cxxopts::HelpOptionDetails>::destroy[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)v17);
    }
    while (v17 != v28);
    char v17 = v28;
  }
  if (v17) {
LABEL_15:
  }
    operator delete(v17);
  return v15;
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37CE80;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37CE80;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 8));
LABEL_3:

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = &unk_1EE37CE80;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  unint64_t v4 = (std::string *)(v3 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((void *)v3 + 6) = *(void *)(a1 + 48);
  }
  return v3;
}

void sub_1924C1BA8(_Unwind_Exception *a1)
{
  if (v1[31] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CE80;
  unint64_t v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    int v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    int v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *(_OWORD *)(a1 + 32);
      v6->__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1924C1C98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 8);

  operator delete(v2);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    if ((*((char *)__p + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = __p;
      goto LABEL_5;
    }
  }
  else if ((*((char *)__p + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[1]);
  uint64_t v2 = __p;

LABEL_5:
  operator delete(v2);
}

uint64_t *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  unint64_t v4 = (long long *)(a1 + 8);
  long long v5 = (long long *)(a1 + 32);
  v7[0] = *(unsigned char *)cxxopts::OptionValue::as<BOOL>(a3);
  int v8 = 0;
  double result = Espresso::AOT::AOTCompilerOptions::SetOption(a2, v4, v5, (uint64_t)v7);
  if (v8 != -1) {
    return (uint64_t *)((uint64_t (*)(char *, unsigned char *))off_1EE39B898[v8])(&v9, v7);
  }
  return result;
}

void sub_1924C1E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1EE39B898[a13])(v13 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC1AE2) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC1AE2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC1AE2)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC1AE2 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t cxxopts::OptionValue::as<BOOL>(const void **a1)
{
  uint64_t v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "No value");
    __cxa_throw(exception, (struct type_info *)off_1E5745150, MEMORY[0x1E4FBA1C0]);
  }
  if (!v2) {
    __cxa_bad_cast();
  }
  if (v2[5]) {
    return v2[5];
  }
  else {
    return v2[3];
  }
}

void sub_1924C1F9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::domain_error::domain_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          int v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                long long v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    long long v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              long long v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  long long v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v28 = (char *)operator new(0x50uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = v11;
  unint64_t v29 = (std::string *)(v28 + 16);
  uint64_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    *((void *)v28 + 4) = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  *((void *)v28 + 9) = 0;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        std::string v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        std::string v34 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      std::string v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      uint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  std::string v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  int v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1924C2440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924C2454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 72);
      if (v3 != v2 + 48)
      {
        if (v3) {
          (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
        }
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_10;
      }
      (*(void (**)(uint64_t))(*(void *)(v2 + 48) + 32))(v2 + 48);
      if (*(char *)(v2 + 39) < 0) {
LABEL_10:
      }
        operator delete(*(void **)(v2 + 16));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

void _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIiEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3810D8;
  *(_OWORD *)&v2[1].__shared_owners_ = 0u;
  v2[2].std::__shared_count = 0u;
  *(_OWORD *)&v2[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE327648;
  uint64_t v3 = (char *)operator new(0x20uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1EE38D5F0;
  *((_DWORD *)v3 + 6) = 0;
  v2[2].__vftable = (std::__shared_weak_count_vtbl *)(v3 + 24);
  v2[2].__shared_owners_ = (uint64_t)v3;
  v2[2].__shared_weak_owners_ = (uint64_t)(v3 + 24);
  LOWORD(v2[3].__vftable) = 0;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE327828;
  v2[1].__shared_owners_ = (uint64_t)&v2[1];
  *a1 = v2 + 1;
  a1[1] = v2;
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v2[1].__shared_weak_owners_ = (uint64_t)v2;
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1924C2684(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3810D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3810D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<cxxopts::values::standard_value<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t cxxopts::values::standard_value<int>::~standard_value(uint64_t a1)
{
  *(void *)a1 = &unk_1EE327648;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return a1;
    }
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
LABEL_9:
  }
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void cxxopts::values::standard_value<int>::~standard_value(uint64_t a1)
{
  *(void *)a1 = &unk_1EE327648;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3)
    {
LABEL_10:
      JUMPOUT(0x192FF16B0);
    }
LABEL_9:
    std::__shared_weak_count::__release_weak(v3);
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

double cxxopts::values::standard_value<int>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<int>,std::allocator<cxxopts::values::standard_value<int>>,cxxopts::values::standard_value<int> const&,void>(a1, (uint64_t *)v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void cxxopts::values::abstract_value<int>::parse()
{
}

{
  cxxopts::values::integer_parser<int>();
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<int>,std::allocator<cxxopts::values::standard_value<int>>,cxxopts::values::standard_value<int> const&,void>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3810D8;
  uint64_t v6 = cxxopts::values::abstract_value<int>::abstract_value((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE327828;
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);

  std::__shared_weak_count::__release_weak(v4);
}

void sub_1924C2B14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::abstract_value<int>::abstract_value(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE327648;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(void *)(a2 + 24))
  {
    long long v5 = operator new(0x20uLL);
    v5[1] = 0;
    v5[2] = 0;
    *long long v5 = &unk_1EE38D5F0;
    *((_DWORD *)v5 + 6) = 0;
    uint64_t v6 = (char *)(v5 + 3);
    *(void *)(a1 + 24) = v5 + 3;
    *(void *)(a1 + 32) = v5;
  }
  else
  {
    uint64_t v6 = *(char **)(a2 + 40);
  }
  *(void *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_1924C2C14(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    long long v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    long long v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void cxxopts::values::integer_parser<int>()
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  char v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v2, 0, sizeof(v2));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v0, "(-)?(0x)?([0-9a-zA-Z]+)|((0x)?0)", 0);
}

void sub_1924C30B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void cxxopts::values::detail::SignedCheck<int,true>::operator()<unsigned int>(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  if (a2)
  {
    if (a3 >= 0x80000001)
    {
LABEL_6:
      exception = __cxa_allocate_exception(0x20uLL);
      cxxopts::argument_incorrect_type::argument_incorrect_type(exception, a4);
    }
  }
  else if ((a3 & 0x80000000) != 0)
  {
    goto LABEL_6;
  }
}

void sub_1924C31C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924C31DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37CF30;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37CF30;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 8));
LABEL_3:

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = &unk_1EE37CF30;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  uint64_t v4 = (std::string *)(v3 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((void *)v3 + 6) = *(void *)(a1 + 48);
  }
  return v3;
}

void sub_1924C33B4(_Unwind_Exception *a1)
{
  if (v1[31] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CF30;
  uint64_t v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    uint64_t v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *(_OWORD *)(a1 + 32);
      v6->__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1924C34A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 8);

  operator delete(v2);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    if ((*((char *)__p + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = __p;
      goto LABEL_5;
    }
  }
  else if ((*((char *)__p + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[1]);
  uint64_t v2 = __p;

LABEL_5:
  operator delete(v2);
}

uint64_t *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (long long *)(a1 + 8);
  long long v5 = (long long *)(a1 + 32);
  v7[0] = *(_DWORD *)cxxopts::OptionValue::as<int>(a3);
  int v8 = 1;
  double result = Espresso::AOT::AOTCompilerOptions::SetOption(a2, v4, v5, (uint64_t)v7);
  if (v8 != -1) {
    return (uint64_t *)((uint64_t (*)(char *, _DWORD *))off_1EE39B898[v8])(&v9, v7);
  }
  return result;
}

void sub_1924C3628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1EE39B898[a13])(v13 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC1DB6) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC1DB6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC1DB6)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC1DB6 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t cxxopts::OptionValue::as<int>(const void **a1)
{
  uint64_t v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "No value");
    __cxa_throw(exception, (struct type_info *)off_1E5745150, MEMORY[0x1E4FBA1C0]);
  }
  if (!v2) {
    __cxa_bad_cast();
  }
  if (v2[5]) {
    return v2[5];
  }
  else {
    return v2[3];
  }
}

void sub_1924C37AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIfEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3810A0;
  *(_OWORD *)&v2[1].__shared_owners_ = 0u;
  v2[2].std::__shared_count = 0u;
  *(_OWORD *)&v2[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3275D0;
  uint64_t v3 = (char *)operator new(0x20uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1EE38D5B8;
  *((_DWORD *)v3 + 6) = 0;
  v2[2].__vftable = (std::__shared_weak_count_vtbl *)(v3 + 24);
  v2[2].__shared_owners_ = (uint64_t)v3;
  v2[2].__shared_weak_owners_ = (uint64_t)(v3 + 24);
  LOWORD(v2[3].__vftable) = 0;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3277B0;
  v2[1].__shared_owners_ = (uint64_t)&v2[1];
  *a1 = v2 + 1;
  a1[1] = v2;
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v2[1].__shared_weak_owners_ = (uint64_t)v2;
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1924C391C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3810A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3810A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<cxxopts::values::standard_value<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t cxxopts::values::standard_value<float>::~standard_value(uint64_t a1)
{
  *(void *)a1 = &unk_1EE3275D0;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return a1;
    }
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
LABEL_9:
  }
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void cxxopts::values::standard_value<float>::~standard_value(uint64_t a1)
{
  *(void *)a1 = &unk_1EE3275D0;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3)
    {
LABEL_10:
      JUMPOUT(0x192FF16B0);
    }
LABEL_9:
    std::__shared_weak_count::__release_weak(v3);
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

double cxxopts::values::standard_value<float>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<float>,std::allocator<cxxopts::values::standard_value<float>>,cxxopts::values::standard_value<float> const&,void>(a1, (uint64_t *)v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t cxxopts::values::abstract_value<float>::parse(uint64_t a1, uint64_t a2)
{
  return cxxopts::values::stringstream_parser<float>(a2, *(void *)(a1 + 40));
}

uint64_t cxxopts::values::abstract_value<float>::parse(uint64_t a1)
{
  return cxxopts::values::stringstream_parser<float>(a1 + 56, *(void *)(a1 + 40));
}

void std::__shared_ptr_emplace<float>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<float>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<float>,std::allocator<cxxopts::values::standard_value<float>>,cxxopts::values::standard_value<float> const&,void>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3810A0;
  uint64_t v6 = cxxopts::values::abstract_value<float>::abstract_value((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3277B0;
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);

  std::__shared_weak_count::__release_weak(v4);
}

void sub_1924C3DAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::abstract_value<float>::abstract_value(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE3275D0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(void *)(a2 + 24))
  {
    long long v5 = operator new(0x20uLL);
    v5[1] = 0;
    v5[2] = 0;
    *long long v5 = &unk_1EE38D5B8;
    *((_DWORD *)v5 + 6) = 0;
    uint64_t v6 = (char *)(v5 + 3);
    *(void *)(a1 + 24) = v5 + 3;
    *(void *)(a1 + 32) = v5;
  }
  else
  {
    uint64_t v6 = *(char **)(a2 + 40);
  }
  *(void *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_1924C3EAC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    long long v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    long long v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::stringstream_parser<float>(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7, a1, 24);
  MEMORY[0x192FF10B0](v7, a2);
  if ((*((unsigned char *)&v7[4] + *(void *)(v7[0] - 24)) & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::argument_incorrect_type::argument_incorrect_type((uint64_t)exception, a1);
  }
  v7[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 2std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[2] = v4;
  void v7[3] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v9);
}

void sub_1924C40E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1924C40FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  char v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v10;
  *(void *)(a1 + *(void *)(v10 - 2std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v9;
  *(void *)(a1 + 8) = 0;
  unint64_t v11 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  uint64_t v12 = MEMORY[0x1E4FBA488] + 24;
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  uint64_t v13 = v8[5];
  uint64_t v14 = v8[4];
  *(void *)(a1 + 16) = v14;
  *(void *)(v6 + *(void *)(v14 - 2std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v13;
  uint64_t v15 = v8[1];
  *(void *)a1 = v15;
  *(void *)(a1 + *(void *)(v15 - 2std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v8[6];
  *(void *)a1 = v12;
  *(void *)(a1 + 128) = v5;
  *(void *)(a1 + 16) = v7;
  std::streambuf::basic_streambuf();
  uint64_t v16 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 24) = v16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  std::stringbuf::str();
  return a1;
}

void sub_1924C43E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v11 + 111) < 0) {
    operator delete(*v10);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37CED8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37CED8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 8));
LABEL_3:

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = &unk_1EE37CED8;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  uint64_t v4 = (std::string *)(v3 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((void *)v3 + 6) = *(void *)(a1 + 48);
  }
  return v3;
}

void sub_1924C45F8(_Unwind_Exception *a1)
{
  if (v1[31] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CED8;
  uint64_t v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    uint64_t v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *(_OWORD *)(a1 + 32);
      v6->__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1924C46E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 8);

  operator delete(v2);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    if ((*((char *)__p + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = __p;
      goto LABEL_5;
    }
  }
  else if ((*((char *)__p + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[1]);
  uint64_t v2 = __p;

LABEL_5:
  operator delete(v2);
}

uint64_t *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (long long *)(a1 + 8);
  long long v5 = (long long *)(a1 + 32);
  v7[0] = *(_DWORD *)cxxopts::OptionValue::as<float>(a3);
  int v8 = 2;
  double result = Espresso::AOT::AOTCompilerOptions::SetOption(a2, v4, v5, (uint64_t)v7);
  if (v8 != -1) {
    return (uint64_t *)((uint64_t (*)(char *, _DWORD *))off_1EE39B898[v8])(&v9, v7);
  }
  return result;
}

void sub_1924C486C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1EE39B898[a13])(v13 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC208ALL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC208ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC208ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC208ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t cxxopts::OptionValue::as<float>(const void **a1)
{
  uint64_t v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "No value");
    __cxa_throw(exception, (struct type_info *)off_1E5745150, MEMORY[0x1E4FBA1C0]);
  }
  if (!v2) {
    __cxa_bad_cast();
  }
  if (v2[5]) {
    return v2[5];
  }
  else {
    return v2[3];
  }
}

void sub_1924C49F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS7_ISA_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381030;
  *(_OWORD *)&v2[1].__shared_owners_ = 0u;
  v2[2].std::__shared_count = 0u;
  *(_OWORD *)&v2[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3274E0;
  uint64_t v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = &unk_1EE38D3F8;
  v3[4] = 0;
  v3[5] = 0;
  v3[3] = 0;
  v2[2].__vftable = (std::__shared_weak_count_vtbl *)(v3 + 3);
  v2[2].__shared_owners_ = (uint64_t)v3;
  v2[2].__shared_weak_owners_ = (uint64_t)(v3 + 3);
  LOWORD(v2[3].__vftable) = 0;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3276C0;
  v2[1].__shared_owners_ = (uint64_t)&v2[1];
  *a1 = v2 + 1;
  a1[1] = v2;
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v2[1].__shared_weak_owners_ = (uint64_t)v2;
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1924C4B64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381030;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<cxxopts::values::standard_value<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t cxxopts::values::standard_value<std::string>::~standard_value(uint64_t a1)
{
  *(void *)a1 = &unk_1EE3274E0;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return a1;
    }
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
LABEL_9:
  }
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void cxxopts::values::standard_value<std::string>::~standard_value(uint64_t a1)
{
  *(void *)a1 = &unk_1EE3274E0;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3)
    {
LABEL_10:
      JUMPOUT(0x192FF16B0);
    }
LABEL_9:
    std::__shared_weak_count::__release_weak(v3);
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

double cxxopts::values::standard_value<std::string>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<std::string>,std::allocator<cxxopts::values::standard_value<std::string>>,cxxopts::values::standard_value<std::string> const&,void>(a1, (uint64_t *)v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

std::string *cxxopts::values::abstract_value<std::string>::parse(uint64_t a1, const std::string *a2)
{
  return std::string::operator=(*(std::string **)(a1 + 40), a2);
}

std::string *cxxopts::values::abstract_value<std::string>::parse(uint64_t a1)
{
  return std::string::operator=(*(std::string **)(a1 + 40), (const std::string *)(a1 + 56));
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<std::string>,std::allocator<cxxopts::values::standard_value<std::string>>,cxxopts::values::standard_value<std::string> const&,void>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381030;
  uint64_t v6 = cxxopts::values::abstract_value<std::string>::abstract_value((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3276C0;
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);

  std::__shared_weak_count::__release_weak(v4);
}

void sub_1924C4F84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::abstract_value<std::string>::abstract_value(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE3274E0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(void *)(a2 + 24))
  {
    long long v5 = operator new(0x30uLL);
    v5[1] = 0;
    v5[2] = 0;
    *long long v5 = &unk_1EE38D3F8;
    v5[3] = 0;
    uint64_t v6 = v5 + 3;
    v5[4] = 0;
    v5[5] = 0;
    *(void *)(a1 + 24) = v5 + 3;
    *(void *)(a1 + 32) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)(a2 + 40);
  }
  *(void *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_1924C5088(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    long long v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    long long v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37CE28;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37CE28;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 8));
LABEL_3:

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = &unk_1EE37CE28;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  uint64_t v4 = (std::string *)(v3 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((void *)v3 + 6) = *(void *)(a1 + 48);
  }
  return v3;
}

void sub_1924C52BC(_Unwind_Exception *a1)
{
  if (v1[31] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CE28;
  uint64_t v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    uint64_t v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *(_OWORD *)(a1 + 32);
      v6->__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1924C53AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 8);

  operator delete(v2);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    if ((*((char *)__p + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = __p;
      goto LABEL_5;
    }
  }
  else if ((*((char *)__p + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[1]);
  uint64_t v2 = __p;

LABEL_5:
  operator delete(v2);
}

uint64_t *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1} &,Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&>((long long *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC23DBLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC23DBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC23DBLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC23DBLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1} &,Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&>(long long *a1, uint64_t a2, const void **a3)
{
  long long v5 = (long long *)((char *)a1 + 24);
  uint64_t v6 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v9.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
  }
  int v10 = 3;
  double result = Espresso::AOT::AOTCompilerOptions::SetOption(a2, a1, v5, (uint64_t)&v9);
  if (v10 != -1) {
    return (uint64_t *)((uint64_t (*)(char *, std::string *))off_1EE39B898[v10])(&v11, &v9);
  }
  return result;
}

void sub_1924C55E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE39B898[a12])(v12 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cxxopts::OptionValue::as<std::string>(const void **a1)
{
  uint64_t v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "No value");
    __cxa_throw(exception, (struct type_info *)off_1E5745150, MEMORY[0x1E4FBA1C0]);
  }
  if (!v2) {
    __cxa_bad_cast();
  }
  if (v2[5]) {
    return v2[5];
  }
  else {
    return v2[3];
  }
}

void sub_1924C56DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cxxopts::Options::parse(cxxopts::Options *this@<X0>, int *a2@<X1>, char ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 14);
  v10[0] = *((void *)this + 13);
  v10[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, *((void *)this + 15), *((void *)this + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 3));
  cxxopts::ParseResult::ParseResult(a4, v10, (uint64_t)__p, *((unsigned char *)this + 97), a2, a3);
}

void sub_1924C582C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1924C5848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *cxxopts::Options::Options(std::string *this, const cxxopts::Options *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    uint64_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v8;
  }
  LOWORD(this[4].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 48);
  std::string::size_type v9 = *((void *)a2 + 14);
  this[4].__r_.__value_.__l.__size_ = *((void *)a2 + 13);
  this[4].__r_.__value_.__r.__words[2] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[5].__r_.__value_.__r.__words, *((void *)a2 + 15), *((void *)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3));
  this[6].__r_.__value_.__r.__words[0] = *((void *)a2 + 18);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[6].__r_.__value_.__l.__size_, (uint64_t)a2 + 152);
  this[8].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[8].__r_.__value_.__l.__size_;
  this[8].__r_.__value_.__r.__words[2] = 0;
  int v10 = (const void **)*((void *)a2 + 24);
  char v11 = (char *)a2 + 200;
  if (v10 != (const void **)v11)
  {
    do
    {
      std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,cxxopts::HelpGroupDetails> const&>((uint64_t **)&this[8], (uint64_t *)&this[8].__r_.__value_.__l.__size_, v10 + 4, (long long *)v10 + 2);
      uint64_t v13 = (char *)v10[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (char *)v10[2];
          BOOL v15 = *(void *)v14 == (void)v10;
          int v10 = (const void **)v14;
        }
        while (!v15);
      }
      int v10 = (const void **)v14;
    }
    while (v14 != v11);
  }
  return this;
}

void sub_1924C5A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 71) < 0)
  {
    operator delete(*v11);
    if ((*(char *)(v10 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v10 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v10 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*a10);
  if ((*(char *)(v10 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

char *std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,cxxopts::HelpGroupDetails> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  long long v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, a2, &v14, &v13, a3);
  if (*v6) {
    return (char *)*v6;
  }
  long long v8 = v6;
  std::string::size_type v9 = (char *)operator new(0x80uLL);
  std::pair<std::string const,cxxopts::HelpGroupDetails>::pair[abi:ne180100]((std::string *)(v9 + 32), a4);
  uint64_t v10 = v14;
  *(void *)std::string::size_type v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v10;
  *long long v8 = (uint64_t)v9;
  char v11 = (uint64_t *)**a1;
  uint64_t v12 = (uint64_t *)v9;
  if (v11)
  {
    *a1 = v11;
    uint64_t v12 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_1924C5BE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,cxxopts::HelpGroupDetails>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    uint64_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<cxxopts::HelpOptionDetails>::__init_with_size[abi:ne180100]<cxxopts::HelpOptionDetails*,cxxopts::HelpOptionDetails*>(this[3].__r_.__value_.__r.__words, *((void *)a2 + 9), *((void *)a2 + 10), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3));
  return this;
}

void sub_1924C5CEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::vector<cxxopts::HelpOptionDetails>::__init_with_size[abi:ne180100]<cxxopts::HelpOptionDetails*,cxxopts::HelpOptionDetails*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x186186186186187) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    double result = operator new(168 * a4);
    long long v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[21 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = cxxopts::HelpOptionDetails::HelpOptionDetails((std::string *)&v8[v9 / 8], (const cxxopts::HelpOptionDetails *)(a2 + v9));
        v9 += 168;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1924C5E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***std::__exception_guard_exceptions<std::vector<cxxopts::HelpOptionDetails>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 168;
          std::allocator<cxxopts::HelpOptionDetails>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

std::string *cxxopts::HelpOptionDetails::HelpOptionDetails(std::string *this, const cxxopts::HelpOptionDetails *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    uint64_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  this[3].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 72);
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 5);
    this[4].__r_.__value_.__r.__words[0] = *((void *)a2 + 12);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v8;
  }
  this[4].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 104);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 7);
    this[5].__r_.__value_.__l.__size_ = *((void *)a2 + 16);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = v9;
  }
  uint64_t v10 = (std::string *)((char *)this + 136);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 136);
    this[6].__r_.__value_.__l.__size_ = *((void *)a2 + 19);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  LOWORD(this[6].__r_.__value_.__r.__words[2]) = *((_WORD *)a2 + 80);
  return this;
}

void sub_1924C6088(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 135) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v1 + 103) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,cxxopts::HelpGroupDetails>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void cxxopts::ParseResult::ParseResult(uint64_t a1, void *a2, uint64_t a3, char a4, int *a5, char ***a6)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 40) = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(unsigned char *)(a1 + 128) = a4;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  cxxopts::ParseResult::parse((cxxopts::ParseResult *)a1, a5, a6);
}

void sub_1924C6268(_Unwind_Exception *a1)
{
  uint64_t v6 = v2;
  if (*v6) {
    cxxopts::ParseResult::ParseResult(v1, *v6, (void **)(v1 + 136));
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v3);
  long long v8 = *(void ***)(v1 + 64);
  if (v8)
  {
    do
    {
      uint64_t v12 = (void **)*v8;
      if (*((char *)v8 + 39) < 0) {
        operator delete(v8[2]);
      }
      operator delete(v8);
      long long v8 = v12;
    }
    while (v12);
  }
  long long v9 = *v5;
  *uint64_t v5 = 0;
  if (v9)
  {
    operator delete(v9);
    uint64_t v10 = (void **)*v4;
    if (!*v4)
    {
LABEL_6:
      long long v11 = *(std::__shared_weak_count **)(v1 + 8);
      if (!v11) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v10 = (void **)*v4;
    if (!*v4) {
      goto LABEL_6;
    }
  }
  uint64_t v13 = *(void ***)(v1 + 24);
  uint64_t v14 = v10;
  if (v13 != v10)
  {
    do
    {
      if (*((char *)v13 - 1) < 0) {
        operator delete(*(v13 - 3));
      }
      v13 -= 3;
    }
    while (v13 != v10);
    uint64_t v14 = *v4;
  }
  *(void *)(v1 + 24) = v10;
  operator delete(v14);
  long long v11 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v11) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_19:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  goto LABEL_21;
}

void cxxopts::ParseResult::parse(cxxopts::ParseResult *this, int *a2, char ***a3)
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v3, "--([[:alnum:]][-_[:alnum:]]+)(=(.*))?|-([[:alnum:]]+)", 0);
}

void sub_1924C72B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)(v59 - 160));
  _Unwind_Resume(a1);
}

void cxxopts::ParseResult::checked_parse_arg(uint64_t a1, int a2, uint64_t a3, int *a4, void *a5, uint64_t a6)
{
  int v12 = *a4 + 1;
  int v13 = (*(uint64_t (**)(void))(**(void **)(*a5 + 72) + 56))(*(void *)(*a5 + 72));
  if (v12 < a2)
  {
    uint64_t v14 = *a5;
    if (v13)
    {
      BOOL v15 = (std::__shared_weak_count *)a5[1];
      uint64_t v30 = *a5;
      long long v31 = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v14 = *a5;
      }
      (*(void (**)(void **__return_ptr))(**(void **)(v14 + 72) + 72))(__p);
      cxxopts::ParseResult::parse_option(a1, &v30, a6, (uint64_t)__p);
      if (SHIBYTE(v33) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v16 = v31;
      if (!v31) {
        return;
      }
LABEL_15:
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      return;
    }
    uint64_t v19 = (std::__shared_weak_count *)a5[1];
    uint64_t v28 = *a5;
    unint64_t v29 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = *(const char **)(a3 + 8 * *a4 + 8);
    size_t v21 = strlen(v20);
    if (v21 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    long long v22 = (void *)v21;
    if (v21 >= 0x17)
    {
      uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v24 = v21 | 7;
      }
      uint64_t v25 = v24 + 1;
      uint64_t v23 = operator new(v24 + 1);
      __p[1] = v22;
      unint64_t v33 = v25 | 0x8000000000000000;
      __p[0] = v23;
    }
    else
    {
      HIBYTE(v33) = v21;
      uint64_t v23 = __p;
      if (!v21) {
        goto LABEL_27;
      }
    }
    memmove(v23, v20, (size_t)v22);
LABEL_27:
    *((unsigned char *)v22 + (void)v23) = 0;
    cxxopts::ParseResult::parse_option(a1, &v28, a6, (uint64_t)__p);
    if (SHIBYTE(v33) < 0) {
      operator delete(__p[0]);
    }
    long long v26 = v29;
    if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    ++*a4;
    return;
  }
  if (!v13)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::missing_argument_exception::missing_argument_exception(exception, a6);
  }
  uint64_t v17 = *a5;
  unint64_t v18 = (std::__shared_weak_count *)a5[1];
  uint64_t v34 = *a5;
  uint64_t v35 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = *a5;
  }
  (*(void (**)(void **__return_ptr))(**(void **)(v17 + 72) + 72))(__p);
  cxxopts::ParseResult::parse_option(a1, &v34, a6, (uint64_t)__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = v35;
  if (v35) {
    goto LABEL_15;
  }
}

void sub_1924C77E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1924C7868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

std::string *cxxopts::ParseResult::parse_option(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  long long v7 = std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>(a1 + 88, a2, (uint64_t)&std::piecewise_construct, &v18);
  std::string::size_type v8 = *a2;
  std::string::size_type v9 = a2[1];
  uint64_t v16 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    v18.__r_.__value_.__r.__words[0] = v8;
    v18.__r_.__value_.__l.__size_ = v9;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
  }
  cxxopts::OptionValue::ensure_value((uint64_t)(v7 + 4), (uint64_t)&v18);
  std::string::size_type size = (std::__shared_weak_count *)v18.__r_.__value_.__l.__size_;
  if (v18.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v18.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  ++v7[6];
  (*(void (**)(void, uint64_t))(*(void *)v7[4] + 24))(v7[4], a4);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    uint64_t v11 = *a2;
    int v12 = (std::string *)(*a2 + 24);
    unint64_t v13 = *(void *)(a1 + 144);
    if (v13 < *(void *)(a1 + 152)) {
      goto LABEL_10;
    }
LABEL_13:
    double result = std::vector<cxxopts::KeyValue>::__emplace_back_slow_path<std::string const&,std::string const&>((std::string **)(a1 + 136), (uint64_t)v12, a4);
    goto LABEL_19;
  }
  uint64_t v11 = *a2;
  int v12 = (std::string *)(*a2 + 24);
  unint64_t v13 = *(void *)(a1 + 144);
  if (v13 >= *(void *)(a1 + 152)) {
    goto LABEL_13;
  }
LABEL_10:
  if (*(char *)(v11 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v11 + 24), *(void *)(v11 + 32));
  }
  else {
    std::string v18 = *v12;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v17 = *(std::string *)a4;
  }
  long long v15 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  *(void *)(v13 + 16) = *((void *)&v18.__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v13 = v15;
  *(std::string *)(v13 + 24) = v17;
  double result = (std::string *)(v13 + 48);
  *(void *)(a1 + 144) = v13 + 48;
LABEL_19:
  *(void *)(a1 + 144) = result;
  return result;
}

void sub_1924C7AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    *(void *)(v20 + 144) = v21;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v20 + 144) = v21;
  _Unwind_Resume(exception_object);
}

void sub_1924C7AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1924C7AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void cxxopts::ParseResult::parse_default(uint64_t a1, void *a2)
{
  std::string::size_type v9 = a2;
  std::locale v3 = std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>(a1 + 88, a2, (uint64_t)&std::piecewise_construct, &v9);
  long long v4 = v3 + 4;
  uint64_t v5 = (void *)*a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v8 = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v9 = v5;
    uint64_t v10 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    std::string::size_type v9 = (void *)*a2;
    uint64_t v10 = 0;
  }
  cxxopts::OptionValue::ensure_value((uint64_t)(v3 + 4), (uint64_t)&v9);
  long long v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(void))(*(void *)*v4 + 32))();
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1924C7C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924C7C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::option_syntax_exception::option_syntax_exception(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  long long v4 = std::string::insert(&v20, 0, "Argument ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    long long v7 = (const std::string::value_type *)a2;
  }
  else {
    long long v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  std::string::size_type v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v19 = 3;
  LODWORD(__p) = 10060002;
  uint64_t v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v13 = std::string::append(&v23, " starts with a - but has incorrect syntax");
  long long v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  std::string::size_type size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = &unk_1EE327328;
  if ((v16 & 0x80000000) == 0)
  {
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(unsigned char *)(a1 + 31) = v16;
    *(void *)a1 = &unk_1EE3273A0;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(void *)a1 = &unk_1EE3273A0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
  }
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  *(void *)a1 = &unk_1EE3273F0;
  return a1;
}

void sub_1924C7EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void cxxopts::ParseResult::add_to_option(void **a1, uint64_t a2, uint64_t a3)
{
  int v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(*a1, a2);
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::option_not_exists_exception::option_not_exists_exception(exception, a2);
  }
  uint64_t v7 = v6[6];
  uint64_t v10 = v6[5];
  uint64_t v11 = (std::__shared_weak_count *)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  cxxopts::ParseResult::parse_option((uint64_t)a1, &v10, a2, a3);
  std::string::size_type v8 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1924C8088(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924C809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t cxxopts::option_not_exists_exception::option_not_exists_exception(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  long long v4 = std::string::insert(&v20, 0, "Option ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  std::string::size_type v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v19 = 3;
  LODWORD(__p) = 10060002;
  uint64_t v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v13 = std::string::append(&v23, " does not exist");
  long long v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  std::string::size_type size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = &unk_1EE327328;
  if ((v16 & 0x80000000) == 0)
  {
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(unsigned char *)(a1 + 31) = v16;
    *(void *)a1 = &unk_1EE3273A0;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(void *)a1 = &unk_1EE3273A0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
  }
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  *(void *)a1 = &unk_1EE327468;
  return a1;
}

void sub_1924C82E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::missing_argument_exception::missing_argument_exception(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  long long v4 = std::string::insert(&v20, 0, "Option ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  std::string::size_type v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v19 = 3;
  LODWORD(__p) = 10060002;
  uint64_t v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v13 = std::string::append(&v23, " is missing an argument");
  long long v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  std::string::size_type size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = &unk_1EE327328;
  if ((v16 & 0x80000000) == 0)
  {
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(unsigned char *)(a1 + 31) = v16;
    *(void *)a1 = &unk_1EE3273A0;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(void *)a1 = &unk_1EE3273A0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
  }
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  *(void *)a1 = &unk_1EE327418;
  return a1;
}

void sub_1924C85F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void cxxopts::OptionValue::ensure_value(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1)
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)a2 + 72) + 16))(&v6);
    long long v3 = v6;
    long long v6 = 0uLL;
    long long v4 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      long long v5 = (std::__shared_weak_count *)*((void *)&v6 + 1);
      if (!*((void *)&v6 + 1)) {
        return;
      }
    }
    else
    {
      long long v5 = (std::__shared_weak_count *)*((void *)&v6 + 1);
      if (!*((void *)&v6 + 1)) {
        return;
      }
    }
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

std::string *std::vector<cxxopts::KeyValue>::__emplace_back_slow_path<std::string const&,std::string const&>(std::string **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)a1[1] - (char *)*a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 4) + 1;
  if (v5 > 0x555555555555555) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string::size_type v9 = (char *)operator new(48 * v8);
  }
  else
  {
    std::string::size_type v9 = 0;
  }
  long long v10 = (std::string *)&v9[16 * (v4 >> 4)];
  uint64_t v11 = (std::string *)&v9[48 * v8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v22 = *(std::string *)a3;
  }
  std::string *v10 = v23;
  *(std::string *)&v9[v4 + 24] = v22;
  long long v12 = v10 + 2;
  std::string v21 = v10 + 2;
  uint64_t v14 = *a1;
  unint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    std::string v17 = a1[1];
  }
  else
  {
    do
    {
      long long v15 = *(_OWORD *)&v13[-2].__r_.__value_.__l.__data_;
      v10[-2].__r_.__value_.__r.__words[2] = v13[-2].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v15;
      v13[-2].__r_.__value_.__l.__size_ = 0;
      v13[-2].__r_.__value_.__r.__words[2] = 0;
      v13[-2].__r_.__value_.__r.__words[0] = 0;
      long long v16 = *(_OWORD *)&v13[-1].__r_.__value_.__l.__data_;
      v10[-1].__r_.__value_.__r.__words[2] = v13[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v16;
      v10 -= 2;
      v13[-1].__r_.__value_.__l.__size_ = 0;
      v13[-1].__r_.__value_.__r.__words[2] = 0;
      v13[-1].__r_.__value_.__r.__words[0] = 0;
      v13 -= 2;
    }
    while (v13 != v14);
    std::string v17 = *a1;
    unint64_t v13 = a1[1];
    long long v12 = v21;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v13 != v17)
  {
    std::string v18 = v13 - 2;
    while (1)
    {
      if (SHIBYTE(v18[1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0) {
LABEL_28:
        }
          operator delete(v18->__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_28;
      }
      BOOL v19 = v18 == v17;
      v18 -= 2;
      if (v19)
      {
        unint64_t v13 = v17;
        break;
      }
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v12;
}

void sub_1924C8A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    std::__split_buffer<cxxopts::KeyValue>::~__split_buffer((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  std::__split_buffer<cxxopts::KeyValue>::~__split_buffer((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<cxxopts::KeyValue>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t cxxopts::option_requires_argument_exception::option_requires_argument_exception(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  uint64_t v4 = std::string::insert(&v20, 0, "Option ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  std::string::size_type v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v19 = 3;
  LODWORD(__p) = 10060002;
  uint64_t v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v13 = std::string::append(&v23, " requires an argument");
  long long v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  std::string::size_type size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = &unk_1EE327328;
  if ((v16 & 0x80000000) == 0)
  {
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(unsigned char *)(a1 + 31) = v16;
    *(void *)a1 = &unk_1EE3273A0;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(void *)a1 = &unk_1EE3273A0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
  }
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  *(void *)a1 = &unk_1EE3274B8;
  return a1;
}

void sub_1924C8D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  std::string v17 = (void *)(a1 + 16);
  std::string v18 = operator new(0x38uLL);
  uint64_t v14 = v18;
  *std::string v18 = 0;
  v18[1] = v10;
  char v19 = *a4;
  v18[2] = **a4;
  uint64_t v20 = v19[1];
  v18[3] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  v18[4] = 0;
  v18[5] = 0;
  v18[6] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_28:
      *uint64_t v14 = *v24;
LABEL_63:
      *uint64_t v24 = v14;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v33 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v33 & v10;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v33 & v10));
      if (v24) {
        goto LABEL_28;
      }
    }
  }
  *uint64_t v14 = *v17;
  *std::string v17 = v14;
  *(void *)(v23 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11) {
        v34 %= v11;
      }
    }
    else
    {
      v34 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924C9148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::option_not_present_exception::option_not_present_exception(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  unint64_t v4 = std::string::insert(&v20, 0, "Option ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v19 = 3;
  LODWORD(__p) = 10060002;
  unint64_t v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v13 = std::string::append(&v23, " not present");
  unint64_t v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  std::string::size_type size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = &unk_1EE327328;
  if ((v16 & 0x80000000) == 0)
  {
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(unsigned char *)(a1 + 31) = v16;
    *(void *)a1 = &unk_1EE3273A0;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(void *)a1 = &unk_1EE3273A0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
  }
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  *(void *)a1 = &unk_1EE327490;
  return a1;
}

void sub_1924C9394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void cxxopts::ParseResult::~ParseResult(cxxopts::ParseResult *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 18);
    unint64_t v4 = (void *)*((void *)this + 17);
    if (v3 == v2)
    {
LABEL_11:
      *((void *)this + 18) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        unint64_t v4 = (void *)*((void *)this + 17);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 88);
  long long v5 = (void **)*((void *)this + 8);
  if (v5)
  {
    do
    {
      long long v10 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      long long v5 = v10;
    }
    while (v10);
  }
  int v6 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 3);
    unint64_t v9 = (void *)*((void *)this + 2);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 24;
      }
      while (v8 != v7);
      unint64_t v9 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v7;
    operator delete(v9);
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void cxxopts::Options::~Options(cxxopts::Options *this)
{
  std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::destroy((uint64_t)this + 192, *((void **)this + 25));
  uint64_t v2 = (void **)*((void *)this + 21);
  if (v2)
  {
    do
    {
      uint64_t v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 16);
    int v6 = (void *)*((void *)this + 15);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 24;
      }
      while (v5 != v4);
      int v6 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v4;
    operator delete(v6);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((*((char *)this + 95) & 0x80000000) == 0)
    {
LABEL_18:
      if ((*((char *)this + 71) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_24;
    }
  }
  else if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*((void **)this + 9));
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_19:
    if ((*((char *)this + 47) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_20:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_26:
    operator delete(*(void **)this);
    return;
  }
LABEL_25:
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0) {
    goto LABEL_26;
  }
}

void cxxopts::Options::groups(cxxopts::Options *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = (void *)*((void *)this + 24);
  uint64_t v3 = (char *)this + 200;
  if (v2 != (void *)((char *)this + 200))
  {
    do
    {
      if (*((char *)v2 + 55) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v2[4], v2[5]);
      }
      else {
        std::string __p = *(std::string *)(v2 + 4);
      }
      unint64_t v5 = *(void *)(a2 + 8);
      if (v5 >= *(void *)(a2 + 16))
      {
        uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)&__p);
        int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v8;
        if (v9 < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          uint64_t v7 = (char *)v2[1];
          if (v7)
          {
            do
            {
LABEL_12:
              long long v10 = v7;
              uint64_t v7 = *(char **)v7;
            }
            while (v7);
            goto LABEL_3;
          }
        }
        else
        {
          uint64_t v7 = (char *)v2[1];
          if (v7) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        long long v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v5 = v6;
        *(void *)(a2 + 8) = v5 + 24;
        uint64_t v7 = (char *)v2[1];
        if (v7) {
          goto LABEL_12;
        }
      }
      do
      {
        long long v10 = (char *)v2[2];
        BOOL v11 = *(void *)v10 == (void)v2;
        uint64_t v2 = v10;
      }
      while (!v11);
LABEL_3:
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1924C9860(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924C9874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void cxxopts::Options::help(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  int v4 = *(char *)(a1 + 47);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v5 = *(void *)(a1 + 32);
  }
  unint64_t v6 = v5 + 10;
  if (v5 + 10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 10;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 10;
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    long long v12 = (const void *)(a1 + 24);
  }
  else {
    long long v12 = *(const void **)(a1 + 24);
  }
  memmove(p_dst, v12, v5);
LABEL_15:
  strcpy((char *)p_dst + v5, "\nUsage:\n  ");
  int v13 = *(char *)(a1 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v14 = *(const std::string::value_type **)a1;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a1 + 8);
  }
  int v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::string v18 = std::string::append(&v28, " ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = *(char *)(a1 + 71);
  if (v20 >= 0) {
    std::string v21 = (const std::string::value_type *)(a1 + 48);
  }
  else {
    std::string v21 = *(const std::string::value_type **)(a1 + 48);
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    std::string::size_type v22 = *(void *)(a1 + 56);
  }
  std::string v23 = std::string::append(&v29, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
LABEL_34:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (*(void *)(a1 + 128) == *(void *)(a1 + 120)) {
        goto LABEL_47;
      }
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_34;
  }
LABEL_30:
  if (*(void *)(a1 + 128) == *(void *)(a1 + 120)) {
    goto LABEL_47;
  }
LABEL_35:
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(void *)(a1 + 80)) {
      goto LABEL_47;
    }
  }
  else if (!*(unsigned char *)(a1 + 95))
  {
    goto LABEL_47;
  }
  std::operator+<char>();
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v25 = &v29;
  }
  else {
    BOOL v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  std::string::append(&v30, (const std::string::value_type *)v25, size);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
LABEL_47:
  std::string::append(&v30, "\n\n");
  if (a2[1] == *a2) {
    cxxopts::Options::generate_all_groups_help(a1, &v30);
  }
  else {
    cxxopts::Options::generate_group_help(a1, &v30, a2);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a3, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = v30;
  }
}

void sub_1924C9B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void cxxopts::Options::generate_all_groups_help(uint64_t a1, std::string *a2)
{
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::reserve(&v16, *(void *)(a1 + 208));
  int v4 = *(void **)(a1 + 192);
  if (v4 != (void *)(a1 + 200))
  {
    std::vector<std::string>::pointer end = v16.__end_;
    while (1)
    {
      unint64_t v6 = (long long *)(v4 + 4);
      if (end >= v16.__end_cap_.__value_)
      {
        std::vector<std::string>::pointer end = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v16, (uint64_t)v6);
        v16.__end_ = end;
        uint64_t v8 = (void *)v4[1];
        if (v8) {
          goto LABEL_11;
        }
      }
      else if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(end++, (const std::string::value_type *)v4[4], v4[5]);
        v16.__end_ = end;
        uint64_t v8 = (void *)v4[1];
        if (v8)
        {
          do
          {
LABEL_11:
            int v9 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        long long v7 = *v6;
        end->__r_.__value_.__r.__words[2] = v4[6];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        v16.__end_ = ++end;
        uint64_t v8 = (void *)v4[1];
        if (v8) {
          goto LABEL_11;
        }
      }
      do
      {
        int v9 = (void *)v4[2];
        BOOL v10 = *v9 == (void)v4;
        int v4 = v9;
      }
      while (!v10);
LABEL_3:
      int v4 = v9;
      if (v9 == (void *)(a1 + 200)) {
        goto LABEL_17;
      }
    }
  }
  std::vector<std::string>::pointer end = v16.__end_;
LABEL_17:
  begin = end;
  if (end != v16.__begin_)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    begin = v16.__begin_;
    do
    {
      cxxopts::Options::help_one_group(a1, (uint64_t)&begin[v12], (uint64_t)__p);
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v14 = v18;
      }
      else {
        std::string::size_type v14 = (std::string::size_type)__p[1];
      }
      if (v14)
      {
        std::string::size_type v15 = (v18 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        std::string::append(a2, v15, v14);
        if (v13 < -1 - 0x5555555555555555 * (((char *)v16.__end_ - (char *)v16.__begin_) >> 3)) {
          std::string::push_back(a2, 10);
        }
      }
      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
      ++v13;
      begin = v16.__begin_;
      std::vector<std::string>::pointer end = v16.__end_;
      ++v12;
    }
    while (v13 != 0xAAAAAAAAAAAAAAABLL * (((char *)v16.__end_ - (char *)v16.__begin_) >> 3));
  }
  if (begin)
  {
    if (end != begin)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != begin);
      std::vector<std::string>::pointer end = v16.__begin_;
    }
    v16.__end_ = begin;
    operator delete(end);
  }
}

void sub_1924C9E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void cxxopts::Options::generate_group_help(uint64_t a1, std::string *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      cxxopts::Options::help_one_group(a1, v3 + v7, (uint64_t)__p);
      if ((v12 & 0x80u) == 0) {
        std::string::size_type v9 = v12;
      }
      else {
        std::string::size_type v9 = (std::string::size_type)__p[1];
      }
      if (v9)
      {
        BOOL v10 = (v12 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        std::string::append(a2, v10, v9);
        if (v8 < -1 - 0x5555555555555555 * ((a3[1] - *a3) >> 3)) {
          std::string::push_back(a2, 10);
        }
      }
      if ((char)v12 < 0) {
        operator delete(__p[0]);
      }
      ++v8;
      uint64_t v3 = *a3;
      v7 += 24;
    }
    while (v8 != 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  }
}

void sub_1924C9F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cxxopts::Options::help_one_group(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 200;
  uint64_t v5 = *(void *)(a1 + 200);
  if (!v5) {
    goto LABEL_40;
  }
  int v6 = *(char *)(a2 + 23);
  size_t v7 = v6 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  unint64_t v8 = v6 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v9 = a1 + 200;
  do
  {
    int v10 = *(char *)(v5 + 55);
    if (v10 >= 0) {
      size_t v11 = *(unsigned __int8 *)(v5 + 55);
    }
    else {
      size_t v11 = *(void *)(v5 + 40);
    }
    if (v10 >= 0) {
      unsigned __int8 v12 = (const void *)(v5 + 32);
    }
    else {
      unsigned __int8 v12 = *(const void **)(v5 + 32);
    }
    if (v7 >= v11) {
      size_t v13 = v11;
    }
    else {
      size_t v13 = v7;
    }
    int v14 = memcmp(v12, v8, v13);
    BOOL v15 = v11 < v7;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    BOOL v16 = !v15;
    if (v15) {
      long long v17 = (uint64_t *)(v5 + 8);
    }
    else {
      long long v17 = (uint64_t *)v5;
    }
    if (v16) {
      uint64_t v9 = v5;
    }
    uint64_t v5 = *v17;
  }
  while (*v17);
  if (v9 == v4) {
    goto LABEL_40;
  }
  int v18 = *(char *)(v9 + 55);
  if (v18 >= 0) {
    size_t v19 = *(unsigned __int8 *)(v9 + 55);
  }
  else {
    size_t v19 = *(void *)(v9 + 40);
  }
  if (v18 >= 0) {
    int v20 = (const void *)(v9 + 32);
  }
  else {
    int v20 = *(const void **)(v9 + 32);
  }
  if (v19 >= v7) {
    size_t v21 = v7;
  }
  else {
    size_t v21 = v19;
  }
  int v22 = memcmp(v8, v20, v21);
  BOOL v23 = v7 < v19;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (v23)
  {
LABEL_40:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    return;
  }
  BOOL v121 = 0;
  int v122 = 0;
  unint64_t v123 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  unint64_t v114 = (std::string *)a3;
  if (v7)
  {
    std::operator+<char>();
    long long v24 = std::string::append(&__b, " options:\n");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
    v127.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
    std::string::size_type v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
    v24->__r_.__value_.__r.__words[0] = 0;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__r.__words[0] = v25;
    __p.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26;
    if ((v26 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)v25;
    }
    if ((v26 & 0x80u) == 0) {
      std::string::size_type v28 = v26;
    }
    else {
      std::string::size_type v28 = v127.__r_.__value_.__r.__words[0];
    }
    std::string::append((std::string *)a3, (const std::string::value_type *)p_p, v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__b.__r_.__value_.__l.__data_);
    }
  }
  std::string v29 = *(unsigned char **)(v9 + 104);
  std::string v30 = *(unsigned char **)(v9 + 112);
  if (v29 == v30)
  {
LABEL_252:
    BOOL v67 = (char *)v121;
    goto LABEL_253;
  }
  unint64_t v31 = 0;
  size_t v116 = (void *)(a1 + 152);
  uint64_t v32 = v29 + 161;
  do
  {
    if (!*(v32 - 1)
      || !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v116, (uint64_t)(v32 - 137))|| *(unsigned char *)(a1 + 96))
    {
      *((unsigned char *)&v120.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v120, "  ");
      uint64_t v34 = *(v32 - 138);
      if ((v34 & 0x80u) != 0) {
        uint64_t v34 = *(void *)(v32 - 153);
      }
      if (!v34)
      {
        std::string::append(&v120, "   ");
        goto LABEL_75;
      }
      std::operator+<char>();
      uint64_t v35 = std::string::append(&__b, ",");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v37 = &__p;
      }
      else {
        unint64_t v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v120, (const std::string::value_type *)v37, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_75;
        }
      }
      else if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_75;
      }
      operator delete(__b.__r_.__value_.__l.__data_);
LABEL_75:
      uint64_t v39 = *(v32 - 114);
      if ((v39 & 0x80u) != 0) {
        uint64_t v39 = *(void *)(v32 - 129);
      }
      if (v39
        && ((std::operator+<char>(), (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          ? (int8x8_t v40 = &__p)
          : (int8x8_t v40 = (std::string *)__p.__r_.__value_.__r.__words[0]),
            (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (std::string::size_type v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]))
          : (std::string::size_type v41 = __p.__r_.__value_.__l.__size_),
            std::string::append(&v120, (const std::string::value_type *)v40, v41),
            SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint8x8_t v42 = v32 - 25;
        int v43 = (char)*(v32 - 2);
        if ((v43 & 0x80000000) == 0)
        {
LABEL_86:
          if (v43)
          {
            long long v44 = *(_OWORD *)v42;
            __p.__r_.__value_.__r.__words[2] = *((void *)v42 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v44;
            if (*v32) {
              goto LABEL_125;
            }
            goto LABEL_94;
          }
          goto LABEL_93;
        }
      }
      else
      {
        uint8x8_t v42 = v32 - 25;
        int v43 = (char)*(v32 - 2);
        if ((v43 & 0x80000000) == 0) {
          goto LABEL_86;
        }
      }
      std::string::size_type v45 = *(void *)(v32 - 17);
      if (v45)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v42, v45);
        if (*v32) {
          goto LABEL_125;
        }
        goto LABEL_94;
      }
LABEL_93:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
      LODWORD(__p.__r_.__value_.__l.__data_) = 6779489;
      if (*v32) {
        goto LABEL_125;
      }
LABEL_94:
      if (!*(v32 - 57))
      {
        std::operator+<char>();
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_b = &__b;
        }
        else {
          p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
        }
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = __b.__r_.__value_.__l.__size_;
        }
        std::string::append(&v120, (const std::string::value_type *)p_b, v58);
        if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_125:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::size_type v60 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v60 = v120.__r_.__value_.__l.__size_;
          }
          if (v31 <= v60) {
            unint64_t v31 = v60;
          }
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = v120;
          }
          long long v118 = 0uLL;
          uint64_t v119 = 0;
          uint64_t v61 = v122;
          if ((unint64_t)v122 >= v123)
          {
            int v122 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(&v121, (uint64_t)&__p);
            if (SHIBYTE(v119) < 0)
            {
              operator delete((void *)v118);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_55:
                operator delete(__p.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_56;
                }
LABEL_140:
                operator delete(v120.__r_.__value_.__l.__data_);
                goto LABEL_56;
              }
            }
            else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              goto LABEL_55;
            }
          }
          else
          {
            long long v62 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((void *)v122 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v61 = v62;
            memset(&__p, 0, sizeof(__p));
            uint64_t v63 = v119;
            *(_OWORD *)(v61 + 24) = v118;
            *((void *)v61 + 5) = v63;
            uint64_t v119 = 0;
            long long v118 = 0uLL;
            int v122 = v61 + 48;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_55;
            }
          }
          if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_56;
          }
          goto LABEL_140;
        }
        uint64_t v59 = (void *)__b.__r_.__value_.__r.__words[0];
LABEL_124:
        operator delete(v59);
        goto LABEL_125;
      }
      std::operator+<char>();
      char v46 = std::string::append(&v126, "(=");
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v124.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      int v48 = (char)*(v32 - 26);
      if (v48 >= 0) {
        unint64_t v49 = v32 - 49;
      }
      else {
        unint64_t v49 = *(const std::string::value_type **)(v32 - 49);
      }
      if (v48 >= 0) {
        std::string::size_type v50 = *(v32 - 26);
      }
      else {
        std::string::size_type v50 = *(void *)(v32 - 41);
      }
      std::string v51 = std::string::append(&v124, v49, v50);
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      std::string v53 = std::string::append(&v127, ")]");
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      __b.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v55 = &__b;
      }
      else {
        uint64_t v55 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v56 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v56 = __b.__r_.__value_.__l.__size_;
      }
      std::string::append(&v120, (const std::string::value_type *)v55, v56);
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__b.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_109:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_110;
          }
          goto LABEL_122;
        }
      }
      else if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_109;
      }
      operator delete(v127.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_110:
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_125;
        }
LABEL_123:
        uint64_t v59 = (void *)v126.__r_.__value_.__r.__words[0];
        goto LABEL_124;
      }
LABEL_122:
      operator delete(v124.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_125;
      }
      goto LABEL_123;
    }
LABEL_56:
    unint64_t v33 = v32 + 7;
    v32 += 168;
  }
  while (v33 != v30);
  uint64_t v65 = *(void *)(v9 + 104);
  uint64_t v64 = *(void *)(v9 + 112);
  if (v31 >= 0x1E) {
    unint64_t v66 = 30;
  }
  else {
    unint64_t v66 = v31;
  }
  BOOL v67 = (char *)v121;
  uint64_t v113 = v64;
  if (v65 != v64)
  {
    unint64_t v68 = 74 - v66;
    std::string::size_type v69 = v66 + 2;
    uint64_t v70 = ((v66 + 2) & 0x38) + 8;
    if (((v66 + 2) | 7) != 0x17) {
      uint64_t v70 = (v66 + 2) | 7;
    }
    size_t __sz = v70 + 1;
    unint64_t v111 = (v70 + 1) | 0x8000000000000000;
    while (*(unsigned char *)(v65 + 160)
         && std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v116, v65 + 24)&& !*(unsigned char *)(a1 + 96))
    {
LABEL_151:
      v65 += 168;
      if (v65 == v113) {
        goto LABEL_252;
      }
    }
    if (*(char *)(v65 + 71) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v65 + 48), *(void *)(v65 + 56));
    }
    else {
      std::string __p = *(std::string *)(v65 + 48);
    }
    if (*(unsigned char *)(v65 + 72))
    {
      if (!*(unsigned char *)(v65 + 161)) {
        goto LABEL_169;
      }
      int8x8_t v71 = (uint64_t **)(v65 + 80);
      int v72 = *(char *)(v65 + 103);
      if (v72 < 0)
      {
        if (*(void *)(v65 + 88) != 5) {
          goto LABEL_169;
        }
        int8x8_t v71 = (uint64_t **)*v71;
      }
      else if (v72 != 5)
      {
        goto LABEL_169;
      }
      int v73 = *(_DWORD *)v71;
      int v74 = *((unsigned __int8 *)v71 + 4);
      if (v73 != 1936482662 || v74 != 101)
      {
LABEL_169:
        std::operator+<char>();
        uint64_t v76 = std::string::append(&v127, ")");
        std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
        v126.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v126.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
        std::string::size_type v78 = HIBYTE(v76->__r_.__value_.__r.__words[2]);
        v76->__r_.__value_.__r.__words[0] = 0;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        __b.__r_.__value_.__r.__words[0] = v77;
        *(std::string::size_type *)((char *)&__b.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v126.__r_.__value_.__r.__words + 7);
        __b.__r_.__value_.__l.__size_ = v126.__r_.__value_.__r.__words[0];
        *((unsigned char *)&__b.__r_.__value_.__s + 23) = v78;
        if ((v78 & 0x80u) == 0) {
          uint64_t v79 = &__b;
        }
        else {
          uint64_t v79 = (std::string *)v77;
        }
        if ((v78 & 0x80u) == 0) {
          std::string::size_type v80 = v78;
        }
        else {
          std::string::size_type v80 = __b.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v79, v80);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__b.__r_.__value_.__l.__data_);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_251;
          }
        }
        else
        {
          if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_177;
          }
LABEL_251:
          operator delete(v127.__r_.__value_.__l.__data_);
        }
      }
    }
LABEL_177:
    memset(&v124, 0, sizeof(v124));
    std::string::size_type v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v82 = &__p;
    }
    else {
      int v82 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v81 = __p.__r_.__value_.__l.__size_;
    }
    if (v81)
    {
      unint64_t v83 = 0;
      std::string v84 = &v82->__r_.__value_.__s.__data_[1];
      unint64_t v85 = (unint64_t)v82;
      std::__fs::filesystem::path v86 = (char *)v82;
      while (1)
      {
        int v89 = *v86;
        if (v89 != 10)
        {
          if (v89 == 32) {
            int v82 = (std::string *)v86;
          }
          if (v83 <= v68)
          {
            ++v83;
            goto LABEL_186;
          }
          if (v82 != (std::string *)v85)
          {
            std::string::append[abi:ne180100]<std::__wrap_iter<char *>,0>(&v124, v85, (char *)v82);
            *((unsigned char *)&v127.__r_.__value_.__s + 23) = 1;
            LOWORD(v127.__r_.__value_.__l.__data_) = 10;
            std::string::append(&v124, (const std::string::value_type *)&v127, 1uLL);
            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v127.__r_.__value_.__l.__data_);
            }
            std::string::append(&v124, v69, 32);
            unint64_t v83 = 0;
            unint64_t v85 = (unint64_t)v82->__r_.__value_.__r.__words + 1;
            goto LABEL_186;
          }
          std::string::append[abi:ne180100]<std::__wrap_iter<char *>,0>(&v124, v85, v84);
          *((unsigned char *)&__b.__r_.__value_.__s + 23) = 1;
          LOWORD(__b.__r_.__value_.__l.__data_) = 10;
          std::string::append(&v124, (const std::string::value_type *)&__b, 1uLL);
          if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__b.__r_.__value_.__l.__data_);
          }
          std::string::append(&v124, v69, 32);
          unint64_t v83 = 0;
        }
        unint64_t v85 = (unint64_t)(v86 + 1);
        int v82 = (std::string *)(v86 + 1);
LABEL_186:
        ++v86;
        std::string::size_type v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v88 = &__p;
        }
        else {
          int v88 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v87 = __p.__r_.__value_.__l.__size_;
        }
        ++v84;
        if (v86 == (char *)v88 + v87) {
          goto LABEL_204;
        }
      }
    }
    std::__fs::filesystem::path v86 = (char *)v82;
    unint64_t v85 = (unint64_t)v82;
LABEL_204:
    std::string::append[abi:ne180100]<std::__wrap_iter<char *>,0>(&v124, v85, v86);
    long long v90 = v114;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v91 = v67[23];
    if (v91 >= 0) {
      uint64_t v92 = v67;
    }
    else {
      uint64_t v92 = *(const std::string::value_type **)v67;
    }
    if (v91 >= 0) {
      std::string::size_type v93 = v67[23];
    }
    else {
      std::string::size_type v93 = *((void *)v67 + 1);
    }
    std::string::append(v114, v92, v93);
    unint64_t v94 = v67[23];
    if ((v94 & 0x80u) != 0) {
      unint64_t v94 = *((void *)v67 + 1);
    }
    unint64_t v95 = v66;
    BOOL v96 = v66 >= v94;
    unint64_t v97 = v66 - v94;
    if (!v96)
    {
      std::string::push_back(v114, 10);
      unint64_t v66 = v95;
      if (v95 >= 0x15)
      {
        unint64_t v98 = operator new(__sz);
        __b.__r_.__value_.__l.__size_ = v69;
        __b.__r_.__value_.__r.__words[2] = v111;
        __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
      }
      else
      {
        *((unsigned char *)&__b.__r_.__value_.__s + 23) = v69;
        unint64_t v98 = &__b;
      }
      memset(v98, 32, v69);
      *((unsigned char *)v98 + v95 + 2) = 0;
      std::string __p = __b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v101 = &__p;
      }
      else {
        BOOL v101 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v102 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(v114, (const std::string::value_type *)v101, v102);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_229;
      }
      goto LABEL_230;
    }
    std::string::size_type v99 = v69 - v94;
    if (v69 - v94 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v99 >= 0x17)
    {
      uint64_t v105 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v99 | 7) != 0x17) {
        uint64_t v105 = v99 | 7;
      }
      uint64_t v106 = v105 + 1;
      int v100 = operator new(v105 + 1);
      __b.__r_.__value_.__l.__size_ = v99;
      __b.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
      long long v90 = v114;
    }
    else
    {
      *((unsigned char *)&__b.__r_.__value_.__s + 23) = v69 - v94;
      int v100 = &__b;
      if (v69 == v94)
      {
LABEL_242:
        v100[v97 + 2] = 0;
        std::string __p = __b;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v107 = &__p;
        }
        else {
          char v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v108 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(v90, (const std::string::value_type *)v107, v108);
        unint64_t v66 = v95;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_229:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_230:
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v103 = &v124;
        }
        else {
          uint64_t v103 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v104 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v104 = v124.__r_.__value_.__l.__size_;
        }
        std::string::append(v90, (const std::string::value_type *)v103, v104);
        std::string::push_back(v90, 10);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v67 += 48;
        goto LABEL_151;
      }
    }
    memset(v100, 32, v99);
    goto LABEL_242;
  }
LABEL_253:
  if (v67)
  {
    BOOL v109 = v122;
    uint64_t v110 = v67;
    if (v122 == v67)
    {
LABEL_262:
      int v122 = v67;
      operator delete(v110);
      return;
    }
    while (1)
    {
      if (*(v109 - 1) < 0)
      {
        operator delete(*((void **)v109 - 3));
        if ((*(v109 - 25) & 0x80000000) == 0) {
          goto LABEL_257;
        }
      }
      else if ((*(v109 - 25) & 0x80000000) == 0)
      {
LABEL_257:
        v109 -= 48;
        if (v109 == v67) {
          goto LABEL_261;
        }
        continue;
      }
      operator delete(*((void **)v109 - 6));
      v109 -= 48;
      if (v109 == v67)
      {
LABEL_261:
        uint64_t v110 = v121;
        goto LABEL_262;
      }
    }
  }
}

void sub_1924CABA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 153) < 0) {
    operator delete(*(void **)(v40 - 176));
  }
  if (*(char *)(a14 + 23) < 0) {
    operator delete(*(void **)a14);
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a32);
  _Unwind_Resume(a1);
}

std::string *std::string::append[abi:ne180100]<std::__wrap_iter<char *>,0>(std::string *this, unint64_t a2, char *a3)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = (unint64_t)&a3[-a2];
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == (char *)a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > a2) {
      goto LABEL_17;
    }
  }
  else
  {
    if (a3 == (char *)a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    int v10 = this;
    if ((unint64_t)this > a2)
    {
LABEL_17:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        size_t v19 = this;
        if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_19:
          int v20 = (char *)v19 + size;
          if ((char *)a2 == a3) {
            goto LABEL_34;
          }
          goto LABEL_23;
        }
      }
      else
      {
        size_t v19 = this;
        if ((v6 & 0x80) == 0) {
          goto LABEL_19;
        }
      }
      size_t v19 = (std::string *)this->__r_.__value_.__r.__words[0];
      int v20 = (unsigned char *)(this->__r_.__value_.__r.__words[0] + size);
      if ((char *)a2 == a3) {
        goto LABEL_34;
      }
LABEL_23:
      if (v7 >= 0x20)
      {
        long long v24 = (char *)v19 + size;
        unint64_t v25 = (unint64_t)v19 + size - a2;
        size_t v21 = (char *)a2;
        if (v25 >= 0x20)
        {
          v20 += v7 & 0xFFFFFFFFFFFFFFE0;
          size_t v21 = (char *)(a2 + (v7 & 0xFFFFFFFFFFFFFFE0));
          std::string::size_type v26 = (long long *)(a2 + 16);
          unint64_t v27 = v24 + 16;
          unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v29 = *v26;
            *(v27 - 1) = *(v26 - 1);
            *unint64_t v27 = v29;
            v26 += 2;
            v27 += 2;
            v28 -= 32;
          }
          while (v28);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_34;
          }
        }
      }
      else
      {
        size_t v21 = (char *)a2;
      }
      do
      {
        char v30 = *v21++;
        *v20++ = v30;
      }
      while (v21 != a3);
LABEL_34:
      *int v20 = 0;
      std::string::size_type v31 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v31;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v31 & 0x7F;
      }
      return this;
    }
  }
  if ((unint64_t)v10->__r_.__value_.__r.__words + size + 1 <= a2) {
    goto LABEL_17;
  }
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 <= 0x16)
  {
    HIBYTE(v38) = v7;
    p_p = (char *)&__p;
    if ((char *)a2 != a3) {
      goto LABEL_11;
    }
LABEL_28:
    size_t v13 = p_p;
    goto LABEL_39;
  }
  uint64_t v22 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v22 = v7 | 7;
  }
  uint64_t v23 = v22 + 1;
  p_p = (char *)operator new(v22 + 1);
  std::string::size_type v37 = v7;
  int64_t v38 = v23 | 0x8000000000000000;
  std::string __p = p_p;
  if ((char *)a2 == a3) {
    goto LABEL_28;
  }
LABEL_11:
  if (v7 < 0x20 || (unint64_t)&p_p[-a2] < 0x20)
  {
    size_t v13 = p_p;
    int v14 = (char *)a2;
    do
    {
LABEL_38:
      char v32 = *v14++;
      *v13++ = v32;
    }
    while (v14 != a3);
    goto LABEL_39;
  }
  size_t v13 = &p_p[v7 & 0xFFFFFFFFFFFFFFE0];
  int v14 = (char *)(a2 + (v7 & 0xFFFFFFFFFFFFFFE0));
  BOOL v15 = (long long *)(a2 + 16);
  BOOL v16 = p_p + 16;
  unint64_t v17 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v18 = *v15;
    *(v16 - 1) = *(v15 - 1);
    *BOOL v16 = v18;
    v15 += 2;
    v16 += 2;
    v17 -= 32;
  }
  while (v17);
  if (v7 != (v7 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_38;
  }
LABEL_39:
  *size_t v13 = 0;
  if (v38 >= 0) {
    unint64_t v33 = (const std::string::value_type *)&__p;
  }
  else {
    unint64_t v33 = (const std::string::value_type *)__p;
  }
  if (v38 >= 0) {
    std::string::size_type v34 = HIBYTE(v38);
  }
  else {
    std::string::size_type v34 = v37;
  }
  std::string::append(this, v33, v34);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  return this;
}

void sub_1924CB09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<Espresso::AOT::AOTCompilerOptionsManager::Impl>::operator()[abi:ne180100](int a1, cxxopts::Options *this)
{
  if (this)
  {
    uint64_t v3 = (uint64_t **)*((void *)this + 29);
    if (!v3)
    {
LABEL_3:
      uint64_t v4 = (void *)*((void *)this + 27);
      *((void *)this + 27) = 0;
      if (v4) {
        operator delete(v4);
      }
      cxxopts::Options::~Options(this);
      JUMPOUT(0x192FF16B0);
    }
    while (1)
    {
      uint64_t v5 = *v3;
      unint64_t v6 = v3[9];
      if (v6 != (uint64_t *)(v3 + 6)) {
        break;
      }
      ((void (*)(uint64_t *))v3[6][4])((uint64_t *)v3 + 6);
      if (*((char *)v3 + 39) < 0) {
        goto LABEL_15;
      }
LABEL_8:
      operator delete(v3);
      uint64_t v3 = (uint64_t **)v5;
      if (!v5) {
        goto LABEL_3;
      }
    }
    if (v6) {
      (*(void (**)(uint64_t *))(*v6 + 40))(v6);
    }
    if ((*((char *)v3 + 39) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_15:
    operator delete(v3[2]);
    goto LABEL_8;
  }
}

uint64_t std::unordered_map<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      uint64_t v5 = *v2;
      unint64_t v6 = v2[9];
      if (v6 != (uint64_t *)(v2 + 6)) {
        break;
      }
      ((void (*)(uint64_t *))v2[6][4])((uint64_t *)v2 + 6);
      if (*((char *)v2 + 39) < 0) {
        goto LABEL_12;
      }
LABEL_5:
      operator delete(v2);
      uint64_t v2 = (uint64_t **)v5;
      if (!v5) {
        goto LABEL_2;
      }
    }
    if (v6) {
      (*(void (**)(uint64_t *))(*v6 + 40))(v6);
    }
    if ((*((char *)v2 + 39) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_12:
    operator delete(v2[2]);
    goto LABEL_5;
  }
LABEL_2:
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  v13[0] = a2[1];
  *(void *)((char *)v13 + 7) = *(uint64_t *)((char *)a2 + 15);
  char v5 = *((unsigned char *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v6 = *a3;
  v12[0] = a3[1];
  *(void *)((char *)v12 + 7) = *(uint64_t *)((char *)a3 + 15);
  char v7 = *((unsigned char *)a3 + 23);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v8 = v13[0];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 15) = *(void *)((char *)v13 + 7);
  *(unsigned char *)(a1 + 23) = v5;
  v13[0] = 0;
  *(void *)((char *)v13 + 7) = 0;
  uint64_t v9 = v12[0];
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 39) = *(void *)((char *)v12 + 7);
  *(unsigned char *)(a1 + 47) = v7;
  v12[0] = 0;
  *(void *)((char *)v12 + 7) = 0;
  *(unsigned char *)(a1 + 71) = 11;
  strcpy((char *)(a1 + 48), "[OPTION...]");
  *(unsigned char *)(a1 + 95) = 21;
  strcpy((char *)(a1 + 72), "positional parameters");
  *(_WORD *)(a1 + 96) = 0;
  int v10 = (char *)operator new(0x40uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)int v10 = &unk_1EE38D430;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 104) = v10 + 24;
  *(void *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  Espresso::AOT::AOTCompilerDriver::MakeDefaultBackendRegistry((uint64_t)&v11);
}

void sub_1924CD980(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      char v5 = *(char **)v2;
      uint64_t v6 = *((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<cxxopts::OptionDetails>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<cxxopts::OptionDetails>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D430;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<cxxopts::OptionDetails>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 40);
  if (v2)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (void **)*v2;
        uint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  char v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5)
  {
    operator delete(v5);
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EE37D2A0;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D2A0;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  Espresso::AOT::AOTCompilerOptions::SetInput(a2, (__n128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1924CE32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EE37CF88;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CF88;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  Espresso::AOT::AOTCompilerOptions::SetOutput(a2, (__n128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1924CE438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC28D0) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC28D0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC28D0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC28D0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EE37CFE0;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CFE0;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  Espresso::AOT::AOTCompilerOptions::SetBackend(a2, (__n128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1924CE5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC2A58) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC2A58 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC2A58)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC2A58 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EE37D038;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D038;
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v4 = *(unsigned char *)cxxopts::OptionValue::as<BOOL>(a3);

  return Espresso::AOT::AOTCompilerOptions::SetBuildForProfiling(a2, v4);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC2BE0) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC2BE0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC2BE0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC2BE0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EE37D090;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D090;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC2D68) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC2D68 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC2D68)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC2D68 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v10 = 2;
  strcpy(v9, "\te5");
  strcpy((char *)__p, "platforms");
  uint64_t v4 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v6.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v5;
  }
  int v7 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption(a2, (long long *)&v9[1], (long long *)__p, (uint64_t)&v6);
  if (v7 != -1) {
    ((void (*)(char *, std::string *))off_1EE39B898[v7])(&v11, &v6);
  }
  int v7 = -1;
  if ((v9[0] & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(*(void **)&v9[1]);
    return;
  }
  operator delete(__p[0]);
  if (v10 < 0) {
    goto LABEL_10;
  }
}

void sub_1924CE99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::variant<BOOL,int,float,std::string>::~variant[abi:ne180100]((uint64_t)&a9);
  if (a19 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v19 - 25) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v19 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)double result = &unk_1EE37D0E8;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37D0E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_1EE37D0E8;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_1924CEB40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D0E8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  uint64_t v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v4 = *(unsigned char *)cxxopts::OptionValue::as<BOOL>(a3);

  return Espresso::AOT::AOTCompilerOptions::SetShowVersion(a2, v4);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC2EF0) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC2EF0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC2EF0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC2EF0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)double result = &unk_1EE37D140;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37D140;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_1EE37D140;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_1924CEE34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D140;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  uint64_t v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v4 = *(unsigned char *)cxxopts::OptionValue::as<BOOL>(a3);

  return Espresso::AOT::AOTCompilerOptions::SetQueryE5Platforms(a2, v4);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC3078) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC3078 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC3078)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC3078 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)double result = &unk_1EE37D198;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37D198;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_1EE37D198;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_1924CF128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D198;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  uint64_t v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v4 = *(unsigned char *)cxxopts::OptionValue::as<BOOL>(a3);

  return Espresso::AOT::AOTCompilerOptions::SetQueryE5PlatformFamilies(a2, v4);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC3200) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC3200 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC3200)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC3200 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EE37D1F0;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D1F0;
}

unsigned char *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  double result = (unsigned char *)cxxopts::OptionValue::as<BOOL>(a3);
  if (*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Usage requested");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1924CF390(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC3388) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC3388 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC3388)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC3388 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EE37D248;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D248;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Verbose usage requested");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1924CF4D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC3510) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC3510 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC3510)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC3510 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void Espresso::AOT::AOTCompilerOptionsManager::GetVerboseUsage(void ***a1, void **a2)
{
  char v4 = a1[1];
  long long v5 = a2;
  if (v4 != a2)
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != a2);
    long long v5 = *a1;
  }
  a1[1] = a2;
  operator delete(v5);
}

void cxxopts::values::standard_value<BOOL>::standard_value(uint64_t a1, void **a2, std::__shared_weak_count **a3)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*a2);
  }
  long long v5 = *a3;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void cxxopts::ParseResult::ParseResult(uint64_t a1, void **a2, void **a3)
{
  long long v5 = *(void ***)(a1 + 144);
  std::string v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0) {
        operator delete(*(v5 - 3));
      }
      if (*((char *)v5 - 25) < 0) {
        operator delete(*(v5 - 6));
      }
      v5 -= 6;
    }
    while (v5 != a2);
    std::string v6 = *a3;
  }
  *(void *)(a1 + 144) = a2;

  operator delete(v6);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  std::string v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    int v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      BOOL v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          std::string v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                std::string::size_type v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    std::string::size_type v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            BOOL v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              size_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  size_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          BOOL v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *unint64_t v28 = 0;
  v28[1] = v11;
  long long v29 = (std::string *)(v28 + 2);
  char v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v28[4] = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        std::string::size_type v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        std::string::size_type v34 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      std::string::size_type v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      uint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  std::string::size_type v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  BOOL v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1924CFB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924CFB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__deallocate_node(int a1, char *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = *(char **)v2;
      unint64_t v4 = (void *)*((void *)v2 + 5);
      if (v4)
      {
        *((void *)v2 + 6) = v4;
        operator delete(v4);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *> *>>(void *a1, char *a2, char *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 16));
      if (v8 != a2) {
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v8 + 40, *((char **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
      }
      unint64_t v9 = *(char **)v8;
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = *(char **)a2;
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
    do
    {
      unint64_t v10 = *(char **)v8;
      unint64_t v11 = (void *)*((void *)v8 + 5);
      if (v11)
      {
        *((void *)v8 + 6) = v11;
        operator delete(v11);
      }
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      unint64_t v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_multi<std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(a1, (long long *)a2 + 1);
      a2 = *(char **)a2;
    }
  }
}

void sub_1924CFCEC(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1924CFD08(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    int v7 = (uint64_t *)(a2 + 16);
  }
  else {
    int v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!inserted)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *inserted;
  uint64_t *inserted = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_multi<std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(void *a1, long long *a2)
{
  unint64_t v4 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  unint64_t v5 = std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100]((std::string *)(v4 + 16), a2);
  int v6 = v4[39];
  if (v6 >= 0) {
    int v7 = (uint64_t *)v5;
  }
  else {
    int v7 = (uint64_t *)*((void *)v4 + 2);
  }
  if (v6 >= 0) {
    unint64_t v8 = v4[39];
  }
  else {
    unint64_t v8 = *((void *)v4 + 3);
  }
  *((void *)v4 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v10, v7, v8);
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_multi(a1, (uint64_t)v4);
}

void sub_1924CFF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1924CFF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  unint64_t v5 = a1;
  if (a1[2])
  {
    int v6 = *a1;
    unint64_t v8 = a1 + 1;
    int v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1]) {
      unint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v9 = v6;
    }
    uint64_t v39 = (uint64_t)a1;
    unint64_t v41 = v9;
    if (!v9) {
      goto LABEL_65;
    }
    char v10 = (uint64_t *)v9[2];
    if (v10)
    {
      int8x8_t v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        uint64_t *v10 = 0;
        while (1)
        {
          unint64_t v38 = (uint64_t *)v10[1];
          if (!v38) {
            break;
          }
          do
          {
            char v10 = v38;
            unint64_t v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
      }
      else
      {
        for (v10[1] = 0; v11; int8x8_t v11 = (uint64_t *)v10[1])
        {
          do
          {
            char v10 = v11;
            int8x8_t v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    int8x8_t v40 = v10;
    if (a2 == a3)
    {
      std::string::size_type v34 = a1;
      std::__tree<std::string>::destroy((uint64_t)a1, (char *)v9);
      if (!v10) {
        goto LABEL_66;
      }
      goto LABEL_62;
    }
    unint64_t v12 = a2;
    while (1)
    {
      std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v12 + 4));
      uint8x8_t v13 = v41;
      unint64_t v14 = *v8;
      BOOL v15 = v5 + 1;
      char v16 = v5 + 1;
      if (!*v8) {
        break;
      }
      int v17 = *((char *)v41 + 55);
      if (v17 >= 0) {
        size_t v18 = *((unsigned __int8 *)v41 + 55);
      }
      else {
        size_t v18 = v41[5];
      }
      if (v17 >= 0) {
        uint64_t v19 = v41 + 4;
      }
      else {
        uint64_t v19 = (const void *)v41[4];
      }
      do
      {
        while (1)
        {
          BOOL v15 = (uint64_t **)v14;
          uint64_t v22 = (const void *)v14[4];
          uint64_t v20 = v14 + 4;
          size_t v21 = v22;
          int v23 = *((char *)v20 + 23);
          if (v23 >= 0) {
            size_t v24 = *((unsigned __int8 *)v20 + 23);
          }
          else {
            size_t v24 = v20[1];
          }
          if (v23 >= 0) {
            uint64_t v25 = v20;
          }
          else {
            uint64_t v25 = v21;
          }
          if (v24 >= v18) {
            size_t v26 = v18;
          }
          else {
            size_t v26 = v24;
          }
          int v27 = memcmp(v19, v25, v26);
          BOOL v28 = v18 < v24;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          if (!v28) {
            break;
          }
          unint64_t v14 = *v15;
          char v16 = v15;
          if (!*v15) {
            goto LABEL_34;
          }
        }
        unint64_t v14 = v15[1];
      }
      while (v14);
      char v16 = v15 + 1;
      *unint64_t v41 = 0;
      v41[1] = 0;
      v41[2] = (uint64_t)v15;
      v15[1] = v41;
      long long v29 = (uint64_t *)**v5;
      if (v29) {
        goto LABEL_35;
      }
LABEL_36:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v5[1], v13);
      v5[2] = (uint64_t *)((char *)v5[2] + 1);
      unint64_t v9 = v40;
      unint64_t v41 = v40;
      if (v40)
      {
        char v10 = (uint64_t *)v40[2];
        if (v10)
        {
          char v30 = (uint64_t *)*v10;
          if ((uint64_t *)*v10 == v40)
          {
            uint64_t *v10 = 0;
            while (1)
            {
              float v33 = (uint64_t *)v10[1];
              if (!v33) {
                break;
              }
              do
              {
                char v10 = v33;
                float v33 = (uint64_t *)*v33;
              }
              while (v33);
            }
          }
          else
          {
            for (v10[1] = 0; v30; char v30 = (uint64_t *)v10[1])
            {
              do
              {
                char v10 = v30;
                char v30 = (uint64_t *)*v30;
              }
              while (v30);
            }
          }
        }
        int8x8_t v40 = v10;
        long long v31 = (void *)v12[1];
        if (v31)
        {
          do
          {
LABEL_45:
            a2 = v31;
            long long v31 = (void *)*v31;
          }
          while (v31);
          goto LABEL_49;
        }
      }
      else
      {
        char v10 = 0;
        long long v31 = (void *)v12[1];
        if (v31) {
          goto LABEL_45;
        }
      }
      do
      {
        a2 = (void *)v12[2];
        BOOL v32 = *a2 == (void)v12;
        unint64_t v12 = a2;
      }
      while (!v32);
LABEL_49:
      if (v9)
      {
        unint64_t v12 = a2;
        if (a2 != a3) {
          continue;
        }
      }
      std::string::size_type v34 = (uint64_t **)v39;
      std::__tree<std::string>::destroy(v39, (char *)v9);
      if (!v10) {
        goto LABEL_66;
      }
LABEL_62:
      for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
        char v10 = i;
      a1 = v34;
      unint64_t v9 = v10;
LABEL_65:
      std::__tree<std::string>::destroy((uint64_t)a1, (char *)v9);
      goto LABEL_66;
    }
LABEL_34:
    *unint64_t v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v15;
    *char v16 = v41;
    long long v29 = (uint64_t *)**v5;
    if (!v29) {
      goto LABEL_36;
    }
LABEL_35:
    *unint64_t v5 = v29;
    uint8x8_t v13 = *v16;
    goto LABEL_36;
  }
LABEL_66:
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      BOOL v36 = (void *)a2[1];
      if (v36)
      {
        do
        {
          unint64_t v37 = v36;
          BOOL v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          unint64_t v37 = (void *)a2[2];
          BOOL v32 = *v37 == (void)a2;
          a2 = v37;
        }
        while (!v32);
      }
      a2 = v37;
    }
    while (v37 != a3);
  }
}

void sub_1924D0268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

char *std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0x38uLL);
  unint64_t v5 = v4;
  int v6 = v4 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *int v6 = *(_OWORD *)a2;
    *((void *)v4 + 6) = *(void *)(a2 + 16);
  }
  unint64_t v8 = a1 + 1;
  int v7 = a1[1];
  if (v7)
  {
    int v9 = v5[55];
    if (v9 >= 0) {
      size_t v10 = v5[55];
    }
    else {
      size_t v10 = *((void *)v5 + 5);
    }
    if (v9 < 0) {
      int v6 = (_OWORD *)*((void *)v5 + 4);
    }
    do
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v7;
        uint8x8_t v13 = (const void *)v7[4];
        int8x8_t v11 = v7 + 4;
        unint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          char v16 = v11;
        }
        else {
          char v16 = v12;
        }
        if (v15 >= v10) {
          size_t v17 = v10;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v6, v16, v17);
        BOOL v19 = v10 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        int v7 = *v8;
        uint64_t v20 = v8;
        if (!*v8) {
          goto LABEL_28;
        }
      }
      int v7 = v8[1];
    }
    while (v7);
    uint64_t v20 = v8 + 1;
  }
  else
  {
    uint64_t v20 = a1 + 1;
  }
LABEL_28:
  *(void *)unint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = v8;
  *uint64_t v20 = (uint64_t *)v5;
  size_t v21 = (uint64_t *)**a1;
  uint64_t v22 = (uint64_t *)v5;
  if (v21)
  {
    *a1 = v21;
    uint64_t v22 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v5;
}

void sub_1924D0414(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10unique_ptrIN3MIL9IRProgramENS_14default_deleteIS5_EEEENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSD_ISF_EEEESH_EEC1B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJS8_RSH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3_(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = *a2;
  *a2 = 0;
  *a1 = v6;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 4, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  return a1;
}

void sub_1924D04B0(_Unwind_Exception *exception_object)
{
  if (*v2) {
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10unique_ptrIN3MIL9IRProgramENS_14default_deleteIS5_EEEENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSD_ISF_EEEESH_EEC1B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJS8_RSH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3__cold_1(v1, *v2, (void **)(v1 + 8));
  }
  uint64_t v4 = *(void *)v1;
  *(void *)uint64_t v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::E5BackendFlexibleShapeTransformer::Run()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Espresso::AOT::E5BackendFlexibleShapeTransformer::Run(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    OUTLINED_FUNCTION_0();
    uint64_t result = (*(uint64_t (**)(void))(v9 + 8))();
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

void _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10unique_ptrIN3MIL9IRProgramENS_14default_deleteIS5_EEEENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSD_ISF_EEEESH_EEC1B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJS8_RSH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3__cold_1(uint64_t a1, void **a2, void **a3)
{
  unint64_t v5 = *(void ***)(a1 + 16);
  uint64_t v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0) {
        operator delete(*(v5 - 3));
      }
      v5 -= 3;
    }
    while (v5 != a2);
    uint64_t v6 = *a3;
  }
  *(void *)(a1 + 16) = a2;

  operator delete(v6);
}

double EspressoLight::espresso_aot_compiler::identify_segments(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a1;
  long long v63 = 0uLL;
  unint64_t v64 = 0;
  uint64_t v4 = *a2;
  uint64_t v6 = *(void *)(*a2 + 32);
  uint64_t v5 = *(void *)(*a2 + 40);
  if (v5 == v6)
  {
    unint64_t v9 = 0;
    uint64_t v30 = (v5 - v6) >> 4;
    uint64_t v10 = *(void *)(*a2 + 40);
    if (!v30) {
      goto LABEL_58;
    }
LABEL_37:
    uint64_t v31 = v10 - v5;
    BOOL v32 = (std::__shared_weak_count *)a2[1];
    *(void *)&long long v52 = v9;
    *((void *)&v52 + 1) = v31 >> 4;
    long long v53 = 0u;
    long long v54 = 0u;
    int v55 = 1065353216;
    long long v56 = 0u;
    long long v57 = 0u;
    int v58 = 1065353216;
    uint64_t v60 = 0;
    long long v59 = 0uLL;
    uint64_t v65 = v4;
    unint64_t v66 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::net_compiler_segment_based::identify_segment_input_output((uint64_t)v3, (uint64_t)&v65, (unint64_t *)&v52);
    float v33 = v66;
    if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      uint64_t v34 = *((void *)&v63 + 1);
      if (*((void *)&v63 + 1) < v64) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v34 = *((void *)&v63 + 1);
      if (*((void *)&v63 + 1) < v64)
      {
LABEL_42:
        *(_OWORD *)uint64_t v34 = v52;
        unint64_t v35 = v53;
        *(void *)&long long v53 = 0;
        *(_OWORD *)(v34 + 16) = __PAIR128__(*((unint64_t *)&v53 + 1), v35);
        uint64_t v36 = v54;
        *(void *)(v34 + 32) = v54;
        *((void *)&v53 + 1) = 0;
        uint64_t v37 = *((void *)&v54 + 1);
        *(void *)(v34 + 40) = *((void *)&v54 + 1);
        *(_DWORD *)(v34 + 48) = v55;
        if (v37)
        {
          unint64_t v38 = *(void *)(v36 + 8);
          unint64_t v39 = *(void *)(v34 + 24);
          if ((v39 & (v39 - 1)) != 0)
          {
            if (v38 >= v39) {
              v38 %= v39;
            }
          }
          else
          {
            v38 &= v39 - 1;
          }
          *(void *)(v35 + 8 * v38) = v34 + 32;
          long long v54 = 0uLL;
        }
        unint64_t v41 = v56;
        *(void *)&long long v56 = 0;
        *(_OWORD *)(v34 + 56) = __PAIR128__(*((unint64_t *)&v56 + 1), v41);
        *((void *)&v56 + 1) = 0;
        uint64_t v42 = v57;
        *(void *)(v34 + 72) = v57;
        uint64_t v43 = *((void *)&v57 + 1);
        *(void *)(v34 + 80) = *((void *)&v57 + 1);
        *(_DWORD *)(v34 + 88) = v58;
        if (v43)
        {
          unint64_t v44 = *(void *)(v42 + 8);
          unint64_t v45 = *(void *)(v34 + 64);
          if ((v45 & (v45 - 1)) != 0)
          {
            if (v44 >= v45) {
              v44 %= v45;
            }
          }
          else
          {
            v44 &= v45 - 1;
          }
          *(void *)(v41 + 8 * v44) = v34 + 72;
          long long v57 = 0uLL;
        }
        *(void *)(v34 + 96) = 0;
        *(void *)(v34 + 104) = 0;
        *(void *)(v34 + 112) = 0;
        *(_OWORD *)(v34 + 96) = v59;
        *(void *)(v34 + 112) = v60;
        long long v59 = 0uLL;
        uint64_t v60 = 0;
        uint64_t v40 = v34 + 120;
        goto LABEL_57;
      }
    }
    uint64_t v40 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t>((uint64_t *)&v63, (uint64_t)&v52);
LABEL_57:
    *((void *)&v63 + 1) = v40;
    Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&v52);
    goto LABEL_58;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v5 = *(void *)(*a2 + 32);
  do
  {
    uint64_t v12 = *(void *)(v5 + v7);
    uint8x8_t v13 = *(const void **)(v12 + 64);
    int v14 = *(std::__shared_weak_count **)(v12 + 72);
    uint64_t v61 = v13;
    long long v62 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13
    {
      if (v8 <= v9)
      {
LABEL_30:
        unint64_t v9 = v8 + 1;
        goto LABEL_31;
      }
      uint64_t v16 = *a2;
      size_t v15 = (std::__shared_weak_count *)a2[1];
      *(void *)&long long v52 = v9;
      *((void *)&v52 + 1) = v8;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      int v55 = 1065353216;
      int v58 = 1065353216;
      uint64_t v60 = 0;
      long long v59 = 0uLL;
      uint64_t v65 = v16;
      unint64_t v66 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::net_compiler_segment_based::identify_segment_input_output(a1, (uint64_t)&v65, (unint64_t *)&v52);
      size_t v17 = v66;
      if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        uint64_t v18 = *((void *)&v63 + 1);
        if (*((void *)&v63 + 1) < v64) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v18 = *((void *)&v63 + 1);
        if (*((void *)&v63 + 1) < v64)
        {
LABEL_14:
          *(_OWORD *)uint64_t v18 = v52;
          unint64_t v19 = v53;
          *(void *)&long long v53 = 0;
          *(_OWORD *)(v18 + 16) = __PAIR128__(*((unint64_t *)&v53 + 1), v19);
          *((void *)&v53 + 1) = 0;
          uint64_t v20 = v54;
          *(void *)(v18 + 32) = v54;
          uint64_t v21 = *((void *)&v54 + 1);
          *(void *)(v18 + 40) = *((void *)&v54 + 1);
          *(_DWORD *)(v18 + 48) = v55;
          if (v21)
          {
            unint64_t v22 = *(void *)(v20 + 8);
            unint64_t v23 = *(void *)(v18 + 24);
            if ((v23 & (v23 - 1)) != 0)
            {
              if (v22 >= v23) {
                v22 %= v23;
              }
            }
            else
            {
              v22 &= v23 - 1;
            }
            *(void *)(v19 + 8 * v22) = v18 + 32;
            long long v54 = 0uLL;
          }
          unint64_t v25 = v56;
          *(void *)&long long v56 = 0;
          *(_OWORD *)(v18 + 56) = __PAIR128__(*((unint64_t *)&v56 + 1), v25);
          *((void *)&v56 + 1) = 0;
          uint64_t v26 = v57;
          *(void *)(v18 + 72) = v57;
          uint64_t v27 = *((void *)&v57 + 1);
          *(void *)(v18 + 80) = *((void *)&v57 + 1);
          *(_DWORD *)(v18 + 88) = v58;
          if (v27)
          {
            unint64_t v28 = *(void *)(v26 + 8);
            unint64_t v29 = *(void *)(v18 + 64);
            if ((v29 & (v29 - 1)) != 0)
            {
              if (v28 >= v29) {
                v28 %= v29;
              }
            }
            else
            {
              v28 &= v29 - 1;
            }
            *(void *)(v25 + 8 * v28) = v18 + 72;
            long long v57 = 0uLL;
          }
          *(void *)(v18 + 96) = 0;
          *(void *)(v18 + 104) = 0;
          *(void *)(v18 + 112) = 0;
          *(_OWORD *)(v18 + 96) = v59;
          *(void *)(v18 + 112) = v60;
          long long v59 = 0uLL;
          uint64_t v60 = 0;
          uint64_t v24 = v18 + 120;
          goto LABEL_29;
        }
      }
      uint64_t v24 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t>((uint64_t *)&v63, (uint64_t)&v52);
LABEL_29:
      *((void *)&v63 + 1) = v24;
      Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&v52);
      int v14 = v62;
      goto LABEL_30;
    }
LABEL_31:
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    ++v8;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)(*a2 + 32);
    uint64_t v10 = *(void *)(*a2 + 40);
    unint64_t v11 = (v10 - v5) >> 4;
    v7 += 16;
  }
  while (v8 < v11);
  uint64_t v3 = (void *)a1;
  if (v9 + 1 <= v11) {
    goto LABEL_37;
  }
LABEL_58:
  char v46 = (void **)(v3 + 4);
  uint64_t v47 = v3[4];
  if (v47)
  {
    uint64_t v48 = v3[5];
    unint64_t v49 = (void *)v3[4];
    if (v48 != v47)
    {
      do
        Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)(v48 - 120));
      while (v48 != v47);
      unint64_t v49 = *v46;
    }
    v3[5] = v47;
    operator delete(v49);
    *char v46 = 0;
    v3[5] = 0;
    v3[6] = 0;
  }
  double result = *(double *)&v63;
  *((_OWORD *)v3 + 2) = v63;
  v3[6] = v64;
  return result;
}

void sub_1924D0BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)va);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::~vector[abi:ne180100]((void **)(v4 - 128));
  _Unwind_Resume(a1);
}

void sub_1924D0BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::~vector[abi:ne180100]((void **)(v27 - 128));
  _Unwind_Resume(a1);
}

void **std::vector<Espresso::net_compiler_segment_based::segment_t>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)(v3 - 120));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void EspressoLight::espresso_aot_plan::espresso_aot_plan(EspressoLight::espresso_aot_plan *this, EspressoLight::espresso_context *a2, int a3)
{
}

void sub_1924D0D28(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v2);
  if (*(char *)(v1 + 1167) < 0)
  {
    operator delete(*(void **)(v1 + 1144));
    if ((*(char *)(v1 + 1127) & 0x80000000) == 0)
    {
LABEL_3:
      EspressoLight::espresso_plan::~espresso_plan((EspressoLight::espresso_plan *)v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 1127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  EspressoLight::espresso_plan::~espresso_plan((EspressoLight::espresso_plan *)v1);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::~espresso_aot_plan(void **this)
{
  *this = &unk_1EE324040;
  uint64_t v2 = Espresso::ANECompilerEngine::precompilation_settings_t::shared((Espresso::ANECompilerEngine::precompilation_settings_t *)this);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = this[153];
  this[153] = 0;
  if (v3) {
    (*(void (**)(void *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void ***)this[152];
  this[152] = 0;
  if (v4)
  {
    EspressoLight::tmp_assets_manager::~tmp_assets_manager(v4);
    MEMORY[0x192FF16B0]();
  }
  uint64_t v5 = (void **)this[149];
  if (v5)
  {
    do
    {
      uint64_t v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0) {
LABEL_18:
        }
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v5);
      uint64_t v5 = v7;
    }
    while (v7);
  }
  uint64_t v6 = this[147];
  this[147] = 0;
  if (v6) {
    operator delete(v6);
  }
  if (*((char *)this + 1167) < 0)
  {
    operator delete(this[143]);
    if ((*((char *)this + 1127) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_20:
    operator delete(this[138]);
    goto LABEL_12;
  }
  if (*((char *)this + 1127) < 0) {
    goto LABEL_20;
  }
LABEL_12:
  EspressoLight::espresso_plan::~espresso_plan((EspressoLight::espresso_plan *)this);
}

{
  uint64_t vars8;

  EspressoLight::espresso_aot_plan::~espresso_aot_plan(this);

  JUMPOUT(0x192FF16B0);
}

void EspressoLight::espresso_aot_plan::set_platform(EspressoLight::espresso_aot_plan *this, int a2)
{
  uint64_t v2 = this;
  uint64_t v9 = this;
  int v10 = a2;
  uint64_t v3 = (void *)EspressoLight::espresso_aot_plan::platf;
  if (!EspressoLight::espresso_aot_plan::platf) {
    operator new();
  }
  uint64_t v4 = v9;
  *(_DWORD *)(EspressoLight::espresso_aot_plan::platf + 8) = v10;
  *uint64_t v3 = v4;
  v8[0] = xmmword_192DC35D0;
  v8[1] = xmmword_192DC35E0;
  v8[2] = xmmword_192DC35F0;
  uint64_t v5 = (char *)&v9;
  switch((int)this)
  {
    case 32784:
      uint64_t v2 = 4;
      goto LABEL_12;
    case 32785:
      uint64_t v2 = 5;
      goto LABEL_12;
    case 32786:
      uint64_t v2 = 2;
      goto LABEL_12;
    case 32787:
    case 32788:
      goto LABEL_13;
    case 32789:
      uint64_t v2 = 1;
      goto LABEL_12;
    default:
      if (!this) {
        goto LABEL_12;
      }
      if (this == 28672)
      {
        uint64_t v2 = 3;
LABEL_12:
        uint64_t v5 = (char *)v8 + 8 * v2;
      }
LABEL_13:
      if (v5 - (char *)v8 == 48
        && (uint64_t v6 = Espresso::ANECompilerEngine::precompilation_settings_t::shared(this),
            Espresso::AOT::GetANENameForE5Platform((uint64_t)&v9, &__p),
            Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(v6, &__p),
            SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v9);
      }
      else
      {
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v9);
      }
      return;
  }
}

void sub_1924D107C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 - 32));
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_aot_plan::set_dump_ir_only(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1128) = a2;
  return this;
}

uint64_t EspressoLight::espresso_aot_plan::set_ane_residency_requirement(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1132) = a2;
  return result;
}

uint64_t EspressoLight::espresso_aot_plan::set_compute_units_requirement(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1136) = a2;
  return result;
}

__n128 EspressoLight::espresso_aot_plan::set_ane_options_plist_path(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = a1 + 1144;
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void EspressoLight::espresso_aot_plan::set_build_info(uint64_t a1, uint64_t *a2)
{
}

uint64_t EspressoLight::espresso_aot_plan::set_mlc_compiler(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 1224);
  *(void *)(a1 + 1224) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t EspressoLight::espresso_aot_plan::set_build_for_profiling(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1168) = a2;
  return this;
}

uint64_t EspressoLight::espresso_aot_plan::set_use_classic_aot_old_hw(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1169) = a2;
  return this;
}

uint64_t EspressoLight::espresso_aot_plan::set_aot_options_for_net(uint64_t this, Espresso::net *a2)
{
  *((unsigned char *)a2 + 1408) = *(unsigned char *)(this + 1168);
  *((unsigned char *)a2 + 1409) = *(void *)(this + 1224) != 0;
  return this;
}

uint64_t EspressoLight::espresso_aot_plan::add_network(uint64_t a1, uint64_t a2, uint64_t a3)
{
  EspressoLight::espresso_plan::get_networks((EspressoLight::espresso_plan *)a1, &v15);
  uint64_t v7 = (std::__shared_weak_count *)v15;
  uint64_t v6 = v16;
  if (v15)
  {
    if (v16 == (std::__shared_weak_count *)v15)
    {
      int v10 = v16;
    }
    else
    {
      unint64_t v8 = v16;
      do
      {
        shared_weak_owners = (std::__shared_weak_count *)v8[-1].__shared_weak_owners_;
        if (shared_weak_owners && !atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
          std::__shared_weak_count::__release_weak(shared_weak_owners);
        }
        unint64_t v8 = (std::__shared_weak_count *)((char *)v8 - 16);
      }
      while (v8 != v7);
      int v10 = (std::__shared_weak_count *)v15;
    }
    uint64_t v16 = v7;
    operator delete(v10);
  }
  if (v6 != v7) {
    Espresso::throw_exception_selector<Espresso::generic_error>("AOT plan does not support adding multiple networks");
  }
  EspressoLight::espresso_plan::get_context(a1, &v15);
  uint64_t v11 = v15;
  *(_WORD *)(v15 + 53) = 257;
  *(unsigned char *)(v11 + 55) = 1;
  *(void *)(v11 + 128) = *(void *)(a1 + 1136);
  *(unsigned char *)(v11 + 136) = *(unsigned char *)(a1 + 1169);
  uint64_t v12 = EspressoLight::espresso_plan::add_network(a1, a2, a3);
  uint8x8_t v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v12;
}

void sub_1924D1324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::get_network(EspressoLight::espresso_aot_plan *this@<X0>, void *a2@<X8>)
{
  EspressoLight::espresso_plan::get_networks(this, &__p);
  uint64_t v3 = (char *)__p;
  uint64_t v4 = v9;
  if (v9 - (unsigned char *)__p != 16) {
    Espresso::throw_exception_selector<Espresso::generic_error>("AOT plan should only hold one single network");
  }
  uint64_t v5 = *((void *)__p + 1);
  *a2 = *(void *)__p;
  a2[1] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = v9;
  }
  uint64_t v6 = v3;
  if (v4 != v3)
  {
    do
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 1);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      v4 -= 16;
    }
    while (v4 != v3);
    uint64_t v6 = __p;
  }
  uint64_t v9 = v3;
  operator delete(v6);
}

{
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  void *__p;
  char *v9;

  EspressoLight::espresso_plan::get_networks(this, (uint64_t *)&__p);
  uint64_t v3 = (char *)__p;
  uint64_t v4 = v9;
  if (v9 - (unsigned char *)__p != 16) {
    Espresso::throw_exception_selector<Espresso::generic_error>("AOT plan should only hold one single network");
  }
  uint64_t v5 = *((void *)__p + 1);
  *a2 = *(void *)__p;
  a2[1] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = v9;
  }
  uint64_t v6 = v3;
  if (v4 != v3)
  {
    do
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 1);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      v4 -= 16;
    }
    while (v4 != v3);
    uint64_t v6 = __p;
  }
  uint64_t v9 = v3;
  operator delete(v6);
}

void sub_1924D1420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::identify_segments(EspressoLight::espresso_aot_plan *this)
{
  EspressoLight::espresso_aot_plan::get_network(this, &v5);
  uint64_t v2 = v6;
  v4[0] = v5;
  v4[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  EspressoLight::espresso_aot_plan::identify_segments((uint64_t)this, v4);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    uint64_t v3 = v6;
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1924D153C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void EspressoLight::espresso_aot_plan::compile_segments(EspressoLight::espresso_aot_plan *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  EspressoLight::espresso_aot_plan::get_network(this, &v234);
  uint64_t v2 = v234;
  unsigned int v3 = (***(uint64_t (****)(void))(*(void *)(v234 + 16) + 8))(*(void *)(*(void *)(v234 + 16) + 8));
  unint64_t v4 = *(void *)(v2 + 536);
  if (!v4) {
    goto LABEL_481;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3;
    if (v4 <= v3) {
      unint64_t v6 = v3 % v4;
    }
  }
  else
  {
    unint64_t v6 = (v4 - 1) & v3;
  }
  uint64_t v7 = *(uint64_t ***)(*(void *)(v2 + 528) + 8 * v6);
  if (!v7 || (unint64_t v8 = *v7) == 0) {
LABEL_481:
  }
    Espresso::throw_exception_selector<Espresso::generic_error>("Compiler missing");
  if (v5.u32[0] < 2uLL)
  {
    unint64_t v9 = v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == v3)
      {
        if (*((_DWORD *)v8 + 4) == v3) {
          goto LABEL_21;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_481;
      }
      unint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_481;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == v3) {
      break;
    }
    if (v10 >= v4) {
      v10 %= v4;
    }
    if (v10 != v6) {
      goto LABEL_481;
    }
LABEL_11:
    unint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_481;
    }
  }
  if (*((_DWORD *)v8 + 4) != v3) {
    goto LABEL_11;
  }
LABEL_21:
  uint64_t v12 = (const void *)v8[3];
  if (!v12
  {
    v232 = 0;
    v233 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("Error casting to AOT compiler");
  }
  int v14 = v13;
  uint64_t v15 = (std::__shared_weak_count *)v8[4];
  v232 = v13;
  v233 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v13[5] - v13[4]) >> 3));
  LOBYTE(v229[0]) = 0;
  char v231 = 0;
  if (v14[5] == v14[4]) {
    goto LABEL_469;
  }
  unint64_t v16 = 0;
  int v216 = 0;
  std::string __p = 0;
  char v211 = (void *)((char *)this + 1176);
  while (2)
  {
    if (v216 && (v14 & 0x80) != 0) {
      operator delete(__p);
    }
    if (v231)
    {
      if (SHIBYTE(v230) < 0) {
        operator delete(v229[0]);
      }
      char v231 = 0;
    }
    uint64_t v17 = v232[4];
    uint64_t v18 = (const Espresso::net_compiler_segment_based::segment_t *)(v17 + 120 * v16);
    int v227 = *(_DWORD *)(*(void *)(*(void *)(v234 + 32) + 16 * *(void *)v18) + 8);
    if (!is_ane(&v227))
    {
      int v217 = (int)v14;
      if (is_gpu(&v227))
      {
        int v216 = 0;
        int v25 = 50008;
        int v227 = 50008;
      }
      else
      {
        if (!is_cpu(&v227)) {
          Espresso::throw_exception_selector<Espresso::generic_error>("Unknown platform.");
        }
        int v25 = 0;
        int v216 = 0;
        int v227 = 0;
      }
      goto LABEL_49;
    }
    if (v227 != 10007)
    {
      int v216 = 0;
      int v217 = (int)v14;
      int v25 = 10008;
      int v227 = 10008;
LABEL_49:
      char v26 = 1;
      goto LABEL_87;
    }
    unint64_t v19 = (const Espresso::net_compiler_segment_based::segment_t *)(v17 + 120 * v16);
    __dst[23] = 4;
    strcpy(__dst, "main");
    unint64_t v20 = v16;
    EspressoLight::espresso_aot_plan::get_abs_path_to_segment_assets_within_bundle(this, (const void **)__dst, v16, 10007, v249);
    int v21 = SHIBYTE(v249[0].__r_.__value_.__r.__words[2]);
    if ((v249[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v249[0].__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v249[0].__r_.__value_.__l.__size_;
    }
    unint64_t v23 = size + 7;
    if (size + 7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v23 >= 0x17)
    {
      uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v27 = v23 | 7;
      }
      uint64_t v28 = v27 + 1;
      uint64_t v24 = operator new(v27 + 1);
      *(void *)&__dst[8] = size + 7;
      *(void *)&__dst[16] = v28 | 0x8000000000000000;
      *(void *)std::string __dst = v24;
    }
    else
    {
      memset(__dst, 0, 24);
      uint64_t v24 = __dst;
      __dst[23] = size + 7;
      if (!size) {
        goto LABEL_57;
      }
    }
    if (v21 >= 0) {
      unint64_t v29 = v249;
    }
    else {
      unint64_t v29 = (std::string *)v249[0].__r_.__value_.__r.__words[0];
    }
    memmove(v24, v29, size);
LABEL_57:
    strcpy(&v24[size], "/inputs");
    if (v231)
    {
      if (SHIBYTE(v230) < 0)
      {
        operator delete(v229[0]);
        *(_OWORD *)v229 = *(_OWORD *)__dst;
        uint64_t v230 = *(void *)&__dst[16];
        if (!v231) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
      }
      else
      {
        *(_OWORD *)v229 = *(_OWORD *)__dst;
        uint64_t v230 = *(void *)&__dst[16];
      }
    }
    else
    {
      *(_OWORD *)v229 = *(_OWORD *)__dst;
      uint64_t v230 = *(void *)&__dst[16];
      char v231 = 1;
    }
    memset(__dst, 0, 24);
    uint64_t v30 = (char *)HIBYTE(v230);
    if (v230 >= 0) {
      uint64_t v31 = (std::string *)v229;
    }
    else {
      uint64_t v31 = (std::string *)v229[0];
    }
    if (v230 < 0) {
      uint64_t v30 = (char *)v229[1];
    }
    std::string::append[abi:ne180100]<char const*,0>((std::string *)__dst, v31, (std::string *)&v30[(void)v31]);
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)__dst, 0);
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    if (!v231) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v32 = SHIBYTE(v230);
    if (v230 >= 0) {
      size_t v33 = HIBYTE(v230);
    }
    else {
      size_t v33 = (size_t)v229[1];
    }
    unint64_t v34 = v33 + 19;
    if (v33 + 19 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v34 >= 0x17)
    {
      uint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17) {
        uint64_t v36 = v34 | 7;
      }
      uint64_t v37 = v36 + 1;
      unint64_t v35 = operator new(v36 + 1);
      *(void *)&__dst[8] = v33 + 19;
      *(void *)&__dst[16] = v37 | 0x8000000000000000;
      *(void *)std::string __dst = v35;
    }
    else
    {
      memset(__dst, 0, 24);
      unint64_t v35 = __dst;
      __dst[23] = v33 + 19;
      if (!v33) {
        goto LABEL_84;
      }
    }
    if (v32 >= 0) {
      unint64_t v38 = v229;
    }
    else {
      unint64_t v38 = (void **)v229[0];
    }
    memmove(v35, v38, v33);
LABEL_84:
    unint64_t v16 = v20;
    strcpy(&v35[v33], "/model.espresso.net");
    std::string::size_type __sz = *(void *)&__dst[8];
    std::string __p = *(void **)__dst;
    v228[0] = *(_DWORD *)&__dst[16];
    *(_DWORD *)((char *)v228 + 3) = *(_DWORD *)&__dst[19];
    int v217 = __dst[23];
    uint64_t v18 = v19;
    if (SHIBYTE(v249[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v249[0].__r_.__value_.__l.__data_);
    }
    char v26 = 0;
    int v216 = 1;
    int v25 = v227;
LABEL_87:
    Espresso::create_aot_context(v25, 0xFFFFFFFFLL, &v225);
    int v39 = 0;
    uint64_t v40 = v234;
    int v41 = *((unsigned __int8 *)this + 1169);
    __str.__r_.__value_.__s.__data_[0] = 0;
    char v222 = 0;
    if ((v26 & 1) == 0)
    {
      if ((v217 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)__p, __sz);
      }
      else
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        __str.__r_.__value_.__l.__size_ = __sz;
        LODWORD(__str.__r_.__value_.__r.__words[2]) = v228[0];
        *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v228 + 3);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v217;
      }
      int v39 = 1;
      char v222 = 1;
    }
    unint64_t v42 = *(void *)v18;
    uint64_t v43 = v17 + 120 * v16;
    unint64_t v44 = *(void *)(v43 + 8);
    if (v44 <= *(void *)v18)
    {
      v223 = 0;
      v224 = 0;
      uint64_t v47 = a2;
      if (v39) {
        goto LABEL_428;
      }
    }
    else
    {
      uint64_t v247 = v225;
      v248 = v226;
      if (v226) {
        atomic_fetch_add_explicit(&v226->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v245 = 0;
      v246 = 0;
      Espresso::sequential_builder::sequential_builder(v249, &v247, 0, &v245);
      unint64_t v45 = v246;
      if (v246 && !atomic_fetch_add(&v246->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        char v46 = v248;
        if (v248) {
          goto LABEL_98;
        }
      }
      else
      {
        char v46 = v248;
        if (v248)
        {
LABEL_98:
          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      unint64_t v212 = v16;
      uint64_t v48 = v250;
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 1065353216;
      Espresso::net::get_consumers_of_blobs((void *)v40, __dst, (uint64_t)v243);
      unint64_t v49 = *(void ***)&__dst[16];
      if (*(void *)&__dst[16])
      {
        do
        {
          std::string v51 = (void **)*v49;
          if (*((char *)v49 + 39) < 0) {
            operator delete(v49[2]);
          }
          operator delete(v49);
          unint64_t v49 = v51;
        }
        while (v51);
      }
      int v213 = v41;
      std::string::size_type v50 = *(void **)__dst;
      *(void *)std::string __dst = 0;
      if (v50) {
        operator delete(v50);
      }
      while (2)
      {
        memset(__dst, 0, 24);
        Espresso::sequential_builder::copy_layer_from_network((uint64_t)v249, (void *)v40, v42, (const std::string **)__dst);
        uint64_t v53 = *(void *)__dst;
        if (*(void *)__dst)
        {
          uint64_t v54 = *(void *)&__dst[8];
          int v55 = *(void **)__dst;
          if (*(void *)&__dst[8] == *(void *)__dst)
          {
LABEL_122:
            *(void *)&__dst[8] = v53;
            operator delete(v55);
            goto LABEL_123;
          }
          while (1)
          {
            if (*(char *)(v54 - 1) < 0)
            {
              operator delete(*(void **)(v54 - 24));
              if ((*(char *)(v54 - 25) & 0x80000000) == 0) {
                goto LABEL_117;
              }
            }
            else if ((*(char *)(v54 - 25) & 0x80000000) == 0)
            {
LABEL_117:
              v54 -= 48;
              if (v54 == v53) {
                goto LABEL_121;
              }
              continue;
            }
            operator delete(*(void **)(v54 - 48));
            v54 -= 48;
            if (v54 == v53)
            {
LABEL_121:
              int v55 = *(void **)__dst;
              goto LABEL_122;
            }
          }
        }
LABEL_123:
        int8x8_t v57 = v48[4];
        int8x8_t v56 = v48[5];
        memset(__dst, 0, 24);
        int8x8_t v58 = *(int8x8_t *)(v40 + 104);
        if (v58)
        {
          uint8x8_t v59 = (uint8x8_t)vcnt_s8(v58);
          v59.i16[0] = vaddlv_u8(v59);
          if (v59.u32[0] > 1uLL)
          {
            unint64_t v60 = v42;
            if (v42 >= *(void *)&v58) {
              unint64_t v60 = v42 % *(void *)&v58;
            }
          }
          else
          {
            unint64_t v60 = (*(void *)&v58 - 1) & v42;
          }
          uint64_t v61 = *(void **)(*(void *)(v40 + 96) + 8 * v60);
          if (v61)
          {
            long long v62 = (void *)*v61;
            if (v62)
            {
              if (v59.u32[0] < 2uLL)
              {
                uint64_t v63 = *(void *)&v58 - 1;
                while (1)
                {
                  uint64_t v65 = v62[1];
                  if (v42 == v65)
                  {
                    if (v62[2] == v42) {
                      goto LABEL_215;
                    }
                  }
                  else if ((v65 & v63) != v60)
                  {
                    goto LABEL_143;
                  }
                  long long v62 = (void *)*v62;
                  if (!v62) {
                    goto LABEL_143;
                  }
                }
              }
              do
              {
                unint64_t v64 = v62[1];
                if (v42 == v64)
                {
                  if (v62[2] == v42)
                  {
LABEL_215:
                    memset(&v253, 0, sizeof(v253));
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v253, v62[3], v62[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62[4] - v62[3]) >> 3));
                    goto LABEL_144;
                  }
                }
                else
                {
                  if (v64 >= *(void *)&v58) {
                    v64 %= *(void *)&v58;
                  }
                  if (v64 != v60) {
                    break;
                  }
                }
                long long v62 = (void *)*v62;
              }
              while (v62);
            }
          }
        }
LABEL_143:
        memset(&v253, 0, sizeof(v253));
LABEL_144:
        uint64_t v66 = *(void *)&v56 - *(void *)&v57;
        int8x8_t v67 = v48[13];
        memset(__dst, 0, 24);
        if (!*(void *)&v67) {
          goto LABEL_164;
        }
        unint64_t v68 = (v66 >> 4) - 1;
        uint8x8_t v69 = (uint8x8_t)vcnt_s8(v67);
        v69.i16[0] = vaddlv_u8(v69);
        if (v69.u32[0] > 1uLL)
        {
          uint64_t v70 = (v66 >> 4) - 1;
          if (v68 >= *(void *)&v67) {
            uint64_t v70 = v68 % *(void *)&v67;
          }
        }
        else
        {
          uint64_t v70 = (*(void *)&v67 - 1) & v68;
        }
        int8x8_t v71 = *(void **)(*(void *)&v48[12] + 8 * v70);
        if (!v71 || (int v72 = (void *)*v71) == 0)
        {
LABEL_164:
          v240 = 0;
          v241 = 0;
          uint64_t v242 = 0;
          goto LABEL_165;
        }
        if (v69.u32[0] < 2uLL)
        {
          uint64_t v73 = *(void *)&v67 - 1;
          while (1)
          {
            uint64_t v75 = v72[1];
            if (v68 == v75)
            {
              if (v72[2] == v68) {
                goto LABEL_216;
              }
            }
            else if ((v75 & v73) != v70)
            {
              goto LABEL_164;
            }
            int v72 = (void *)*v72;
            if (!v72) {
              goto LABEL_164;
            }
          }
        }
        while (2)
        {
          unint64_t v74 = v72[1];
          if (v68 != v74)
          {
            if (v74 >= *(void *)&v67) {
              v74 %= *(void *)&v67;
            }
            if (v74 != v70) {
              goto LABEL_164;
            }
            goto LABEL_154;
          }
          if (v72[2] != v68)
          {
LABEL_154:
            int v72 = (void *)*v72;
            if (!v72) {
              goto LABEL_164;
            }
            continue;
          }
          break;
        }
LABEL_216:
        v240 = 0;
        v241 = 0;
        uint64_t v242 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v240, v72[3], v72[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72[4] - v72[3]) >> 3));
        unint64_t v98 = *(void ***)__dst;
        if (*(void *)__dst)
        {
          std::string::size_type v99 = *(void ***)&__dst[8];
          if (*(void *)&__dst[8] != *(void *)__dst)
          {
            do
            {
              if (*((char *)v99 - 1) < 0) {
                operator delete(*(v99 - 3));
              }
              v99 -= 3;
            }
            while (v99 != v98);
            unint64_t v98 = *(void ***)__dst;
          }
          operator delete(v98);
        }
LABEL_165:
        std::string::size_type v77 = v240;
        uint64_t v76 = v241;
        std::string::size_type v78 = v253.__r_.__value_.__r.__words[0];
        if (v241 - v240 != v253.__r_.__value_.__l.__size_ - v253.__r_.__value_.__r.__words[0]) {
          goto LABEL_479;
        }
        while (v77 != v76)
        {
          uint64_t v79 = *((unsigned __int8 *)v77 + 23);
          if ((v79 & 0x80u) == 0) {
            uint64_t v80 = *((unsigned __int8 *)v77 + 23);
          }
          else {
            uint64_t v80 = *((void *)v77 + 1);
          }
          uint64_t v81 = *(unsigned __int8 *)(v78 + 23);
          int v82 = (char)v81;
          if ((v81 & 0x80u) != 0) {
            uint64_t v81 = *(void *)(v78 + 8);
          }
          if (v80 != v81) {
            goto LABEL_479;
          }
          if (v82 >= 0) {
            unint64_t v83 = (unsigned __int8 *)v78;
          }
          else {
            unint64_t v83 = *(unsigned __int8 **)v78;
          }
          if ((v79 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v77, v83, *((void *)v77 + 1))) {
              goto LABEL_479;
            }
          }
          else if (*((unsigned char *)v77 + 23))
          {
            uint64_t v84 = 0;
            while (*((unsigned __int8 *)v77 + v84) == v83[v84])
            {
              if (v79 == ++v84) {
                goto LABEL_168;
              }
            }
LABEL_479:
            Espresso::throw_exception_selector<Espresso::generic_error>("Mismatch in newly added layer's outputs");
          }
LABEL_168:
          std::string::size_type v77 = (E5RT::E5BundleCacheManager *)((char *)v77 + 24);
          v78 += 24;
        }
        uint64_t v85 = *(void *)(*(void *)(*(void *)&v48[4] + v66 - 16) + 64);
        uint64_t v87 = v225;
        std::__fs::filesystem::path v86 = v226;
        if (v226) {
          atomic_fetch_add_explicit(&v226->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v88 = *(std::__shared_weak_count **)(v85 + 16);
        *(void *)(v85 + 8) = v87;
        *(void *)(v85 + 16) = v86;
        if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
          int v89 = (unsigned __int8 *)v240;
          long long v90 = (unsigned __int8 *)v241;
          if (v240 != v241) {
            goto LABEL_202;
          }
LABEL_190:
          if (v89) {
            goto LABEL_191;
          }
LABEL_209:
          std::string::size_type v92 = v253.__r_.__value_.__r.__words[0];
          if (v253.__r_.__value_.__r.__words[0]) {
            goto LABEL_210;
          }
        }
        else
        {
          int v89 = (unsigned __int8 *)v240;
          long long v90 = (unsigned __int8 *)v241;
          if (v240 == v241) {
            goto LABEL_190;
          }
          do
          {
LABEL_202:
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(v43 + 56), (uint64_t)v89))
            {
              std::string::size_type v93 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v243, v89);
              if (v93)
              {
                memset(__dst, 0, 24);
                uint64_t v94 = *((void *)v93 + 5);
                uint64_t v95 = *((void *)v93 + 6);
                if (v95 != v94)
                {
                  if (v95 - v94 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v96 = *(void *)(*(void *)(*(void *)&v48[4] + v66 - 16) + 64);
                  __dst[23] = 9;
                  strcpy(__dst, "is_output");
                  v236[0] = __dst;
                  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 240, __dst, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 10) = 1;
                  if ((__dst[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__dst);
                  }
                }
              }
            }
            v89 += 24;
          }
          while (v89 != v90);
          int v89 = (unsigned __int8 *)v240;
          if (!v240) {
            goto LABEL_209;
          }
LABEL_191:
          int v91 = (unsigned __int8 *)v241;
          if (v241 == (E5RT::E5BundleCacheManager *)v89)
          {
            v241 = (E5RT::E5BundleCacheManager *)v89;
            operator delete(v89);
            std::string::size_type v92 = v253.__r_.__value_.__r.__words[0];
            if (!v253.__r_.__value_.__r.__words[0]) {
              goto LABEL_112;
            }
LABEL_210:
            std::string::size_type v97 = v253.__r_.__value_.__l.__size_;
            long long v52 = (void *)v92;
            if (v253.__r_.__value_.__l.__size_ != v92)
            {
              do
              {
                if (*(char *)(v97 - 1) < 0) {
                  operator delete(*(void **)(v97 - 24));
                }
                v97 -= 24;
              }
              while (v97 != v92);
              long long v52 = (void *)v253.__r_.__value_.__r.__words[0];
            }
            v253.__r_.__value_.__l.__size_ = v92;
            operator delete(v52);
          }
          else
          {
            do
            {
              if ((char)*(v91 - 1) < 0) {
                operator delete(*((void **)v91 - 3));
              }
              v91 -= 24;
            }
            while (v91 != v89);
            v241 = (E5RT::E5BundleCacheManager *)v89;
            operator delete(v240);
            std::string::size_type v92 = v253.__r_.__value_.__r.__words[0];
            if (v253.__r_.__value_.__r.__words[0]) {
              goto LABEL_210;
            }
          }
        }
LABEL_112:
        if (++v42 < v44) {
          continue;
        }
        break;
      }
      v48[71].i8[0] = *(unsigned char *)(v40 + 568);
      Espresso::sequential_builder::build_from_shapes((uint64_t)v249, v40 + 184, &v223);
      int v100 = v223;
      uint64_t v101 = *(void *)(v40 + 576);
      uint64_t v102 = *(void *)(v40 + 584);
      if (v102) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v102 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v100 + 72) = v101;
      uint64_t v103 = (std::__shared_weak_count *)*((void *)v100 + 73);
      *((void *)v100 + 73) = v102;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
        std::string::size_type v104 = v223;
        uint64_t v105 = (void *)((char *)v223 + 752);
        if ((Espresso::net *)((char *)v223 + 752) == (Espresso::net *)(v43 + 96)) {
          goto LABEL_232;
        }
LABEL_229:
        std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>(v105, *(char **)(v43 + 96), *(char **)(v43 + 104), (uint64_t)(*(void *)(v43 + 104) - *(void *)(v43 + 96)) >> 2);
        uint64_t v47 = a2;
        std::string::size_type v104 = v223;
        uint64_t v106 = (Espresso::net *)v40;
        if (v223 != (Espresso::net *)v40)
        {
LABEL_233:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v104 + 59, *(long long **)(v40 + 472), (long long *)(v40 + 480));
          uint64_t v106 = v223;
        }
      }
      else
      {
        std::string::size_type v104 = v223;
        uint64_t v105 = (void *)((char *)v223 + 752);
        if ((Espresso::net *)((char *)v223 + 752) != (Espresso::net *)(v43 + 96)) {
          goto LABEL_229;
        }
LABEL_232:
        uint64_t v47 = a2;
        uint64_t v106 = (Espresso::net *)v40;
        if (v104 != (Espresso::net *)v40) {
          goto LABEL_233;
        }
      }
      *(void *)std::string __dst = operator new(0x38uLL);
      *(_OWORD *)&__dst[8] = xmmword_192DAF6B0;
      strcpy(*(char **)__dst, "espresso.dispatch.fallback_only_when_unavailable");
      v253.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      char v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v106 + 59, __dst, (uint64_t)&std::piecewise_construct, &v253);
      MEMORY[0x192FF0F50]((char *)v107 + 56, "1");
      if ((__dst[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__dst);
        if (!v213) {
          goto LABEL_239;
        }
      }
      else if (!v213)
      {
LABEL_239:
        BOOL v109 = v223;
        uint64_t v110 = (uint64_t **)*((void *)v223 + 19);
        if (v110) {
          goto LABEL_240;
        }
        goto LABEL_324;
      }
      __dst[23] = 18;
      strcpy(__dst, "ane_compiler_batch");
      v253.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      std::string::size_type v108 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v223 + 59, __dst, (uint64_t)&std::piecewise_construct, &v253);
      MEMORY[0x192FF0F50]((char *)v108 + 56, "1");
      if ((__dst[23] & 0x80000000) == 0) {
        goto LABEL_239;
      }
      operator delete(*(void **)__dst);
      BOOL v109 = v223;
      uint64_t v110 = (uint64_t **)*((void *)v223 + 19);
      if (v110)
      {
LABEL_240:
        unint64_t v111 = (uint64_t *)(v40 + 360);
        int v112 = (uint64_t *)(v40 + 336);
        do
        {
          uint64_t v113 = *v111;
          if (*v111)
          {
            int v114 = *((char *)v110 + 39);
            if (v114 >= 0) {
              size_t v115 = *((unsigned __int8 *)v110 + 39);
            }
            else {
              size_t v115 = (size_t)v110[3];
            }
            if (v114 >= 0) {
              size_t v116 = (uint64_t *)(v110 + 2);
            }
            else {
              size_t v116 = v110[2];
            }
            uint64_t v117 = v40 + 360;
            do
            {
              int v118 = *(char *)(v113 + 55);
              if (v118 >= 0) {
                size_t v119 = *(unsigned __int8 *)(v113 + 55);
              }
              else {
                size_t v119 = *(void *)(v113 + 40);
              }
              if (v118 >= 0) {
                std::string v120 = (const void *)(v113 + 32);
              }
              else {
                std::string v120 = *(const void **)(v113 + 32);
              }
              if (v115 >= v119) {
                size_t v121 = v119;
              }
              else {
                size_t v121 = v115;
              }
              int v122 = memcmp(v120, v116, v121);
              BOOL v123 = v119 < v115;
              if (v122) {
                BOOL v123 = v122 < 0;
              }
              BOOL v124 = !v123;
              if (v123) {
                int v125 = (uint64_t *)(v113 + 8);
              }
              else {
                int v125 = (uint64_t *)v113;
              }
              if (v124) {
                uint64_t v117 = v113;
              }
              uint64_t v113 = *v125;
            }
            while (*v125);
            if ((uint64_t *)v117 != v111)
            {
              int v126 = *(char *)(v117 + 55);
              if (v126 >= 0) {
                size_t v127 = *(unsigned __int8 *)(v117 + 55);
              }
              else {
                size_t v127 = *(void *)(v117 + 40);
              }
              if (v126 >= 0) {
                uint64_t v128 = (const void *)(v117 + 32);
              }
              else {
                uint64_t v128 = *(const void **)(v117 + 32);
              }
              if (v127 >= v115) {
                size_t v129 = v115;
              }
              else {
                size_t v129 = v127;
              }
              int v130 = memcmp(v116, v128, v129);
              BOOL v131 = v115 >= v127;
              if (v130) {
                BOOL v131 = v130 >= 0;
              }
              if (v131)
              {
                *(void *)std::string __dst = v110 + 2;
                std::string::size_type v132 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v223 + 44, v110 + 2, (uint64_t)&std::piecewise_construct, (long long **)__dst);
                *(_OWORD *)(v132 + 56) = *(_OWORD *)(v117 + 56);
                if ((char *)v117 != v132) {
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v132 + 72, *(char **)(v117 + 72), *(void *)(v117 + 80), (uint64_t)(*(void *)(v117 + 80) - *(void *)(v117 + 72)) >> 2);
                }
              }
            }
          }
          uint64_t v133 = *v112;
          if (*v112)
          {
            int v134 = *((char *)v110 + 39);
            if (v134 >= 0) {
              size_t v135 = *((unsigned __int8 *)v110 + 39);
            }
            else {
              size_t v135 = (size_t)v110[3];
            }
            if (v134 >= 0) {
              unint64_t v136 = (uint64_t *)(v110 + 2);
            }
            else {
              unint64_t v136 = v110[2];
            }
            uint64_t v137 = v40 + 336;
            do
            {
              int v138 = *(char *)(v133 + 55);
              if (v138 >= 0) {
                size_t v139 = *(unsigned __int8 *)(v133 + 55);
              }
              else {
                size_t v139 = *(void *)(v133 + 40);
              }
              if (v138 >= 0) {
                uint64_t v140 = (const void *)(v133 + 32);
              }
              else {
                uint64_t v140 = *(const void **)(v133 + 32);
              }
              if (v135 >= v139) {
                size_t v141 = v139;
              }
              else {
                size_t v141 = v135;
              }
              int v142 = memcmp(v140, v136, v141);
              BOOL v143 = v139 < v135;
              if (v142) {
                BOOL v143 = v142 < 0;
              }
              BOOL v144 = !v143;
              if (v143) {
                v145 = (uint64_t *)(v133 + 8);
              }
              else {
                v145 = (uint64_t *)v133;
              }
              if (v144) {
                uint64_t v137 = v133;
              }
              uint64_t v133 = *v145;
            }
            while (*v145);
            if ((uint64_t *)v137 != v112)
            {
              int v146 = *(char *)(v137 + 55);
              if (v146 >= 0) {
                size_t v147 = *(unsigned __int8 *)(v137 + 55);
              }
              else {
                size_t v147 = *(void *)(v137 + 40);
              }
              if (v146 >= 0) {
                uint64_t v148 = (const void *)(v137 + 32);
              }
              else {
                uint64_t v148 = *(const void **)(v137 + 32);
              }
              if (v147 >= v135) {
                size_t v149 = v135;
              }
              else {
                size_t v149 = v147;
              }
              int v150 = memcmp(v136, v148, v149);
              BOOL v151 = v135 >= v147;
              if (v150) {
                BOOL v151 = v150 >= 0;
              }
              if (v151)
              {
                *(void *)std::string __dst = v110 + 2;
                v152 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v223 + 41, v110 + 2, (uint64_t)&std::piecewise_construct, (long long **)__dst);
                *(_OWORD *)(v152 + 56) = *(_OWORD *)(v137 + 56);
                long long v153 = *(_OWORD *)(v137 + 72);
                long long v154 = *(_OWORD *)(v137 + 88);
                long long v155 = *(_OWORD *)(v137 + 104);
                *(_OWORD *)(v152 + 116) = *(_OWORD *)(v137 + 116);
                *(_OWORD *)(v152 + 104) = v155;
                *(_OWORD *)(v152 + 88) = v154;
                *(_OWORD *)(v152 + 72) = v153;
              }
            }
          }
          uint64_t v110 = (uint64_t **)*v110;
        }
        while (v110);
        BOOL v109 = v223;
        uint64_t v47 = a2;
      }
LABEL_324:
      uint64_t v156 = *(unsigned __int8 *)(v40 + 615);
      if ((v156 & 0x80u) != 0) {
        uint64_t v156 = *(void *)(v40 + 600);
      }
      if (v156) {
        uint64_t v157 = (const std::string *)(v40 + 592);
      }
      else {
        uint64_t v157 = (const std::string *)(v40 + 616);
      }
      std::string::operator=((std::string *)((char *)v109 + 616), v157);
      v158 = (Espresso::net *)v40;
      if (v223 != (Espresso::net *)v40)
      {
        std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>((uint64_t **)v223 + 97, *(uint64_t **)(v40 + 776), (uint64_t *)(v40 + 784));
        v158 = v223;
      }
      uint64_t v159 = *(void *)(v40 + 1288);
      uint64_t v160 = *(void *)(v40 + 1296);
      if (v160) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v160 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v158 + 161) = v159;
      v161 = (std::__shared_weak_count *)*((void *)v158 + 162);
      *((void *)v158 + 162) = v160;
      if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
        v162 = v223;
        uint64_t v163 = *(void *)(v40 + 712);
        uint64_t v164 = *(void *)(v40 + 720);
        if (v164) {
LABEL_336:
        }
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v164 + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        v162 = v223;
        uint64_t v163 = *(void *)(v40 + 712);
        uint64_t v164 = *(void *)(v40 + 720);
        if (v164) {
          goto LABEL_336;
        }
      }
      *((void *)v162 + 89) = v163;
      std::string::size_type v165 = (std::__shared_weak_count *)*((void *)v162 + 90);
      *((void *)v162 + 90) = v164;
      if (v165 && !atomic_fetch_add(&v165->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
        v166 = v223;
        *((unsigned char *)v223 + 1281) = *(unsigned char *)(v40 + 1281);
        if (v166 != (Espresso::net *)v40)
        {
LABEL_340:
          *((_DWORD *)v166 + 288) = *(_DWORD *)(v40 + 1152);
          std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *> *>>((void *)v166 + 140, *(void **)(v40 + 1136), 0);
        }
      }
      else
      {
        v166 = v223;
        *((unsigned char *)v223 + 1281) = *(unsigned char *)(v40 + 1281);
        if (v166 != (Espresso::net *)v40) {
          goto LABEL_340;
        }
      }
      uint64_t v167 = *(Espresso::multi_head_aot_helper_t **)(v40 + 1368);
      if (v167)
      {
        Espresso::multi_head_aot_helper_t::helper_for_segment(v167, v18, (uint64_t ***)__dst);
        long long v168 = *(_OWORD *)__dst;
        *(_OWORD *)std::string __dst = 0uLL;
        uint64_t v169 = (std::__shared_weak_count *)*((void *)v223 + 172);
        *(_OWORD *)((char *)v223 + 1368) = v168;
        if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
          int v170 = *(std::__shared_weak_count **)&__dst[8];
          if (*(void *)&__dst[8]) {
            goto LABEL_345;
          }
        }
        else
        {
          int v170 = *(std::__shared_weak_count **)&__dst[8];
          if (*(void *)&__dst[8])
          {
LABEL_345:
            if (!atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
          }
        }
      }
      unint64_t v171 = v223;
      if (*((void *)this + 150))
      {
        Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>((uint64_t)v223, &v240);
        if (!v240)
        {
          v175 = operator new(0xF0uLL);
          v175[1] = 0;
          v175[2] = 0;
          void *v175 = &unk_1EE387A80;
          double v176 = Espresso::analysis_debug_metadata::analysis_debug_metadata((Espresso::analysis_debug_metadata *)(v175 + 3));
          int v177 = (std::__shared_weak_count *)v241;
          v240 = v178;
          v241 = (E5RT::E5BundleCacheManager *)v175;
          if (v177)
          {
            if (!atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, double))v177->__on_zero_shared)(v177, v176);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
        }
        uint64_t RootPath = E5RT::E5BundleCacheManager::GetRootPath(v240);
        __dst[23] = 10;
        strcpy(__dst, "model-name");
        v173 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v211, (uint64_t)__dst);
        uint64_t v174 = v173;
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if (!v174) {
            goto LABEL_367;
          }
        }
        else if (!v173)
        {
          goto LABEL_367;
        }
        uint64_t v179 = *(unsigned __int8 *)(RootPath + 47);
        if ((v179 & 0x80u) != 0) {
          uint64_t v179 = *(void *)(RootPath + 32);
        }
        if (!v179) {
          std::string::operator=((std::string *)(RootPath + 24), (const std::string *)(v174 + 5));
        }
LABEL_367:
        __dst[23] = 11;
        strcpy(__dst, "model-owner");
        v180 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v211, (uint64_t)__dst);
        v181 = v180;
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if (!v181) {
            goto LABEL_375;
          }
        }
        else if (!v180)
        {
          goto LABEL_375;
        }
        uint64_t v182 = *(unsigned __int8 *)(RootPath + 23);
        if ((v182 & 0x80u) != 0) {
          uint64_t v182 = *(void *)(RootPath + 8);
        }
        if (!v182) {
          std::string::operator=((std::string *)RootPath, (const std::string *)(v181 + 5));
        }
LABEL_375:
        __dst[23] = 10;
        strcpy(__dst, "model-path");
        uint64_t v183 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v211, (uint64_t)__dst);
        int64_t v184 = v183;
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if (!v184) {
            goto LABEL_383;
          }
        }
        else if (!v183)
        {
          goto LABEL_383;
        }
        uint64_t v185 = *(unsigned __int8 *)(RootPath + 71);
        if ((v185 & 0x80u) != 0) {
          uint64_t v185 = *(void *)(RootPath + 56);
        }
        if (!v185) {
          std::string::operator=((std::string *)(RootPath + 48), (const std::string *)(v184 + 5));
        }
LABEL_383:
        v253.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&v253.__r_.__value_.__r.__words[1] = xmmword_192DB16C0;
        strcpy(v253.__r_.__value_.__l.__data_, "com.apple.EspressoFramework");
        debug_metaint data = Espresso::analysis_debug_metadata::get_debug_metadata(v240);
        *(void *)std::string __dst = &v253;
        v187 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(debug_metadata, (uint64_t)&v253, (uint64_t)&std::piecewise_construct, (long long **)__dst);
        v188 = (uint64_t *)*((void *)this + 149);
        if (v188)
        {
          uint64_t v189 = (uint64_t)(v187 + 5);
          while (1)
          {
            if (*((char *)v188 + 39) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__dst, (const std::string::value_type *)v188[2], v188[3]);
            }
            else
            {
              *(_OWORD *)std::string __dst = *((_OWORD *)v188 + 1);
              *(void *)&__dst[16] = v188[4];
            }
            if (*((char *)v188 + 63) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__dst[24], (const std::string::value_type *)v188[5], v188[6]);
            }
            else
            {
              *(_OWORD *)&__dst[24] = *(_OWORD *)(v188 + 5);
              uint64_t v252 = v188[7];
            }
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(v189, __dst, (uint64_t)__dst);
            if (SHIBYTE(v252) < 0)
            {
              operator delete(*(void **)&__dst[24]);
              if ((__dst[23] & 0x80000000) == 0) {
                goto LABEL_386;
              }
LABEL_395:
              operator delete(*(void **)__dst);
              v188 = (uint64_t *)*v188;
              if (!v188) {
                break;
              }
            }
            else
            {
              if ((__dst[23] & 0x80000000) != 0) {
                goto LABEL_395;
              }
LABEL_386:
              v188 = (uint64_t *)*v188;
              if (!v188) {
                break;
              }
            }
          }
        }
        Espresso::net::set_analysis<Espresso::analysis_debug_metadata>((uint64_t)v171, &v240);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v253.__r_.__value_.__l.__data_);
          v190 = (std::__shared_weak_count *)v241;
          if (!v241) {
            goto LABEL_402;
          }
        }
        else
        {
          v190 = (std::__shared_weak_count *)v241;
          if (!v241) {
            goto LABEL_402;
          }
        }
        if (!atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
LABEL_402:
        unint64_t v171 = v223;
      }
      *((_WORD *)v171 + 704) = *(_WORD *)(v40 + 1408);
      *(_OWORD *)&v253.__r_.__value_.__r.__words[1] = 0uLL;
      v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE35CD00;
      Espresso::pass_find_shared_weights::run_on_network((Espresso::pass_find_shared_weights *)&v253, v171, (uint64_t)__dst);
      long long v191 = *(std::__shared_weak_count **)&__dst[16];
      if (*(void *)&__dst[16]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
      Espresso::net_pass::~net_pass((Espresso::net_pass *)&v253);
      Espresso::shape_network(v223, (Espresso::net *)(v40 + 184), v192);
      if (v222)
      {
        v238 = v223;
        v239 = v224;
        if (v224)
        {
          atomic_fetch_add_explicit(&v224->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!v222) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v253, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string v253 = __str;
        }
        HIBYTE(v242) = 0;
        LOBYTE(v240) = 0;
        char v237 = 0;
        LOBYTE(v236[0]) = 0;
        Espresso::dump_network((uint64_t *)&v238, &v253, (uint64_t)&v240, (uint64_t)v236);
        if ((v237 & 0x80000000) == 0)
        {
          if ((SHIBYTE(v242) & 0x80000000) == 0) {
            goto LABEL_414;
          }
LABEL_418:
          operator delete(v240);
          if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_419;
          }
LABEL_415:
          v193 = v239;
          if (!v239) {
            goto LABEL_422;
          }
LABEL_420:
          if (!atomic_fetch_add(&v193->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
          goto LABEL_422;
        }
        operator delete(v236[0]);
        if (SHIBYTE(v242) < 0) {
          goto LABEL_418;
        }
LABEL_414:
        if ((SHIBYTE(v253.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_415;
        }
LABEL_419:
        operator delete(v253.__r_.__value_.__l.__data_);
        v193 = v239;
        if (v239) {
          goto LABEL_420;
        }
LABEL_422:
        if (!v222) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        std::string::operator=((std::string *)((char *)v223 + 592), &__str);
      }
      v194 = (char *)v244;
      if (v244)
      {
        do
        {
          long long v201 = *(char **)v194;
          long long v202 = (void *)*((void *)v194 + 5);
          if (v202)
          {
            *((void *)v194 + 6) = v202;
            operator delete(v202);
          }
          if (v194[39] < 0) {
            operator delete(*((void **)v194 + 2));
          }
          operator delete(v194);
          v194 = v201;
        }
        while (v201);
      }
      v195 = v243[0];
      v243[0] = 0;
      if (v195) {
        operator delete(v195);
      }
      Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)v249);
      unint64_t v16 = v212;
      if (v222)
      {
LABEL_428:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
    if (!v223) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cut network into segments");
    }
    uint64_t v196 = v225;
    v219 = v223;
    v220 = v224;
    if (v224) {
      atomic_fetch_add_explicit(&v224->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, Espresso::net **))(*(void *)v196 + 88))(v196, &v219);
    v197 = v220;
    if (v220 && !atomic_fetch_add(&v220->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
    unsigned int v198 = (***(uint64_t (****)(void))(v225 + 8))(*(void *)(v225 + 8));
    EspressoLight::espresso_aot_plan::compile_segment(this, v227, v198, v223, v16, (uint64_t)v249);
    std::vector<std::string>::pointer end = v47->__end_;
    if (end >= v47->__end_cap_.__value_)
    {
      v47->__end_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v47, (uint64_t)v249);
      if (v231) {
        goto LABEL_448;
      }
      goto LABEL_454;
    }
    if (SHIBYTE(v249[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v47->__end_, v249[0].__r_.__value_.__l.__data_, v249[0].__r_.__value_.__l.__size_);
    }
    else
    {
      long long v200 = *(_OWORD *)&v249[0].__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = v249[0].__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v200;
    }
    v47->__end_ = end + 1;
    v47->__end_ = end + 1;
    if (!v231) {
      goto LABEL_454;
    }
LABEL_448:
    memset(__dst, 0, 24);
    int v203 = (char *)HIBYTE(v230);
    if (v230 >= 0) {
      v204 = (std::string *)v229;
    }
    else {
      v204 = (std::string *)v229[0];
    }
    if (v230 < 0) {
      int v203 = (char *)v229[1];
    }
    std::string::append[abi:ne180100]<char const*,0>((std::string *)__dst, v204, (std::string *)&v203[(void)v204]);
    std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)__dst, 0);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if (SHIBYTE(v249[0].__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_458;
      }
LABEL_455:
      long long v205 = v224;
      if (!v224) {
        goto LABEL_460;
      }
LABEL_459:
      if (atomic_fetch_add(&v205->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_460;
      }
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
      uint64_t v206 = v226;
      if (v226)
      {
LABEL_461:
        if (!atomic_fetch_add(&v206->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
    }
    else
    {
LABEL_454:
      if ((SHIBYTE(v249[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_455;
      }
LABEL_458:
      operator delete(v249[0].__r_.__value_.__l.__data_);
      long long v205 = v224;
      if (v224) {
        goto LABEL_459;
      }
LABEL_460:
      uint64_t v206 = v226;
      if (v226) {
        goto LABEL_461;
      }
    }
    ++v16;
    LODWORD(v14) = v217;
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v232[5] - v232[4]) >> 3) > v16) {
      continue;
    }
    break;
  }
  int v207 = v216;
  if ((v217 & 0x80u) == 0) {
    int v207 = 0;
  }
  if (v207 == 1) {
    operator delete(__p);
  }
LABEL_469:
  if (v231 && SHIBYTE(v230) < 0) {
    operator delete(v229[0]);
  }
  uint64_t v208 = v233;
  if (v233 && !atomic_fetch_add(&v233->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
    std::__shared_weak_count::__release_weak(v208);
  }
  v209 = v235;
  if (v235 && !atomic_fetch_add(&v235->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
    std::__shared_weak_count::__release_weak(v209);
  }
}

void sub_1924D32E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,__int16 a45,uint64_t a46,char a47)
{
  std::vector<std::string>::~vector[abi:ne180100](v47);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::identify_segments(uint64_t a1, void *a2)
{
  unint64_t v4 = *(uint64_t (****)(void))(*(void *)(*a2 + 16) + 8);
  unsigned int v5 = (**v4)(v4);
  unsigned int v27 = v5;
  unint64_t v6 = *(void *)(*a2 + 536);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = v5;
      if (v6 <= v5) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)(*a2 + 528) + 8 * v8);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          unint64_t v11 = v6 - 1;
          while (1)
          {
            uint64_t v13 = v10[1];
            if (v13 == v5)
            {
              if (*((_DWORD *)v10 + 4) == v5) {
                goto LABEL_22;
              }
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_28;
            }
            unint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v12 = v10[1];
          if (v12 == v5)
          {
            if (*((_DWORD *)v10 + 4) == v5)
            {
LABEL_22:
              int v14 = (char *)v10[3];
              uint64_t v15 = (std::__shared_weak_count *)v10[4];
              int v25 = v14;
              char v26 = v15;
              if (v15) {
                atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v14) {
                Espresso::throw_exception_selector<Espresso::generic_error>("Compiler is already built");
              }
              if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
              break;
            }
          }
          else
          {
            if (v12 >= v6) {
              v12 %= v6;
            }
            if (v12 != v8) {
              break;
            }
          }
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_28:
  uint64_t v16 = *a2;
  *(unsigned char *)(*a2 + 1408) = *(unsigned char *)(a1 + 1168);
  *(unsigned char *)(v16 + 1409) = *(void *)(a1 + 1224) != 0;
  uint64_t v17 = operator new(0x80uLL);
  v17[1] = 0;
  v17[2] = 0;
  *uint64_t v17 = &unk_1EE380738;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  v17[12] = 0;
  v17[13] = 0;
  v17[10] = v17 + 11;
  v17[14] = 0;
  v17[15] = 0;
  v17[3] = &unk_1EE324250;
  int v25 = (char *)(v17 + 3);
  char v26 = (std::__shared_weak_count *)v17;
  uint64_t v28 = &v27;
  uint64_t v18 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v16 + 528, &v27, (uint64_t)&std::piecewise_construct, &v28);
  atomic_fetch_add_explicit(v17 + 1, 1uLL, memory_order_relaxed);
  unint64_t v19 = (std::__shared_weak_count *)v18[4];
  v18[3] = v17 + 3;
  v18[4] = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)a2[1];
  uint64_t v23 = *a2;
  uint64_t v24 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(char *, uint64_t *))(*(void *)v25 + 88))(v25, &v23);
  int v21 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  unint64_t v22 = v26;
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1924D3B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924D3B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1924D3BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::AssertIsSingleSegmentAneNetwork(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v15 = a3;
  if (!a4) {
    return;
  }
  uint64_t v5 = a1;
  unsigned int v14 = 0;
  if (a1 == a2) {
LABEL_21:
  }
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&,int &>("%s: network has %d ANE inference layers, expected 1", &v15, &v14);
  int v6 = 0;
  int v7 = 0;
  do
  {
    unint64_t v8 = *(const void **)(*(void *)v5 + 64);
    if (!v8 {
      || (unint64_t v9 = *(std::__shared_weak_count **)(*(void *)v5 + 72),
    }
    {
      ++v7;
      goto LABEL_5;
    }
    uint64_t v17 = v10;
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v16 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v10 + 320))(v10);
    int v11 = is_ane(&v16);
    char v12 = v11;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v12)
      {
LABEL_13:
        ++v14;
        goto LABEL_5;
      }
    }
    else if (v11)
    {
      goto LABEL_13;
    }
    ++v6;
LABEL_5:
    v5 += 16;
  }
  while (v5 != a2);
  if (v14 != 1) {
    goto LABEL_21;
  }
  if (v6 > 0 || a4 == 2 && v7 >= 1) {
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("%s: network contains layers other than ANE inference", &v15);
  }
}

void sub_1924D3DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924D3DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *EspressoLight::espresso_aot_plan::get_bundle_dir(EspressoLight::espresso_aot_plan *this)
{
  uint64_t v1 = (std::string *)((char *)this + 1104);
  if (*((char *)this + 1127) < 0)
  {
    if (*((void *)this + 139)) {
      return v1;
    }
  }
  else if (*((unsigned char *)this + 1127))
  {
    return v1;
  }
  EspressoLight::espresso_aot_plan::get_network(this, &v14);
  if (*(char *)(v14 + 471) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v14 + 448), *(void *)(v14 + 456));
  }
  else {
    std::string __str = *(std::string *)(v14 + 448);
  }
  char v12 = 7;
  qmemcpy(__c, ".bundle", 7);
  int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  HIBYTE(__c[1]) = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t size = __str.__r_.__value_.__l.__size_;
  }
  int64_t v4 = size - 7;
  if (size >= 7)
  {
    uint64_t v5 = (char *)p_str + size;
    int v6 = p_str;
    do
    {
      int v7 = (char *)memchr(v6, SLOBYTE(__c[0]), size - 6);
      if (!v7) {
        break;
      }
      if (*(_DWORD *)v7 == __c[0] && *(_DWORD *)(v7 + 3) == *(int *)((char *)__c + 3))
      {
        if (v7 != v5 && v7 - (char *)p_str != -1 && v7 - (char *)p_str == v4) {
          goto LABEL_26;
        }
        break;
      }
      int v6 = (std::string *)(v7 + 1);
      int64_t size = v5 - (char *)v6;
    }
    while (v5 - (char *)v6 >= 7);
  }
  std::string::append(&__str, (const std::string::value_type *)__c, 7uLL);
LABEL_26:
  std::string::operator=(v1, &__str);
  if ((v12 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_31:
    operator delete(__str.__r_.__value_.__l.__data_);
    unint64_t v9 = v15;
    if (!v15) {
      return v1;
    }
    goto LABEL_32;
  }
  operator delete(*(void **)__c);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_31;
  }
LABEL_28:
  unint64_t v9 = v15;
  if (!v15) {
    return v1;
  }
LABEL_32:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v1;
}

void sub_1924D3FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924D3FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::get_abs_path_to_segment_assets_within_bundle(EspressoLight::espresso_aot_plan *a1@<X0>, const void **a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  bundle_dir = EspressoLight::espresso_aot_plan::get_bundle_dir(a1);
  int v10 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
  if (v10 >= 0) {
    size_t size = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = bundle_dir->__r_.__value_.__l.__size_;
  }
  unint64_t v12 = size + 1;
  if (size + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  p_int data = (const void **)&bundle_dir->__r_.__value_.__l.__data_;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 1;
    if (!size) {
      goto LABEL_15;
    }
  }
  if (v10 >= 0) {
    uint64_t v17 = p_data;
  }
  else {
    uint64_t v17 = *p_data;
  }
  memmove(p_dst, v17, size);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 47;
  EspressoLight::espresso_aot_plan::get_rel_path_to_segment_assets_within_bundle(a3, a2, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = std::string::append(&__dst, (const std::string::value_type *)p_p, v19);
  *a5 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1924D417C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_aot_plan::get_rel_path_to_segment_assets_within_bundle(unint64_t __val@<X2>, const void **a2@<X1>, int a3@<W3>, std::string *a4@<X8>)
{
  int v5 = *((char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  unint64_t v7 = v6 + 9;
  if (v6 + 9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 9;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6 + 9;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v5 >= 0) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = *a2;
  }
  memmove(p_dst, v14, v6);
LABEL_15:
  strcpy((char *)p_dst + v6, "/segment_");
  std::to_string(&v34, __val);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v34;
  }
  else {
    uint64_t v15 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v34.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::string::append(&__dst, (const std::string::value_type *)v15, size);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v19 = std::string::append(&v36, "__");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (a3 > 10007)
  {
    uint64_t v21 = 0;
    if (a3 != 10008)
    {
      if (a3 != 50008) {
        goto LABEL_56;
      }
      uint64_t v21 = 3;
    }
  }
  else
  {
    if (a3)
    {
      if (a3 == 10007)
      {
        uint64_t v21 = 1;
        goto LABEL_29;
      }
LABEL_56:
      Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized platform");
    }
    uint64_t v21 = 2;
  }
LABEL_29:
  unint64_t v22 = (const char *)*((void *)&unk_1E5746A80 + 2 * v21 + 1);
  size_t v23 = strlen(v22);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v24 = v23;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    p_p = operator new(v26 + 1);
    size_t v32 = v24;
    int64_t v33 = v27 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v33) = v23;
  p_p = &__p;
  if (v23) {
LABEL_36:
  }
    memmove(p_p, v22, v24);
  *((unsigned char *)p_p + v24) = 0;
  if (v33 >= 0) {
    uint64_t v28 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v28 = (const std::string::value_type *)__p;
  }
  if (v33 >= 0) {
    std::string::size_type v29 = HIBYTE(v33);
  }
  else {
    std::string::size_type v29 = v32;
  }
  uint64_t v30 = std::string::append(&v37, v28, v29);
  *a4 = *v30;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      goto LABEL_51;
    }
  }
  else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_47:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_53:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_52:
  operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_53;
  }
}

void sub_1924D44D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a40 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_aot_plan::compile_segment(EspressoLight::espresso_aot_plan *this@<X0>, int a2@<W1>, unsigned int a3@<W2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  v140[20] = *MEMORY[0x1E4F143B8];
  int v138 = a2;
  unint64_t v6 = a4[67];
  if (!v6) {
    goto LABEL_290;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = a3;
    if (v6 <= a3) {
      unint64_t v11 = a3 % v6;
    }
  }
  else
  {
    unint64_t v11 = (v6 - 1) & a3;
  }
  uint64_t v12 = *(uint64_t ***)(a4[66] + 8 * v11);
  if (!v12 || (uint64_t v13 = *v12) == 0)
  {
LABEL_290:
    uint64_t v136 = 0;
    uint64_t v137 = 0;
    goto LABEL_291;
  }
  if (v10.u32[0] < 2uLL)
  {
    unint64_t v14 = v6 - 1;
    while (1)
    {
      uint64_t v16 = v13[1];
      if (v16 == a3)
      {
        if (*((_DWORD *)v13 + 4) == a3) {
          goto LABEL_21;
        }
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_290;
      }
      uint64_t v13 = (uint64_t *)*v13;
      if (!v13) {
        goto LABEL_290;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v13[1];
    if (v15 == a3) {
      break;
    }
    if (v15 >= v6) {
      v15 %= v6;
    }
    if (v15 != v11) {
      goto LABEL_290;
    }
LABEL_11:
    uint64_t v13 = (uint64_t *)*v13;
    if (!v13) {
      goto LABEL_290;
    }
  }
  if (*((_DWORD *)v13 + 4) != a3) {
    goto LABEL_11;
  }
LABEL_21:
  uint64_t v17 = v13[3];
  long long v18 = (std::__shared_weak_count *)v13[4];
  uint64_t v136 = v17;
  uint64_t v137 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v17) {
LABEL_291:
  }
    Espresso::throw_exception_selector<Espresso::generic_error>("Compiler not found");
  bundle_dir = EspressoLight::espresso_aot_plan::get_bundle_dir(this);
  *((unsigned char *)&v139.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v139, "main");
  EspressoLight::espresso_aot_plan::get_rel_path_to_segment_assets_within_bundle(a5, (const void **)&v139.__pn_.__r_.__value_.__l.__data_, v138, &v135);
  *((unsigned char *)&v139.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v139, "main");
  EspressoLight::espresso_aot_plan::get_abs_path_to_segment_assets_within_bundle(this, (const void **)&v139.__pn_.__r_.__value_.__l.__data_, a5, v138, &v134);
  memset(&v139, 0, sizeof(v139));
  std::string::size_type size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v20 = &v134;
  }
  else {
    long long v20 = (std::string *)v134.__r_.__value_.__r.__words[0];
  }
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v134.__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v139.__pn_, v20, (std::string *)((char *)v20 + size));
  std::__fs::filesystem::__create_directories(&v139, 0);
  if (SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__pn_.__r_.__value_.__l.__data_);
  }
  if (!is_ane(&v138))
  {
    if (!is_gpu(&v138))
    {
      if (is_cpu(&v138))
      {
        EspressoLight::espresso_aot_plan::compile_cpu_segment(this, (uint64_t)a4, (const void **)&v135.__r_.__value_.__l.__data_, (void *)a6);
        goto LABEL_280;
      }
      std::string::size_type v93 = "Unknown platform";
LABEL_297:
      Espresso::throw_exception_selector<Espresso::generic_error>(v93);
    }
    int v48 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v49 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v49 = v135.__r_.__value_.__l.__size_;
    }
    unint64_t v50 = v49 + 10;
    if (v49 + 10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v50 >= 0x17)
    {
      uint64_t v60 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17) {
        uint64_t v60 = v50 | 7;
      }
      uint64_t v61 = v60 + 1;
      std::string v51 = operator new(v60 + 1);
      *(void *)(a6 + 8) = v50;
      *(void *)(a6 + 16) = v61 | 0x8000000000000000;
      *(void *)a6 = v51;
    }
    else
    {
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      *(void *)a6 = 0;
      std::string v51 = (void *)a6;
      *(unsigned char *)(a6 + 23) = v50;
      if (!v49) {
        goto LABEL_123;
      }
    }
    if (v48 >= 0) {
      long long v62 = &v135;
    }
    else {
      long long v62 = (std::string *)v135.__r_.__value_.__r.__words[0];
    }
    memmove(v51, v62, v49);
LABEL_123:
    strcpy((char *)v51 + v49, "/model.mil");
    int v63 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
    if (v63 >= 0) {
      size_t v64 = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v64 = bundle_dir->__r_.__value_.__l.__size_;
    }
    unint64_t v65 = v64 + 1;
    if (v64 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v65 >= 0x17)
    {
      uint64_t v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v65 | 7) != 0x17) {
        uint64_t v67 = v65 | 7;
      }
      uint64_t v68 = v67 + 1;
      uint64_t v66 = (char *)operator new(v67 + 1);
      v133.__r_.__value_.__l.__size_ = v64 + 1;
      v133.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
      v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    }
    else
    {
      memset(&v133, 0, sizeof(v133));
      uint64_t v66 = (char *)&v133;
      *((unsigned char *)&v133.__r_.__value_.__s + 23) = v64 + 1;
      if (!v64)
      {
LABEL_137:
        *(_WORD *)&v66[v64] = 47;
        if (v48 >= 0) {
          uint64_t v70 = &v135;
        }
        else {
          uint64_t v70 = (std::string *)v135.__r_.__value_.__r.__words[0];
        }
        int8x8_t v71 = std::string::append(&v133, (const std::string::value_type *)v70, v49);
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v139.__pn_.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v139.__pn_.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(void *)v136 + 32))(v136, &v139);
        goto LABEL_279;
      }
    }
    if (v63 >= 0) {
      uint8x8_t v69 = bundle_dir;
    }
    else {
      uint8x8_t v69 = (std::string *)bundle_dir->__r_.__value_.__r.__words[0];
    }
    memmove(v66, v69, v64);
    goto LABEL_137;
  }
  uint64_t v21 = (void *)a4[29];
  unint64_t v22 = a4 + 30;
  if (v21 != a4 + 30)
  {
    uint64_t v23 = a4[42];
    if (v23)
    {
      size_t v24 = a4 + 42;
      do
      {
        char v25 = *((unsigned char *)v21 + 55);
        if (v25 >= 0) {
          size_t v26 = *((unsigned __int8 *)v21 + 55);
        }
        else {
          size_t v26 = v21[5];
        }
        if (v25 >= 0) {
          uint64_t v27 = v21 + 4;
        }
        else {
          uint64_t v27 = (const void *)v21[4];
        }
        uint64_t v28 = v24;
        uint64_t v29 = v23;
        do
        {
          int v30 = *(char *)(v29 + 55);
          if (v30 >= 0) {
            size_t v31 = *(unsigned __int8 *)(v29 + 55);
          }
          else {
            size_t v31 = *(void *)(v29 + 40);
          }
          if (v30 >= 0) {
            size_t v32 = (const void *)(v29 + 32);
          }
          else {
            size_t v32 = *(const void **)(v29 + 32);
          }
          if (v26 >= v31) {
            size_t v33 = v31;
          }
          else {
            size_t v33 = v26;
          }
          int v34 = memcmp(v32, v27, v33);
          BOOL v35 = v31 < v26;
          if (v34) {
            BOOL v35 = v34 < 0;
          }
          BOOL v36 = !v35;
          if (v35) {
            std::string v37 = (uint64_t *)(v29 + 8);
          }
          else {
            std::string v37 = (uint64_t *)v29;
          }
          if (v36) {
            uint64_t v28 = (void *)v29;
          }
          uint64_t v29 = *v37;
        }
        while (*v37);
        if (v28 != v24)
        {
          int v38 = *((char *)v28 + 55);
          if (v38 >= 0) {
            size_t v39 = *((unsigned __int8 *)v28 + 55);
          }
          else {
            size_t v39 = v28[5];
          }
          if (v38 >= 0) {
            uint64_t v40 = v28 + 4;
          }
          else {
            uint64_t v40 = (const void *)v28[4];
          }
          if (v39 >= v26) {
            size_t v41 = v26;
          }
          else {
            size_t v41 = v39;
          }
          int v42 = memcmp(v27, v40, v41);
          BOOL v43 = v26 >= v39;
          if (v42) {
            BOOL v43 = v42 >= 0;
          }
          if (v43 && !*((_DWORD *)v28 + 31)) {
            Espresso::throw_exception_selector<Espresso::generic_error>("Input transforms on CPU are not supported for a surface fed to ANE. Please set use_direct_cvpixelbuffer to 1 in transform_params to perform the pre-processing on the ANE.");
          }
        }
        unint64_t v44 = (void *)v21[1];
        if (v44)
        {
          do
          {
            unint64_t v45 = v44;
            unint64_t v44 = (void *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            unint64_t v45 = (void *)v21[2];
            BOOL v36 = *v45 == (void)v21;
            uint64_t v21 = v45;
          }
          while (!v36);
        }
        uint64_t v21 = v45;
      }
      while (v45 != v22);
    }
    else
    {
      do
      {
        char v46 = (void *)v21[1];
        if (v46)
        {
          do
          {
            uint64_t v47 = v46;
            char v46 = (void *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            uint64_t v47 = (void *)v21[2];
            BOOL v36 = *v47 == (void)v21;
            uint64_t v21 = v47;
          }
          while (!v36);
        }
        uint64_t v21 = v47;
      }
      while (v47 != v22);
    }
  }
  if (v138 == 10007)
  {
    if (*((char *)this + 1167) < 0)
    {
      if (!*((void *)this + 144))
      {
LABEL_109:
        (*(void (**)(std::string *__return_ptr))(*(void *)v136 + 48))(&v133);
        int v56 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v57 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v57 = v135.__r_.__value_.__l.__size_;
        }
        unint64_t v58 = v57 + 12;
        if (v57 + 12 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v58 >= 0x17)
        {
          uint64_t v76 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v58 | 7) != 0x17) {
            uint64_t v76 = v58 | 7;
          }
          uint64_t v77 = v76 + 1;
          uint8x8_t v59 = operator new(v76 + 1);
          *(void *)(a6 + 8) = v58;
          *(void *)(a6 + 16) = v77 | 0x8000000000000000;
          *(void *)a6 = v59;
        }
        else
        {
          *(void *)(a6 + 8) = 0;
          *(void *)(a6 + 16) = 0;
          *(void *)a6 = 0;
          uint8x8_t v59 = (void *)a6;
          *(unsigned char *)(a6 + 23) = v58;
          if (!v57) {
            goto LABEL_160;
          }
        }
        if (v56 >= 0) {
          std::string::size_type v78 = &v135;
        }
        else {
          std::string::size_type v78 = (std::string *)v135.__r_.__value_.__r.__words[0];
        }
        memmove(v59, v78, v57);
LABEL_160:
        strcpy((char *)v59 + v57, "/net.anehash");
        int v79 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
        if (v79 >= 0) {
          size_t v80 = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v80 = bundle_dir->__r_.__value_.__l.__size_;
        }
        unint64_t v81 = v80 + 1;
        if (v80 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v81 >= 0x17)
        {
          uint64_t v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v81 | 7) != 0x17) {
            uint64_t v83 = v81 | 7;
          }
          uint64_t v84 = v83 + 1;
          int v82 = (char *)operator new(v83 + 1);
          v139.__pn_.__r_.__value_.__l.__size_ = v80 + 1;
          v139.__pn_.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
          v139.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
        }
        else
        {
          memset(&v139, 0, sizeof(v139));
          int v82 = (char *)&v139;
          *((unsigned char *)&v139.__pn_.__r_.__value_.__s + 23) = v80 + 1;
          if (!v80) {
            goto LABEL_174;
          }
        }
        if (v79 >= 0) {
          uint64_t v85 = bundle_dir;
        }
        else {
          uint64_t v85 = (std::string *)bundle_dir->__r_.__value_.__r.__words[0];
        }
        memmove(v82, v85, v80);
LABEL_174:
        *(_WORD *)&v82[v80] = 47;
        int v86 = *(char *)(a6 + 23);
        if (v86 >= 0) {
          uint64_t v87 = (const std::string::value_type *)a6;
        }
        else {
          uint64_t v87 = *(const std::string::value_type **)a6;
        }
        if (v86 >= 0) {
          std::string::size_type v88 = *(unsigned __int8 *)(a6 + 23);
        }
        else {
          std::string::size_type v88 = *(void *)(a6 + 8);
        }
        int v89 = std::string::append(&v139.__pn_, v87, v88);
        long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        int64_t v132 = v89->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v139.__pn_.__r_.__value_.__l.__data_);
        }
        std::ofstream::basic_ofstream((uint64_t *)&v139);
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v91 = &v133;
        }
        else {
          int v91 = (std::string *)v133.__r_.__value_.__r.__words[0];
        }
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v92 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v92 = v133.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v139, (uint64_t)v91, v92);
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)((char *)&v139 + *(void *)(v139.__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v139 + *(void *)(v139.__pn_.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
        }
        v139.__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
        *(std::string::size_type *)((char *)v139.__pn_.__r_.__value_.__r.__words
                                  + *(void *)(v139.__pn_.__r_.__value_.__r.__words[0] - 2std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
        MEMORY[0x192FF1040](&v139.__pn_.__r_.__value_.__r.__words[1]);
        std::ostream::~ostream();
        MEMORY[0x192FF15B0](v140);
        if (SHIBYTE(v132) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_280;
          }
        }
        else if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_280;
        }
        operator delete(v133.__r_.__value_.__l.__data_);
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_285;
        }
LABEL_281:
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_286;
        }
        goto LABEL_282;
      }
    }
    else if (!*((unsigned char *)this + 1167))
    {
      goto LABEL_109;
    }
    std::string::size_type v93 = "ANE Runtime Compiler cannot (yet) support override ANE compiler options plists.";
    goto LABEL_297;
  }
  if (v138 != 10008)
  {
    std::string::size_type v93 = "Unexpected ANE platform.";
    goto LABEL_297;
  }
  int v52 = SHIBYTE(v134.__r_.__value_.__r.__words[2]);
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v53 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v53 = v134.__r_.__value_.__l.__size_;
  }
  unint64_t v54 = v53 + 17;
  if (v53 + 17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v54 >= 0x17)
  {
    uint64_t v73 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17) {
      uint64_t v73 = v54 | 7;
    }
    uint64_t v74 = v73 + 1;
    int v55 = operator new(v73 + 1);
    v139.__pn_.__r_.__value_.__l.__size_ = v53 + 17;
    v139.__pn_.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
    v139.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  }
  else
  {
    memset(&v139, 0, sizeof(v139));
    int v55 = &v139;
    *((unsigned char *)&v139.__pn_.__r_.__value_.__s + 23) = v53 + 17;
    if (!v53) {
      goto LABEL_150;
    }
  }
  if (v52 >= 0) {
    uint64_t v75 = &v134;
  }
  else {
    uint64_t v75 = (std::string *)v134.__r_.__value_.__r.__words[0];
  }
  memmove(v55, v75, v53);
LABEL_150:
  strcpy((char *)v55 + v53, "/anecir.XXXXXXXXX");
  EspressoLight::tmp_assets_manager::create_tmp_dir(*((void *)this + 152), (uint64_t)&v139, (uint64_t)&v133);
  (*(void (**)(uint64_t, std::string *))(*(void *)v136 + 32))(v136, &v133);
  if (*((char *)this + 1167) < 0)
  {
    if (!*((void *)this + 144)) {
      goto LABEL_236;
    }
  }
  else if (!*((unsigned char *)this + 1167))
  {
    goto LABEL_236;
  }
  int v94 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v95 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v95 = v133.__r_.__value_.__l.__size_;
  }
  unint64_t v96 = v95 + 18;
  if (v95 + 18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v96 >= 0x17)
  {
    uint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v96 | 7) != 0x17) {
      uint64_t v98 = v96 | 7;
    }
    uint64_t v99 = v98 + 1;
    std::string::size_type v97 = operator new(v98 + 1);
    __p[1] = (void *)(v95 + 18);
    int64_t v132 = v99 | 0x8000000000000000;
    __p[0] = v97;
  }
  else
  {
    __p[1] = 0;
    int64_t v132 = 0;
    __p[0] = 0;
    std::string::size_type v97 = __p;
    HIBYTE(v132) = v95 + 18;
    if (!v95) {
      goto LABEL_214;
    }
  }
  if (v94 >= 0) {
    int v100 = &v133;
  }
  else {
    int v100 = (std::string *)v133.__r_.__value_.__r.__words[0];
  }
  memmove(v97, v100, v95);
LABEL_214:
  strcpy((char *)v97 + v95, "/net_options.plist");
  uint64_t v101 = (char *)HIBYTE(v132);
  if (v132 >= 0) {
    uint64_t v102 = (std::string *)__p;
  }
  else {
    uint64_t v102 = (std::string *)__p[0];
  }
  memset(&__from, 0, sizeof(__from));
  if (v132 < 0) {
    uint64_t v101 = (char *)__p[1];
  }
  std::string::append[abi:ne180100]<char const*,0>(&__from.__pn_, v102, (std::string *)&v101[(void)v102]);
  std::__fs::filesystem::__status(&__from, 0);
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  }
  uint64_t v103 = (std::string *)((char *)this + 1144);
  if (__to.__pn_.__r_.__value_.__s.__data_[0] && __to.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    Espresso::ANECompilerEngine::CombineOptionsPlists((uint64_t *)__p, (uint64_t *)v103, (uint64_t)__p);
  }
  else
  {
    memset(&__from, 0, sizeof(__from));
    uint64_t v104 = *((unsigned __int8 *)this + 1167);
    if ((v104 & 0x80u) != 0)
    {
      uint64_t v103 = (std::string *)*((void *)this + 143);
      uint64_t v104 = *((void *)this + 144);
    }
    std::string::append[abi:ne180100]<char const*,0>(&__from.__pn_, v103, (std::string *)((char *)v103 + v104));
    memset(&__to, 0, sizeof(__to));
    uint64_t v105 = (char *)HIBYTE(v132);
    if (v132 >= 0) {
      uint64_t v106 = (std::string *)__p;
    }
    else {
      uint64_t v106 = (std::string *)__p[0];
    }
    if (v132 < 0) {
      uint64_t v105 = (char *)__p[1];
    }
    std::string::append[abi:ne180100]<char const*,0>(&__to.__pn_, v106, (std::string *)&v105[(void)v106]);
    std::__fs::filesystem::__copy_file(&__from, &__to, (std::__fs::filesystem::copy_options)0, 0);
    if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__to.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v132) < 0)
  {
    operator delete(__p[0]);
    if (!*((unsigned char *)this + 1128)) {
      goto LABEL_239;
    }
LABEL_237:
    *(unsigned char *)(*((void *)this + 152) + 24) = 1;
    *(std::string *)a6 = v133;
  }
  else
  {
LABEL_236:
    if (*((unsigned char *)this + 1128)) {
      goto LABEL_237;
    }
LABEL_239:
    int v107 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v108 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v108 = v135.__r_.__value_.__l.__size_;
    }
    unint64_t v109 = v108 + 8;
    if (v108 + 8 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v109 >= 0x17)
    {
      uint64_t v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v109 | 7) != 0x17) {
        uint64_t v111 = v109 | 7;
      }
      uint64_t v112 = v111 + 1;
      uint64_t v110 = operator new(v111 + 1);
      *(void *)(a6 + 8) = v109;
      *(void *)(a6 + 16) = v112 | 0x8000000000000000;
      *(void *)a6 = v110;
    }
    else
    {
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      *(void *)a6 = 0;
      uint64_t v110 = (void *)a6;
      *(unsigned char *)(a6 + 23) = v109;
      if (!v108) {
        goto LABEL_253;
      }
    }
    if (v107 >= 0) {
      uint64_t v113 = &v135;
    }
    else {
      uint64_t v113 = (std::string *)v135.__r_.__value_.__r.__words[0];
    }
    memmove(v110, v113, v108);
LABEL_253:
    strcpy((char *)v110 + v108, "/net.hwx");
    int v114 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
    if (v114 >= 0) {
      size_t v115 = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v115 = bundle_dir->__r_.__value_.__l.__size_;
    }
    unint64_t v116 = v115 + 1;
    if (v115 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v116 >= 0x17)
    {
      uint64_t v118 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v116 | 7) != 0x17) {
        uint64_t v118 = v116 | 7;
      }
      uint64_t v119 = v118 + 1;
      p_from = (char *)operator new(v118 + 1);
      __from.__pn_.__r_.__value_.__l.__size_ = v115 + 1;
      __from.__pn_.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
      __from.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_from;
    }
    else
    {
      memset(&__from, 0, sizeof(__from));
      p_from = (char *)&__from;
      *((unsigned char *)&__from.__pn_.__r_.__value_.__s + 23) = v115 + 1;
      if (!v115) {
        goto LABEL_267;
      }
    }
    if (v114 >= 0) {
      std::string v120 = bundle_dir;
    }
    else {
      std::string v120 = (std::string *)bundle_dir->__r_.__value_.__r.__words[0];
    }
    memmove(p_from, v120, v115);
LABEL_267:
    *(_WORD *)&p_from[v115] = 47;
    int v121 = *(char *)(a6 + 23);
    if (v121 >= 0) {
      int v122 = (const std::string::value_type *)a6;
    }
    else {
      int v122 = *(const std::string::value_type **)a6;
    }
    if (v121 >= 0) {
      std::string::size_type v123 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      std::string::size_type v123 = *(void *)(a6 + 8);
    }
    BOOL v124 = std::string::append(&__from.__pn_, v122, v123);
    long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    int64_t v132 = v124->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    }
    (*(void (**)(uint64_t, std::string *, void **))(*(void *)v136 + 40))(v136, &v133, __p);
    if (SHIBYTE(v132) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v133.__r_.__value_.__l.__data_);
    }
  }
LABEL_279:
  if (SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v139.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_285;
    }
    goto LABEL_281;
  }
LABEL_280:
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_281;
  }
LABEL_285:
  operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_286:
    operator delete(v135.__r_.__value_.__l.__data_);
    int v126 = v137;
    if (v137) {
      goto LABEL_287;
    }
    return;
  }
LABEL_282:
  int v126 = v137;
  if (v137)
  {
LABEL_287:
    if (!atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
}

void sub_1924D54BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a41 < 0)
  {
    operator delete(a36);
    if ((a47 & 0x80000000) == 0)
    {
LABEL_9:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(a42);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_1924D56E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void EspressoLight::tmp_assets_manager::create_tmp_dir(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    MEMORY[0x1F4188790]();
    unint64_t v7 = (char *)v23 - ((v8 + 16) & 0xFFFFFFFFFFFFFFF0);
    int v5 = *v9;
  }
  else
  {
    MEMORY[0x1F4188790]();
    unint64_t v7 = (char *)v23 - v6;
  }
  uint8x8_t v10 = strcpy(v7, v5);
  unint64_t v11 = mkdtemp(v10);
  size_t v12 = strlen(v11);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v17 = v12 | 7;
    }
    uint64_t v18 = v17 + 1;
    unint64_t v14 = operator new(v17 + 1);
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v18 | 0x8000000000000000;
    *(void *)a3 = v14;
LABEL_13:
    memmove(v14, v11, v13);
    *((unsigned char *)v14 + v13) = 0;
    unint64_t v15 = *(std::string **)(a1 + 8);
    if ((unint64_t)v15 < *(void *)(a1 + 16)) {
      goto LABEL_8;
    }
LABEL_14:
    std::string::size_type v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, a3);
    goto LABEL_17;
  }
  *(unsigned char *)(a3 + 23) = v12;
  unint64_t v14 = (void *)a3;
  if (v12) {
    goto LABEL_13;
  }
  *(unsigned char *)a3 = 0;
  unint64_t v15 = *(std::string **)(a1 + 8);
  if ((unint64_t)v15 >= *(void *)(a1 + 16)) {
    goto LABEL_14;
  }
LABEL_8:
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    v15->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  std::string::size_type v19 = v15 + 1;
  *(void *)(a1 + 8) = v15 + 1;
LABEL_17:
  *(void *)(a1 + 8) = v19;
  long long v20 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v21 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v21 = *(const std::string::value_type **)a3;
  }
  unint64_t v22 = [NSString stringWithUTF8String:v21];
  [v20 createDirectoryAtPath:v22 withIntermediateDirectories:1 attributes:0 error:0];
}

void sub_1924D5908(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 8) = v3;
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_aot_plan::compile_cpu_segment(EspressoLight::espresso_aot_plan *this@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = *(int8x8_t *)(a2 + 536);
  if (!*(void *)&v5 || (uint64_t v6 = **(uint64_t ****)(a2 + 528)) == 0 || (v7 = *v6) == 0)
  {
LABEL_25:
    uint64_t v53 = 0;
    unint64_t v54 = 0;
    goto LABEL_26;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v5);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v7[1];
      if (v12)
      {
        if ((v12 & v11) != 0) {
          goto LABEL_25;
        }
      }
      else if (!*((_DWORD *)v7 + 4))
      {
        goto LABEL_10;
      }
      unint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v19 = v7[1];
    if (!v19) {
      break;
    }
    if (v19 < *(void *)&v5 || v19 % *(void *)&v5) {
      goto LABEL_25;
    }
LABEL_21:
    unint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_25;
    }
  }
  if (*((_DWORD *)v7 + 4)) {
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v14 = v7[3];
  size_t v13 = (std::__shared_weak_count *)v7[4];
  uint64_t v53 = v14;
  unint64_t v54 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v14) {
LABEL_26:
  }
    Espresso::throw_exception_selector<Espresso::generic_error>("Compiler not found");
  int v15 = *((char *)a3 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  unint64_t v17 = v16 + 19;
  if (v16 + 19 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v18 = operator new(v20 + 1);
    a4[1] = v17;
    a4[2] = v21 | 0x8000000000000000;
    *a4 = v18;
  }
  else
  {
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    uint64_t v18 = a4;
    *((unsigned char *)a4 + 23) = v17;
    if (!v16) {
      goto LABEL_34;
    }
  }
  if (v15 >= 0) {
    unint64_t v22 = a3;
  }
  else {
    unint64_t v22 = *a3;
  }
  memmove(v18, v22, v16);
LABEL_34:
  strcpy((char *)v18 + v16, "/model.espresso.net");
  bundle_dir = EspressoLight::espresso_aot_plan::get_bundle_dir(this);
  p_int data = (const void **)&bundle_dir->__r_.__value_.__l.__data_;
  int v25 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
  if (v25 >= 0) {
    size_t size = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = bundle_dir->__r_.__value_.__l.__size_;
  }
  unint64_t v27 = size + 1;
  if (size + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v29 = v27 | 7;
    }
    uint64_t v30 = v29 + 1;
    p_dst = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 1;
    if (!size) {
      goto LABEL_48;
    }
  }
  if (v25 >= 0) {
    size_t v31 = p_data;
  }
  else {
    size_t v31 = *p_data;
  }
  memmove(p_dst, v31, size);
LABEL_48:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 47;
  int v32 = *((char *)a4 + 23);
  if (v32 >= 0) {
    size_t v33 = (const std::string::value_type *)a4;
  }
  else {
    size_t v33 = (const std::string::value_type *)*a4;
  }
  if (v32 >= 0) {
    std::string::size_type v34 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    std::string::size_type v34 = a4[1];
  }
  BOOL v35 = std::string::append(&__dst, v33, v34);
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  std::string::size_type v52 = v35->__r_.__value_.__r.__words[2];
  long long v51 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!*((void *)this + 153)) {
      goto LABEL_61;
    }
LABEL_56:
    char v49 = 4;
    strcpy((char *)__p, "/tmp");
    Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(&__dst, __p);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    uint64_t DirectoryPath = Espresso::SharedUtils::TemporaryDirectory::GetDirectoryPath((Espresso::SharedUtils::TemporaryDirectory *)&__dst);
    if (*(char *)(DirectoryPath + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)DirectoryPath, *(void *)(DirectoryPath + 8));
    }
    else
    {
      long long v38 = *(_OWORD *)DirectoryPath;
      v47.__r_.__value_.__r.__words[2] = *(void *)(DirectoryPath + 16);
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v38;
    }
    memset(&v44, 0, sizeof(v44));
    std::string::append[abi:ne180100]<char const*,0>(&v44, (std::string *)"model.espresso.net", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v44, (uint64_t)&v47, (std::__fs::filesystem::path *)&v45);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      std::string v46 = v45;
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_66;
    }
    std::string::__init_copy_ctor_external(&v46, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_69:
        memset(&v55, 0, sizeof(v55));
        std::string::append[abi:ne180100]<char const*,0>(&v55.__pn_, (std::string *)"model.mil", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100](&v55, (uint64_t)&v47, (std::__fs::filesystem::path *)&v44);
        if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          std::string v45 = v44;
          if ((SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_74;
          }
          goto LABEL_71;
        }
        std::string::__init_copy_ctor_external(&v45, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v44.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_74:
            (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 32))(v14, &v46);
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v40 = &v46;
            }
            else {
              uint64_t v40 = (std::string *)v46.__r_.__value_.__r.__words[0];
            }
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v44, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
            }
            else {
              std::string v44 = v47;
            }
            if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v41 = &v44;
            }
            else {
              size_t v41 = (std::string *)v44.__r_.__value_.__r.__words[0];
            }
            espresso_upgrade_to_mil(v40, (char *)v41);
          }
        }
        else if ((SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_74;
        }
LABEL_71:
        operator delete(v55.__pn_.__r_.__value_.__l.__data_);
        goto LABEL_74;
      }
    }
    else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_69;
    }
LABEL_66:
    operator delete(v44.__r_.__value_.__l.__data_);
    goto LABEL_69;
  }
  if (*((void *)this + 153)) {
    goto LABEL_56;
  }
LABEL_61:
  (*(void (**)(uint64_t, long long *))(*(void *)v14 + 32))(v14, &v51);
  if (*(void *)(a2 + 344) && !Espresso::AOT::AreSurfaceDescriptorsEnabled((Espresso::AOT *)a2, v39)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Input transforms aren't supported on CPU for non-surface blobs. Please enable surfaces by adding experimental.aot.enable_surface_desc to network properties.");
  }
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  int v42 = v54;
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
}

void sub_1924D6230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)&a44);
  if (*(char *)(v50 - 153) < 0) {
    operator delete(*(void **)(v50 - 176));
  }
  if (*(char *)(v49 + 23) < 0)
  {
    operator delete(*(void **)v49);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v50 - 144);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v50 - 144);
  _Unwind_Resume(a1);
}

void sub_1924D6490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_compiler::~espresso_aot_compiler(EspressoLight::espresso_aot_compiler *this)
{
  *(void *)this = &unk_1EE35F3A0;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 5);
    int8x8_t v5 = (void *)*((void *)this + 4);
    if (v4 != v3)
    {
      do
        Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)(v4 - 120));
      while (v4 != v3);
      int8x8_t v5 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v3;
    operator delete(v5);
  }

  Espresso::net_compiler::~net_compiler(this);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE35F3A0;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 5);
    int8x8_t v5 = (void *)*((void *)this + 4);
    if (v4 != v3)
    {
      do
        Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)(v4 - 120));
      while (v4 != v3);
      int8x8_t v5 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v3;
    operator delete(v5);
  }
  Espresso::net_compiler::~net_compiler(this);

  JUMPOUT(0x192FF16B0);
}

void EspressoLight::espresso_aot_compiler::build_segment()
{
}

void EspressoLight::espresso_aot_compiler::__forward_segment()
{
}

void EspressoLight::espresso_aot_plan::execute_sync(EspressoLight::espresso_aot_plan *this)
{
}

void EspressoLight::espresso_aot_plan::bind_external_input()
{
}

void Espresso::net_compiler_segment_based::segment_t::~segment_t(Espresso::net_compiler_segment_based::segment_t *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)*((void *)this + 9);
  if (v3)
  {
    do
    {
      unint64_t v7 = (void **)*v3;
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v7;
    }
    while (v7);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    operator delete(v4);
  }
  int8x8_t v5 = (void **)*((void *)this + 4);
  if (v5)
  {
    do
    {
      uint64_t v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      int8x8_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    operator delete(v6);
  }
}

{
  void *v2;

  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 16);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const*&,int &>(char *a1, void *a2, unsigned int *a3)
{
}

void std::__tree<std::__value_type<std::tuple<std::string,int,int>,std::string>,std::__map_value_compare<std::tuple<std::string,int,int>,std::__value_type<std::tuple<std::string,int,int>,std::string>,std::less<std::tuple<std::string,int,int>>,true>,std::allocator<std::__value_type<std::tuple<std::string,int,int>,std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<std::string,int,int>,std::string>,std::__map_value_compare<std::tuple<std::string,int,int>,std::__value_type<std::tuple<std::string,int,int>,std::string>,std::less<std::tuple<std::string,int,int>>,true>,std::allocator<std::__value_type<std::tuple<std::string,int,int>,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::tuple<std::string,int,int>,std::string>,std::__map_value_compare<std::tuple<std::string,int,int>,std::__value_type<std::tuple<std::string,int,int>,std::string>,std::less<std::tuple<std::string,int,int>>,true>,std::allocator<std::__value_type<std::tuple<std::string,int,int>,std::string>>>::destroy(a1, *(void *)(a2 + 8));
    if (*(char *)(a2 + 87) < 0)
    {
      operator delete(*(void **)(a2 + 64));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v4 = (void *)a2;
LABEL_6:
        operator delete(v4);
        return;
      }
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 32));
    uint64_t v4 = (void *)a2;
    goto LABEL_6;
  }
}

void Espresso::pass_run_return_t::~pass_run_return_t(Espresso::pass_run_return_t *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void Espresso::sequential_builder::~sequential_builder(Espresso::sequential_builder *this)
{
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)this + 136);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 79) & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    operator delete(*((void **)this + 7));
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
    int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v5) {
      return;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*((char *)this + 79) < 0) {
    goto LABEL_13;
  }
LABEL_10:
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v5) {
    return;
  }
LABEL_14:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)this + 136);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

uint64_t std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(120 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[120 * v3];
  unint64_t v9 = &v7[120 * v6];
  std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t>((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 120;
  uint64_t v12 = (Espresso::net_compiler_segment_based::segment_t *)*a1;
  uint64_t v11 = (Espresso::net_compiler_segment_based::segment_t *)a1[1];
  if (v11 == (Espresso::net_compiler_segment_based::segment_t *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 120;
    uint64_t v11 = (Espresso::net_compiler_segment_based::segment_t *)((char *)v11 - 120);
    std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t>((uint64_t)(a1 + 2), v8, (uint64_t)v11);
  }
  while (v11 != v12);
  size_t v13 = (Espresso::net_compiler_segment_based::segment_t *)*a1;
  uint64_t v11 = (Espresso::net_compiler_segment_based::segment_t *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      uint64_t v11 = (Espresso::net_compiler_segment_based::segment_t *)((char *)v11 - 120);
      Espresso::net_compiler_segment_based::segment_t::~segment_t(v11);
    }
    while (v11 != v13);
    uint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

void EspressoLight::tmp_assets_manager::~tmp_assets_manager(void ***this)
{
  uint64_t v2 = *this;
  if (!*((unsigned char *)this + 24))
  {
    unint64_t v3 = this[1];
    if (v2 != v3)
    {
      do
      {
        unint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
        int8x8_t v5 = v2;
        if (*((char *)v2 + 23) < 0) {
          int8x8_t v5 = *v2;
        }
        unint64_t v6 = [NSString stringWithUTF8String:v5];
        [v4 removeItemAtPath:v6 error:0];

        v2 += 3;
      }
      while (v2 != v3);
      uint64_t v2 = *this;
    }
  }
  if (v2)
  {
    unint64_t v7 = this[1];
    uint64_t v8 = v2;
    if (v7 != v2)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v2);
      uint64_t v8 = *this;
    }
    this[1] = v2;
    operator delete(v8);
  }
}

void std::__shared_ptr_emplace<Espresso::multi_head_aot_helper_t>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 32);

  std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(v2, v3);
}

void std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(a1, *(void *)(a2 + 8));
    unint64_t v4 = *(void **)(a2 + 80);
    if (v4) {
      operator delete(v4);
    }
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_6:
        int8x8_t v5 = (void *)a2;
LABEL_8:
        operator delete(v5);
        return;
      }
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(a2 + 32));
    int8x8_t v5 = (void *)a2;
    goto LABEL_8;
  }
}

void std::__shared_ptr_emplace<EspressoLight::espresso_aot_compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoLight::espresso_aot_compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380738;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<EspressoLight::espresso_aot_compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::optional<std::function<BOOL ()(MIL::IROperation const&)>>::~optional(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return a1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != a1)
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

void std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE37CD20;
  return result;
}

void std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CD20;
}

uint64_t std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT10Validators12EirValidator8ValidateERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS7_1"
                     "1char_traitsIcEENS7_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT10Validators12EirValidator8ValidateERKN3MIL9IRProgramERKNSt3__112basic_st"
                                "ringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT10Validators12EirValidator8ValidateERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT10Validators12EirValidator8ValidateERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

void E5AOT::E5BuilderForMIL::~E5BuilderForMIL(E5AOT::E5BuilderForMIL *this)
{
  *(void *)this = &unk_1EE326BF8;
  uint64_t v2 = (void **)*((void *)this + 12);
  if (v2)
  {
    do
    {
      unint64_t v6 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_14:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_14;
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  unint64_t v3 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(this + 40, *((char **)this + 7));
  unint64_t v4 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    operator delete(v4);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5AOT::E5BuilderForMIL *)((char *)this + 24));
  int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  uint64_t vars8;

  E5AOT::E5BuilderForMIL::~E5BuilderForMIL(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5AOT::E5BuilderForMIL::E5BuilderForMIL(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_1EE326BF8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *a3;
  unint64_t v7 = (void *)(a1 + 40);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::unordered_map(a1 + 40, a4);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 80, a5);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::AOT::ValidateE5RTProgram(&v17);
  unint64_t v9 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 72))(v10) + 16);
  while (1)
  {
    uint64_t v12 = (void *)*v12;
    if (!v12) {
      break;
    }
    if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v7, (uint64_t)(v12 + 2)))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v14 = std::string::append(&v19, ".");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v20);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

void sub_1924D73BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v28);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v27);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v25 + 24));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::SerializeToString(E5AOT::E5BuilderForMIL *this)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "SerializeToString not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
}

void sub_1924D74CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::SerializeToDisk(E5AOT::E5BuilderForMIL *a1)
{
}

void sub_1924D75C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    E5AOT::E5BuilderForMIL::SerializeToDisk();
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
    _Unwind_Resume(a1);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildProgram(E5AOT::E5BuilderForMIL *this)
{
}

void sub_1924D7A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v19 = *(void *)(v17 - 56);
  *(void *)(v17 - 56) = 0;
  if (!v19) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  _Unwind_Resume(exception_object);
}

void E5AOT::E5BuilderForMIL::BuildFunction(E5RT::E5FunctionBuilder *a1)
{
}

void sub_1924D8A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v51 - 201) < 0) {
    operator delete(*(void **)(v51 - 224));
  }
  std::unique_ptr<MIL::Attributes::BuildInfo>::~unique_ptr[abi:ne180100]((MIL::Attributes::BuildInfo **)(v51 - 256));
  std::__tree<std::string>::destroy(v51 - 200, *(char **)(v51 - 192));
  std::__tree<std::string>::destroy(v51 - 176, *(char **)(v51 - 168));
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v51 - 152);
  uint64_t v53 = *(void *)(v51 - 112);
  *(void *)(v51 - 112) = 0;
  if (v53)
  {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
    uint64_t v54 = *(void *)(v51 - 104);
    *(void *)(v51 - 104) = 0;
    if (!v54) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v54 = *(void *)(v51 - 104);
    *(void *)(v51 - 104) = 0;
    if (!v54) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildOperandsForFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v117 = std::string::append(&v137, " in program");
    long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v138);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
  }
  uint64_t v5 = v4;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  int v126 = (void *)a3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  uint64_t v119 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 128))(v5);
  unint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v8 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 40), a2);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  v138.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v138.__r_.__value_.__r.__words[1] = xmmword_192DAA350;
  strcpy(v138.__r_.__value_.__l.__data_, "FlexibleShapeInformation");
  uint64_t Attribute = MIL::IRObject::TryGetAttribute();
  operator delete(v138.__r_.__value_.__l.__data_);
  if (!Attribute)
  {
    uint64_t v11 = **v8;
    std::string v120 = (*v8)[1];
    if (v11 == v120) {
      goto LABEL_140;
    }
    goto LABEL_10;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  MIL::Attributes::FlexibleShapeInfo::Make();
  if (v138.__r_.__value_.__r.__words[0]) {
    operator new();
  }
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v11 = **v8;
  std::string v120 = (*v8)[1];
  if (v11 != v120)
  {
LABEL_10:
    BOOL v124 = v9 + 5;
    uint64_t v12 = v119 + 1;
    while (1)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = (void *)(*(uint64_t (**)(void))(*(void *)*v11 + 160))(*v11);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 176))(v13);
      std::operator+<char>();
      size_t v16 = std::string::append(&v133, ", ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v134.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
      int v19 = *(char *)(v18 + 23);
      if (v19 >= 0) {
        std::string v20 = (const std::string::value_type *)v18;
      }
      else {
        std::string v20 = *(const std::string::value_type **)v18;
      }
      if (v19 >= 0) {
        std::string::size_type v21 = *(unsigned __int8 *)(v18 + 23);
      }
      else {
        std::string::size_type v21 = *(void *)(v18 + 8);
      }
      unint64_t v22 = std::string::append(&v134, v20, v21);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      size_t v24 = std::string::append(&v137, "]: ");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v138.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v137.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          int v121 = v11;
          uint64_t v122 = v15;
          if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_26;
        }
      }
      else if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v134.__r_.__value_.__l.__data_);
      int v121 = v11;
      uint64_t v122 = v15;
      if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        uint64_t v28 = (void *)*v14;
        uint64_t v26 = v14 + 1;
        uint64_t v27 = v28;
        if (v28 != v26) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
LABEL_26:
      operator delete(v133.__r_.__value_.__l.__data_);
      uint64_t v29 = (void *)*v14;
      uint64_t v26 = v14 + 1;
      uint64_t v27 = v29;
      if (v29 != v26)
      {
        do
        {
LABEL_29:
          int v32 = (MIL::IRArgument **)v27[7];
          if ((MIL::IRArgument **)v27[8] == v32) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t Name = MIL::IRArgument::GetName(*v32);
          uint64_t v34 = Name;
          uint64_t v35 = *v12;
          if (!*v12) {
            goto LABEL_73;
          }
          int v36 = *(char *)(Name + 23);
          size_t v37 = v36 >= 0 ? *(unsigned __int8 *)(Name + 23) : *(void *)(Name + 8);
          long long v38 = v36 >= 0 ? (const void *)Name : *(const void **)Name;
          size_t v39 = v119 + 1;
          do
          {
            int v40 = *(char *)(v35 + 55);
            if (v40 >= 0) {
              size_t v41 = *(unsigned __int8 *)(v35 + 55);
            }
            else {
              size_t v41 = *(void *)(v35 + 40);
            }
            if (v40 >= 0) {
              int v42 = (const void *)(v35 + 32);
            }
            else {
              int v42 = *(const void **)(v35 + 32);
            }
            if (v37 >= v41) {
              size_t v43 = v41;
            }
            else {
              size_t v43 = v37;
            }
            int v44 = memcmp(v42, v38, v43);
            BOOL v45 = v41 < v37;
            if (v44) {
              BOOL v45 = v44 < 0;
            }
            BOOL v46 = !v45;
            if (v45) {
              std::string v47 = (uint64_t *)(v35 + 8);
            }
            else {
              std::string v47 = (uint64_t *)v35;
            }
            if (v46) {
              size_t v39 = (uint64_t *)v35;
            }
            uint64_t v35 = *v47;
          }
          while (*v47);
          if (v39 == v12) {
            goto LABEL_73;
          }
          int v48 = *((char *)v39 + 55);
          if (v48 >= 0) {
            size_t v49 = *((unsigned __int8 *)v39 + 55);
          }
          else {
            size_t v49 = v39[5];
          }
          if (v48 >= 0) {
            uint64_t v50 = v39 + 4;
          }
          else {
            uint64_t v50 = (const void *)v39[4];
          }
          if (v49 >= v37) {
            size_t v51 = v37;
          }
          else {
            size_t v51 = v49;
          }
          int v52 = memcmp(v38, v50, v51);
          BOOL v53 = v37 >= v49;
          if (v52) {
            BOOL v53 = v52 >= 0;
          }
          if (!v53)
          {
LABEL_73:
            a3 = (uint64_t)v126;
            if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v126, v34))
            {
              uint64_t v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Topologically incorrect op ordering in function. ", (const void **)&v138.__r_.__value_.__l.__data_, &v131);
              uint64_t v104 = std::string::append(&v131, "Argument ");
              long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
              v133.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v105;
              v104->__r_.__value_.__l.__size_ = 0;
              v104->__r_.__value_.__r.__words[2] = 0;
              v104->__r_.__value_.__r.__words[0] = 0;
              int v106 = *(char *)(v34 + 23);
              if (v106 >= 0) {
                int v107 = (const std::string::value_type *)v34;
              }
              else {
                int v107 = *(const std::string::value_type **)v34;
              }
              if (v106 >= 0) {
                std::string::size_type v108 = *(unsigned __int8 *)(v34 + 23);
              }
              else {
                std::string::size_type v108 = *(void *)(v34 + 8);
              }
              unint64_t v109 = std::string::append(&v133, v107, v108);
              long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              v134.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              uint64_t v111 = std::string::append(&v134, " consumed before it is produced.");
              long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
              v137.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v112;
              v111->__r_.__value_.__l.__size_ = 0;
              v111->__r_.__value_.__r.__words[2] = 0;
              v111->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v103, &v137);
              __cxa_throw(v103, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            goto LABEL_74;
          }
          uint64_t v54 = (MIL::IRValueType *)v39[7];
          std::__fs::filesystem::path v55 = v136;
          v132[0] = v135;
          v132[1] = v136;
          if (v136) {
            atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          E5AOT::E5BuilderForMIL::BuildOperand(a1, v34, v54, 0, 0, v132);
          v137.__r_.__value_.__r.__words[0] = v134.__r_.__value_.__r.__words[0];
          a3 = (uint64_t)v126;
          if (v134.__r_.__value_.__r.__words[0]) {
            operator new();
          }
          *(_OWORD *)&v137.__r_.__value_.__l.__data_ = 0uLL;
          v134.__r_.__value_.__r.__words[0] = 0;
          if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
          v134.__r_.__value_.__r.__words[0] = v34;
          unint64_t v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v126, v34, (uint64_t)&std::piecewise_construct, (long long **)&v134);
          long long v59 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
          if (v137.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v137.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v60 = (std::__shared_weak_count *)v58[6];
          *(_OWORD *)(v58 + 5) = v59;
          if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
            size_t size = (std::__shared_weak_count *)v137.__r_.__value_.__l.__size_;
            if (v137.__r_.__value_.__l.__size_)
            {
LABEL_88:
              if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
          else
          {
            size_t size = (std::__shared_weak_count *)v137.__r_.__value_.__l.__size_;
            if (v137.__r_.__value_.__l.__size_) {
              goto LABEL_88;
            }
          }
LABEL_74:
          uint64_t v56 = (void *)v27[1];
          if (v56)
          {
            do
            {
              size_t v57 = v56;
              uint64_t v56 = (void *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              size_t v57 = (void *)v27[2];
              BOOL v46 = *v57 == (void)v27;
              uint64_t v27 = v57;
            }
            while (!v46);
          }
          uint64_t v27 = v57;
        }
        while (v57 != v26);
      }
LABEL_27:
      uint64_t v30 = *(MIL::IRNamedValueType ***)v122;
      size_t v31 = *(MIL::IRNamedValueType ***)(v122 + 8);
      while (v30 != v31)
      {
        uint64_t v62 = MIL::IRNamedValueType::GetName(*v30);
        uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v30);
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((void *)a3, v62))
        {
          std::string::size_type v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Output operand \"", (const void **)&v138.__r_.__value_.__l.__data_, &v131);
          int v94 = *(char *)(v62 + 23);
          if (v94 >= 0) {
            size_t v95 = (const std::string::value_type *)v62;
          }
          else {
            size_t v95 = *(const std::string::value_type **)v62;
          }
          if (v94 >= 0) {
            std::string::size_type v96 = *(unsigned __int8 *)(v62 + 23);
          }
          else {
            std::string::size_type v96 = *(void *)(v62 + 8);
          }
          std::string::size_type v97 = std::string::append(&v131, v95, v96);
          long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          v133.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          uint64_t v99 = std::string::append(&v133, "\"");
          long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v134.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          uint64_t v101 = std::string::append(&v134, "already produced by an earlier op in the function.");
          long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          v137.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v93, &v137);
          __cxa_throw(v93, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v64 = *v7;
        uint64_t v65 = v7[1];
        if (*v7 != v65)
        {
          char v66 = *(unsigned char *)(v62 + 23);
          if (v66 >= 0) {
            uint64_t v67 = *(unsigned __int8 *)(v62 + 23);
          }
          else {
            uint64_t v67 = *(void *)(v62 + 8);
          }
          if (v66 >= 0) {
            uint64_t v68 = (const std::string::value_type *)v62;
          }
          else {
            uint64_t v68 = *(const std::string::value_type **)v62;
          }
          do
          {
            uint64_t v69 = *(unsigned __int8 *)(v64 + 23);
            if ((v69 & 0x80u) == 0) {
              uint64_t v70 = *(unsigned __int8 *)(v64 + 23);
            }
            else {
              uint64_t v70 = *(void *)(v64 + 8);
            }
            if (v70 == v67)
            {
              if ((v69 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v64, v68, *(void *)(v64 + 8))) {
                  goto LABEL_113;
                }
              }
              else
              {
                if (!*(unsigned char *)(v64 + 23)) {
                  goto LABEL_113;
                }
                uint64_t v71 = 0;
                while (*(unsigned __int8 *)(v64 + v71) == v68[v71])
                {
                  if (v69 == ++v71) {
                    goto LABEL_113;
                  }
                }
              }
            }
            v64 += 24;
          }
          while (v64 != v65);
          uint64_t v64 = v65;
LABEL_113:
          a3 = (uint64_t)v126;
        }
        if (v64 != v65)
        {
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          uint64_t v74 = v136;
          uint64_t v129 = v135;
          int v130 = v136;
          if (!v136) {
            goto LABEL_117;
          }
LABEL_116:
          atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_117;
        }
        if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v124, v62))
        {
          uint64_t v75 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 40), a2);
          if (!v75
            || (uint64_t v76 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v75 + 5, v62)) == 0)
          {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          uint64_t v72 = v76[5];
          uint64_t v73 = 1;
          uint64_t v74 = v136;
          uint64_t v129 = v135;
          int v130 = v136;
          if (v136) {
            goto LABEL_116;
          }
        }
        else
        {
          uint64_t v72 = 0;
          uint64_t v73 = 2;
          uint64_t v74 = v136;
          uint64_t v129 = v135;
          int v130 = v136;
          if (v136) {
            goto LABEL_116;
          }
        }
LABEL_117:
        E5AOT::E5BuilderForMIL::BuildOperand(a1, v62, Type, v73, v72, &v129);
        v137.__r_.__value_.__r.__words[0] = v134.__r_.__value_.__r.__words[0];
        if (v134.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = 0uLL;
        v134.__r_.__value_.__r.__words[0] = 0;
        if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
        v134.__r_.__value_.__r.__words[0] = v62;
        uint64_t v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, v62, (uint64_t)&std::piecewise_construct, (long long **)&v134);
        long long v78 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
        if (v137.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v137.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        int v79 = (std::__shared_weak_count *)v77[6];
        *(_OWORD *)(v77 + 5) = v78;
        if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
          size_t v80 = (std::__shared_weak_count *)v137.__r_.__value_.__l.__size_;
          if (!v137.__r_.__value_.__l.__size_) {
            goto LABEL_92;
          }
        }
        else
        {
          size_t v80 = (std::__shared_weak_count *)v137.__r_.__value_.__l.__size_;
          if (!v137.__r_.__value_.__l.__size_) {
            goto LABEL_92;
          }
        }
        if (!atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
LABEL_92:
        v30 += 2;
      }
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v138.__r_.__value_.__l.__data_);
        uint64_t v11 = v121 + 2;
        if (v121 + 2 == v120) {
          break;
        }
      }
      else
      {
        uint64_t v11 = v121 + 2;
        if (v121 + 2 == v120) {
          break;
        }
      }
    }
  }
LABEL_140:
  unint64_t v81 = (void *)*v119;
  if ((void *)*v119 != v119 + 1)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((void *)a3, (uint64_t)(v81 + 4)))
      {
        uint64_t v84 = (MIL::IRValueType *)v81[7];
        uint64_t v127 = v135;
        uint64_t v128 = v136;
        if (v136) {
          atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        E5AOT::E5BuilderForMIL::BuildOperand(a1, (uint64_t)(v81 + 4), v84, 0, 0, &v127);
        v138.__r_.__value_.__r.__words[0] = v137.__r_.__value_.__r.__words[0];
        if (v137.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = 0uLL;
        v137.__r_.__value_.__r.__words[0] = 0;
        uint64_t v85 = v128;
        if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
        v137.__r_.__value_.__r.__words[0] = (std::string::size_type)(v81 + 4);
        int v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (uint64_t)(v81 + 4), (uint64_t)&std::piecewise_construct, (long long **)&v137);
        long long v87 = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
        if (v138.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v138.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        std::string::size_type v88 = (std::__shared_weak_count *)v86[6];
        *(_OWORD *)(v86 + 5) = v87;
        if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
          int v89 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
          if (v138.__r_.__value_.__l.__size_)
          {
LABEL_162:
            if (!atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
        }
        else
        {
          int v89 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
          if (v138.__r_.__value_.__l.__size_) {
            goto LABEL_162;
          }
        }
      }
      int v82 = (void *)v81[1];
      if (v82)
      {
        do
        {
          uint64_t v83 = v82;
          int v82 = (void *)*v82;
        }
        while (v82);
      }
      else
      {
        do
        {
          uint64_t v83 = (void *)v81[2];
          BOOL v46 = *v83 == (void)v81;
          unint64_t v81 = v83;
        }
        while (!v46);
      }
      unint64_t v81 = v83;
    }
    while (v83 != v119 + 1);
  }
  uint64_t v91 = *v7;
  uint64_t v90 = v7[1];
  if (*v7 != v90)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v126, v91))
      {
        uint64_t v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        int v114 = std::string::append(&v137, " not encountered as output of any op.");
        long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v113, &v138);
        __cxa_throw(v113, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v91 += 24;
    }
    while (v91 != v90);
  }
  std::string::size_type v92 = v136;
  if (v136)
  {
    if (!atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

void sub_1924D9D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v44 - 105) < 0) {
    operator delete(*(void **)(v44 - 128));
  }
  if (*(char *)(v44 - 137) < 0)
  {
    operator delete(*(void **)(v44 - 160));
    if ((v43 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v43)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v42);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  unint64_t v3 = v2;
  int v4 = *((unsigned __int8 *)v2 + 23);
  if ((v4 & 0x80) == 0)
  {
    uint64_t v5 = v2;
    switch(*((unsigned char *)v2 + 23))
    {
      case 0xF:
        goto LABEL_107;
      case 0x18:
        if (*v2 != 0x736F695F4C4D3545 || v2[1] != 0x695F7570632E3631 || v2[2] != 0x65636E657265666ELL) {
          goto LABEL_76;
        }
        goto LABEL_129;
      case 0x19:
        if (*v2 == 0x736F695F4C4D3545
          && v2[1] == 0x5F736E6E622E3631
          && v2[2] == 0x636E657265666E69
          && *((unsigned char *)v2 + 24) == 101)
        {
          goto LABEL_123;
        }
        uint64_t v5 = v2;
        if (v4 == 15) {
          goto LABEL_107;
        }
        if (v4 != 24) {
          goto LABEL_111;
        }
LABEL_76:
        if (*v2 == 0x736F695F4C4D3545 && v2[1] == 0x695F656E612E3631 && v2[2] == 0x65636E657265666ELL) {
          goto LABEL_84;
        }
LABEL_97:
        uint64_t v5 = v2;
        if (v4 == 15) {
          goto LABEL_107;
        }
        if (v4 != 24) {
          goto LABEL_111;
        }
        BOOL v29 = *v2 == 0x736F695F4C4D3545 && v2[1] == 0x695F636C6D2E3631;
        if (!v29 || v2[2] != 0x65636E657265666ELL) {
          goto LABEL_111;
        }
        goto LABEL_135;
      case 0x1E:
        if (*v2 != 0x736F695F4C4D3545
          || v2[1] != 0x675F73706D2E3631
          || v2[2] != 0x666E695F68706172
          || *(void *)((char *)v2 + 22) != 0x65636E657265666ELL)
        {
          goto LABEL_97;
        }
        goto LABEL_132;
      default:
        goto LABEL_111;
    }
  }
  uint64_t v8 = v2[1];
  if (v8 != 24
    || (*(void *)*v2 == 0x736F695F4C4D3545 ? (BOOL v9 = *(void *)(*v2 + 8) == 0x695F7570632E3631) : (BOOL v9 = 0),
        v9 ? (BOOL v10 = *(void *)(*v2 + 16) == 0x65636E657265666ELL) : (BOOL v10 = 0),
        !v10))
  {
    if (v8 == 25)
    {
      if (*(void *)*v2 == 0x736F695F4C4D3545
        && *(void *)(*v2 + 8) == 0x5F736E6E622E3631
        && *(void *)(*v2 + 16) == 0x636E657265666E69
        && *(unsigned char *)(*v2 + 24) == 101)
      {
LABEL_123:
        E5AOT::E5BuilderForMIL::BuildBnnsInferenceOperation();
      }
      uint64_t v8 = v2[1];
    }
    if (v8 == 24)
    {
      if (*(void *)*v2 == 0x736F695F4C4D3545
        && *(void *)(*v2 + 8) == 0x695F656E612E3631
        && *(void *)(*v2 + 16) == 0x65636E657265666ELL)
      {
LABEL_84:
        E5AOT::E5BuilderForMIL::BuildAneInferenceOperation();
      }
      uint64_t v8 = v2[1];
    }
    if (v8 == 30)
    {
      if (*(void *)*v2 == 0x736F695F4C4D3545
        && *(void *)(*v2 + 8) == 0x675F73706D2E3631
        && *(void *)(*v2 + 16) == 0x666E695F68706172
        && *(void *)(*v2 + 22) == 0x65636E657265666ELL)
      {
LABEL_132:
        E5AOT::E5BuilderForMIL::BuildMpsGraphInferenceOperation();
      }
      uint64_t v8 = v2[1];
    }
    if (v8 == 24)
    {
      if (*(void *)*v2 == 0x736F695F4C4D3545
        && *(void *)(*v2 + 8) == 0x695F636C6D2E3631
        && *(void *)(*v2 + 16) == 0x65636E657265666ELL)
      {
LABEL_135:
        E5AOT::E5BuilderForMIL::BuildMlcInferenceOperation();
      }
      uint64_t v8 = v2[1];
    }
    if (v8 == 15)
    {
      uint64_t v5 = (uint64_t *)*v2;
LABEL_107:
      uint64_t v31 = *v5;
      uint64_t v32 = *(uint64_t *)((char *)v5 + 7);
      if (v31 == 0x736F695F4C4D3545 && v32 == 0x747361632E363173)
      {
        E5AOT::E5BuilderForMIL::BuildCastOperation();
      }
    }
LABEL_111:
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "E5ML_ios16.eir_inference"))
    {
      E5AOT::E5BuilderForMIL::BuildEirInferenceOperation();
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "E5ML_ios16.jit_call"))
    {
      E5AOT::E5BuilderForMIL::BuildJitCallOperation();
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "E5ML_ios16.e5_minimal_cpu"))
    {
      E5AOT::E5BuilderForMIL::BuildE5MinimalCpuOperation();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v35);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_129:

  E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation();
}

void sub_1924DA774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void E5AOT::E5BuilderForMIL::BuildOperand(uint64_t a1, uint64_t a2, MIL::IRValueType *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (E5Common::Utils::IsTensor((uint64_t)a3))
  {
    uint64_t v13 = MIL::IRValueType::AsTensorType(a3);
    uint64_t v14 = a6[1];
    v30[0] = *a6;
    v30[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorValueType>(a1, a2, v13, a4, a5, (uint64_t)v30);
  }
  if (E5Common::Utils::IsTensorBuffer(a3, v12))
  {
    int v16 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a3);
    long long v17 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v16);
    uint64_t v18 = a6[1];
    v29[0] = *a6;
    v29[1] = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorBufferValueType>(a1, a2, v17, a4, a5, (uint64_t)v29);
  }
  if (E5Common::Utils::IsPixelBuffer(a3, v15))
  {
    std::string v20 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a3);
    std::string::size_type v21 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v20);
    E5AOT::E5BuilderForMIL::BuildSurfaceOperand((int)v21, a2, v21);
  }
  if (!E5Common::Utils::IsState(a3, v19))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v27);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v22 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(a3);
  Wrappeduint64_t Type = MIL::IRStateValueType::GetWrappedType(v22);
  uint64_t v24 = *a6;
  long long v25 = (std::__shared_weak_count *)a6[1];
  v28[0] = v24;
  v28[1] = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5AOT::E5BuilderForMIL::BuildOperand(a1, a2, WrappedType, a4, a5, v28);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
}

void sub_1924DAAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::GetAllocOffsetFor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 40), a2);
  if (!v4
    || (uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v4 + 5, a3)) == 0)
  {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v5[5];
}

void E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorValueType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::AOT::BuildTensorDescriptor(a2, a3);
}

void sub_1924DAE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a10) {
    E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorValueType>();
  }
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
    uint64_t v17 = a16;
    if (!a16) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = a16;
    if (!a16) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  _Unwind_Resume(exception_object);
}

void E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorBufferValueType>(int a1, uint64_t a2, MIL::IRTensorBufferValueType *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::AOT::BuildTensorDescriptor(a2, this);
}

void sub_1924DB1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a10) {
    E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorValueType>();
  }
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
    uint64_t v17 = a16;
    if (!a16) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = a16;
    if (!a16) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  _Unwind_Resume(exception_object);
}

void E5AOT::E5BuilderForMIL::BuildSurfaceOperand(int a1, int a2, MIL::IRPixelBufferValueType *this)
{
}

void sub_1924DB4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorValueType>();
  }
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
    uint64_t v15 = a14;
    if (!a14) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v15 = a14;
    if (!a14) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

void E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation()
{
}

void sub_1924DB958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a10) {
    E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (!v31) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (!v31) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildBnnsInferenceOperation()
{
}

void sub_1924DC07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  MEMORY[0x192FF16B0](v37, 0x1012C40EC159624);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0)
  {
    operator delete(a32);
    uint64_t v40 = *(void *)(v38 - 88);
    *(void *)(v38 - 88) = 0;
    if (!v40) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v40 = *(void *)(v38 - 88);
    *(void *)(v38 - 88) = 0;
    if (!v40) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildAneInferenceOperation()
{
}

void sub_1924DC6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a9) {
    E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a32 < 0)
  {
    operator delete(__p);
    uint64_t v34 = *(void *)(v32 - 88);
    *(void *)(v32 - 88) = 0;
    if (!v34) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v34 = *(void *)(v32 - 88);
    *(void *)(v32 - 88) = 0;
    if (!v34) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildMpsGraphInferenceOperation()
{
}

void sub_1924DCDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a12) {
    E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a35 < 0)
  {
    operator delete(__p);
    uint64_t v37 = *(void *)(v35 - 96);
    *(void *)(v35 - 96) = 0;
    if (v37) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v37 = *(void *)(v35 - 96);
    *(void *)(v35 - 96) = 0;
    if (v37)
    {
LABEL_5:
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1924DCF18()
{
  uint64_t v1 = *(void *)(v0 - 96);
  *(void *)(v0 - 96) = 0;
  if (v1) {
    JUMPOUT(0x1924DCED8);
  }
  JUMPOUT(0x1924DCF10);
}

void E5AOT::E5BuilderForMIL::BuildMlcInferenceOperation()
{
}

void sub_1924DD298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a10) {
    E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (v31) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (v31)
    {
LABEL_5:
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1924DD34C()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 88) = 0;
  if (v1) {
    JUMPOUT(0x1924DD30CLL);
  }
  JUMPOUT(0x1924DD344);
}

void sub_1924DD360()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 88) = 0;
  if (v1) {
    JUMPOUT(0x1924DD30CLL);
  }
  JUMPOUT(0x1924DD344);
}

void E5AOT::E5BuilderForMIL::BuildCastOperation()
{
}

void sub_1924DD774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(a24);
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (!v31) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (!v31) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildEirInferenceOperation()
{
}

void sub_1924DDF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (*(char *)(v30 - 97) < 0)
  {
    operator delete(*(void **)(v30 - 120));
    uint64_t v32 = *(void *)(v30 - 96);
    *(void *)(v30 - 96) = 0;
    if (v32) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v32 = *(void *)(v30 - 96);
    *(void *)(v30 - 96) = 0;
    if (v32)
    {
LABEL_5:
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildJitCallOperation()
{
}

void sub_1924DE570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a9) {
    E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (!v31) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (!v31) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildE5MinimalCpuOperation()
{
}

void sub_1924DE9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a10) {
    E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (v31) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(v29 - 88);
    *(void *)(v29 - 88) = 0;
    if (v31)
    {
LABEL_5:
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1924DEA74()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 88) = 0;
  if (v1) {
    JUMPOUT(0x1924DEA34);
  }
  JUMPOUT(0x1924DEA6CLL);
}

void sub_1924DEA88()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 88) = 0;
  if (v1) {
    JUMPOUT(0x1924DEA34);
  }
  JUMPOUT(0x1924DEA6CLL);
}

void anonymous namespace'::GetOpAttrValue<std::string>(std::string *a1)
{
  uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute();
  MIL::IRValue::AsTensor(Attribute);
  MIL::IRValue::GetScalar<std::string>();
  if (SHIBYTE(v4) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a1->__r_.__value_.__r.__words[2] = v4;
  }
}

void sub_1924DEB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::GetOpAttrVectorValue<std::string>(uint64_t a1)
{
  uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
  if (Attribute)
  {
    MIL::IRValue::AsTensor(Attribute);
    uint64_t v3 = MIL::IRTensorValue::GetDataView<std::string>();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    if (v4)
    {
      uint64_t v5 = v3;
      uint64_t v6 = v4;
      unint64_t v7 = 0;
      do
      {
        while ((unint64_t)v7 >= *(void *)(a1 + 16))
        {
          unint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, v5);
          *(void *)(a1 + 8) = v7;
          v5 += 24;
          if (!--v6) {
            return;
          }
        }
        if (*(char *)(v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
        }
        else
        {
          long long v8 = *(_OWORD *)v5;
          v7->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
          *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        }
        *(void *)(a1 + 8) = ++v7;
        *(void *)(a1 + 8) = v7;
        v5 += 24;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

void sub_1924DEC18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1924DEC30(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  uint64_t v11 = (void *)*v7;
  BOOL v9 = v7 + 1;
  BOOL v10 = v11;
  if (v11 != v9)
  {
    do
    {
      uint64_t Name = MIL::IRArgument::GetName(*(MIL::IRArgument **)v10[7]);
      uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, Name);
      if (!v13) {
        goto LABEL_41;
      }
      uint64_t v14 = v13[6];
      uint64_t v39 = v13[5];
      uint64_t v40 = (std::__shared_weak_count *)v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      Parameteruint64_t Type = (E5Common::Utils *)MIL::IROperation::GetParameterType();
      if (E5Common::Utils::IsState(ParameterType, v16))
      {
        uint64_t v35 = v39;
        int v36 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a3 + 48))(a3, Name, &v35);
        uint64_t v17 = v36;
        if (!v36) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v37 = v39;
        uint64_t v38 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a3 + 32))(a3, Name, &v37);
        uint64_t v17 = v38;
        if (!v38)
        {
LABEL_16:
          uint64_t v18 = v40;
          if (v40) {
            goto LABEL_17;
          }
          goto LABEL_20;
        }
      }
      if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_16;
      }
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      uint64_t v18 = v40;
      if (v40)
      {
LABEL_17:
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
LABEL_20:
      int v19 = (void *)v10[1];
      if (v19)
      {
        do
        {
          std::string v20 = v19;
          int v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          std::string v20 = (void *)v10[2];
          BOOL v21 = *v20 == (void)v10;
          BOOL v10 = v20;
        }
        while (!v21);
      }
      BOOL v10 = v20;
    }
    while (v20 != v9);
  }
  unint64_t v22 = *(MIL::IRNamedValueType ***)v8;
  long long v23 = *(MIL::IRNamedValueType ***)(v8 + 8);
  if (v22 != v23)
  {
    while (1)
    {
      uint64_t v24 = MIL::IRNamedValueType::GetName(*v22);
      long long v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, v24);
      if (!v25) {
        break;
      }
      uint64_t v26 = v25[5];
      uint64_t v27 = v25[6];
      uint64_t v39 = v26;
      uint64_t v40 = (std::__shared_weak_count *)v27;
      if (v27)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
        uint64_t v33 = v26;
        uint64_t v34 = (std::__shared_weak_count *)v27;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v33 = v26;
        uint64_t v34 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a3 + 40))(a3, v24, &v33);
      uint64_t v28 = v34;
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      uint64_t Type = (E5Common::Utils *)MIL::IRNamedValueType::GetType(*v22);
      if (E5Common::Utils::IsState(Type, v30))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Returning MIL state types is not supported.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v31 = v40;
      if (v40)
      {
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v22 += 2;
      if (v22 == v23) {
        return;
      }
    }
LABEL_41:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
}

void sub_1924DF04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924DF060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1924DF07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1924DF0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924DF0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      BOOL v9 = a2;
    }
    else {
      BOOL v9 = *a2;
    }
    do
    {
      while (1)
      {
        BOOL v10 = (uint64_t **)v5;
        uint64_t v13 = (const void *)v5[4];
        uint64_t v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          int v16 = v11;
        }
        else {
          int v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_26;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return v10;
      }
      uint64_t v5 = v10[1];
    }
    while (v5);
    uint64_t v6 = v10 + 1;
LABEL_26:
    unint64_t v22 = operator new(0x40uLL);
    long long v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    BOOL v10 = a1 + 1;
    unint64_t v22 = operator new(0x40uLL);
    long long v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v23->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
LABEL_30:
  v22[7] = *(void *)(a3 + 24);
  *unint64_t v22 = 0;
  v22[1] = 0;
  v22[2] = v10;
  *uint64_t v6 = v22;
  uint64_t v24 = (uint64_t *)**a1;
  long long v25 = v22;
  if (v24)
  {
    *a1 = v24;
    long long v25 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v22;
}

void sub_1924DF278(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,Espresso::AOT::MemOptimizer::AllocInfo> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1924DF3A8(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924DF3BC(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,Espresso::AOT::MemOptimizer::AllocInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                long long v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (uint64_t i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    long long v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              int v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (uint64_t j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  int v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__construct_node_hash<std::pair<std::string const,Espresso::AOT::MemOptimizer::AllocInfo> const&>(a1, v10, a3, (uint64_t)v41);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      if (v29) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v41[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v29) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v41[0] = *v29;
  void *v29 = v41[0];
LABEL_89:
  int v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924DF7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__construct_node_hash<std::pair<std::string const,Espresso::AOT::MemOptimizer::AllocInfo> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x58uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  uint64_t result = std::unordered_map<std::string,unsigned long>::unordered_map((uint64_t)(v9 + 40), a3 + 24);
  *((void *)v9 + 10) = *(void *)(a3 + 64);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1924DF898(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_1924DF8B0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

MIL::Attributes::FlexibleShapeInfo *std::__shared_ptr_pointer<MIL::Attributes::FlexibleShapeInfo  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(MIL::Attributes::FlexibleShapeInfo **)(a1 + 24);
  if (result)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Attributes::FlexibleShapeInfo  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC399DLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC399DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC399DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC399DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<BnnsCpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BnnsCpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380428;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<BnnsCpuInferenceOpT>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<EirInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EirInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380348;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<EirInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v3 = *(void **)(a1 + 24);

  operator delete(v3);
}

void std::__shared_ptr_emplace<JitCallOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EEF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<JitCallOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EEF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<JitCallOpT>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<E5MinimalCpuOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5MinimalCpuOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380310;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<E5MinimalCpuOpT>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

uint64_t E5AOT::E5BuilderForMIL::SerializeToDisk()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t E5AOT::E5BuilderForMIL::BuildFunction()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorValueType>()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t std::pair<std::unordered_map<std::string,MIL::IRValueType const*>,std::vector<MIL::IRValueType const*>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3)
  {
    do
    {
      BOOL v6 = (void **)*v3;
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v6;
    }
    while (v6);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t anonymous namespace'::MakeBackendCompatibleType(uint64_t a1, E5Common::Utils *a2, unsigned __int16 *a3, uint64_t a4, void *a5)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  unint64_t v11 = (Espresso::AOT *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_192DAA350;
  strcpy(__p.__r_.__value_.__l.__data_, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v194)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    int v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
    if (v14[1] != *v14)
    {
      unint64_t v15 = 0;
      do
      {
        E5Common::Utils::GetMILShape(*(E5Common::Utils **)(__p.__r_.__value_.__r.__words[0] + 8 * v15), v13, &v201);
        uint64_t v16 = v202;
        if (v202 != v201)
        {
          unint64_t v17 = 0;
          uint64_t v16 = v201;
          do
          {
            if ((*(unsigned int (**)(void *))(**(void **)&v16[8 * v17] + 32))(*(void **)&v16[8 * v17]))
            {
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              int64_t v184 = std::string::append(&v193, " is variadic. Such models are not supported.");
              long long v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
              v191.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v185;
              v184->__r_.__value_.__l.__size_ = 0;
              v184->__r_.__value_.__r.__words[2] = 0;
              v184->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &v191);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
              __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
            }
            ++v17;
            uint64_t v16 = v201;
          }
          while (v17 < (v202 - v201) >> 3);
        }
        if (v16)
        {
          long long v202 = v16;
          operator delete(v16);
        }
        ++v15;
      }
      while (v15 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[1] - *v14) >> 3));
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  MIL::Attributes::FlexibleShapeInfo::Make();
  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    uint64_t v19 = MIL::IRValueType::AsTensorType(a2);
    int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v19);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 96))(v19);
    memset(&v193, 0, sizeof(v193));
    uint64_t v23 = *(const void **)v21;
    uint64_t v22 = *(void *)(v21 + 8);
    int64_t v24 = v22 - *(void *)v21;
    if (v22 != *(void *)v21)
    {
      if (v24 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      v193.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v22 - *(void *)v21);
      v193.__r_.__value_.__r.__words[2] = v193.__r_.__value_.__r.__words[0] + 8 * (v24 >> 3);
      memcpy(v193.__r_.__value_.__l.__data_, v23, v24);
      v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[2];
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 80))(v19);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v191, v25);
    uint64_t v26 = *((unsigned __int8 *)a3 + 23);
    int v27 = (char)v26;
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *((void *)a3 + 1);
    }
    if (v26 != 3)
    {
      memset(&__p, 0, sizeof(__p));
      int64_t v28 = v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0];
      if (v193.__r_.__value_.__l.__size_ != v193.__r_.__value_.__r.__words[0])
      {
LABEL_21:
        if (v28 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = operator new(v28);
        std::string::size_type v30 = (std::string::size_type)v29 + 8 * (v28 >> 3);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        __p.__r_.__value_.__r.__words[2] = v30;
        memset_pattern16(v29, &xmmword_192DBFE40, v28 & 0xFFFFFFFFFFFFFFF8);
        __p.__r_.__value_.__l.__size_ = v30;
      }
LABEL_23:
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_25;
    }
    if (v27 >= 0) {
      int v79 = a3;
    }
    else {
      int v79 = *(unsigned __int16 **)a3;
    }
    int v80 = *v79;
    int v81 = *((unsigned __int8 *)v79 + 2);
    if (v80 != 28257 || v81 != 101)
    {
      memset(&__p, 0, sizeof(__p));
      int64_t v28 = v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0];
      if (v193.__r_.__value_.__l.__size_ != v193.__r_.__value_.__r.__words[0]) {
        goto LABEL_21;
      }
      goto LABEL_23;
    }
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v190 = *(std::string *)a4;
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a5, a4))
    {
      uint64_t v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)a4);
      if (!v122) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unsigned int v123 = v122[40] != 0;
      goto LABEL_189;
    }
    std::string::size_type v134 = std::string::rfind((const std::string *)a4, 95, 0xFFFFFFFFFFFFFFFFLL);
    if (v134 == -1)
    {
      unsigned int v123 = 0;
      goto LABEL_189;
    }
    std::string::size_type v135 = *(unsigned __int8 *)(a4 + 23);
    int v136 = (char)v135;
    if ((v135 & 0x80u) != 0) {
      std::string::size_type v135 = *(void *)(a4 + 8);
    }
    if (v136 >= 0) {
      std::string v137 = (const void *)a4;
    }
    else {
      std::string v137 = *(const void **)a4;
    }
    if (v135 >= v134) {
      std::string::size_type v138 = v134;
    }
    else {
      std::string::size_type v138 = v135;
    }
    if (v138 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v138 >= 0x17)
    {
      uint64_t v160 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v138 | 7) != 0x17) {
        uint64_t v160 = v138 | 7;
      }
      uint64_t v161 = v160 + 1;
      p_p = (std::string *)operator new(v160 + 1);
      __p.__r_.__value_.__l.__size_ = v138;
      __p.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v138;
      p_p = &__p;
      if (!v138) {
        goto LABEL_275;
      }
    }
    memmove(p_p, v137, v138);
LABEL_275:
    p_p->__r_.__value_.__s.__data_[v138] = 0;
    if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a5, (uint64_t)&__p))
    {
      std::string::operator=(&v190, &__p);
      v162 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)&__p);
      if (!v162) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unsigned int v123 = v162[40] != 0;
    }
    else
    {
      unsigned int v123 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_189:
    BOOL v124 = v192;
    uint64_t v125 = Espresso::AOT::IRDataTypeToByteSize(v20);
    std::string::size_type v126 = v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0];
    if (v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0] < 0x10) {
      goto LABEL_190;
    }
    uint64_t v130 = v125;
    if ((*(uint64_t (**)(void))(**(void **)(v193.__r_.__value_.__l.__size_ - 8) + 16))(*(void *)(v193.__r_.__value_.__l.__size_ - 8)))
    {
      uint64_t v131 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v193.__r_.__value_.__l.__size_ - 8));
      uint64_t v132 = (*(uint64_t (**)(uint64_t))(*(void *)v131 + 48))(v131) * v130;
      if (v123)
      {
        uint64_t v133 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v193.__r_.__value_.__r.__words[0] + v126 - 16));
        LOBYTE(v132) = (*(uint64_t (**)(uint64_t))(*(void *)v133 + 48))(v133) * v132;
      }
      if ((v132 & 0x3F) != 0) {
        goto LABEL_314;
      }
      goto LABEL_190;
    }
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes((uint64_t *)&v205, v124);
    uint64_t EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v124);
    std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map((uint64_t)&v201, EnumeratedShapes);
    MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes((uint64_t *)&v199, v124);
    if (v204)
    {
      v188 = a5;
      uint64_t v189 = v130;
      uint64_t v148 = v203;
      if (v203)
      {
        unsigned int v149 = v123;
        while (1)
        {
          if (v148[39] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v148 + 2), *((void *)v148 + 3));
          }
          else {
            std::string __p = *(std::string *)(v148 + 16);
          }
          std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)v197, (uint64_t)(v148 + 40));
          if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v197, a4))break; {
          int v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v197, (unsigned __int8 *)a4);
          }
          if (!v150) {
            goto LABEL_333;
          }
          uint64_t v151 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*((void *)v150 + 6) - 8));
          char v152 = (*(uint64_t (**)(uint64_t))(*(void *)v151 + 48))(v151) * v189;
          if (v123)
          {
            long long v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v197, (unsigned __int8 *)a4);
            if (!v153) {
LABEL_333:
            }
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            uint64_t v154 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*((void *)v153 + 5) + v126 - 16));
            v152 *= (*(unsigned __int8 (**)(uint64_t))(*(void *)v154 + 48))(v154);
          }
          BOOL v155 = (v152 & 0x3F) != 0;
          uint64_t v156 = (char *)v198;
          if (v198) {
            goto LABEL_266;
          }
LABEL_258:
          uint64_t v157 = v197[0];
          v197[0] = 0;
          if (v157) {
            operator delete(v157);
          }
          unsigned int v123 = v149;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v155)
          {
            int v170 = 0;
            a5 = v188;
            unint64_t v171 = v200;
            if (!v200) {
              goto LABEL_306;
            }
LABEL_304:
            if (!atomic_fetch_add(&v171->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
LABEL_306:
            v178 = v203;
            if (v203)
            {
              do
              {
                uint64_t v179 = *(char **)v178;
                std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)(v178 + 16));
                operator delete(v178);
                v178 = v179;
              }
              while (v179);
            }
            v180 = v201;
            long long v201 = 0;
            if (v180) {
              operator delete(v180);
            }
            v181 = v206;
            if (v206 && !atomic_fetch_add(&v206->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
            if (!v170)
            {
LABEL_314:
              Espresso::AOT::Make64ByteAlignmentsVec((uint64_t *)&v193, v123, &__p);
              if (v123)
              {
                if (v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0] == 16)
                {
                  uint64_t v182 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)&v190);
                  if (v182)
                  {
                    if (v182[40]) {
                      v182[40] = 0;
                    }
                  }
                }
              }
LABEL_194:
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v190.__r_.__value_.__l.__data_);
              }
LABEL_25:
              uint64_t v31 = MIL::IRTensorValueType::MakeWithShape();
              unint64_t v32 = (void **)v191.__r_.__value_.__r.__words[2];
              if (v191.__r_.__value_.__r.__words[2])
              {
                do
                {
                  while (1)
                  {
                    uint64_t v33 = (void **)*v32;
                    int8x8_t v34 = (std::__shared_weak_count *)v32[6];
                    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                      std::__shared_weak_count::__release_weak(v34);
                    }
                    if (*((char *)v32 + 39) < 0) {
                      break;
                    }
                    operator delete(v32);
                    unint64_t v32 = v33;
                    if (!v33) {
                      goto LABEL_33;
                    }
                  }
                  operator delete(v32[2]);
                  operator delete(v32);
                  unint64_t v32 = v33;
                }
                while (v33);
              }
LABEL_33:
              unint64_t v35 = (void *)v191.__r_.__value_.__r.__words[0];
              v191.__r_.__value_.__r.__words[0] = 0;
              if (v35) {
                operator delete(v35);
              }
              uint8x8_t v36 = (void *)v193.__r_.__value_.__r.__words[0];
              if (v193.__r_.__value_.__r.__words[0])
              {
                v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
                goto LABEL_237;
              }
              goto LABEL_238;
            }
LABEL_190:
            memset(&__p, 0, sizeof(__p));
            int64_t v127 = v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0];
            if (v193.__r_.__value_.__l.__size_ != v193.__r_.__value_.__r.__words[0])
            {
              if (v127 < 0) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v128 = operator new(v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0]);
              std::string::size_type v129 = (std::string::size_type)v128 + 8 * (v127 >> 3);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
              __p.__r_.__value_.__r.__words[2] = v129;
              memset_pattern16(v128, &xmmword_192DBFE40, v127 & 0xFFFFFFFFFFFFFFF8);
              __p.__r_.__value_.__l.__size_ = v129;
            }
            goto LABEL_194;
          }
          uint64_t v148 = *(char **)v148;
          if (!v148) {
            goto LABEL_281;
          }
        }
        BOOL v155 = 1;
        uint64_t v156 = (char *)v198;
        if (!v198) {
          goto LABEL_258;
        }
        do
        {
LABEL_266:
          v158 = *(char **)v156;
          uint64_t v159 = (void *)*((void *)v156 + 5);
          if (v159)
          {
            *((void *)v156 + 6) = v159;
            operator delete(v159);
          }
          if (v156[39] < 0) {
            operator delete(*((void **)v156 + 2));
          }
          operator delete(v156);
          uint64_t v156 = v158;
        }
        while (v158);
        goto LABEL_258;
      }
LABEL_281:
      uint64_t v163 = v205;
      a5 = v188;
      uint64_t v130 = v189;
      if (!v205)
      {
LABEL_290:
        uint64_t v169 = v199;
        if (!v199)
        {
LABEL_319:
          int v170 = 1;
          unint64_t v171 = v200;
          if (v200) {
            goto LABEL_304;
          }
          goto LABEL_306;
        }
        goto LABEL_295;
      }
    }
    else
    {
      uint64_t v163 = v205;
      if (!v205)
      {
        uint64_t v169 = v199;
        if (!v199) {
          goto LABEL_303;
        }
LABEL_295:
        v172 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v169, a4);
        if (!v172
          || (int v173 = *(_DWORD *)(v172[6] - 8),
              (uint64_t v174 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v199, a4)) == 0))
        {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (v173 == *(_DWORD *)(v174[6] - 4))
        {
          v175 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v199, a4);
          if (!v175) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          int v176 = v130 * *(_DWORD *)(v175[6] - 8);
          if (v123)
          {
            int v177 = *(_DWORD *)(*std::unordered_map<std::string,std::vector<std::pair<int,int>>>::at(v199, a4) + v126 - 16);
            if (v177 != *(_DWORD *)(*std::unordered_map<std::string,std::vector<std::pair<int,int>>>::at(v199, a4)
                                   + v126
                                   - 12))
              goto LABEL_303;
            v176 *= *(_DWORD *)(*std::unordered_map<std::string,std::vector<std::pair<int,int>>>::at(v199, a4)
                              + v126
                              - 16);
          }
          if ((v176 & 0x3F) == 0) {
            goto LABEL_319;
          }
        }
LABEL_303:
        int v170 = 0;
        unint64_t v171 = v200;
        if (!v200) {
          goto LABEL_306;
        }
        goto LABEL_304;
      }
    }
    if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v163, a4))goto LABEL_303; {
    uint64_t v164 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v205, a4);
    }
    if (v164)
    {
      uint64_t v165 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v164[6] - 8));
      uint64_t v166 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 48))(v165) * v130;
      if (!v123) {
        goto LABEL_289;
      }
      uint64_t v167 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v205, a4);
      if (v167)
      {
        uint64_t v168 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v167[5] + v126 - 16));
        LOBYTE(v166) = (*(uint64_t (**)(uint64_t))(*(void *)v168 + 48))(v168) * v166;
LABEL_289:
        if ((v166 & 0x3F) != 0) {
          goto LABEL_303;
        }
        goto LABEL_290;
      }
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!E5Common::Utils::IsTensorBuffer(a2, v18))
  {
    if (!E5Common::Utils::IsPixelBuffer(a2, v37))
    {
      if (E5Common::Utils::IsState(a2, v70))
      {
        uint64_t v83 = MIL::IRValueType::AsStateType(a2);
        uint64_t v84 = *((unsigned __int8 *)a3 + 23);
        int v85 = (char)v84;
        if ((v84 & 0x80u) != 0) {
          uint64_t v84 = *((void *)a3 + 1);
        }
        uint64_t v31 = v83;
        switch(v84)
        {
          case 3:
            if (v85 >= 0) {
              int v86 = a3;
            }
            else {
              int v86 = *(unsigned __int16 **)a3;
            }
            int v87 = *v86;
            int v88 = *((unsigned __int8 *)v86 + 2);
            BOOL v89 = v87 == 28257;
            int v90 = 101;
            goto LABEL_167;
          case 8:
            if (v85 >= 0) {
              std::string v120 = a3;
            }
            else {
              std::string v120 = *(void **)a3;
            }
            if (*v120 != 0x6C6C61635F74696ALL) {
              goto LABEL_184;
            }
            goto LABEL_238;
          case 9:
            if (v85 >= 0) {
              uint64_t v113 = a3;
            }
            else {
              uint64_t v113 = *(unsigned __int16 **)a3;
            }
            uint64_t v114 = *(void *)v113;
            int v88 = *((unsigned __int8 *)v113 + 8);
            BOOL v89 = v114 == 0x706172675F73706DLL;
            int v90 = 104;
LABEL_167:
            if (!v89 || v88 != v90) {
              goto LABEL_184;
            }
            goto LABEL_238;
          case 14:
            if (v85 >= 0) {
              unint64_t v116 = (uint64_t *)a3;
            }
            else {
              unint64_t v116 = *(uint64_t **)a3;
            }
            uint64_t v117 = *v116;
            uint64_t v118 = *(uint64_t *)((char *)v116 + 6);
            if (v117 != 0x6D696E696D5F3565 || v118 != 0x7570635F6C616D69) {
              goto LABEL_184;
            }
            goto LABEL_238;
          default:
LABEL_184:
            int v121 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::logic_error::logic_error(v121, &__p);
            v121->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            __cxa_throw(v121, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
      }
      v187 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v187, "Found unsupported type for MakeBackendCompatibleType.");
      v187->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(v187, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
    uint64_t v71 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    uint64_t v31 = MIL::IRMemoryLayoutValueType::AsPixelBufferType(v71);
    uint64_t v72 = *((unsigned __int8 *)a3 + 23);
    int v73 = (char)v72;
    if ((v72 & 0x80u) != 0) {
      uint64_t v72 = *((void *)a3 + 1);
    }
    switch(v72)
    {
      case 11:
        if (v73 >= 0) {
          std::string::size_type v97 = (uint64_t *)a3;
        }
        else {
          std::string::size_type v97 = *(uint64_t **)a3;
        }
        uint64_t v98 = *v97;
        uint64_t v99 = *(uint64_t *)((char *)v97 + 3);
        if (v98 == 0x5F63697373616C63 && v99 == 0x7570635F63697373) {
          goto LABEL_238;
        }
        break;
      case 8:
        if (v73 >= 0) {
          std::string::size_type v96 = a3;
        }
        else {
          std::string::size_type v96 = *(void **)a3;
        }
        if (*v96 == 0x6C6C61635F74696ALL) {
          goto LABEL_238;
        }
        break;
      case 3:
        uint64_t v74 = v73 >= 0 ? a3 : *(unsigned __int16 **)a3;
        if (*v74 == 28257 && *((unsigned char *)v74 + 2) == 101) {
          goto LABEL_238;
        }
        int v76 = *v74;
        int v77 = *((unsigned __int8 *)v74 + 2);
        if (v76 == 26981 && v77 == 114) {
          goto LABEL_238;
        }
        break;
    }
    uint64_t v101 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(v101, &__p);
    v101->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v101, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  unint64_t v38 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  unint64_t v39 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v38);
  MIL::IRTensorBufferValueType::GetDataType(v39);
  uint64_t Shape = MIL::IRTensorBufferValueType::GetShape(v39);
  long long v201 = 0;
  long long v202 = 0;
  int v203 = 0;
  int v42 = *(const void **)Shape;
  uint64_t v41 = *(void *)(Shape + 8);
  int64_t v43 = v41 - *(void *)Shape;
  if (v41 != *(void *)Shape)
  {
    if (v43 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v201 = (char *)operator new(v41 - *(void *)Shape);
    long long v202 = v201;
    uint64_t v44 = &v201[8 * (v43 >> 3)];
    int v203 = v44;
    memcpy(v201, v42, v43);
    long long v202 = v44;
  }
  uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides(v39);
  memset(&v191, 0, sizeof(v191));
  std::string v47 = *(const void **)Strides;
  uint64_t v46 = *(void *)(Strides + 8);
  int64_t v48 = v46 - *(void *)Strides;
  if (v46 != *(void *)Strides)
  {
    if (v48 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v46 - *(void *)Strides);
    v191.__r_.__value_.__r.__words[2] = v191.__r_.__value_.__r.__words[0] + 8 * (v48 >> 3);
    memcpy(v191.__r_.__value_.__l.__data_, v47, v48);
    v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[2];
  }
  uint64_t InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v39);
  memset(&v193, 0, sizeof(v193));
  size_t v51 = *(const void **)InterleaveFactors;
  uint64_t v50 = *(void *)(InterleaveFactors + 8);
  int64_t v52 = v50 - *(void *)InterleaveFactors;
  if (v50 != *(void *)InterleaveFactors)
  {
    if (v52 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v193.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v50 - *(void *)InterleaveFactors);
    v193.__r_.__value_.__r.__words[2] = v193.__r_.__value_.__r.__words[0] + 8 * (v52 >> 3);
    memcpy(v193.__r_.__value_.__l.__data_, v51, v52);
    v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[2];
  }
  uint64_t Attributes = MIL::IRTensorBufferValueType::GetAttributes(v39);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&__p, Attributes);
  BOOL HasUnknownDims = Espresso::AOT::ShapeHasUnknownDims(&v201);
  uint64_t v55 = MIL::IRTensorBufferValueType::GetStrides(v39);
  uint64_t v56 = *(MIL::IRProperty ***)v55;
  size_t v57 = *(MIL::IRProperty ***)(v55 + 8);
  if (*(MIL::IRProperty ***)v55 != v57)
  {
    if (HasUnknownDims)
    {
      while (!MIL::IRProperty::TryAsConstant(*v56))
      {
        if (++v56 == v57) {
          goto LABEL_54;
        }
      }
      v186 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v186, "Strides must be unknown if there is any unknown dimension.");
    }
    else
    {
      while (MIL::IRProperty::TryAsConstant(*v56))
      {
        if (++v56 == v57) {
          goto LABEL_54;
        }
      }
      v186 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v186, "Strides must be constant if dimensions are all constant.");
    }
LABEL_326:
    v186->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v186, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
LABEL_54:
  uint64_t v58 = MIL::IRTensorBufferValueType::GetInterleaveFactors(v39);
  long long v59 = *(MIL::IRProperty ***)v58;
  uint64_t v60 = *(MIL::IRProperty ***)(v58 + 8);
  if (*(MIL::IRProperty ***)v58 != v60)
  {
    if (HasUnknownDims)
    {
      while (1)
      {
        uint64_t v61 = *v59;
        if (!MIL::IRProperty::TryAsConstant(*v59)) {
          goto LABEL_322;
        }
        uint64_t v62 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v61);
        if (MIL::IRConstantProperty::GetUInt8ScalarValue(v62) != 1) {
          break;
        }
        if (++v59 == v60) {
          goto LABEL_62;
        }
      }
      v186 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v186, "interleave_factors must be all 1s.");
    }
    else
    {
      while (MIL::IRProperty::TryAsConstant(*v59))
      {
        if (++v59 == v60) {
          goto LABEL_62;
        }
      }
LABEL_322:
      v186 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v186, "interleave_factors must be constant.");
    }
    goto LABEL_326;
  }
LABEL_62:
  uint64_t v63 = *((unsigned __int8 *)a3 + 23);
  int v64 = (char)v63;
  if ((v63 & 0x80u) != 0) {
    uint64_t v63 = *((void *)a3 + 1);
  }
  if (!HasUnknownDims)
  {
    if (v63 == 11)
    {
      if (v64 >= 0) {
        unint64_t v109 = (uint64_t *)a3;
      }
      else {
        unint64_t v109 = *(uint64_t **)a3;
      }
      uint64_t v110 = *v109;
      uint64_t v111 = *(uint64_t *)((char *)v109 + 3);
      if (v110 != 0x5F63697373616C63 || v111 != 0x7570635F63697373) {
        goto LABEL_220;
      }
    }
    else
    {
      if (v63 != 3)
      {
LABEL_220:
        uint64_t v31 = MIL::IRTensorBufferValueType::MakeWithShape();
        goto LABEL_221;
      }
      if (v64 >= 0) {
        uint64_t v91 = a3;
      }
      else {
        uint64_t v91 = *(unsigned __int16 **)a3;
      }
      if (*v91 == 28257 && *((unsigned char *)v91 + 2) == 101)
      {
        Espresso::AOT::MakeAneCompatibleStrides(v11, v39, &v190);
        goto LABEL_217;
      }
      int v93 = *v91;
      int v94 = *((unsigned __int8 *)v91 + 2);
      if (v93 != 26981 || v94 != 114) {
        goto LABEL_220;
      }
    }
    Espresso::AOT::MakeDefaultStrides(v11, (uint64_t *)&v201, (uint64_t *)&v193, &v190);
LABEL_217:
    if (v191.__r_.__value_.__r.__words[0])
    {
      v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[0];
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    std::string v191 = v190;
    goto LABEL_220;
  }
  if (v63 == 3)
  {
    if (v64 >= 0) {
      long long v102 = a3;
    }
    else {
      long long v102 = *(unsigned __int16 **)a3;
    }
    int v103 = *v102;
    int v104 = *((unsigned __int8 *)v102 + 2);
    if (v103 != 26981 || v104 != 114) {
      goto LABEL_74;
    }
LABEL_148:
    memset(&v190, 0, sizeof(v190));
    uint64_t v106 = v202 - v201;
    if (v202 != v201)
    {
      if (v106 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int v107 = operator new(v202 - v201);
      std::string::size_type v108 = (std::string::size_type)v107 + 8 * (v106 >> 3);
      v190.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
      v190.__r_.__value_.__r.__words[2] = v108;
      memset_pattern16(v107, &xmmword_192DBFE40, v106 & 0xFFFFFFFFFFFFFFF8);
      v190.__r_.__value_.__l.__size_ = v108;
    }
    uint64_t v69 = MIL::IRTensorValueType::MakeWithShape();
    goto LABEL_152;
  }
  if (v63 == 11)
  {
    uint64_t v65 = v64 >= 0 ? a3 : *(unsigned __int16 **)a3;
    uint64_t v66 = *(void *)v65;
    uint64_t v67 = *(void *)((char *)v65 + 3);
    if (v66 == 0x5F63697373616C63 && v67 == 0x7570635F63697373) {
      goto LABEL_148;
    }
  }
LABEL_74:
  Espresso::AOT::Make64ByteAlignmentsVec((uint64_t *)&v201, 0, &v190);
  uint64_t v69 = MIL::IRTensorBufferValueType::MakeWithShape();
LABEL_152:
  uint64_t v31 = v69;
  if (v190.__r_.__value_.__r.__words[0])
  {
    v190.__r_.__value_.__l.__size_ = v190.__r_.__value_.__r.__words[0];
    operator delete(v190.__r_.__value_.__l.__data_);
  }
LABEL_221:
  uint64_t v140 = (void **)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    do
    {
      while (1)
      {
        size_t v141 = (void **)*v140;
        int v142 = (std::__shared_weak_count *)v140[6];
        if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
        if (*((char *)v140 + 39) < 0) {
          break;
        }
        operator delete(v140);
        uint64_t v140 = v141;
        if (!v141) {
          goto LABEL_229;
        }
      }
      operator delete(v140[2]);
      operator delete(v140);
      uint64_t v140 = v141;
    }
    while (v141);
  }
LABEL_229:
  BOOL v143 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v143) {
    operator delete(v143);
  }
  if (v193.__r_.__value_.__r.__words[0])
  {
    v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (v191.__r_.__value_.__r.__words[0])
  {
    v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[0];
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  uint8x8_t v36 = v201;
  if (v201)
  {
    long long v202 = v201;
LABEL_237:
    operator delete(v36);
  }
LABEL_238:
  BOOL v144 = v192;
  long long v192 = 0;
  if (v144)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v144);
    MEMORY[0x192FF16B0]();
  }
  v145 = v195;
  if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
  return v31;
}

void sub_1924E1560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,MIL::Attributes::FlexibleShapeInfo *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a18);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100](&a27);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 40);
  if (v2)
  {
    do
    {
      int8x8_t v5 = *(char **)v2;
      BOOL v6 = (void *)*((void *)v2 + 5);
      if (v6)
      {
        *((void *)v2 + 6) = v6;
        operator delete(v6);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::unordered_map<std::string,std::vector<std::pair<int,int>>>::at(void *a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 5;
}

void anonymous namespace'::ValidateShapeOfMILType(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "MIL program has non-constant (dynamic) shapes for external input but FlexibleShapeInformation attribute is missing. E5 function will be produced with unknown input shapes and cannot be run without reshaping first.", buf, 2u);
}

{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "MIL program has non-constant (dynamic) shapes with FlexibleShapeInformation attribute. But, it misses Enumerated Shape or Range Shape Config. This may cause problems with some backends. Please consult MIL Framework or milPython on adding this to the MIL text.", buf, 2u);
}

void *Espresso::AOT::EvaluatorClassic::EvaluatorClassic(void *a1, long long *a2)
{
  uint64_t v4 = Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(a1) + 1;
  Espresso::AOT::AbstractValidator::AbstractValidator(v4);
  *a1 = &unk_1EE36B120;
  a1[1] = &unk_1EE36B168;
  int8x8_t v5 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    a1[4] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[5] = 0;
  return a1;
}

{
  void *v4;
  std::string *v5;
  long long v6;

  uint64_t v4 = Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(a1) + 1;
  Espresso::AOT::AbstractValidator::AbstractValidator(v4);
  *a1 = &unk_1EE36B120;
  a1[1] = &unk_1EE36B168;
  int8x8_t v5 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    a1[4] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[5] = 0;
  return a1;
}

void sub_1924E1ADC(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractValidator::~AbstractValidator(v2);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void sub_1924E1AF8(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void sub_1924E1BC4(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractValidator::~AbstractValidator(v2);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void sub_1924E1BE0(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::EvaluatorClassic::Validate()
{
}

void sub_1924E1FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'Espresso::AOT::EvaluatorClassic::Validate()
{
}

void Espresso::AOT::EvaluatorClassic::EstimateCost(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 40)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("EstimateCost can only be called after Validate");
  }
  uint64_t v4 = (const MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  int8x8_t v5 = **v4;
  for (uint64_t i = (*v4)[1]; v5 != i; v5 += 2)
  {
    if (!Espresso::AOT::EvaluatorClassicStates::OperationIsValid(*(int8x8_t **)(a1 + 40), *v5)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Trying to get cost of an invalid op");
    }
  }
  int v73 = Espresso::AOT::BackendNameToEspressoPlatform((uint64_t *)(a1 + 16));
  Networuint64_t k = (void *)Espresso::AOT::EvaluatorClassicStates::GetNetwork(*(Espresso::AOT::EvaluatorClassicStates **)(a1 + 40));
  unint64_t v8 = (const MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  unint64_t v9 = **v8;
  uint64_t v70 = (*v8)[1];
  if (v9 == v70) {
LABEL_77:
  }
    operator new();
  uint64_t v69 = a1;
  uint64_t v10 = Network + 17;
  unint64_t v11 = __p;
  double v12 = 0.0;
  uint64_t v72 = Network;
  int v76 = Network + 17;
LABEL_8:
  uint64_t v71 = v9;
  uint64_t OpMappedLayers = Espresso::AOT::EvaluatorClassicStates::GetOpMappedLayers(*(Espresso::AOT::EvaluatorClassicStates **)(v69 + 40), *v9);
  unint64_t v15 = *(unint64_t **)OpMappedLayers;
  int v14 = *(unint64_t **)(OpMappedLayers + 8);
  for (j = v14; ; int v14 = j)
  {
    if (v15 == v14)
    {
      unint64_t v9 = v71 + 2;
      if (v71 + 2 == v70) {
        goto LABEL_77;
      }
      goto LABEL_8;
    }
    unint64_t v17 = *v15;
    uint64_t v18 = Network[4];
    if (*v15 >= (Network[5] - v18) >> 4) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t m = *(void *)(v18 + 16 * v17);
    int v86 = 0;
    int v87 = 0;
    int v88 = 0;
    int8x8_t v20 = (int8x8_t)Network[8];
    if (!*(void *)&v20) {
      goto LABEL_78;
    }
    uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      unint64_t v22 = v17;
      if (v17 >= *(void *)&v20) {
        unint64_t v22 = v17 % *(void *)&v20;
      }
    }
    else
    {
      unint64_t v22 = (*(void *)&v20 - 1) & v17;
    }
    uint64_t v23 = *(void **)(Network[7] + 8 * v22);
    if (!v23 || (int64_t v24 = (void *)*v23) == 0) {
LABEL_78:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    uint64_t v75 = v15;
    if (v21.u32[0] < 2uLL)
    {
      uint64_t v25 = *(void *)&v20 - 1;
      while (1)
      {
        uint64_t v27 = v24[1];
        if (v17 == v27)
        {
          if (v24[2] == v17) {
            goto LABEL_34;
          }
        }
        else if ((v27 & v25) != v22)
        {
          goto LABEL_78;
        }
        int64_t v24 = (void *)*v24;
        if (!v24) {
          goto LABEL_78;
        }
      }
    }
    while (1)
    {
      unint64_t v26 = v24[1];
      if (v17 == v26) {
        break;
      }
      if (v26 >= *(void *)&v20) {
        v26 %= *(void *)&v20;
      }
      if (v26 != v22) {
        goto LABEL_78;
      }
LABEL_24:
      int64_t v24 = (void *)*v24;
      if (!v24) {
        goto LABEL_78;
      }
    }
    if (v24[2] != v17) {
      goto LABEL_24;
    }
LABEL_34:
    uint64_t v29 = (unsigned __int8 *)v24[3];
    int64_t v28 = (unsigned __int8 *)v24[4];
    int v77 = v28;
    for (uint64_t k = m; v29 != v28; v29 += 24)
    {
      int v42 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v10, v29);
      if (!v42) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v43 = *((void *)v42 + 5);
      *unint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      long long v44 = *(_OWORD *)(v43 + 24);
      long long v81 = *(_OWORD *)(v43 + 8);
      long long v82 = v44;
      uint64_t v83 = *(void *)(v43 + 40);
      if (v11 == (void **)(v43 + 48))
      {
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        size_t v49 = 0;
        BOOL v53 = v87;
        int64_t v52 = v88;
        if (v87 >= v88) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v46 = *(unsigned char **)(v43 + 48);
        BOOL v45 = *(unsigned char **)(v43 + 56);
        size_t v47 = v45 - v46;
        uint64_t v48 = (v45 - v46) >> 2;
        if (v45 == v46)
        {
          uint64_t v50 = 0;
          size_t v49 = 0;
          uint64_t v51 = 4 * v48;
          __p[1] = (void *)(4 * v48);
          BOOL v53 = v87;
          int64_t v52 = v88;
          if (v87 >= v88) {
            goto LABEL_56;
          }
        }
        else
        {
          if ((v47 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          size_t v49 = (char *)operator new(v45 - v46);
          __p[0] = v49;
          __p[1] = v49;
          uint64_t v50 = &v49[4 * v48];
          int v85 = v50;
          memcpy(v49, v46, v47);
          uint64_t v51 = (uint64_t)v50;
          __p[1] = v50;
          BOOL v53 = v87;
          int64_t v52 = v88;
          if (v87 >= v88)
          {
LABEL_56:
            uint64_t v54 = v11;
            uint64_t v55 = v86;
            uint64_t v56 = (v53 - v86) >> 6;
            unint64_t v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 58) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v58 = v52 - v86;
            if (v58 >> 5 > v57) {
              unint64_t v57 = v58 >> 5;
            }
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v59 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v57;
            }
            if (v59 >> 58) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v60 = (char *)operator new(v59 << 6);
            long long v61 = v82;
            uint64_t v62 = &v60[64 * v56];
            *(_OWORD *)uint64_t v62 = v81;
            *((_OWORD *)v62 + 1) = v61;
            *((void *)v62 + 4) = v83;
            uint64_t v63 = &v60[v53 - v55];
            *((void *)v63 + 5) = v49;
            *((void *)v63 + 6) = v51;
            *((void *)v63 + 7) = v50;
            unint64_t v11 = v54;
            v54[1] = 0;
            v54[2] = 0;
            int v64 = v62 + 64;
            MIL::IRValueType *v54 = 0;
            if (v53 == v55)
            {
              int v86 = v62;
              int v87 = v62 + 64;
              int v88 = &v60[64 * v59];
              uint64_t v10 = v76;
              int64_t v28 = v77;
              uint64_t m = k;
            }
            else
            {
              do
              {
                long long v65 = *((_OWORD *)v53 - 4);
                long long v66 = *((_OWORD *)v53 - 3);
                *((void *)v62 - 4) = *((void *)v53 - 4);
                *((_OWORD *)v62 - 4) = v65;
                *((_OWORD *)v62 - 3) = v66;
                *(_OWORD *)(v62 - 24) = *(_OWORD *)(v53 - 24);
                *((void *)v62 - 1) = *((void *)v53 - 1);
                v62 -= 64;
                *((void *)v53 - 3) = 0;
                *((void *)v53 - 2) = 0;
                *((void *)v53 - 1) = 0;
                v53 -= 64;
              }
              while (v53 != v55);
              BOOL v53 = v86;
              uint64_t v67 = v87;
              int v86 = v62;
              int v87 = v64;
              int v88 = &v60[64 * v59];
              uint64_t v10 = v76;
              int64_t v28 = v77;
              for (uint64_t m = k; v67 != v53; v67 -= 64)
              {
                uint64_t v68 = (void *)*((void *)v67 - 3);
                if (v68)
                {
                  *((void *)v67 - 2) = v68;
                  operator delete(v68);
                }
              }
            }
            if (v53) {
              operator delete(v53);
            }
            int v87 = v64;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            continue;
          }
        }
      }
      long long v40 = v82;
      uint64_t v41 = v83;
      *(_OWORD *)BOOL v53 = v81;
      *((_OWORD *)v53 + 1) = v40;
      *((void *)v53 + 4) = v41;
      *((void *)v53 + 5) = 0;
      *((void *)v53 + 6) = 0;
      *((void *)v53 + 7) = 0;
      *(_OWORD *)(v53 + 40) = *(_OWORD *)__p;
      *((void *)v53 + 7) = v85;
      int v87 = v53 + 64;
    }
    (*(void (**)(void, char **, void))(**(void **)(m + 64) + 128))(*(void *)(m + 64), &v86, *(unsigned int *)(m + 12));
    int8x8_t v34 = *(std::__shared_weak_count **)(m + 72);
    uint64_t v79 = *(void *)(m + 64);
    int v80 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Networuint64_t k = v72;
    double LocalCost = Espresso::AOT::GetLocalCost(v73, (uint64_t)&v79, v30, v31, v32, v33);
    uint8x8_t v36 = v80;
    if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      uint64_t v37 = v86;
      if (v86)
      {
LABEL_40:
        unint64_t v38 = v87;
        uint64_t v16 = v37;
        if (v87 != v37)
        {
          do
          {
            unint64_t v39 = (void *)*((void *)v38 - 3);
            if (v39)
            {
              *((void *)v38 - 2) = v39;
              operator delete(v39);
            }
            v38 -= 64;
          }
          while (v38 != v37);
          uint64_t v16 = v86;
        }
        int v87 = v37;
        operator delete(v16);
      }
    }
    else
    {
      uint64_t v37 = v86;
      if (v86) {
        goto LABEL_40;
      }
    }
    double v12 = LocalCost + v12;
    unint64_t v15 = v75 + 1;
  }
}

void sub_1924E2628(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void sub_1924E264C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v31 = *(void *)(v29 - 128);
  if (v31)
  {
    uint64_t v32 = *(void *)(v29 - 120);
    float v33 = *(void **)(v29 - 128);
    if (v32 != v31)
    {
      do
      {
        int8x8_t v34 = *(void **)(v32 - 24);
        if (v34)
        {
          *(void *)(v32 - 16) = v34;
          operator delete(v34);
        }
        v32 -= 64;
      }
      while (v32 != v31);
      float v33 = *(void **)(v29 - 128);
    }
    *(void *)(v29 - 120) = v31;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::EvaluatorClassic::EstimateCost(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 16);
    Espresso::AOT::EstimateTransferCostBetweenBackends(v3, a3);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("EstimateCost can only be called after Validate");
}

void Espresso::AOT::EvaluatorClassic::LaunchCost(Espresso::AOT::EvaluatorClassic *this)
{
}

void Espresso::AOT::EvaluatorClassic::EndCost(Espresso::AOT::EvaluatorClassic *this)
{
}

void Espresso::AOT::EvaluatorClassic::~EvaluatorClassic(Espresso::AOT::EvaluatorClassic *this)
{
  *(void *)this = &unk_1EE36B120;
  uint64_t v2 = (Espresso::AOT::EvaluatorClassic *)((char *)this + 8);
  *((void *)this + 1) = &unk_1EE36B168;
  uint64_t v3 = (Espresso::AOT::EvaluatorClassicStates *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v3);
    MEMORY[0x192FF16B0]();
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  Espresso::AOT::AbstractValidator::~AbstractValidator(v2);

  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(this);
}

{
  Espresso::AOT::AbstractValidator *v2;
  Espresso::AOT::EvaluatorClassicStates *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE36B120;
  uint64_t v2 = (Espresso::AOT::EvaluatorClassic *)((char *)this + 8);
  *((void *)this + 1) = &unk_1EE36B168;
  uint64_t v3 = (Espresso::AOT::EvaluatorClassicStates *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v3);
    MEMORY[0x192FF16B0]();
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  Espresso::AOT::AbstractValidator::~AbstractValidator(v2);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(this);

  JUMPOUT(0x192FF16B0);
}

void non-virtual thunk to'Espresso::AOT::EvaluatorClassic::~EvaluatorClassic(Espresso::AOT::EvaluatorClassic *this)
{
  uint64_t v2 = (Espresso::AOT::EvaluatorClassic *)((char *)this - 8);
  *((void *)this - 1) = &unk_1EE36B120;
  *(void *)this = &unk_1EE36B168;
  uint64_t v3 = (Espresso::AOT::EvaluatorClassicStates *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v3);
    MEMORY[0x192FF16B0]();
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);

  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v2);
}

{
  Espresso::AOT::AbstractCostEstimator *v2;
  Espresso::AOT::EvaluatorClassicStates *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::AOT::EvaluatorClassic *)((char *)this - 8);
  *((void *)this - 1) = &unk_1EE36B120;
  *(void *)this = &unk_1EE36B168;
  uint64_t v3 = (Espresso::AOT::EvaluatorClassicStates *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v3);
    MEMORY[0x192FF16B0]();
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v2);

  JUMPOUT(0x192FF16B0);
}

void Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(Espresso::AOT::EvaluatorClassicStates *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4) {
    operator delete(v4);
  }
  int8x8_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 8);
    unint64_t v8 = (void *)*((void *)this + 7);
    if (v7 != v6)
    {
      uint64_t v9 = *((void *)this + 8);
      do
      {
        unint64_t v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v7 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      unint64_t v8 = (void *)*((void *)this + 7);
    }
    *((void *)this + 8) = v6;
    operator delete(v8);
  }
  double v12 = (void **)*((void *)this + 4);
  if (v12)
  {
    do
    {
      unint64_t v15 = (void **)*v12;
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      double v12 = v15;
    }
    while (v15);
  }
  uint64_t v13 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v13) {
    operator delete(v13);
  }
  int v14 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

float Espresso::AOT::DTrees::linearAneFp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 106.97;
    if (*(double *)(a1 + 48) > 11.69) {
      return 580.45;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 5290.8;
    if (!v2) {
      return 13239.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneIp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 106.97;
    if (*(double *)(a1 + 48) > 11.69) {
      return 580.45;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 5290.8;
    if (!v2) {
      return 13239.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneJp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 106.97;
    if (*(double *)(a1 + 48) > 11.69) {
      return 580.45;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 5290.8;
    if (!v2) {
      return 13239.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneKp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 106.97;
    if (*(double *)(a1 + 48) > 11.69) {
      return 580.45;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 5290.8;
    if (!v2) {
      return 13239.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneGp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 106.97;
    if (*(double *)(a1 + 48) > 11.69) {
      return 580.45;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 5290.8;
    if (!v2) {
      return 13239.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneHp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 106.97;
    if (*(double *)(a1 + 48) > 11.69) {
      return 580.45;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 5290.8;
    if (!v2) {
      return 13239.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuFp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 59.876;
    if (*(double *)(a1 + 48) > 11.69) {
      return 19.6;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 145.85;
    if (!v2) {
      return 466.79;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuIp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 59.876;
    if (*(double *)(a1 + 48) > 11.69) {
      return 19.6;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 145.85;
    if (!v2) {
      return 466.79;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuJp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 59.876;
    if (*(double *)(a1 + 48) > 11.69) {
      return 19.6;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 145.85;
    if (!v2) {
      return 466.79;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuKp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 59.876;
    if (*(double *)(a1 + 48) > 11.69) {
      return 19.6;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 145.85;
    if (!v2) {
      return 466.79;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuGp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 59.876;
    if (*(double *)(a1 + 48) > 11.69) {
      return 19.6;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 145.85;
    if (!v2) {
      return 466.79;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuHp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 59.876;
    if (*(double *)(a1 + 48) > 11.69) {
      return 19.6;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 145.85;
    if (!v2) {
      return 466.79;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuFp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 286.78;
    if (*(double *)(a1 + 48) > 11.69) {
      return 24164.0;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 3620.9;
    if (!v2) {
      return 6604.6;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuIp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 286.78;
    if (*(double *)(a1 + 48) > 11.69) {
      return 24164.0;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 3620.9;
    if (!v2) {
      return 6604.6;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuJp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 286.78;
    if (*(double *)(a1 + 48) > 11.69) {
      return 24164.0;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 3620.9;
    if (!v2) {
      return 6604.6;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuKp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 286.78;
    if (*(double *)(a1 + 48) > 11.69) {
      return 24164.0;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 3620.9;
    if (!v2) {
      return 6604.6;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuGp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 286.78;
    if (*(double *)(a1 + 48) > 11.69) {
      return 24164.0;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 3620.9;
    if (!v2) {
      return 6604.6;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuHp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    float result = 286.78;
    if (*(double *)(a1 + 48) > 11.69) {
      return 24164.0;
    }
  }
  else
  {
    BOOL v2 = v1 <= 0.6006;
    float result = 3620.9;
    if (!v2) {
      return 6604.6;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneCp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 66.937;
    if (!v3) {
      return 853.74;
    }
  }
  else
  {
    float result = 4218.9;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 14675.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneDp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 67.52;
    if (!v3) {
      return 810.1;
    }
  }
  else
  {
    float result = 4613.6;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 15579.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneEp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 88.361;
    if (!v3) {
      return 1064.9;
    }
  }
  else
  {
    float result = 6038.8;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 23123.0;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuCp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 23.088;
    if (!v3) {
      return 68.688;
    }
  }
  else
  {
    float result = 166.42;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 561.95;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuDp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 20.697;
    if (!v3) {
      return 117.19;
    }
  }
  else
  {
    float result = 196.26;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 671.24;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuCp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 42.38;
    if (!v3) {
      return 233.36;
    }
  }
  else
  {
    float result = 662.03;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 1309.9;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuDp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 36.552;
    if (!v3) {
      return 299.82;
    }
  }
  else
  {
    float result = 885.28;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 2619.7;
    }
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuEp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 48.86;
    if (!v3) {
      return 312.72;
    }
  }
  else
  {
    float result = 907.39;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 1709.8;
    }
  }
  return result;
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetOutputBundlePath(Espresso::AOT::MILSegmenterOptions *this)
{
  return (uint64_t)this + 32;
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetMlcUseBNNSGraph(Espresso::AOT::MILSegmenterOptions *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC3C25) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC3C25 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC3C25)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC3C25 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC3CE9) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC3CE9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC3CE9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC3CE9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC3DA8) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC3DA8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC3DA8)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC3DA8 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC3E6DLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC3E6DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC3E6DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC3E6DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t Espresso::AOT::E5AOTCompilerBackend::GetOutputBundle(Espresso::AOT::E5AOTCompilerBackend *this)
{
  return Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
}

void Espresso::AOT::E5AOTCompilerBackend::GetOutputPaths(Espresso::AOT::E5AOTCompilerBackend *this@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
  if (*(char *)(OutputBundlePath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)OutputBundlePath, *(void *)(OutputBundlePath + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)OutputBundlePath;
    __p.__r_.__value_.__r.__words[2] = *(void *)(OutputBundlePath + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1924E3B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::E5AOTCompilerBackendFactory::~E5AOTCompilerBackendFactory(Espresso::AOT::E5AOTCompilerBackendFactory *this)
{
  Espresso::AOT::AOTCompilerBackendFactory::~AOTCompilerBackendFactory(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::AOT::E5AOTCompilerBackendFactory::RegisterOptions(Espresso::AOT::E5AOTCompilerBackendFactory *this, Espresso::AOT::AOTCompilerOptionsManager *a2)
{
  Espresso::AOT::CompilerOptionsForE5::RegisterOptions(a2, a2);
  char v9 = 3;
  LODWORD(v8) = 7104877;
  char v7 = 12;
  strcpy((char *)v6, "entry-points");
  char v5 = 4;
  strcpy((char *)v4, "main");
  std::string __p = (char *)operator new(0x30uLL);
  strcpy(__p, "Comma-separated list of functions to compile");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)a2, (uint64_t)&v8, (uint64_t)v6, 3, (uint64_t)v4);
  operator delete(__p);
  if (v5 < 0)
  {
    operator delete(v4[0]);
    if (v7 < 0)
    {
LABEL_7:
      operator delete(v6[0]);
      if (v9 < 0) {
        goto LABEL_8;
      }
      return;
    }
  }
  else if (v7 < 0)
  {
    goto LABEL_7;
  }
  if (v9 < 0) {
LABEL_8:
  }
    operator delete(v8);
}

void sub_1924E3CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v26 - 17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((*(char *)(v26 - 17) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::Classic::ClassicAOTCompilerBackend,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>()
{
}

void sub_1924E3E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C402E6D0B92);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5AOTCompilerBackendFactory::GetBackendName(char *a1@<X8>)
{
  a1[23] = 2;
  strcpy(a1, "e5");
}

void Espresso::AOT::Backends::CostModel::anonymous namespace'::EstimatorRegisterEntry::~EstimatorRegisterEntry(Espresso::AOT::Backends::CostModel::_anonymous_namespace_::EstimatorRegisterEntry *this)
{
  BOOL v2 = (char *)this + 24;
  uint64_t v3 = (char *)*((void *)this + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_7:
    operator delete(*(void **)this);
    return;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (*((char *)this + 23) < 0) {
    goto LABEL_7;
  }
}

void *std::function<std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~function(void *a1)
{
  BOOL v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D4B0;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D508;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D560;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D5B8;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_3") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_3")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D610;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_4") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_4")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D668;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_5") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_5")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D6C0;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_6") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_6" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_6")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D718;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_7") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_7" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_7")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_7" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D770;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_8") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_8" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_8")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_8" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D7C8;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_9") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_9" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_9")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_9" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D820;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_10") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_10" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_10")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_10" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D878;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_11") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_11" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_11")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_11" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37D8D0;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_12") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_12" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_12")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_12" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void *Espresso::AOT::Validators::MpsGraphValidator::MpsGraphValidator(void *a1, long long *a2, char a3)
{
  uint64_t v6 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *uint64_t v6 = &unk_1EE36AF48;
  long long v7 = *a2;
  *((_OWORD *)v6 + 2) = 0u;
  uint64_t v8 = (uint64_t)(v6 + 4);
  *(_OWORD *)(v6 + 1) = v7;
  *((unsigned char *)v6 + 24) = a3;
  *((_OWORD *)v6 + 3) = 0u;
  *((_DWORD *)v6 + 16) = 1065353216;
  if (a3) {
    return a1;
  }
  strcpy(__p, "pixel_buffer_to_tensor");
  char v11 = 22;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)(v6 + 4), (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  strcpy(__p, "tensor_to_pixel_buffer");
  char v11 = 22;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v11 = 10;
  strcpy(__p, "while_loop");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v11 = 4;
  strcpy(__p, "cond");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v11 = 8;
  strcpy(__p, "non_zero");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v11 = 16;
  strcpy(__p, "reverse_sequence");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v11 = 9;
  strcpy(__p, "make_list");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v11 = 11;
  strcpy(__p, "list_gather");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v11 = 12;
  strcpy(__p, "list_scatter");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if ((v11 & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)__p);
  return a1;
}

void sub_1924E50F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 - 24));
  Espresso::AOT::AbstractValidator::~AbstractValidator(v14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::MpsGraphValidator::Validate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 24))
  {
    HIBYTE(v19[0]) = 5;
    strcpy((char *)__p, "ios15");
    char v21 = 5;
    strcpy((char *)&v19[1], "ios16");
    char v23 = 5;
    strcpy(v22, "ios17");
    char v25 = 5;
    strcpy(v24, "ios18");
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)uint64_t v14 = 0u;
    int v15 = 1065353216;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v13, (uint64_t)__p, (uint64_t)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v13, (uint64_t)&v19[1], (uint64_t)&v19[1]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v13, (uint64_t)v22, (uint64_t)v22);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v13, (uint64_t)v24, (uint64_t)v24);
    LOBYTE(v16[0]) = 0;
    char v17 = 0;
    Espresso::AOT::Utils::OpBlackListValidate(a2, (uint64_t)a3, (void *)(a1 + 32), v13, (uint64_t)v16);
  }
  uint64_t v6 = (E5Common::E5PlatformManager *)[MEMORY[0x1E4F35A58] getValidateNetworkSupportedVersion];
  uint64_t v7 = E5Common::E5PlatformManager::Instance(v6);
  uint64_t v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1 + 8);
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  int v20 = 1065353216;
  uint64_t v9 = Espresso::AOT::Utils::MakeValidationInput((unint64_t)v6, a2, a3, v8, (uint64_t)__p);
  uint64_t v10 = (void **)v19[0];
  if (!v19[0])
  {
LABEL_3:
    char v11 = __p[0];
    __p[0] = 0;
    if (v11) {
      operator delete(v11);
    }
    Espresso::AOT::Utils::ParseValidationOutput((unint64_t)v6, (void *)[MEMORY[0x1E4F35A58] validateNetworkWithParams:v9 apiVersion:0]);
  }
  while (1)
  {
    double v12 = (void **)*v10;
    if (*((char *)v10 + 63) < 0)
    {
      operator delete(v10[5]);
      if (*((char *)v10 + 39) < 0) {
LABEL_11:
      }
        operator delete(v10[2]);
    }
    else if (*((char *)v10 + 39) < 0)
    {
      goto LABEL_11;
    }
    operator delete(v10);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_3;
    }
  }
}

void sub_1924E54C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a31);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a24 & 0x80000000) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_9:
    operator delete(a19);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a25);
  if ((a24 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void Espresso::AOT::Validators::MpsGraphValidator::~MpsGraphValidator(Espresso::AOT::Validators::MpsGraphValidator *this)
{
  *(void *)this = &unk_1EE36AF48;
  BOOL v2 = (void **)*((void *)this + 6);
  if (v2)
  {
    do
    {
      long long v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      BOOL v2 = v4;
    }
    while (v4);
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    operator delete(v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::MpsGraphValidator *)((char *)this + 8));

  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
}

{
  void **v2;
  void *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE36AF48;
  BOOL v2 = (void **)*((void *)this + 6);
  if (v2)
  {
    do
    {
      long long v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      BOOL v2 = v4;
    }
    while (v4);
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    operator delete(v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::MpsGraphValidator *)((char *)this + 8));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::AOT::MemOptimizer::Algorithms::DSatur::~DSatur(Espresso::AOT::MemOptimizer::Algorithms::DSatur *this)
{
  BOOL v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 6);
    long long v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        char v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            uint64_t v6 = (void *)*v5;
            operator delete(v5);
            char v5 = v6;
          }
          while (v6);
        }
        uint64_t v8 = (void *)*(v3 - 5);
        v3 -= 5;
        uint64_t v7 = v8;
        *unint64_t v3 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v3 != v2);
      long long v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  BOOL v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 6);
    long long v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        char v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            uint64_t v6 = (void *)*v5;
            operator delete(v5);
            char v5 = v6;
          }
          while (v6);
        }
        uint64_t v8 = (void *)*(v3 - 5);
        v3 -= 5;
        uint64_t v7 = v8;
        *unint64_t v3 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v3 != v2);
      long long v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

void *std::vector<Espresso::AOT::MemOptimizer::Algorithms::DSatur::BlockInfo>::~vector[abi:ne180100](void *a1)
{
  BOOL v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    long long v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        char v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            uint64_t v6 = (void *)*v5;
            operator delete(v5);
            char v5 = v6;
          }
          while (v6);
        }
        uint64_t v8 = (void *)*(v3 - 5);
        v3 -= 5;
        uint64_t v7 = v8;
        *unint64_t v3 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v3 != v2);
      long long v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

Espresso::AOT::MemOptimizer::Algorithms::DSatur *Espresso::AOT::MemOptimizer::Algorithms::DSatur::DSatur(Espresso::AOT::MemOptimizer::Algorithms::DSatur *this, const Espresso::AOT::MemOptimizer::InterferenceGraph *a2, unint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 3) = 0;
  BOOL v53 = (uint64_t **)((char *)this + 24);
  *((void *)this + 2) = (char *)this + 24;
  uint64_t v55 = (uint64_t **)((char *)this + 16);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (!a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid alloc alignment");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  (*(void (**)(void **__return_ptr, const Espresso::AOT::MemOptimizer::InterferenceGraph *))(*(void *)a2 + 56))(&v64, a2);
  char v5 = v65;
  if (v65)
  {
    while (1)
    {
      uint64_t v7 = (const void *)v5[2];
      size_t v6 = v5[3];
      if (v6 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v6 >= 0x17)
      {
        uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v9 = v6 | 7;
        }
        uint64_t v10 = v9 + 1;
        uint64_t v8 = (void **)operator new(v9 + 1);
        __dst[1] = (void *)v6;
        unint64_t v63 = v10 | 0x8000000000000000;
        __dst[0] = v8;
      }
      else
      {
        HIBYTE(v63) = v5[3];
        uint64_t v8 = __dst;
        if (!v6) {
          goto LABEL_13;
        }
      }
      memmove(v8, v7, v6);
LABEL_13:
      *((unsigned char *)v8 + v6) = 0;
      if ((*(uint64_t (**)(const Espresso::AOT::MemOptimizer::InterferenceGraph *, void **))(*(void *)a2 + 40))(a2, __dst))
      {
        uint64_t v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v50, "Support for non-zero allocIds not yet implemented");
        v50->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v50, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v11 = (*(uint64_t (**)(const Espresso::AOT::MemOptimizer::InterferenceGraph *, void **))(*(void *)a2 + 32))(a2, __dst);
      if (v11) {
        unint64_t v12 = (v11 - 1) / a3 + 1;
      }
      else {
        unint64_t v12 = 0;
      }
      std::string __p = v5 + 2;
      uint64_t v13 = std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(v55, (uint64_t)(v5 + 2), (uint64_t)&std::piecewise_construct, (long long **)&__p);
      v13[7] = 0;
      v13[8] = (uint64_t *)v12;
      *((unsigned char *)v13 + 48) = 0;
      (*(void (**)(void **__return_ptr, const Espresso::AOT::MemOptimizer::InterferenceGraph *, void **))(*(void *)a2 + 64))(&__p, a2, __dst);
      if (v13[14])
      {
        uint64_t v14 = v13[13];
        if (v14)
        {
          do
          {
            int v15 = (uint64_t *)*v14;
            operator delete(v14);
            uint64_t v14 = v15;
          }
          while (v15);
        }
        v13[13] = 0;
        uint64_t v16 = v13[12];
        if (v16)
        {
          for (uint64_t i = 0; i != v16; uint64_t i = (uint64_t *)((char *)i + 1))
            v13[11][(void)i] = 0;
        }
        v13[14] = 0;
      }
      uint64_t v18 = (uint64_t *)__p;
      std::string __p = 0;
      uint64_t v19 = v13[11];
      v13[11] = v18;
      if (v19) {
        operator delete(v19);
      }
      char v21 = v58;
      int v20 = v59;
      v13[13] = v59;
      v13[12] = v21;
      uint64_t v58 = 0;
      unint64_t v22 = v60;
      v13[14] = v60;
      *((_DWORD *)v13 + 30) = v61;
      if (v22)
      {
        unint64_t v23 = v20[1];
        if (((unint64_t)v21 & ((unint64_t)v21 - 1)) != 0)
        {
          if (v23 >= (unint64_t)v21) {
            v23 %= (unint64_t)v21;
          }
        }
        else
        {
          v23 &= (unint64_t)v21 - 1;
        }
        v13[11][v23] = (uint64_t)(v13 + 13);
        unint64_t v59 = 0;
        uint64_t v60 = 0;
      }
      else if (v20)
      {
        do
        {
          int64_t v24 = (void *)*v20;
          operator delete(v20);
          int v20 = v24;
        }
        while (v24);
      }
      char v25 = __p;
      std::string __p = 0;
      if (v25) {
        operator delete(v25);
      }
      if (SHIBYTE(v63) < 0) {
        operator delete(__dst[0]);
      }
      char v5 = (void *)*v5;
      if (!v5)
      {
        if (!v65) {
          break;
        }
        int64_t v52 = v65;
        uint64_t v26 = *v53;
        if (!*v53) {
LABEL_82:
        }
          std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
        uint64_t v27 = v65;
        while (1)
        {
          uint64_t v29 = (const void *)v27[2];
          unint64_t v30 = v27[3];
          uint64_t v31 = (uint64_t **)v26;
          while (1)
          {
            while (1)
            {
              float v33 = v31[4];
              unint64_t v32 = (unint64_t)v31[5];
              size_t v34 = v32 >= v30 ? v30 : (size_t)v31[5];
              int v35 = memcmp(v29, v31[4], v34);
              if (v35) {
                break;
              }
              if (v30 >= v32) {
                goto LABEL_53;
              }
LABEL_45:
              uint64_t v31 = (uint64_t **)*v31;
              if (!v31) {
                goto LABEL_82;
              }
            }
            if (v35 < 0) {
              goto LABEL_45;
            }
LABEL_53:
            int v36 = memcmp(v33, v29, v34);
            if (v36)
            {
              if ((v36 & 0x80000000) == 0) {
                break;
              }
              goto LABEL_57;
            }
            if (v32 >= v30) {
              break;
            }
LABEL_57:
            uint64_t v31 = (uint64_t **)v31[1];
            if (!v31) {
              goto LABEL_82;
            }
          }
          uint64_t v56 = v27;
          uint64_t v37 = v31[13];
          if (v37)
          {
            int64_t v28 = 0;
            while (1)
            {
              unint64_t v39 = (const void *)v37[2];
              unint64_t v38 = v37[3];
              long long v40 = (uint64_t **)v26;
              while (1)
              {
                while (1)
                {
                  int v42 = v40[4];
                  unint64_t v41 = (unint64_t)v40[5];
                  size_t v43 = v41 >= v38 ? v38 : (size_t)v40[5];
                  int v44 = memcmp(v39, v40[4], v43);
                  if (v44) {
                    break;
                  }
                  if (v38 >= v41) {
                    goto LABEL_71;
                  }
LABEL_63:
                  long long v40 = (uint64_t **)*v40;
                  if (!v40) {
                    goto LABEL_76;
                  }
                }
                if (v44 < 0) {
                  goto LABEL_63;
                }
LABEL_71:
                int v45 = memcmp(v42, v39, v43);
                if (!v45) {
                  break;
                }
                if ((v45 & 0x80000000) == 0) {
                  goto LABEL_61;
                }
LABEL_75:
                long long v40 = (uint64_t **)v40[1];
                if (!v40) {
LABEL_76:
                }
                  std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
              }
              if (v41 < v38) {
                goto LABEL_75;
              }
LABEL_61:
              int64_t v28 = (uint64_t *)((char *)v28 + (void)v40[8]);
              uint64_t v37 = (uint64_t *)*v37;
              if (!v37) {
                goto LABEL_43;
              }
            }
          }
          int64_t v28 = 0;
LABEL_43:
          v31[9] = v28;
          uint64_t v27 = (void *)*v56;
          if (!*v56)
          {
            uint64_t v46 = v52;
            do
            {
              size_t v47 = (void *)*v46;
              operator delete(v46);
              uint64_t v46 = v47;
            }
            while (v47);
            goto LABEL_79;
          }
        }
      }
    }
  }
LABEL_79:
  uint64_t v48 = v64;
  int v64 = 0;
  if (v48) {
    operator delete(v48);
  }
  return this;
}

void sub_1924E5DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  std::vector<Espresso::AOT::MemOptimizer::Algorithms::DSatur::BlockInfo>::~vector[abi:ne180100](v27);
  std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy(a14, *a12);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::Algorithms::DSatur::ComputeDistinctNeighboringBlocks(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(uint64_t ***)(a1 + 24);
  if (!v2) {
LABEL_16:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  long long v4 = *(const void **)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  while (1)
  {
    while (1)
    {
      size_t v6 = v2[4];
      unint64_t v7 = (unint64_t)v2[5];
      size_t v8 = v7 >= v5 ? v5 : (size_t)v2[5];
      int v9 = memcmp(v4, v2[4], v8);
      if (v9) {
        break;
      }
      if (v5 >= v7) {
        goto LABEL_11;
      }
LABEL_3:
      BOOL v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_16;
      }
    }
    if (v9 < 0) {
      goto LABEL_3;
    }
LABEL_11:
    int v10 = memcmp(v6, v4, v8);
    if (v10)
    {
      if ((v10 & 0x80000000) == 0) {
        break;
      }
      goto LABEL_15;
    }
    if (v7 >= v5) {
      break;
    }
LABEL_15:
    BOOL v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_16;
    }
  }
  *(_OWORD *)std::string __p = 0u;
  long long v28 = 0u;
  int v29 = 1065353216;
  uint64_t v11 = v2[13];
  if (!v11)
  {
    uint64_t v12 = 0;
    __p[0] = 0;
    return v12;
  }
  while (2)
  {
    uint64_t v13 = *(uint64_t **)(a1 + 24);
    if (!v13) {
LABEL_46:
    }
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    uint64_t v14 = (const void *)v11[2];
    size_t v15 = v11[3];
    while (2)
    {
      while (2)
      {
        uint64_t v16 = (const void *)v13[4];
        size_t v17 = v13[5];
        if (v17 >= v15) {
          size_t v18 = v15;
        }
        else {
          size_t v18 = v13[5];
        }
        int v19 = memcmp(v14, (const void *)v13[4], v18);
        if (v19)
        {
          if (v19 < 0) {
            goto LABEL_22;
          }
        }
        else if (v15 < v17)
        {
LABEL_22:
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            goto LABEL_46;
          }
          continue;
        }
        break;
      }
      int v20 = memcmp(v16, v14, v18);
      if (v20)
      {
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_36;
        }
LABEL_34:
        uint64_t v13 = (uint64_t *)v13[1];
        if (!v13) {
          goto LABEL_46;
        }
        continue;
      }
      break;
    }
    if (v17 < v15) {
      goto LABEL_34;
    }
LABEL_36:
    if (*((unsigned char *)v13 + 48) && v13[8])
    {
      unint64_t v21 = 0;
      do
      {
        unint64_t v26 = v21 + v13[7];
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)__p, &v26, &v26);
        ++v21;
      }
      while (v21 < v13[8]);
    }
    uint64_t v11 = (uint64_t *)*v11;
    if (v11) {
      continue;
    }
    break;
  }
  uint64_t v12 = *((void *)&v28 + 1);
  unint64_t v22 = (void *)v28;
  if ((void)v28)
  {
    do
    {
      unint64_t v23 = (void *)*v22;
      operator delete(v22);
      unint64_t v22 = v23;
    }
    while (v23);
  }
  int64_t v24 = __p[0];
  __p[0] = 0;
  if (v24) {
    operator delete(v24);
  }
  return v12;
}

void sub_1924E6080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924E6094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *Espresso::AOT::MemOptimizer::Algorithms::DSatur::GetNextNodeToAllocate(Espresso::AOT::MemOptimizer::Algorithms::DSatur *this)
{
  double v1 = (char *)*((void *)this + 2);
  BOOL v2 = (char *)this + 24;
  if (v1 == (char *)this + 24) {
    return "";
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  float result = "";
  do
  {
    if (!v1[48])
    {
      unint64_t v7 = *((void *)v1 + 10);
      if (v7 > v5 || v7 == v5 && *((_OWORD *)v1 + 4) >= __PAIR128__(v4, v3))
      {
        float result = (const char *)*((void *)v1 + 4);
        unint64_t v5 = *((void *)v1 + 10);
        unint64_t v4 = *((void *)v1 + 9);
        unint64_t v3 = *((void *)v1 + 8);
      }
    }
    size_t v8 = (char *)*((void *)v1 + 1);
    if (v8)
    {
      do
      {
        int v9 = v8;
        size_t v8 = *(char **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        int v9 = (char *)*((void *)v1 + 2);
        BOOL v10 = *(void *)v9 == (void)v1;
        double v1 = v9;
      }
      while (!v10);
    }
    double v1 = v9;
  }
  while (v9 != v2);
  return result;
}

unint64_t Espresso::AOT::MemOptimizer::Algorithms::DSatur::ComputeBestFit(void *a1, uint64_t a2)
{
  BOOL v2 = (uint64_t **)a1[3];
  if (!v2) {
LABEL_16:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unint64_t v4 = *(const void **)a2;
  unint64_t v3 = *(void *)(a2 + 8);
  while (1)
  {
    while (1)
    {
      unint64_t v5 = v2[4];
      unint64_t v6 = (unint64_t)v2[5];
      size_t v7 = v6 >= v3 ? v3 : (size_t)v2[5];
      int v8 = memcmp(v4, v2[4], v7);
      if (v8) {
        break;
      }
      if (v3 >= v6) {
        goto LABEL_11;
      }
LABEL_3:
      BOOL v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_16;
      }
    }
    if (v8 < 0) {
      goto LABEL_3;
    }
LABEL_11:
    int v9 = memcmp(v5, v4, v7);
    if (v9)
    {
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      goto LABEL_15;
    }
    if (v6 >= v3) {
      break;
    }
LABEL_15:
    BOOL v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_16;
    }
  }
  uint64_t v10 = a1[5];
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((a1[6] - v10) >> 3);
  if (a1[6] == v10)
  {
    unint64_t v14 = 0;
    BOOL v38 = v2[8] == 0;
  }
  else if (v2[13])
  {
    unint64_t v44 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    char v15 = 0;
    int v43 = 0;
    unint64_t v42 = -1;
    do
    {
      char v46 = v15;
      unint64_t v47 = v13;
      unint64_t v48 = v14;
      uint64_t v16 = (uint64_t **)v2[13];
      if (v16)
      {
        size_t v17 = (void *)(v10 + 40 * v12);
        do
        {
          unint64_t v18 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v49, v16[2], (unint64_t)v16[3]);
          int8x8_t v19 = (int8x8_t)v17[1];
          if (v19)
          {
            unint64_t v20 = v18;
            uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19);
            v21.i16[0] = vaddlv_u8(v21);
            if (v21.u32[0] > 1uLL)
            {
              unint64_t v22 = v18;
              if (v18 >= *(void *)&v19) {
                unint64_t v22 = v18 % *(void *)&v19;
              }
            }
            else
            {
              unint64_t v22 = (*(void *)&v19 - 1) & v18;
            }
            unint64_t v23 = *(uint64_t ****)(*v17 + 8 * v22);
            if (v23)
            {
              int64_t v24 = *v23;
              if (*v23)
              {
                unint64_t v26 = v16[2];
                size_t v25 = (size_t)v16[3];
                if (v21.u32[0] < 2uLL)
                {
                  uint64_t v27 = *(void *)&v19 - 1;
                  while (1)
                  {
                    int v29 = v24[1];
                    if ((uint64_t *)v20 == v29)
                    {
                      if (v24[3] == (uint64_t *)v25 && !memcmp(v24[2], v26, v25)) {
                        goto LABEL_49;
                      }
                    }
                    else if (((unint64_t)v29 & v27) != v22)
                    {
                      goto LABEL_26;
                    }
                    int64_t v24 = (uint64_t **)*v24;
                    if (!v24) {
                      goto LABEL_26;
                    }
                  }
                }
                do
                {
                  unint64_t v28 = (unint64_t)v24[1];
                  if (v20 == v28)
                  {
                    if (v24[3] == (uint64_t *)v25 && !memcmp(v24[2], v26, v25))
                    {
LABEL_49:
                      unint64_t v14 = v48;
                      unint64_t v30 = v42;
                      unint64_t v31 = (unint64_t)v2[8];
                      int v32 = v43;
                      if (v47 >= v42) {
                        int v33 = v43;
                      }
                      else {
                        int v33 = 1;
                      }
                      if (v47 >= v42) {
                        unint64_t v34 = v42;
                      }
                      else {
                        unint64_t v34 = v47;
                      }
                      unint64_t v35 = v44;
                      if (v47 >= v42) {
                        unint64_t v36 = v44;
                      }
                      else {
                        unint64_t v36 = v48;
                      }
                      char v15 = 0;
                      if (v47 >= v31) {
                        int v32 = v33;
                      }
                      int v43 = v32;
                      unint64_t v13 = 0;
                      if (v47 >= v31) {
                        unint64_t v30 = v34;
                      }
                      unint64_t v42 = v30;
                      if (v47 >= v31) {
                        unint64_t v35 = v36;
                      }
                      unint64_t v44 = v35;
                      goto LABEL_23;
                    }
                  }
                  else
                  {
                    if (v28 >= *(void *)&v19) {
                      v28 %= *(void *)&v19;
                    }
                    if (v28 != v22) {
                      break;
                    }
                  }
                  int64_t v24 = (uint64_t **)*v24;
                }
                while (v24);
              }
            }
          }
LABEL_26:
          uint64_t v16 = (uint64_t **)*v16;
        }
        while (v16);
      }
      unint64_t v14 = v48;
      if ((v46 & 1) == 0) {
        unint64_t v14 = v12;
      }
      unint64_t v13 = v47 + 1;
      char v15 = 1;
LABEL_23:
      ++v12;
      uint64_t v10 = a1[5];
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((a1[6] - v10) >> 3);
    }
    while (v12 < v11);
    BOOL v38 = v13 >= (unint64_t)v2[8] && v13 < v42;
    if (v13) {
      unint64_t v11 = v14;
    }
    if (v43) {
      unint64_t v11 = v44;
    }
  }
  else
  {
    unint64_t v14 = 0;
    if (v11 <= 1) {
      unint64_t v39 = 1;
    }
    else {
      unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((a1[6] - v10) >> 3);
    }
    BOOL v38 = v39 >= (unint64_t)v2[8] && v39 != -1;
    unint64_t v11 = 0;
  }
  if (v38) {
    return v14;
  }
  else {
    return v11;
  }
}

unint64_t Espresso::AOT::MemOptimizer::Algorithms::DSatur::AllocateNode(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(uint64_t **)(a1 + 24);
  if (!v2) {
    goto LABEL_45;
  }
  unint64_t v5 = *(const void **)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  while (1)
  {
    while (1)
    {
      size_t v7 = (const void *)v2[4];
      unint64_t v8 = v2[5];
      size_t v9 = v8 >= v6 ? v6 : v2[5];
      int v10 = memcmp(v5, (const void *)v2[4], v9);
      if (v10) {
        break;
      }
      if (v6 >= v8) {
        goto LABEL_11;
      }
LABEL_3:
      BOOL v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_45;
      }
    }
    if (v10 < 0) {
      goto LABEL_3;
    }
LABEL_11:
    int v11 = memcmp(v7, v5, v9);
    if (v11)
    {
      if ((v11 & 0x80000000) == 0) {
        break;
      }
      goto LABEL_15;
    }
    if (v8 >= v6) {
      break;
    }
LABEL_15:
    BOOL v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_45;
    }
  }
  if (*((unsigned char *)v2 + 48))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string<std::string_view,0>(&__dst, a2);
    unint64_t v30 = std::string::insert(&__dst, 0, "Node ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    int v32 = std::string::append(&v36, " already allocated");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v37);
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  unint64_t result = Espresso::AOT::MemOptimizer::Algorithms::DSatur::ComputeBestFit((void *)a1, a2);
  if (result > 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3))
  {
    unint64_t v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v34, "Invalid starting block");
    __cxa_throw(v34, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  unint64_t v13 = result;
  *((unsigned char *)v2 + 48) = 1;
  v2[7] = result;
  if (v2[8])
  {
    unint64_t v14 = 0;
    uint64_t v15 = 40 * result;
    do
    {
      uint64_t v17 = *(void *)(a1 + 40);
      unint64_t v18 = *(void *)(a1 + 48);
      if (v13 + v14 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v17) >> 3))
      {
        if (v18 >= *(void *)(a1 + 56))
        {
          uint64_t v16 = std::vector<Espresso::AOT::MemOptimizer::Algorithms::DSatur::BlockInfo>::__emplace_back_slow_path<>((char **)(a1 + 40));
        }
        else
        {
          *(void *)(v18 + 32) = 0;
          *(_OWORD *)unint64_t v18 = 0u;
          *(_OWORD *)(v18 + 16) = 0u;
          uint64_t v16 = (char *)(v18 + 40);
          *(_DWORD *)(v18 + 32) = 1065353216;
        }
        *(void *)(a1 + 48) = v16;
        uint64_t v17 = *(void *)(a1 + 40);
      }
      unint64_t result = (unint64_t)std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(v17 + v15, a2, (_OWORD *)a2);
      ++v14;
      v15 += 40;
    }
    while (v14 < v2[8]);
  }
  int8x8_t v19 = (void *)v2[13];
  if (!v19) {
    return result;
  }
  while (2)
  {
    uint64_t v20 = Espresso::AOT::MemOptimizer::Algorithms::DSatur::ComputeDistinctNeighboringBlocks(a1, (uint64_t)(v19 + 2));
    uint8x8_t v21 = *(uint64_t ***)(a1 + 24);
    if (!v21) {
LABEL_45:
    }
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    uint64_t v22 = v20;
    unint64_t v23 = (const void *)v19[2];
    unint64_t v24 = v19[3];
    while (1)
    {
      while (1)
      {
        size_t v25 = v21[4];
        unint64_t v26 = (unint64_t)v21[5];
        size_t v27 = v26 >= v24 ? v24 : (size_t)v21[5];
        int v28 = memcmp(v23, v21[4], v27);
        if (v28) {
          break;
        }
        if (v24 >= v26) {
          goto LABEL_40;
        }
LABEL_32:
        uint8x8_t v21 = (uint64_t **)*v21;
        if (!v21) {
          goto LABEL_45;
        }
      }
      if (v28 < 0) {
        goto LABEL_32;
      }
LABEL_40:
      unint64_t result = memcmp(v25, v23, v27);
      if (result)
      {
        if ((result & 0x80000000) == 0) {
          break;
        }
        goto LABEL_44;
      }
      if (v26 >= v24) {
        break;
      }
LABEL_44:
      uint8x8_t v21 = (uint64_t **)v21[1];
      if (!v21) {
        goto LABEL_45;
      }
    }
    v21[10] = (uint64_t *)v22;
    int8x8_t v19 = (void *)*v19;
    if (v19) {
      continue;
    }
    return result;
  }
}

void sub_1924E67D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    if (v29)
    {
LABEL_10:
      __cxa_free_exception(v28);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  if (v29) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void Espresso::AOT::MemOptimizer::Algorithms::DSatur::Optimize(Espresso::AOT::MemOptimizer::Algorithms::DSatur *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  size_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v4 = (char *)this + 24;
  while (1)
  {
    unint64_t v5 = (char *)*((void *)this + 2);
    if (v5 == v4) {
      break;
    }
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    int v10 = "";
    int v11 = (char *)*((void *)this + 2);
    do
    {
      if (!v11[48])
      {
        unint64_t v12 = *((void *)v11 + 10);
        if (v12 > v9 || v12 == v9 && *((_OWORD *)v11 + 4) >= __PAIR128__(v8, v7))
        {
          int v10 = (const char *)*((void *)v11 + 4);
          uint64_t v6 = *((void *)v11 + 5);
          unint64_t v9 = *((void *)v11 + 10);
          unint64_t v8 = *((void *)v11 + 9);
          unint64_t v7 = *((void *)v11 + 8);
        }
      }
      unint64_t v13 = (char *)*((void *)v11 + 1);
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (char *)*((void *)v11 + 2);
          BOOL v15 = *(void *)v14 == (void)v11;
          int v11 = v14;
        }
        while (!v15);
      }
      int v11 = v14;
    }
    while (v14 != v4);
    size_t v27 = v10;
    uint64_t v28 = v6;
    if (!v6)
    {
      while (1)
      {
        size_t v16 = *((void *)v5 + 5);
        if (v16 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = *((void *)v5 + 7);
        uint64_t v18 = *((void *)this + 1);
        int8x8_t v19 = (const void *)*((void *)v5 + 4);
        if (v16 >= 0x17) {
          break;
        }
        HIBYTE(v26) = *((void *)v5 + 5);
        uint64_t v20 = __dst;
        if (v16) {
          goto LABEL_27;
        }
LABEL_28:
        *((unsigned char *)v20 + v16) = 0;
        int v29 = __dst;
        *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__dst, (uint64_t)&std::piecewise_construct, (long long **)&v29)+ 5) = v18 * v17;
        if (SHIBYTE(v26) < 0)
        {
          operator delete(__dst[0]);
          unint64_t v23 = (char *)*((void *)v5 + 1);
          if (v23)
          {
            do
            {
LABEL_32:
              unint64_t v24 = v23;
              unint64_t v23 = *(char **)v23;
            }
            while (v23);
            goto LABEL_19;
          }
        }
        else
        {
          unint64_t v23 = (char *)*((void *)v5 + 1);
          if (v23) {
            goto LABEL_32;
          }
        }
        do
        {
          unint64_t v24 = (char *)*((void *)v5 + 2);
          BOOL v15 = *(void *)v24 == (void)v5;
          unint64_t v5 = v24;
        }
        while (!v15);
LABEL_19:
        unint64_t v5 = v24;
        if (v24 == v4) {
          goto LABEL_37;
        }
      }
      uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v21 = v16 | 7;
      }
      uint64_t v22 = v21 + 1;
      uint64_t v20 = (void **)operator new(v21 + 1);
      __dst[1] = (void *)v16;
      unint64_t v26 = v22 | 0x8000000000000000;
      __dst[0] = v20;
LABEL_27:
      memmove(v20, v19, v16);
      goto LABEL_28;
    }
    Espresso::AOT::MemOptimizer::Algorithms::DSatur::AllocateNode((uint64_t)this, (uint64_t)&v27);
  }
LABEL_37:
  *(void *)(a2 + 40) = 0xCCCCCCCCCCCCCCCDLL
                       * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3)
                       * *((void *)this + 1);
}

void sub_1924E6AE8(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924E6AFC(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924E6B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[13];
    if (v4)
    {
      do
      {
        unint64_t v5 = (void *)*v4;
        operator delete(v4);
        unint64_t v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = (void *)a2[11];
    a2[11] = 0;
    if (v6) {
      operator delete(v6);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (!v6)
  {
    int v10 = a1 + 1;
    goto LABEL_18;
  }
  unint64_t v8 = *(const void **)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  do
  {
    while (1)
    {
      int v10 = (uint64_t **)v6;
      int v11 = (const void *)v6[4];
      unint64_t v12 = v6[5];
      size_t v13 = v12 >= v9 ? v9 : v6[5];
      int v14 = memcmp(v8, (const void *)v6[4], v13);
      if (v14) {
        break;
      }
      if (v9 >= v12) {
        goto LABEL_11;
      }
LABEL_3:
      uint64_t v6 = *v10;
      unint64_t v7 = v10;
      if (!*v10) {
        goto LABEL_18;
      }
    }
    if (v14 < 0) {
      goto LABEL_3;
    }
LABEL_11:
    int v15 = memcmp(v11, v8, v13);
    if (v15)
    {
      if ((v15 & 0x80000000) == 0) {
        return v10;
      }
    }
    else if (v12 >= v9)
    {
      return v10;
    }
    uint64_t v6 = v10[1];
  }
  while (v6);
  unint64_t v7 = v10 + 1;
LABEL_18:
  size_t v16 = (uint64_t *)v10;
  int v10 = (uint64_t **)operator new(0x80uLL);
  long long v17 = **a4;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 2) = v17;
  *((_OWORD *)v10 + 3) = 0u;
  *((_DWORD *)v10 + 30) = 1065353216;
  const char *v10 = 0;
  v10[1] = 0;
  void v10[2] = v16;
  const void *v7 = (uint64_t *)v10;
  uint64_t v18 = (uint64_t *)**a1;
  int8x8_t v19 = (uint64_t *)v10;
  if (v18)
  {
    *a1 = v18;
    int8x8_t v19 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

char *std::vector<Espresso::AOT::MemOptimizer::Algorithms::DSatur::BlockInfo>::__emplace_back_slow_path<>(char **a1)
{
  unint64_t v3 = *a1;
  BOOL v2 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[40 * v4];
  unint64_t v9 = &v7[40 * v6];
  *((void *)v8 + 4) = 0;
  *(_OWORD *)unint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_DWORD *)v8 + 8) = 1065353216;
  int v10 = v8 + 40;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_29;
  }
  uint64_t v11 = 0;
  do
  {
    size_t v13 = &v8[v11];
    int v14 = &v2[v11];
    uint64_t v15 = *(void *)&v2[v11 - 40];
    *((void *)v14 - 5) = 0;
    *((void *)v13 - 5) = v15;
    unint64_t v16 = *(void *)&v2[v11 - 32];
    *((void *)v13 - 4) = v16;
    *((void *)v14 - 4) = 0;
    uint64_t v17 = *(void *)&v2[v11 - 24];
    *((void *)v13 - 3) = v17;
    uint64_t v18 = (uint64_t)&v8[v11 - 24];
    uint64_t v19 = *(void *)&v2[v11 - 16];
    *(void *)(v18 + 8) = v19;
    *(_DWORD *)(v18 + 16) = *(_DWORD *)&v2[v11 - 8];
    if (v19)
    {
      unint64_t v12 = *(void *)(v17 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v12 >= v16) {
          v12 %= v16;
        }
      }
      else
      {
        v12 &= v16 - 1;
      }
      *(void *)(v15 + 8 * v12) = v18;
      *(void *)&v2[v11 - 24] = 0;
      *(void *)&v2[v11 - 16] = 0;
    }
    v11 -= 40;
  }
  while (&v2[v11] != v3);
  uint64_t v20 = *a1;
  BOOL v2 = a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v20)
  {
    do
    {
      uint64_t v21 = (void *)*((void *)v2 - 3);
      if (v21)
      {
        do
        {
          uint64_t v22 = (void *)*v21;
          operator delete(v21);
          uint64_t v21 = v22;
        }
        while (v22);
      }
      unint64_t v24 = (void *)*((void *)v2 - 5);
      v2 -= 40;
      unint64_t v23 = v24;
      *(void *)BOOL v2 = 0;
      if (v24) {
        operator delete(v23);
      }
    }
    while (v2 != v20);
    BOOL v2 = v20;
  }
  if (v2) {
LABEL_29:
  }
    operator delete(v2);
  return v10;
}

void *std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v32, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        uint64_t v15 = a2;
        int v14 = *(uint64_t **)a2;
        size_t v13 = *(void *)(v15 + 8);
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = *((void *)v12 + 1);
            if (v17 == v8)
            {
              if (*((void *)v12 + 3) == v13 && !memcmp(*((const void **)v12 + 2), v14, v13)) {
                return v12;
              }
            }
            else if ((v17 & (v9 - 1)) != v3)
            {
              goto LABEL_25;
            }
            unint64_t v12 = *(void **)v12;
            if (!v12) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = *((void *)v12 + 1);
          if (v16 == v8)
          {
            if (*((void *)v12 + 3) == v13 && !memcmp(*((const void **)v12 + 2), v14, v13)) {
              return v12;
            }
          }
          else
          {
            if (v16 >= v9) {
              v16 %= v9;
            }
            if (v16 != v3) {
              break;
            }
          }
          unint64_t v12 = *(void **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_25:
  unint64_t v12 = operator new(0x20uLL);
  *(void *)unint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((_OWORD *)v12 + 1) = *a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v9 && (float)(v19 * (float)v9) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_28:
      *(void *)unint64_t v12 = *v21;
LABEL_63:
      *uint64_t v21 = v12;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_39;
    }
    if (prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v9) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v29 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v21) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * v8);
        if (v21) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v8;
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v8));
      if (v21) {
        goto LABEL_28;
      }
    }
  }
  *(void *)unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v30 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9) {
        v30 %= v9;
      }
    }
    else
    {
      v30 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1924E7230(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float Espresso::AOT::DTrees::reduce_argmaxCpuCp(double *a1)
{
  if (a1[6] > 1.0195) {
    return 30.019;
  }
  if (a1[1] <= 18.235) {
    return 1.9405;
  }
  float result = 5.0251;
  if (*a1 > 0.0131) {
    return 7.4579;
  }
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxCpuDp(double *a1)
{
  if (a1[6] > 1.0195) {
    return 30.019;
  }
  if (a1[1] <= 18.235) {
    return 1.666;
  }
  float result = 5.0403;
  if (*a1 > 0.0131) {
    return 15.108;
  }
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxCpuEp(double *a1)
{
  if (a1[6] > 1.0195) {
    return 45.028;
  }
  if (a1[1] <= 18.235) {
    return 2.0945;
  }
  float result = 4.0248;
  if (*a1 > 0.0131) {
    return 12.711;
  }
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxGpuCp(double *a1)
{
  if (a1[6] > 1.0195) {
    return 18.598;
  }
  if (a1[1] <= 18.235) {
    return 2.3366;
  }
  float result = 7.4213;
  if (*a1 > 0.0131) {
    return 10.051;
  }
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxGpuDp(double *a1)
{
  if (a1[6] > 1.0195) {
    return 10.239;
  }
  if (a1[1] <= 18.235) {
    return 4.2869;
  }
  float result = 14.042;
  if (*a1 > 0.0131) {
    return 18.13;
  }
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxGpuEp(double *a1)
{
  if (a1[6] > 1.0195) {
    return 16.233;
  }
  if (a1[1] <= 18.235) {
    return 4.3152;
  }
  float result = 3.6363;
  if (*a1 > 0.0131) {
    return 27.195;
  }
  return result;
}

void Espresso::AOT::Classic::ClassicAOTCompilerBackend::DumpE5ForPlatform(uint64_t a1, unsigned int *a2)
{
  v138[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)a1);
  unint64_t v5 = (Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320);
  uint64_t OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  int v7 = *(char *)(OutputBundlePath + 23);
  if (v7 >= 0) {
    size_t v8 = *(unsigned __int8 *)(OutputBundlePath + 23);
  }
  else {
    size_t v8 = *(void *)(OutputBundlePath + 8);
  }
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint8x8_t v10 = (const void **)OutputBundlePath;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v8 + 1;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8 + 1;
    if (!v8) {
      goto LABEL_15;
    }
  }
  if (v7 >= 0) {
    int v14 = v10;
  }
  else {
    int v14 = *v10;
  }
  memmove(p_dst, v14, v8);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v8) = 47;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v4 + 24))(v4, a2);
  int v16 = *(char *)(v15 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)v15;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)v15;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(v15 + 8);
  }
  float v19 = std::string::append(&__dst, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v136 = v19->__r_.__value_.__r.__words[2];
  long long v135 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (espresso_set_compilation_platform((EspressoLight::espresso_aot_plan *)*a2, a2[2]))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error setting compilation platform");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v21 = Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1);
  if (((*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v4 + 16))(v4, a2) & 1) == 0)
  {
    long long v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v137, *(void *)a2);
    uint64_t v101 = std::string::insert(&v137, 0, "Invalid platform id: ");
    long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v100, &__dst);
    __cxa_throw(v100, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __dst.__r_.__value_.__r.__words[0] = 0;
  LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
  __dst.__r_.__value_.__r.__words[2] = 32789;
  int v124 = 0;
  uint64_t v125 = 28672;
  int v126 = 0;
  uint64_t v127 = 32784;
  int v128 = 0;
  uint64_t v129 = 32785;
  int v130 = 0;
  BOOL v22 = E5Common::PlatformIdentifier::operator==((uint64_t)&__dst, (uint64_t)a2);
  unint64_t v23 = &__dst;
  if (!v22)
  {
    BOOL v24 = E5Common::PlatformIdentifier::operator==((uint64_t)&__dst.__r_.__value_.__r.__words[2], (uint64_t)a2);
    unint64_t v23 = (std::string *)&__dst.__r_.__value_.__r.__words[2];
    if (!v24)
    {
      BOOL v25 = E5Common::PlatformIdentifier::operator==((uint64_t)&v125, (uint64_t)a2);
      unint64_t v23 = (std::string *)&v125;
      if (!v25)
      {
        BOOL v26 = E5Common::PlatformIdentifier::operator==((uint64_t)&v127, (uint64_t)a2);
        unint64_t v23 = (std::string *)&v127;
        if (!v26)
        {
          BOOL v27 = E5Common::PlatformIdentifier::operator==((uint64_t)&v129, (uint64_t)a2);
          unint64_t v23 = (std::string *)&v131;
          if (v27) {
            unint64_t v23 = (std::string *)&v129;
          }
        }
      }
    }
  }
  if ((char *)v23 - (char *)&__dst == 80)
  {
    BOOL v28 = E5Common::PlatformIdentifier::operator==((uint64_t)a2, 32786);
    if (v28) {
      unsigned int v29 = 50008;
    }
    else {
      unsigned int v29 = 10008;
    }
    if (!v28 && v21)
    {
      if (Espresso::hardware::is_virtual_machine((Espresso::hardware *)v28)) {
        unsigned int v29 = 0;
      }
      else {
        unsigned int v29 = 10007;
      }
    }
  }
  else
  {
    unsigned int v29 = 0;
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v129);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v127);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v125);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__dst.__r_.__value_.__r.__words[2]);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__dst);
  aot_context = Espresso::espresso_create_aot_context(v29, -1);
  long long v31 = aot_context;
  if (!aot_context)
  {
    int v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v103, "Error creating context");
    __cxa_throw(v103, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  plan = (const void *)espresso_create_plan(aot_context, 16);
  if (!plan)
  {
    int v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v104, "Error creating AOT plan");
    __cxa_throw(v104, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v33)
  {
    long long v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v105, "Plan is not an AOT plan.");
    __cxa_throw(v105, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v34 = v33;
  char DumpIrOnly = Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  EspressoLight::espresso_aot_plan::set_dump_ir_only((uint64_t)v34, DumpIrOnly);
  uint64_t BuildInfo = Espresso::AOT::AOTCompilerBackend::GetBuildInfo((Espresso::AOT::AOTCompilerBackend *)a1);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v133, BuildInfo);
  EspressoLight::espresso_aot_plan::set_build_info((uint64_t)v34, v133);
  std::string v37 = v134;
  if (v134)
  {
    while (1)
    {
      BOOL v38 = *(char **)v37;
      if (v37[63] < 0)
      {
        operator delete(*((void **)v37 + 5));
        if ((v37[39] & 0x80000000) == 0) {
          goto LABEL_46;
        }
LABEL_49:
        operator delete(*((void **)v37 + 2));
        operator delete(v37);
        std::string v37 = v38;
        if (!v38) {
          break;
        }
      }
      else
      {
        if (v37[39] < 0) {
          goto LABEL_49;
        }
LABEL_46:
        operator delete(v37);
        std::string v37 = v38;
        if (!v38) {
          break;
        }
      }
    }
  }
  unint64_t v39 = (void *)v133[0];
  v133[0] = 0;
  if (v39) {
    operator delete(v39);
  }
  uint64_t RequireAneResident = Espresso::AOT::CompilerOptionsForE5::GetRequireAneResident((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  if (*(char *)(RequireAneResident + 23) < 0)
  {
    uint64_t v44 = *(void *)(RequireAneResident + 8);
    if (v44 != 2)
    {
      if (v44 != 6)
      {
        if (v44 == 9
          && **(void **)RequireAneResident == 0x636E657265666E69
          && *(unsigned char *)(*(void *)RequireAneResident + 8) == 101)
        {
LABEL_69:
          int v46 = 1;
          goto LABEL_81;
        }
LABEL_170:
        uint64_t v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v98, &__dst);
        __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v42 = *(void *)RequireAneResident;
      goto LABEL_73;
    }
    if (**(_WORD **)RequireAneResident != 28526) {
      goto LABEL_170;
    }
LABEL_80:
    int v46 = 0;
    goto LABEL_81;
  }
  int v41 = *(unsigned __int8 *)(RequireAneResident + 23);
  if (v41 == 2)
  {
    if (*(_WORD *)RequireAneResident != 28526) {
      goto LABEL_170;
    }
    goto LABEL_80;
  }
  uint64_t v42 = RequireAneResident;
  if (v41 != 6)
  {
    if (v41 != 9) {
      goto LABEL_170;
    }
    if (*(void *)RequireAneResident != 0x636E657265666E69 || *(unsigned char *)(RequireAneResident + 8) != 101) {
      goto LABEL_170;
    }
    goto LABEL_69;
  }
LABEL_73:
  int v47 = *(_DWORD *)v42;
  int v48 = *(unsigned __int16 *)(v42 + 4);
  if (v47 != 1769108595 || v48 != 29795) {
    goto LABEL_170;
  }
  int v46 = 2;
LABEL_81:
  EspressoLight::espresso_aot_plan::set_ane_residency_requirement((uint64_t)v34, v46);
  char UseClassicAOTCompilerOldHW = Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  EspressoLight::espresso_aot_plan::set_use_classic_aot_old_hw((uint64_t)v34, UseClassicAOTCompilerOldHW);
  ComputeUnits = (E5RT *)Espresso::AOT::CompilerOptionsForE5::GetComputeUnits((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  int64_t v52 = *(int **)ComputeUnits;
  BOOL v53 = (int *)*((void *)ComputeUnits + 1);
  if (*(int **)ComputeUnits == v53)
  {
    uint64_t v54 = 0;
    if (!v21) {
      goto LABEL_94;
    }
    goto LABEL_88;
  }
  uint64_t v54 = 0;
  do
  {
    uint64_t v55 = *v52;
    if (v55 >= 3)
    {
      size_t v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v137, v55);
      std::string::size_type v96 = std::string::insert(&v137, 0, "Unexpected compute unit: ");
      long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v95, &__dst);
      __cxa_throw(v95, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v54 |= qword_192DC4F78[v55];
    ++v52;
  }
  while (v52 != v53);
  if (v21)
  {
LABEL_88:
    if (E5RT::IsAVirtualMachine(ComputeUnits))
    {
      if (v54) {
        BOOL v56 = (v54 & 1) == 0;
      }
      else {
        BOOL v56 = 0;
      }
      if (v56)
      {
        uint64_t v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v117, "On-device compilation within a VM only supports CPU currently.");
        __cxa_throw(v117, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v54 = 1;
    }
  }
LABEL_94:
  EspressoLight::espresso_aot_plan::set_compute_units_requirement((uint64_t)v34, v54);
  char BuildForProfiling = Espresso::AOT::CompilerOptionsForE5::GetBuildForProfiling((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  EspressoLight::espresso_aot_plan::set_build_for_profiling((uint64_t)v34, BuildForProfiling);
  uint64_t AneOptionsPlistPath = Espresso::AOT::CompilerOptionsForE5::GetAneOptionsPlistPath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  uint64_t v59 = *(unsigned __int8 *)(AneOptionsPlistPath + 23);
  if ((v59 & 0x80u) != 0) {
    uint64_t v59 = *(void *)(AneOptionsPlistPath + 8);
  }
  if (v59)
  {
    uint64_t v60 = Espresso::AOT::CompilerOptionsForE5::GetAneOptionsPlistPath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
    if (*(char *)(v60 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v60, *(void *)(v60 + 8));
    }
    else
    {
      long long v61 = *(_OWORD *)v60;
      v132.__r_.__value_.__r.__words[2] = *(void *)(v60 + 16);
      *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v61;
    }
    EspressoLight::espresso_aot_plan::set_ane_options_plist_path((uint64_t)v34, (__n128 *)&v132);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  CpuPreferredBackstd::vector<std::string>::pointer end = Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  uint64_t v63 = *(unsigned __int8 *)(CpuPreferredBackend + 23);
  int v64 = (char)v63;
  if ((v63 & 0x80u) != 0) {
    uint64_t v63 = *(void *)(CpuPreferredBackend + 8);
  }
  if (v63 == 3)
  {
    long long v65 = v64 >= 0 ? (unsigned __int16 *)CpuPreferredBackend : *(unsigned __int16 **)CpuPreferredBackend;
    int v66 = *v65;
    int v67 = *((unsigned __int8 *)v65 + 2);
    if (v66 == 27757 && v67 == 99) {
      goto LABEL_119;
    }
  }
  uint64_t v69 = Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  uint64_t v70 = *(unsigned __int8 *)(v69 + 23);
  int v71 = (char)v70;
  if ((v70 & 0x80u) != 0) {
    uint64_t v70 = *(void *)(v69 + 8);
  }
  if (v70 == 8)
  {
    uint64_t v72 = v71 >= 0 ? (void *)v69 : *(void **)v69;
    if (*v72 == 0x736E6E622F636C6DLL)
    {
LABEL_119:
      int v73 = (E5Common::E5PlatformManager *)Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&__dst, (const Espresso::AOT::AOTCompilerOptions *)(a1 + 184));
      *((unsigned char *)&v137.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v137, "e5");
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "platforms");
      uint64_t v74 = E5Common::E5PlatformManager::Instance(v73);
      uint64_t v75 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v74 + 24))(v74, a2);
      if (*(char *)(v75 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)v75, *(void *)(v75 + 8));
      }
      else
      {
        long long v76 = *(_OWORD *)v75;
        v120.__r_.__value_.__r.__words[2] = *(void *)(v75 + 16);
        *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v76;
      }
      int v121 = 3;
      Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)&__dst, (long long *)&v137, (long long *)&__p, (uint64_t)&v120);
      if (v121 != -1) {
        ((void (*)(char *, std::string *))off_1EE39B8D8[v121])(v118, &v120);
      }
      int v121 = -1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_126;
        }
      }
      else if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_126;
      }
      operator delete(v137.__r_.__value_.__l.__data_);
LABEL_126:
      Espresso::AOT::AOTCompilerBackend::GetBuildInfo((Espresso::AOT::AOTCompilerBackend *)a1);
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> const&>();
    }
  }
  uint64_t InputPath = Espresso::AOT::CompilerOptionsForE5::GetInputPath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  if (v29 == 50008 || v29 == 0) {
    uint64_t v79 = 65568;
  }
  else {
    uint64_t v79 = 65552;
  }
  if (*(char *)(InputPath + 23) >= 0) {
    int v80 = (char *)InputPath;
  }
  else {
    int v80 = *(char **)InputPath;
  }
  if (espresso_plan_add_network(v34, v80, v79, (uint64_t)v118))
  {
    espresso_plan_get_error_info((uint64_t)v34);
    int v107 = v106;
    std::string::size_type v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v109 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v137, "Error adding network: ");
    uint64_t v110 = std::string::append(v109, v107);
    long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v108, &__dst);
    __cxa_throw(v108, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::size_type v81 = HIBYTE(v136);
  if (v136 < 0) {
    std::string::size_type v81 = *((void *)&v135 + 1);
  }
  __dst.__r_.__value_.__l.__size_ = v81;
  __dst.__r_.__value_.__r.__words[0] = 1;
  long long v82 = &v135;
  if (v136 < 0) {
    long long v82 = (long long *)v135;
  }
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v82;
  v138[0] = &__dst;
  if (espresso_plan_build_with_options(v34, (uint64_t)v138, 1))
  {
    espresso_plan_get_error_info((uint64_t)v34);
    uint64_t v113 = v112;
    uint64_t v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Error building plan: ");
    long long v115 = std::string::append(&__p, v113);
    long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v114, &v137);
    __cxa_throw(v114, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v83 = v119;
  uint64_t v84 = Espresso::AOT::CompilerOptionsForE5::GetInputPath(v5);
  if (*(char *)(v84 + 23) >= 0) {
    int v86 = (Espresso *)v84;
  }
  else {
    int v86 = *(Espresso **)v84;
  }
  int v87 = SHIBYTE(v136);
  if (v136 >= 0) {
    size_t v88 = HIBYTE(v136);
  }
  else {
    size_t v88 = *((void *)&v135 + 1);
  }
  unint64_t v89 = v88 + 7;
  if (v88 + 7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v89 >= 0x17)
  {
    uint64_t v91 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17) {
      uint64_t v91 = v89 | 7;
    }
    uint64_t v92 = v91 + 1;
    int v90 = operator new(v91 + 1);
    v137.__r_.__value_.__l.__size_ = v88 + 7;
    v137.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
    v137.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
  }
  else
  {
    memset(&v137, 0, sizeof(v137));
    int v90 = &v137;
    *((unsigned char *)&v137.__r_.__value_.__s + 23) = v88 + 7;
    if (!v88) {
      goto LABEL_159;
    }
  }
  if (v87 >= 0) {
    int v93 = &v135;
  }
  else {
    int v93 = (long long *)v135;
  }
  memmove(v90, v93, v88);
LABEL_159:
  strcpy((char *)v90 + v88, ".bundle");
  if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v94 = &v137;
  }
  else {
    int v94 = (std::string *)v137.__r_.__value_.__r.__words[0];
  }
  Espresso::EspressoReporterUtilities::send_network_info_to_coreanalytics((Espresso::EspressoReporterUtilities *)v34, (void *)v83, v86, (char *)v94, v85);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  espresso_plan_build_clean(v34);
  espresso_plan_destroy((std::string::size_type)v34);
  espresso_context_destroy(v31);
  if (SHIBYTE(v136) < 0) {
    operator delete((void *)v135);
  }
}

void sub_1924E82E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v51 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v52 - 153) < 0) {
        operator delete(*(void **)(v52 - 176));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v50);
  goto LABEL_8;
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> const&>()
{
}

void sub_1924E8638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C40CB988097);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::Classic::ClassicAOTCompilerBackend::ClassicAOTCompilerBackend(void *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12, a2);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, a3);
  Espresso::AOT::AOTCompilerBackend::AOTCompilerBackend((uint64_t)a1, v12, (uint64_t)__p);
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    do
    {
      unint64_t v9 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0) {
LABEL_10:
        }
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v6);
      unint64_t v6 = v9;
    }
    while (v9);
  }
  int v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12);
  *a1 = &unk_1EE36B750;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(a1 + 23), a2);
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 40), a2);
  return a1;
}

void sub_1924E8778(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_1924E8794(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_1924E87A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_1924E87C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Classic::ClassicAOTCompilerBackend::GetOutputPaths(Espresso::AOT::Classic::ClassicAOTCompilerBackend *this@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320));
  if (*(char *)(OutputBundlePath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)OutputBundlePath, *(void *)(OutputBundlePath + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)OutputBundlePath;
    __p.__r_.__value_.__r.__words[2] = *(void *)(OutputBundlePath + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1924E8884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::Classic::ClassicAOTCompilerBackend::GetOutputBundle(Espresso::AOT::Classic::ClassicAOTCompilerBackend *this)
{
  return Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320));
}

void Espresso::AOT::Classic::ClassicAOTCompilerBackend::Run(Espresso::AOT::Classic::ClassicAOTCompilerBackend *this)
{
  BOOL v2 = (Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320);
  for (uint64_t i = *(uint64_t **)(Espresso::AOT::CompilerOptionsForE5::GetPlatforms((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320))
                        + 16); i; uint64_t i = (uint64_t *)*i)
  {
    long long v11 = *((_OWORD *)i + 1);
    if (!Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW(v2)
      || Espresso::AOT::Utils::IsPlatformMixANE(v11, v4, v5, v6, v7, v8, v9, v10, v11))
    {
      Espresso::AOT::Classic::ClassicAOTCompilerBackend::DumpE5ForPlatform((uint64_t)this, (unsigned int *)&v11);
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v11);
  }
}

void sub_1924E892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::AOT::Classic::ClassicAOTCompilerBackend::~ClassicAOTCompilerBackend(Espresso::AOT::Classic::ClassicAOTCompilerBackend *this)
{
  *(void *)this = &unk_1EE36B750;
  BOOL v2 = (Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);

  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
}

{
  Espresso::AOT::AOTCompilerOptions *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE36B750;
  BOOL v2 = (Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);

  JUMPOUT(0x192FF16B0);
}

void std::array<E5Common::PlatformIdentifier const,5ul>::~array(uint64_t a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 + 64));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 + 48));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 + 32));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 + 16));

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t Espresso::AOT::Classic::ClassicAOTCompilerBackend::DumpE5ForPlatform(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

void Espresso::create_aot_context(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v9 = a1;
  Espresso::create_context(&v9, a2, &v7);
  uint64_t v4 = v7;
  if (v7)
  {
    *(unsigned char *)(v7 + 127) = 1;
    uint64_t v5 = v8;
    *a3 = v4;
    a3[1] = v5;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    uint64_t v6 = v8;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void Espresso::create_context(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  Espresso::abstract_engine_factory::shared(&v13);
  Espresso::abstract_engine_factory::engine_for_platform(v13, a1, &v11);
  uint64_t v7 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = v11;
    if (v11)
    {
LABEL_4:
      (*(void (**)(Espresso *, Espresso **, uint64_t))(*(void *)v8 + 32))(v8, &v11, a2);
      int v9 = v12;
      if (!v12) {
        return;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = v11;
    if (v11) {
      goto LABEL_4;
    }
  }
  uint64_t v10 = Espresso::espresso_os_log_subsystem(v8, v6);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    Espresso::create_context(a1, v10);

    *a3 = 0;
    a3[1] = 0;
    int v9 = v12;
    if (!v12) {
      return;
    }
  }
  else
  {

    *a3 = 0;
    a3[1] = 0;
    int v9 = v12;
    if (!v12) {
      return;
    }
  }
LABEL_9:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1924E8D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v23->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v23);
  }
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  __cxa_begin_catch(exception_object);
  BOOL v22 = Espresso::espresso_os_log_subsystem(0, v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
    Espresso::create_context();
  }

  *std::string::size_type v18 = 0;
  v18[1] = 0;
  __cxa_end_catch();
}

EspressoLight *Espresso::espresso_create_aot_context(unsigned int a1, int a2)
{
  context = (EspressoLight *)espresso_create_context(a1, a2);
  uint64_t v4 = context;
  if (!context) {
    return v4;
  }
  uint64_t v5 = EspressoLight::espresso_context::unbox(context, v3);
  EspressoLight::espresso_context::get_internal_context((uint64_t)v5, v8);
  uint64_t v6 = (std::__shared_weak_count *)v8[1];
  *(unsigned char *)(v8[0] + 127) = 1;
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v4;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return v4;
}

void Espresso::create_context(int *a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl(&dword_1920CB000, a2, OS_LOG_TYPE_ERROR, "Unsupported Engine type %d.", (uint8_t *)v3, 8u);
}

void Espresso::create_context()
{
  OUTLINED_FUNCTION_0();
  (*(void (**)(void))(v0 + 16))();
  OUTLINED_FUNCTION_1(&dword_1920CB000, v1, v2, "Cannot create context, Caught exception: %s", v3, v4, v5, v6, 2u);
}

uint64_t std::__shared_ptr_pointer<MIL::UnknownLocation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC4FD0) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC4FD0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC4FD0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC4FD0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

float Espresso::AOT::DTrees::gatherCpuFp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuIp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuJp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuKp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuGp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuHp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherGpuFp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuIp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuJp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuKp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuGp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuHp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherCpuCp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::gatherCpuDp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::gatherGpuCp()
{
  return 14.0;
}

float Espresso::AOT::DTrees::gatherGpuDp()
{
  return 14.0;
}

float Espresso::AOT::DTrees::gatherGpuEp()
{
  return 14.0;
}

uint64_t *E5Common::Utils::MILDictToCpp<unsigned int,unsigned long long>@<X0>(MIL::IRValue *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(a1);
  uint64_t v4 = MIL::IRDictionaryValue::begin(v3);
  uint64_t result = (uint64_t *)MIL::IRDictionaryValue::end(v3);
  for (i = result; (uint64_t *)v4 != i; uint64_t v4 = *(void *)v4)
  {
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 32));
    uint64_t v7 = MIL::IRValue::GetScalar<unsigned long long>();
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 16));
    unsigned int v8 = MIL::IRValue::GetScalar<unsigned int>();
    int v9 = &v8;
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a2, &v8, (uint64_t)&std::piecewise_construct, &v9);
    result[3] = v7;
  }
  return result;
}

void sub_1924E91B8(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924E91CC(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924E91E0(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924E91F4(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924E9208(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::GroupTagger::FindRootGroup(int8x8_t *this, unint64_t a2)
{
  uint64_t v3 = this + 7;
  do
  {
    unint64_t v14 = a2;
    int8x8_t v5 = this[8];
    if (!*(void *)&v5) {
      goto LABEL_25;
    }
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = a2;
      if (a2 >= *(void *)&v5) {
        unint64_t v7 = a2 % *(void *)&v5;
      }
    }
    else
    {
      unint64_t v7 = (*(void *)&v5 - 1) & a2;
    }
    unsigned int v8 = *(void **)(*(void *)v3 + 8 * v7);
    if (!v8 || (int v9 = (void *)*v8) == 0) {
LABEL_25:
    }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Invalid group id %lu", &v14);
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v12 = v9[1];
        if (v12 == a2)
        {
          if (v9[2] == a2) {
            goto LABEL_2;
          }
        }
        else if ((v12 & v10) != v7)
        {
          goto LABEL_25;
        }
        int v9 = (void *)*v9;
        if (!v9) {
          goto LABEL_25;
        }
      }
    }
    while (1)
    {
      unint64_t v11 = v9[1];
      if (v11 == a2) {
        break;
      }
      if (v11 >= *(void *)&v5) {
        v11 %= *(void *)&v5;
      }
      if (v11 != v7) {
        goto LABEL_25;
      }
LABEL_13:
      int v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_25;
      }
    }
    if (v9[2] != a2) {
      goto LABEL_13;
    }
LABEL_2:
    uint64_t v15 = &v14;
    uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v3, &v14, (uint64_t)&std::piecewise_construct, &v15);
    a2 = v4[3];
  }
  while (a2 != v14);
  return v4[3];
}

void Espresso::AOT::GroupTagger::AssignGroupId(void *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unsigned int v8 = (unsigned int *)operator new(4uLL);
    *unsigned int v8 = a3;
    v9[1] = v8 + 1;
    v9[2] = v8 + 1;
    v9[0] = v8;
    Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a1, 0, ((unint64_t)(v4 - v3) >> 4) - 1, a2, v9);
    operator delete(v8);
  }
}

void sub_1924E940C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(void *result, int a2, int a3, void *a4, unsigned int **a5)
{
  uint8x8_t v6 = *a5;
  int8x8_t v5 = a5[1];
  if (*a5 == v5) {
    return result;
  }
  unint64_t v7 = (int8x8_t *)result;
  unsigned int v8 = result + 12;
  int v9 = result + 7;
  if (a2 > a3)
  {
    uint64_t v10 = *v8;
    do
    {
      int v43 = (unint64_t *)v8;
      uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, (unint64_t *)v8, (uint64_t)&std::piecewise_construct, &v43);
      result[3] = v10;
      uint64_t v10 = *v8 + 1;
      *unsigned int v8 = v10;
      ++v6;
    }
    while (v6 != v5);
    return result;
  }
  uint64_t v37 = a2;
  uint64_t v38 = (uint64_t)(result + 2);
  int v11 = a3 + 1;
  uint64_t v12 = *v8;
  std::string v36 = a5[1];
  while (2)
  {
    int v43 = (unint64_t *)v8;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, (unint64_t *)v8, (uint64_t)&std::piecewise_construct, &v43)[3] = v12;
    uint64_t v13 = v37;
    while (2)
    {
      unsigned int v41 = *v6;
      int v43 = (unint64_t *)(*a4 + 16 * v13);
      int v16 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(v38, (uint64_t *)v43, (uint64_t)&std::piecewise_construct, &v43);
      uint64_t v17 = v16 + 4;
      unint64_t v18 = v16[5];
      if (!v18) {
        goto LABEL_10;
      }
      uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        unint64_t v20 = v41;
        if (v18 <= v41) {
          unint64_t v20 = v41 % v18;
        }
      }
      else
      {
        unint64_t v20 = (v18 - 1) & v41;
      }
      BOOL v21 = *(uint64_t ***)(*v17 + 8 * v20);
      if (!v21) {
        goto LABEL_10;
      }
      BOOL v22 = *v21;
      if (!v22) {
        goto LABEL_10;
      }
      if (v19.u32[0] < 2uLL)
      {
        unint64_t v23 = v18 - 1;
        while (1)
        {
          uint64_t v25 = v22[1];
          if (v25 == v41)
          {
            if (*((_DWORD *)v22 + 4) == v41) {
              goto LABEL_32;
            }
          }
          else if ((v25 & v23) != v20)
          {
            goto LABEL_10;
          }
          BOOL v22 = (uint64_t *)*v22;
          if (!v22) {
            goto LABEL_10;
          }
        }
      }
      while (1)
      {
        unint64_t v24 = v22[1];
        if (v24 == v41) {
          break;
        }
        if (v24 >= v18) {
          v24 %= v18;
        }
        if (v24 != v20) {
          goto LABEL_10;
        }
LABEL_21:
        BOOL v22 = (uint64_t *)*v22;
        if (!v22) {
          goto LABEL_10;
        }
      }
      if (*((_DWORD *)v22 + 4) != v41) {
        goto LABEL_21;
      }
LABEL_32:
      unint64_t v40 = 0;
      int v43 = (unint64_t *)&v41;
      unint64_t v26 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)(v16 + 4), &v41, (uint64_t)&std::piecewise_construct, (_DWORD **)&v43)[3];
      while (2)
      {
        unint64_t v42 = v26;
        int8x8_t v28 = v7[8];
        if (!*(void *)&v28) {
          goto LABEL_55;
        }
        uint8x8_t v29 = (uint8x8_t)vcnt_s8(v28);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          unint64_t v30 = v26;
          if (v26 >= *(void *)&v28) {
            unint64_t v30 = v26 % *(void *)&v28;
          }
        }
        else
        {
          unint64_t v30 = (*(void *)&v28 - 1) & v26;
        }
        long long v31 = *(void **)(*v9 + 8 * v30);
        if (!v31 || (char v32 = (void *)*v31) == 0) {
LABEL_55:
        }
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Invalid group id %lu", &v42);
        if (v29.u32[0] < 2uLL)
        {
          uint64_t v33 = *(void *)&v28 - 1;
          while (1)
          {
            uint64_t v35 = v32[1];
            if (v35 == v26)
            {
              if (v32[2] == v26) {
                goto LABEL_33;
              }
            }
            else if ((v35 & v33) != v30)
            {
              goto LABEL_55;
            }
            char v32 = (void *)*v32;
            if (!v32) {
              goto LABEL_55;
            }
          }
        }
        while (2)
        {
          unint64_t v34 = v32[1];
          if (v34 != v26)
          {
            if (v34 >= *(void *)&v28) {
              v34 %= *(void *)&v28;
            }
            if (v34 != v30) {
              goto LABEL_55;
            }
            goto LABEL_44;
          }
          if (v32[2] != v26)
          {
LABEL_44:
            char v32 = (void *)*v32;
            if (!v32) {
              goto LABEL_55;
            }
            continue;
          }
          break;
        }
LABEL_33:
        int v43 = &v42;
        BOOL v27 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, &v42, (uint64_t)&std::piecewise_construct, &v43);
        unint64_t v26 = v27[3];
        if (v26 != v42) {
          continue;
        }
        break;
      }
      unint64_t v40 = v27[3];
      uint64_t v14 = *v8;
      int v43 = &v40;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, &v40, (uint64_t)&std::piecewise_construct, &v43)[3] = v14;
LABEL_10:
      uint64_t v15 = *v8;
      int v43 = (unint64_t *)&v41;
      uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v17, &v41, (uint64_t)&std::piecewise_construct, (_DWORD **)&v43);
      result[3] = v15;
      if (v11 != ++v13) {
        continue;
      }
      break;
    }
    uint64_t v12 = *v8 + 1;
    *unsigned int v8 = v12;
    if (++v6 != v36) {
      continue;
    }
    return result;
  }
}

void *Espresso::AOT::GroupTagger::AssignGroupIds(void *result, void *a2, unsigned int **a3)
{
  uint64_t v3 = a2[1];
  if (*a2 != v3) {
    return Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(result, 0, ((unint64_t)(v3 - *a2) >> 4) - 1, a2, a3);
  }
  return result;
}

void Espresso::AOT::GroupTagger::MoveOpsAndAssignGroupIdsForInterval(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, unsigned int **a7)
{
  int v9 = (MIL::Builder::BlockBuilder **)a4;
  int v217 = 0;
  v218 = 0;
  unint64_t v219 = 0;
  char v214 = 0;
  std::string v215 = 0;
  unint64_t v216 = 0;
  char v211 = 0;
  unint64_t v212 = 0;
  int v213 = 0;
  uint64_t v10 = *(MIL::Builder::BlockBuilder **)a4;
  int v11 = *(std::__shared_weak_count **)(a4 + 8);
  int v207 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v208 = 0u;
  *(_OWORD *)v209 = 0u;
  int v210 = 1065353216;
  long long v224 = 0u;
  long long v225 = 0u;
  int v226 = 1065353216;
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v222, v10);
  uint64_t v12 = (MIL::Builder::OperationBuilder **)v222;
  uint64_t v13 = v223;
  long long v205 = a5;
  uint64_t v206 = a6;
  long long v202 = v9;
  if (v222 != v223)
  {
    while (1)
    {
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*v12);
      if (!(*(uint64_t (**)(uint64_t))(*(void *)Operator + 240))(Operator)) {
        goto LABEL_7;
      }
      uint64_t v16 = MIL::Builder::OperationBuilder::GetOperator(*v12);
      uint64_t v17 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 240))(v16);
      if (!MIL::IRMemoryEffect::TryAsStateReadEffect(v17))
      {
        uint64_t v18 = MIL::Builder::OperationBuilder::GetOperator(*v12);
        uint8x8_t v19 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 240))(v18);
        if (!MIL::IRMemoryEffect::TryAsStateWriteEffect(v19)) {
          goto LABEL_7;
        }
      }
      char v221 = 5;
      strcpy((char *)__p, "input");
      ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
      if (v221 < 0) {
        operator delete(__p[0]);
      }
      uint64_t Name = (void *)MIL::Builder::Variable::TryGetName(ArgumentForParameter);
      if (!Name) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("State input needs to have a name.");
      }
      __p[0] = Name;
      BOOL v22 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v224, (uint64_t)Name, (uint64_t)&std::piecewise_construct, (long long **)__p);
      unint64_t v23 = v22;
      unint64_t v24 = *v12;
      unint64_t v26 = (MIL::Builder::OperationBuilder **)v22[6];
      unint64_t v25 = v22[7];
      if ((unint64_t)v26 >= v25) {
        break;
      }
      *unint64_t v26 = v24;
      uint64_t v14 = (uint64_t)(v26 + 1);
LABEL_6:
      v23[6] = v14;
LABEL_7:
      v12 += 2;
      if (v12 == (MIL::Builder::OperationBuilder **)v13)
      {
        uint64_t v12 = (MIL::Builder::OperationBuilder **)v222;
        goto LABEL_37;
      }
    }
    BOOL v27 = (MIL::Builder::OperationBuilder ***)(v22 + 5);
    int8x8_t v28 = (char *)v22[5];
    uint64_t v29 = ((char *)v26 - v28) >> 3;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v25 - (void)v28;
    if (v31 >> 2 > v30) {
      unint64_t v30 = v31 >> 2;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v33 = v32;
      unint64_t v34 = (char *)operator new(8 * v32);
      unint64_t v32 = v33;
      uint64_t v35 = (MIL::Builder::OperationBuilder **)&v34[8 * v29];
      *uint64_t v35 = v24;
      uint64_t v14 = (uint64_t)(v35 + 1);
      if (v26 == (MIL::Builder::OperationBuilder **)v28) {
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v34 = 0;
      uint64_t v35 = (MIL::Builder::OperationBuilder **)(8 * v29);
      *(void *)(8 * v29) = v24;
      uint64_t v14 = 8 * v29 + 8;
      if (v26 == (MIL::Builder::OperationBuilder **)v28)
      {
LABEL_34:
        v23[5] = (uint64_t)v35;
        v23[6] = v14;
        v23[7] = (uint64_t)&v34[8 * v32];
        a5 = v205;
        a6 = v206;
        int v9 = v202;
        if (v26) {
          operator delete(v26);
        }
        goto LABEL_6;
      }
    }
    unint64_t v36 = (char *)(v26 - 1) - v28;
    if (v36 < 0x58) {
      goto LABEL_338;
    }
    if ((unint64_t)(v28 - v34) < 0x20) {
      goto LABEL_338;
    }
    uint64_t v37 = (v36 >> 3) + 1;
    uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v39 = &v26[v38 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v35 = (MIL::Builder::OperationBuilder **)((char *)v35 - v38);
    unint64_t v40 = &v34[8 * v29 - 16];
    unsigned int v41 = v26 - 2;
    uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
      *(_OWORD *)unint64_t v40 = v43;
      v40 -= 32;
      v41 -= 4;
      v42 -= 4;
    }
    while (v42);
    unint64_t v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_338:
      do
      {
        uint64_t v44 = *--v26;
        *--uint64_t v35 = v44;
      }
      while (v26 != (MIL::Builder::OperationBuilder **)v28);
    }
    unint64_t v26 = *v27;
    goto LABEL_34;
  }
LABEL_37:
  if (v12)
  {
    int v45 = v223;
    int v46 = (uint64_t *)v12;
    if (v223 != (uint64_t *)v12)
    {
      do
      {
        int v47 = (std::__shared_weak_count *)*(v45 - 1);
        if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
        v45 -= 2;
      }
      while (v45 != (uint64_t *)v12);
      int v46 = v222;
    }
    v223 = (uint64_t *)v12;
    operator delete(v46);
  }
  int v48 = (void *)v225;
  if ((void)v225)
  {
    while (1)
    {
      uint64_t v49 = v48[5];
      uint64_t v50 = v48[6];
      if (v50 != v49) {
        break;
      }
LABEL_48:
      int v48 = (void *)*v48;
      if (!v48)
      {
        uint64_t v69 = (char *)v225;
        a5 = v205;
        a6 = v206;
        int v9 = v202;
        if ((void)v225)
        {
          do
          {
            uint64_t v101 = *(char **)v69;
            long long v102 = (void *)*((void *)v69 + 5);
            if (v102)
            {
              *((void *)v69 + 6) = v102;
              operator delete(v102);
            }
            if (v69[39] < 0) {
              operator delete(*((void **)v69 + 2));
            }
            operator delete(v69);
            uint64_t v69 = v101;
          }
          while (v101);
        }
        goto LABEL_70;
      }
    }
    unint64_t v51 = 0;
    int v52 = 1;
    while (1)
    {
      __p[0] = 0;
      __p[0] = *(void **)(v49 + 8 * v51);
      if ((int)v51 < 1)
      {
        uint64_t v53 = 0;
        if (++v51 < (v50 - v49) >> 3) {
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v53 = 0;
        unsigned int v54 = v51 - 1;
        int v55 = v52;
        do
        {
          BOOL v56 = *(MIL::Builder::OperationBuilder **)(v48[5] + 8 * v54);
          uint64_t v57 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)__p[0]);
          uint64_t v58 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(void *)v57 + 240))(v57);
          if (!MIL::IRMemoryEffect::TryAsStateReadEffect(v58)
            || (uint64_t v59 = MIL::Builder::OperationBuilder::GetOperator(v56),
                uint64_t v60 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(void *)v59 + 240))(v59),
                !MIL::IRMemoryEffect::TryAsStateReadEffect(v60)))
          {
            uint64_t v53 = *(void *)(v48[5] + 8 * v54);
          }
          --v55;
          --v54;
        }
        while (v55 > 1);
        uint64_t v49 = v48[5];
        if (++v51 < (v48[6] - v49) >> 3)
        {
LABEL_59:
          uint64_t v61 = 0;
          unint64_t v62 = v51;
          do
          {
            while (1)
            {
              uint64_t v63 = *(MIL::Builder::OperationBuilder **)(v49 + 8 * v62);
              uint64_t v64 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)__p[0]);
              long long v65 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(void *)v64 + 240))(v64);
              if (MIL::IRMemoryEffect::TryAsStateReadEffect(v65))
              {
                uint64_t v66 = MIL::Builder::OperationBuilder::GetOperator(v63);
                int v67 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(void *)v66 + 240))(v66);
                if (MIL::IRMemoryEffect::TryAsStateReadEffect(v67)) {
                  break;
                }
              }
              uint64_t v49 = v48[5];
              uint64_t v61 = *(void *)(v49 + 8 * v62++);
              if (v62 >= (v48[6] - v49) >> 3) {
                goto LABEL_67;
              }
            }
            uint64_t v49 = v48[5];
            ++v62;
          }
          while (v62 < (v48[6] - v49) >> 3);
          goto LABEL_67;
        }
      }
      uint64_t v61 = 0;
LABEL_67:
      char v222 = (uint64_t *)__p;
      uint64_t v68 = std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder * const&>,std::tuple<>>((uint64_t)v208, (uint64_t *)__p, (uint64_t)&std::piecewise_construct, &v222);
      v68[3] = v53;
      v68[4] = v61;
      uint64_t v49 = v48[5];
      uint64_t v50 = v48[6];
      ++v52;
      if (v51 >= (v50 - v49) >> 3) {
        goto LABEL_48;
      }
    }
  }
LABEL_70:
  uint64_t v70 = (void *)v224;
  *(void *)&long long v224 = 0;
  if (v70) {
    operator delete(v70);
  }
  if (!v207 || atomic_fetch_add(&v207->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v71 = (int)a2;
    unint64_t v72 = (int)a3;
    if (a2 > a3) {
      goto LABEL_75;
    }
    goto LABEL_145;
  }
  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
  std::__shared_weak_count::__release_weak(v207);
  unint64_t v71 = (int)a2;
  unint64_t v72 = (int)a3;
  if (a2 <= a3)
  {
LABEL_145:
    unint64_t v114 = v71;
    do
    {
      MIL::Builder::BlockBuilder::GetOperation(*v9);
      unint64_t v116 = 0x9DDFEA08EB382D69 * (((8 * v224) + 8) ^ DWORD1(v224));
      unint64_t v117 = 0x9DDFEA08EB382D69 * (DWORD1(v224) ^ (v116 >> 47) ^ v116);
      unint64_t v118 = 0x9DDFEA08EB382D69 * (v117 ^ (v117 >> 47));
      if (!v115)
      {
        if (!v208[1]) {
          goto LABEL_294;
        }
        uint8x8_t v121 = (uint8x8_t)vcnt_s8((int8x8_t)v208[1]);
        v121.i16[0] = vaddlv_u8(v121);
        if (v121.u32[0] > 1uLL)
        {
          unint64_t v122 = v118;
          if ((void *)v118 >= v208[1]) {
            unint64_t v122 = v118 % (unint64_t)v208[1];
          }
        }
        else
        {
          unint64_t v122 = v118 & ((unint64_t)v208[1] - 1);
        }
        size_t v141 = (void *)*((void *)v208[0] + v122);
        if (!v141) {
          goto LABEL_294;
        }
        int v142 = (void *)*v141;
        if (!*v141) {
          goto LABEL_294;
        }
        unint64_t v143 = (unint64_t)v208[1] - 1;
        if (v121.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v144 = v142[1];
            if (v118 == v144)
            {
              if (v142[2] == (void)v224) {
                goto LABEL_216;
              }
            }
            else if ((v144 & v143) != v122)
            {
              goto LABEL_294;
            }
            int v142 = (void *)*v142;
            if (!v142) {
              goto LABEL_294;
            }
          }
        }
        while (1)
        {
          unint64_t v145 = v142[1];
          if (v118 == v145)
          {
            if (v142[2] == (void)v224)
            {
LABEL_216:
              char v222 = 0;
              if (v121.u32[0] > 1uLL)
              {
                unint64_t v156 = v118;
                if ((void *)v118 >= v208[1]) {
                  unint64_t v156 = v118 % (unint64_t)v208[1];
                }
              }
              else
              {
                unint64_t v156 = v118 & v143;
              }
              v172 = (void *)*((void *)v208[0] + v156);
              if (!v172 || (int v173 = (void *)*v172) == 0) {
LABEL_326:
              }
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              if (v121.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v174 = v173[1];
                  if (v174 == v118)
                  {
                    if (v173[2] == (void)v224) {
                      goto LABEL_272;
                    }
                  }
                  else if ((v174 & v143) != v156)
                  {
                    goto LABEL_326;
                  }
                  int v173 = (void *)*v173;
                  if (!v173) {
                    goto LABEL_326;
                  }
                }
              }
              while (1)
              {
                unint64_t v179 = v173[1];
                if (v179 == v118)
                {
                  if (v173[2] == (void)v224)
                  {
LABEL_272:
                    char v222 = (uint64_t *)v173[3];
                    if (v222)
                    {
                      v175 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v206, (uint64_t *)&v222);
                      if (!v175) {
                        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                      }
                      int v176 = *((_DWORD *)v175 + 6);
                      if (v176 == a2) {
                        goto LABEL_321;
                      }
                      if (v176 > (int)a2)
                      {
                        v178 = (char *)v217;
                        int v177 = v218;
                        if (v217 == v218) {
                          goto LABEL_321;
                        }
                        do
                        {
                          v181 = *(uint64_t **)v178;
                          v180 = (std::__shared_weak_count *)*((void *)v178 + 1);
                          if (v180)
                          {
                            atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
                            uint64_t v182 = v222;
                            if (!atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                              std::__shared_weak_count::__release_weak(v180);
                            }
                            if (v181 == v182) {
                              goto LABEL_293;
                            }
                          }
                          else if (v181 == v222)
                          {
                            goto LABEL_293;
                          }
                          v178 += 16;
                        }
                        while (v178 != v177);
                        v178 = v177;
LABEL_293:
                        int v9 = v202;
                        if (v178 == v218) {
                          goto LABEL_321;
                        }
                      }
                    }
LABEL_294:
                    uint64_t v183 = v218;
                    if ((unint64_t)v218 >= v219)
                    {
                      long long v185 = (char *)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v217, &v224);
                    }
                    else
                    {
                      *(void *)v218 = v224;
                      uint64_t v184 = *((void *)&v224 + 1);
                      *((void *)v183 + 1) = *((void *)&v224 + 1);
                      if (v184) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v184 + 8), 1uLL, memory_order_relaxed);
                      }
                      long long v185 = v183 + 16;
                    }
                    v218 = v185;
                    uint64_t v131 = v212;
                    if (v212 < v213)
                    {
LABEL_300:
                      *(void *)uint64_t v131 = v114;
                      uint64_t v140 = (uint64_t)(v131 + 8);
LABEL_320:
                      unint64_t v212 = (char *)v140;
                      int v9 = v202;
                      goto LABEL_321;
                    }
                    std::string v132 = (char *)v211;
                    int64_t v186 = v212 - (unsigned char *)v211;
                    uint64_t v187 = (v212 - (unsigned char *)v211) >> 3;
                    unint64_t v188 = v187 + 1;
                    if (!((unint64_t)(v187 + 1) >> 61))
                    {
                      uint64_t v189 = v213 - (unsigned char *)v211;
                      if ((v213 - (unsigned char *)v211) >> 2 > v188) {
                        unint64_t v188 = v189 >> 2;
                      }
                      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v137 = v188;
                      }
                      if (!v137)
                      {
                        std::string::size_type v138 = 0;
                        std::__fs::filesystem::path v139 = (unint64_t *)(8 * v187);
                        *(void *)(8 * v187) = v114;
                        uint64_t v140 = 8 * v187 + 8;
                        if (v131 == v132) {
                          goto LABEL_318;
                        }
                        goto LABEL_312;
                      }
                      if (!(v137 >> 61))
                      {
                        std::string::size_type v138 = operator new(8 * v137);
                        std::__fs::filesystem::path v139 = (unint64_t *)&v138[8 * v187];
                        unint64_t *v139 = v114;
                        uint64_t v140 = (uint64_t)(v139 + 1);
                        if (v131 == v132)
                        {
LABEL_318:
                          char v211 = v139;
                          unint64_t v212 = (char *)v140;
                          int v213 = &v138[8 * v137];
                          if (v132) {
                            operator delete(v132);
                          }
                          goto LABEL_320;
                        }
LABEL_312:
                        unint64_t v190 = v131 - 8 - v132;
                        if (v190 < 0x58) {
                          goto LABEL_339;
                        }
                        if ((unint64_t)(v131 - &v138[v186]) < 0x20) {
                          goto LABEL_339;
                        }
                        uint64_t v191 = (v190 >> 3) + 1;
                        uint64_t v192 = 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
                        std::string v193 = &v131[-v192];
                        std::__fs::filesystem::path v139 = (unint64_t *)((char *)v139 - v192);
                        uint64_t v194 = &v138[8 * v187 - 16];
                        v195 = v131 - 16;
                        uint64_t v196 = v191 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v197 = *(_OWORD *)v195;
                          *(v194 - 1) = *((_OWORD *)v195 - 1);
                          _OWORD *v194 = v197;
                          v194 -= 2;
                          v195 -= 32;
                          v196 -= 4;
                        }
                        while (v196);
                        uint64_t v131 = v193;
                        if (v191 != (v191 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_339:
                          do
                          {
                            unint64_t v198 = *((void *)v131 - 1);
                            v131 -= 8;
                            *--std::__fs::filesystem::path v139 = v198;
                          }
                          while (v131 != v132);
                        }
                        goto LABEL_318;
                      }
LABEL_331:
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
LABEL_329:
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                }
                else
                {
                  if ((void *)v179 >= v208[1]) {
                    v179 %= (unint64_t)v208[1];
                  }
                  if (v179 != v156) {
                    goto LABEL_326;
                  }
                }
                int v173 = (void *)*v173;
                if (!v173) {
                  goto LABEL_326;
                }
              }
            }
          }
          else
          {
            if ((void *)v145 >= v208[1]) {
              v145 %= (unint64_t)v208[1];
            }
            if (v145 != v122) {
              goto LABEL_294;
            }
          }
          int v142 = (void *)*v142;
          if (!v142) {
            goto LABEL_294;
          }
        }
      }
      if (!v208[1]) {
        goto LABEL_172;
      }
      uint8x8_t v119 = (uint8x8_t)vcnt_s8((int8x8_t)v208[1]);
      v119.i16[0] = vaddlv_u8(v119);
      if (v119.u32[0] > 1uLL)
      {
        unint64_t v120 = v118;
        if ((void *)v118 >= v208[1]) {
          unint64_t v120 = v118 % (unint64_t)v208[1];
        }
      }
      else
      {
        unint64_t v120 = v118 & ((unint64_t)v208[1] - 1);
      }
      unsigned int v123 = (void *)*((void *)v208[0] + v120);
      if (!v123 || (int v124 = (void *)*v123) == 0)
      {
LABEL_172:
        int v128 = v215;
        if ((unint64_t)v215 >= v216)
        {
          int v130 = (char *)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v214, &v224);
        }
        else
        {
          *(void *)std::string v215 = v224;
          uint64_t v129 = *((void *)&v224 + 1);
          *((void *)v128 + 1) = *((void *)&v224 + 1);
          if (v129) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v129 + 8), 1uLL, memory_order_relaxed);
          }
          int v130 = v128 + 16;
        }
        std::string v215 = v130;
        uint64_t v131 = v212;
        if (v212 < v213) {
          goto LABEL_300;
        }
        std::string v132 = (char *)v211;
        int64_t v133 = v212 - (unsigned char *)v211;
        uint64_t v134 = (v212 - (unsigned char *)v211) >> 3;
        unint64_t v135 = v134 + 1;
        if (!((unint64_t)(v134 + 1) >> 61))
        {
          uint64_t v136 = v213 - (unsigned char *)v211;
          if ((v213 - (unsigned char *)v211) >> 2 > v135) {
            unint64_t v135 = v136 >> 2;
          }
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v137 = v135;
          }
          if (v137)
          {
            if (v137 >> 61) {
              goto LABEL_331;
            }
            std::string::size_type v138 = operator new(8 * v137);
            std::__fs::filesystem::path v139 = (unint64_t *)&v138[8 * v134];
            unint64_t *v139 = v114;
            uint64_t v140 = (uint64_t)(v139 + 1);
            if (v131 == v132) {
              goto LABEL_318;
            }
          }
          else
          {
            std::string::size_type v138 = 0;
            std::__fs::filesystem::path v139 = (unint64_t *)(8 * v134);
            *(void *)(8 * v134) = v114;
            uint64_t v140 = 8 * v134 + 8;
            if (v131 == v132) {
              goto LABEL_318;
            }
          }
          unint64_t v146 = v131 - 8 - v132;
          if (v146 < 0x58) {
            goto LABEL_340;
          }
          if ((unint64_t)(v131 - &v138[v133]) < 0x20) {
            goto LABEL_340;
          }
          uint64_t v147 = (v146 >> 3) + 1;
          uint64_t v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v149 = &v131[-v148];
          std::__fs::filesystem::path v139 = (unint64_t *)((char *)v139 - v148);
          int v150 = &v138[8 * v134 - 16];
          uint64_t v151 = v131 - 16;
          uint64_t v152 = v147 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v153 = *(_OWORD *)v151;
            *(v150 - 1) = *((_OWORD *)v151 - 1);
            _OWORD *v150 = v153;
            v150 -= 2;
            v151 -= 32;
            v152 -= 4;
          }
          while (v152);
          uint64_t v131 = v149;
          if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_340:
            do
            {
              unint64_t v154 = *((void *)v131 - 1);
              v131 -= 8;
              *--std::__fs::filesystem::path v139 = v154;
            }
            while (v131 != v132);
          }
          goto LABEL_318;
        }
        goto LABEL_329;
      }
      unint64_t v125 = (unint64_t)v208[1] - 1;
      if (v119.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v126 = v124[1];
          if (v118 == v126)
          {
            if (v124[2] == (void)v224) {
              goto LABEL_214;
            }
          }
          else if ((v126 & v125) != v120)
          {
            goto LABEL_172;
          }
          int v124 = (void *)*v124;
          if (!v124) {
            goto LABEL_172;
          }
        }
      }
      while (1)
      {
        unint64_t v127 = v124[1];
        if (v118 == v127) {
          break;
        }
        if ((void *)v127 >= v208[1]) {
          v127 %= (unint64_t)v208[1];
        }
        if (v127 != v120) {
          goto LABEL_172;
        }
LABEL_167:
        int v124 = (void *)*v124;
        if (!v124) {
          goto LABEL_172;
        }
      }
      if (v124[2] != (void)v224) {
        goto LABEL_167;
      }
LABEL_214:
      char v222 = 0;
      if (v119.u32[0] > 1uLL)
      {
        unint64_t v155 = v118;
        if ((void *)v118 >= v208[1]) {
          unint64_t v155 = v118 % (unint64_t)v208[1];
        }
      }
      else
      {
        unint64_t v155 = v118 & v125;
      }
      uint64_t v157 = (void *)*((void *)v208[0] + v155);
      if (!v157 || (v158 = (void *)*v157) == 0) {
LABEL_325:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v119.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v159 = v158[1];
          if (v159 == v118)
          {
            if (v158[2] == (void)v224) {
              goto LABEL_228;
            }
          }
          else if ((v159 & v125) != v155)
          {
            goto LABEL_325;
          }
          v158 = (void *)*v158;
          if (!v158) {
            goto LABEL_325;
          }
        }
      }
      while (2)
      {
        unint64_t v161 = v158[1];
        if (v161 != v118)
        {
          if ((void *)v161 >= v208[1]) {
            v161 %= (unint64_t)v208[1];
          }
          if (v161 != v155) {
            goto LABEL_325;
          }
LABEL_230:
          v158 = (void *)*v158;
          if (!v158) {
            goto LABEL_325;
          }
          continue;
        }
        break;
      }
      if (v158[2] != (void)v224) {
        goto LABEL_230;
      }
LABEL_228:
      uint64_t v160 = (uint64_t *)v158[4];
LABEL_237:
      char v222 = v160;
      if (!v160) {
        goto LABEL_172;
      }
      v162 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v206, (uint64_t *)&v222);
      if (!v162) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (*((_DWORD *)v162 + 6) > (int)a3) {
        goto LABEL_172;
      }
      {
        if (!v208[1]) {
          goto LABEL_324;
        }
        unint64_t v163 = 0x9DDFEA08EB382D69 * (((8 * v222) + 8) ^ ((unint64_t)v222 >> 32));
        unint64_t v164 = 0x9DDFEA08EB382D69 * (((unint64_t)v222 >> 32) ^ (v163 >> 47) ^ v163);
        unint64_t v165 = 0x9DDFEA08EB382D69 * (v164 ^ (v164 >> 47));
        uint8x8_t v166 = (uint8x8_t)vcnt_s8((int8x8_t)v208[1]);
        v166.i16[0] = vaddlv_u8(v166);
        if (v166.u32[0] > 1uLL)
        {
          unint64_t v167 = v165;
          if ((void *)v165 >= v208[1]) {
            unint64_t v167 = v165 % (unint64_t)v208[1];
          }
        }
        else
        {
          unint64_t v167 = v165 & ((unint64_t)v208[1] - 1);
        }
        uint64_t v168 = (uint64_t ***)*((void *)v208[0] + v167);
        if (!v168 || (uint64_t v169 = *v168) == 0) {
LABEL_324:
        }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v166.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v171 = v169[1];
            if (v171 == (uint64_t *)v165)
            {
              if (v169[2] == v222) {
                goto LABEL_236;
              }
            }
            else if (((unint64_t)v171 & ((unint64_t)v208[1] - 1)) != v167)
            {
              goto LABEL_324;
            }
            uint64_t v169 = (uint64_t **)*v169;
            if (!v169) {
              goto LABEL_324;
            }
          }
        }
        while (1)
        {
          unint64_t v170 = (unint64_t)v169[1];
          if (v170 == v165)
          {
            if (v169[2] == v222)
            {
LABEL_236:
              uint64_t v160 = v169[4];
              goto LABEL_237;
            }
          }
          else
          {
            if ((void *)v170 >= v208[1]) {
              v170 %= (unint64_t)v208[1];
            }
            if (v170 != v167) {
              goto LABEL_324;
            }
          }
          uint64_t v169 = (uint64_t **)*v169;
          if (!v169) {
            goto LABEL_324;
          }
        }
      }
LABEL_321:
      std::string::size_type v199 = (std::__shared_weak_count *)*((void *)&v224 + 1);
      if (*((void *)&v224 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v224 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
      ++v114;
      a5 = v205;
      a6 = v206;
    }
    while (v114 <= v72);
  }
LABEL_75:
  if (v211 != v212)
  {
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    MIL::Builder::BlockBuilder::RemoveOperations();
  }
  if (v217 != v218)
  {
    long long v224 = 0uLL;
    *(void *)&long long v225 = 0;
    uint64_t v73 = v218 - (unsigned char *)v217;
    if (v218 - (unsigned char *)v217 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v74 = (int64x2_t *)operator new((unint64_t)v73 >> 1);
    uint64_t v75 = v74;
    unint64_t v76 = ((v73 >> 4) - 1) & 0x1FFFFFFFFFFFFFFFLL;
    int v77 = (unint64_t *)v74;
    if (v76 < 3) {
      goto LABEL_341;
    }
    unint64_t v78 = v76 + 1;
    int v77 = (unint64_t *)v74 + (v78 & 0x3FFFFFFFFFFFFFFCLL);
    int64x2_t v79 = vdupq_n_s64(v71);
    int v80 = v74 + 1;
    uint64_t v81 = v78 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v80[-1] = v79;
      *int v80 = v79;
      v80 += 2;
      v81 -= 4;
    }
    while (v81);
    if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_341:
      do
        *v77++ = v71;
      while (v77 != (unint64_t *)((char *)v74 + 8 * (v73 >> 4)));
    }
    MIL::Builder::BlockBuilder::InsertOperations();
    LODWORD(a2) = ((unint64_t)v73 >> 4) + a2;
    operator delete(v75);
  }
  if (v214 != v215)
  {
    uint64_t v82 = v215 - (unsigned char *)v214;
    long long v224 = 0uLL;
    *(void *)&long long v225 = 0;
    if (v215 - (unsigned char *)v214 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v83 = (int64x2_t *)operator new((unint64_t)v82 >> 1);
    uint64_t v84 = v83;
    unint64_t v85 = v72 - (v82 >> 4) + 1;
    unint64_t v86 = ((v82 >> 4) - 1) & 0x1FFFFFFFFFFFFFFFLL;
    int v87 = (unint64_t *)v83;
    if (v86 < 3) {
      goto LABEL_342;
    }
    unint64_t v88 = v86 + 1;
    int v87 = (unint64_t *)v83 + (v88 & 0x3FFFFFFFFFFFFFFCLL);
    int64x2_t v89 = vdupq_n_s64(v85);
    int v90 = v83 + 1;
    uint64_t v91 = v88 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v90[-1] = v89;
      int64x2_t *v90 = v89;
      v90 += 2;
      v91 -= 4;
    }
    while (v91);
    if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_342:
      do
        *v87++ = v85;
      while (v87 != (unint64_t *)((char *)v83 + 8 * (v82 >> 4)));
    }
    MIL::Builder::BlockBuilder::InsertOperations();
    operator delete(v84);
    a3 = v72 - (v82 >> 4);
  }
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v224, *v9);
  Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a1, a2, a3, &v224, a7);
  if (v206[3])
  {
    uint64_t v92 = (void *)v206[2];
    if (v92)
    {
      do
      {
        int v93 = (void *)*v92;
        operator delete(v92);
        uint64_t v92 = v93;
      }
      while (v93);
    }
    v206[2] = 0;
    uint64_t v94 = v206[1];
    if (v94)
    {
      for (uint64_t i = 0; i != v94; ++i)
        *(void *)(*v206 + 8 * i) = 0;
    }
    v206[3] = 0;
  }
  std::string::size_type v96 = (char *)*((void *)&v224 + 1);
  long long v97 = (char *)v224;
  if (*((void *)&v224 + 1) == (void)v224)
  {
    long long v97 = (char *)*((void *)&v224 + 1);
    if (*((void *)&v224 + 1)) {
      goto LABEL_104;
    }
LABEL_119:
    int v103 = v209[0];
    if (!v209[0]) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  do
  {
    __p[0] = *(void **)&v97[v98];
    char v222 = (uint64_t *)__p;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::hash<MIL::Builder::OperationBuilder const*>,std::equal_to<MIL::Builder::OperationBuilder const*>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::equal_to<MIL::Builder::OperationBuilder const*>,std::hash<MIL::Builder::OperationBuilder const*>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder const*,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder const*&&>,std::tuple<>>((uint64_t)v206, (uint64_t *)__p, (uint64_t)&std::piecewise_construct, &v222)+ 6) = v99++;
    std::string::size_type v96 = (char *)*((void *)&v224 + 1);
    long long v97 = (char *)v224;
    v98 += 16;
  }
  while (v99 < (uint64_t)(*((void *)&v224 + 1) - v224) >> 4);
  if (!(void)v224) {
    goto LABEL_119;
  }
LABEL_104:
  if (v96 != v97)
  {
    do
    {
      long long v100 = (std::__shared_weak_count *)*((void *)v96 - 1);
      if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
      v96 -= 16;
    }
    while (v96 != v97);
    std::string::size_type v96 = (char *)v224;
  }
  *((void *)&v224 + 1) = v97;
  operator delete(v96);
  int v103 = v209[0];
  if (v209[0])
  {
    do
    {
LABEL_120:
      int v104 = (void *)*v103;
      operator delete(v103);
      int v103 = v104;
    }
    while (v104);
  }
LABEL_121:
  long long v105 = v208[0];
  v208[0] = 0;
  if (v105) {
    operator delete(v105);
  }
  if (v211)
  {
    unint64_t v212 = (char *)v211;
    operator delete(v211);
  }
  uint64_t v106 = (char *)v214;
  if (v214)
  {
    int v107 = v215;
    std::string::size_type v108 = v214;
    if (v215 != v214)
    {
      do
      {
        unint64_t v109 = (std::__shared_weak_count *)*((void *)v107 - 1);
        if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
        v107 -= 16;
      }
      while (v107 != v106);
      std::string::size_type v108 = v214;
    }
    std::string v215 = v106;
    operator delete(v108);
  }
  uint64_t v110 = (char *)v217;
  if (v217)
  {
    long long v111 = v218;
    long long v112 = v217;
    if (v218 != v217)
    {
      do
      {
        uint64_t v113 = (std::__shared_weak_count *)*((void *)v111 - 1);
        if (v113)
        {
          if (!atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        v111 -= 16;
      }
      while (v111 != v110);
      long long v112 = v217;
    }
    v218 = v110;
    operator delete(v112);
  }
}

void sub_1924EAC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v38 - 144);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a19);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a27);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a30);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::ConsumerOfTag(MIL::Builder::OperationBuilder **a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  v20[0] = *a1;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)v20);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (*((_DWORD *)v10 + 6) < (int)a5)
  {
    LOBYTE(v11) = 0;
    return v11 & 1;
  }
  v20[0] = *a1;
  if (std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::find<MIL::Builder::OperationBuilder *>(a3, v20))
  {
    LOBYTE(v11) = 1;
    return v11 & 1;
  }
  MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)v20, *a1);
  uint64_t v12 = (MIL::Builder::Variable *)__p;
  if (!__p)
  {
    LOBYTE(v11) = 0;
    uint64_t v16 = v20[0];
    v20[0] = 0;
    if (!v16) {
      return v11 & 1;
    }
    goto LABEL_18;
  }
  int v11 = 0;
  do
  {
    if (MIL::Builder::Variable::TryGetName(*((MIL::Builder::Variable **)v12 + 2)))
    {
      MIL::Builder::BlockBuilder::TryGetOperation();
      if (v18) {
      uint64_t v13 = v19;
      }
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    uint64_t v12 = *(MIL::Builder::Variable **)v12;
  }
  while (v12);
  uint64_t v14 = __p;
  if (__p)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = v20[0];
  v20[0] = 0;
  if (v16) {
LABEL_18:
  }
    operator delete(v16);
  return v11 & 1;
}

void sub_1924EAF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1924EAF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924EAF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::ProducerOfTag(MIL::Builder::OperationBuilder **a1, void *a2, void *a3, uint64_t a4)
{
  v16[0] = *a1;
  unsigned int v8 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a3, (uint64_t *)v16);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (*((_DWORD *)v8 + 6) <= (int)a4)
  {
    v16[0] = *a1;
    if (std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::find<MIL::Builder::OperationBuilder *>(a2, v16))
    {
      LOBYTE(v9) = 1;
    }
    else
    {
      MIL::Builder::OperationBuilder::GetChildOperations((uint64_t *)v16, *a1);
      uint64_t v10 = __p;
      if (__p)
      {
        int v9 = 0;
        do
        {
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
        int v11 = __p;
        if (__p)
        {
          do
          {
            uint64_t v12 = v11;
            int v11 = (void *)*v11;
            uint64_t v13 = (std::__shared_weak_count *)v12[3];
            if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
            operator delete(v12);
          }
          while (v11);
        }
      }
      else
      {
        LOBYTE(v9) = 0;
      }
      uint64_t v14 = v16[0];
      v16[0] = 0;
      if (v14) {
        operator delete(v14);
      }
    }
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  return v9 & 1;
}

void sub_1924EB0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::GroupTagger::MoveOps(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, MIL::Builder::BlockBuilder **a5, void *a6, void *a7)
{
  unsigned int v8 = a5;
  std::string __p = 0;
  uint64_t v69 = 0;
  unint64_t v70 = 0;
  long long v65 = 0;
  uint64_t v66 = 0;
  unint64_t v10 = (int)a3;
  int v67 = 0;
  if (a4 > a3)
  {
    int v11 = 0;
    goto LABEL_38;
  }
  unint64_t v13 = (int)a4;
  unint64_t v60 = (int)a3;
  do
  {
    MIL::Builder::BlockBuilder::GetOperation(*v8);
    {
      uint64_t v14 = v69;
      if ((unint64_t)v69 >= v70)
      {
        uint64_t v16 = (char *)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&__p, &v63);
      }
      else
      {
        *(void *)uint64_t v69 = v63;
        uint64_t v15 = *((void *)&v63 + 1);
        *((void *)v14 + 1) = *((void *)&v63 + 1);
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = v14 + 16;
      }
      uint64_t v69 = v16;
      uint64_t v17 = v66;
      if (v66 < v67)
      {
        *(void *)uint64_t v66 = v13;
        uint64_t v18 = (uint64_t)(v17 + 8);
LABEL_32:
        uint64_t v66 = (char *)v18;
        unint64_t v10 = v60;
        unsigned int v8 = a5;
        goto LABEL_33;
      }
      uint8x8_t v19 = v65;
      unint64_t v20 = (char *)(v66 - v65);
      uint64_t v21 = (v66 - v65) >> 3;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v67 - v65;
      if ((v67 - v65) >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v25 = operator new(8 * v24);
        unint64_t v26 = (char *)v25 + 8 * v21;
        *(void *)unint64_t v26 = v13;
        uint64_t v18 = (uint64_t)(v26 + 8);
        if (v17 == v19) {
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v25 = 0;
        unint64_t v26 = (char *)(8 * v21);
        *(void *)(8 * v21) = v13;
        uint64_t v18 = 8 * v21 + 8;
        if (v17 == v19)
        {
LABEL_30:
          long long v65 = v26;
          int v67 = (char *)v25 + 8 * v24;
          if (v19) {
            operator delete(v19);
          }
          goto LABEL_32;
        }
      }
      unint64_t v27 = v17 - 8 - v19;
      if (v27 < 0x58) {
        goto LABEL_84;
      }
      if ((unint64_t)(v17 - &v20[(void)v25]) < 0x20) {
        goto LABEL_84;
      }
      uint64_t v28 = (v27 >> 3) + 1;
      uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v30 = &v17[-v29];
      v26 -= v29;
      uint64_t v31 = (char *)v25 + 8 * v21 - 16;
      unint64_t v32 = v17 - 16;
      uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *(_OWORD *)v32;
        *((_OWORD *)v31 - 1) = *((_OWORD *)v32 - 1);
        *(_OWORD *)uint64_t v31 = v34;
        v31 -= 32;
        v32 -= 32;
        v33 -= 4;
      }
      while (v33);
      uint64_t v17 = v30;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_84:
        do
        {
          uint64_t v35 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v26 - 1) = v35;
          v26 -= 8;
        }
        while (v17 != v19);
      }
      goto LABEL_30;
    }
LABEL_33:
    unint64_t v36 = (std::__shared_weak_count *)*((void *)&v63 + 1);
    if (*((void *)&v63 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    ++v13;
  }
  while (v13 <= v10);
  int v11 = v65;
  if (v65 != v66)
  {
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    MIL::Builder::BlockBuilder::RemoveOperations();
  }
LABEL_38:
  if (__p != v69)
  {
    uint64_t v37 = v69 - (unsigned char *)__p;
    long long v63 = 0uLL;
    uint64_t v64 = 0;
    if (v69 - (unsigned char *)__p < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v38 = (int64x2_t *)operator new((unint64_t)v37 >> 1);
    unint64_t v39 = v38;
    unint64_t v40 = v10 - (v37 >> 4) + 1;
    unint64_t v41 = ((v37 >> 4) - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v42 = (unint64_t *)v38;
    if (v41 < 3) {
      goto LABEL_85;
    }
    unint64_t v43 = v41 + 1;
    uint64_t v42 = (unint64_t *)v38 + (v43 & 0x3FFFFFFFFFFFFFFCLL);
    int64x2_t v44 = vdupq_n_s64(v40);
    int v45 = v38 + 1;
    uint64_t v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45[-1] = v44;
      *int v45 = v44;
      v45 += 2;
      v46 -= 4;
    }
    while (v46);
    if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_85:
      do
        *v42++ = v40;
      while (v42 != (unint64_t *)((char *)v38 + 8 * (v37 >> 4)));
    }
    MIL::Builder::BlockBuilder::InsertOperations();
    operator delete(v39);
  }
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v63, *v8);
  if (a7[3])
  {
    int v47 = (void *)a7[2];
    if (v47)
    {
      do
      {
        int v48 = (void *)*v47;
        operator delete(v47);
        int v47 = v48;
      }
      while (v48);
    }
    a7[2] = 0;
    uint64_t v49 = a7[1];
    if (v49)
    {
      for (uint64_t i = 0; i != v49; ++i)
        *(void *)(*a7 + 8 * i) = 0;
    }
    a7[3] = 0;
  }
  unint64_t v51 = (char *)*((void *)&v63 + 1);
  int v52 = (char *)v63;
  if (*((void *)&v63 + 1) == (void)v63)
  {
    int v52 = (char *)*((void *)&v63 + 1);
    if (!*((void *)&v63 + 1)) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v53 = 0;
    unint64_t v54 = 0;
    do
    {
      uint64_t v62 = *(void *)&v52[v53];
      unint64_t v71 = &v62;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::hash<MIL::Builder::OperationBuilder const*>,std::equal_to<MIL::Builder::OperationBuilder const*>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::equal_to<MIL::Builder::OperationBuilder const*>,std::hash<MIL::Builder::OperationBuilder const*>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder const*,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder const*&&>,std::tuple<>>((uint64_t)a7, &v62, (uint64_t)&std::piecewise_construct, &v71)+ 6) = v54++;
      unint64_t v51 = (char *)*((void *)&v63 + 1);
      int v52 = (char *)v63;
      v53 += 16;
    }
    while (v54 < (uint64_t)(*((void *)&v63 + 1) - v63) >> 4);
    if (!(void)v63)
    {
LABEL_57:
      if (v11) {
        goto LABEL_58;
      }
      goto LABEL_59;
    }
  }
  if (v51 != v52)
  {
    do
    {
      uint64_t v59 = (std::__shared_weak_count *)*((void *)v51 - 1);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v51 -= 16;
    }
    while (v51 != v52);
    unint64_t v51 = (char *)v63;
  }
  *((void *)&v63 + 1) = v52;
  operator delete(v51);
  int v11 = v65;
  if (v65)
  {
LABEL_58:
    uint64_t v66 = v11;
    operator delete(v11);
  }
LABEL_59:
  int v55 = (char *)__p;
  if (__p)
  {
    BOOL v56 = v69;
    uint64_t v57 = __p;
    if (v69 != __p)
    {
      do
      {
        uint64_t v58 = (std::__shared_weak_count *)*((void *)v56 - 1);
        if (v58)
        {
          if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v56 -= 16;
      }
      while (v56 != v55);
      uint64_t v57 = __p;
    }
    uint64_t v69 = v55;
    operator delete(v57);
  }
}

void sub_1924EB644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (!v18)
  {
    std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a18);
    _Unwind_Resume(a1);
  }
  operator delete(v18);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t E5Common::Utils::MILDictFromCpp<unsigned int,unsigned long long>@<X0>(uint64_t a1@<X1>, void **a2@<X8>)
{
  uint64_t Scalar = MIL::IRTensorValueType::MakeScalar();
  uint64_t v4 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRDictionaryValueType::Make();
  memset(v26, 0, sizeof(v26));
  int v27 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v6 = i[3];
    unint64_t v7 = operator new(8uLL);
    unint64_t v22 = v7;
    void *v7 = v6;
    uint64_t v23 = v7 + 1;
    unint64_t v24 = v7 + 1;
    Espresso::MILUtil::MakeTensorValue<unsigned long long>(&v25, v4, &v22);
    LODWORD(v6) = *((_DWORD *)i + 4);
    unsigned int v8 = operator new(4uLL);
    std::string __p = v8;
    *unsigned int v8 = v6;
    uint64_t v17 = v8 + 1;
    uint64_t v18 = v8 + 1;
    Espresso::MILUtil::MakeTensorValue<unsigned int>(&v19, Scalar, &__p);
    uint64_t v20 = v19;
    if (v19) {
      operator new();
    }
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    uint64_t v28 = &v20;
    int v9 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v26, (uint64_t)&v20, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
    if (v25) {
      operator new();
    }
    uint64_t v25 = 0;
    unint64_t v10 = (std::__shared_weak_count *)v9[5];
    v9[4] = 0;
    v9[5] = 0;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      int v11 = v21;
      if (v21)
      {
LABEL_11:
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      int v11 = v21;
      if (v21) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = v19;
    uint64_t v19 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    uint64_t v13 = v25;
    uint64_t v25 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v22)
    {
      uint64_t v23 = v22;
      operator delete(v22);
    }
  }
  MIL::IRDictionaryValueType::MakeValue();
  *a2 = v22;
  return std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v26);
}

void sub_1924EBA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_1924EBA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1924EBA78);
}

void *Espresso::AOT::AbstractGroupMatcher::AbstractGroupMatcher(void *this)
{
  *this = &unk_1EE36B3B0;
  return this;
}

void sub_1924EBC48(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 16 * a2;
    uint64_t v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1924EBCE0(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::GetConsumers(uint64_t a1, MIL::Builder::BlockBuilder **a2)
{
  uint64_t OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
  std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set(a1, OperationsByInput);
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v47, *a2);
  uint64_t v5 = (MIL::Builder::OperationBuilder **)v47;
  unint64_t v41 = v48;
  if (v47 != v48)
  {
LABEL_6:
    MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&__p, *v5);
    unsigned int v8 = (char *)__p;
    unint64_t v7 = v46;
    if (__p == v46)
    {
      if (__p) {
        goto LABEL_68;
      }
      goto LABEL_5;
    }
    while (1)
    {
      uint64_t v9 = MIL::Builder::BlockBuilder::GetOperationsByInput();
      uint64_t v10 = v9;
      *(_OWORD *)uint64_t v42 = 0u;
      *(_OWORD *)unint64_t v43 = 0u;
      float v44 = *(float *)(v9 + 32);
      size_t prime = *(void *)(v9 + 8);
      if (prime == 1)
      {
        size_t prime = 2;
        goto LABEL_28;
      }
      if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(*(void *)(v9 + 8));
        uint64_t v12 = v42[1];
        BOOL v13 = (void *)prime >= v42[1];
        if ((void *)prime > v42[1]) {
          break;
        }
      }
      else
      {
        uint64_t v12 = 0;
        BOOL v13 = 1;
        if (prime) {
          break;
        }
      }
      if (v13) {
        goto LABEL_44;
      }
      unint64_t v14 = vcvtps_u32_f32((float)(unint64_t)v43[1] / v44);
      if ((unint64_t)v12 < 3
        || (uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v15.i16[0] = vaddlv_u8(v15), v15.u32[0] > 1uLL))
      {
        unint64_t v14 = std::__next_prime(v14);
      }
      else
      {
        uint64_t v16 = 1 << -(char)__clz(v14 - 1);
        if (v14 >= 2) {
          unint64_t v14 = v16;
        }
      }
      if (prime <= v14) {
        size_t prime = v14;
      }
      if (prime >= (unint64_t)v12) {
        goto LABEL_44;
      }
      if (prime) {
        break;
      }
      uint64_t v35 = v42[0];
      v42[0] = 0;
      if (v35) {
        operator delete(v35);
      }
      v42[1] = 0;
      uint64_t v28 = *(void **)(v10 + 16);
      if (v28) {
        goto LABEL_45;
      }
LABEL_46:
      if (v43[1]) {
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, v5, v5);
      }
      uint64_t v29 = v43[0];
      if (v43[0])
      {
        do
        {
          uint64_t v31 = v29;
          uint64_t v29 = (void *)*v29;
          unint64_t v32 = (std::__shared_weak_count *)v31[3];
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          operator delete(v31);
        }
        while (v29);
      }
      unint64_t v30 = v42[0];
      v42[0] = 0;
      if (v30) {
        operator delete(v30);
      }
      v8 += 16;
      if (v8 == v7)
      {
        unsigned int v8 = (char *)__p;
        if (__p)
        {
LABEL_68:
          unint64_t v36 = v46;
          uint64_t v6 = v8;
          if (v46 != v8)
          {
            do
            {
              uint64_t v37 = (std::__shared_weak_count *)*((void *)v36 - 1);
              if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
              v36 -= 16;
            }
            while (v36 != v8);
            uint64_t v6 = __p;
          }
          uint64_t v46 = v8;
          operator delete(v6);
        }
LABEL_5:
        v5 += 2;
        if (v5 == v41)
        {
          uint64_t v5 = (MIL::Builder::OperationBuilder **)v47;
          goto LABEL_75;
        }
        goto LABEL_6;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_28:
    uint64_t v17 = operator new(8 * prime);
    uint64_t v18 = v42[0];
    v42[0] = v17;
    if (v18) {
      operator delete(v18);
    }
    uint64_t v19 = 0;
    v42[1] = (void *)prime;
    do
      *((void *)v42[0] + v19++) = 0;
    while (prime != v19);
    uint64_t v20 = (void **)v43[0];
    if (!v43[0]) {
      goto LABEL_44;
    }
    size_t v21 = *((void *)v43[0] + 1);
    size_t v22 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v23 = v21 & v22;
      *((void *)v42[0] + v23) = v43;
      while (1)
      {
        unint64_t v24 = *v20;
        if (!*v20) {
          break;
        }
        size_t v25 = v24[1] & v22;
        if (v25 == v23)
        {
          uint64_t v20 = (void **)*v20;
        }
        else if (*((void *)v42[0] + v25))
        {
          *uint64_t v20 = (void *)*v24;
          uint64_t v26 = 8 * v25;
          *unint64_t v24 = **(void **)((char *)v42[0] + v26);
          **(void **)((char *)v42[0] + v26) = v24;
        }
        else
        {
          *((void *)v42[0] + v25) = v20;
          uint64_t v20 = (void **)v24;
          size_t v23 = v25;
        }
      }
      goto LABEL_44;
    }
    if (v21 >= prime) {
      v21 %= prime;
    }
    *((void *)v42[0] + v21) = v43;
    int v27 = *v20;
    if (!*v20)
    {
LABEL_44:
      uint64_t v28 = *(void **)(v10 + 16);
      if (!v28) {
        goto LABEL_46;
      }
      do
      {
LABEL_45:
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v42, v28 + 2, v28 + 2);
        uint64_t v28 = (void *)*v28;
      }
      while (v28);
      goto LABEL_46;
    }
    while (1)
    {
      size_t v34 = v27[1];
      if (v34 >= prime) {
        v34 %= prime;
      }
      if (v34 == v21) {
        goto LABEL_56;
      }
      if (*((void *)v42[0] + v34))
      {
        *uint64_t v20 = (void *)*v27;
        uint64_t v33 = 8 * v34;
        *int v27 = **(void **)((char *)v42[0] + v33);
        **(void **)((char *)v42[0] + v33) = v27;
        int v27 = v20;
LABEL_56:
        uint64_t v20 = (void **)v27;
        int v27 = (void *)*v27;
        if (!v27) {
          goto LABEL_44;
        }
      }
      else
      {
        *((void *)v42[0] + v34) = v20;
        uint64_t v20 = (void **)v27;
        int v27 = (void *)*v27;
        size_t v21 = v34;
        if (!v27) {
          goto LABEL_44;
        }
      }
    }
  }
LABEL_75:
  if (v5)
  {
    uint64_t v38 = v48;
    unint64_t v39 = v5;
    if (v48 != v5)
    {
      do
      {
        unint64_t v40 = (std::__shared_weak_count *)*(v38 - 1);
        if (v40)
        {
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v38 -= 2;
      }
      while (v38 != v5);
      unint64_t v39 = v47;
    }
    int v48 = v5;
    operator delete(v39);
  }
}

void sub_1924EC1E0(_Unwind_Exception *a1)
{
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924EC1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void sub_1924EC210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void *);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va1);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va2);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlockWithShrinking(uint64_t a1, MIL::Builder::BlockBuilder **a2, void *a3, void *a4, int a5)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 56) < a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    Location = (MIL::Location *)MIL::Builder::BlockBuilder::GetLocation(*a2);
    MIL::Location::GetDescription((uint64_t *)v91, Location);
    uint64_t v74 = std::string::insert((std::string *)v91, 0, "reached max supported Block nesting level at ");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v98);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v8 = 0;
  size_t v95 = 0;
  std::string::size_type v96 = 0;
  uint64_t v9 = (a5 + 1);
  unint64_t v97 = 0;
  while (MIL::Builder::BlockBuilder::GetNumOperations(*a2) > v8)
  {
    MIL::Builder::BlockBuilder::GetOperation(*a2);
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)v91);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
    Espresso::AOT::GetOperatorType(v11, &v98);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v98.__r_.__value_.__l.__size_ != 8)
      {
        operator delete(v98.__r_.__value_.__l.__data_);
        goto LABEL_18;
      }
      uint64_t v12 = *(void *)v98.__r_.__value_.__l.__data_;
      operator delete(v98.__r_.__value_.__l.__data_);
      if (v12 != 0x657A69746E617571) {
        goto LABEL_18;
      }
    }
    else if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) != 8 || v98.__r_.__value_.__r.__words[0] != 0x657A69746E617571)
    {
      goto LABEL_18;
    }
    BOOL v13 = v96;
    if ((unint64_t)v96 >= v97)
    {
      uint64_t v15 = (MIL::Builder::OperationBuilder **)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v95, (long long *)v91);
    }
    else
    {
      char *v96 = *(MIL::Builder::OperationBuilder **)v91;
      uint64_t v14 = *(void *)&v91[8];
      v13[1] = *(MIL::Builder::OperationBuilder **)&v91[8];
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = v13 + 2;
    }
    std::string::size_type v96 = v15;
LABEL_18:
    MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&v98, *(MIL::Builder::OperationBuilder **)v91);
    std::string::size_type size = v98.__r_.__value_.__l.__size_;
    uint64_t v17 = (void **)v98.__r_.__value_.__r.__words[0];
    if (v98.__r_.__value_.__r.__words[0] == v98.__r_.__value_.__l.__size_)
    {
      if (!v98.__r_.__value_.__r.__words[0]) {
        goto LABEL_39;
      }
      goto LABEL_20;
    }
    do
    {
      uint64_t v20 = *v17;
      v88[0] = *v17;
      size_t v21 = (std::__shared_weak_count *)v17[1];
      v88[1] = v21;
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        int v93 = v20;
        uint64_t v94 = v21;
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        int v93 = v20;
        uint64_t v94 = 0;
      }
      Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlockWithShrinking(a1, &v93, a3, a4, v9);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        size_t v22 = (std::__shared_weak_count *)v88[1];
        if (!v88[1]) {
          goto LABEL_23;
        }
      }
      else
      {
        size_t v22 = (std::__shared_weak_count *)v88[1];
        if (!v88[1]) {
          goto LABEL_23;
        }
      }
      if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
LABEL_23:
      v17 += 2;
    }
    while (v17 != (void **)size);
    uint64_t v17 = (void **)v98.__r_.__value_.__r.__words[0];
    if (!v98.__r_.__value_.__r.__words[0])
    {
LABEL_39:
      uint64_t v19 = *(std::__shared_weak_count **)&v91[8];
      if (!*(void *)&v91[8]) {
        goto LABEL_3;
      }
LABEL_42:
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      goto LABEL_3;
    }
LABEL_20:
    std::string::size_type v18 = v98.__r_.__value_.__l.__size_;
    if ((void **)v98.__r_.__value_.__l.__size_ == v17)
    {
      v98.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
      operator delete(v17);
      uint64_t v19 = *(std::__shared_weak_count **)&v91[8];
      if (!*(void *)&v91[8]) {
        goto LABEL_3;
      }
      goto LABEL_42;
    }
    do
    {
      size_t v23 = *(std::__shared_weak_count **)(v18 - 8);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      v18 -= 16;
    }
    while ((void **)v18 != v17);
    v98.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    operator delete(v98.__r_.__value_.__l.__data_);
    uint64_t v19 = *(std::__shared_weak_count **)&v91[8];
    if (*(void *)&v91[8]) {
      goto LABEL_42;
    }
LABEL_3:
    ++v8;
  }
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)*a2;
  unint64_t v24 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)&v98);
  if (!v24) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::Builder::BlockBuilder::GetContext((uint64_t *)&v98, *a2);
  uint64_t Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  uint64_t v26 = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
  if (v98.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v98.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  memset(v91, 0, sizeof(v91));
  int v92 = 1065353216;
  int v27 = v95;
  unint64_t v76 = v96;
  if (v95 == v96)
  {
    *(void *)uint64_t v91 = 0;
    goto LABEL_141;
  }
  uint64_t v28 = v24 + 3;
  while (2)
  {
    *(_OWORD *)unint64_t v88 = 0u;
    *(_OWORD *)int64x2_t v89 = 0u;
    int v90 = 1065353216;
    v98.__r_.__value_.__r.__words[0] = (std::string::size_type)*v27;
    uint64_t v29 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v28, (uint64_t *)&v98);
    if (!v29) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unsigned int v78 = *((_DWORD *)v29 + 6);
    unint64_t v85 = 0;
    unint64_t v86 = 0;
    uint64_t v87 = 0;
    *((unsigned char *)&v98.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&v98, "dequantize");
    unint64_t v99 = (char *)operator new(0x20uLL);
    long long v100 = xmmword_192DB16C0;
    strcpy(v99, "constexpr_affine_dequantize");
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v83 = 0u;
    int v84 = 1065353216;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)&v98, (uint64_t)&v98);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)&v99, (uint64_t)&v99);
    unint64_t v30 = (void **)v83[0];
    if (v83[0])
    {
      do
      {
        unint64_t v32 = (void **)*v30;
        if (*((char *)v30 + 39) < 0) {
          operator delete(v30[2]);
        }
        operator delete(v30);
        unint64_t v30 = v32;
      }
      while (v32);
    }
    uint64_t v31 = __p[0];
    __p[0] = 0;
    if (v31) {
      operator delete(v31);
    }
    if (SHIBYTE(v100) < 0)
    {
      operator delete(v99);
      if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_57;
      }
      goto LABEL_63;
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_63:
      operator delete(v98.__r_.__value_.__l.__data_);
      if (!v89[1]) {
        goto LABEL_113;
      }
      goto LABEL_64;
    }
LABEL_57:
    if (!v89[1]) {
      goto LABEL_113;
    }
LABEL_64:
    uint64_t v33 = v89[0];
    if (!v89[0]) {
      goto LABEL_110;
    }
    size_t v34 = *(void **)v89[0];
    if (!*(void *)v89[0]) {
      goto LABEL_110;
    }
    int8x8_t v35 = (int8x8_t)v24[4];
    uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
    v36.i16[0] = vaddlv_u8(v36);
    uint64_t v37 = *(void *)&v35 - 1;
    while (2)
    {
      if (!*(void *)&v35) {
        goto LABEL_152;
      }
      unint64_t v38 = v34[2];
      unint64_t v39 = 0x9DDFEA08EB382D69 * (((8 * v38) + 8) ^ HIDWORD(v38));
      unint64_t v40 = 0x9DDFEA08EB382D69 * (HIDWORD(v38) ^ (v39 >> 47) ^ v39);
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      if (v36.u32[0] > 1uLL)
      {
        unint64_t v42 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
        if (v41 >= *(void *)&v35) {
          unint64_t v42 = v41 % *(void *)&v35;
        }
      }
      else
      {
        unint64_t v42 = v41 & v37;
      }
      unint64_t v43 = *(uint64_t ***)(*v28 + 8 * v42);
      if (!v43 || (float v44 = *v43) == 0) {
LABEL_152:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      unint64_t v45 = v33[2];
      if (v36.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v46 = v44[1];
          if (v46 == v41)
          {
            if (v44[2] == v38) {
              goto LABEL_83;
            }
          }
          else if ((v46 & v37) != v42)
          {
            goto LABEL_152;
          }
          float v44 = (uint64_t *)*v44;
          if (!v44) {
            goto LABEL_152;
          }
        }
      }
      while (2)
      {
        unint64_t v51 = v44[1];
        if (v51 != v41)
        {
          if (v51 >= *(void *)&v35) {
            v51 %= *(void *)&v35;
          }
          if (v51 != v42) {
            goto LABEL_152;
          }
          goto LABEL_86;
        }
        if (v44[2] != v38)
        {
LABEL_86:
          float v44 = (uint64_t *)*v44;
          if (!v44) {
            goto LABEL_152;
          }
          continue;
        }
        break;
      }
LABEL_83:
      unint64_t v47 = 0x9DDFEA08EB382D69 * (((8 * v45) + 8) ^ HIDWORD(v45));
      unint64_t v48 = 0x9DDFEA08EB382D69 * (HIDWORD(v45) ^ (v47 >> 47) ^ v47);
      unint64_t v49 = 0x9DDFEA08EB382D69 * (v48 ^ (v48 >> 47));
      if (v36.u32[0] > 1uLL)
      {
        unint64_t v50 = v49;
        if (v49 >= *(void *)&v35) {
          unint64_t v50 = v49 % *(void *)&v35;
        }
      }
      else
      {
        unint64_t v50 = v49 & v37;
      }
      int v52 = *(uint64_t ***)(*v28 + 8 * v50);
      if (!v52) {
        goto LABEL_152;
      }
      uint64_t v53 = *v52;
      if (!v53) {
        goto LABEL_152;
      }
      int v54 = *((_DWORD *)v44 + 6);
      if (v36.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v55 = v53[1];
          if (v55 == v49)
          {
            if (v53[2] == v45) {
              goto LABEL_67;
            }
          }
          else if ((v55 & v37) != v50)
          {
            goto LABEL_152;
          }
          uint64_t v53 = (uint64_t *)*v53;
          if (!v53) {
            goto LABEL_152;
          }
        }
      }
      while (2)
      {
        unint64_t v56 = v53[1];
        if (v56 != v49)
        {
          if (v56 >= *(void *)&v35) {
            v56 %= *(void *)&v35;
          }
          if (v56 != v50) {
            goto LABEL_152;
          }
LABEL_104:
          uint64_t v53 = (uint64_t *)*v53;
          if (!v53) {
            goto LABEL_152;
          }
          continue;
        }
        break;
      }
      if (v53[2] != v45) {
        goto LABEL_104;
      }
LABEL_67:
      if (v54 < *((_DWORD *)v53 + 6)) {
        uint64_t v33 = v34;
      }
      size_t v34 = (void *)*v34;
      if (v34) {
        continue;
      }
      break;
    }
LABEL_110:
    uint64_t v57 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v28, v33 + 2);
    if (!v57) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unsigned int v77 = *((_DWORD *)v57 + 6);
    uint64_t v58 = v89[0];
    if (v89[0])
    {
      do
      {
        if (*(char *)(a1 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
        }
        else {
          std::string v80 = *(std::string *)(a1 + 32);
        }
        MIL::IRTensorValueType::MakeBoolValue(Scalar);
        if (v98.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        v98.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        uint64_t v62 = v81;
        if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        std::string::size_type v63 = v98.__r_.__value_.__r.__words[0];
        v98.__r_.__value_.__r.__words[0] = 0;
        if (v63) {
          (*(void (**)(std::string::size_type))(*(void *)v63 + 8))(v63);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        uint64_t v58 = (void *)*v58;
      }
      while (v58);
    }
    Espresso::AOT::GroupTagger::MoveOpsAndAssignGroupIdsForInterval(a3, v77, v78, (uint64_t)a2, v88, v28, (unsigned int **)(a1 + 8));
LABEL_113:
    if (v85)
    {
      unint64_t v86 = v85;
      operator delete(v85);
    }
    uint64_t v59 = v89[0];
    if (v89[0])
    {
      do
      {
        unint64_t v60 = (void *)*v59;
        operator delete(v59);
        uint64_t v59 = v60;
      }
      while (v60);
    }
    uint64_t v61 = v88[0];
    v88[0] = 0;
    if (v61) {
      operator delete(v61);
    }
    v27 += 2;
    if (v27 != v76) {
      continue;
    }
    break;
  }
  uint64_t v64 = *(void **)&v91[16];
  if (*(void *)&v91[16])
  {
    do
    {
      long long v65 = v64;
      uint64_t v64 = (void *)*v64;
      uint64_t v66 = (std::__shared_weak_count *)v65[3];
      if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      operator delete(v65);
    }
    while (v64);
  }
  int v67 = *(void **)v91;
  *(void *)uint64_t v91 = 0;
  if (v67) {
    operator delete(v67);
  }
LABEL_141:
  uint64_t v68 = v95;
  if (v95)
  {
    uint64_t v69 = v96;
    unint64_t v70 = v95;
    if (v96 != v95)
    {
      do
      {
        unint64_t v71 = (std::__shared_weak_count *)*(v69 - 1);
        if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
        v69 -= 2;
      }
      while (v69 != v68);
      unint64_t v70 = v95;
    }
    std::string::size_type v96 = v68;
    operator delete(v70);
  }
}

void sub_1924ECE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  if (*(char *)(v37 - 121) < 0) {
    operator delete(*(void **)(v37 - 144));
  }
  if (*(char *)(v37 - 201) < 0)
  {
    operator delete(*(void **)(v37 - 224));
    if ((v36 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  _Unwind_Resume(a1);
}

void sub_1924ECFB4(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 224);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_1924ECFD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27 = *(void *)(v26 - 144);
  *(void *)(v26 - 144) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1924ED068);
}

void sub_1924ED030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 184);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v35 - 144));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 224);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v35 - 168));
  _Unwind_Resume(a1);
}

void sub_1924ED064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a35);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v35 - 224);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v35 - 168));
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::RecursiveBackwardTag(MIL::Builder::OperationBuilder **a1, uint64_t a2, uint64_t a3, void *a4, void *a5, MIL::Builder::OperationBuilder ***a6)
{
  if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)a1))
  {
    v46[0] = a1;
    LOBYTE(v12) = *((unsigned char *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)a4, (uint64_t *)a1, (uint64_t)&std::piecewise_construct, (void **)v46)+ 32) != 0;
    return v12 & 1;
  }
  uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*a1);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
  Espresso::AOT::GetOperatorType(v14, &v48);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a5, (uint64_t)&v48))
  {
    v46[0] = *a1;
    std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(a3, (uint64_t *)v46, v46);
    uint64_t v15 = *a1;
    uint64_t v17 = a6[1];
    unint64_t v16 = (unint64_t)a6[2];
    if ((unint64_t)v17 < v16)
    {
      *uint64_t v17 = v15;
      uint64_t v18 = (uint64_t)(v17 + 1);
      goto LABEL_45;
    }
    size_t v21 = *a6;
    uint64_t v22 = (char *)v17 - (char *)*a6;
    uint64_t v23 = v22 >> 3;
    unint64_t v24 = (v22 >> 3) + 1;
    if (v24 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v16 - (void)v21;
    if (v25 >> 2 > v24) {
      unint64_t v24 = v25 >> 2;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v27 = operator new(8 * v26);
      uint64_t v28 = (MIL::Builder::OperationBuilder **)&v27[8 * v23];
      uint64_t v29 = (MIL::Builder::OperationBuilder **)&v27[8 * v26];
      *uint64_t v28 = v15;
      uint64_t v18 = (uint64_t)(v28 + 1);
      unint64_t v30 = (char *)((char *)v17 - (char *)v21);
      if (v17 == v21) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (MIL::Builder::OperationBuilder **)(8 * v23);
      uint64_t v29 = 0;
      *(void *)(8 * v23) = v15;
      uint64_t v18 = 8 * v23 + 8;
      unint64_t v30 = (char *)((char *)v17 - (char *)v21);
      if (v17 == v21)
      {
LABEL_43:
        *a6 = v28;
        a6[1] = (MIL::Builder::OperationBuilder **)v18;
        a6[2] = v29;
        if (v17) {
          operator delete(v17);
        }
LABEL_45:
        a6[1] = (MIL::Builder::OperationBuilder **)v18;
        v46[0] = a1;
        LOBYTE(v12) = 1;
        *((unsigned char *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)a4, (uint64_t *)a1, (uint64_t)&std::piecewise_construct, (void **)v46)+ 32) = 1;
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v12 & 1;
        }
LABEL_46:
        operator delete(v48.__r_.__value_.__l.__data_);
        return v12 & 1;
      }
    }
    unint64_t v34 = (unint64_t)(v30 - 8);
    if (v34 < 0x58) {
      goto LABEL_52;
    }
    if ((unint64_t)((char *)v17 - v27 - v22) < 0x20) {
      goto LABEL_52;
    }
    uint64_t v35 = (v34 >> 3) + 1;
    uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v37 = &v17[v36 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v28 = (MIL::Builder::OperationBuilder **)((char *)v28 - v36);
    unint64_t v38 = &v27[8 * v23 - 16];
    unint64_t v39 = v17 - 2;
    uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      _OWORD *v38 = v41;
      v38 -= 2;
      v39 -= 4;
      v40 -= 4;
    }
    while (v40);
    uint64_t v17 = v37;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        unint64_t v42 = *--v17;
        *--uint64_t v28 = v42;
      }
      while (v17 != v21);
    }
    uint64_t v17 = *a6;
    goto LABEL_43;
  }
  MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)v46, *a1);
  uint64_t v19 = (MIL::Builder::Variable *)__p;
  if (__p)
  {
    int v12 = 0;
    do
    {
      if (MIL::Builder::Variable::TryGetName(*((MIL::Builder::Variable **)v19 + 2)))
      {
        MIL::Builder::BlockBuilder::TryGetOperation();
        if (v44) {
        uint64_t v20 = v45;
        }
        if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      uint64_t v19 = *(MIL::Builder::Variable **)v19;
    }
    while (v19);
    uint64_t v31 = __p;
    if (__p)
    {
      do
      {
        unint64_t v32 = (void *)*v31;
        operator delete(v31);
        uint64_t v31 = v32;
      }
      while (v32);
    }
    uint64_t v33 = v46[0];
    v46[0] = 0;
    if (v33) {
      goto LABEL_28;
    }
  }
  else
  {
    LOBYTE(v12) = 0;
    uint64_t v33 = v46[0];
    v46[0] = 0;
    if (v33) {
LABEL_28:
    }
      operator delete(v33);
  }
  if (v12)
  {
    v46[0] = *a1;
    std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(a3, (uint64_t *)v46, v46);
  }
  v46[0] = a1;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)a4, (uint64_t *)a1, (uint64_t)&std::piecewise_construct, (void **)v46)+ 32) = v12 & 1;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
  return v12 & 1;
}

void sub_1924ED454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::AOT::E5RTGroupMatcher::HasBackend(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(_DWORD **)(a1 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void Espresso::AOT::E5RTGroupMatcher::~E5RTGroupMatcher(void **this)
{
  *this = &unk_1EE36B0F8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    uint64_t v2 = this[1];
    if (!v2)
    {
LABEL_4:
      JUMPOUT(0x192FF16B0);
    }
  }
  else
  {
    uint64_t v2 = this[1];
    if (!v2) {
      goto LABEL_4;
    }
  }
  this[2] = v2;
  operator delete(v2);
  goto LABEL_4;
}

void *std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v18 = operator new(0x28uLL);
  *uint64_t v18 = 0;
  v18[1] = v10;
  uint64_t v19 = **a4;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_26:
      *uint64_t v18 = *v23;
LABEL_61:
      *uint64_t v23 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v10;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v10));
      if (v23) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    unint64_t v32 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11) {
        v32 %= v11;
      }
    }
    else
    {
      v32 &= v11 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_1924ED8B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v18 = operator new(0x28uLL);
  uint64_t v14 = v18;
  *uint64_t v18 = 0;
  v18[1] = v10;
  uint64_t v19 = *a4;
  v18[2] = **a4;
  uint64_t v20 = v19[1];
  v18[3] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)v18 + 32) = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    BOOL v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_28:
      *uint64_t v14 = *v24;
LABEL_63:
      *BOOL v24 = v14;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v33 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        BOOL v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        BOOL v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v33 & v10;
      uint64_t v23 = *(void *)a1;
      BOOL v24 = *(void **)(*(void *)a1 + 8 * (v33 & v10));
      if (v24) {
        goto LABEL_28;
      }
    }
  }
  *uint64_t v14 = *v17;
  *uint64_t v17 = v14;
  *(void *)(v23 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11) {
        v34 %= v11;
      }
    }
    else
    {
      v34 &= v11 - 1;
    }
    BOOL v24 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924EDC3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v18 = operator new(0x48uLL);
  uint64_t v14 = v18;
  *uint64_t v18 = 0;
  v18[1] = v10;
  uint64_t v19 = *a4;
  v18[2] = **a4;
  uint64_t v20 = v19[1];
  v18[3] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *((_DWORD *)v18 + 16) = 1065353216;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    BOOL v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_28:
      *uint64_t v14 = *v24;
LABEL_63:
      *BOOL v24 = v14;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v33 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        BOOL v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        BOOL v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v33 & v10;
      uint64_t v23 = *(void *)a1;
      BOOL v24 = *(void **)(*(void *)a1 + 8 * (v33 & v10));
      if (v24) {
        goto LABEL_28;
      }
    }
  }
  *uint64_t v14 = *v17;
  *uint64_t v17 = v14;
  *(void *)(v23 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11) {
        v34 %= v11;
      }
    }
    else
    {
      v34 &= v11 - 1;
    }
    BOOL v24 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924EDFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (!*(unsigned char *)(a1 + 16)) {
      goto LABEL_9;
    }
    uint64_t v3 = (void *)v2[6];
    if (v3)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = (void *)v2[4];
    v2[4] = 0;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)v2[3];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      uint64_t v7 = v2;
    }
    else
    {
LABEL_9:
      uint64_t v7 = v2;
    }
    operator delete(v7);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,unsigned long long>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      _OWORD v8[3] = a2[3];
      unint64_t v9 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      unint64_t v11 = (uint64_t *)*v8;
      operator delete(v8);
      unint64_t v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x20uLL);
      *(void *)unint64_t v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((void *)v10 + 1) = *((unsigned int *)v10 + 4);
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi(a1, (unsigned int *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1924EE1B0(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1924EE1D0(_Unwind_Exception *a1)
{
}

void sub_1924EE1E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi(void *a1, unsigned int *a2)
{
  uint64_t v5 = (int *)(a2 + 4);
  unint64_t v4 = a2[4];
  *((void *)v5 - 1) = v4;
  inserted = std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi_prepare((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *((void *)v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!inserted)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(void *)a2 = *inserted;
  uint64_t *inserted = (uint64_t)a2;
  if (*(void *)a2)
  {
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    unint64_t v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0) {
      goto LABEL_4;
    }
    goto LABEL_36;
  }
  BOOL v16 = 1;
  if (v6 >= 3) {
    BOOL v16 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v6);
  unint64_t v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (prime > v6) {
    goto LABEL_22;
  }
  if (prime < v6)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          size_t v20 = v22;
        }
        if (prime <= v20) {
          size_t prime = v20;
        }
        if (prime >= v6) {
          goto LABEL_35;
        }
LABEL_22:
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__do_rehash<false>(a1, prime);
        goto LABEL_35;
      }
    }
    size_t v23 = std::__next_prime(v20);
    if (prime <= v23) {
      size_t prime = v23;
    }
    if (prime < v6) {
      goto LABEL_22;
    }
  }
LABEL_35:
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    unint64_t v10 = *(uint64_t **)(*(void *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      char v11 = 0;
      int v12 = *a3;
      while (1)
      {
        uint64_t result = v10;
        unint64_t v10 = (uint64_t *)*v10;
        if (!v10) {
          break;
        }
        uint64_t v15 = v10[1];
        if ((v15 & v9) != (v9 & a2)) {
          break;
        }
        if (v15 == a2)
        {
          char v13 = v11 & (*((_DWORD *)v10 + 4) != v12);
          v11 |= *((_DWORD *)v10 + 4) == v12;
          if (v13) {
            return result;
          }
        }
        else if (v11)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  unint64_t v24 = a2;
  if (v6 <= a2) {
    unint64_t v24 = a2 % v6;
  }
  BOOL v25 = *(uint64_t **)(*(void *)a1 + 8 * v24);
  if (!v25) {
    return 0;
  }
  unsigned __int8 v26 = 0;
  int v27 = *a3;
  while (1)
  {
    uint64_t result = v25;
    BOOL v25 = (uint64_t *)*v25;
    if (!v25) {
      break;
    }
    unint64_t v29 = v25[1];
    unint64_t v30 = v29;
    if (v29 >= v6) {
      unint64_t v30 = v29 % v6;
    }
    if (v30 != v24) {
      break;
    }
    if (v29 == a2)
    {
      int v28 = v26 & (*((_DWORD *)v25 + 4) != v27);
      v26 |= *((_DWORD *)v25 + 4) == v27;
      if (v28 == 1) {
        return result;
      }
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v8 = a1 + 16;
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v9 = v7[1];
      unint64_t v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
        *(void *)(*(void *)a1 + 8 * v9) = v8;
        while (1)
        {
          unint64_t v18 = (void *)*v7;
          if (!*v7) {
            break;
          }
          unint64_t v19 = v18[1];
          if (v19 >= a2) {
            v19 %= a2;
          }
          if (v19 == v9)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            size_t v20 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v19))
            {
              do
              {
                uint8x8_t v21 = v20;
                size_t v20 = (void *)*v20;
              }
              while (v20 && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4));
              void *v7 = v20;
              uint64_t v22 = 8 * v19;
              *uint8x8_t v21 = **(void **)(*(void *)a1 + v22);
              **(void **)(*(void *)a1 + v22) = v18;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v19) = v7;
              float v7 = v18;
              unint64_t v9 = v19;
            }
          }
        }
      }
      else
      {
        uint64_t v11 = v9 & v10;
        *(void *)(*(void *)a1 + 8 * v11) = v8;
        while (1)
        {
          int v12 = (void *)*v7;
          if (!*v7) {
            break;
          }
          uint64_t v13 = v12[1] & v10;
          if (v13 == v11)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            uint64_t v14 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              do
              {
                uint64_t v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14 && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4));
              void *v7 = v14;
              uint64_t v16 = 8 * v13;
              void *v15 = **(void **)(*(void *)a1 + v16);
              **(void **)(*(void *)a1 + v16) = v12;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              float v7 = v12;
              uint64_t v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    unint64_t v17 = *(void **)a1;
    *(void *)a1 = 0;
    if (v17) {
      operator delete(v17);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__append_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> const*>(void *a1, void *a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 32 * (v7 - v6) - 1;
  }
  uint64_t v9 = a1[5];
  unint64_t v10 = v9 + a1[4];
  unint64_t v11 = v8 - v10;
  if (a3 > v11)
  {
    std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity((uint64_t)a1, a3 - v11);
    uint64_t v9 = a1[5];
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v10 = a1[4] + v9;
  }
  int v12 = (void *)(v6 + 8 * (v10 >> 8));
  if (v7 == v6)
  {
    uint64_t v13 = 0;
    if (!a3) {
      return;
    }
  }
  else
  {
    uint64_t v13 = *v12 + 16 * v10;
    if (!a3) {
      return;
    }
  }
  uint64_t v14 = a3 + ((v13 - *v12) >> 4);
  if (v14 < 1)
  {
    unint64_t v16 = 255 - v14;
    LOBYTE(v14) = ~(-1 - v14);
    uint64_t v15 = &v12[-(v16 >> 8)];
  }
  else
  {
    uint64_t v15 = &v12[(unint64_t)v14 >> 8];
  }
  uint64_t v17 = *v15 + 16 * v14;
  if (v13 != v17)
  {
    do
    {
      uint64_t v18 = v17;
      if (v12 != v15) {
        uint64_t v18 = *v12 + 4096;
      }
      if (v13 == v18)
      {
        a1[5] = v9;
        if (v12 == v15) {
          return;
        }
      }
      else
      {
        unint64_t v19 = (void *)v13;
        do
        {
          uint64_t v20 = a2[1];
          *unint64_t v19 = *a2;
          v19[1] = v20;
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          a2 += 2;
          v19 += 2;
        }
        while (v19 != (void *)v18);
        uint64_t v9 = a1[5] + ((v18 - v13) >> 4);
        a1[5] = v9;
        if (v12 == v15) {
          return;
        }
      }
      uint64_t v21 = v12[1];
      ++v12;
      uint64_t v13 = v21;
    }
    while (v21 != v17);
  }
}

void std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    *(void *)(a1 + 32) = v7 - (v8 << 8);
    if (!v8) {
      return;
    }
    while (1)
    {
      uint64_t v15 = *(void **)(a1 + 8);
      unint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          int v27 = (char *)operator new(8 * v24);
          int v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          uint64_t v3 = v28;
          if (!v29)
          {
            uint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              uint64_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            uint64_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v32 = &v28[v34];
            v16 += v34;
            uint64_t v35 = (long long *)(v15 + 3);
            uint64_t v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)uint64_t v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)uint64_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            uint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          uint64_t v3 = *(char **)(a1 + 8);
        }
        uint64_t v14 = &v3[-8 * v21];
        uint64_t v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)uint64_t v3 = v17;
      uint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v9 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        unint64_t v145 = operator new(0x1000uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v145);
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        unint64_t v145 = operator new(0x1000uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 255;
        }
        else {
          uint64_t v116 = 256;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      v8 += v9;
      *(void *)(a1 + 32) = v117 - (v8 << 8);
      if (!v8) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= v8 << 8;
      if (!v8) {
        return;
      }
    }
    unint64_t v118 = *(char **)(a1 + 16);
    while (1)
    {
      unint64_t v120 = *(void **)(a1 + 8);
      uint8x8_t v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        unsigned int v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          std::string v132 = (char *)operator new(8 * v129);
          int64_t v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          unint64_t v118 = v133;
          if (!v29)
          {
            unint64_t v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              uint64_t v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            uint64_t v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v136 = &v133[v138];
            v121 += v138;
            std::__fs::filesystem::path v139 = (long long *)(v120 + 3);
            uint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)uint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)uint64_t v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            unint64_t v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        unint64_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          unint64_t v118 = *(char **)(a1 + 8);
        }
        uint8x8_t v119 = &v118[-8 * v126];
        unint64_t v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)unint64_t v118 = v122;
      unint64_t v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = v8 << 8;
  uint64_t v40 = &v13[8 * (v11 - v8)];
  long long v41 = &v13[8 * v12];
  unint64_t v42 = v40;
  unint64_t v43 = v13;
  do
  {
    uint64_t v44 = operator new(0x1000uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      unint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      unint64_t v49 = &v40[-8 * (v47 >> 1)];
      unint64_t v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        unint64_t v50 = v40;
      }
      unint64_t v42 = &v49[v41 - v40];
      uint64_t v40 = &v50[-8 * v48];
      unint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v52 = (char *)operator new(8 * v51);
    uint64_t v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    unint64_t v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      unint64_t v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        unint64_t v60 = &v40[v63];
        uint64_t v64 = (long long *)(v40 + 16);
        long long v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)long long v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        unint64_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    long long v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    uint64_t v40 = &v52[8 * (v51 >> 2)];
    unint64_t v43 = v52;
LABEL_49:
    *(void *)unint64_t v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  uint64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int64x2_t v79 = (char *)operator new(8 * v78);
          std::string v80 = v79;
          unint64_t v81 = v78 >> 2;
          uint64_t v69 = &v79[8 * (v78 >> 2)];
          unint64_t v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            unint64_t v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              unint64_t v85 = &v79[8 * (v78 >> 2)];
              unint64_t v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v85 = &v69[v89];
            unint64_t v86 = &v40[v89];
            int v90 = (long long *)(v40 + 16);
            uint64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)uint64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)unint64_t v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          long long v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          unint64_t v43 = v80;
          goto LABEL_81;
        }
        unint64_t v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        unint64_t v76 = &v40[-8 * (v74 >> 1)];
        unsigned int v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          unsigned int v77 = v40;
        }
        unint64_t v42 = &v76[v41 - v40];
        uint64_t v69 = &v77[-8 * v75];
        unint64_t v43 = v72;
      }
      else
      {
        uint64_t v69 = v40;
      }
LABEL_81:
      *(void *)unint64_t v42 = *v68;
      v42 += 8;
      uint64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      uint64_t v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  uint64_t v69 = v40;
LABEL_75:
  unint64_t v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v101 = (char *)operator new(8 * v100);
          unint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          uint64_t v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          unint64_t v42 = v69;
          if (!v29)
          {
            unint64_t v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            long long v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            long long v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            long long v105 = &v69[v109];
            uint64_t v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            long long v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)long long v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)long long v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          long long v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          unint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          uint64_t v69 = &v97[8 * (v96 >> 1)];
          unint64_t v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            unint64_t v99 = v42;
          }
          unint64_t v42 = &v99[8 * v98];
        }
        unint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  unint64_t v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) -= v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_1924EF1F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1924EF244()
{
}

uint64_t std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = &v2[v4 >> 8];
    uint64_t v6 = (uint64_t)*v5 + 16 * v4;
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v4);
    if (v6 != v7)
    {
      while (1)
      {
        unint64_t v8 = *(std::__shared_weak_count **)(v6 + 8);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        v6 += 16;
        if (v6 - (void)*v5 == 4096) {
          goto LABEL_8;
        }
LABEL_4:
        if (v6 == v7)
        {
          uint64_t v2 = *(void ***)(a1 + 8);
          uint64_t v3 = *(void ***)(a1 + 16);
          goto LABEL_12;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v6 += 16;
      if (v6 - (void)*v5 != 4096) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v9 = (uint64_t)v5[1];
      ++v5;
      uint64_t v6 = v9;
      goto LABEL_4;
    }
LABEL_12:
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = *(void ***)(a1 + 16);
        uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 128;
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 256;
LABEL_19:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            uint64_t v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              unsigned int v77 = (long long *)(v6 + 3);
              unint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *unint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1000uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1000uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v91);
    long long v41 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            int64_t v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              unint64_t v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  int v27 = &v25[8 * v21];
  int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    int v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v49 = (char *)operator new(8 * v48);
      int v27 = &v49[8 * (v48 >> 2)];
      int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v25 = v49;
      *(void *)int v27 = v90;
      BOOL v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)int v27 = v26;
      BOOL v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v60 = (char *)operator new(8 * v59);
          unint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          BOOL v29 = v53;
          if (!v37)
          {
            BOOL v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            long long v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            long long v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            long long v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            unint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          BOOL v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      unint64_t v51 = v53 - 8;
      int v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)int v27 = v26;
  BOOL v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  unint64_t v51 = v27;
LABEL_46:
  int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_1924EF994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1924EF9B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1924EF9C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1924EF9DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

Espresso::AOT::SegmenterShortestPath::StateGraph *Espresso::AOT::SegmenterShortestPath::StateGraph::StateGraph(Espresso::AOT::SegmenterShortestPath::StateGraph *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  uint64_t v4 = a2 + a2 * a3;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v4 + 1;
  std::vector<Espresso::AOT::CostGraph::Node>::vector((void *)this + 4, v4 + 2);
  return this;
}

{
  uint64_t v4;

  *(void *)this = a2;
  *((void *)this + 1) = a3;
  uint64_t v4 = a2 + a2 * a3;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v4 + 1;
  std::vector<Espresso::AOT::CostGraph::Node>::vector((void *)this + 4, v4 + 2);
  return this;
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge(Espresso::AOT::SegmenterShortestPath::StateGraph *a1, void *a2, void *a3, double a4)
{
}

uint64_t Espresso::AOT::SegmenterShortestPath::StateGraph::GetNodeIdx(uint64_t a1, void *a2)
{
  return *a2 + a2[1] + a2[1] * *(void *)(a1 + 8) + 1;
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdgeFromSI(Espresso::AOT::SegmenterShortestPath::StateGraph *a1, void *a2, double a3)
{
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdgeToSO(Espresso::AOT::SegmenterShortestPath::StateGraph *a1, void *a2, double a3)
{
}

unint64_t Espresso::AOT::SegmenterShortestPath::StateGraph::GetBEIdx(Espresso::AOT::SegmenterShortestPath::StateGraph *this, unint64_t a2)
{
  if (*((void *)this + 2) >= a2 || *((void *)this + 3) <= a2) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
  }
  return (a2 - 1) / (*((void *)this + 1) + 1);
}

unint64_t Espresso::AOT::SegmenterShortestPath::StateGraph::GetOpIdx(Espresso::AOT::SegmenterShortestPath::StateGraph *this, unint64_t a2)
{
  if (*((void *)this + 2) >= a2 || *((void *)this + 3) <= a2) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
  }
  return (a2 - 1) % (*((void *)this + 1) + 1);
}

void Espresso::AOT::CostGraph::~CostGraph(Espresso::AOT::CostGraph *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *(void **)this;
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 1);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)this;
    }
    *((void *)this + 1) = v2;
    operator delete(v4);
  }
}

uint64_t Espresso::AOT::SegmenterShortestPath::StateGraph::GetNodes(Espresso::AOT::SegmenterShortestPath::StateGraph *this)
{
  return (uint64_t)this + 32;
}

uint64_t Espresso::AOT::SegmenterShortestPath::OpCostMap::DeleteDispatchUnit(uint64_t result, unsigned __int8 **a2, unint64_t a3)
{
  unint64_t v22 = a3;
  uint64_t v3 = *(void *)(result + 24);
  uint64_t v4 = *(void *)(result + 32);
  if (v3 == v4) {
    return result;
  }
  uint64_t v6 = (void *)result;
  unint64_t v7 = 0;
  char v8 = *((unsigned char *)a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v9 = a2[1];
  }
  if (v8 >= 0) {
    uint64_t v10 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v10 = *a2;
  }
  while (1)
  {
    uint64_t v11 = *(unsigned __int8 *)(v3 + 23);
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    }
    else {
      uint64_t v12 = *(unsigned __int8 **)(v3 + 8);
    }
    if (v12 != v9) {
      goto LABEL_9;
    }
    if ((v11 & 0x80) == 0) {
      break;
    }
    uint64_t result = memcmp(*(const void **)v3, v10, *(void *)(v3 + 8));
    if (!result) {
      goto LABEL_19;
    }
LABEL_9:
    ++v7;
    v3 += 24;
    if (v3 == v4) {
      return result;
    }
  }
  if (*(unsigned char *)(v3 + 23))
  {
    uint64_t v13 = 0;
    while (*(unsigned __int8 *)(v3 + v13) == v10[v13])
    {
      if (v11 == ++v13) {
        goto LABEL_19;
      }
    }
    goto LABEL_9;
  }
LABEL_19:
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6[1] - *v6) >> 3) <= v7) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t result = *v6 + 40 * v7;
  int8x8_t v14 = *(int8x8_t *)(result + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v16 = a3;
      if (*(void *)&v14 <= a3) {
        unint64_t v16 = a3 % *(void *)&v14;
      }
    }
    else
    {
      unint64_t v16 = (*(void *)&v14 - 1) & a3;
    }
    uint64_t v17 = *(void **)(*(void *)result + 8 * v16);
    if (v17)
    {
      uint64_t v18 = (void *)*v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          uint64_t v19 = *(void *)&v14 - 1;
          while (1)
          {
            uint64_t v21 = v18[1];
            if (v21 == a3)
            {
              if (v18[2] == a3) {
                return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((void *)result, &v22);
              }
            }
            else if ((v21 & v19) != v16)
            {
              return result;
            }
            uint64_t v18 = (void *)*v18;
            if (!v18) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v20 = v18[1];
          if (v20 == a3)
          {
            if (v18[2] == a3) {
              return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((void *)result, &v22);
            }
          }
          else
          {
            if (v20 >= *(void *)&v14) {
              v20 %= *(void *)&v14;
            }
            if (v20 != v16) {
              return result;
            }
          }
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
    }
  }
  return result;
}

uint64_t Espresso::AOT::SegmenterShortestPath::OpCostMap::FindBackendID(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    char v5 = *((unsigned char *)a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v6 = a2[1];
    }
    if (v5 >= 0) {
      unint64_t v7 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v7 = *a2;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v2 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, v7, *(void *)(v2 + 8))) {
            return v4;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 23)) {
            return v4;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v2 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v4;
            }
          }
        }
      }
      ++v4;
      v2 += 24;
    }
    while (v2 != v3);
  }
  return 0;
}

void E5Common::Utils::MILListToCpp<std::string>(MIL::IRValue *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (MIL::IRListValue *)MIL::IRValue::AsList(a1);
  uint64_t Values = MIL::IRListValue::GetValues(v3);
  if (v5)
  {
    uint64_t v6 = (MIL::IRValue **)Values;
    uint64_t v7 = 16 * v5;
    do
    {
      MIL::IRValue::AsTensor(*v6);
      MIL::IRValue::GetScalar<std::string>();
      unint64_t v9 = *(void *)(a2 + 8);
      if (v9 < *(void *)(a2 + 16))
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v9 + 16) = v13;
        *(_OWORD *)unint64_t v9 = v8;
        *(void *)(a2 + 8) = v9 + 24;
      }
      else
      {
        uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)__p);
        int v11 = SHIBYTE(v13);
        *(void *)(a2 + 8) = v10;
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
}

void sub_1924EFF64(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924EFF78(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924EFF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](v15);
    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::~StateGraph(Espresso::AOT::SegmenterShortestPath::StateGraph *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    uint64_t v4 = (void *)*((void *)this + 4);
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 5);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v2;
    operator delete(v4);
  }
}

void *std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::~vector[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            long long v8 = (void *)*v5;
            unint64_t v9 = (void *)v5[3];
            if (v9)
            {
              v5[4] = v9;
              operator delete(v9);
            }
            operator delete(v5);
            uint64_t v5 = v8;
          }
          while (v8);
        }
        uint64_t v7 = (void *)*(v3 - 5);
        v3 -= 5;
        uint64_t v6 = v7;
        *uint64_t v3 = 0;
        if (v7) {
          operator delete(v6);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>::~unique_ptr[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Espresso::AOT::MILSegmenterAnalytics::~MILSegmenterAnalytics(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void Espresso::AOT::SegmenterShortestPath::OpCostMap::~OpCostMap(Espresso::AOT::SegmenterShortestPath::OpCostMap *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v6 = (void *)*((void *)this + 1);
    uint64_t v7 = *(void **)this;
    if (v6 != v5)
    {
      do
      {
        long long v8 = (void *)*(v6 - 3);
        if (v8)
        {
          do
          {
            unint64_t v9 = (void *)*v8;
            operator delete(v8);
            long long v8 = v9;
          }
          while (v9);
        }
        int v11 = (void *)*(v6 - 5);
        v6 -= 5;
        uint64_t v10 = v11;
        *uint64_t v6 = 0;
        if (v11) {
          operator delete(v10);
        }
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)this;
    }
    *((void *)this + 1) = v5;
    operator delete(v7);
  }
}

double Espresso::AOT::SegmenterShortestPath::EstimateTransferCost(Espresso::AOT::SegmenterShortestPath *this, uint64_t a2, unint64_t a3, const unint64_t *a4)
{
  Espresso::AOT::BackendRegistry::GetCostEstimator((void *)this + 1, *((void *)this + 7) + 24 * a2, &v8);
  (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr))(*(void *)v8 + 24))(&v10);
  double Runtime = Espresso::AOT::CostEstimate::GetRuntime(v10);
  uint64_t v5 = v10;
  uint64_t v10 = 0;
  if (v5) {
    (*(void (**)(Espresso::AOT::CostEstimate *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return Runtime;
}

void sub_1924F0328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    Espresso::AOT::MILSegmenterAnalytics::UpdateWithValidationResults();
  }
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*(v4 - 3);
          if (v6)
          {
            do
            {
              unint64_t v9 = (void *)*v6;
              uint64_t v10 = (void *)v6[3];
              if (v10)
              {
                v6[4] = v10;
                operator delete(v10);
              }
              operator delete(v6);
              uint64_t v6 = v9;
            }
            while (v9);
          }
          uint64_t v8 = (void *)*(v4 - 5);
          v4 -= 5;
          uint64_t v7 = v8;
          void *v4 = 0;
          if (v8) {
            operator delete(v7);
          }
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  int8x8_t v14 = (void *)(a1 + 16);
  int v11 = operator new(0x30uLL);
  *int v11 = 0;
  v11[1] = v7;
  uint64_t v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *int v11 = *v19;
LABEL_61:
      *uint64_t v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *int v11 = *v14;
  *int8x8_t v14 = v11;
  *(void *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v28 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1924F07C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void ***std::__exception_guard_exceptions<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      unint64_t v4 = v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*(v4 - 3);
          if (v6)
          {
            do
            {
              unint64_t v7 = (void *)*v6;
              operator delete(v6);
              uint64_t v6 = v7;
            }
            while (v7);
          }
          uint8x8_t v9 = (void *)*(v4 - 5);
          v4 -= 5;
          unint64_t v8 = v9;
          void *v4 = 0;
          if (v9) {
            operator delete(v8);
          }
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (void *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x28uLL);
  void *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v15[4] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      void *v15 = *v19;
LABEL_61:
      *uint64_t v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v28 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1924F0BF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::pair<unsigned long long,unsigned long long>> const&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  int8x8_t v14 = operator new(0x28uLL);
  *int8x8_t v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  v14[4] = *(void *)(a3 + 16);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *int8x8_t v14 = *v18;
LABEL_61:
      *uint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *int8x8_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924F0F20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long long> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  int8x8_t v14 = operator new(0x20uLL);
  *int8x8_t v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *int8x8_t v14 = *v18;
LABEL_61:
      *uint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *int8x8_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924F1244(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        unint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::vector<unsigned long>> const&>(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t result = (void *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = result[1];
            if (v11 == v5)
            {
              if (result[2] == v5) {
                return result;
              }
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__construct_node_hash<std::pair<unsigned long long const,std::vector<unsigned long>> const&>(a1, *a2, a3, (uint64_t)&v25);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    unint64_t v23 = v6 - 1;
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
      {
        unint64_t v3 = v5 % v6;
        int8x8_t v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        int8x8_t v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v23 & v5;
      int8x8_t v14 = *(void **)(*(void *)a1 + 8 * (v23 & v5));
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *uint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      unint64_t v24 = *(void *)(*v25 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v24 >= v6) {
          v24 %= v6;
        }
      }
      else
      {
        v24 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v25;
    }
    goto LABEL_61;
  }
  int8x8_t v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v25 = *v14;
  *int8x8_t v14 = v25;
LABEL_61:
  uint64_t result = v25;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1924F15E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__construct_node_hash<std::pair<unsigned long long const,std::vector<unsigned long>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t result = 0;
  result[1] = a2;
  uint8x8_t v9 = (unsigned char *)a3[1];
  result[2] = *a3;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  unint64_t v10 = (unsigned char *)a3[2];
  int64_t v11 = v10 - v9;
  if (v10 != v9)
  {
    float v12 = result;
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float v13 = (char *)operator new(v10 - v9);
    v12[3] = v13;
    v12[4] = v13;
    int8x8_t v14 = &v13[8 * (v11 >> 3)];
    v12[5] = v14;
    uint64_t result = memcpy(v13, v9, v11);
    v12[4] = v14;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1924F16A8(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_1(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void std::vector<Espresso::AOT::CostGraph::Node>::vector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)OUTLINED_FUNCTION_4_0(a1, a2);
  if (!v7)
  {
    uint8x8_t v8 = v5;
    uint64_t v9 = v6;
    do
    {
      int64_t v11 = *(void **)(v9 - 24);
      v9 -= 24;
      unint64_t v10 = v11;
      if (v11)
      {
        *(void *)(v6 - 16) = v10;
        operator delete(v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != v2);
    uint64_t v4 = *v8;
  }
  *unint64_t v3 = v2;

  operator delete(v4);
}

void Espresso::AOT::SegmenterShortestPath::BuildStateGraph()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t v4 = *(char **)(v3 + 40);
  uint64_t v6 = v5;
  if (v4 != v5)
  {
    char v7 = v2;
    uint8x8_t v8 = v4;
    do
    {
      unint64_t v10 = (void *)*((void *)v8 - 3);
      v8 -= 24;
      uint64_t v9 = v10;
      if (v10)
      {
        *((void *)v4 - 2) = v9;
        operator delete(v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != v0);
    uint64_t v6 = *v7;
  }
  *(void *)(v1 + 40) = v0;
  operator delete(v6);
}

void Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)OUTLINED_FUNCTION_3_1(a1, a2);
  if (!v6)
  {
    do
    {
      char v7 = (void *)*(v4 - 3);
      if (v7)
      {
        do
        {
          uint8x8_t v8 = (void *)*v7;
          operator delete(v7);
          char v7 = v8;
        }
        while (v8);
      }
      unint64_t v10 = (void *)*(v4 - 5);
      v4 -= 5;
      uint64_t v9 = v10;
      void *v4 = 0;
      if (v10) {
        operator delete(v9);
      }
    }
    while (v4 != v2);
    unint64_t v5 = *(void **)v3;
  }
  *(void *)(v3 + 8) = v2;

  operator delete(v5);
}

void std::vector<std::unordered_map<unsigned long,double>>::vector(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(a1, a2);
  if (!v7)
  {
    uint8x8_t v8 = v6;
    do
    {
      uint64_t v9 = (void *)*(v4 - 3);
      if (v9)
      {
        do
        {
          unint64_t v10 = (void *)*v9;
          operator delete(v9);
          uint64_t v9 = v10;
        }
        while (v10);
      }
      float v12 = (void *)*(v4 - 5);
      v4 -= 5;
      int64_t v11 = v12;
      void *v4 = 0;
      if (v12) {
        operator delete(v11);
      }
    }
    while (v4 != v2);
    unint64_t v5 = *v8;
  }
  *uint64_t v3 = v2;

  operator delete(v5);
}

void std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::vector()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t v4 = *v3;
  char v6 = v5;
  if (v4 != v5)
  {
    char v7 = v2;
    do
    {
      uint8x8_t v8 = (void *)*(v4 - 3);
      if (v8)
      {
        do
        {
          uint64_t v9 = (void *)*v8;
          unint64_t v10 = (void *)v8[3];
          if (v10)
          {
            v8[4] = v10;
            operator delete(v10);
          }
          operator delete(v8);
          uint8x8_t v8 = v9;
        }
        while (v9);
      }
      float v12 = (void *)*(v4 - 5);
      v4 -= 5;
      int64_t v11 = v12;
      void *v4 = 0;
      if (v12) {
        operator delete(v11);
      }
    }
    while (v4 != v0);
    char v6 = *v7;
  }
  void *v1 = v0;

  operator delete(v6);
}

void std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*,std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*>()
{
  OUTLINED_FUNCTION_2_1();
  do
  {
    uint64_t v2 = (void *)*(v1 - 3);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    unint64_t v5 = (void *)*(v1 - 5);
    v1 -= 5;
    uint64_t v4 = v5;
    void *v1 = 0;
    if (v5) {
      operator delete(v4);
    }
  }
  while (v1 != v0);
}

void std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::vector<unsigned long>>*,std::unordered_map<unsigned long long,std::vector<unsigned long>>*>()
{
  OUTLINED_FUNCTION_2_1();
  do
  {
    uint64_t v2 = (void *)*(v1 - 3);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        uint64_t v4 = (void *)v2[3];
        if (v4)
        {
          v2[4] = v4;
          operator delete(v4);
        }
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    char v6 = (void *)*(v1 - 5);
    v1 -= 5;
    unint64_t v5 = v6;
    void *v1 = 0;
    if (v6) {
      operator delete(v5);
    }
  }
  while (v1 != v0);
}

float Espresso::AOT::DTrees::convAneFp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 16152.0;
  }
  if (v1 <= 11.675) {
    return 471.18;
  }
  float result = 7160.8;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 661.28;
  }
  return result;
}

float Espresso::AOT::DTrees::convAneIp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 11582.0;
  }
  if (v1 <= 11.675) {
    return 436.78;
  }
  float result = 5980.9;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 489.77;
  }
  return result;
}

float Espresso::AOT::DTrees::convAneJp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 12136.0;
  }
  if (v1 <= 11.675) {
    return 200.0;
  }
  float result = 5733.2;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 499.4;
  }
  return result;
}

float Espresso::AOT::DTrees::convAneKp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 12136.0;
  }
  if (v1 <= 11.675) {
    return 474.91;
  }
  float result = 5638.0;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 498.64;
  }
  return result;
}

float Espresso::AOT::DTrees::convAneGp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 6871.0;
  }
  if (v1 <= 11.675) {
    return 300.0;
  }
  float result = 3159.3;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 591.06;
  }
  return result;
}

float Espresso::AOT::DTrees::convAneHp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 7500.0;
  }
  if (v1 <= 11.675) {
    return 300.0;
  }
  float result = 3138.9;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 569.43;
  }
  return result;
}

float Espresso::AOT::DTrees::convCpuFp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 655.96;
  }
  if (v1 <= 11.675) {
    return 23.548;
  }
  float result = 337.38;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 150.0;
  }
  return result;
}

float Espresso::AOT::DTrees::convCpuIp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 633.97;
  }
  if (v1 <= 11.675) {
    return 27.277;
  }
  float result = 259.17;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 100.0;
  }
  return result;
}

float Espresso::AOT::DTrees::convCpuJp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 1253.0;
  }
  if (v1 <= 11.675) {
    return 23.877;
  }
  float result = 387.06;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 302.44;
  }
  return result;
}

float Espresso::AOT::DTrees::convCpuKp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 1002.3;
  }
  if (v1 <= 11.675) {
    return 24.405;
  }
  float result = 381.07;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 200.0;
  }
  return result;
}

float Espresso::AOT::DTrees::convCpuGp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 1461.6;
  }
  if (v1 <= 11.675) {
    return 25.749;
  }
  float result = 516.01;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 321.0;
  }
  return result;
}

float Espresso::AOT::DTrees::convCpuHp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 1371.7;
  }
  if (v1 <= 11.675) {
    return 28.893;
  }
  float result = 407.71;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 385.77;
  }
  return result;
}

float Espresso::AOT::DTrees::convGpuFp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 2402.1;
  }
  if (v1 <= 11.675) {
    return 137.37;
  }
  float result = 781.21;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 177.81;
  }
  return result;
}

float Espresso::AOT::DTrees::convGpuIp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 1572.2;
  }
  if (v1 <= 11.675) {
    return 114.07;
  }
  float result = 737.86;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 133.18;
  }
  return result;
}

float Espresso::AOT::DTrees::convGpuJp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 5491.8;
  }
  if (v1 <= 11.675) {
    return 80.0;
  }
  float result = 1269.4;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 454.65;
  }
  return result;
}

float Espresso::AOT::DTrees::convGpuKp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 2940.1;
  }
  if (v1 <= 11.675) {
    return 183.69;
  }
  float result = 894.78;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 234.7;
  }
  return result;
}

float Espresso::AOT::DTrees::convGpuGp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 3630.9;
  }
  if (v1 <= 11.675) {
    return 204.98;
  }
  float result = 1534.4;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 321.53;
  }
  return result;
}

float Espresso::AOT::DTrees::convGpuHp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 > 67.145) {
    return 6400.7;
  }
  if (v1 <= 11.675) {
    return 232.02;
  }
  float result = 1791.8;
  if (*(double *)(a1 + 24) > 0.8961) {
    return 491.87;
  }
  return result;
}

float Espresso::AOT::DTrees::convAneCp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 294.93;
  if (v1 > 10.265) {
    float v2 = 3117.3;
  }
  float v3 = 5231.1;
  if (v1 > 70.08) {
    float v3 = 10637.0;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

float Espresso::AOT::DTrees::convAneDp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 299.15;
  if (v1 > 10.265) {
    float v2 = 2954.7;
  }
  float v3 = 6423.1;
  if (v1 > 70.08) {
    float v3 = 11304.0;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

float Espresso::AOT::DTrees::convAneEp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 344.43;
  if (v1 > 10.265) {
    float v2 = 3491.2;
  }
  float v3 = 6674.3;
  if (v1 > 70.08) {
    float v3 = 13916.0;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

float Espresso::AOT::DTrees::convCpuCp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 17.071;
  if (v1 > 10.265) {
    float v2 = 237.49;
  }
  float v3 = 415.06;
  if (v1 > 70.08) {
    float v3 = 561.91;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

float Espresso::AOT::DTrees::convCpuDp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 19.277;
  if (v1 > 10.265) {
    float v2 = 226.81;
  }
  float v3 = 465.12;
  if (v1 > 70.08) {
    float v3 = 753.67;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

float Espresso::AOT::DTrees::convCpuEp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 18.202;
  if (v1 > 10.265) {
    float v2 = 249.23;
  }
  float v3 = 503.91;
  if (v1 > 70.08) {
    float v3 = 621.17;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

float Espresso::AOT::DTrees::convGpuCp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 53.286;
  if (v1 > 10.265) {
    float v2 = 287.96;
  }
  float v3 = 441.59;
  if (v1 > 70.08) {
    float v3 = 646.2;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

float Espresso::AOT::DTrees::convGpuDp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 57.443;
  if (v1 > 10.265) {
    float v2 = 400.99;
  }
  float v3 = 665.41;
  if (v1 > 70.08) {
    float v3 = 918.48;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

float Espresso::AOT::DTrees::convGpuEp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  float v2 = 68.757;
  if (v1 > 10.265) {
    float v2 = 466.06;
  }
  float v3 = 678.01;
  if (v1 > 70.08) {
    float v3 = 815.2;
  }
  if (v1 <= 43.685) {
    return v2;
  }
  else {
    return v3;
  }
}

void Espresso::AOT::Backends::CostModel::PoolOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::PoolOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_1924F27AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  void *v15 = 0;
  MEMORY[0x192FF16B0](v16, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::ValidationMessage::ValidationMessage(void *a1, void *a2, long long *a3)
{
  *a1 = *a2;
  uint64_t v4 = (std::string *)(a1 + 1);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

{
  std::string *v4;
  long long v5;

  *a1 = *a2;
  uint64_t v4 = (std::string *)(a1 + 1);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

uint64_t Espresso::AOT::ValidationMessage::GetDispatchUnit(Espresso::AOT::ValidationMessage *this)
{
  return *(void *)this;
}

void Espresso::AOT::ValidationMessage::GetMessage(Espresso::AOT::ValidationMessage *this@<X0>, uint64_t a2@<X8>)
{
  float v2 = (const std::string::value_type **)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::size_type v3 = *((void *)this + 2);
    if (v3)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *v2, v3);
      return;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    *(_OWORD *)a2 = *(_OWORD *)v2;
    *(void *)(a2 + 16) = *((void *)this + 3);
    return;
  }
  *(unsigned char *)(a2 + 23) = 21;
  strcpy((char *)a2, "No validation message");
}

void sub_1924F29C8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::ValidationResult::GetValidationMessages(Espresso::AOT::ValidationResult *this)
{
  return (uint64_t)this + 32;
}

uint64_t *Espresso::AOT::ValidationResult::IsFeatureSupported(uint64_t a1, uint64_t a2)
{
  std::string::size_type v3 = (void *)(a1 + 56);
  float result = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 56), a2);
  if (result)
  {
    long long v5 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v3, a2);
    if (!v5) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return (uint64_t *)(*((unsigned char *)v5 + 40) != 0);
  }
  return result;
}

void Espresso::AOT::AOTCompilerDriver::~AOTCompilerDriver(Espresso::AOT::AOTCompilerDriver *this)
{
  float v2 = (char *)*((void *)this + 2);
  if (v2)
  {
    do
    {
      uint64_t v4 = *(char **)v2;
      uint64_t v5 = *((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      float v2 = v4;
    }
    while (v4);
  }
  std::string::size_type v3 = *(void **)this;
  *(void *)this = 0;
  if (v3) {
    operator delete(v3);
  }
}

{
  char *v2;
  void *v3;
  char *v4;
  uint64_t v5;

  float v2 = (char *)*((void *)this + 2);
  if (v2)
  {
    do
    {
      uint64_t v4 = *(char **)v2;
      uint64_t v5 = *((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      float v2 = v4;
    }
    while (v4);
  }
  std::string::size_type v3 = *(void **)this;
  *(void *)this = 0;
  if (v3) {
    operator delete(v3);
  }
}

void Espresso::AOT::AOTCompilerDriver::AOTCompilerDriver(Espresso::AOT::AOTCompilerDriver *this)
{
  Espresso::AOT::AOTCompilerDriver::MakeDefaultBackendRegistry((uint64_t)&__p);
}

{
  void *__p;

  Espresso::AOT::AOTCompilerDriver::MakeDefaultBackendRegistry((uint64_t)&__p);
}

void Espresso::AOT::AOTCompilerDriver::MakeDefaultBackendRegistry(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  operator new();
}

void sub_1924F2E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_10:
      if (a9)
      {
        (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
        std::unordered_map<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>::~unordered_map[abi:ne180100](v28);
        _Unwind_Resume(a1);
      }
      std::unordered_map<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>::~unordered_map[abi:ne180100](v28);
      _Unwind_Resume(a1);
    }
LABEL_9:
    __cxa_free_exception(v29);
    goto LABEL_10;
  }
LABEL_8:
  if (!v30) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t Espresso::AOT::AOTCompilerDriver::AOTCompilerDriver(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)float result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  std::string::size_type v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *std::string::size_type v3 = 0;
    v3[1] = 0;
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)float result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  std::string::size_type v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *std::string::size_type v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::AOT::AOTCompilerDriver::Run(uint64_t a1, uint64_t a2, const char **a3)
{
  std::string::size_type v3 = *a3;
  size_t v4 = strlen(*a3);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v11) = v4;
    uint64_t v6 = __dst;
    if (!v4)
    {
LABEL_9:
      *((unsigned char *)v6 + v5) = 0;
      long long v9 = xmmword_192DAA330;
      strcpy((char *)operator new(0x20uLL), "Espresso ahead-of-time compiler");
      Espresso::AOT::AOTCompilerOptionsManager::AOTCompilerOptionsManager();
    }
  }
  memmove(v6, v3, v5);
  goto LABEL_9;
}

void sub_1924F40F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a2 == 1)
  {
    unint64_t v63 = __cxa_begin_catch(a1);
    uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Compilation error: ", 19);
    long long v65 = (const char *)(*(uint64_t (**)(void *))(*(void *)v63 + 16))(v63);
    size_t v66 = strlen(v65);
    uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
    a10 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)&a10, 1);
    __cxa_end_catch();
    if (*(char *)(v61 - 185) < 0) {
      JUMPOUT(0x1924F4004);
    }
    JUMPOUT(0x1924F400CLL);
  }
  if (*(char *)(v61 - 185) < 0)
  {
    operator delete(*(void **)(v61 - 208));
    std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a35);
    if (v59) {
      goto LABEL_4;
    }
  }
  else
  {
    std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a35);
    if (v59)
    {
LABEL_4:
      (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
      if ((*(char *)(v61 - 153) & 0x80000000) == 0)
      {
LABEL_9:
        Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a59);
        Espresso::AOT::AOTCompilerOptionsManager::~AOTCompilerOptionsManager((cxxopts::Options **)(v61 - 216));
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(*(void **)(v61 - 176));
      goto LABEL_9;
    }
  }
  if ((*(char *)(v61 - 153) & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_1924F47B0()
{
}

void sub_1924F47B8()
{
}

uint64_t Espresso::AOT::AOTCompilerDriver::GetBackendRegistrySize(Espresso::AOT::AOTCompilerDriver *this)
{
  return *((void *)this + 3);
}

void Espresso::AOT::AOTCompilerDriver::GetRegisteredBackendNames(Espresso::AOT::AOTCompilerDriver *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, *((void *)this + 3));
  size_t v4 = (uint64_t *)*((void *)this + 2);
  if (v4)
  {
    std::vector<std::string>::pointer end = a2->__end_;
    do
    {
      while (1)
      {
        uint64_t v7 = (long long *)(v4 + 2);
        if (end < a2->__end_cap_.__value_) {
          break;
        }
        std::vector<std::string>::pointer end = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)v7);
        a2->__end_ = end;
        size_t v4 = (uint64_t *)*v4;
        if (!v4) {
          return;
        }
      }
      if (*((char *)v4 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v4[2], v4[3]);
      }
      else
      {
        long long v6 = *v7;
        end->__r_.__value_.__r.__words[2] = v4[4];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v6;
      }
      a2->__end_ = ++end;
      a2->__end_ = end;
      size_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_1924F4888(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924F489C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1924F48B4(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>>>::__emplace_unique_key_args<std::string,std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    BOOL v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = *((void *)v16 + 1);
            if (v24 == v12)
            {
              uint64_t v25 = v16[39];
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = v16[39];
              }
              else {
                uint64_t v26 = *((void *)v16 + 3);
              }
              if (v26 == v18)
              {
                unint64_t v27 = (const void **)(v16 + 16);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, *((void *)v16 + 3))) {
                    return v16;
                  }
                }
                else
                {
                  if (!v16[39]) {
                    return v16;
                  }
                  for (uint64_t i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    unint64_t v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = *(unsigned __int8 **)v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v12)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              uint64_t v22 = (const void **)(v16 + 16);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                for (uint64_t j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  uint64_t v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  BOOL v29 = (void *)(a1 + 16);
  uint64_t v16 = (unsigned __int8 *)operator new(0x30uLL);
  v47[0] = v16;
  v47[1] = a1 + 16;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v12;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  uint64_t v30 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v31 = *a4;
  *a4 = 0;
  *((void *)v16 + 4) = v30;
  *((void *)v16 + 5) = v31;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (v13 && (float)(v33 * (float)v13) >= v32)
  {
    uint64_t v34 = *(void *)a1;
    uint64_t v35 = *(void **)(*(void *)a1 + 8 * v4);
    if (v35)
    {
LABEL_54:
      *(void *)uint64_t v16 = *v35;
LABEL_89:
      *uint64_t v35 = v16;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v36 = 1;
    if (v13 >= 3) {
      BOOL v36 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v13);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v44 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v34 = *(void *)a1;
        uint64_t v35 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v35) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v34 = *(void *)a1;
        uint64_t v35 = *(void **)(*(void *)a1 + 8 * v12);
        if (v35) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v12;
      uint64_t v34 = *(void *)a1;
      uint64_t v35 = *(void **)(*(void *)a1 + 8 * (v44 & v12));
      if (v35) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v16 = *v29;
  void *v29 = v16;
  *(void *)(v34 + 8 * v4) = v29;
  if (*(void *)v16)
  {
    unint64_t v45 = *(void *)(*(void *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v45 >= v13) {
        v45 %= v13;
      }
    }
    else
    {
      v45 &= v13 - 1;
    }
    uint64_t v35 = (void *)(*(void *)a1 + 8 * v45);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_1924F4CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *Espresso::AOT::MILCompilerForMPSGraph::MILCompilerForMPSGraph(void *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  long long v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  unint64_t v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  int v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v16;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  unint64_t v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      uint8x8_t v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_16:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      unint64_t v11 = v14;
    }
    while (v14);
  }
  unint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &unk_1EE36B508;
  Espresso::AOT::MILCompilerForMPSGraph::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  return a1;
}

void sub_1924F4EC8(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_1924F4EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void Espresso::AOT::MILCompilerForMPSGraph::ExtractOptions(Espresso::AOT::MILCompilerForMPSGraph *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(void *)(Output + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)Output;
    *(void *)(a2 + 16) = *(void *)(Output + 16);
    *(_OWORD *)a2 = v6;
  }
  *(unsigned char *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 25) = 0;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "experimental");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)__p, (uint64_t)v35);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "enable-mpsgraphpackage");
  HIBYTE(__p[2]) = 22;
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v35, (uint64_t)__p);
  uint64_t v8 = v7;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_12;
    }
  }
  else if (!v7)
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)v8 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 24) = *((unsigned char *)v8 + 40);
LABEL_12:
  HIBYTE(v33) = 2;
  strcpy((char *)v32, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)v32, (uint64_t)__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
  HIBYTE(v33) = 12;
  strcpy((char *)v32, "dump-ir-only");
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v32);
  unint64_t v10 = v9;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(v32[0]);
    if (!v10) {
      goto LABEL_20;
    }
  }
  else if (!v9)
  {
    goto LABEL_20;
  }
  if (*((_DWORD *)v10 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 25) = *((unsigned char *)v10 + 40);
LABEL_20:
  HIBYTE(v31[2]) = 8;
  strcpy((char *)v31, "mpsgraph");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)v31, (uint64_t)v32);
  if (SHIBYTE(v31[2]) < 0) {
    operator delete(v31[0]);
  }
  strcpy((char *)v31, "disable-type-inference");
  HIBYTE(v31[2]) = 22;
  unint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v32, (uint64_t)v31);
  unint64_t v12 = v11;
  if (SHIBYTE(v31[2]) < 0)
  {
    operator delete(v31[0]);
    if (!v12) {
      goto LABEL_28;
    }
  }
  else if (!v11)
  {
    goto LABEL_28;
  }
  if (*((_DWORD *)v12 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 26) = *((unsigned char *)v12 + 40);
LABEL_28:
  HIBYTE(v31[2]) = 20;
  strcpy((char *)v31, "enable-gpu-quant-ops");
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v32, (uint64_t)v31);
  uint8x8_t v14 = v13;
  if (SHIBYTE(v31[2]) < 0)
  {
    operator delete(v31[0]);
    if (!v14) {
      goto LABEL_34;
    }
  }
  else if (!v13)
  {
    goto LABEL_34;
  }
  if (*((_DWORD *)v14 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 27) = *((unsigned char *)v14 + 40);
LABEL_34:
  strcpy((char *)v31, "enable-parallel-encode");
  HIBYTE(v31[2]) = 22;
  BOOL v15 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v32, (uint64_t)v31);
  uint64_t v16 = v15;
  if (SHIBYTE(v31[2]) < 0)
  {
    operator delete(v31[0]);
    if (!v16) {
      goto LABEL_40;
    }
  }
  else if (!v15)
  {
    goto LABEL_40;
  }
  if (*((_DWORD *)v16 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 28) = *((unsigned char *)v16 + 40);
LABEL_40:
  uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a2 + 8);
  }
  if (!v17)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "--output is required and must be non-empty.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v18 = v33;
  if (v33)
  {
    do
    {
      unint64_t v19 = (void **)*v18;
      uint64_t v20 = *((unsigned int *)v18 + 16);
      if (v20 != -1) {
        ((void (*)(void **, void **))off_1EE39B918[v20])(v31, v18 + 5);
      }
      *((_DWORD *)v18 + 16) = -1;
      if (*((char *)v18 + 39) < 0) {
        operator delete(v18[2]);
      }
      operator delete(v18);
      uint64_t v18 = v19;
    }
    while (v19);
  }
  uint64_t v21 = v32[0];
  v32[0] = 0;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = (void **)__p[2];
  if (__p[2])
  {
    do
    {
      unint64_t v23 = (void **)*v22;
      uint64_t v24 = *((unsigned int *)v22 + 16);
      if (v24 != -1) {
        ((void (*)(void **, void **))off_1EE39B918[v24])(v32, v22 + 5);
      }
      *((_DWORD *)v22 + 16) = -1;
      if (*((char *)v22 + 39) < 0) {
        operator delete(v22[2]);
      }
      operator delete(v22);
      uint64_t v22 = v23;
    }
    while (v23);
  }
  uint64_t v25 = __p[0];
  __p[0] = 0;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = v36;
  if (v36)
  {
    do
    {
      unint64_t v27 = (void **)*v26;
      uint64_t v28 = *((unsigned int *)v26 + 16);
      if (v28 != -1) {
        ((void (*)(void **, void **))off_1EE39B918[v28])(__p, v26 + 5);
      }
      *((_DWORD *)v26 + 16) = -1;
      if (*((char *)v26 + 39) < 0) {
        operator delete(v26[2]);
      }
      operator delete(v26);
      uint64_t v26 = v27;
    }
    while (v27);
  }
  BOOL v29 = (void *)v35[0];
  v35[0] = 0;
  if (v29) {
    operator delete(v29);
  }
}

void sub_1924F53D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __cxa_free_exception(v29);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a23);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v30 - 72);
  if (*(char *)(v28 + 23) < 0)
  {
    operator delete(*(void **)v28);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForMPSGraph::Options::AssertValid(uint64_t this)
{
  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(this + 23)) {
      return this;
    }
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!*(void *)(this + 8)) {
    goto LABEL_5;
  }
  return this;
}

void sub_1924F555C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMPSGraph::Run(uint64_t a1, uint64_t a2, std::string::size_type *a3)
{
  uint64_t v95 = 0x2B2381A000000000;
  long long v96 = 0u;
  long long v97 = 0u;
  kdebug_trace();
  std::string::size_type v6 = *a3;
  if (a3[1] - *a3 != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one entry point is supported.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  Espresso::AOT::GetCallees(a2, (uint64_t)v93);
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string::size_type))(*(void *)a2 + 64))(&pn, a2, v6);
  v91.__pn_.__r_.__value_.__r.__words[0] = v6;
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v93, (unsigned __int8 *)v6, (uint64_t)&std::piecewise_construct, (long long **)&v91);
  long long v8 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
  *(_OWORD *)&pn.__r_.__value_.__l.__data_ = 0uLL;
  unint64_t v9 = (std::__shared_weak_count *)*((void *)v7 + 6);
  *(_OWORD *)(v7 + 40) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::string::size_type size = (std::__shared_weak_count *)pn.__r_.__value_.__l.__size_;
  if (pn.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(pn.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  Espresso::AOT::MakeIRProgramWithFunctions((uint64_t)v93, 0, &v92);
  memset(&v91, 0, sizeof(v91));
  char v11 = *(unsigned char *)(a1 + 287);
  if (v11 >= 0) {
    unint64_t v12 = (std::string *)(a1 + 264);
  }
  else {
    unint64_t v12 = *(std::string **)(a1 + 264);
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 287);
  }
  else {
    uint64_t v13 = *(void *)(a1 + 272);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v91.__pn_, v12, (std::string *)((char *)v12 + v13));
  std::string::size_type v14 = *a3;
  if (a3[1] == *a3) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  memset(&pn, 0, sizeof(pn));
  char v15 = *(unsigned char *)(v14 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (std::string *)v14;
  }
  else {
    uint64_t v16 = *(std::string **)v14;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&pn, v16, (std::string *)((char *)v16 + v17));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&pn, (uint64_t)&v91, &v90);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__create_directories(&v90, 0);
  if (!*(unsigned char *)(a1 + 288))
  {
    int v27 = 0;
    goto LABEL_36;
  }
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)Function + 160))(&pn, Function);
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v19);
  if (v20[1] == *v20)
  {
LABEL_53:
    int v27 = 1;
    uint64_t v28 = (void *)pn.__r_.__value_.__r.__words[0];
    if (pn.__r_.__value_.__r.__words[0])
    {
LABEL_35:
      pn.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
      operator delete(v28);
    }
  }
  else
  {
    uint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(*(MIL::IRValueType **)(pn.__r_.__value_.__r.__words[0] + 8 * v21));
      if (v22)
      {
        unint64_t v23 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v22);
        if (v23)
        {
          uint64_t Shape = (uint64_t *)MIL::IRTensorBufferValueType::GetShape(v23);
          uint64_t v25 = *Shape;
          uint64_t v26 = Shape[1];
          if (*Shape != v26) {
            break;
          }
        }
      }
LABEL_26:
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[1] - *v20) >> 3) <= ++v21) {
        goto LABEL_53;
      }
    }
    while (!(*(uint64_t (**)(void))(**(void **)v25 + 24))())
    {
      v25 += 8;
      if (v25 == v26) {
        goto LABEL_26;
      }
    }
    int v27 = 0;
    uint64_t v28 = (void *)pn.__r_.__value_.__r.__words[0];
    if (pn.__r_.__value_.__r.__words[0]) {
      goto LABEL_35;
    }
  }
LABEL_36:
  *((unsigned char *)&pn.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&pn, "buildInfo");
  uint64_t Attribute = MIL::IRObject::TryGetAttribute();
  uint64_t v31 = Attribute;
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if (!v31) {
      goto LABEL_46;
    }
  }
  else if (!Attribute)
  {
LABEL_46:
    if (v27) {
      goto LABEL_47;
    }
LABEL_134:
    *(_DWORD *)((char *)v87 + 3) = 0;
    v87[0] = 0;
    goto LABEL_135;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v31 + 64))(v31)) {
    goto LABEL_46;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
  MIL::IRTensorValueType::MakeScalar();
  std::string __p = operator new(0x19uLL);
  long long v89 = xmmword_192DBD8E0;
  strcpy((char *)__p, "mpsgraphpackage_disable");
  MIL::IRTensorValueType::MakeStringValue();
  MIL::IRDictionaryValue::TryGetValueForKey();
  std::string::size_type v32 = pn.__r_.__value_.__r.__words[0];
  pn.__r_.__value_.__r.__words[0] = 0;
  if (v32) {
    (*(void (**)(std::string::size_type))(*(void *)v32 + 8))(v32);
  }
  if (SHIBYTE(v89) < 0)
  {
    operator delete(__p);
    if (!__dst.__pn_.__r_.__value_.__r.__words[0]) {
      goto LABEL_130;
    }
  }
  else if (!__dst.__pn_.__r_.__value_.__r.__words[0])
  {
    goto LABEL_130;
  }
  unint64_t v39 = (unsigned __int8 *)MEMORY[0x192FF09C0]();
  if (v39)
  {
    E5Common::StringUtils::ToLower(v39, (uint64_t)&pn);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v40 = pn.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)pn.__r_.__value_.__l.__data_ == 1702195828;
      operator delete(pn.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v40 = SHIBYTE(pn.__r_.__value_.__r.__words[2]) == 4 && LODWORD(pn.__r_.__value_.__l.__data_) == 1702195828;
    }
    LOBYTE(v27) = v27 & !v40;
  }
LABEL_130:
  if (__dst.__pn_.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__pn_.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(std::string::size_type))(*(void *)__dst.__pn_.__r_.__value_.__l.__size_ + 16))(__dst.__pn_.__r_.__value_.__l.__size_);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__l.__size_);
  }
  if ((v27 & 1) == 0) {
    goto LABEL_134;
  }
LABEL_47:
  float v33 = Espresso::espresso_os_log_subsystem(0, v30);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    Espresso::AOT::MILCompilerForMPSGraph::Run(v33);

    *(_DWORD *)((char *)v87 + 3) = 0;
    v87[0] = 0;
    if (!*(unsigned char *)(a1 + 289))
    {
LABEL_49:
      uint64_t v34 = [MEMORY[0x1E4F1CA60] dictionary];
      uint64_t BuildInfo = (void *)Espresso::AOT::AOTCompilerBackend::GetBuildInfo((Espresso::AOT::AOTCompilerBackend *)a1);
      *((unsigned char *)&pn.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&pn, "built-for-profiling");
      BOOL v36 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(BuildInfo, (uint64_t)&pn);
      if (!v36) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v37 = v36 + 5;
      int v38 = *((char *)v36 + 63);
      if (v38 < 0)
      {
        if (v36[6] != 4) {
          goto LABEL_65;
        }
        unint64_t v37 = (void *)*v37;
      }
      else if (v38 != 4)
      {
LABEL_65:
        BOOL v41 = 0;
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_66:
          operator delete(pn.__r_.__value_.__l.__data_);
          if (!v41) {
            goto LABEL_68;
          }
          goto LABEL_67;
        }
LABEL_63:
        if (!v41) {
          goto LABEL_68;
        }
LABEL_67:
        [v34 setObject:&unk_1EE3AEDA0 forKeyedSubscript:E5Common::kMpsgGraphEnableShaderProfilingStrKey[0]];
LABEL_68:
        uint8x8_t v42 = (const void *)v6;
        if (*(char *)(v6 + 23) < 0) {
          uint8x8_t v42 = *(const void **)v6;
        }
        uint64_t v43 = [NSString stringWithUTF8String:v42];
        [v34 setObject:v43 forKeyedSubscript:E5Common::kMpsgGraphFunctionNameStrKey[0]];

        if (*(unsigned char *)(a1 + 290)) {
          [v34 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:E5Common::kMpsgGraphDisableTypeInferenceStrKey[0]];
        }
        if (*(unsigned char *)(a1 + 291)) {
          [v34 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:E5Common::kMpsgGraphEnableGPUQuantOpsStrKey[0]];
        }
        if (*(unsigned char *)(a1 + 292)) {
          [v34 setObject:&unk_1EE3AEDB8 forKeyedSubscript:E5Common::kMpsgGraphMaximumNumberOfEncodingThreadsStrKey[0]];
        }
        uint64_t v79 = E5Common::CreateMPSGraphExecutableFromMIL(v92, (uint64_t *)v6, v34);
        int v44 = *(char *)(v6 + 23);
        if (v44 >= 0) {
          size_t v45 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          size_t v45 = *(void *)(v6 + 8);
        }
        unint64_t v46 = v45 + 16;
        if (v45 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v46 >= 0x17)
        {
          uint64_t v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17) {
            uint64_t v48 = v46 | 7;
          }
          uint64_t v49 = v48 + 1;
          p_dst = (std::__fs::filesystem::path *)operator new(v48 + 1);
          __dst.__pn_.__r_.__value_.__l.__size_ = v45 + 16;
          __dst.__pn_.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
          __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = v45 + 16;
          if (!v45) {
            goto LABEL_90;
          }
        }
        if (v44 >= 0) {
          uint64_t v50 = (const void *)v6;
        }
        else {
          uint64_t v50 = *(const void **)v6;
        }
        memmove(p_dst, v50, v45);
LABEL_90:
        strcpy((char *)p_dst + v45, ".mpsgraphpackage");
        std::string::size_type v51 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
        if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v52 = &__dst;
        }
        else {
          int v52 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
        }
        memset(&pn, 0, sizeof(pn));
        if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v51 = __dst.__pn_.__r_.__value_.__l.__size_;
        }
        std::string::append[abi:ne180100]<char const*,0>(&pn, &v52->__pn_, (std::string *)((char *)&v52->__pn_ + v51));
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&pn, (uint64_t)&v90, &v85);
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(pn.__r_.__value_.__l.__data_);
        }
        std::__fs::filesystem::path::__string_view v53 = std::__fs::filesystem::path::__parent_path(&v91);
        if (v53.__size_ > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v53.__size_ >= 0x17)
        {
          std::basic_string_view<_CharT, _Traits>::size_type v55 = (v53.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v53.__size_ | 7) != 0x17) {
            std::basic_string_view<_CharT, _Traits>::size_type v55 = v53.__size_ | 7;
          }
          std::basic_string_view<_CharT, _Traits>::size_type v56 = v55 + 1;
          uint64_t v54 = operator new(v55 + 1);
          pn.__r_.__value_.__l.__size_ = v53.__size_;
          pn.__r_.__value_.__r.__words[2] = v56 | 0x8000000000000000;
          pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        }
        else
        {
          *((unsigned char *)&pn.__r_.__value_.__s + 23) = v53.__size_;
          uint64_t v54 = &pn;
          if (!v53.__size_)
          {
LABEL_105:
            v54[v53.__size_] = 0;
            __base.__pn_ = pn;
            std::__fs::filesystem::path::lexically_relative(&v84, &v85, &__base);
            std::string::size_type v58 = v84.__pn_.__r_.__value_.__l.__size_;
            unint64_t v57 = (std::string::value_type *)v84.__pn_.__r_.__value_.__r.__words[0];
            v87[0] = v84.__pn_.__r_.__value_.__r.__words[2];
            *(_DWORD *)((char *)v87 + 3) = *(_DWORD *)((char *)&v84.__pn_.__r_.__value_.__r.__words[2] + 3);
            char v59 = HIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]);
            *((unsigned char *)&v84.__pn_.__r_.__value_.__s + 23) = 0;
            v84.__pn_.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__base.__pn_.__r_.__value_.__l.__data_);
              unint64_t v60 = NSString;
              if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_107;
              }
            }
            else
            {
              unint64_t v60 = NSString;
              if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_107:
                std::string pn = v85.__pn_;
                goto LABEL_110;
              }
            }
            std::string::__init_copy_ctor_external(&pn, v85.__pn_.__r_.__value_.__l.__data_, v85.__pn_.__r_.__value_.__l.__size_);
LABEL_110:
            if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string pn = &pn;
            }
            else {
              p_std::string pn = (std::string *)pn.__r_.__value_.__r.__words[0];
            }
            int64_t v62 = [v60 stringWithUTF8String:p_pn];
            if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(pn.__r_.__value_.__l.__data_);
            }
            unint64_t v63 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v62];
            [v79 serializeToMPSGraphPackageAtURL:v63 descriptor:0];

            if (SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v85.__pn_.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_117:

                if (v59 < 0) {
                  goto LABEL_180;
                }
LABEL_177:
                pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
                pn.__r_.__value_.__l.__size_ = v58;
                LODWORD(pn.__r_.__value_.__r.__words[2]) = v87[0];
                *(_DWORD *)((char *)&pn.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v87 + 3);
                *((unsigned char *)&pn.__r_.__value_.__s + 23) = v59;
                goto LABEL_181;
              }
            }
            else if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_117;
            }
            operator delete(__dst.__pn_.__r_.__value_.__l.__data_);

            if (v59 < 0) {
              goto LABEL_180;
            }
            goto LABEL_177;
          }
        }
        memmove(v54, v53.__data_, v53.__size_);
        goto LABEL_105;
      }
      BOOL v41 = *(_DWORD *)v37 == 1702195828;
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_66;
      }
      goto LABEL_63;
    }
  }
  else
  {

    *(_DWORD *)((char *)v87 + 3) = 0;
    v87[0] = 0;
    if (!*(unsigned char *)(a1 + 289)) {
      goto LABEL_49;
    }
  }
LABEL_135:
  memset(&pn, 0, sizeof(pn));
  std::string::append[abi:ne180100]<char const*,0>(&pn, (std::string *)"mps_graph_program.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&pn, (uint64_t)&v90, &__dst);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  memset(&pn, 0, sizeof(pn));
  std::string::append[abi:ne180100]<char const*,0>(&pn, (std::string *)"weights.bin", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&pn, (uint64_t)&v90, &v85);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::__string_view v64 = std::__fs::filesystem::path::__parent_path(&v91);
  if (v64.__size_ > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v64.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v66 = (v64.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v66 = v64.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v67 = v66 + 1;
    long long v65 = operator new(v66 + 1);
    pn.__r_.__value_.__l.__size_ = v64.__size_;
    pn.__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
    pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
    goto LABEL_146;
  }
  *((unsigned char *)&pn.__r_.__value_.__s + 23) = v64.__size_;
  long long v65 = &pn;
  if (v64.__size_) {
LABEL_146:
  }
    memmove(v65, v64.__data_, v64.__size_);
  *((unsigned char *)v65 + v64.__size_) = 0;
  __base.__pn_ = pn;
  std::__fs::filesystem::path::lexically_relative(&v84, &__dst, &__base);
  std::string::size_type v58 = v84.__pn_.__r_.__value_.__l.__size_;
  unint64_t v57 = (std::string::value_type *)v84.__pn_.__r_.__value_.__r.__words[0];
  v87[0] = v84.__pn_.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v87 + 3) = *(_DWORD *)((char *)&v84.__pn_.__r_.__value_.__r.__words[2] + 3);
  char v59 = HIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]);
  *((unsigned char *)&v84.__pn_.__r_.__value_.__s + 23) = 0;
  v84.__pn_.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    uint64_t v68 = v92;
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_149;
    }
  }
  else
  {
    uint64_t v68 = v92;
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_149:
      std::string v82 = __dst.__pn_;
      goto LABEL_152;
    }
  }
  std::string::__init_copy_ctor_external(&v82, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
LABEL_152:
  if (SHIBYTE(v90.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v81, v90.__pn_.__r_.__value_.__l.__data_, v90.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v81 = v90.__pn_;
  }
  if (SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v80, v85.__pn_.__r_.__value_.__l.__data_, v85.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = v85.__pn_;
  }
  Espresso::MILUtil::SerializeProgram(v68, (uint64_t)&v82, (uint64_t)&v81, (uint64_t)&v80, 0x100000004, 0);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v80.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_160:
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_161;
      }
LABEL_165:
      operator delete(v82.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_162;
      }
      goto LABEL_166;
    }
  }
  else if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_160;
  }
  operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_165;
  }
LABEL_161:
  if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_162:
    std::__fs::filesystem::path v84 = __dst;
    goto LABEL_167;
  }
LABEL_166:
  std::string::__init_copy_ctor_external(&v84.__pn_, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
LABEL_167:
  std::string pn = v84.__pn_;
  memset(&v84, 0, sizeof(v84));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&pn, 0);
  unsigned __int8 v69 = __base.__pn_.__r_.__value_.__s.__data_[0];
  if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_169;
    }
LABEL_172:
    operator delete(v84.__pn_.__r_.__value_.__l.__data_);
    int v70 = v69;
    if (v69 == 255) {
      goto LABEL_205;
    }
    goto LABEL_173;
  }
  operator delete(pn.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_172;
  }
LABEL_169:
  int v70 = v69;
  if (v69 == 255)
  {
LABEL_205:
    unsigned int v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "Failed in serializing MPSGraph MIL program on disk.");
    __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_173:
  if (!v70) {
    goto LABEL_205;
  }
  if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_176;
    }
LABEL_179:
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if ((v59 & 0x80) == 0) {
      goto LABEL_177;
    }
    goto LABEL_180;
  }
  operator delete(v85.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_179;
  }
LABEL_176:
  if ((v59 & 0x80) == 0) {
    goto LABEL_177;
  }
LABEL_180:
  std::string::__init_copy_ctor_external(&pn, v57, v58);
LABEL_181:
  uint64_t v71 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
  {
    operator delete(*v71);
    *(_OWORD *)uint64_t v71 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
    *(void *)(a1 + 312) = *((void *)&pn.__r_.__value_.__l + 2);
    if ((v59 & 0x80) == 0)
    {
LABEL_183:
      if ((SHIBYTE(v90.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_184;
      }
      goto LABEL_202;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v71 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
    *(void *)(a1 + 312) = *((void *)&pn.__r_.__value_.__l + 2);
    if ((v59 & 0x80) == 0) {
      goto LABEL_183;
    }
  }
  operator delete(v57);
  if ((SHIBYTE(v90.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_184:
    if ((SHIBYTE(v91.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_185;
    }
    goto LABEL_203;
  }
LABEL_202:
  operator delete(v90.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v91.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_185:
    uint64_t v72 = v92;
    uint64_t v92 = 0;
    if (!v72) {
      goto LABEL_187;
    }
    goto LABEL_186;
  }
LABEL_203:
  operator delete(v91.__pn_.__r_.__value_.__l.__data_);
  uint64_t v72 = v92;
  uint64_t v92 = 0;
  if (v72) {
LABEL_186:
  }
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
LABEL_187:
  uint64_t v73 = v94;
  if (v94)
  {
    do
    {
      while (1)
      {
        uint64_t v74 = (void **)*v73;
        uint64_t v75 = (std::__shared_weak_count *)v73[6];
        if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
        if (*((char *)v73 + 39) < 0) {
          break;
        }
        operator delete(v73);
        uint64_t v73 = v74;
        if (!v74) {
          goto LABEL_195;
        }
      }
      operator delete(v73[2]);
      operator delete(v73);
      uint64_t v73 = v74;
    }
    while (v74);
  }
LABEL_195:
  uint64_t v76 = (void *)v93[0];
  v93[0] = 0;
  if (v76) {
    operator delete(v76);
  }
  if (E5RT::g_trace_analysis_level >= v95) {
    kdebug_trace();
  }
}

void sub_1924F6538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a36);
LABEL_6:

  if (v53 < 0) {
    operator delete(v51);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (*(char *)(v54 - 217) < 0) {
    operator delete(*(void **)(v54 - 240));
  }
  uint64_t v56 = *(void *)(v54 - 216);
  *(void *)(v54 - 216) = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v54 - 208);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v54 - 168));
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForMPSGraph::GetOptions(Espresso::AOT::MILCompilerForMPSGraph *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForMPSGraph::GetOutputPaths(Espresso::AOT::MILCompilerForMPSGraph *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 319) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 37), *((void *)this + 38));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 296);
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1924F6A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForMPSGraph::~MILCompilerForMPSGraph(void **this)
{
  Espresso::AOT::MILCompilerForMPSGraph::~MILCompilerForMPSGraph(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  Espresso::AOT::AOTCompilerBackend *v3;
  void **v4;
  void *v5;
  uint64_t vars8;

  *this = &unk_1EE36B508;
  if (*((char *)this + 319) < 0)
  {
    operator delete(this[37]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_3:
      *this = &unk_1EE36B370;
      uint64_t v2 = (void **)this[29];
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v4 = (void **)this[30];
      if (v4 == v2)
      {
        this[30] = v2;
        operator delete(v2);
        if (*((char *)this + 231) < 0) {
          goto LABEL_18;
        }
      }
      else
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v2);
        size_t v5 = this[29];
        this[30] = v2;
        operator delete(v5);
        if (*((char *)this + 231) < 0) {
          goto LABEL_18;
        }
      }
LABEL_5:
      if ((*((char *)this + 207) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_19;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[33]);
  *this = &unk_1EE36B370;
  uint64_t v2 = (void **)this[29];
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  if ((*((char *)this + 231) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_18:
  operator delete(this[26]);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t v3 = (Espresso::AOT::AOTCompilerBackend *)this;
    goto LABEL_8;
  }
LABEL_19:
  operator delete(this[23]);
  uint64_t v3 = (Espresso::AOT::AOTCompilerBackend *)this;

LABEL_8:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v3);
}

void Espresso::AOT::MILCompilerForMPSGraph::Run(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "MILCompilerForMPSGraph:: MPSGraphPackage precompilation is enabled.", v1, 2u);
}

void Espresso::AOT::ValidateE5RTProgram(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Null MIL<E5RT> program supplied.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v2 = *(void **)((*(uint64_t (**)(uint64_t))(*(void *)v1 + 72))(v1) + 16);
  if (!v2) {
    return;
  }
  do
  {
    while (2)
    {
      uint64_t v3 = v2[5];
      uint64_t v4 = (E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 112))(v3);
      Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(v4);
      if (v6 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      unint64_t v7 = OpsetName;
      size_t v8 = v6;
      if (v6 >= 0x17)
      {
        uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v10 = v6 | 7;
        }
        uint64_t v11 = v10 + 1;
        p_dst = (void **)operator new(v10 + 1);
        size_t v134 = v8;
        int64_t v135 = v11 | 0x8000000000000000;
        std::__fs::filesystem::path __dst = p_dst;
LABEL_13:
        memmove(p_dst, v7, v8);
        goto LABEL_14;
      }
      HIBYTE(v135) = v6;
      p_dst = (void **)&__dst;
      if (v6) {
        goto LABEL_13;
      }
LABEL_14:
      *((unsigned char *)p_dst + v8) = 0;
      if (*((void *)v4 + 2) != 1 || (unint64_t v12 = (uint64_t **)*((void *)v4 + 1)) == 0)
      {
LABEL_172:
        long long v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v112 = std::string::append(&v146, ": Unsupported specialization(s). Only ");
        long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        if (v135 >= 0) {
          uint64_t v114 = (const std::string::value_type *)&__dst;
        }
        else {
          uint64_t v114 = (const std::string::value_type *)__dst;
        }
        if (v135 >= 0) {
          std::string::size_type v115 = HIBYTE(v135);
        }
        else {
          std::string::size_type v115 = v134;
        }
        uint64_t v116 = std::string::append(&v147, v114, v115);
        long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        v148.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        unint64_t v118 = std::string::append(&v148, " supported.");
        long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        *(void *)&v136[16] = *((void *)&v118->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v136 = v119;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v111, (const std::string *)v136);
        v111->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v111, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v13 = v2;
      if (v135 >= 0) {
        size_t v14 = HIBYTE(v135);
      }
      else {
        size_t v14 = v134;
      }
      if (v135 >= 0) {
        char v15 = (void **)&__dst;
      }
      else {
        char v15 = __dst;
      }
      while (1)
      {
        int v16 = *((char *)v12 + 55);
        if (v16 >= 0) {
          size_t v17 = *((unsigned __int8 *)v12 + 55);
        }
        else {
          size_t v17 = (size_t)v12[5];
        }
        if (v16 >= 0) {
          uint64_t v18 = (uint64_t *)(v12 + 4);
        }
        else {
          uint64_t v18 = v12[4];
        }
        if (v17 >= v14) {
          size_t v19 = v14;
        }
        else {
          size_t v19 = v17;
        }
        int v20 = memcmp(v15, v18, v19);
        BOOL v21 = v14 < v17;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        if (v21) {
          goto LABEL_23;
        }
        int v22 = memcmp(v18, v15, v19);
        BOOL v23 = v17 < v14;
        if (v22) {
          BOOL v23 = v22 < 0;
        }
        if (!v23) {
          break;
        }
        ++v12;
LABEL_23:
        unint64_t v12 = (uint64_t **)*v12;
        if (!v12) {
          goto LABEL_172;
        }
      }
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
      std::operator+<char>();
      uint64_t v25 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24);
      if (v25[1] != *v25)
      {
        unint64_t v129 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": Block inputs not supported.", (const void **)__p, v136);
        std::logic_error::logic_error(v129, (const std::string *)v136);
        v129->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v129, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v26 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 56))(v24);
      int v27 = **v26;
      uint64_t v28 = (*v26)[1];
      while (v27 != v28)
      {
        uint64_t v29 = *v27;
        (*(void (**)(std::string *__return_ptr, void))(*(void *)*v27 + 80))(&v145, *v27);
        std::string::size_type v30 = v145.__r_.__value_.__r.__words[0];
        long long v137 = xmmword_1E5746AE0;
        long long v138 = *(_OWORD *)&off_1E5746AF0;
        long long v142 = *(_OWORD *)&off_1E5746B30;
        long long v143 = xmmword_1E5746B40;
        long long v139 = xmmword_1E5746B00;
        long long v140 = *(_OWORD *)&off_1E5746B10;
        long long v141 = xmmword_1E5746B20;
        *(_OWORD *)uint64_t v136 = xmmword_1E5746AC0;
        *(_OWORD *)&v136[16] = *(_OWORD *)&off_1E5746AD0;
        uint64_t v31 = (*(uint64_t (**)(std::string::size_type))(*(void *)v145.__r_.__value_.__l.__data_ + 16))(v145.__r_.__value_.__r.__words[0]);
        uint64_t v32 = *(void *)(v31 + 8);
        if (*(char *)(v31 + 23) < 0)
        {
          uint64_t v33 = *(void *)v31;
        }
        else
        {
          uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
          uint64_t v33 = v31;
        }
        switch(v32)
        {
          case 15:
            uint64_t v34 = *(void *)v33;
            uint64_t v35 = *(void *)(v33 + 7);
            BOOL v36 = v34 == 0x736F695F4C4D3545 && v35 == 0x747361632E363173;
            unint64_t v37 = &v140;
            if (v36) {
              goto LABEL_125;
            }
            goto LABEL_124;
          case 19:
            uint64_t v49 = *(void *)v33;
            uint64_t v50 = *(void *)(v33 + 8);
            uint64_t v51 = *(void *)(v33 + 11);
            BOOL v53 = v49 == 0x736F695F4C4D3545 && v50 == 0x635F74696A2E3631 && v51 == 0x6C6C61635F74696ALL;
            unint64_t v37 = &v141;
            if (!v53) {
              goto LABEL_124;
            }
            goto LABEL_125;
          case 24:
            if (*(void *)v33 == 0x736F695F4C4D3545
              && *(void *)(v33 + 8) == 0x695F7570632E3631
              && *(void *)(v33 + 16) == 0x65636E657265666ELL)
            {
              goto LABEL_126;
            }
            BOOL v41 = *(void *)v33 == 0x736F695F4C4D3545
               && *(void *)(v33 + 8) == 0x695F7269652E3631
               && *(void *)(v33 + 16) == 0x65636E657265666ELL;
            unint64_t v37 = (long long *)&v136[16];
            if (!v41)
            {
              BOOL v42 = *(void *)v33 == 0x736F695F4C4D3545 && *(void *)(v33 + 8) == 0x695F656E612E3631;
              BOOL v43 = v42 && *(void *)(v33 + 16) == 0x65636E657265666ELL;
              unint64_t v37 = &v137;
              if (!v43)
              {
                uint64_t v44 = *(void *)v33;
                uint64_t v45 = *(void *)(v33 + 8);
                uint64_t v46 = *(void *)(v33 + 16);
                BOOL v47 = v44 == 0x736F695F4C4D3545 && v45 == 0x695F636C6D2E3631;
                BOOL v48 = v47 && v46 == 0x65636E657265666ELL;
                unint64_t v37 = &v139;
                if (!v48) {
LABEL_124:
                }
                  unint64_t v37 = (long long *)&v144;
              }
            }
LABEL_125:
            if ((char *)v37 - v136 == 144)
            {
              unint64_t v120 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": Unsupported operation ", (const void **)__p, &v146);
              uint64_t v121 = (*(uint64_t (**)(std::string::size_type))(*(void *)v30 + 16))(v30);
              int v122 = *(char *)(v121 + 23);
              if (v122 >= 0) {
                unsigned int v123 = (const std::string::value_type *)v121;
              }
              else {
                unsigned int v123 = *(const std::string::value_type **)v121;
              }
              if (v122 >= 0) {
                std::string::size_type v124 = *(unsigned __int8 *)(v121 + 23);
              }
              else {
                std::string::size_type v124 = *(void *)(v121 + 8);
              }
              uint64_t v125 = std::string::append(&v146, v123, v124);
              long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
              v147.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v126;
              v125->__r_.__value_.__l.__size_ = 0;
              v125->__r_.__value_.__r.__words[2] = 0;
              v125->__r_.__value_.__r.__words[0] = 0;
              unint64_t v127 = std::string::append(&v147, ".");
              long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
              v148.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v128;
              v127->__r_.__value_.__l.__size_ = 0;
              v127->__r_.__value_.__r.__words[2] = 0;
              v127->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(v120, &v148);
              v120->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
              __cxa_throw(v120, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
            }
LABEL_126:
            std::string::size_type size = (std::__shared_weak_count *)v145.__r_.__value_.__l.__size_;
            if (v145.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(v145.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
            std::operator+<char>();
            uint64_t v72 = std::string::append(&v146, ", ");
            long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v147.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 56))(v29);
            int v75 = *(char *)(v74 + 23);
            if (v75 >= 0) {
              uint64_t v76 = (const std::string::value_type *)v74;
            }
            else {
              uint64_t v76 = *(const std::string::value_type **)v74;
            }
            if (v75 >= 0) {
              std::string::size_type v77 = *(unsigned __int8 *)(v74 + 23);
            }
            else {
              std::string::size_type v77 = *(void *)(v74 + 8);
            }
            unint64_t v78 = std::string::append(&v147, v76, v77);
            long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
            v148.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v79;
            v78->__r_.__value_.__l.__size_ = 0;
            v78->__r_.__value_.__r.__words[2] = 0;
            v78->__r_.__value_.__r.__words[0] = 0;
            std::string v80 = std::string::append(&v148, "]: ");
            long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
            *(void *)&v136[16] = *((void *)&v80->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v136 = v81;
            v80->__r_.__value_.__l.__size_ = 0;
            v80->__r_.__value_.__r.__words[2] = 0;
            v80->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v148.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_137:
                if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_138;
                }
                goto LABEL_152;
              }
            }
            else if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_137;
            }
            operator delete(v147.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_138;
            }
LABEL_152:
            operator delete(v146.__r_.__value_.__l.__data_);
LABEL_138:
            std::string v82 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v29 + 160))(v29);
            uint64_t v83 = v82 + 1;
            std::__fs::filesystem::path v84 = (void *)*v82;
            if ((void *)*v82 != v82 + 1)
            {
              do
              {
                uint64_t v85 = v84[7];
                uint64_t v86 = v84[8] - v85;
                if (v86 != 16)
                {
                  unint64_t v100 = v86 >> 4;
                  uint64_t v101 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::to_string(&v144, v100);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v144, (uint64_t)v136, &v145);
                  unint64_t v102 = std::string::append(&v145, " arguments bound to param \"");
                  long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
                  v146.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v103;
                  v102->__r_.__value_.__l.__size_ = 0;
                  v102->__r_.__value_.__r.__words[2] = 0;
                  v102->__r_.__value_.__r.__words[0] = 0;
                  int v104 = *((char *)v84 + 55);
                  if (v104 >= 0) {
                    long long v105 = (const std::string::value_type *)(v84 + 4);
                  }
                  else {
                    long long v105 = (const std::string::value_type *)v84[4];
                  }
                  if (v104 >= 0) {
                    std::string::size_type v106 = *((unsigned __int8 *)v84 + 55);
                  }
                  else {
                    std::string::size_type v106 = v84[5];
                  }
                  uint64_t v107 = std::string::append(&v146, v105, v106);
                  long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                  v147.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v108;
                  v107->__r_.__value_.__l.__size_ = 0;
                  v107->__r_.__value_.__r.__words[2] = 0;
                  v107->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v109 = std::string::append(&v147, "\"");
                  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                  v148.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v110;
                  v109->__r_.__value_.__l.__size_ = 0;
                  v109->__r_.__value_.__r.__words[2] = 0;
                  v109->__r_.__value_.__r.__words[0] = 0;
                  std::logic_error::logic_error(v101, &v148);
                  v101->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
                  __cxa_throw(v101, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
                }
                if (((*(uint64_t (**)(void))(**(void **)v85 + 16))() & 1) == 0)
                {
                  long long v89 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Non-name argument bound to param \"", (const void **)v136, &v146);
                  uint64_t v92 = (const std::string::value_type *)v84[4];
                  std::__fs::filesystem::path v91 = (const std::string::value_type *)(v84 + 4);
                  std::__fs::filesystem::path v90 = v92;
                  int v93 = v91[23];
                  if (v93 >= 0) {
                    uint64_t v94 = v91;
                  }
                  else {
                    uint64_t v94 = v90;
                  }
                  if (v93 >= 0) {
                    std::string::size_type v95 = *((unsigned __int8 *)v91 + 23);
                  }
                  else {
                    std::string::size_type v95 = *((void *)v91 + 1);
                  }
                  long long v96 = std::string::append(&v146, v94, v95);
                  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
                  v147.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v97;
                  v96->__r_.__value_.__l.__size_ = 0;
                  v96->__r_.__value_.__r.__words[2] = 0;
                  v96->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v98 = std::string::append(&v147, "\"");
                  long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
                  v148.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v99;
                  v98->__r_.__value_.__l.__size_ = 0;
                  v98->__r_.__value_.__r.__words[2] = 0;
                  v98->__r_.__value_.__r.__words[0] = 0;
                  std::logic_error::logic_error(v89, &v148);
                  v89->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
                  __cxa_throw(v89, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
                }
                uint64_t v87 = (void *)v84[1];
                if (v87)
                {
                  do
                  {
                    long long v88 = v87;
                    uint64_t v87 = (void *)*v87;
                  }
                  while (v87);
                }
                else
                {
                  do
                  {
                    long long v88 = (void *)v84[2];
                    BOOL v36 = *v88 == (void)v84;
                    std::__fs::filesystem::path v84 = v88;
                  }
                  while (!v36);
                }
                std::__fs::filesystem::path v84 = v88;
              }
              while (v88 != v83);
            }
            if ((v136[23] & 0x80000000) != 0) {
              operator delete(*(void **)v136);
            }
            v27 += 2;
            break;
          case 25:
            BOOL v56 = *(void *)v33 == 0x736F695F4C4D3545
               && *(void *)(v33 + 8) == 0x5F736E6E622E3631
               && *(void *)(v33 + 16) == 0x636E657265666E69
               && *(unsigned char *)(v33 + 24) == 101;
            unint64_t v37 = &v142;
            if (!v56)
            {
              uint64_t v57 = *(void *)v33;
              uint64_t v58 = *(void *)(v33 + 8);
              uint64_t v59 = *(void *)(v33 + 16);
              int v60 = *(unsigned __int8 *)(v33 + 24);
              BOOL v61 = v57 == 0x736F695F4C4D3545 && v58 == 0x696D5F35652E3631;
              BOOL v62 = v61 && v59 == 0x70635F6C616D696ELL;
              BOOL v63 = v62 && v60 == 117;
              unint64_t v37 = &v143;
              if (!v63) {
                goto LABEL_124;
              }
            }
            goto LABEL_125;
          case 30:
            uint64_t v64 = *(void *)v33;
            uint64_t v65 = *(void *)(v33 + 8);
            uint64_t v66 = *(void *)(v33 + 16);
            uint64_t v67 = *(void *)(v33 + 22);
            BOOL v70 = v64 == 0x736F695F4C4D3545
               && v65 == 0x675F73706D2E3631
               && v66 == 0x666E695F68706172
               && v67 == 0x65636E657265666ELL;
            unint64_t v37 = &v138;
            if (!v70) {
              goto LABEL_124;
            }
            goto LABEL_125;
          default:
            goto LABEL_124;
        }
      }
      if (v132 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v135) < 0) {
          goto LABEL_156;
        }
LABEL_5:
        uint64_t v2 = (void *)*v13;
        if (!*v13) {
          return;
        }
        continue;
      }
      break;
    }
    if ((SHIBYTE(v135) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_156:
    operator delete(__dst);
    uint64_t v2 = (void *)*v13;
  }
  while (*v13);
}

void sub_1924F7904(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924F7918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      if (a24 < 0) {
        operator delete(a19);
      }
      if (a30 < 0) {
        operator delete(a25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

uint64_t anonymous namespace'::BuildE5RTComponentDtype(int a1)
{
  int v1 = a1 - 2;
  if ((a1 - 2) >= 0xF || ((0x738Du >> v1) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v4);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return dword_192DC5198[v1];
}

void sub_1924F7DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::BuildE5RTTensorComponentSize(int a1)
{
  int v1 = a1 - 2;
  if ((a1 - 2) >= 0xF || ((0x738Du >> v1) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v4);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return qword_192DC51D8[v1];
}

void sub_1924F7EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::GetE5RTPackType(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 > 8 || ((1 << a2) & 0x116) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v28, a2);
    size_t v19 = std::string::insert(&v28, 0, "Unsupported interleave (");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    BOOL v21 = std::string::append(&v29, ") for operand ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v24 = *(const std::string::value_type **)a3;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v25 = *(void *)(a3 + 8);
    }
    uint64_t v26 = std::string::append(&v30, v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v31);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a1 == 4)
  {
    if (a2 - 1 < 8 && ((0x8Bu >> (a2 - 1)) & 1) != 0)
    {
      std::string v4 = (unsigned int *)&unk_192DC5290;
      return v4[a2 - 1];
    }
    goto LABEL_16;
  }
  if (a1 == 2)
  {
    if (a2 - 1 < 8 && ((0x8Bu >> (a2 - 1)) & 1) != 0)
    {
      std::string v4 = (unsigned int *)&unk_192DC5270;
      return v4[a2 - 1];
    }
LABEL_16:
    unint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v28, a1);
    size_t v8 = std::string::insert(&v28, 0, "Unsupported component size (");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v29, ") for operand ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v12 = *(char *)(a3 + 23);
    if (v12 >= 0) {
      uint64_t v13 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v13 = *(const std::string::value_type **)a3;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(a3 + 8);
    }
    char v15 = std::string::append(&v30, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v7, &v31);
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a1 != 1 || a2 - 1 >= 8 || ((0x8Bu >> (a2 - 1)) & 1) == 0) {
    goto LABEL_16;
  }
  std::string v4 = (unsigned int *)&unk_192DC5250;
  return v4[a2 - 1];
}

void sub_1924F8170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      if (a21 < 0)
      {
LABEL_10:
        operator delete(a16);
        if ((a15 & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_13;
      }
LABEL_8:
      if ((a15 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v29 & 1) == 0) {
LABEL_15:
        }
          _Unwind_Resume(a1);
LABEL_14:
        __cxa_free_exception(v28);
        goto LABEL_15;
      }
LABEL_13:
      operator delete(a10);
      if ((v29 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  if (a21 < 0) {
    goto LABEL_10;
  }
  goto LABEL_8;
}

void Espresso::AOT::BuildTensorDescriptor(std::string const&,MIL::IRTensorValueType const&,std::shared_ptr<MIL::Attributes::FlexibleShapeInfo>)::$_0::operator()()
{
}

void sub_1924F8424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v12)
  {
    *(void *)(v11 + 8) = v12;
    operator delete(v12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::BuildTensorDescriptor(uint64_t a1, MIL::IRTensorBufferValueType *this)
{
  int DataType = MIL::IRTensorBufferValueType::GetDataType(this);
  uint64_t Shape = (uint64_t *)MIL::IRTensorBufferValueType::GetShape(this);
  uint64_t InterleaveFactors = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(this);
  uint64_t v8 = *InterleaveFactors;
  if (InterleaveFactors[1] == *InterleaveFactors)
  {
    unint64_t v11 = 0;
    unsigned __int8 v12 = 1;
  }
  else
  {
    long long v9 = InterleaveFactors;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unsigned __int8 v12 = 1;
    do
    {
      uint64_t v13 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v8 + 8 * v10));
      int UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue(v13);
      if (UInt8ScalarValue != 1)
      {
        int v15 = v12;
        unsigned __int8 v12 = UInt8ScalarValue;
        unint64_t v11 = v10;
        if (v15 != 1)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only one interleave factor of larger than 1 is supported.");
          __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
      }
      ++v10;
      uint64_t v8 = *v9;
    }
    while (v10 < (v9[1] - *v9) >> 3);
  }
  if (v12 > 1u) {
    *((void *)v18 + v11) = vcvtps_u32_f32((float)*((unint64_t *)v18 + v11) / (float)v12);
  }
  E5RT::TensorDataType::TensorDataType(&v17);
}

void sub_1924F86F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a12);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::BuildSurfaceDescriptor(int a1, MIL::IRPixelBufferValueType *this)
{
  PixelFormatuint64_t Type = MIL::IRPixelBufferValueType::GetPixelFormatType(this);
  switch((int)PixelFormatType)
  {
    case 1:
      break;
    case 2:
      PixelFormatuint64_t Type = 7;
      break;
    case 3:
      PixelFormatuint64_t Type = 13;
      break;
    case 4:
      PixelFormatuint64_t Type = 4;
      break;
    case 5:
      PixelFormatuint64_t Type = 6;
      break;
    case 6:
      PixelFormatuint64_t Type = 31;
      break;
    case 11:
      PixelFormatuint64_t Type = 8;
      break;
    case 12:
      PixelFormatuint64_t Type = 2;
      break;
    case 13:
      PixelFormatuint64_t Type = 3;
      break;
    case 14:
      PixelFormatuint64_t Type = 11;
      break;
    case 15:
      PixelFormatuint64_t Type = 10;
      break;
    case 21:
    case 22:
      PixelFormatuint64_t Type = 0;
      break;
    case 23:
    case 24:
      PixelFormatuint64_t Type = 14;
      break;
    case 25:
    case 26:
    case 27:
      PixelFormatuint64_t Type = 15;
      break;
    case 28:
    case 29:
      PixelFormatuint64_t Type = 5;
      break;
    case 41:
      PixelFormatuint64_t Type = 17;
      break;
    case 42:
      PixelFormatuint64_t Type = 18;
      break;
    case 43:
      PixelFormatuint64_t Type = 19;
      break;
    case 44:
      PixelFormatuint64_t Type = 20;
      break;
    case 45:
      PixelFormatuint64_t Type = 21;
      break;
    case 51:
      PixelFormatuint64_t Type = 22;
      break;
    case 52:
      PixelFormatuint64_t Type = 23;
      break;
    case 53:
      PixelFormatuint64_t Type = 24;
      break;
    case 54:
      PixelFormatuint64_t Type = 25;
      break;
    case 55:
      PixelFormatuint64_t Type = 26;
      break;
    case 56:
      PixelFormatuint64_t Type = 27;
      break;
    case 57:
      PixelFormatuint64_t Type = 28;
      break;
    case 58:
      PixelFormatuint64_t Type = 29;
      break;
    case 70:
    case 71:
      PixelFormatuint64_t Type = 30;
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported IRPixelFormatType.");
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t Shape = MIL::IRPixelBufferValueType::GetShape(this);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  unint64_t v6 = *(const void **)Shape;
  uint64_t v5 = *(void *)(Shape + 8);
  int64_t v7 = v5 - *(void *)Shape;
  if (v5 == *(void *)Shape)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = operator new(v5 - *(void *)Shape);
    uint64_t v9 = (uint64_t)v8 + 8 * (v7 >> 3);
    uint64_t v30 = v8;
    uint64_t v32 = v9;
    memcpy(v8, v6, v7);
    uint64_t v31 = v9;
  }
  if ((void *)((char *)v29[1] - (char *)v29[0]) == (void *)16)
  {
    uint64_t v10 = *(void *)v29[0];
    uint64_t v11 = *((void *)v29[0] + 1);
    if (MIL::IRPixelBufferValueType::TryGetBytesPerRow(this))
    {
      uint64_t BytesPerRow = MIL::IRPixelBufferValueType::GetBytesPerRow(this);
      uint64_t v26 = 0;
      long long v27 = 0;
      std::string v28 = 0;
      std::string::size_type v14 = *(const void **)BytesPerRow;
      uint64_t v13 = *(void *)(BytesPerRow + 8);
      int64_t v15 = v13 - *(void *)BytesPerRow;
      if (v13 == *(void *)BytesPerRow)
      {
        std::string __p = 0;
        uint64_t v24 = 0;
        std::string::size_type v25 = 0;
      }
      else
      {
        if (v15 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        long long v16 = (char *)operator new(v13 - *(void *)BytesPerRow);
        uint64_t v26 = v16;
        long long v27 = v16;
        std::string v28 = &v16[8 * (v15 >> 3)];
        memcpy(v16, v14, v15);
        uint64_t v17 = (char *)operator new(v15);
        uint64_t v18 = 8 * (v15 >> 3);
        std::string __p = v17;
        std::string::size_type v25 = &v17[v18];
        bzero(v17, v15);
        uint64_t v19 = 0;
        uint64_t v24 = &v17[v15];
        do
        {
          long long v20 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v16[v19]);
          *(void *)&v17[v19] = MIL::IRConstantProperty::GetInt64ScalarValue(v20);
          v19 += 8;
        }
        while (v18 != v19);
      }
      E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(PixelFormatType, v11, v10, &__p);
    }
    E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(PixelFormatType, v11, v10);
  }
  BOOL v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v21, "A surface must have two dimensions.");
  v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  __cxa_throw(v21, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
}

void sub_1924F8B00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924F8B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v20);
  if (a15) {
    operator delete(a15);
  }
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  int64_t v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

float Espresso::AOT::GetEngineGflopsPerS(int a1)
{
  int v3 = a1;
  if (a1 - 10006) < 6 && ((0x2Fu >> (a1 - 22))) {
    return 800.0;
  }
  if ((a1 & 0xFFFFFFFD) == 5) {
    return 300.0;
  }
  int v2 = is_gpu(&v3);
  float result = 120.0;
  if (!v2) {
    return 20.0;
  }
  return result;
}

float Espresso::AOT::GetEngineBwGbPerS(int a1)
{
  int v3 = a1;
  if (a1 - 10006) < 6 && ((0x2Fu >> (a1 - 22))) {
    return 50.0;
  }
  if ((a1 & 0xFFFFFFFD) == 5) {
    return 40.0;
  }
  int v2 = is_gpu(&v3);
  float result = 40.0;
  if (!v2) {
    return 10.0;
  }
  return result;
}

BOOL Espresso::AOT::IsFallbackBackend(unsigned __int16 *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v1 == 3)
  {
    if (v2 >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(unsigned __int16 **)a1;
    }
    int v9 = *v8;
    int v10 = *((unsigned __int8 *)v8 + 2);
    return v9 == 27757 && v10 == 99;
  }
  else if (v1 == 11)
  {
    if (v2 >= 0) {
      int v3 = (uint64_t *)a1;
    }
    else {
      int v3 = *(uint64_t **)a1;
    }
    uint64_t v4 = *v3;
    uint64_t v5 = *(uint64_t *)((char *)v3 + 3);
    return v4 == 0x5F63697373616C63 && v5 == 0x7570635F63697373;
  }
  else
  {
    return 0;
  }
}

double Espresso::AOT::GetLocalCost(int a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  int v36 = a1;
  if (is_gpu(&v36))
  {
    if (!*(void *)a2) {
      goto LABEL_29;
    }
    if (!v11) {
      goto LABEL_29;
    }
    unsigned __int8 v12 = v11;
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v34 = v11;
    uint64_t v35 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(__int16 *)((*(uint64_t (**)(void *))(*(void *)v11 + 384))(v11) + 92) > 4
      || *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v12 + 384))(v12) + 94) >= 5)
    {
      int v14 = *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v12 + 384))(v12) + 92);
      int v15 = *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v12 + 384))(v12) + 94) * v14;
      if (v15 <= 1) {
        int v15 = 1;
      }
      a3 = a3 * (float)v15;
    }
    if (!v13) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!is_cpu(&v36)) {
      goto LABEL_29;
    }
    if (!*(void *)a2) {
      goto LABEL_29;
    }
    if (!v16) {
      goto LABEL_29;
    }
    uint64_t v17 = v16;
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v34 = v16;
    uint64_t v35 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v18 = *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v16 + 384))(v16) + 96);
    uint64_t v19 = (*(uint64_t (**)(void *))(*(void *)v17 + 384))(v17);
    int v20 = v18;
    if (v18 <= 1) {
      int v20 = 1;
    }
    int v21 = *(__int16 *)(v19 + 98);
    if (v21 <= 1) {
      int v21 = 1;
    }
    unsigned int v22 = v21 * v20;
    if (v22 >= 0x10) {
      int v23 = 16;
    }
    else {
      int v23 = v22;
    }
    float v24 = (float)v23;
    if (v22 <= 4) {
      float v24 = 1.0;
    }
    a3 = a3 * v24;
    if (!v13)
    {
LABEL_29:
      int v25 = v36;
      LODWORD(v34) = v36;
      int v26 = v36 - 10006;
      if ((v36 - 10006) >= 6) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  int v25 = v36;
  LODWORD(v34) = v36;
  int v26 = v36 - 10006;
  if ((v36 - 10006) >= 6) {
    goto LABEL_31;
  }
LABEL_30:
  if ((0x2Fu >> v26))
  {
    int v25 = dword_192DC52B4[v26];
    int v27 = 1145569280;
    goto LABEL_39;
  }
LABEL_31:
  if ((v25 & 0xFFFFFFFD) != 5)
  {
    if (is_gpu((int *)&v34)) {
      float v28 = 120.0;
    }
    else {
      float v28 = 20.0;
    }
    int v25 = v36;
    LODWORD(v34) = v36;
    char v29 = v36 - 22;
    if ((v36 - 10006) >= 6) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  int v27 = 1133903872;
LABEL_39:
  float v28 = *(float *)&v27;
  LODWORD(v34) = v25;
  char v29 = v25 - 22;
  if ((v25 - 10006) >= 6) {
    goto LABEL_41;
  }
LABEL_40:
  if ((0x2Fu >> v29))
  {
    int v30 = 1112014848;
    goto LABEL_47;
  }
LABEL_41:
  if ((v25 & 0xFFFFFFFD) == 5)
  {
    int v30 = 1109393408;
LABEL_47:
    float v32 = *(float *)&v30;
    return (float)((float)((float)((float)((float)((float)(a4 + a5) + a6) * 0.00097656) / v32) + (float)(a3 / v28))
                 * 1000.0);
  }
  int v31 = is_gpu((int *)&v34);
  float v32 = 40.0;
  if (!v31) {
    float v32 = 10.0;
  }
  return (float)((float)((float)((float)((float)((float)(a4 + a5) + a6) * 0.00097656) / v32) + (float)(a3 / v28))
               * 1000.0);
}

void sub_1924F934C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924F9360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924F9374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924F9388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::BackendNameToEspressoPlatform(uint64_t *a1)
{
  int v1 = *((char *)a1 + 23);
  uint64_t v2 = a1[1];
  if (v1 >= 0) {
    uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 == 11)
  {
    int64_t v7 = (uint64_t *)*a1;
    if (v1 >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = (uint64_t *)*a1;
    }
    uint64_t v9 = *v8;
    uint64_t v10 = *(uint64_t *)((char *)v8 + 3);
    if (v9 == 0x5F63697373616C63 && v10 == 0x7570635F63697373) {
      return 100;
    }
LABEL_37:
    if (v1 >= 0) {
      int v3 = a1;
    }
    else {
      int v3 = v7;
    }
    goto LABEL_40;
  }
  if (v2 != 3)
  {
    int64_t v7 = (uint64_t *)*a1;
    if (v2 == 9)
    {
      unsigned __int8 v12 = v1 >= 0 ? a1 : (uint64_t *)*a1;
      uint64_t v13 = *v12;
      int v14 = *((unsigned __int8 *)v12 + 8);
      if (v13 == 0x706172675F73706DLL && v14 == 104) {
        return 50008;
      }
    }
    goto LABEL_37;
  }
  if (v1 >= 0) {
    int v3 = a1;
  }
  else {
    int v3 = (uint64_t *)*a1;
  }
  if (*(_WORD *)v3 == 27757 && *((unsigned char *)v3 + 2) == 99) {
    return 100;
  }
  if (*(_WORD *)v3 != 28257 || *((unsigned char *)v3 + 2) != 101)
  {
LABEL_40:
    long long v16 = v3;
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Unsupported backend %s", &v16);
  }
  return 10008;
}

void *Espresso::AOT::EvaluatorClassicStates::EvaluatorClassicStates(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_DWORD *)a1 + 12) = 1065353216;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  int v8 = Espresso::AOT::BackendNameToEspressoPlatform((uint64_t *)a4);
  *(_OWORD *)(a1 + 11) = 0u;
  *((_DWORD *)a1 + 20) = v8;
  *((unsigned char *)a1 + 84) = 0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  a1[17] = 0;
  *((_DWORD *)a1 + 36) = 1065353216;
  uint64_t Function = MIL::IRProgram::GetFunction();
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 32))(__p, a2);
  uint64_t v50 = *(void *)__p;
  if (*(void *)__p) {
    operator new();
  }
  uint64_t v51 = 0;
  *(void *)std::string __p = 0;
  Espresso::MILTranslator::TranslateProgram((MIL::PassManager *)&v50, a3, 0, 0, 0, 1, &v52);
  uint64_t v10 = v51;
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *(void *)__p;
  *(void *)std::string __p = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (!v52)
  {
    uint64_t v45 = "Failed to translate MIL program";
    goto LABEL_64;
  }
  if (*(void *)(v52 + 32) == *(void *)(v52 + 40))
  {
    uint64_t v45 = "Translated EIR network has no layers";
LABEL_64:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v45);
  }
  Espresso::create_context((int *)a1 + 20, &v48);
  uint64_t v12 = v52;
  *(void *)std::string __p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_192DAF6B0;
  strcpy(*(char **)__p, "espresso.dispatch.fallback_only_when_unavailable");
  uint64_t v54 = __p;
  uint64_t v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v12 + 472), __p, (uint64_t)&std::piecewise_construct, &v54);
  MEMORY[0x192FF0F50]((char *)v13 + 56, "1");
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(v48 + 137) = 1;
  Espresso::reload_network_on_context(&v52, (uint64_t)&v48, *(_DWORD *)(**(void **)(v52 + 32) + 12), (uint64_t)__p);
  long long v14 = *(_OWORD *)__p;
  *(void *)std::string __p = 0;
  *(void *)&__p[8] = 0;
  int v15 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = *(std::__shared_weak_count **)&__p[8];
  if (*(void *)&__p[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v46 = Function;
  uint64_t v17 = v53;
  uint64_t v52 = 0;
  BOOL v53 = 0;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = *a1;
  uint64_t v19 = *(unsigned __int8 *)(a4 + 23);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a4 + 8);
  }
  if (v19 == 11)
  {
    if (v20 >= 0) {
      int v25 = (uint64_t *)a4;
    }
    else {
      int v25 = *(uint64_t **)a4;
    }
    uint64_t v26 = *v25;
    uint64_t v27 = *(uint64_t *)((char *)v25 + 3);
    if (v26 != 0x5F63697373616C63 || v27 != 0x7570635F63697373) {
      goto LABEL_55;
    }
  }
  else
  {
    if (v19 != 3) {
      goto LABEL_55;
    }
    int v21 = v20 >= 0 ? (unsigned __int16 *)a4 : *(unsigned __int16 **)a4;
    int v22 = *v21;
    int v23 = *((unsigned __int8 *)v21 + 2);
    if (v22 != 27757 || v23 != 99) {
      goto LABEL_55;
    }
  }
  char v29 = *(void **)(v18 + 32);
  int v30 = *(void **)(v18 + 40);
  if (v29 != v30)
  {
    int v31 = (uint64_t **)(*(void *)(*a1 + 712) + 72);
    int v32 = *((_DWORD *)a1 + 20);
    do
    {
      while (1)
      {
        *(void *)std::string __p = *v29 + 16;
        uint64_t v33 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, *(void **)__p, (uint64_t)&std::piecewise_construct, (long long **)__p);
        uint64_t v34 = v33;
        int v36 = v33 + 8;
        uint64_t v35 = v33[8];
        if (v35) {
          break;
        }
        int v37 = v33 + 8;
LABEL_52:
        unint64_t v39 = operator new(0x28uLL);
        v39[7] = v32;
        v39[8] = 0;
        *(void *)unint64_t v39 = 0;
        *((void *)v39 + 1) = 0;
        *((void *)v39 + 2) = v37;
        *int v36 = (uint64_t *)v39;
        BOOL v40 = (uint64_t *)*v34[7];
        BOOL v41 = (uint64_t *)v39;
        if (v40)
        {
          v34[7] = v40;
          BOOL v41 = *v36;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v34[8], v41);
        v34[9] = (uint64_t *)((char *)v34[9] + 1);
        v39[8] = 1;
        v29 += 2;
        if (v29 == v30) {
          goto LABEL_55;
        }
      }
      while (1)
      {
        while (1)
        {
          int v37 = (uint64_t **)v35;
          int v38 = *((_DWORD *)v35 + 7);
          if (v38 <= v32) {
            break;
          }
          uint64_t v35 = *v37;
          int v36 = v37;
          if (!*v37) {
            goto LABEL_52;
          }
        }
        if (v38 >= v32) {
          break;
        }
        uint64_t v35 = v37[1];
        if (!v35)
        {
          int v36 = v37 + 1;
          goto LABEL_52;
        }
      }
      *((_DWORD *)v37 + 8) = 1;
      v29 += 2;
    }
    while (v29 != v30);
  }
LABEL_55:
  Espresso::AOT::EvaluatorClassicStates::PopulateOpLocationToIdx((uint64_t)a1, v46);
  Espresso::AOT::EvaluatorClassicStates::PopulateOpToLayers(a1, v46);
  BOOL v42 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  BOOL v43 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  return a1;
}

void sub_1924F9ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, Espresso::AOT::CostGraph *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)(a10 + 3));
  uint64_t v26 = *a10;
  if (*a10)
  {
    *(void *)(v24 + 96) = v26;
    operator delete(v26);
  }
  Espresso::AOT::CostGraph::~CostGraph(a11);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v24 + 16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetIsValidOnPlatform(Espresso::AOT::EvaluatorClassicStates *this)
{
  return *(void *)(*(void *)this + 712) + 72;
}

void Espresso::AOT::EvaluatorClassicStates::PopulateOpLocationToIdx(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v4 = (MIL::IRObject ****)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  uint64_t v5 = **v4;
  std::string::size_type v6 = (*v4)[1];
  if (v5 != v6)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      uint64_t Location = MIL::IRObject::GetLocation(*v5);
      (*(void (**)(void **__return_ptr))(*(void *)Location + 24))(__p);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::string,unsigned long &>(v7, (uint64_t)__p, (uint64_t)__p, &v12);
      if (!v9) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Ops have duplicated location");
      }
      ++v12;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_1924F9CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::EvaluatorClassicStates::PopulateOpToLayers(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  unint64_t v5 = (uint64_t)(*(void *)(*(void *)v4 + 8) - **(void **)v4) >> 4;
  uint64_t v7 = a1[7];
  uint64_t v6 = a1[8];
  int v8 = a1 + 7;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
  if (v5 <= v9)
  {
    if (v5 < v9)
    {
      uint64_t v10 = v7 + 24 * v5;
      if (v6 != v10)
      {
        uint64_t v11 = a1[8];
        do
        {
          uint64_t v13 = *(void **)(v11 - 24);
          v11 -= 24;
          uint64_t v12 = v13;
          if (v13)
          {
            *(void *)(v6 - 16) = v12;
            operator delete(v12);
          }
          uint64_t v6 = v11;
        }
        while (v11 != v10);
      }
      a1[8] = v10;
    }
  }
  else
  {
    std::vector<std::vector<unsigned long>>::__append((uint64_t)(a1 + 7), v5 - v9);
  }
  uint64_t v14 = *(void *)(*a1 + 32);
  if (*(void *)(*a1 + 40) != v14)
  {
    unint64_t v15 = 0;
    long long v16 = a1 + 2;
    BOOL v43 = a1 + 7;
    while (1)
    {
      Espresso::layer::debug_name(*(Espresso::layer **)(v14 + 16 * v15), &__p);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_41;
      }
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v16, (uint64_t)&__p);
      if (!v18) {
        goto LABEL_41;
      }
      uint64_t v19 = *v8 + 24 * v18[5];
      int v21 = *(unint64_t **)(v19 + 8);
      unint64_t v20 = *(void *)(v19 + 16);
      if ((unint64_t)v21 >= v20) {
        break;
      }
      *int v21 = v15;
      uint64_t v22 = (uint64_t)(v21 + 1);
LABEL_40:
      *(void *)(v19 + 8) = v22;
LABEL_41:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v15;
      uint64_t v14 = *(void *)(*a1 + 32);
      if (v15 >= (*(void *)(*a1 + 40) - v14) >> 4) {
        return;
      }
    }
    int v23 = a1;
    uint64_t v24 = v16;
    int v25 = *(unint64_t **)v19;
    uint64_t v26 = (uint64_t)v21 - *(void *)v19;
    uint64_t v27 = v26 >> 3;
    unint64_t v28 = (v26 >> 3) + 1;
    if (v28 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = v20 - (void)v25;
    if (v29 >> 2 > v28) {
      unint64_t v28 = v29 >> 2;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      if (v30 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v31 = operator new(8 * v30);
      int v32 = (unint64_t *)&v31[8 * v27];
      *int v32 = v15;
      uint64_t v22 = (uint64_t)(v32 + 1);
      if (v21 != v25) {
        goto LABEL_28;
      }
    }
    else
    {
      int v31 = 0;
      int v32 = (unint64_t *)(8 * v27);
      *(void *)(8 * v27) = v15;
      uint64_t v22 = 8 * v27 + 8;
      if (v21 != v25)
      {
LABEL_28:
        unint64_t v33 = (char *)(v21 - 1) - (char *)v25;
        if (v33 >= 0x58)
        {
          unint64_t v34 = (char *)v21 - &v31[v26];
          long long v16 = v24;
          a1 = v23;
          if (v34 >= 0x20)
          {
            uint64_t v35 = (v33 >> 3) + 1;
            uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
            int v37 = &v21[v36 / 0xFFFFFFFFFFFFFFF8];
            int v32 = (unint64_t *)((char *)v32 - v36);
            int v38 = &v31[8 * v27 - 16];
            unint64_t v39 = v21 - 2;
            uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v41 = *(_OWORD *)v39;
              *(v38 - 1) = *((_OWORD *)v39 - 1);
              _OWORD *v38 = v41;
              v38 -= 2;
              v39 -= 4;
              v40 -= 4;
            }
            while (v40);
            int v21 = v37;
            if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          long long v16 = v24;
          a1 = v23;
        }
        do
        {
          unint64_t v42 = *--v21;
          *--int v32 = v42;
        }
        while (v21 != v25);
LABEL_37:
        *(void *)uint64_t v19 = v32;
        *(void *)(v19 + 8) = v22;
        *(void *)(v19 + 16) = &v31[8 * v30];
        if (v25) {
          operator delete(v25);
        }
        int v8 = v43;
        goto LABEL_40;
      }
    }
    long long v16 = v24;
    a1 = v23;
    goto LABEL_37;
  }
}

void sub_1924FA014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetNetwork(Espresso::AOT::EvaluatorClassicStates *this)
{
  return *(void *)this;
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetOpMappedLayers(Espresso::AOT::EvaluatorClassicStates *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v2) >> 3) <= a2) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Op index out of range");
  }
  return v2 + 24 * a2;
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetOpMappedLayers(Espresso::AOT::EvaluatorClassicStates *this, const MIL::IROperation *a2)
{
  unint64_t OpIndex = Espresso::AOT::EvaluatorClassicStates::GetOpIndex(this, a2);
  uint64_t v4 = *((void *)this + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v4) >> 3) <= OpIndex) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Op index out of range");
  }
  return v4 + 24 * OpIndex;
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetOpIndex(Espresso::AOT::EvaluatorClassicStates *this, const MIL::IROperation *a2)
{
  uint64_t Location = MIL::IRObject::GetLocation(a2);
  (*(void (**)(void **__return_ptr))(*(void *)Location + 24))(__p);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)this + 2, (uint64_t)__p);
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find operation index");
  }
  uint64_t v5 = v4[5];
  if ((v8 & 0x80000000) == 0) {
    return v4[5];
  }
  operator delete(__p[0]);
  return v5;
}

void sub_1924FA188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::AOT::EvaluatorClassicStates::LayerIsValid(Espresso::AOT::EvaluatorClassicStates *this, uint64_t a2)
{
  uint64_t v2 = *(uint64_t ***)(*(void *)(*(void *)this + 712) + 80);
  if (!v2) {
    goto LABEL_32;
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)this + 32) + 16 * a2);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = v7;
  int v8 = *(char *)(v5 + 23);
  size_t v9 = v8 >= 0 ? *(unsigned __int8 *)(v5 + 23) : *(void *)(v5 + 8);
  uint64_t v10 = (const void *)(v8 >= 0 ? v5 : v6);
  while (1)
  {
    while (1)
    {
      int v11 = *((char *)v2 + 55);
      if (v11 >= 0) {
        size_t v12 = *((unsigned __int8 *)v2 + 55);
      }
      else {
        size_t v12 = (size_t)v2[5];
      }
      if (v11 >= 0) {
        uint64_t v13 = (uint64_t *)(v2 + 4);
      }
      else {
        uint64_t v13 = v2[4];
      }
      if (v12 >= v9) {
        size_t v14 = v9;
      }
      else {
        size_t v14 = v12;
      }
      int v15 = memcmp(v10, v13, v14);
      BOOL v16 = v9 < v12;
      if (v15) {
        BOOL v16 = v15 < 0;
      }
      if (!v16) {
        break;
      }
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_32;
      }
    }
    int v17 = memcmp(v13, v10, v14);
    BOOL v18 = v12 < v9;
    if (v17) {
      BOOL v18 = v17 < 0;
    }
    if (!v18) {
      break;
    }
    uint64_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_32;
    }
  }
  uint64_t v19 = v2[8];
  if (!v19) {
LABEL_32:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v20 = *((_DWORD *)this + 20);
  while (1)
  {
    while (1)
    {
      int v21 = *((_DWORD *)v19 + 7);
      if (v20 >= v21) {
        break;
      }
      uint64_t v19 = (uint64_t *)*v19;
      if (!v19) {
        goto LABEL_32;
      }
    }
    if (v21 >= v20) {
      return *((_DWORD *)v19 + 8) != 0;
    }
    uint64_t v19 = (uint64_t *)v19[1];
    if (!v19) {
      goto LABEL_32;
    }
  }
}

void Espresso::AOT::EvaluatorClassicStates::MarkDispatchUnitAsValid(Espresso::AOT::EvaluatorClassicStates *this, uint64_t a2)
{
  uint64_t v5 = (char *)*((void *)this + 12);
  unint64_t v4 = *((void *)this + 13);
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  int v8 = (char *)*((void *)this + 11);
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = operator new(8 * v12);
    size_t v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *size_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  size_t v14 = (void *)(8 * v9);
  int v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    size_t v14 = (void *)((char *)v14 - v19);
    int v20 = &v13[8 * v9 - 16];
    int v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *int v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--size_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *((void *)this + 11) = v14;
  *((void *)this + 12) = v7;
  *((void *)this + 13) = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  *((void *)this + 12) = v7;
}

BOOL Espresso::AOT::EvaluatorClassicStates::OperationIsValid(int8x8_t *this, const MIL::IROperation *a2)
{
  if (!this[10].i8[4]) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("DispatchUnitIsValid can be called only after validation is done");
  }
  unint64_t OpIndex = Espresso::AOT::EvaluatorClassicStates::GetOpIndex((Espresso::AOT::EvaluatorClassicStates *)this, a2);
  int8x8_t v4 = this[15];
  if (!*(void *)&v4)
  {
    uint64_t v7 = 0;
    return v7 != 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = OpIndex;
    if (OpIndex >= *(void *)&v4) {
      unint64_t v6 = OpIndex % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & OpIndex;
  }
  uint64_t v7 = *(void **)(*(void *)&this[14] + 8 * v6);
  if (!v7) {
    return v7 != 0;
  }
  uint64_t v7 = (void *)*v7;
  if (!v7) {
    return v7 != 0;
  }
  if (v5.u32[0] >= 2uLL)
  {
    do
    {
      unint64_t v10 = v7[1];
      if (OpIndex == v10)
      {
        if (v7[2] == OpIndex) {
          return v7 != 0;
        }
      }
      else
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
        if (v10 != v6) {
          return 0;
        }
      }
      uint64_t v7 = (void *)*v7;
    }
    while (v7);
    return v7 != 0;
  }
  uint64_t v9 = *(void *)&v4 - 1;
  while (1)
  {
    uint64_t v11 = v7[1];
    if (OpIndex == v11)
    {
      if (v7[2] == OpIndex) {
        return v7 != 0;
      }
      goto LABEL_21;
    }
    if ((v11 & v9) != v6) {
      return 0;
    }
LABEL_21:
    uint64_t v7 = (void *)*v7;
    if (!v7) {
      return v7 != 0;
    }
  }
}

void Espresso::AOT::EvaluatorClassicStates::GetValidationResult(Espresso::AOT::EvaluatorClassicStates *this)
{
  int v1 = (char *)this + 88;
  uint64_t v2 = (unint64_t *)*((void *)this + 11);
  *((unsigned char *)this + 84) = 1;
  for (uint64_t i = (unint64_t *)*((void *)this + 12); v2 != i; ++v2)
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v1 + 24), v2, v2);
  operator new();
}

void sub_1924FA63C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10B1C40E94733EDLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::EvaluatorClassicStates::OpLocationToIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)(a1 + 16), a2);
  if (!v2) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find operation index");
  }
  return v2[5];
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::string,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    int v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      int64_t v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = *((void *)v16 + 1);
            if (v24 == v12)
            {
              uint64_t v25 = v16[39];
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = v16[39];
              }
              else {
                uint64_t v26 = *((void *)v16 + 3);
              }
              if (v26 == v18)
              {
                uint64_t v27 = (const void **)(v16 + 16);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, *((void *)v16 + 3))) {
                    return v16;
                  }
                }
                else
                {
                  if (!v16[39]) {
                    return v16;
                  }
                  for (uint64_t i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    uint64_t v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int64_t v16 = *(unsigned __int8 **)v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v12)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              uint64_t v22 = (const void **)(v16 + 16);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                for (uint64_t j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  uint64_t v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          int64_t v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  uint64_t v29 = (void *)(a1 + 16);
  int64_t v16 = (unsigned __int8 *)operator new(0x30uLL);
  v47[0] = v16;
  v47[1] = a1 + 16;
  *(void *)int64_t v16 = 0;
  *((void *)v16 + 1) = v12;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  uint64_t v30 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v31 = *a4;
  *((void *)v16 + 4) = v30;
  *((void *)v16 + 5) = v31;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (v13 && (float)(v33 * (float)v13) >= v32)
  {
    uint64_t v34 = *(void *)a1;
    uint64_t v35 = *(void **)(*(void *)a1 + 8 * v4);
    if (v35)
    {
LABEL_54:
      *(void *)int64_t v16 = *v35;
LABEL_89:
      *uint64_t v35 = v16;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v36 = 1;
    if (v13 >= 3) {
      BOOL v36 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v13);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v44 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v34 = *(void *)a1;
        uint64_t v35 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v35) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v34 = *(void *)a1;
        uint64_t v35 = *(void **)(*(void *)a1 + 8 * v12);
        if (v35) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v12;
      uint64_t v34 = *(void *)a1;
      uint64_t v35 = *(void **)(*(void *)a1 + 8 * (v44 & v12));
      if (v35) {
        goto LABEL_54;
      }
    }
  }
  *(void *)int64_t v16 = *v29;
  void *v29 = v16;
  *(void *)(v34 + 8 * v4) = v29;
  if (*(void *)v16)
  {
    unint64_t v45 = *(void *)(*(void *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v45 >= v13) {
        v45 %= v13;
      }
    }
    else
    {
      v45 &= v13 - 1;
    }
    uint64_t v35 = (void *)(*(void *)a1 + 8 * v45);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_1924FAAAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Backends::CostModel::LSTMOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::LSTMOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_1924FB450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v39 = *(void **)(v37 - 176);
  if (v39)
  {
    *(void *)(v37 - 168) = v39;
    operator delete(v39);
    uint64_t v40 = *a9;
    *a9 = 0;
    if (!v40) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v40 = *a9;
    *a9 = 0;
    if (!v40) {
      goto LABEL_5;
    }
  }
  MEMORY[0x192FF16B0](v40, 0x1000C401CC6BE04);
  _Unwind_Resume(exception_object);
}

float Espresso::AOT::DTrees::reluAneFp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneIp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneJp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneKp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneGp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneHp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuFp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuIp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuJp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuKp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuGp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuHp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuFp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuIp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuJp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuKp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuGp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuHp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneCp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneDp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneEp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuCp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuDp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuEp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuCp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuDp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuEp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::max_poolAneCp(uint64_t a1)
{
  float result = 26.428;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 33.926;
  }
  return result;
}

float Espresso::AOT::DTrees::max_poolAneDp(uint64_t a1)
{
  float result = 28.924;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 253.04;
  }
  return result;
}

float Espresso::AOT::DTrees::max_poolAneEp(uint64_t a1)
{
  float result = 26.154;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 48.755;
  }
  return result;
}

float Espresso::AOT::DTrees::max_poolCpuCp(uint64_t a1)
{
  float result = 12.169;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 11.406;
  }
  return result;
}

float Espresso::AOT::DTrees::max_poolCpuDp(uint64_t a1)
{
  float result = 12.17;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 11.793;
  }
  return result;
}

float Espresso::AOT::DTrees::max_poolCpuEp(uint64_t a1)
{
  float result = 18.255;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 13.36;
  }
  return result;
}

float Espresso::AOT::DTrees::max_poolGpuCp(uint64_t a1)
{
  float result = 10.934;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 25.255;
  }
  return result;
}

float Espresso::AOT::DTrees::max_poolGpuDp(uint64_t a1)
{
  float result = 14.604;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 33.889;
  }
  return result;
}

float Espresso::AOT::DTrees::max_poolGpuEp(uint64_t a1)
{
  float result = 16.677;
  if (*(double *)(a1 + 48) > 1.8035) {
    return 37.063;
  }
  return result;
}

void *Espresso::AOT::E5BackendToE5RTLoweringPass::E5BackendToE5RTLoweringPass(void *a1, const Espresso::AOT::AOTCompilerOptions *a2)
{
  unint64_t v4 = Espresso::AOT::AbstractMILPass::AbstractMILPass(a1);
  void *v4 = &unk_1EE36B678;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(v4 + 1), a2);
  return a1;
}

{
  void *v4;

  unint64_t v4 = Espresso::AOT::AbstractMILPass::AbstractMILPass(a1);
  void *v4 = &unk_1EE36B678;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(v4 + 1), a2);
  return a1;
}

void sub_1924FB990(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(v1);
  _Unwind_Resume(a1);
}

void sub_1924FB9F4(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::RunCompilerBackend(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, (const Espresso::AOT::AOTCompilerOptions *)(a1 + 8));
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v17 = *(std::string *)a5;
  }
  Espresso::AOT::AOTCompilerOptions::SetOutput((uint64_t)v18, (__n128 *)&v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  switch(a2)
  {
    case 2u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForANE,Espresso::AOT::AOTCompilerOptions &>();
    case 3u:
    case 6u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForClassicCpu,Espresso::AOT::AOTCompilerOptions &>();
    case 4u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions &>();
    case 5u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMPSGraph,Espresso::AOT::AOTCompilerOptions &>();
    case 7u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForJitCall,Espresso::AOT::AOTCompilerOptions &>();
    case 8u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForBnns,Espresso::AOT::AOTCompilerOptions &>();
    case 9u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForE5MinimalCpu,Espresso::AOT::AOTCompilerOptions &>();
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v13[0] = Espresso::AOT::GetBackendName(a2);
      v13[1] = v8;
      std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v13);
      unint64_t v9 = std::string::insert(&__dst, 0, "Found unsupported backend: ");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      unint64_t v11 = std::string::append(&v15, ".");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v16);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
}

void sub_1924FBD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a30 < 0)
  {
    operator delete(a25);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if (a17 < 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if (a17 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v39 & 1) == 0)
    {
LABEL_10:
      Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a38);
      _Unwind_Resume(a1);
    }
LABEL_9:
    __cxa_free_exception(v38);
    Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a38);
    _Unwind_Resume(a1);
  }
LABEL_8:
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForClassicCpu,Espresso::AOT::AOTCompilerOptions &>()
{
}

void sub_1924FC094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C40BA349698);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForBnns,Espresso::AOT::AOTCompilerOptions &>()
{
}

void sub_1924FC1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C4030463251);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForE5MinimalCpu,Espresso::AOT::AOTCompilerOptions &>()
{
}

void sub_1924FC2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C408EF31D99);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMPSGraph,Espresso::AOT::AOTCompilerOptions &>()
{
}

void sub_1924FC3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C406EAB50E7);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions &>()
{
}

void sub_1924FC514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C40CB988097);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForJitCall,Espresso::AOT::AOTCompilerOptions &>()
{
}

void sub_1924FC634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C408EF31D99);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForANE,Espresso::AOT::AOTCompilerOptions &>()
{
}

void sub_1924FC754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C401F567A0FLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::MakeE5RTInferenceOp(int a1@<W2>, MIL::IRObject *a2@<X3>, std::string **a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, const std::string **a6@<X7>, void *a7@<X8>)
{
  uint64_t v517 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 64))(a2);
  unint64_t v13 = (E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 128))(v12);
  if ((v13 & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(MIL::IRObject *))(*(void *)a2 + 56))(a2);
    std::operator+<char>();
    v315 = std::string::append(&v514.__pn_, ".");
    long long v316 = *(_OWORD *)&v315->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v315->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v316;
    v315->__r_.__value_.__l.__size_ = 0;
    v315->__r_.__value_.__r.__words[2] = 0;
    v315->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if ((char *)a3[1] - (char *)*a3 != 24)
  {
    v317 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v317, "Found more than one asset.");
    __cxa_throw(v317, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(v13);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string v16 = OpsetName;
  std::string v17 = (void *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v18 = (void **)operator new(v19 + 1);
    unint64_t v483 = v20 | 0x8000000000000000;
    __dst[0] = v18;
    __dst[1] = v17;
  }
  else
  {
    HIBYTE(v483) = v15;
    uint64_t v18 = __dst;
    if (!v15) {
      goto LABEL_11;
    }
  }
  memmove(v18, v16, (size_t)v17);
LABEL_11:
  *((unsigned char *)v17 + (void)v18) = 0;
  MIL::MILContext::GetOpset();
  *a7 = 0;
  a7[1] = 0;
  MIL::IRTensorValueType::MakeScalar();
  v340 = a2;
  uint64_t Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  uint64_t v22 = MIL::IRTensorValueType::MakeScalar();
  long long v23 = a2;
  switch(a1)
  {
    case 2:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "ane_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v504.__r_.__value_.__r.__words[0])
      {
        v325 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v325, "Operator ane_inference is missing in E5RT opset.");
        __cxa_throw(v325, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v430 = *(_OWORD *)&v504.__r_.__value_.__l.__data_;
      uint64_t v24 = a5;
      if (v504.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v504.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make();
      long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v25;
      if (*((void *)&v430 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v430 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v430 + 1) + 16))(*((void *)&v430 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v430 + 1));
      }
      char v428 = 11;
      strcpy((char *)v427, "program_url");
      uint64_t v26 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v424, v26->__r_.__value_.__l.__data_, v26->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v424.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v424.__r_.__value_.__l.__data_ = v27;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v425 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v426 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      uint64_t v74 = v429;
      if (v429 && !atomic_fetch_add(&v429->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
      int v75 = v426;
      if (v426 && !atomic_fetch_add(&v426->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
      std::string::size_type v76 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v76) {
        (*(void (**)(std::string::size_type))(*(void *)v76 + 8))(v76);
      }
      if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v424.__r_.__value_.__l.__data_);
      }
      if (v428 < 0) {
        operator delete(v427[0]);
      }
      uint64_t v77 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 64))(a2);
      (*(void (**)(std::string *__return_ptr))(*(void *)v77 + 120))(&v509);
      long long v79 = *a6;
      unint64_t v78 = (char *)a6[1];
      if (*a6 == (const std::string *)v78)
      {
        if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v507, v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
        }
        else {
          std::string v507 = v509;
        }
        goto LABEL_574;
      }
      memset(&__p, 0, sizeof(__p));
      do
      {
        int64_t v80 = *(unsigned __int8 *)(a4 + 23);
        if ((v80 & 0x80u) == 0) {
          uint64_t v81 = a4;
        }
        else {
          uint64_t v81 = *(void *)a4;
        }
        int v82 = SHIBYTE(v79->__r_.__value_.__r.__words[2]);
        if (v82 >= 0) {
          uint64_t v83 = v79;
        }
        else {
          uint64_t v83 = (const std::string *)v79->__r_.__value_.__r.__words[0];
        }
        if (v82 >= 0) {
          int64_t size = HIBYTE(v79->__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = v79->__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if ((v80 & 0x80u) != 0) {
            int64_t v80 = *(void *)(a4 + 8);
          }
          if (v80 >= size)
          {
            uint64_t v85 = (char *)(v81 + v80);
            int v86 = v83->__r_.__value_.__s.__data_[0];
            uint64_t v87 = (void *)v81;
            do
            {
              uint64_t v88 = v80 - size;
              if (v88 == -1) {
                break;
              }
              long long v89 = (char *)memchr(v87, v86, v88 + 1);
              if (!v89) {
                break;
              }
              std::__fs::filesystem::path v90 = v89;
              if (!memcmp(v89, v83, size))
              {
                if (v90 != v85 && &v90[-v81] != (char *)-1) {
                  goto LABEL_199;
                }
                break;
              }
              uint64_t v87 = v90 + 1;
              int64_t v80 = v85 - (v90 + 1);
            }
            while (v80 >= size);
          }
        }
        else
        {
LABEL_199:
          std::string::operator=(&__p, v79);
        }
        ++v79;
      }
      while (v79 != (const std::string *)v78);
      int v91 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v92 = __p.__r_.__value_.__l.__size_;
      }
      if (!v92)
      {
        v335 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v336 = std::string::append(&v510.__pn_, ".");
        long long v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
        v514.__pn_.__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v514.__pn_.__r_.__value_.__l.__data_ = v337;
        v336->__r_.__value_.__l.__size_ = 0;
        v336->__r_.__value_.__r.__words[2] = 0;
        v336->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v335, &v514.__pn_);
        v335->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v335, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      int v93 = SHIBYTE(v509.__r_.__value_.__r.__words[2]);
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v94 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v94 = v509.__r_.__value_.__l.__size_;
      }
      unint64_t v95 = v94 + 1;
      if (v94 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v95 >= 0x17)
      {
        uint64_t v187 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v95 | 7) != 0x17) {
          uint64_t v187 = v95 | 7;
        }
        uint64_t v188 = v187 + 1;
        long long v96 = (char *)operator new(v187 + 1);
        v514.__pn_.__r_.__value_.__l.__size_ = v94 + 1;
        v514.__pn_.__r_.__value_.__r.__words[2] = v188 | 0x8000000000000000;
        v514.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
      }
      else
      {
        memset(&v514, 0, sizeof(v514));
        long long v96 = (char *)&v514;
        *((unsigned char *)&v514.__pn_.__r_.__value_.__s + 23) = v94 + 1;
        if (!v94) {
          goto LABEL_488;
        }
      }
      if (v93 >= 0) {
        uint64_t v189 = &v509;
      }
      else {
        uint64_t v189 = (std::string *)v509.__r_.__value_.__r.__words[0];
      }
      memmove(v96, v189, v94);
LABEL_488:
      *(_WORD *)&v96[v94] = 95;
      if (v91 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v191 = std::string::append(&v514.__pn_, (const std::string::value_type *)p_p, v92);
      long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
      v507.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v507.__r_.__value_.__l.__data_ = v192;
      v191->__r_.__value_.__l.__size_ = 0;
      v191->__r_.__value_.__r.__words[2] = 0;
      v191->__r_.__value_.__r.__words[0] = 0;
      uint64_t v24 = a5;
      if (SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v514.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_574:
      char v422 = 14;
      strcpy((char *)v421, "procedure_name");
      if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v418, v507.__r_.__value_.__l.__data_, v507.__r_.__value_.__l.__size_);
      }
      else {
        std::string v418 = v507;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v419 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v420 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      char v221 = v423;
      if (v423 && !atomic_fetch_add(&v423->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
        std::__shared_weak_count::__release_weak(v221);
      }
      char v222 = v420;
      if (v420 && !atomic_fetch_add(&v420->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
      std::string::size_type v223 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v223) {
        (*(void (**)(std::string::size_type))(*(void *)v223 + 8))(v223);
      }
      if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v418.__r_.__value_.__l.__data_);
      }
      if (v422 < 0) {
        operator delete(v421[0]);
      }
      char v416 = 6;
      strcpy((char *)v415, "ane_id");
      char v412 = 1;
      LOWORD(v411) = 48;
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v413 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v414 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v417 && !atomic_fetch_add(&v417->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
        std::__shared_weak_count::__release_weak(v417);
      }
      std::string::size_type v224 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v224) {
        (*(void (**)(std::string::size_type))(*(void *)v224 + 8))(v224);
      }
      if (v412 < 0) {
        operator delete(v411);
      }
      if (v416 < 0) {
        operator delete(v415[0]);
      }
      (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v24 + 64))(&v501, v24, &v509);
      long long v225 = (MIL::UnknownLocation *)(*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)v24 + 48))(&v409, v24);
      MIL::UnknownLocation::Make((uint64_t *)&v510, v225);
      std::string::size_type v407 = v510.__pn_.__r_.__value_.__r.__words[0];
      if (v510.__pn_.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v408 = 0;
      v510.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v514.__pn_, v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
      }
      else {
        std::__fs::filesystem::path v514 = (std::__fs::filesystem::path)v509;
      }
      v515 = v501;
      v516 = v502;
      if (v502) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v502->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((uint64_t)&__p, (uint64_t)&v514, 1);
      MIL::IRProgram::Make();
      int v226 = (void **)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        do
        {
          while (1)
          {
            int v227 = (void **)*v226;
            v228 = (std::__shared_weak_count *)v226[6];
            if (v228 && !atomic_fetch_add(&v228->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
            }
            if (*((char *)v226 + 39) < 0) {
              break;
            }
            operator delete(v226);
            int v226 = v227;
            if (!v227) {
              goto LABEL_617;
            }
          }
          operator delete(v226[2]);
          operator delete(v226);
          int v226 = v227;
        }
        while (v227);
      }
LABEL_617:
      v229 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v229) {
        operator delete(v229);
      }
      uint64_t v230 = (std::__shared_weak_count *)v516;
      if (v516 && !atomic_fetch_add((atomic_ullong *volatile)&v516->__r_.__value_.__l.__size_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
      }
      if (SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v514.__pn_.__r_.__value_.__l.__data_);
      }
      std::string::size_type v231 = v510.__pn_.__r_.__value_.__r.__words[0];
      v510.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (v231) {
        (*(void (**)(std::string::size_type))(*(void *)v231 + 8))(v231);
      }
      v232 = v410;
      if (v410 && !atomic_fetch_add(&v410->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
      MIL::Util::FindBlobFilePaths();
      (*(void (**)(void *, uint64_t))(*(void *)v501 + 184))(v501, a5);
      MIL::Attributes::BlobFileMutabilityInfo::Make();
      memset(&v514, 0, sizeof(v514));
      for (uint64_t i = *(uint64_t **)(MIL::Attributes::BlobFileMutabilityInfo::GetAllPaths(v493[0]) + 16); i; uint64_t i = (uint64_t *)*i)
      {
        std::string::size_type v239 = __p.__r_.__value_.__l.__size_;
        std::string::size_type v238 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
        {
          int v240 = *((char *)i + 63);
          if (v240 >= 0) {
            uint64_t v241 = *((unsigned __int8 *)i + 63);
          }
          else {
            uint64_t v241 = i[6];
          }
          if (v240 >= 0) {
            uint64_t v242 = (unsigned __int8 *)(i + 5);
          }
          else {
            uint64_t v242 = (unsigned __int8 *)i[5];
          }
          while (1)
          {
            uint64_t v243 = *(unsigned __int8 *)(v238 + 23);
            if ((v243 & 0x80u) == 0) {
              uint64_t v244 = *(unsigned __int8 *)(v238 + 23);
            }
            else {
              uint64_t v244 = *(void *)(v238 + 8);
            }
            if (v244 == v241)
            {
              if ((v243 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v238, v242, *(void *)(v238 + 8))) {
                  break;
                }
              }
              else
              {
                if (!*(unsigned char *)(v238 + 23)) {
                  break;
                }
                uint64_t v245 = 0;
                while (*(unsigned __int8 *)(v238 + v245) == v242[v245])
                {
                  if (v243 == ++v245) {
                    goto LABEL_656;
                  }
                }
              }
            }
            v238 += 24;
            if (v238 == v239) {
              goto LABEL_637;
            }
          }
        }
LABEL_656:
        if (v238 != v239)
        {
          v246 = (long long *)(i + 2);
          uint64_t v247 = (_OWORD *)v514.__pn_.__r_.__value_.__l.__size_;
          if (v514.__pn_.__r_.__value_.__l.__size_ >= v514.__pn_.__r_.__value_.__r.__words[2])
          {
            char v237 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v514.__pn_.__r_.__value_.__l.__data_, (uint64_t)v246);
          }
          else
          {
            if (*((char *)i + 39) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v514.__pn_.__r_.__value_.__l.__size_, (const std::string::value_type *)i[2], i[3]);
            }
            else
            {
              long long v248 = *v246;
              *(void *)(v514.__pn_.__r_.__value_.__l.__size_ + 16) = i[4];
              *uint64_t v247 = v248;
            }
            char v237 = (std::string *)((char *)v247 + 24);
          }
          v514.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v237;
        }
LABEL_637:
        ;
      }
      std::string::size_type v235 = v514.__pn_.__r_.__value_.__l.__size_;
      std::string::size_type v234 = v514.__pn_.__r_.__value_.__r.__words[0];
      if (v514.__pn_.__r_.__value_.__r.__words[0] != v514.__pn_.__r_.__value_.__l.__size_)
      {
        v236 = operator new(8uLL);
        v510.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v236;
        void *v236 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v235 - v234) >> 3);
        v510.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)(v236 + 1);
        v510.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)(v236 + 1);
        MIL::IRTensorValueType::Make();
        if (v510.__pn_.__r_.__value_.__r.__words[0])
        {
          v510.__pn_.__r_.__value_.__l.__size_ = v510.__pn_.__r_.__value_.__r.__words[0];
          operator delete(v510.__pn_.__r_.__value_.__l.__data_);
        }
        char v405 = 15;
        strcpy((char *)v404, "mutable_weights");
        MIL::IRTensorValueType::MakeStringValue();
        std::string::size_type v402 = v510.__pn_.__r_.__value_.__r.__words[0];
        if (v510.__pn_.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        uint64_t v403 = 0;
        v510.__pn_.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        if (v406 && !atomic_fetch_add(&v406->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
          std::__shared_weak_count::__release_weak(v406);
        }
        std::string::size_type v249 = v510.__pn_.__r_.__value_.__r.__words[0];
        v510.__pn_.__r_.__value_.__r.__words[0] = 0;
        if (v249) {
          (*(void (**)(std::string::size_type))(*(void *)v249 + 8))(v249);
        }
        if (v405 < 0) {
          operator delete(v404[0]);
        }
        std::string::size_type v234 = v514.__pn_.__r_.__value_.__r.__words[0];
      }
      if (v234)
      {
        std::string::size_type v250 = v514.__pn_.__r_.__value_.__l.__size_;
        v251 = (void *)v234;
        if (v514.__pn_.__r_.__value_.__l.__size_ != v234)
        {
          do
          {
            if (*(char *)(v250 - 1) < 0) {
              operator delete(*(void **)(v250 - 24));
            }
            v250 -= 24;
          }
          while (v250 != v234);
          v251 = (void *)v514.__pn_.__r_.__value_.__r.__words[0];
        }
        v514.__pn_.__r_.__value_.__l.__size_ = v234;
        operator delete(v251);
      }
      uint64_t v252 = v493[0];
      v493[0] = 0;
      if (v252)
      {
        MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(v252);
        MEMORY[0x192FF16B0]();
      }
      std::string::size_type v253 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v254 = __p.__r_.__value_.__l.__size_;
        v255 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v254 - 1) < 0) {
              operator delete(*(void **)(v254 - 24));
            }
            v254 -= 24;
          }
          while (v254 != v253);
          v255 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v253;
        operator delete(v255);
      }
      v256 = v498;
      v498 = 0;
      if (v256) {
        (*(void (**)(void *))(*(void *)v256 + 8))(v256);
      }
      v257 = v502;
      if (v502 && !atomic_fetch_add((atomic_ullong *volatile)&v502->__r_.__value_.__l.__size_, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(std::string *))(v257->__r_.__value_.__r.__words[0] + 16))(v257);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v257);
      }
      if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v507.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_696:
          long long v185 = (std::__shared_weak_count *)v504.__r_.__value_.__l.__size_;
          if (v504.__r_.__value_.__l.__size_) {
            goto LABEL_831;
          }
          goto LABEL_833;
        }
      }
      else if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_696;
      }
      operator delete(v509.__r_.__value_.__l.__data_);
      long long v185 = (std::__shared_weak_count *)v504.__r_.__value_.__l.__size_;
      if (v504.__r_.__value_.__l.__size_) {
        goto LABEL_831;
      }
LABEL_833:
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(v340);
      v289 = (std::__shared_weak_count *)LocationPtr[1];
      uint64_t v350 = *LocationPtr;
      v351 = v289;
      if (v289) {
        atomic_fetch_add_explicit(&v289->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::SetLocation();
      if (v351 && !atomic_fetch_add(&v351->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
        std::__shared_weak_count::__release_weak(v351);
      }
      v290 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v340 + 160))(v340);
      v291 = v290 + 1;
      v292 = (void *)*v290;
      if ((void *)*v290 != v290 + 1)
      {
        while (1)
        {
          uint64_t v293 = v292[7];
          uint64_t v294 = v292[8];
          if (v293 != v294) {
            break;
          }
LABEL_877:
          v305 = (void *)v292[1];
          if (v305)
          {
            do
            {
              v306 = v305;
              v305 = (void *)*v305;
            }
            while (v305);
          }
          else
          {
            do
            {
              v306 = (void *)v292[2];
              BOOL v146 = *v306 == (void)v292;
              v292 = v306;
            }
            while (!v146);
          }
          v292 = v306;
          if (v306 == v291) {
            goto LABEL_883;
          }
        }
        v295 = v292 + 4;
        while (1)
        {
          v296 = *(MIL::IRArgument **)v293;
          __p.__r_.__value_.__r.__words[0] = *(void *)v293;
          std::string::size_type v297 = *(void *)(v293 + 8);
          __p.__r_.__value_.__l.__size_ = v297;
          if (v297) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v297 + 8), 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(MIL::IRArgument *))(*(void *)v296 + 16))(v296))
          {
            if (*((char *)v292 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(&v348, (const std::string::value_type *)v292[4], v292[5]);
            }
            else
            {
              *(_OWORD *)&v348.__r_.__value_.__l.__data_ = *v295;
              v348.__r_.__value_.__r.__words[2] = v292[6];
            }
            uint64_t Name = MIL::IRArgument::GetName(v296);
            if (*(char *)(Name + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v347, *(const std::string::value_type **)Name, *(void *)(Name + 8));
            }
            else
            {
              long long v299 = *(_OWORD *)Name;
              v347.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
              *(_OWORD *)&v347.__r_.__value_.__l.__data_ = v299;
            }
            MIL::Builder::OperationBuilder::AddInput();
            v300 = v349;
            if (v349 && !atomic_fetch_add(&v349->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
              std::__shared_weak_count::__release_weak(v300);
              if ((SHIBYTE(v347.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_859;
              }
            }
            else if ((SHIBYTE(v347.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_859:
              if ((SHIBYTE(v348.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_874;
              }
LABEL_869:
              v303 = &v348;
              goto LABEL_873;
            }
            operator delete(v347.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v348.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_874;
            }
            goto LABEL_869;
          }
          if (!(*(unsigned int (**)(MIL::IRArgument *))(*(void *)v296 + 24))(v296))
          {
            v313 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v313, "Found an argument of Call that is neither a name nor a value.");
            v313->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            __cxa_throw(v313, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
          }
          if (*((char *)v292 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(&v345, (const std::string::value_type *)v292[4], v292[5]);
          }
          else
          {
            *(_OWORD *)&v345.__r_.__value_.__l.__data_ = *v295;
            v345.__r_.__value_.__r.__words[2] = v292[6];
          }
          (*(void (**)(uint64_t *__return_ptr, MIL::IRArgument *))(*(void *)v296 + 48))(&v343, v296);
          MIL::Builder::OperationBuilder::AddInput();
          v301 = v346;
          if (v346 && !atomic_fetch_add(&v346->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
            v302 = v344;
            if (v344)
            {
LABEL_865:
              if (!atomic_fetch_add(&v302->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                std::__shared_weak_count::__release_weak(v302);
              }
            }
          }
          else
          {
            v302 = v344;
            if (v344) {
              goto LABEL_865;
            }
          }
          if ((SHIBYTE(v345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_874;
          }
          v303 = &v345;
LABEL_873:
          operator delete(v303->__r_.__value_.__l.__data_);
LABEL_874:
          v304 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
            std::__shared_weak_count::__release_weak(v304);
          }
          v293 += 16;
          if (v293 == v294) {
            goto LABEL_877;
          }
        }
      }
LABEL_883:
      uint64_t v307 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v340 + 176))(v340);
      v308 = *(MIL::IRNamedValueType ***)v307;
      v309 = *(MIL::IRNamedValueType ***)(v307 + 8);
      if (*(MIL::IRNamedValueType ***)v307 != v309)
      {
        do
        {
          while (1)
          {
            uint64_t v310 = MIL::IRNamedValueType::GetName(*v308);
            if (*(char *)(v310 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)v310, *(void *)(v310 + 8));
            }
            else
            {
              long long v311 = *(_OWORD *)v310;
              v341.__r_.__value_.__r.__words[2] = *(void *)(v310 + 16);
              *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v311;
            }
            MIL::IRNamedValueType::GetType(*v308);
            MIL::Builder::OperationBuilder::AddOutput();
            v312 = v342;
            if (v342 && !atomic_fetch_add(&v342->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
              std::__shared_weak_count::__release_weak(v312);
            }
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
              break;
            }
            v308 += 2;
            if (v308 == v309) {
              goto LABEL_894;
            }
          }
          operator delete(v341.__r_.__value_.__l.__data_);
          v308 += 2;
        }
        while (v308 != v309);
      }
LABEL_894:
      if (SHIBYTE(v483) < 0) {
        operator delete(__dst[0]);
      }
      return;
    case 3:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "cpu_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v514.__pn_.__r_.__value_.__r.__words[0])
      {
        v330 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v330, "Operator cpu_inference is missing in E5RT opset.");
        __cxa_throw(v330, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v466 = *(_OWORD *)&v514.__pn_.__r_.__value_.__l.__data_;
      if (v514.__pn_.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v514.__pn_.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make();
      long long v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v42;
      if (*((void *)&v466 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v466 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v466 + 1) + 16))(*((void *)&v466 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v466 + 1));
      }
      HIBYTE(v464[2]) = 16;
      strcpy((char *)v464, "model_assets_url");
      uint64_t v43 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (SHIBYTE(v43->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v461, v43->__r_.__value_.__l.__data_, v43->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v461.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v461.__r_.__value_.__l.__data_ = v44;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v462 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v463 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      long long v97 = v465;
      if (v465 && !atomic_fetch_add(&v465->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
      uint64_t v98 = v463;
      if (v463 && !atomic_fetch_add(&v463->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
      std::string::size_type v99 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v99) {
        (*(void (**)(std::string::size_type))(*(void *)v99 + 8))(v99);
      }
      if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v461.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v464[2]) < 0) {
        operator delete(v464[0]);
      }
      v459[23] = 18;
      strcpy(v459, "configuration_name");
      uint64_t v101 = (std::string *)*a6;
      unint64_t v100 = a6[1];
      if (*a6 == v100) {
        goto LABEL_249;
      }
      while (!E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)a4, (unsigned __int8 *)v101))
      {
        if (++v101 == v100)
        {
LABEL_249:
          *((unsigned char *)&v456.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v456, "default");
          goto LABEL_797;
        }
      }
      if (SHIBYTE(v101->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v456, v101->__r_.__value_.__l.__data_, v101->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v186 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
        v456.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v456.__r_.__value_.__l.__data_ = v186;
      }
LABEL_797:
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v457 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v458 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v282 = v460;
      if (v460 && !atomic_fetch_add(&v460->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
        std::__shared_weak_count::__release_weak(v282);
      }
      v283 = v458;
      if (v458 && !atomic_fetch_add(&v458->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
        std::__shared_weak_count::__release_weak(v283);
      }
      std::string::size_type v284 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v284) {
        (*(void (**)(std::string::size_type))(*(void *)v284 + 8))(v284);
      }
      if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v456.__r_.__value_.__l.__data_);
      }
      if (v459[23] < 0)
      {
        uint64_t v66 = *(void **)v459;
LABEL_811:
        operator delete(v66);
      }
LABEL_812:
      long long v185 = (std::__shared_weak_count *)v514.__pn_.__r_.__value_.__l.__size_;
      if (!v514.__pn_.__r_.__value_.__l.__size_) {
        goto LABEL_833;
      }
      goto LABEL_831;
    case 4:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "mlc_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v514.__pn_.__r_.__value_.__r.__words[0])
      {
        v327 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v327, "Operator mlc_inference is missing in E5RT opset.");
        __cxa_throw(v327, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v401 = *(_OWORD *)&v514.__pn_.__r_.__value_.__l.__data_;
      if (v514.__pn_.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v514.__pn_.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make();
      long long v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v33;
      if (*((void *)&v401 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v401 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v401 + 1) + 16))(*((void *)&v401 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v401 + 1));
      }
      char v399 = 15;
      strcpy(v398, "mlc_binary_path");
      uint64_t v34 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v395, v34->__r_.__value_.__l.__data_, v34->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v395.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v395.__r_.__value_.__l.__data_ = v35;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v396 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v397 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      BOOL v63 = v400;
      if (v400 && !atomic_fetch_add(&v400->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
      uint64_t v64 = v397;
      if (v397 && !atomic_fetch_add(&v397->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      std::string::size_type v65 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v65) {
        (*(void (**)(std::string::size_type))(*(void *)v65 + 8))(v65);
      }
      if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v395.__r_.__value_.__l.__data_);
      }
      if ((v399 & 0x80000000) == 0) {
        goto LABEL_812;
      }
      uint64_t v66 = *(void **)v398;
      goto LABEL_811;
    case 5:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&__p, "mps_graph_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v507.__r_.__value_.__r.__words[0])
      {
        v328 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v328, "Operator mps_graph_inference is missing in E5RT opset.");
        __cxa_throw(v328, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v455 = *(_OWORD *)&v507.__r_.__value_.__l.__data_;
      if (v507.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v507.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make();
      long long v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v36;
      if (*((void *)&v455 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v455 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v455 + 1) + 16))(*((void *)&v455 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v455 + 1));
      }
      char v453 = 11;
      strcpy((char *)v452, "program_url");
      uint64_t v37 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (SHIBYTE(v37->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v449, v37->__r_.__value_.__l.__data_, v37->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v449.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v449.__r_.__value_.__l.__data_ = v38;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v450 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v451 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      uint64_t v67 = v454;
      if (v454 && !atomic_fetch_add(&v454->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      uint64_t v68 = v451;
      if (v451 && !atomic_fetch_add(&v451->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
      std::string::size_type v69 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v69) {
        (*(void (**)(std::string::size_type))(*(void *)v69 + 8))(v69);
      }
      if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v449.__r_.__value_.__l.__data_);
      }
      if (v453 < 0) {
        operator delete(v452[0]);
      }
      uint64_t v70 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 64))(a2);
      (*(void (**)(std::__fs::filesystem::path *__return_ptr))(*(void *)v70 + 120))(&v514);
      char v447 = 13;
      strcpy((char *)v446, "function_name");
      if (SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&pn, v514.__pn_.__r_.__value_.__l.__data_, v514.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::string pn = v514.__pn_;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v444 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v445 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      unint64_t v120 = v448;
      if (v448 && !atomic_fetch_add(&v448->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
      uint64_t v121 = v445;
      if (v445 && !atomic_fetch_add(&v445->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
      std::string::size_type v122 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v122) {
        (*(void (**)(std::string::size_type))(*(void *)v122 + 8))(v122);
      }
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(pn.__r_.__value_.__l.__data_);
      }
      if (v447 < 0) {
        operator delete(v446[0]);
      }
      char v441 = 15;
      strcpy((char *)v440, "gpu_registry_id");
      char v437 = 1;
      LOWORD(v436) = 48;
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v438 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v439 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v442 && !atomic_fetch_add(&v442->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
        std::__shared_weak_count::__release_weak(v442);
      }
      std::string::size_type v123 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v123) {
        (*(void (**)(std::string::size_type))(*(void *)v123 + 8))(v123);
      }
      if (v437 < 0) {
        operator delete(v436);
      }
      if (v441 < 0) {
        operator delete(v440[0]);
      }
      Espresso::AOT::GetCallees(a5, (uint64_t)&__p);
      memset(&v510, 0, sizeof(v510));
      std::string::size_type v124 = __p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        uint64_t v125 = 0;
        do
        {
          unint64_t v127 = (long long *)(v124 + 16);
          if ((unint64_t)v125 < v510.__pn_.__r_.__value_.__r.__words[2])
          {
            if (*(char *)(v124 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(v125, *(const std::string::value_type **)(v124 + 16), *(void *)(v124 + 24));
            }
            else
            {
              long long v126 = *v127;
              v125->__r_.__value_.__r.__words[2] = *(void *)(v124 + 32);
              *(_OWORD *)&v125->__r_.__value_.__l.__data_ = v126;
            }
            ++v125;
          }
          else
          {
            uint64_t v125 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v510.__pn_.__r_.__value_.__l.__data_, (uint64_t)v127);
          }
          v510.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v125;
          std::string::size_type v124 = *(void *)v124;
        }
        while (v124);
        std::string::size_type v124 = v510.__pn_.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v125 = 0;
      }
      long long v128 = operator new(8uLL);
      v509.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
      *long long v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v125 - v124) >> 3);
      v509.__r_.__value_.__l.__size_ = (std::string::size_type)(v128 + 1);
      v509.__r_.__value_.__r.__words[2] = (std::string::size_type)(v128 + 1);
      MIL::IRTensorValueType::Make();
      if (v509.__r_.__value_.__r.__words[0])
      {
        v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
        operator delete(v509.__r_.__value_.__l.__data_);
      }
      char v434 = 12;
      strcpy((char *)v433, "callee_names");
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v431 = v509.__r_.__value_.__r.__words[0];
      if (v509.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v432 = 0;
      v509.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v435 && !atomic_fetch_add(&v435->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
        std::__shared_weak_count::__release_weak(v435);
      }
      std::string::size_type v163 = v509.__r_.__value_.__r.__words[0];
      v509.__r_.__value_.__r.__words[0] = 0;
      if (v163) {
        (*(void (**)(std::string::size_type))(*(void *)v163 + 8))(v163);
      }
      if (v434 < 0) {
        operator delete(v433[0]);
      }
      std::string::size_type v164 = v510.__pn_.__r_.__value_.__r.__words[0];
      if (v510.__pn_.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v165 = v510.__pn_.__r_.__value_.__l.__size_;
        uint8x8_t v166 = (void *)v510.__pn_.__r_.__value_.__r.__words[0];
        if (v510.__pn_.__r_.__value_.__l.__size_ != v510.__pn_.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v165 - 1) < 0) {
              operator delete(*(void **)(v165 - 24));
            }
            v165 -= 24;
          }
          while (v165 != v164);
          uint8x8_t v166 = (void *)v510.__pn_.__r_.__value_.__r.__words[0];
        }
        v510.__pn_.__r_.__value_.__l.__size_ = v164;
        operator delete(v166);
      }
      unint64_t v167 = (void **)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2]) {
        goto LABEL_792;
      }
      do
      {
        while (1)
        {
          uint64_t v168 = (void **)*v167;
          uint64_t v169 = (std::__shared_weak_count *)v167[6];
          if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
          if (*((char *)v167 + 39) < 0) {
            break;
          }
          operator delete(v167);
          unint64_t v167 = v168;
          if (!v168) {
            goto LABEL_792;
          }
        }
        operator delete(v167[2]);
        operator delete(v167);
        unint64_t v167 = v168;
      }
      while (v168);
      goto LABEL_792;
    case 6:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "eir_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v507.__r_.__value_.__r.__words[0])
      {
        v326 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v326, "Operator eir_inference is missing in E5RT opset.");
        __cxa_throw(v326, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v481 = *(_OWORD *)&v507.__r_.__value_.__l.__data_;
      if (v507.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v507.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make();
      long long v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v28;
      if (*((void *)&v481 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v481 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v481 + 1) + 16))(*((void *)&v481 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v481 + 1));
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&__p, "backend_requested");
      uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&__p, "allowed_backends");
      uint64_t v30 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      HIBYTE(v479[2]) = 16;
      strcpy((char *)v479, "model_assets_url");
      uint64_t v31 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v476, v31->__r_.__value_.__l.__data_, v31->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v476.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v476.__r_.__value_.__l.__data_ = v32;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v477 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v478 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      long long v113 = v480;
      if (v480 && !atomic_fetch_add(&v480->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
      uint64_t v114 = v478;
      if (v478 && !atomic_fetch_add(&v478->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
      std::string::size_type v115 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v115) {
        (*(void (**)(std::string::size_type))(*(void *)v115 + 8))(v115);
      }
      if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v476.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v479[2]) & 0x80000000) == 0)
        {
LABEL_281:
          if (!Attribute) {
            goto LABEL_517;
          }
          goto LABEL_285;
        }
      }
      else if ((SHIBYTE(v479[2]) & 0x80000000) == 0)
      {
        goto LABEL_281;
      }
      operator delete(v479[0]);
      if (!Attribute) {
        goto LABEL_517;
      }
LABEL_285:
      uint64_t v116 = (MIL::IRListValue *)MIL::IRValue::AsList(Attribute);
      uint64_t Values = (void *)MIL::IRListValue::GetValues(v116);
      (*(void (**)(void))(*(void *)*Values + 40))(*Values);
      MIL::IRValue::GetScalar<unsigned int>();
      HIBYTE(v474[2]) = 17;
      strcpy((char *)v474, "backend_requested");
      MIL::IRTensorValueType::MakeUInt32Value(Scalar);
      std::string::size_type v472 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v473 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v475 && !atomic_fetch_add(&v475->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
        std::__shared_weak_count::__release_weak(v475);
      }
      std::string::size_type v197 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v197) {
        (*(void (**)(std::string::size_type))(*(void *)v197 + 8))(v197);
      }
      if (SHIBYTE(v474[2]) < 0) {
        operator delete(v474[0]);
      }
LABEL_517:
      if (!v30) {
        goto LABEL_567;
      }
      unint64_t v198 = (MIL::IRListValue *)MIL::IRValue::AsList(v30);
      std::string::size_type v199 = (std::string::size_type *)MIL::IRListValue::GetValues(v198);
      uint64_t v201 = v200;
      MIL::IRListValueType::Make();
      memset(&__p, 0, sizeof(__p));
      if (v201)
      {
        long long v202 = &v199[2 * v201];
        while (1)
        {
          std::string::size_type v203 = *v199;
          v514.__pn_.__r_.__value_.__r.__words[0] = *v199;
          std::string::size_type v204 = v199[1];
          v514.__pn_.__r_.__value_.__l.__size_ = v204;
          if (v204) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v204 + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(std::string::size_type))(*(void *)v203 + 40))(v203);
          int v205 = MIL::IRValue::GetScalar<unsigned int>();
          if (!v205) {
            break;
          }
          if (v205 == 2)
          {
            MIL::IRTensorValueType::MakeUInt32Value(Scalar);
            v510.__pn_.__r_.__value_.__r.__words[0] = v509.__r_.__value_.__r.__words[0];
            if (v509.__r_.__value_.__r.__words[0]) {
              operator new();
            }
            *(_OWORD *)&v510.__pn_.__r_.__value_.__l.__data_ = 0uLL;
            v509.__r_.__value_.__r.__words[0] = 0;
            uint64_t v206 = (void *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2]) {
              goto LABEL_538;
            }
LABEL_537:
            *uint64_t v206 = v510.__pn_.__r_.__value_.__r.__words[0];
            v206[1] = 0;
            *(_OWORD *)&v510.__pn_.__r_.__value_.__l.__data_ = 0uLL;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v206 + 2);
            goto LABEL_541;
          }
          if (v205 == 1)
          {
            MIL::IRTensorValueType::MakeUInt32Value(Scalar);
            v510.__pn_.__r_.__value_.__r.__words[0] = v509.__r_.__value_.__r.__words[0];
            if (v509.__r_.__value_.__r.__words[0]) {
              operator new();
            }
            *(_OWORD *)&v510.__pn_.__r_.__value_.__l.__data_ = 0uLL;
            v509.__r_.__value_.__r.__words[0] = 0;
            uint64_t v206 = (void *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2]) {
              goto LABEL_537;
            }
LABEL_538:
            int v207 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(&__p.__r_.__value_.__l.__data_, (uint64_t)&v510);
            uint64_t v208 = (std::__shared_weak_count *)v510.__pn_.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v207;
            if (v510.__pn_.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(v510.__pn_.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
            }
LABEL_541:
            std::string::size_type v209 = v509.__r_.__value_.__r.__words[0];
            v509.__r_.__value_.__r.__words[0] = 0;
            if (v209) {
              (*(void (**)(std::string::size_type))(*(void *)v209 + 8))(v209);
            }
          }
          int v210 = (std::__shared_weak_count *)v514.__pn_.__r_.__value_.__l.__size_;
          if (v514.__pn_.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(v514.__pn_.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v210);
          }
          v199 += 2;
          if (v199 == v202) {
            goto LABEL_546;
          }
        }
        MIL::IRTensorValueType::MakeUInt32Value(Scalar);
        v510.__pn_.__r_.__value_.__r.__words[0] = v509.__r_.__value_.__r.__words[0];
        if (v509.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        *(_OWORD *)&v510.__pn_.__r_.__value_.__l.__data_ = 0uLL;
        v509.__r_.__value_.__r.__words[0] = 0;
        uint64_t v206 = (void *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_538;
        }
        goto LABEL_537;
      }
LABEL_546:
      *((unsigned char *)&v514.__pn_.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v514, "allowed_backends");
      MIL::IRListValueType::MakeValue();
      v509.__r_.__value_.__r.__words[0] = v504.__r_.__value_.__r.__words[0];
      if (v504.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      *(_OWORD *)&v509.__r_.__value_.__l.__data_ = 0uLL;
      v504.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      char v211 = (std::__shared_weak_count *)v510.__pn_.__r_.__value_.__l.__size_;
      if (v510.__pn_.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v510.__pn_.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
      unint64_t v212 = (std::__shared_weak_count *)v509.__r_.__value_.__l.__size_;
      if (v509.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v509.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
      int v213 = (MIL::IRListValue *)v504.__r_.__value_.__r.__words[0];
      v504.__r_.__value_.__r.__words[0] = 0;
      if (v213)
      {
        MIL::IRListValue::~IRListValue(v213);
        MEMORY[0x192FF16B0]();
      }
      if (SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v514.__pn_.__r_.__value_.__l.__data_);
      }
      std::string::size_type v214 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v215 = __p.__r_.__value_.__l.__size_;
        unint64_t v216 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            int v217 = *(std::__shared_weak_count **)(v215 - 8);
            if (v217 && !atomic_fetch_add(&v217->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
              std::__shared_weak_count::__release_weak(v217);
            }
            v215 -= 16;
          }
          while (v215 != v214);
          unint64_t v216 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v214;
        operator delete(v216);
      }
LABEL_567:
      v470[23] = 18;
      strcpy(v470, "configuration_name");
      v218 = (std::string *)*a6;
      unint64_t v219 = (long long *)a6[1];
      if (*a6 == (const std::string *)v219)
      {
LABEL_570:
        *((unsigned char *)&v467.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v467, "default");
      }
      else
      {
        while (!E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)a4, (unsigned __int8 *)v218))
        {
          if (++v218 == (std::string *)v219) {
            goto LABEL_570;
          }
        }
        if (SHIBYTE(v218->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v467, v218->__r_.__value_.__l.__data_, v218->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v220 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
          v467.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v467.__r_.__value_.__l.__data_ = v220;
        }
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v468 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v469 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v285 = v471;
      if (v471 && !atomic_fetch_add(&v471->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
      }
      v286 = v469;
      if (v469 && !atomic_fetch_add(&v469->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
        std::__shared_weak_count::__release_weak(v286);
      }
      std::string::size_type v287 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v287) {
        (*(void (**)(std::string::size_type))(*(void *)v287 + 8))(v287);
      }
      if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v467.__r_.__value_.__l.__data_);
      }
      if ((v470[23] & 0x80000000) == 0) {
        goto LABEL_830;
      }
      v281 = *(void **)v470;
      goto LABEL_829;
    case 7:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&__p, "jit_call");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v393)
      {
        v331 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v331, "Operator jit_call is missing in E5RT opset.");
        __cxa_throw(v331, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v391 = v393;
      v392 = v394;
      if (v394) {
        atomic_fetch_add_explicit(&v394->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make();
      long long v45 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v45;
      if (v392 && !atomic_fetch_add(&v392->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
        std::__shared_weak_count::__release_weak(v392);
      }
      uint64_t v46 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      MIL::IRTensorValueType::MakeScalar();
      *((unsigned char *)&v514.__pn_.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&v514, "program_url");
      if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v510.__pn_, v46->__r_.__value_.__l.__data_, v46->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v510.__pn_.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v510.__pn_.__r_.__value_.__l.__data_ = v47;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v511 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v512 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      unint64_t v102 = v513;
      if (v513 && !atomic_fetch_add(&v513->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
      long long v103 = v512;
      if (v512 && !atomic_fetch_add(&v512->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
      std::string::size_type v104 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v104) {
        (*(void (**)(std::string::size_type))(*(void *)v104 + 8))(v104);
      }
      if (SHIBYTE(v510.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v510.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v514.__pn_.__r_.__value_.__l.__data_);
      }
      uint64_t v105 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v23 + 64))(v23);
      (*(void (**)(std::string *__return_ptr))(*(void *)v105 + 120))(&__p);
      uint64_t Function = MIL::IRProgram::GetFunction();
      uint64_t v107 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
      long long v108 = (char ***)(*(uint64_t (**)(uint64_t))(*(void *)v107 + 56))(v107);
      uint64_t v109 = **v108;
      if ((*v108)[1] - v109 != 16)
      {
        v333 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v333, "Invalid jit call backend function. Expect only one op inside.");
        __cxa_throw(v333, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v110 = *(void *)v109;
      uint64_t v111 = (*(uint64_t (**)(void))(**(void **)v109 + 64))(*(void *)v109);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v111 + 128))(v111) & 1) == 0)
      {
        v334 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v334, "Invalid jit call backend function. Only one call op is expected.");
        __cxa_throw(v334, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v112 = (*(uint64_t (**)(uint64_t))(*(void *)v110 + 64))(v110);
      (*(void (**)(std::string *__return_ptr))(*(void *)v112 + 120))(&v509);
      *((unsigned char *)&v507.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&v507, "function_name");
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v504, v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
      }
      else {
        std::string v504 = v509;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v505 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v506 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      unint64_t v129 = v508;
      if (v508 && !atomic_fetch_add(&v508->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
      unint64_t v130 = v506;
      if (v506 && !atomic_fetch_add(&v506->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
      std::string::size_type v131 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v131) {
        (*(void (**)(std::string::size_type))(*(void *)v131 + 8))(v131);
      }
      if (SHIBYTE(v504.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v504.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v507.__r_.__value_.__l.__data_);
      }
      v502 = 0;
      v501 = 0;
      unint64_t v503 = 0;
      v499 = 0;
      v498 = 0;
      unint64_t v500 = 0;
      char v132 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v110 + 160))(v110);
      size_t v134 = v132 + 1;
      int64_t v133 = (void *)*v132;
      if ((void *)*v132 == v132 + 1) {
        goto LABEL_386;
      }
      while (1)
      {
        if (*((char *)v133 + 55) < 0) {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v133[4], v133[5]);
        }
        else {
          std::string __p = *(std::string *)(v133 + 4);
        }
        std::vector<std::shared_ptr<MIL::IRArgument>>::vector(&v496, (uint64_t)(v133 + 7));
        int64_t v135 = v502;
        if ((unint64_t)v502 >= v503)
        {
          long long v137 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v501, (uint64_t)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v502, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v136 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v502->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v135->__r_.__value_.__l.__data_ = v136;
          }
          long long v137 = v135 + 1;
        }
        v502 = v137;
        uint64_t v138 = MIL::IRArgument::GetName(*(MIL::IRArgument **)v496);
        long long v139 = v499;
        if ((unint64_t)v499 >= v500)
        {
          v499 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v498, v138);
          long long v141 = (char *)v496;
          if (!v496) {
            goto LABEL_366;
          }
        }
        else if (*(char *)(v138 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v499, *(const std::string::value_type **)v138, *(void *)(v138 + 8));
          v499 = v139 + 1;
          long long v141 = (char *)v496;
          if (!v496)
          {
LABEL_366:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_367;
            }
            goto LABEL_372;
          }
        }
        else
        {
          long long v140 = *(_OWORD *)v138;
          v499->__r_.__value_.__r.__words[2] = *(void *)(v138 + 16);
          *(_OWORD *)&v139->__r_.__value_.__l.__data_ = v140;
          v499 = v139 + 1;
          long long v141 = (char *)v496;
          if (!v496) {
            goto LABEL_366;
          }
        }
        long long v143 = v497;
        if (v497 == v141)
        {
          v497 = v141;
          operator delete(v141);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_367;
          }
        }
        else
        {
          do
          {
            std::string v145 = (std::__shared_weak_count *)*((void *)v143 - 1);
            if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
            v143 -= 16;
          }
          while (v143 != v141);
          v497 = v141;
          operator delete(v496);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_367:
            long long v142 = (void *)v133[1];
            if (v142) {
              goto LABEL_373;
            }
            goto LABEL_379;
          }
        }
LABEL_372:
        operator delete(__p.__r_.__value_.__l.__data_);
        long long v142 = (void *)v133[1];
        if (v142)
        {
          do
          {
LABEL_373:
            std::string v144 = v142;
            long long v142 = (void *)*v142;
          }
          while (v142);
          goto LABEL_353;
        }
        do
        {
LABEL_379:
          std::string v144 = (void *)v133[2];
          BOOL v146 = *v144 == (void)v133;
          int64_t v133 = v144;
        }
        while (!v146);
LABEL_353:
        int64_t v133 = v144;
        if (v144 == v134)
        {
LABEL_386:
          uint64_t v147 = MIL::IRProgram::GetFunction();
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v110 + 200))(&__p, v110);
          uint64_t v148 = (*(uint64_t (**)(uint64_t))(*(void *)v147 + 40))(v147);
          unsigned int v149 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v148 + 88))(v148);
          uint64_t v150 = 0;
          for (unint64_t j = 0; j < (*(uint64_t (**)(uint64_t))(*(void *)v110 + 192))(v110); ++j)
          {
            uint64_t v153 = __p.__r_.__value_.__r.__words[0] + v150;
            unint64_t v154 = v499;
            if ((unint64_t)v499 >= v500)
            {
              unint64_t v156 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v498, v153);
            }
            else
            {
              if (*(char *)(v153 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v499, *(const std::string::value_type **)(__p.__r_.__value_.__r.__words[0] + v150), *(void *)(__p.__r_.__value_.__r.__words[0] + v150 + 8));
              }
              else
              {
                long long v155 = *(_OWORD *)v153;
                v499->__r_.__value_.__r.__words[2] = *(void *)(v153 + 16);
                *(_OWORD *)&v154->__r_.__value_.__l.__data_ = v155;
              }
              unint64_t v156 = v154 + 1;
            }
            v499 = v156;
            uint64_t v157 = *v149 + v150;
            v158 = v502;
            if ((unint64_t)v502 >= v503)
            {
              uint64_t v152 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v501, v157);
            }
            else
            {
              if (*(char *)(v157 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v502, *(const std::string::value_type **)(*v149 + v150), *(void *)(*v149 + v150 + 8));
              }
              else
              {
                long long v159 = *(_OWORD *)v157;
                v502->__r_.__value_.__r.__words[2] = *(void *)(v157 + 16);
                *(_OWORD *)&v158->__r_.__value_.__l.__data_ = v159;
              }
              uint64_t v152 = v158 + 1;
            }
            v502 = v152;
            v150 += 24;
          }
          uint64_t v160 = v502;
          unint64_t v161 = v501;
          v162 = (char *)operator new(8uLL);
          v493[0] = (MIL::Attributes::BlobFileMutabilityInfo *)v162;
          *(void *)v162 = 0xAAAAAAAAAAAAAAABLL * (((char *)v160 - v161) >> 3);
          v494 = v162 + 8;
          v493[1] = (MIL::Attributes::BlobFileMutabilityInfo *)(v162 + 8);
          MIL::IRTensorValueType::Make();
          if (v493[0])
          {
            v493[1] = v493[0];
            operator delete(v493[0]);
          }
          HIBYTE(v494) = 11;
          strcpy((char *)v493, "param_names");
          MIL::IRTensorValueType::MakeStringValue();
          v490 = v487[0];
          if (v487[0]) {
            operator new();
          }
          v491 = 0;
          v487[0] = 0;
          MIL::Builder::OperationBuilder::SetAttribute();
          unint64_t v170 = v492;
          if (v492 && !atomic_fetch_add(&v492->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
          unint64_t v171 = v491;
          if (v491 && !atomic_fetch_add(&v491->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
          v172 = v487[0];
          v487[0] = 0;
          if (v172) {
            (*(void (**)(void *))(*(void *)v172 + 8))(v172);
          }
          if (SHIBYTE(v494) < 0) {
            operator delete(v493[0]);
          }
          char v488 = 9;
          strcpy((char *)v487, "arg_names");
          MIL::IRTensorValueType::MakeStringValue();
          uint64_t v485 = v484;
          if (v484) {
            operator new();
          }
          v486 = 0;
          uint64_t v484 = 0;
          MIL::Builder::OperationBuilder::SetAttribute();
          int v173 = v489;
          if (v489 && !atomic_fetch_add(&v489->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
          uint64_t v174 = v486;
          if (v486 && !atomic_fetch_add(&v486->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
          uint64_t v175 = v484;
          uint64_t v484 = 0;
          if (v175) {
            (*(void (**)(uint64_t))(*(void *)v175 + 8))(v175);
          }
          if (v488 < 0) {
            operator delete(v487[0]);
          }
          std::string::size_type v176 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0])
          {
            std::string::size_type v177 = __p.__r_.__value_.__l.__size_;
            v178 = (void *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              do
              {
                if (*(char *)(v177 - 1) < 0) {
                  operator delete(*(void **)(v177 - 24));
                }
                v177 -= 24;
              }
              while (v177 != v176);
              v178 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            __p.__r_.__value_.__l.__size_ = v176;
            operator delete(v178);
          }
          unint64_t v179 = (std::string *)v498;
          if (v498)
          {
            v180 = v499;
            v181 = v498;
            if (v499 != v498)
            {
              do
              {
                if (SHIBYTE(v180[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v180[-1].__r_.__value_.__l.__data_);
                }
                --v180;
              }
              while (v180 != v179);
              v181 = v498;
            }
            v499 = v179;
            operator delete(v181);
          }
          uint64_t v182 = (std::string *)v501;
          if (v501)
          {
            uint64_t v183 = v502;
            uint64_t v184 = v501;
            if (v502 != v501)
            {
              do
              {
                if (SHIBYTE(v183[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v183[-1].__r_.__value_.__l.__data_);
                }
                --v183;
              }
              while (v183 != v182);
              uint64_t v184 = v501;
            }
            v502 = v182;
            operator delete(v184);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v509.__r_.__value_.__l.__data_);
          }
          long long v185 = v394;
          if (!v394) {
            goto LABEL_833;
          }
LABEL_831:
          if (!atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
            std::__shared_weak_count::__release_weak(v185);
          }
          goto LABEL_833;
        }
      }
    case 8:
      char v48 = (MIL::IRTensorValueType *)v22;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "bnns_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v507.__r_.__value_.__r.__words[0])
      {
        v332 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v332, "Operator bnns_inference is missing in E5RT opset.");
        __cxa_throw(v332, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v390 = *(_OWORD *)&v507.__r_.__value_.__l.__data_;
      if (v507.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v507.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make();
      long long v49 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v49;
      if (*((void *)&v390 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v390 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v390 + 1) + 16))(*((void *)&v390 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v390 + 1));
      }
      uint64_t v50 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      memset(&v510, 0, sizeof(v510));
      char v51 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
      if (v51 >= 0) {
        uint64_t v52 = v50;
      }
      else {
        uint64_t v52 = (std::string *)v50->__r_.__value_.__r.__words[0];
      }
      if (v51 >= 0) {
        std::string::size_type v53 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v53 = v50->__r_.__value_.__l.__size_;
      }
      std::string::append[abi:ne180100]<char const*,0>(&v510.__pn_, v52, (std::string *)((char *)v52 + v53));
      std::__fs::filesystem::path::__string_view v54 = std::__fs::filesystem::path::__extension(&v510);
      if (v54.__size_ > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v54.__size_ >= 0x17)
      {
        std::basic_string_view<_CharT, _Traits>::size_type v56 = (v54.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54.__size_ | 7) != 0x17) {
          std::basic_string_view<_CharT, _Traits>::size_type v56 = v54.__size_ | 7;
        }
        std::basic_string_view<_CharT, _Traits>::size_type v57 = v56 + 1;
        std::basic_string_view<_CharT, _Traits>::size_type v55 = (std::string *)operator new(v56 + 1);
        __p.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        __p.__r_.__value_.__l.__size_ = v54.__size_;
      }
      else
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v54.__size_;
        std::basic_string_view<_CharT, _Traits>::size_type v55 = &__p;
        if (!v54.__size_) {
          goto LABEL_116;
        }
      }
      memmove(v55, v54.__data_, v54.__size_);
LABEL_116:
      v55->__r_.__value_.__s.__data_[v54.__size_] = 0;
      v514.__pn_ = __p;
      memset(&__p, 0, sizeof(__p));
      std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)".mil", (std::string *)"");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v58.__data_ = (const std::string_view::value_type *)&__p;
      }
      else {
        v58.__data_ = (const std::string_view::value_type *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v58.__size_ = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        v58.__size_ = __p.__r_.__value_.__l.__size_;
      }
      int v59 = std::__fs::filesystem::path::__compare(&v514, v58);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_124:
          if ((SHIBYTE(v510.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_125;
          }
          goto LABEL_294;
        }
      }
      else if ((SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_124;
      }
      operator delete(v514.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v510.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_125:
        if (v59) {
          goto LABEL_126;
        }
        goto LABEL_295;
      }
LABEL_294:
      operator delete(v510.__pn_.__r_.__value_.__l.__data_);
      if (v59)
      {
LABEL_126:
        v382[23] = 19;
        strcpy(v382, "bnns_ir_program_url");
        int v60 = *a3;
        if (a3[1] == *a3) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v61 = a5;
        if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v379, v60->__r_.__value_.__l.__data_, v60->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v62 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v379.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v379.__r_.__value_.__l.__data_ = v62;
        }
        MIL::IRTensorValueType::MakeStringValue();
        std::string::size_type v380 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        v381 = 0;
        __p.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        std::string v193 = v383;
        if (v383 && !atomic_fetch_add(&v383->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
        uint64_t v194 = v381;
        if (v381 && !atomic_fetch_add(&v381->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
        std::string::size_type v195 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v195) {
          (*(void (**)(std::string::size_type))(*(void *)v195 + 8))(v195);
        }
        if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v379.__r_.__value_.__l.__data_);
        }
        if (v382[23] < 0)
        {
          uint64_t v196 = v382;
LABEL_716:
          operator delete(*(void **)v196);
          goto LABEL_717;
        }
        goto LABEL_717;
      }
LABEL_295:
      char v388 = 15;
      strcpy(v387, "mil_program_url");
      unint64_t v118 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v61 = a5;
      if (SHIBYTE(v118->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v384, v118->__r_.__value_.__l.__data_, v118->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        v384.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v119;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v385 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v386 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v258 = v389;
      if (v389 && !atomic_fetch_add(&v389->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
        std::__shared_weak_count::__release_weak(v258);
      }
      v259 = v386;
      if (v386 && !atomic_fetch_add(&v386->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
      std::string::size_type v260 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v260) {
        (*(void (**)(std::string::size_type))(*(void *)v260 + 8))(v260);
      }
      if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v384.__r_.__value_.__l.__data_);
      }
      if (v388 < 0)
      {
        uint64_t v196 = v387;
        goto LABEL_716;
      }
LABEL_717:
      uint64_t v261 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 64))(a2);
      (*(void (**)(std::__fs::filesystem::path *__return_ptr))(*(void *)v261 + 120))(&v514);
      char v377 = 13;
      strcpy((char *)v376, "function_name");
      if (SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v373, v514.__pn_.__r_.__value_.__l.__data_, v514.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::string v373 = v514.__pn_;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v374 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v375 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v262 = v378;
      if (v378 && !atomic_fetch_add(&v378->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
        std::__shared_weak_count::__release_weak(v262);
      }
      v263 = v375;
      if (v375 && !atomic_fetch_add(&v375->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
      std::string::size_type v264 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v264) {
        (*(void (**)(std::string::size_type))(*(void *)v264 + 8))(v264);
      }
      if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v373.__r_.__value_.__l.__data_);
      }
      if (v377 < 0) {
        operator delete(v376[0]);
      }
      if (Espresso::AOT::FuncHasFlexibleInputsOrOutputs(v61, (uint64_t)&v514))
      {
        char v371 = 15;
        strcpy(v370, "allow_reshaping");
        MIL::IRTensorValueType::MakeBoolValue(v48);
        std::string::size_type v368 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        uint64_t v369 = 0;
        __p.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        if (v372 && !atomic_fetch_add(&v372->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
          std::__shared_weak_count::__release_weak(v372);
        }
        std::string::size_type v265 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v265) {
          (*(void (**)(std::string::size_type))(*(void *)v265 + 8))(v265);
        }
        if (v371 < 0)
        {
          v266 = v370;
LABEL_753:
          operator delete(*(void **)v266);
        }
      }
      else
      {
        char v366 = 15;
        strcpy(v365, "allow_reshaping");
        MIL::IRTensorValueType::MakeBoolValue(v48);
        std::string::size_type v363 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        uint64_t v364 = 0;
        __p.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        if (v367 && !atomic_fetch_add(&v367->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
          std::__shared_weak_count::__release_weak(v367);
        }
        std::string::size_type v267 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v267) {
          (*(void (**)(std::string::size_type))(*(void *)v267 + 8))(v267);
        }
        if (v366 < 0)
        {
          v266 = v365;
          goto LABEL_753;
        }
      }
      Espresso::AOT::GetCallees(v61, (uint64_t)&__p);
      memset(&v510, 0, sizeof(v510));
      std::string::size_type v268 = __p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v269 = 0;
        do
        {
          v271 = (long long *)(v268 + 16);
          if ((unint64_t)v269 < v510.__pn_.__r_.__value_.__r.__words[2])
          {
            if (*(char *)(v268 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(v269, *(const std::string::value_type **)(v268 + 16), *(void *)(v268 + 24));
            }
            else
            {
              long long v270 = *v271;
              v269->__r_.__value_.__r.__words[2] = *(void *)(v268 + 32);
              *(_OWORD *)&v269->__r_.__value_.__l.__data_ = v270;
            }
            ++v269;
          }
          else
          {
            v269 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v510.__pn_.__r_.__value_.__l.__data_, (uint64_t)v271);
          }
          v510.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v269;
          std::string::size_type v268 = *(void *)v268;
        }
        while (v268);
        std::string::size_type v268 = v510.__pn_.__r_.__value_.__r.__words[0];
      }
      else
      {
        v269 = 0;
      }
      v272 = operator new(8uLL);
      v509.__r_.__value_.__r.__words[0] = (std::string::size_type)v272;
      void *v272 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v269 - v268) >> 3);
      v509.__r_.__value_.__l.__size_ = (std::string::size_type)(v272 + 1);
      v509.__r_.__value_.__r.__words[2] = (std::string::size_type)(v272 + 1);
      MIL::IRTensorValueType::Make();
      if (v509.__r_.__value_.__r.__words[0])
      {
        v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
        operator delete(v509.__r_.__value_.__l.__data_);
      }
      char v361 = 12;
      strcpy((char *)v360, "callee_names");
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v358 = v509.__r_.__value_.__r.__words[0];
      if (v509.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v359 = 0;
      v509.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v362 && !atomic_fetch_add(&v362->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
        std::__shared_weak_count::__release_weak(v362);
      }
      std::string::size_type v273 = v509.__r_.__value_.__r.__words[0];
      v509.__r_.__value_.__r.__words[0] = 0;
      if (v273) {
        (*(void (**)(std::string::size_type))(*(void *)v273 + 8))(v273);
      }
      if (v361 < 0) {
        operator delete(v360[0]);
      }
      std::string::size_type v274 = v510.__pn_.__r_.__value_.__r.__words[0];
      if (v510.__pn_.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v275 = v510.__pn_.__r_.__value_.__l.__size_;
        v276 = (void *)v510.__pn_.__r_.__value_.__r.__words[0];
        if (v510.__pn_.__r_.__value_.__l.__size_ != v510.__pn_.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v275 - 1) < 0) {
              operator delete(*(void **)(v275 - 24));
            }
            v275 -= 24;
          }
          while (v275 != v274);
          v276 = (void *)v510.__pn_.__r_.__value_.__r.__words[0];
        }
        v510.__pn_.__r_.__value_.__l.__size_ = v274;
        operator delete(v276);
      }
      v277 = (void **)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        do
        {
          while (1)
          {
            v278 = (void **)*v277;
            v279 = (std::__shared_weak_count *)v277[6];
            if (v279 && !atomic_fetch_add(&v279->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
            if (*((char *)v277 + 39) < 0) {
              break;
            }
            operator delete(v277);
            v277 = v278;
            if (!v278) {
              goto LABEL_792;
            }
          }
          operator delete(v277[2]);
          operator delete(v277);
          v277 = v278;
        }
        while (v278);
      }
LABEL_792:
      v280 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v280) {
        operator delete(v280);
      }
      if (SHIBYTE(v514.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        v281 = (void *)v514.__pn_.__r_.__value_.__r.__words[0];
LABEL_829:
        operator delete(v281);
      }
LABEL_830:
      long long v185 = (std::__shared_weak_count *)v507.__r_.__value_.__l.__size_;
      if (!v507.__r_.__value_.__l.__size_) {
        goto LABEL_833;
      }
      goto LABEL_831;
    case 9:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "e5_minimal_cpu");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v514.__pn_.__r_.__value_.__r.__words[0])
      {
        v329 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v329, "Operator e5_minimal_cpu is missing in E5RT opset.");
        __cxa_throw(v329, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v357 = *(_OWORD *)&v514.__pn_.__r_.__value_.__l.__data_;
      if (v514.__pn_.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v514.__pn_.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make();
      long long v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v39;
      if (*((void *)&v357 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v357 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v357 + 1) + 16))(*((void *)&v357 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v357 + 1));
      }
      HIBYTE(v355[2]) = 16;
      strcpy((char *)v355, "model_assets_url");
      uint64_t v40 = *a3;
      if (a3[1] == *a3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v352, v40->__r_.__value_.__l.__data_, v40->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v352.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v352.__r_.__value_.__l.__data_ = v41;
      }
      MIL::IRTensorValueType::MakeStringValue();
      std::string::size_type v353 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v354 = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      uint64_t v71 = v356;
      if (v356 && !atomic_fetch_add(&v356->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      uint64_t v72 = v354;
      if (v354 && !atomic_fetch_add(&v354->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      std::string::size_type v73 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v73) {
        (*(void (**)(std::string::size_type))(*(void *)v73 + 8))(v73);
      }
      if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v352.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v355[2]) & 0x80000000) == 0) {
        goto LABEL_812;
      }
      uint64_t v66 = (void *)v355[0];
      goto LABEL_811;
    default:
      v318 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v509.__r_.__value_.__r.__words[0] = (std::string::size_type)Espresso::AOT::GetBackendName(v446);
      v509.__r_.__value_.__l.__size_ = v319;
      v320 = (std::string *)std::string::basic_string<std::string_view,0>(&v510, (uint64_t)&v509);
      v321 = std::string::insert(v320, 0, "Found unsupported backend: ");
      long long v322 = *(_OWORD *)&v321->__r_.__value_.__l.__data_;
      v514.__pn_.__r_.__value_.__r.__words[2] = v321->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v514.__pn_.__r_.__value_.__l.__data_ = v322;
      v321->__r_.__value_.__l.__size_ = 0;
      v321->__r_.__value_.__r.__words[2] = 0;
      v321->__r_.__value_.__r.__words[0] = 0;
      v323 = std::string::append(&v514.__pn_, ".");
      long long v324 = *(_OWORD *)&v323->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v323->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v324;
      v323->__r_.__value_.__l.__size_ = 0;
      v323->__r_.__value_.__r.__words[2] = 0;
      v323->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(v318, &__p);
      v318->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(v318, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
}

void sub_192501EB4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x8D7]) < 0)
  {
    operator delete((void *)STACK[0x8C0]);
    if (*(char *)(v4 - 121) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v4 - 144));
      if ((*(char *)(v4 - 185) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (*(char *)(v4 - 121) < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v4 - 185) & 0x80000000) == 0)
  {
LABEL_6:
    if (!v3)
    {
LABEL_11:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
      if (SLOBYTE(STACK[0x847]) < 0) {
        operator delete((void *)STACK[0x830]);
      }
      _Unwind_Resume(a1);
    }
LABEL_10:
    __cxa_free_exception(v2);
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(v4 - 208));
  if ((v3 & 1) == 0) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>(a1, a2, a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>(a1, a2, a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_192503494(_Unwind_Exception *a1)
{
  int v3 = *(char **)(v1 + 16);
  if (v3) {
    std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(v3);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

MIL::Attributes::BlobFileMutabilityInfo **std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo>::~unique_ptr[abi:ne180100](MIL::Attributes::BlobFileMutabilityInfo **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::LowerTransfer(Espresso::AOT::E5BackendToE5RTLoweringPass *this, MIL::MILContext *a2, const MIL::IROperation *a3)
{
  Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(this);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = OpsetName;
  uint64_t v7 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v65 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v65) = v5;
  uint64_t v8 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v8, v6, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  MIL::MILContext::GetOpset();
  uint64_t v11 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a3 + 56))(a3);
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0)
  {
    if (*(void *)(v11 + 8) != 19) {
      goto LABEL_131;
    }
    uint64_t v11 = *(void *)v11;
  }
  else if (v12 != 19)
  {
    goto LABEL_131;
  }
  if (*(void *)v11 != 0x736F695F4C4D3545
    || *(void *)(v11 + 8) != 0x736E6172742E3631
    || *(void *)(v11 + 11) != 0x726566736E617274)
  {
LABEL_131:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(const MIL::IROperation *))(*(void *)a3 + 56))(a3);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v68);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v15 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a3 + 176))(a3);
  *((unsigned char *)&v68.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v68, "values");
  if (MIL::IROperation::IsParameterSet())
  {
    char v63 = 6;
    strcpy((char *)&v61, "values");
    int v16 = (*(uint64_t (**)(const MIL::IROperation *, void **))(*(void *)a3 + 152))(a3, &v61);
    if ((v63 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_25;
      }
LABEL_28:
      operator delete(v68.__r_.__value_.__l.__data_);
      if (v16 != 1) {
        goto LABEL_132;
      }
      goto LABEL_29;
    }
    operator delete(v61);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_28;
    }
  }
  else
  {
    int v16 = 0;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_28;
    }
  }
LABEL_25:
  if (v16 != 1)
  {
LABEL_132:
    long long v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v44, "Only one input/output is supported for transfer.");
    v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v44, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
LABEL_29:
  if (*(void *)(v15 + 8) - *(void *)v15 != 16) {
    goto LABEL_132;
  }
  *((unsigned char *)&v68.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v68, "values");
  Parameteruint64_t Type = (E5Common::Utils *)MIL::IROperation::GetParameterType();
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (*(void *)(v15 + 8) == *(void *)v15) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t Type = (E5Common::Utils *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v15);
  if (!E5Common::Utils::IsTensor((uint64_t)ParameterType)
    && !E5Common::Utils::IsTensorBuffer(ParameterType, v19)
    || !E5Common::Utils::IsTensor((uint64_t)Type) && !E5Common::Utils::IsTensorBuffer(Type, v20))
  {
    long long v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v45, "Unexpected input/output types for transfer op.");
    v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v45, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  *((unsigned char *)&v68.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v68, "cast");
  MIL::IROpset::TryGetOperatorSharedPtr();
  MIL::Builder::OperationBuilder::Make();
  if (!v60 || atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
  std::__shared_weak_count::__release_weak(v60);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
LABEL_40:
  }
    operator delete(v68.__r_.__value_.__l.__data_);
LABEL_41:
  *((unsigned char *)&v68.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v68, "values");
  uint64_t v21 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a3 + 120))(a3, &v68, 0);
  uint64_t v22 = v21;
  if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v21) {
      goto LABEL_43;
    }
LABEL_46:
    *((unsigned char *)&v68.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v68, "values");
    (*(void (**)(void **__return_ptr, const MIL::IROperation *, std::string *, void))(*(void *)a3 + 136))(&v61, a3, &v68, 0);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    char v54 = 1;
    LOWORD(v53) = 120;
    char v51 = v61;
    uint64_t v52 = v62;
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::OperationBuilder::AddInput();
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      uint64_t v24 = v52;
      if (!v52) {
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v24 = v52;
      if (!v52) {
        goto LABEL_54;
      }
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if ((v54 & 0x80000000) == 0)
      {
LABEL_55:
        long long v25 = v62;
        if (!v62) {
          goto LABEL_76;
        }
        goto LABEL_75;
      }
LABEL_74:
      operator delete(v53);
      long long v25 = v62;
      if (!v62) {
        goto LABEL_76;
      }
LABEL_75:
      if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        long long v27 = *(MIL::IRNamedValueType ***)v15;
        if (*(void *)(v15 + 8) != *(void *)v15) {
          goto LABEL_77;
        }
LABEL_70:
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
LABEL_76:
      long long v27 = *(MIL::IRNamedValueType ***)v15;
      if (*(void *)(v15 + 8) != *(void *)v15) {
        goto LABEL_77;
      }
      goto LABEL_70;
    }
LABEL_54:
    if ((v54 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_74;
  }
  operator delete(v68.__r_.__value_.__l.__data_);
  if (!v22) {
    goto LABEL_46;
  }
LABEL_43:
  char v58 = 1;
  LOWORD(__p) = 120;
  if (*(char *)(v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
  }
  else
  {
    long long v23 = *(_OWORD *)v22;
    v56.__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v23;
  }
  MIL::Builder::OperationBuilder::AddInput();
  uint64_t v26 = v59;
  if (!v59 || atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_63;
    }
LABEL_68:
    operator delete(v56.__r_.__value_.__l.__data_);
    if (v58 < 0) {
      goto LABEL_69;
    }
    goto LABEL_76;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_68;
  }
LABEL_63:
  if ((v58 & 0x80000000) == 0) {
    goto LABEL_76;
  }
LABEL_69:
  operator delete(__p);
  long long v27 = *(MIL::IRNamedValueType ***)v15;
  if (*(void *)(v15 + 8) == *(void *)v15) {
    goto LABEL_70;
  }
LABEL_77:
  uint64_t Name = MIL::IRNamedValueType::GetName(*v27);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)Name, *(void *)(Name + 8));
  }
  else
  {
    long long v29 = *(_OWORD *)Name;
    v49.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
  }
  MIL::Builder::OperationBuilder::AddOutput();
  uint64_t v30 = v50;
  if (!v50 || atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
LABEL_83:
  }
    operator delete(v49.__r_.__value_.__l.__data_);
LABEL_84:
  uint64_t Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  HIBYTE(v47[2]) = 16;
  strcpy((char *)v47, "execution_device");
  MIL::IRTensorValueType::MakeUInt32Value(Scalar);
  if (v68.__r_.__value_.__r.__words[0]) {
    operator new();
  }
  v68.__r_.__value_.__r.__words[0] = 0;
  MIL::Builder::OperationBuilder::SetAttribute();
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  std::string::size_type v32 = v68.__r_.__value_.__r.__words[0];
  v68.__r_.__value_.__r.__words[0] = 0;
  if (v32) {
    (*(void (**)(std::string::size_type))(*(void *)v32 + 8))(v32);
  }
  if (SHIBYTE(v47[2]) < 0) {
    operator delete(v47[0]);
  }
  if (E5Common::Utils::IsTensor((uint64_t)Type) || E5Common::Utils::IsTensorBuffer(Type, v33))
  {
    uint64_t v61 = 0;
    long long v62 = 0;
    if (E5Common::Utils::IsTensor((uint64_t)Type))
    {
      uint64_t v35 = MIL::IRValueType::AsTensorType(Type);
      *((unsigned char *)&v68.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v68, "alignments");
      (*(void (**)(void **__return_ptr))(*(void *)v35 + 72))(&v69);
    }
    else
    {
      if (!E5Common::Utils::IsTensorBuffer(Type, v34)) {
        goto LABEL_113;
      }
      long long v36 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(Type);
      MIL::IRMemoryLayoutValueType::AsTensorBufferType(v36);
      *((unsigned char *)&v68.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v68, "alignments");
      MIL::IRTensorBufferValueType::TryGetAttributeSharedPtr();
    }
    long long v38 = v69;
    uint64_t v37 = v70;
    std::string::size_type v69 = 0;
    uint64_t v70 = 0;
    uint64_t v61 = v38;
    long long v62 = v37;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v68.__r_.__value_.__l.__data_);
      if (!v38) {
        goto LABEL_113;
      }
    }
    else if (!v38)
    {
      goto LABEL_113;
    }
    *((unsigned char *)&v68.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&v68, "output_alignments");
    uint64_t v66 = v38;
    uint64_t v67 = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::OperationBuilder::SetAttribute();
    long long v39 = v70;
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      uint64_t v40 = v67;
      if (v67)
      {
LABEL_110:
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
          if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_113;
          }
          goto LABEL_112;
        }
      }
    }
    else
    {
      uint64_t v40 = v67;
      if (v67) {
        goto LABEL_110;
      }
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
LABEL_112:
    }
      operator delete(v68.__r_.__value_.__l.__data_);
LABEL_113:
    long long v41 = v62;
    if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  long long v42 = *(std::__shared_weak_count **)(MIL::IRObject::GetLocationPtr(a3) + 8);
  uint64_t v46 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::SetLocation();
  if (!v46 || atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v65) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_121;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  if (SHIBYTE(v65) < 0) {
LABEL_121:
  }
    operator delete(__dst[0]);
}

void sub_1925041F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v52 - 176);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v51);
  if (*(char *)(v52 - 129) < 0) {
    operator delete(*(void **)(v52 - 152));
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::E5BackendToE5RTLoweringPass::Run@<X0>(uint64_t a1@<X0>, MIL::IRObject *a2@<X1>, unsigned __int8 **a3@<X2>, void *a4@<X8>)
{
  kdebug_trace();
  uint64_t v7 = (E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *)(*(void *(**)(MIL::MILContext **__return_ptr, MIL::IRObject *))(*(void *)a2 + 48))(&v368, a2);
  Opsetuint64_t Name = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(v7);
  std::string::size_type v10 = v9;
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = OpsetName;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9) {
LABEL_8:
  }
    Opsetuint64_t Name = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)memmove(p_dst, v11, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  uint64_t v15 = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(OpsetName);
  size_t v17 = v16;
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = v15;
  if (v16 >= 0x17)
  {
    uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v20 = v16 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v19 = (void **)operator new(v20 + 1);
    size_t v365 = v17;
    int64_t v366 = v21 | 0x8000000000000000;
    uint64_t v364 = v19;
    goto LABEL_16;
  }
  HIBYTE(v366) = v16;
  uint64_t v19 = (void **)&v364;
  if (v16) {
LABEL_16:
  }
    memmove(v19, v18, v17);
  *((unsigned char *)v19 + v17) = 0;
  (*(void (**)(std::string *__return_ptr, MIL::IRObject *))(*(void *)a2 + 48))(&__s, a2);
  v296 = a4;
  memset(v313, 0, sizeof(v313));
  LODWORD(v314) = 1065353216;
  uint64_t v22 = *a3;
  v302 = (uint64_t *)a3;
  v306 = a3[1];
  uint64_t v310 = (uint64_t)a2;
  if (*a3 != v306)
  {
    int v311 = 0;
    int v308 = 0;
    int v23 = 0;
    int v304 = 0;
    while (1)
    {
      uint64_t Function = MIL::IRProgram::GetFunction();
      uint64_t v26 = (*(uint64_t (**)(uint64_t, void ***))(*(void *)Function + 64))(Function, &v364);
      if (!v26)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v278 = std::string::append(&v370, " doesn't have the required specialization: ");
        long long v279 = *(_OWORD *)&v278->__r_.__value_.__l.__data_;
        v371.__r_.__value_.__r.__words[2] = v278->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v279;
        v278->__r_.__value_.__l.__size_ = 0;
        v278->__r_.__value_.__r.__words[2] = 0;
        v278->__r_.__value_.__r.__words[0] = 0;
        if (v366 >= 0) {
          v280 = (const std::string::value_type *)&v364;
        }
        else {
          v280 = (const std::string::value_type *)v364;
        }
        if (v366 >= 0) {
          std::string::size_type v281 = HIBYTE(v366);
        }
        else {
          std::string::size_type v281 = v365;
        }
        v282 = std::string::append(&v371, v280, v281);
        long long v283 = *(_OWORD *)&v282->__r_.__value_.__l.__data_;
        __sz.__r_.__value_.__r.__words[2] = v282->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v283;
        v282->__r_.__value_.__l.__size_ = 0;
        v282->__r_.__value_.__r.__words[2] = 0;
        v282->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v284 = std::string::append(&__sz, ".");
        long long v285 = *(_OWORD *)&v284->__r_.__value_.__l.__data_;
        *(void *)&long long v350 = *((void *)&v284->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v285;
        v284->__r_.__value_.__l.__size_ = 0;
        v284->__r_.__value_.__r.__words[2] = 0;
        v284->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, (const std::string *)__p);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      __p[1] = 0;
      __p[0] = 0;
      *(void *)&long long v350 = 0;
      long long v27 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 56))(v26);
      long long v29 = **v27;
      long long v28 = (*v27)[1];
      while (v29 != v28)
      {
        uint64_t v30 = *v29;
        uint64_t v31 = (*(uint64_t (**)(void))(*(void *)*v29 + 64))(*v29);
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v31 + 128))(v31)) {
          goto LABEL_24;
        }
        *((unsigned char *)&v371.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v371, "backend");
        MIL::IRObject::GetAttribute();
        MIL::IRValue::GetScalar<std::string>();
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_sz = &__sz;
        }
        else {
          p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
        }
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __sz.__r_.__value_.__l.__size_;
        }
        int BackendIdentifier = Espresso::AOT::GetBackendIdentifier((uint64_t)p_sz, size);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__sz.__r_.__value_.__l.__data_);
          if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_38:
            operator delete(v371.__r_.__value_.__l.__data_);
            if (BackendIdentifier != 2) {
              goto LABEL_24;
            }
            goto LABEL_39;
          }
        }
        else if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_38;
        }
        if (BackendIdentifier != 2) {
          goto LABEL_24;
        }
LABEL_39:
        uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 64))(v30);
        (*(void (**)(std::string *__return_ptr))(*(void *)v35 + 120))(&__sz);
        long long v36 = __p[1];
        if (__p[1] >= (void *)v350)
        {
          long long v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)__p, (uint64_t)&__sz);
        }
        else
        {
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p[1], __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v37 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            *((void *)__p[1] + 2) = *((void *)&__sz.__r_.__value_.__l + 2);
            *long long v36 = v37;
          }
          long long v38 = (std::string *)((char *)v36 + 24);
        }
        __p[1] = v38;
        uint64_t v39 = MIL::IRProgram::GetFunction();
        if (Espresso::AOT::HasFlexibleShape())
        {
          if (Espresso::AOT::HasFlexibleShapeWithEnumeratedConfig(v39))
          {
            int v308 = 1;
          }
          else if ((v23 & 1) != 0 && Espresso::AOT::HasFlexibleShapeWithRangeConfig(v39))
          {
            int v304 = 1;
            int v23 = 1;
          }
          else
          {
            v23 |= Espresso::AOT::HasFlexibleShapeWithRangeConfig(v39);
          }
        }
        else
        {
          int v311 = 1;
        }
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__sz.__r_.__value_.__l.__data_);
        }
LABEL_24:
        v29 += 2;
      }
      uint64_t v40 = (void **)__p[0];
      if (__p[0] == __p[1])
      {
        a2 = (MIL::IRObject *)v310;
        if (!__p[0]) {
          goto LABEL_21;
        }
LABEL_61:
        long long v42 = (void **)__p[1];
        uint64_t v24 = v40;
        if (__p[1] != v40)
        {
          do
          {
            if (*((char *)v42 - 1) < 0) {
              operator delete(*(v42 - 3));
            }
            v42 -= 3;
          }
          while (v42 != v40);
          uint64_t v24 = (void **)__p[0];
        }
        __p[1] = v40;
        operator delete(v24);
        goto LABEL_21;
      }
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      a2 = (MIL::IRObject *)v310;
      long long v41 = (void **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v313, v22, (uint64_t)&std::piecewise_construct, (long long **)&__sz)+ 40);
      if (v41 != __p) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v41, (std::string *)__p[0], (std::string *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
      }
      uint64_t v40 = (void **)__p[0];
      if (__p[0]) {
        goto LABEL_61;
      }
LABEL_21:
      v22 += 24;
      if (v22 == v306) {
        goto LABEL_67;
      }
    }
  }
  int v304 = 0;
  int v23 = 0;
  int v308 = 0;
  int v311 = 0;
LABEL_67:
  std::unordered_map<std::string,std::vector<std::string>>::unordered_map((uint64_t)v360, (uint64_t)v313);
  char v362 = 1;
  BOOL v363 = ((v304 | v308 & v311 | v23 & v308 | v23 & v311) & 1) == 0;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v313);
  uint64_t v43 = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
  if (__s.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__s.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  long long v357 = v368;
  std::string::size_type v358 = v369;
  if (v369) {
    atomic_fetch_add_explicit(&v369->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::Make();
  long long v44 = v358;
  if (v358 && !atomic_fetch_add(&v358->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
  uint64_t v46 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v355 = *LocationPtr;
  v356 = v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::SetLocation();
  long long v47 = v356;
  if (v356 && !atomic_fetch_add(&v356->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  for (uint64_t i = *(uint64_t **)(MIL::IRObject::GetAttributes(a2) + 16); i; uint64_t i = (uint64_t *)*i)
  {
    while (1)
    {
      if (*((char *)i + 39) < 0) {
        std::string::__init_copy_ctor_external(&v354, (const std::string::value_type *)i[2], i[3]);
      }
      else {
        std::string v354 = *(std::string *)(i + 2);
      }
      std::string v49 = (std::__shared_weak_count *)i[6];
      uint64_t v352 = i[5];
      std::string::size_type v353 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::ProgramBuilder::SetAttribute();
      uint64_t v50 = v353;
      if (v353 && !atomic_fetch_add(&v353->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
      if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      uint64_t i = (uint64_t *)*i;
      if (!i) {
        goto LABEL_93;
      }
    }
    operator delete(v354.__r_.__value_.__l.__data_);
  }
LABEL_93:
  *(_OWORD *)std::string __p = 0u;
  long long v350 = 0u;
  int v351 = 1065353216;
  __sz.__r_.__value_.__s.__data_[0] = 0;
  char v348 = 0;
  uint64_t v51 = *v302;
  uint64_t v297 = v302[1];
  if (*v302 != v297)
  {
    v301 = (Espresso::AOT::AOTCompilerOptions *)(a1 + 8);
    while (1)
    {
      uint64_t v52 = (MIL::IRObject *)MIL::IRProgram::GetFunction();
      uint64_t v53 = (*(uint64_t (**)(MIL::IRObject *, void ***))(*(void *)v52 + 64))(v52, &v364);
      if (!v53)
      {
        v286 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::string::size_type v287 = std::string::append(&__s, " doesn't have the required specialization: ");
        long long v288 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
        v370.__r_.__value_.__r.__words[2] = v287->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v370.__r_.__value_.__l.__data_ = v288;
        v287->__r_.__value_.__l.__size_ = 0;
        v287->__r_.__value_.__r.__words[2] = 0;
        v287->__r_.__value_.__r.__words[0] = 0;
        if (v366 >= 0) {
          v289 = (const std::string::value_type *)&v364;
        }
        else {
          v289 = (const std::string::value_type *)v364;
        }
        if (v366 >= 0) {
          std::string::size_type v290 = HIBYTE(v366);
        }
        else {
          std::string::size_type v290 = v365;
        }
        v291 = std::string::append(&v370, v289, v290);
        long long v292 = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
        v371.__r_.__value_.__r.__words[2] = v291->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v292;
        v291->__r_.__value_.__l.__size_ = 0;
        v291->__r_.__value_.__r.__words[2] = 0;
        v291->__r_.__value_.__r.__words[0] = 0;
        uint64_t v293 = std::string::append(&v371, ".");
        long long v294 = *(_OWORD *)&v293->__r_.__value_.__l.__data_;
        *(void *)&v313[16] = *((void *)&v293->__r_.__value_.__l + 2);
        *(_OWORD *)v313 = v294;
        v293->__r_.__value_.__l.__size_ = 0;
        v293->__r_.__value_.__r.__words[2] = 0;
        v293->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v286, (const std::string *)v313);
        v286->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v286, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      v298 = v52;
      MIL::Builder::ProgramBuilder::AddFunction();
      char v54 = (uint64_t *)MIL::IRObject::GetLocationPtr(v52);
      std::basic_string_view<_CharT, _Traits>::size_type v55 = (std::__shared_weak_count *)v54[1];
      uint64_t v343 = *v54;
      v344 = v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::FunctionBuilder::SetLocation();
      std::string v56 = v344;
      if (v344 && !atomic_fetch_add(&v344->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      std::basic_string_view<_CharT, _Traits>::size_type v57 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v298 + 128))(v298);
      char v58 = v57 + 1;
      int v59 = (void *)*v57;
      if ((void *)*v57 != v57 + 1) {
        break;
      }
LABEL_103:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v340, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v340 = __dst;
      }
      MIL::Builder::FunctionBuilder::AddBlock();
      if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v340.__r_.__value_.__l.__data_);
      }
      MIL::Builder::FunctionBuilder::SetSpecialization();
      long long v62 = (MIL::IRObject *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v298 + 40))(v298);
      char v63 = (uint64_t *)MIL::IRObject::GetLocationPtr(v62);
      uint64_t v64 = (std::__shared_weak_count *)v63[1];
      uint64_t v338 = *v63;
      v339 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::SetLocation();
      unint64_t v65 = v339;
      if (v339 && !atomic_fetch_add(&v339->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      *(_OWORD *)&v370.__r_.__value_.__r.__words[1] = 0uLL;
      v370.__r_.__value_.__r.__words[0] = (std::string::size_type)&v370.__r_.__value_.__l.__size_;
      uint64_t v66 = (MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(void *)v53 + 56))(v53);
      uint64_t v67 = **v66;
      v309 = (*v66)[1];
      if (v67 == v309)
      {
        int v68 = 0;
        goto LABEL_489;
      }
      int v68 = 0;
      uint64_t v307 = v51;
      uint64_t v300 = v53;
      while (1)
      {
LABEL_129:
        while (1)
        {
          v312 = *v67;
          uint64_t v69 = (*(uint64_t (**)(void))(*(void *)*v67 + 64))();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v69 + 128))(v69)) {
            break;
          }
          uint64_t v80 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)v312 + 64))(v312);
          uint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 16))(v80);
          int v82 = *(char *)(v81 + 23);
          if (v82 < 0)
          {
            if (*(void *)(v81 + 8) != 19) {
              goto LABEL_608;
            }
            uint64_t v81 = *(void *)v81;
          }
          else if (v82 != 19)
          {
            goto LABEL_608;
          }
          BOOL v98 = *(void *)v81 == 0x736F695F4C4D3545 && *(void *)(v81 + 8) == 0x736E6172742E3631;
          if (!v98 || *(void *)(v81 + 11) != 0x726566736E617274)
          {
LABEL_608:
            v271 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            (*(void (**)(MIL::IROperation *))(*(void *)v312 + 56))(v312);
            std::operator+<char>();
            v272 = std::string::append(&v371, ".");
            long long v273 = *(_OWORD *)&v272->__r_.__value_.__l.__data_;
            *(void *)&v313[16] = *((void *)&v272->__r_.__value_.__l + 2);
            *(_OWORD *)v313 = v273;
            v272->__r_.__value_.__l.__size_ = 0;
            v272->__r_.__value_.__r.__words[2] = 0;
            v272->__r_.__value_.__r.__words[0] = 0;
            std::logic_error::logic_error(v271, (const std::string *)v313);
            v271->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            __cxa_throw(v271, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
          }
          Espresso::AOT::E5BackendToE5RTLoweringPass::LowerTransfer((Espresso::AOT::E5BackendToE5RTLoweringPass *)v81, v368, v312);
          long long v328 = *(_OWORD *)v313;
          if (*(void *)&v313[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v313[8] + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v326 = 0;
          v327 = 0;
          MIL::Builder::BlockBuilder::AddOperation();
          unint64_t v100 = v67;
          uint64_t v101 = v327;
          if (v327 && !atomic_fetch_add(&v327->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
            unint64_t v102 = (std::__shared_weak_count *)*((void *)&v328 + 1);
            if (*((void *)&v328 + 1))
            {
LABEL_189:
              if (!atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
          }
          else
          {
            unint64_t v102 = (std::__shared_weak_count *)*((void *)&v328 + 1);
            if (*((void *)&v328 + 1)) {
              goto LABEL_189;
            }
          }
          uint64_t v110 = *(std::__shared_weak_count **)&v313[8];
          if (*(void *)&v313[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v313[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
          uint64_t v67 = v100 + 2;
          if (v100 + 2 == v309) {
            goto LABEL_489;
          }
        }
        unsigned int v337 = 0;
        *((unsigned char *)&v371.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v371, "backend");
        MIL::IRObject::GetAttribute();
        MIL::IRValue::GetScalar<std::string>();
        v303 = v67;
        uint64_t v70 = v313[23] >= 0 ? v313 : *(unsigned char **)v313;
        uint64_t v71 = v313[23] >= 0 ? v313[23] : *(void *)&v313[8];
        unsigned int v72 = Espresso::AOT::GetBackendIdentifier((uint64_t)v70, v71);
        if ((v313[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v313);
          if ((SHIBYTE(v371.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_138;
          }
        }
        else if ((SHIBYTE(v371.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_138;
        }
        operator delete(v371.__r_.__value_.__l.__data_);
LABEL_138:
        unsigned int v337 = v72;
        uint64_t v73 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)v312 + 64))(v312);
        (*(void (**)(std::string *__return_ptr))(*(void *)v73 + 120))(&__s);
        int v305 = v68;
        uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(v301);
        int v75 = (void *)Output;
        int v76 = *(char *)(Output + 23);
        if (v76 >= 0) {
          size_t v77 = *(unsigned __int8 *)(Output + 23);
        }
        else {
          size_t v77 = *(void *)(Output + 8);
        }
        unint64_t v78 = v77 + 1;
        if (v77 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v78 >= 0x17)
        {
          uint64_t v83 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v78 | 7) != 0x17) {
            uint64_t v83 = v78 | 7;
          }
          uint64_t v84 = v83 + 1;
          long long v79 = operator new(v83 + 1);
          *(void *)&v313[8] = v77 + 1;
          *(void *)&v313[16] = v84 | 0x8000000000000000;
          *(void *)v313 = v79;
        }
        else
        {
          memset(v313, 0, 24);
          long long v79 = v313;
          v313[23] = v77 + 1;
          if (!v77) {
            goto LABEL_155;
          }
        }
        uint64_t v85 = v76 >= 0 ? v75 : (void *)*v75;
        memmove(v79, v85, v77);
LABEL_155:
        *(_WORD *)&v79[v77] = 47;
        int v86 = *(char *)(v307 + 23);
        if (v86 >= 0) {
          uint64_t v87 = (const std::string::value_type *)v307;
        }
        else {
          uint64_t v87 = *(const std::string::value_type **)v307;
        }
        if (v86 >= 0) {
          std::string::size_type v88 = *(unsigned __int8 *)(v307 + 23);
        }
        else {
          std::string::size_type v88 = *(void *)(v307 + 8);
        }
        long long v89 = std::string::append((std::string *)v313, v87, v88);
        std::string v336 = *v89;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        if ((v313[23] & 0x80000000) != 0) {
          operator delete(*(void **)v313);
        }
        Backenduint64_t Name = Espresso::AOT::GetBackendName(v337);
        size_t v92 = v91;
        if (v91 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        int v93 = BackendName;
        if (v91 >= 0x17)
        {
          uint64_t v95 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v91 | 7) != 0x17) {
            uint64_t v95 = v91 | 7;
          }
          uint64_t v96 = v95 + 1;
          size_t v94 = operator new(v95 + 1);
          *(void *)&v313[8] = v92;
          *(void *)&v313[16] = v96 | 0x8000000000000000;
          *(void *)v313 = v94;
LABEL_170:
          memmove(v94, v93, v92);
          goto LABEL_171;
        }
        v313[23] = v91;
        size_t v94 = v313;
        if (v91) {
          goto LABEL_170;
        }
LABEL_171:
        v94[v92] = 0;
        Espresso::EspressoReporterUtilities::append_compute_unit_set(&v337, (const void **)v313, (uint64_t **)&v370);
        if ((v313[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v313);
          v334[0] = 0;
          v334[1] = 0;
          uint64_t v335 = 0;
          unint64_t v97 = (unint64_t)__p[1];
          if (!__p[1]) {
            goto LABEL_289;
          }
        }
        else
        {
          v334[0] = 0;
          v334[1] = 0;
          uint64_t v335 = 0;
          unint64_t v97 = (unint64_t)__p[1];
          if (!__p[1]) {
            goto LABEL_289;
          }
        }
        uint8x8_t v103 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
        v103.i16[0] = vaddlv_u8(v103);
        if (v103.u32[0] > 1uLL)
        {
          unint64_t v104 = v337;
          if (v97 <= v337) {
            unint64_t v104 = v337 % v97;
          }
        }
        else
        {
          unint64_t v104 = (v97 - 1) & v337;
        }
        uint64_t v105 = (uint64_t **)*((void *)__p[0] + v104);
        if (!v105 || (std::string::size_type v106 = *v105) == 0)
        {
LABEL_289:
          *(_OWORD *)&v371.__r_.__value_.__r.__words[1] = 0uLL;
          v371.__r_.__value_.__r.__words[0] = (std::string::size_type)&v371.__r_.__value_.__l.__size_;
          if (v337 == 2 && v363 && v362 != 0)
          {
            uint64_t v152 = v361;
            if (!v361)
            {
              BOOL v146 = 0;
              memset(v313, 0, 24);
              std::string::size_type v147 = v371.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v371.__r_.__value_.__l.__data_ == &v371.__r_.__value_.__r.__words[1]) {
                goto LABEL_424;
              }
              goto LABEL_426;
            }
            do
            {
              if (*((char *)v152 + 39) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v313, (const std::string::value_type *)v152[2], v152[3]);
              }
              else
              {
                *(_OWORD *)v313 = *((_OWORD *)v152 + 1);
                *(void *)&v313[16] = v152[4];
              }
              v314 = 0;
              v315 = 0;
              *(void *)&v313[24] = 0;
              uint64_t v153 = v152[5];
              uint64_t v154 = v152[6];
              v332[0] = (MIL::Attributes::FlexibleShapeInfo *)&v313[24];
              LOBYTE(v332[1]) = 0;
              int64_t v155 = v154 - v153;
              if (v154 == v153)
              {
                v332[1] = 0;
                unint64_t v333 = 0;
                v332[0] = (MIL::Attributes::FlexibleShapeInfo *)&v332[1];
                goto LABEL_412;
              }
              unint64_t v156 = 0xAAAAAAAAAAAAAAABLL * (v155 >> 3);
              if (v156 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v157 = (char *)operator new(v155);
              uint64_t v158 = 0;
              *(void *)&v313[24] = v157;
              v314 = v157;
              v315 = &v157[24 * v156];
              do
              {
                uint64_t v160 = &v157[v158];
                unint64_t v161 = (long long *)(v153 + v158);
                if (*(char *)(v153 + v158 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v157[v158], *(const std::string::value_type **)v161, *((void *)v161 + 1));
                }
                else
                {
                  long long v159 = *v161;
                  *((void *)v160 + 2) = *((void *)v161 + 2);
                  *(_OWORD *)uint64_t v160 = v159;
                }
                v158 += 24;
              }
              while (v153 + v158 != v154);
              v162 = &v157[v158];
              std::string::size_type v163 = *(long long **)&v313[24];
              v314 = v162;
              v332[1] = 0;
              unint64_t v333 = 0;
              v332[0] = (MIL::Attributes::FlexibleShapeInfo *)&v332[1];
              if (*(char **)&v313[24] != v162)
              {
LABEL_336:
                std::string::size_type v164 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>((uint64_t **)v332, (uint64_t *)&v332[1], &v372, v374, (const void **)v163);
                if (*v164) {
                  goto LABEL_335;
                }
                std::string::size_type v165 = (MIL::Attributes::FlexibleShapeInfo *)operator new(0x38uLL);
                uint8x8_t v166 = (std::string *)((char *)v165 + 32);
                if (*((char *)v163 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v166, *(const std::string::value_type **)v163, *((void *)v163 + 1));
                }
                else
                {
                  long long v167 = *v163;
                  *((void *)v165 + 6) = *((void *)v163 + 2);
                  *(_OWORD *)&v166->__r_.__value_.__l.__data_ = v167;
                }
                uint64_t v168 = v372;
                *(void *)std::string::size_type v165 = 0;
                *((void *)v165 + 1) = 0;
                *((void *)v165 + 2) = v168;
                *std::string::size_type v164 = (uint64_t)v165;
                if (*(void *)v332[0])
                {
                  v332[0] = *(MIL::Attributes::FlexibleShapeInfo **)v332[0];
                  std::string::size_type v165 = (MIL::Attributes::FlexibleShapeInfo *)*v164;
                }
                uint64_t v169 = v332[1];
                BOOL v98 = v165 == v332[1];
                *((unsigned char *)v165 + 24) = v165 == v332[1];
                if (v98) {
                  goto LABEL_334;
                }
                while (1)
                {
                  uint64_t v170 = *((void *)v165 + 2);
                  if (*(unsigned char *)(v170 + 24)) {
                    goto LABEL_334;
                  }
                  unint64_t v171 = *(MIL::Attributes::FlexibleShapeInfo **)(v170 + 16);
                  uint64_t v172 = *(void *)v171;
                  if (*(void *)v171 == v170)
                  {
                    uint64_t v175 = *((void *)v171 + 1);
                    if (!v175 || (int v176 = *(unsigned __int8 *)(v175 + 24), v173 = (unsigned char *)(v175 + 24), v176))
                    {
                      if (*(MIL::Attributes::FlexibleShapeInfo **)v170 == v165)
                      {
                        *(unsigned char *)(v170 + 24) = 1;
                        *((unsigned char *)v171 + 24) = 0;
                        uint64_t v179 = *(void *)(v170 + 8);
                        *(void *)unint64_t v171 = v179;
                        if (v179) {
                          goto LABEL_357;
                        }
                      }
                      else
                      {
                        std::string::size_type v177 = *(uint64_t **)(v170 + 8);
                        uint64_t v178 = *v177;
                        *(void *)(v170 + 8) = *v177;
                        if (v178)
                        {
                          *(void *)(v178 + 16) = v170;
                          unint64_t v171 = *(MIL::Attributes::FlexibleShapeInfo **)(v170 + 16);
                        }
                        v177[2] = (uint64_t)v171;
                        *(void *)(*(void *)(v170 + 16) + 8 * (**(void **)(v170 + 16) != v170)) = v177;
                        *std::string::size_type v177 = v170;
                        *(void *)(v170 + 16) = v177;
                        unint64_t v171 = (MIL::Attributes::FlexibleShapeInfo *)v177[2];
                        uint64_t v170 = *(void *)v171;
                        *((unsigned char *)v177 + 24) = 1;
                        *((unsigned char *)v171 + 24) = 0;
                        uint64_t v179 = *(void *)(v170 + 8);
                        *(void *)unint64_t v171 = v179;
                        if (v179) {
LABEL_357:
                        }
                          *(void *)(v179 + 16) = v171;
                      }
                      *(void *)(v170 + 16) = *((void *)v171 + 2);
                      *(void *)(*((void *)v171 + 2) + 8 * (**((void **)v171 + 2) != (void)v171)) = v170;
                      *(void *)(v170 + 8) = v171;
LABEL_333:
                      *((void *)v171 + 2) = v170;
LABEL_334:
                      ++v333;
LABEL_335:
                      std::string::size_type v163 = (long long *)((char *)v163 + 24);
                      if (v163 != (long long *)v162) {
                        goto LABEL_336;
                      }
                      uint64_t v182 = v332[0];
                      if ((MIL::Attributes::FlexibleShapeInfo **)v332[0] != &v332[1])
                      {
LABEL_371:
                        uint64_t v183 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>((uint64_t **)&v371, (uint64_t *)&v371.__r_.__value_.__l.__size_, &v372, v374, (const void **)v182 + 4);
                        if (*v183)
                        {
                          uint64_t v184 = (MIL::Attributes::FlexibleShapeInfo *)*((void *)v182 + 1);
                          if (v184) {
                            goto LABEL_396;
                          }
                          goto LABEL_402;
                        }
                        long long v185 = (char *)operator new(0x38uLL);
                        long long v186 = (std::string *)(v185 + 32);
                        if (*((char *)v182 + 55) < 0)
                        {
                          std::string::__init_copy_ctor_external(v186, *((const std::string::value_type **)v182 + 4), *((void *)v182 + 5));
                        }
                        else
                        {
                          long long v187 = *((_OWORD *)v182 + 2);
                          *((void *)v185 + 6) = *((void *)v182 + 6);
                          *(_OWORD *)&v186->__r_.__value_.__l.__data_ = v187;
                        }
                        uint64_t v188 = v372;
                        *(void *)long long v185 = 0;
                        *((void *)v185 + 1) = 0;
                        *((void *)v185 + 2) = v188;
                        *uint64_t v183 = (uint64_t)v185;
                        if (*(void *)v371.__r_.__value_.__l.__data_)
                        {
                          v371.__r_.__value_.__r.__words[0] = *(void *)v371.__r_.__value_.__l.__data_;
                          long long v185 = (char *)*v183;
                        }
                        std::string::size_type v189 = v371.__r_.__value_.__l.__size_;
                        v185[24] = v185 == (char *)v371.__r_.__value_.__l.__size_;
                        if (v185 == (char *)v189) {
                          goto LABEL_395;
                        }
                        while (1)
                        {
                          uint64_t v190 = *((void *)v185 + 2);
                          if (*(unsigned char *)(v190 + 24)) {
                            goto LABEL_395;
                          }
                          uint64_t v191 = *(unsigned char **)(v190 + 16);
                          uint64_t v192 = *(void *)v191;
                          if (*(void *)v191 == v190)
                          {
                            uint64_t v195 = *((void *)v191 + 1);
                            if (!v195 || (int v196 = *(unsigned __int8 *)(v195 + 24), v193 = (unsigned char *)(v195 + 24), v196))
                            {
                              if (*(char **)v190 == v185)
                              {
                                *(unsigned char *)(v190 + 24) = 1;
                                v191[24] = 0;
                                uint64_t v199 = *(void *)(v190 + 8);
                                *(void *)uint64_t v191 = v199;
                                if (v199) {
                                  goto LABEL_393;
                                }
                              }
                              else
                              {
                                std::string::size_type v197 = *(uint64_t **)(v190 + 8);
                                uint64_t v198 = *v197;
                                *(void *)(v190 + 8) = *v197;
                                if (v198)
                                {
                                  *(void *)(v198 + 16) = v190;
                                  uint64_t v191 = *(unsigned char **)(v190 + 16);
                                }
                                v197[2] = (uint64_t)v191;
                                *(void *)(*(void *)(v190 + 16) + 8 * (**(void **)(v190 + 16) != v190)) = v197;
                                uint64_t *v197 = v190;
                                *(void *)(v190 + 16) = v197;
                                uint64_t v191 = (unsigned char *)v197[2];
                                uint64_t v190 = *(void *)v191;
                                *((unsigned char *)v197 + 24) = 1;
                                v191[24] = 0;
                                uint64_t v199 = *(void *)(v190 + 8);
                                *(void *)uint64_t v191 = v199;
                                if (v199) {
LABEL_393:
                                }
                                  *(void *)(v199 + 16) = v191;
                              }
                              *(void *)(v190 + 16) = *((void *)v191 + 2);
                              *(void *)(*((void *)v191 + 2) + 8 * (**((void **)v191 + 2) != (void)v191)) = v190;
                              *(void *)(v190 + 8) = v191;
                              *((void *)v191 + 2) = v190;
LABEL_395:
                              ++v371.__r_.__value_.__r.__words[2];
                              uint64_t v184 = (MIL::Attributes::FlexibleShapeInfo *)*((void *)v182 + 1);
                              if (!v184) {
                                goto LABEL_402;
                              }
                              do
                              {
LABEL_396:
                                uint64_t v200 = (MIL::Attributes::FlexibleShapeInfo **)v184;
                                uint64_t v184 = *(MIL::Attributes::FlexibleShapeInfo **)v184;
                              }
                              while (v184);
LABEL_370:
                              uint64_t v182 = (MIL::Attributes::FlexibleShapeInfo *)v200;
                              if (v200 == &v332[1]) {
                                goto LABEL_412;
                              }
                              goto LABEL_371;
                            }
                          }
                          else if (!v192 || (v194 = *(unsigned __int8 *)(v192 + 24), std::string v193 = (unsigned char *)(v192 + 24), v194))
                          {
                            if (*(char **)v190 == v185)
                            {
                              uint64_t v203 = *((void *)v185 + 1);
                              *(void *)uint64_t v190 = v203;
                              if (v203)
                              {
                                *(void *)(v203 + 16) = v190;
                                uint64_t v191 = *(unsigned char **)(v190 + 16);
                              }
                              *((void *)v185 + 2) = v191;
                              *(void *)(*(void *)(v190 + 16) + 8 * (**(void **)(v190 + 16) != v190)) = v185;
                              *((void *)v185 + 1) = v190;
                              *(void *)(v190 + 16) = v185;
                              uint64_t v191 = (unsigned char *)*((void *)v185 + 2);
                              v185[24] = 1;
                              v191[24] = 0;
                              uint64_t v201 = (uint64_t *)*((void *)v191 + 1);
                              uint64_t v202 = *v201;
                              *((void *)v191 + 1) = *v201;
                              if (v202) {
LABEL_400:
                              }
                                *(void *)(v202 + 16) = v191;
                            }
                            else
                            {
                              *(unsigned char *)(v190 + 24) = 1;
                              v191[24] = 0;
                              uint64_t v201 = (uint64_t *)*((void *)v191 + 1);
                              uint64_t v202 = *v201;
                              *((void *)v191 + 1) = *v201;
                              if (v202) {
                                goto LABEL_400;
                              }
                            }
                            v201[2] = *((void *)v191 + 2);
                            *(void *)(*((void *)v191 + 2) + 8 * (**((void **)v191 + 2) != (void)v191)) = v201;
                            *uint64_t v201 = (uint64_t)v191;
                            *((void *)v191 + 2) = v201;
                            ++v371.__r_.__value_.__r.__words[2];
                            uint64_t v184 = (MIL::Attributes::FlexibleShapeInfo *)*((void *)v182 + 1);
                            if (v184) {
                              goto LABEL_396;
                            }
                            do
                            {
LABEL_402:
                              uint64_t v200 = (MIL::Attributes::FlexibleShapeInfo **)*((void *)v182 + 2);
                              BOOL v98 = *v200 == v182;
                              uint64_t v182 = (MIL::Attributes::FlexibleShapeInfo *)v200;
                            }
                            while (!v98);
                            goto LABEL_370;
                          }
                          *(unsigned char *)(v190 + 24) = 1;
                          long long v185 = v191;
                          v191[24] = v191 == (unsigned char *)v189;
                          unsigned char *v193 = 1;
                          if (v191 == (unsigned char *)v189) {
                            goto LABEL_395;
                          }
                        }
                      }
                      break;
                    }
                  }
                  else if (!v172 || (int v174 = *(unsigned __int8 *)(v172 + 24), v173 = (unsigned char *)(v172 + 24), v174))
                  {
                    if (*(MIL::Attributes::FlexibleShapeInfo **)v170 == v165)
                    {
                      uint64_t v181 = *((void *)v165 + 1);
                      *(void *)uint64_t v170 = v181;
                      if (v181)
                      {
                        *(void *)(v181 + 16) = v170;
                        unint64_t v171 = *(MIL::Attributes::FlexibleShapeInfo **)(v170 + 16);
                      }
                      *((void *)v165 + 2) = v171;
                      *(void *)(*(void *)(v170 + 16) + 8 * (**(void **)(v170 + 16) != v170)) = v165;
                      *((void *)v165 + 1) = v170;
                      *(void *)(v170 + 16) = v165;
                      unint64_t v171 = (MIL::Attributes::FlexibleShapeInfo *)*((void *)v165 + 2);
                      *((unsigned char *)v165 + 24) = 1;
                      *((unsigned char *)v171 + 24) = 0;
                      uint64_t v170 = *((void *)v171 + 1);
                      v180 = *(MIL::Attributes::FlexibleShapeInfo **)v170;
                      *((void *)v171 + 1) = *(void *)v170;
                      if (!v180) {
                        goto LABEL_332;
                      }
                    }
                    else
                    {
                      *(unsigned char *)(v170 + 24) = 1;
                      *((unsigned char *)v171 + 24) = 0;
                      uint64_t v170 = *((void *)v171 + 1);
                      v180 = *(MIL::Attributes::FlexibleShapeInfo **)v170;
                      *((void *)v171 + 1) = *(void *)v170;
                      if (!v180) {
                        goto LABEL_332;
                      }
                    }
                    *((void *)v180 + 2) = v171;
LABEL_332:
                    *(void *)(v170 + 16) = *((void *)v171 + 2);
                    *(void *)(*((void *)v171 + 2) + 8 * (**((void **)v171 + 2) != (void)v171)) = v170;
                    *(void *)uint64_t v170 = v171;
                    goto LABEL_333;
                  }
                  *(unsigned char *)(v170 + 24) = 1;
                  std::string::size_type v165 = v171;
                  *((unsigned char *)v171 + 24) = v171 == v169;
                  unsigned char *v173 = 1;
                  if (v171 == v169) {
                    goto LABEL_334;
                  }
                }
              }
LABEL_412:
              std::__tree<std::string>::destroy((uint64_t)v332, (char *)v332[1]);
              std::string::size_type v204 = *(char **)&v313[24];
              if (*(void *)&v313[24])
              {
                int v205 = v314;
                uint64_t v206 = *(void **)&v313[24];
                if (v314 != *(char **)&v313[24])
                {
                  do
                  {
                    if (*(v205 - 1) < 0) {
                      operator delete(*((void **)v205 - 3));
                    }
                    v205 -= 24;
                  }
                  while (v205 != v204);
                  uint64_t v206 = *(void **)&v313[24];
                }
                v314 = v204;
                operator delete(v206);
              }
              if ((v313[23] & 0x80000000) != 0) {
                operator delete(*(void **)v313);
              }
              uint64_t v152 = (uint64_t *)*v152;
            }
            while (v152);
            std::string::size_type v145 = v371.__r_.__value_.__r.__words[2];
            memset(v313, 0, 24);
            if (!v371.__r_.__value_.__r.__words[2]) {
              goto LABEL_423;
            }
            goto LABEL_301;
          }
          long long v141 = (char *)operator new(0x38uLL);
          long long v142 = (std::string *)(v141 + 32);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v142, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            long long v225 = (std::string::size_type *)v371.__r_.__value_.__r.__words[0];
            *(void *)long long v141 = 0;
            *((void *)v141 + 1) = 0;
            *((void *)v141 + 2) = &v371.__r_.__value_.__l.__size_;
            v371.__r_.__value_.__l.__size_ = (std::string::size_type)v141;
            std::string::size_type v143 = *v225;
            if (!v143)
            {
LABEL_300:
              v141[24] = 1;
              std::string::size_type v144 = v371.__r_.__value_.__r.__words[2];
              std::string::size_type v145 = ++v371.__r_.__value_.__r.__words[2];
              memset(v313, 0, 24);
              if (v144 == -1)
              {
LABEL_423:
                BOOL v146 = 0;
                std::string::size_type v147 = v371.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v371.__r_.__value_.__l.__data_ == &v371.__r_.__value_.__r.__words[1]) {
                  goto LABEL_424;
                }
                goto LABEL_426;
              }
LABEL_301:
              if (v145 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              BOOL v146 = (std::string *)operator new(24 * v145);
              *(void *)v313 = v146;
              *(void *)&v313[16] = &v146[v145];
              bzero(v146, 24 * ((24 * v145 - 24) / 0x18) + 24);
              *(void *)&v313[8] = &v146[(24 * v145 - 24) / 0x18 + 1];
              std::string::size_type v147 = v371.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v371.__r_.__value_.__l.__data_ == &v371.__r_.__value_.__r.__words[1]) {
LABEL_424:
              }
                Espresso::AOT::E5BackendToE5RTLoweringPass::RunCompilerBackend(a1, v337, v310, (uint64_t)v313, (uint64_t)&v336);
              do
              {
LABEL_426:
                std::string::operator=(v146, (const std::string *)(v147 + 32));
                int v207 = *(std::string **)(v147 + 8);
                if (v207)
                {
                  do
                  {
                    uint64_t v208 = v207;
                    int v207 = (std::string *)v207->__r_.__value_.__r.__words[0];
                  }
                  while (v207);
                }
                else
                {
                  do
                  {
                    uint64_t v208 = *(std::string **)(v147 + 16);
                    BOOL v98 = v208->__r_.__value_.__r.__words[0] == v147;
                    std::string::size_type v147 = (std::string::size_type)v208;
                  }
                  while (!v98);
                }
                ++v146;
                std::string::size_type v147 = (std::string::size_type)v208;
              }
              while (v208 != (std::string *)&v371.__r_.__value_.__r.__words[1]);
              goto LABEL_424;
            }
          }
          else
          {
            *(_OWORD *)&v142->__r_.__value_.__l.__data_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            *((void *)v141 + 6) = *((void *)&__s.__r_.__value_.__l + 2);
            *(void *)long long v141 = 0;
            *((void *)v141 + 1) = 0;
            *((void *)v141 + 2) = &v371.__r_.__value_.__l.__size_;
            v371.__r_.__value_.__l.__size_ = (std::string::size_type)v141;
            std::string::size_type v143 = (std::string::size_type)v141;
            if (!v141) {
              goto LABEL_300;
            }
          }
          v371.__r_.__value_.__r.__words[0] = v143;
          goto LABEL_300;
        }
        unint64_t v107 = v97 - 1;
        if (v103.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v108 = v106[1];
            if (v108 == v337)
            {
              if (*((_DWORD *)v106 + 4) == v337) {
                goto LABEL_218;
              }
            }
            else if ((v108 & v107) != v104)
            {
              goto LABEL_289;
            }
            std::string::size_type v106 = (uint64_t *)*v106;
            if (!v106) {
              goto LABEL_289;
            }
          }
        }
        while (1)
        {
          unint64_t v109 = v106[1];
          if (v109 == v337) {
            break;
          }
          if (v109 >= v97) {
            v109 %= v97;
          }
          if (v109 != v104) {
            goto LABEL_289;
          }
LABEL_208:
          std::string::size_type v106 = (uint64_t *)*v106;
          if (!v106) {
            goto LABEL_289;
          }
        }
        if (*((_DWORD *)v106 + 4) != v337) {
          goto LABEL_208;
        }
LABEL_218:
        if (v103.u32[0] > 1uLL)
        {
          unint64_t v111 = v337;
          if (v97 <= v337) {
            unint64_t v111 = v337 % v97;
          }
        }
        else
        {
          unint64_t v111 = (v97 - 1) & v337;
        }
        uint64_t v112 = (uint64_t **)*((void *)__p[0] + v111);
        if (!v112 || (long long v113 = *v112) == 0) {
LABEL_606:
        }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v103.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v114 = v113[1];
            if (v114 == v337)
            {
              if (*((_DWORD *)v113 + 4) == v337) {
                goto LABEL_230;
              }
            }
            else if ((v114 & v107) != v111)
            {
              goto LABEL_606;
            }
            long long v113 = (uint64_t *)*v113;
            if (!v113) {
              goto LABEL_606;
            }
          }
        }
        while (2)
        {
          unint64_t v116 = v113[1];
          if (v116 != v337)
          {
            if (v116 >= v97) {
              v116 %= v97;
            }
            if (v116 != v111) {
              goto LABEL_606;
            }
LABEL_233:
            long long v113 = (uint64_t *)*v113;
            if (!v113) {
              goto LABEL_606;
            }
            continue;
          }
          break;
        }
        if (*((_DWORD *)v113 + 4) != v337) {
          goto LABEL_233;
        }
LABEL_230:
        memset(v313, 0, sizeof(v313));
        LODWORD(v314) = *((_DWORD *)v113 + 14);
        size_t prime = v113[4];
        if (prime == 1)
        {
          size_t prime = 2;
          goto LABEL_255;
        }
        if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(v113[4]);
          int8x8_t v117 = *(int8x8_t *)&v313[8];
          BOOL v118 = prime >= *(void *)&v313[8];
          if (prime > *(void *)&v313[8]) {
            goto LABEL_254;
          }
        }
        else
        {
          int8x8_t v117 = 0;
          BOOL v118 = 1;
          if (prime)
          {
LABEL_254:
            if (prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
LABEL_255:
            std::string::size_type v122 = operator new(8 * prime);
            std::string::size_type v123 = *(void **)v313;
            *(void *)v313 = v122;
            if (v123) {
              operator delete(v123);
            }
            uint64_t v124 = 0;
            *(void *)&v313[8] = prime;
            do
              *(void *)(*(void *)v313 + 8 * v124++) = 0;
            while (prime != v124);
            uint64_t v125 = *(void ***)&v313[16];
            if (!*(void *)&v313[16]) {
              goto LABEL_279;
            }
            size_t v126 = *(void *)(*(void *)&v313[16] + 8);
            size_t v127 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              size_t v128 = v126 & v127;
              *(void *)(*(void *)v313 + 8 * v128) = &v313[16];
              while (1)
              {
                unint64_t v129 = *v125;
                if (!*v125) {
                  break;
                }
                size_t v130 = v129[1] & v127;
                if (v130 == v128)
                {
                  uint64_t v125 = (void **)*v125;
                }
                else if (*(void *)(*(void *)v313 + 8 * v130))
                {
                  std::string *v125 = (void *)*v129;
                  uint64_t v131 = 8 * v130;
                  *unint64_t v129 = **(void **)(*(void *)v313 + v131);
                  **(void **)(*(void *)v313 + v131) = v129;
                }
                else
                {
                  *(void *)(*(void *)v313 + 8 * v130) = v125;
                  uint64_t v125 = (void **)v129;
                  size_t v128 = v130;
                }
              }
              goto LABEL_279;
            }
            if (v126 >= prime) {
              v126 %= prime;
            }
            *(void *)(*(void *)v313 + 8 * v126) = &v313[16];
            char v132 = *v125;
            if (!*v125)
            {
LABEL_279:
              unint64_t j = (void *)v113[5];
              if (j) {
                goto LABEL_280;
              }
              goto LABEL_281;
            }
            while (1)
            {
LABEL_274:
              size_t v134 = v132[1];
              if (v134 >= prime) {
                v134 %= prime;
              }
              if (v134 == v126) {
                goto LABEL_273;
              }
              if (*(void *)(*(void *)v313 + 8 * v134)) {
                break;
              }
              *(void *)(*(void *)v313 + 8 * v134) = v125;
              uint64_t v125 = (void **)v132;
              char v132 = (void *)*v132;
              size_t v126 = v134;
              if (!v132) {
                goto LABEL_279;
              }
            }
            std::string *v125 = (void *)*v132;
            uint64_t v133 = 8 * v134;
            *char v132 = **(void **)(*(void *)v313 + v133);
            **(void **)(*(void *)v313 + v133) = v132;
            char v132 = v125;
LABEL_273:
            uint64_t v125 = (void **)v132;
            char v132 = (void *)*v132;
            if (!v132) {
              goto LABEL_279;
            }
            goto LABEL_274;
          }
        }
        if (v118) {
          goto LABEL_279;
        }
        unint64_t v119 = vcvtps_u32_f32((float)*(unint64_t *)&v313[24] / *(float *)&v314);
        if (*(void *)&v117 < 3uLL
          || (uint8x8_t v120 = (uint8x8_t)vcnt_s8(v117), v120.i16[0] = vaddlv_u8(v120), v120.u32[0] > 1uLL))
        {
          unint64_t v119 = std::__next_prime(v119);
        }
        else
        {
          uint64_t v121 = 1 << -(char)__clz(v119 - 1);
          if (v119 >= 2) {
            unint64_t v119 = v121;
          }
        }
        if (prime <= v119) {
          size_t prime = v119;
        }
        if (prime >= *(void *)&v117) {
          goto LABEL_279;
        }
        if (prime) {
          goto LABEL_254;
        }
        int v226 = *(void **)v313;
        *(void *)v313 = 0;
        if (v226) {
          operator delete(v226);
        }
        *(void *)&v313[8] = 0;
        for (unint64_t j = (void *)v113[5]; j; unint64_t j = (void *)*j)
LABEL_280:
          std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)v313, (uint64_t)(j + 2), (uint64_t)(j + 2));
LABEL_281:
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v313, (unsigned __int8 *)&__s))
        {
          long long v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v313, (unsigned __int8 *)&__s);
          if (!v136) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          if (v334 != (MIL::Attributes::FlexibleShapeInfo **)(v136 + 40)) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v334, *((std::string **)v136 + 5), *((std::string **)v136 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v136 + 6) - *((void *)v136 + 5)) >> 3));
          }
        }
        long long v137 = *(char **)&v313[16];
        if (*(void *)&v313[16])
        {
          do
          {
            uint64_t v148 = *(char **)v137;
            uint64_t v149 = *((void *)v137 + 5);
            if (v149)
            {
              uint64_t v150 = *((void *)v137 + 6);
              uint64_t v151 = (void *)*((void *)v137 + 5);
              if (v150 != v149)
              {
                do
                {
                  if (*(char *)(v150 - 1) < 0) {
                    operator delete(*(void **)(v150 - 24));
                  }
                  v150 -= 24;
                }
                while (v150 != v149);
                uint64_t v151 = (void *)*((void *)v137 + 5);
              }
              *((void *)v137 + 6) = v149;
              operator delete(v151);
            }
            if (v137[39] < 0) {
              operator delete(*((void **)v137 + 2));
            }
            operator delete(v137);
            long long v137 = v148;
          }
          while (v148);
        }
        uint64_t v138 = *(void **)v313;
        *(void *)v313 = 0;
        if (v138) {
          operator delete(v138);
        }
        if (v334[0] == v334[1]) {
          goto LABEL_289;
        }
        (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(void *)v310 + 48))(&v372, v310);
        v332[0] = 0;
        v332[1] = 0;
        unint64_t v333 = 0;
        if (!(*(uint64_t (**)(uint64_t, std::string *))(*(void *)v310 + 56))(v310, &__s))
        {
          std::string::size_type v274 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::string::size_type v275 = std::string::append(&v371, " does not exist.");
          long long v276 = *(_OWORD *)&v275->__r_.__value_.__l.__data_;
          *(void *)&v313[16] = *((void *)&v275->__r_.__value_.__l + 2);
          *(_OWORD *)v313 = v276;
          v275->__r_.__value_.__l.__size_ = 0;
          v275->__r_.__value_.__r.__words[2] = 0;
          v275->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(v274, (const std::string *)v313);
          v274->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v274, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        MIL::IRProgram::GetFunction();
        MIL::Attributes::FlexibleShapeInfo::Make();
        std::string::size_type v209 = *(uint64_t **)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(*(MIL::Attributes::FlexibleShapeInfo **)v313)
                           + 16);
        uint64_t v53 = v300;
        if (v209)
        {
          int v210 = 0;
          do
          {
            unint64_t v212 = (long long *)(v209 + 2);
            if ((unint64_t)v210 < v333)
            {
              if (*((char *)v209 + 39) < 0)
              {
                std::string::__init_copy_ctor_external(v210, (const std::string::value_type *)v209[2], v209[3]);
              }
              else
              {
                long long v211 = *v212;
                v210->__r_.__value_.__r.__words[2] = v209[4];
                *(_OWORD *)&v210->__r_.__value_.__l.__data_ = v211;
              }
              ++v210;
            }
            else
            {
              int v210 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v332, (uint64_t)v212);
            }
            v332[1] = (MIL::Attributes::FlexibleShapeInfo *)v210;
            std::string::size_type v209 = (uint64_t *)*v209;
          }
          while (v209);
        }
        int v213 = *(MIL::Attributes::FlexibleShapeInfo **)v313;
        *(void *)v313 = 0;
        if (v213)
        {
          MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v213);
          MEMORY[0x192FF16B0]();
        }
        std::string::size_type v214 = v373;
        uint64_t v51 = v307;
        if (v373 && !atomic_fetch_add(&v373->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
        Espresso::AOT::E5BackendToE5RTLoweringPass::MakeE5RTInferenceOp(v337, v312, (std::string **)v334, v307, v310, (const std::string **)v332, v313);
        long long v331 = *(_OWORD *)v313;
        if (*(void *)&v313[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v313[8] + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v329 = 0;
        v330 = 0;
        MIL::Builder::BlockBuilder::AddOperation();
        std::string::size_type v215 = v330;
        if (v330 && !atomic_fetch_add(&v330->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
          std::__shared_weak_count::__release_weak(v215);
          unint64_t v216 = (std::__shared_weak_count *)*((void *)&v331 + 1);
          if (*((void *)&v331 + 1)) {
            goto LABEL_452;
          }
        }
        else
        {
          unint64_t v216 = (std::__shared_weak_count *)*((void *)&v331 + 1);
          if (*((void *)&v331 + 1))
          {
LABEL_452:
            if (!atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
              std::__shared_weak_count::__release_weak(v216);
            }
          }
        }
        int v217 = *(std::__shared_weak_count **)&v313[8];
        if (*(void *)&v313[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v313[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
          v218 = v332[0];
          if (v332[0])
          {
LABEL_458:
            unint64_t v219 = v332[1];
            long long v220 = v218;
            if (v332[1] != v218)
            {
              do
              {
                if (*((char *)v219 - 1) < 0) {
                  operator delete(*((void **)v219 - 3));
                }
                unint64_t v219 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v219 - 24);
              }
              while (v219 != v218);
              long long v220 = v332[0];
            }
            v332[1] = v218;
            operator delete(v220);
          }
        }
        else
        {
          v218 = v332[0];
          if (v332[0]) {
            goto LABEL_458;
          }
        }
        char v221 = v334[0];
        if (v334[0])
        {
          char v222 = v334[1];
          std::string::size_type v223 = v334[0];
          if (v334[1] != v334[0])
          {
            do
            {
              if (*((char *)v222 - 1) < 0) {
                operator delete(*((void **)v222 - 3));
              }
              char v222 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v222 - 24);
            }
            while (v222 != v221);
            std::string::size_type v223 = v334[0];
          }
          v334[1] = v221;
          operator delete(v223);
        }
        if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        std::string::size_type v224 = v303;
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_475;
        }
LABEL_478:
        operator delete(__s.__r_.__value_.__l.__data_);
        int v68 = v305 + 1;
        uint64_t v67 = v224 + 2;
        if (v67 == v309) {
          goto LABEL_489;
        }
      }
      operator delete(v336.__r_.__value_.__l.__data_);
      std::string::size_type v224 = v303;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_478;
      }
LABEL_475:
      int v68 = v305 + 1;
      uint64_t v67 = v224 + 2;
      if (v67 != v309) {
        goto LABEL_129;
      }
LABEL_489:
      Espresso::EspressoReporterUtilities::get_compute_unit_string((uint64_t)&v370, (void **)&v371.__r_.__value_.__l.__data_);
      if (v348) {
        goto LABEL_518;
      }
      char v325 = 0;
      LOBYTE(v324) = 0;
      char v323 = 0;
      LOBYTE(v322) = 0;
      Espresso::MILUtil::SerializeProgramToString(v310, (uint64_t)&v324, (uint64_t)&v322, 0x100000004);
      if (v323 < 0)
      {
        operator delete(v322);
        if (v325 < 0) {
          goto LABEL_507;
        }
      }
      else
      {
        if ((v325 & 0x80000000) == 0) {
          goto LABEL_492;
        }
LABEL_507:
        operator delete(v324);
      }
LABEL_492:
      if (v313[23] >= 0) {
        int v227 = v313;
      }
      else {
        int v227 = *(unsigned char **)v313;
      }
      if (v313[23] >= 0) {
        size_t v228 = v313[23];
      }
      else {
        size_t v228 = *(void *)&v313[8];
      }
      memset(&__s, 0, sizeof(__s));
      if (v228)
      {
        if ((v228 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        v229 = (char *)operator new(v228);
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v229;
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)v229;
        __s.__r_.__value_.__r.__words[2] = (std::string::size_type)&v229[v228];
        if (v228 < 0x20)
        {
          uint64_t v230 = v227;
        }
        else
        {
          uint64_t v230 = v227;
          if ((unint64_t)(v229 - v227) >= 0x20)
          {
            uint64_t v230 = &v227[v228 & 0xFFFFFFFFFFFFFFE0];
            std::string::size_type v231 = &v229[v228 & 0xFFFFFFFFFFFFFFE0];
            v232 = v229 + 16;
            v233 = (long long *)(v227 + 16);
            unint64_t v234 = v228 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v235 = *v233;
              *(v232 - 1) = *(v233 - 1);
              _OWORD *v232 = v235;
              v232 += 2;
              v233 += 2;
              v234 -= 32;
            }
            while (v234);
            v229 += v228 & 0xFFFFFFFFFFFFFFE0;
            if (v228 == (v228 & 0xFFFFFFFFFFFFFFE0))
            {
LABEL_511:
              __s.__r_.__value_.__l.__size_ = (std::string::size_type)v231;
              goto LABEL_512;
            }
          }
        }
        std::string::size_type v231 = v229;
        do
        {
          char v236 = *v230++;
          *v231++ = v236;
        }
        while (v230 != &v227[v228]);
        goto LABEL_511;
      }
LABEL_512:
      E5Common::StringUtils::ComputeHashString((uint64_t)&__s, (uint64_t)&v336);
      if (!v348)
      {
        std::string __sz = v336;
        char v348 = 1;
        char v237 = (void *)__s.__r_.__value_.__r.__words[0];
        if (!__s.__r_.__value_.__r.__words[0]) {
          goto LABEL_516;
        }
        goto LABEL_515;
      }
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__sz.__r_.__value_.__l.__data_);
        std::string __sz = v336;
        char v237 = (void *)__s.__r_.__value_.__r.__words[0];
        if (!__s.__r_.__value_.__r.__words[0]) {
          goto LABEL_516;
        }
LABEL_515:
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)v237;
        operator delete(v237);
        goto LABEL_516;
      }
      std::string __sz = v336;
      char v237 = (void *)__s.__r_.__value_.__r.__words[0];
      if (__s.__r_.__value_.__r.__words[0]) {
        goto LABEL_515;
      }
LABEL_516:
      if ((v313[23] & 0x80000000) != 0) {
        operator delete(*(void **)v313);
      }
LABEL_518:
      if (Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::onceToken != -1) {
        dispatch_once(&Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::onceToken, &__block_literal_global_0);
      }
      uint64_t v238 = Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::evt_reporter_instance;
      v313[0] = 0;
      v313[4] = 0;
      LODWORD(__s.__r_.__value_.__l.__data_) = v68;
      __s.__r_.__value_.__s.__data_[4] = 1;
      uint64_t v239 = Espresso::AOT::AOTCompilerOptions::GetOutput(v301);
      Espresso::EventReporterImplementation::logMetric(v238, (uint64_t)&v371, (uint64_t)v313, (uint64_t)&__s, (uint64_t)&__sz, 2, v239);
      int v240 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v53 + 88))(v53);
      uint64_t v241 = *v240;
      uint64_t v242 = v240[1];
      if (*v240 != v242)
      {
        do
        {
          MIL::Builder::BlockBuilder::AddOutput();
          v241 += 24;
        }
        while (v241 != v242);
      }
      *(void *)v313 = operator new(0x20uLL);
      *(_OWORD *)&v313[8] = xmmword_192DAA350;
      strcpy(*(char **)v313, "FlexibleShapeInformation");
      uint64_t Attribute = MIL::IRObject::TryGetAttribute();
      uint64_t v244 = Attribute;
      if ((v313[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v313);
        if (!v244) {
          goto LABEL_566;
        }
      }
      else if (!Attribute)
      {
        goto LABEL_566;
      }
      MIL::Attributes::FlexibleShapeInfo::Make();
      MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes((uint64_t *)&__s, v334[0]);
      uint64_t EnumeratedShapes = (MIL::Attributes::FlexibleShapeInfo *)MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v334[0]);
      if (__s.__r_.__value_.__r.__words[0] && !*((void *)EnumeratedShapes + 3))
      {
        MIL::Attributes::FlexibleShapeInfo::Make((uint64_t *)v332, EnumeratedShapes);
        std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)v313, (uint64_t)__s.__r_.__value_.__l.__data_);
        MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes();
        MIL::Builder::FunctionBuilder::CreateFunction((uint64_t *)&v372, v345[0]);
        MIL::Attributes::FlexibleShapeInfo::Replace();
        v320 = v368;
        v321 = v369;
        if (v369) {
          atomic_fetch_add_explicit(&v369->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v318 = v372;
        if (v372) {
          operator new();
        }
        std::string::size_type v319 = 0;
        v372 = 0;
        MIL::Builder::FunctionBuilder::Make();
        v246 = v319;
        if (v319 && !atomic_fetch_add(&v319->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
          std::__shared_weak_count::__release_weak(v246);
          uint64_t v247 = v321;
          if (v321) {
            goto LABEL_537;
          }
        }
        else
        {
          uint64_t v247 = v321;
          if (v321)
          {
LABEL_537:
            if (!atomic_fetch_add(&v247->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
              std::__shared_weak_count::__release_weak(v247);
            }
          }
        }
        MIL::Builder::ProgramBuilder::RemoveFunction();
        long long v316 = v374[0];
        if (v374[0]) {
          operator new();
        }
        v317 = 0;
        v374[0] = 0;
        MIL::Builder::ProgramBuilder::AddFunction();
        long long v248 = v317;
        if (v317 && !atomic_fetch_add(&v317->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
          std::__shared_weak_count::__release_weak(v248);
        }
        MIL::Builder::ProgramBuilder::GetFunction();
        long long v249 = *(_OWORD *)&v336.__r_.__value_.__l.__data_;
        *(_OWORD *)&v336.__r_.__value_.__l.__data_ = 0uLL;
        std::string::size_type v250 = (std::__shared_weak_count *)v345[1];
        *(_OWORD *)std::string v345 = v249;
        if (v250 && !atomic_fetch_add(&v250->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
          v251 = (std::__shared_weak_count *)v336.__r_.__value_.__l.__size_;
          if (v336.__r_.__value_.__l.__size_) {
            goto LABEL_550;
          }
        }
        else
        {
          v251 = (std::__shared_weak_count *)v336.__r_.__value_.__l.__size_;
          if (v336.__r_.__value_.__l.__size_)
          {
LABEL_550:
            if (!atomic_fetch_add(&v251->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
              std::__shared_weak_count::__release_weak(v251);
            }
          }
        }
        uint64_t v252 = v374[0];
        v374[0] = 0;
        if (v252) {
          (*(void (**)(uint64_t *))(*v252 + 8))(v252);
        }
        std::string::size_type v253 = v372;
        v372 = 0;
        if (v253) {
          (*(void (**)(uint64_t *))(*v253 + 8))(v253);
        }
        std::string::size_type v254 = *(char **)&v313[16];
        if (*(void *)&v313[16])
        {
          do
          {
            std::string::size_type v260 = *(char **)v254;
            uint64_t v261 = (void *)*((void *)v254 + 5);
            if (v261)
            {
              *((void *)v254 + 6) = v261;
              operator delete(v261);
            }
            if (v254[39] < 0) {
              operator delete(*((void **)v254 + 2));
            }
            operator delete(v254);
            std::string::size_type v254 = v260;
          }
          while (v260);
        }
        v255 = *(void **)v313;
        *(void *)v313 = 0;
        if (v255) {
          operator delete(v255);
        }
        v256 = v332[0];
        v332[0] = 0;
        if (v256)
        {
          MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v256);
          MEMORY[0x192FF16B0]();
        }
      }
      v257 = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
      if (!__s.__r_.__value_.__l.__size_
        || atomic_fetch_add((atomic_ullong *volatile)(__s.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        v258 = v334[0];
        v334[0] = 0;
        if (!v258) {
          goto LABEL_566;
        }
        goto LABEL_565;
      }
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
      v258 = v334[0];
      v334[0] = 0;
      if (v258)
      {
LABEL_565:
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v258);
        MEMORY[0x192FF16B0]();
      }
LABEL_566:
      if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v371.__r_.__value_.__l.__data_);
        std::__tree<std::string>::destroy((uint64_t)&v370, (char *)v370.__r_.__value_.__l.__size_);
        v259 = v341;
        if (!v341) {
          goto LABEL_576;
        }
      }
      else
      {
        std::__tree<std::string>::destroy((uint64_t)&v370, (char *)v370.__r_.__value_.__l.__size_);
        v259 = v341;
        if (!v341)
        {
LABEL_576:
          v262 = (std::__shared_weak_count *)v345[1];
          if (v345[1]) {
            goto LABEL_577;
          }
          goto LABEL_95;
        }
      }
      if (atomic_fetch_add(&v259->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_576;
      }
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
      v262 = (std::__shared_weak_count *)v345[1];
      if (v345[1])
      {
LABEL_577:
        if (!atomic_fetch_add(&v262->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
          std::__shared_weak_count::__release_weak(v262);
        }
      }
LABEL_95:
      v51 += 24;
      if (v51 == v297) {
        goto LABEL_583;
      }
    }
    while (1)
    {
      if (*((char *)v59 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v342, (const std::string::value_type *)v59[4], v59[5]);
      }
      else {
        std::string v342 = *(std::string *)(v59 + 4);
      }
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v342.__r_.__value_.__l.__data_);
        int v60 = (void *)v59[1];
        if (v60)
        {
          do
          {
LABEL_113:
            uint64_t v61 = v60;
            int v60 = (void *)*v60;
          }
          while (v60);
          goto LABEL_105;
        }
      }
      else
      {
        int v60 = (void *)v59[1];
        if (v60) {
          goto LABEL_113;
        }
      }
      do
      {
        uint64_t v61 = (void *)v59[2];
        BOOL v98 = *v61 == (void)v59;
        int v59 = v61;
      }
      while (!v98);
LABEL_105:
      int v59 = v61;
      if (v61 == v58) {
        goto LABEL_103;
      }
    }
  }
LABEL_583:
  MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)v313, v359);
  if (((*(uint64_t (**)(unsigned char *))(*(void *)&v313[8] + 16))(&v313[8]) & 1) == 0)
  {
    v295 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&v313[8]);
    std::operator+<char>();
    std::runtime_error::runtime_error(v295, &v371);
    __cxa_throw(v295, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v263 = *(void *)v313;
  *(void *)v313 = 0;
  void *v296 = v263;
  MEMORY[0x192FEF390](&v313[8]);
  uint64_t v264 = *(void *)v313;
  *(void *)v313 = 0;
  if (v264) {
    (*(void (**)(uint64_t))(*(void *)v264 + 8))(v264);
  }
  if (v348 && SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__sz.__r_.__value_.__l.__data_);
  }
  std::string::size_type v265 = (void *)v350;
  if ((void)v350)
  {
    do
    {
      v266 = (void *)*v265;
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)(v265 + 3));
      operator delete(v265);
      std::string::size_type v265 = v266;
    }
    while (v266);
  }
  std::string::size_type v267 = __p[0];
  __p[0] = 0;
  if (v267) {
    operator delete(v267);
  }
  std::string::size_type v268 = v359;
  uint64_t v359 = 0;
  if (v268) {
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(void *)v268 + 8))(v268);
  }
  if (v362) {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v360);
  }
  if ((SHIBYTE(v366) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_599;
    }
LABEL_602:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v269 = v369;
    if (!v369) {
      return kdebug_trace();
    }
    goto LABEL_603;
  }
  operator delete(v364);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_602;
  }
LABEL_599:
  v269 = v369;
  if (!v369) {
    return kdebug_trace();
  }
LABEL_603:
  if (!atomic_fetch_add(&v269->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
    std::__shared_weak_count::__release_weak(v269);
  }
  return kdebug_trace();
}

void sub_1925073B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  if (*(char *)(v19 - 121) < 0)
  {
    operator delete(*(void **)(v19 - 144));
    if ((v18 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v18)
  {
LABEL_6:
    std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair((uint64_t *)va);
    if (LOBYTE(STACK[0x278]) && SLOBYTE(STACK[0x277]) < 0) {
      operator delete((void *)STACK[0x260]);
    }
    uint64_t v21 = (void *)STACK[0x290];
    if (STACK[0x290])
    {
      do
      {
        uint64_t v22 = (void *)*v21;
        std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)(v21 + 3));
        operator delete(v21);
        uint64_t v21 = v22;
      }
      while (v22);
    }
    int v23 = (void *)STACK[0x280];
    STACK[0x280] = 0;
    if (v23) {
      operator delete(v23);
    }
    unint64_t v24 = STACK[0x300];
    STACK[0x300] = 0;
    if (v24)
    {
      (*(void (**)(unint64_t))(*(void *)v24 + 8))(v24);
      if (!LOBYTE(STACK[0x330]))
      {
LABEL_15:
        if (*(char *)(v19 - 217) < 0) {
          goto LABEL_16;
        }
        goto LABEL_21;
      }
    }
    else if (!LOBYTE(STACK[0x330]))
    {
      goto LABEL_15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x308]);
    if (*(char *)(v19 - 217) < 0)
    {
LABEL_16:
      operator delete(*(void **)(v19 - 240));
      if ((*(char *)(v19 - 193) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
LABEL_21:
    if ((*(char *)(v19 - 193) & 0x80000000) == 0)
    {
LABEL_17:
      long long v25 = *(std::__shared_weak_count **)(v19 - 184);
      if (!v25) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
LABEL_22:
    operator delete(*(void **)(v19 - 216));
    long long v25 = *(std::__shared_weak_count **)(v19 - 184);
    if (!v25) {
      goto LABEL_25;
    }
LABEL_23:
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_25:
    kdebug_trace();
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::~E5BackendToE5RTLoweringPass(Espresso::AOT::E5BackendToE5RTLoweringPass *this)
{
  *(void *)this = &unk_1EE36B678;
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::E5BackendToE5RTLoweringPass *)((char *)this + 8));

  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE36B678;
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::E5BackendToE5RTLoweringPass *)((char *)this + 8));
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = *(char **)v2;
      uint64_t v6 = *((void *)v2 + 5);
      if (v6)
      {
        uint64_t v7 = *((void *)v2 + 6);
        uint64_t v8 = (void *)*((void *)v2 + 5);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0) {
              operator delete(*(void **)(v7 - 24));
            }
            v7 -= 24;
          }
          while (v7 != v6);
          uint64_t v8 = (void *)*((void *)v2 + 5);
        }
        *((void *)v2 + 6) = v6;
        operator delete(v8);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  int v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      if (v3)
      {
        uint64_t v4 = *(void *)(v2 + 48);
        unint64_t v5 = *(void **)(v2 + 40);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0) {
              operator delete(*(void **)(v4 - 24));
            }
            v4 -= 24;
          }
          while (v4 != v3);
          unint64_t v5 = *(void **)(v2 + 40);
        }
        *(void *)(v2 + 48) = v3;
        operator delete(v5);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,std::vector<std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19250816C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_192508180(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                long long v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (uint64_t i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    long long v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              uint64_t v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (unint64_t j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  uint64_t v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::string>> const&>(a1, v10, a3, (uint64_t)v41);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      if (v29) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v41[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v29) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v41[0] = *v29;
  void *v29 = v41[0];
LABEL_89:
  uint64_t v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1925085A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::string>> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  v9[5] = 0;
  v9[6] = 0;
  v9[7] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v9 + 5, *(void *)(a3 + 24), *(void *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_19250866C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192508680(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<Espresso::AOT::BackendIdentifier,std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,true>,std::__unordered_map_equal<Espresso::AOT::BackendIdentifier,std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::hash<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,std::piecewise_construct_t const&,std::tuple<Espresso::AOT::BackendIdentifier const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = *((void *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v11 = *(char **)v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v14 = (void *)(a1 + 16);
  unint64_t v11 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v8) {
LABEL_36:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v7);
  if (v25)
  {
    *(void *)unint64_t v11 = *v25;
LABEL_59:
    *long long v25 = v11;
    goto LABEL_60;
  }
  *(void *)unint64_t v11 = *v14;
  *uint64_t v14 = v11;
  *(void *)(v24 + 8 * v7) = v14;
  if (*(void *)v11)
  {
    unint64_t v26 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1925089B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
  return a1;
}

void Espresso::AOT::AbstractMILCompiler::Options::PopulateAllEntryPoints(std::vector<std::string> *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((uint64_t)&v17, v3);
  std::vector<std::string>::size_type v4 = __n;
  if (!__n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "program doesn't have any functions");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  begin = a1[2].__begin_;
  std::vector<std::string>::pointer end = a1[2].__end_;
  if (end != begin)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != begin);
    std::vector<std::string>::size_type v4 = __n;
  }
  a1[2].__end_ = begin;
  std::vector<std::string>::reserve(a1 + 2, v4);
  unint64_t v7 = (const std::string::value_type *)__p;
  if (__p)
  {
    do
    {
      if (v7[39] < 0) {
        std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)v7 + 2), *((void *)v7 + 3));
      }
      else {
        std::string v20 = *(std::string *)(v7 + 16);
      }
      std::vector<std::string>::pointer v9 = a1[2].__end_;
      if (v9 < a1[2].__end_cap_.__value_)
      {
        long long v8 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
        v9->__r_.__value_.__r.__words[2] = v20.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v8;
        a1[2].__end_ = v9 + 1;
      }
      else
      {
        unint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)&a1[2].__begin_, (uint64_t)&v20);
        int v11 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
        a1[2].__end_ = (std::vector<std::string>::pointer)v10;
        if (v11 < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v7 = *(const std::string::value_type **)v7;
    }
    while (v7);
    unint64_t v12 = (void **)__p;
    if (__p)
    {
      do
      {
        while (1)
        {
          uint64_t v13 = (void **)*v12;
          uint64_t v14 = (std::__shared_weak_count *)v12[6];
          if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
          if (*((char *)v12 + 39) < 0) {
            break;
          }
          operator delete(v12);
          unint64_t v12 = v13;
          if (!v13) {
            goto LABEL_26;
          }
        }
        operator delete(v12[2]);
        operator delete(v12);
        unint64_t v12 = v13;
      }
      while (v13);
    }
  }
LABEL_26:
  float v15 = v17;
  BOOL v17 = 0;
  if (v15) {
    operator delete(v15);
  }
}

void sub_192508C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_192508C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192508C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192508C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AbstractMILCompiler::Canonicalize(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

void Espresso::AOT::AbstractMILCompiler::Optimize(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

void *Espresso::AOT::MILCompilerForANE::MILCompilerForANE(void *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  BOOL v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  long long v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  std::vector<std::string>::pointer v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  int v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v16;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  int v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      uint64_t v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_16:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      int v11 = v14;
    }
    while (v14);
  }
  unint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &unk_1EE36B240;
  Espresso::AOT::MILCompilerForANE::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  return a1;
}

void sub_192508E08(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_192508E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void Espresso::AOT::MILCompilerForANE::ExtractOptions(Espresso::AOT::MILCompilerForANE *this@<X0>, uint64_t a2@<X8>)
{
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)v11, this);
  uint64_t Platforms = Espresso::AOT::CompilerOptionsForE5::GetPlatforms((Espresso::AOT::CompilerOptionsForE5 *)v11);
  if (*(void *)(Platforms + 24) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one platform is supported.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(void *)(Output + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)Output;
    *(void *)(a2 + 16) = *(void *)(Output + 16);
    *(_OWORD *)a2 = v7;
  }
  *(unsigned char *)(a2 + 24) = Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly((Espresso::AOT::CompilerOptionsForE5 *)v11);
  Espresso::AOT::GetANENameForE5Platform(*(void *)(Platforms + 16) + 16, (void *)(a2 + 32));
  uint64_t AneOptionsPlistPath = Espresso::AOT::CompilerOptionsForE5::GetAneOptionsPlistPath((Espresso::AOT::CompilerOptionsForE5 *)v11);
  if (*(char *)(AneOptionsPlistPath + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 56), *(const std::string::value_type **)AneOptionsPlistPath, *(void *)(AneOptionsPlistPath + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)AneOptionsPlistPath;
    *(void *)(a2 + 72) = *(void *)(AneOptionsPlistPath + 16);
    *(_OWORD *)(a2 + 56) = v9;
  }
  Espresso::AOT::CompilerOptionsForE5::GetAneOptions((Espresso::AOT::CompilerOptionsForE5 *)v11, a2 + 80);
  *(unsigned char *)(a2 + 120) = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(this);
  Espresso::AOT::MILCompilerForANE::Options::AssertValid(a2);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)v11);
}

void sub_192508FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)&a10);
  _Unwind_Resume(a1);
}

void sub_192508FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Espresso::AOT::MILCompilerForANE::Options::~Options(v10);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)&a10);
  _Unwind_Resume(a1);
}

void sub_192508FD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v5);
  if (*(char *)(v2 + 79) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v2 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
LABEL_4:
    Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)va);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*(void **)v2);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)va);
  _Unwind_Resume(a1);
}

void sub_19250907C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForANE::Options::AssertValid(uint64_t this)
{
  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(this + 23)) {
      goto LABEL_3;
    }
LABEL_7:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    goto LABEL_10;
  }
  if (!*(void *)(this + 8)) {
    goto LABEL_7;
  }
LABEL_3:
  if ((*(char *)(this + 55) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(this + 55)) {
      return this;
    }
    goto LABEL_9;
  }
  if (!*(void *)(this + 40))
  {
LABEL_9:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Cannot get the ANE architecture from --platform.");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  return this;
}

void sub_192509134(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192509148(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForANE::Run(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  uint64_t v5 = *a3;
  int v173 = a3;
  int v174 = a3[1];
  if (v174 == *a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "At least one entry point is needed.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  long long v207 = 0u;
  long long v208 = 0u;
  int v209 = 1065353216;
  uint64_t v176 = a1;
  do
  {
    uint64_t Function = MIL::IRProgram::GetFunction();
    *(void *)long long v211 = operator new(0x20uLL);
    *(_OWORD *)&v211[8] = xmmword_192DAA350;
    strcpy(*(char **)v211, "FlexibleShapeInformation");
    MIL::IRObject::TryGetAttributeSharedPtr();
    if ((v211[23] & 0x80000000) != 0) {
      operator delete(*(void **)v211);
    }
    *(void *)long long v211 = operator new(0x20uLL);
    *(_OWORD *)&v211[8] = xmmword_192DB5600;
    strcpy(*(char **)v211, "NeuralEngineOptimizedIOBuffer");
    MIL::IRObject::TryGetAttributeSharedPtr();
    if ((v211[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v211);
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)long long v211 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      if (!__dst.__r_.__value_.__l.__size_) {
        goto LABEL_9;
      }
LABEL_8:
      atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
      goto LABEL_9;
    }
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    *(_OWORD *)long long v211 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    if (__dst.__r_.__value_.__l.__size_) {
      goto LABEL_8;
    }
LABEL_9:
    *(void *)&v211[16] = &__p;
    long long v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
    *(_OWORD *)&v210.__r_.__value_.__r.__words[1] = 0uLL;
    v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210.__r_.__value_.__l.__size_;
    unint64_t v10 = v8 + 1;
    long long v9 = (void *)*v8;
    if ((void *)*v8 == v8 + 1)
    {
LABEL_53:
      int8x8_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
      unint64_t v35 = (uint64_t *)(*(uint64_t (**)(void *))(*v34 + 88))(v34);
      uint64_t v37 = *v35;
      uint64_t v36 = v35[1];
      if (*v35 == v36)
      {
        char v40 = 1;
        uint64_t v42 = v176;
        std::__tree<std::string>::destroy((uint64_t)&v210, (char *)v210.__r_.__value_.__l.__size_);
        uint64_t v43 = *(std::__shared_weak_count **)&v211[8];
        if (*(void *)&v211[8]) {
          goto LABEL_73;
        }
      }
      else
      {
        do
        {
          unint64_t v38 = (MIL::IRValueType *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v34[8] + 16))(v34 + 8, v37, 1);
          char v40 = v39;
          v37 += 24;
        }
        while (v37 != v36 && v39);
        uint64_t v42 = v176;
        std::__tree<std::string>::destroy((uint64_t)&v210, (char *)v210.__r_.__value_.__l.__size_);
        uint64_t v43 = *(std::__shared_weak_count **)&v211[8];
        if (*(void *)&v211[8]) {
          goto LABEL_73;
        }
      }
LABEL_74:
      uint64_t v46 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_76;
      }
      goto LABEL_75;
    }
    while (2)
    {
      int v11 = (char **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(&v210, &v210.__r_.__value_.__l.__size_, &v203, &v194, v9 + 4);
      if (*v11)
      {
        unint64_t v12 = (void *)v9[1];
        if (!v12) {
          goto LABEL_43;
        }
        goto LABEL_37;
      }
      uint64_t v13 = (char *)operator new(0x40uLL);
      uint64_t v14 = (std::string *)(v13 + 32);
      if (*((char *)v9 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v9[4], v9[5]);
      }
      else
      {
        long long v15 = *((_OWORD *)v9 + 2);
        *((void *)v13 + 6) = v9[6];
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      *((void *)v13 + 7) = v9[7];
      std::string::size_type v16 = v203.__r_.__value_.__r.__words[0];
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = v16;
      *int v11 = v13;
      if (*(void *)v210.__r_.__value_.__l.__data_)
      {
        v210.__r_.__value_.__r.__words[0] = *(void *)v210.__r_.__value_.__l.__data_;
        uint64_t v13 = *v11;
      }
      std::string::size_type v17 = v210.__r_.__value_.__l.__size_;
      unsigned char v13[24] = v13 == (char *)v210.__r_.__value_.__l.__size_;
      if (v13 == (char *)v17)
      {
LABEL_36:
        ++v210.__r_.__value_.__r.__words[2];
        unint64_t v12 = (void *)v9[1];
        if (!v12) {
          goto LABEL_43;
        }
        goto LABEL_37;
      }
      while (1)
      {
        uint64_t v18 = *((void *)v13 + 2);
        if (*(unsigned char *)(v18 + 24)) {
          goto LABEL_36;
        }
        unint64_t v19 = *(char **)(v18 + 16);
        uint64_t v20 = *(void *)v19;
        if (*(void *)v19 != v18) {
          break;
        }
        uint64_t v23 = *((void *)v19 + 1);
        if (!v23 || (v24 = *(unsigned __int8 *)(v23 + 24), unint64_t v21 = (unsigned char *)(v23 + 24), v24))
        {
          if (*(char **)v18 == v13)
          {
            *(unsigned char *)(v18 + 24) = 1;
            v19[24] = 0;
            uint64_t v27 = *(void *)(v18 + 8);
            *(void *)unint64_t v19 = v27;
            if (v27) {
              goto LABEL_34;
            }
          }
          else
          {
            long long v25 = *(uint64_t **)(v18 + 8);
            uint64_t v26 = *v25;
            *(void *)(v18 + 8) = *v25;
            if (v26)
            {
              *(void *)(v26 + 16) = v18;
              unint64_t v19 = *(char **)(v18 + 16);
            }
            v25[2] = (uint64_t)v19;
            *(void *)(*(void *)(v18 + 16) + 8 * (**(void **)(v18 + 16) != v18)) = v25;
            *long long v25 = v18;
            *(void *)(v18 + 16) = v25;
            unint64_t v19 = (char *)v25[2];
            uint64_t v18 = *(void *)v19;
            *((unsigned char *)v25 + 24) = 1;
            v19[24] = 0;
            uint64_t v27 = *(void *)(v18 + 8);
            *(void *)unint64_t v19 = v27;
            if (v27) {
LABEL_34:
            }
              *(void *)(v27 + 16) = v19;
          }
          *(void *)(v18 + 16) = *((void *)v19 + 2);
          *(void *)(*((void *)v19 + 2) + 8 * (**((void **)v19 + 2) != (void)v19)) = v18;
          *(void *)(v18 + 8) = v19;
          *((void *)v19 + 2) = v18;
          goto LABEL_36;
        }
LABEL_22:
        *(unsigned char *)(v18 + 24) = 1;
        uint64_t v13 = v19;
        v19[24] = v19 == (char *)v17;
        *unint64_t v21 = 1;
        if (v19 == (char *)v17) {
          goto LABEL_36;
        }
      }
      if (v20)
      {
        int v22 = *(unsigned __int8 *)(v20 + 24);
        unint64_t v21 = (unsigned char *)(v20 + 24);
        if (!v22) {
          goto LABEL_22;
        }
      }
      if (*(char **)v18 == v13)
      {
        uint64_t v32 = *((void *)v13 + 1);
        *(void *)uint64_t v18 = v32;
        if (v32)
        {
          *(void *)(v32 + 16) = v18;
          unint64_t v19 = *(char **)(v18 + 16);
        }
        *((void *)v13 + 2) = v19;
        *(void *)(*(void *)(v18 + 16) + 8 * (**(void **)(v18 + 16) != v18)) = v13;
        *((void *)v13 + 1) = v18;
        *(void *)(v18 + 16) = v13;
        unint64_t v19 = (char *)*((void *)v13 + 2);
        unsigned char v13[24] = 1;
        v19[24] = 0;
        long long v29 = (char **)*((void *)v19 + 1);
        BOOL v30 = *v29;
        *((void *)v19 + 1) = *v29;
        if (v30) {
LABEL_41:
        }
          *((void *)v30 + 2) = v19;
      }
      else
      {
        *(unsigned char *)(v18 + 24) = 1;
        v19[24] = 0;
        long long v29 = (char **)*((void *)v19 + 1);
        BOOL v30 = *v29;
        *((void *)v19 + 1) = *v29;
        if (v30) {
          goto LABEL_41;
        }
      }
      void v29[2] = (char *)*((void *)v19 + 2);
      *(void *)(*((void *)v19 + 2) + 8 * (**((void **)v19 + 2) != (void)v19)) = v29;
      void *v29 = v19;
      *((void *)v19 + 2) = v29;
      ++v210.__r_.__value_.__r.__words[2];
      unint64_t v12 = (void *)v9[1];
      if (!v12)
      {
        do
        {
LABEL_43:
          float v28 = (void *)v9[2];
          BOOL v31 = *v28 == (void)v9;
          long long v9 = v28;
        }
        while (!v31);
        goto LABEL_11;
      }
      do
      {
LABEL_37:
        float v28 = v12;
        unint64_t v12 = (void *)*v12;
      }
      while (v12);
LABEL_11:
      long long v9 = v28;
      if (v28 != v10) {
        continue;
      }
      break;
    }
    std::string::size_type v33 = v210.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v210.__r_.__value_.__l.__data_ == &v210.__r_.__value_.__r.__words[1]) {
      goto LABEL_53;
    }
    {
      long long v44 = *(std::string **)(v33 + 8);
      if (v44)
      {
        do
        {
          long long v45 = v44;
          long long v44 = (std::string *)v44->__r_.__value_.__r.__words[0];
        }
        while (v44);
      }
      else
      {
        do
        {
          long long v45 = *(std::string **)(v33 + 16);
          BOOL v31 = v45->__r_.__value_.__r.__words[0] == v33;
          std::string::size_type v33 = (std::string::size_type)v45;
        }
        while (!v31);
      }
      std::string::size_type v33 = (std::string::size_type)v45;
      if (v45 == (std::string *)&v210.__r_.__value_.__r.__words[1]) {
        goto LABEL_53;
      }
    }
    char v40 = 0;
    uint64_t v42 = v176;
    std::__tree<std::string>::destroy((uint64_t)&v210, (char *)v210.__r_.__value_.__l.__size_);
    uint64_t v43 = *(std::__shared_weak_count **)&v211[8];
    if (!*(void *)&v211[8]) {
      goto LABEL_74;
    }
LABEL_73:
    if (atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_74;
    }
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    uint64_t v46 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
    {
LABEL_76:
      long long v47 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_) {
        goto LABEL_77;
      }
      goto LABEL_82;
    }
LABEL_75:
    if (atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_76;
    }
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    long long v47 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
LABEL_77:
      if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
LABEL_82:
    if ((v40 & 1) == 0)
    {
      std::to_string(&__dst, 0x40uLL);
      std::string::size_type v164 = std::string::insert(&__dst, 0, "Input or output row or plane stride is not aligned with ");
      long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
      v210.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v165;
      v164->__r_.__value_.__l.__size_ = 0;
      v164->__r_.__value_.__r.__words[2] = 0;
      v164->__r_.__value_.__r.__words[0] = 0;
      uint8x8_t v166 = std::string::append(&v210, " bytes.");
      long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
      *(void *)&v211[16] = *((void *)&v166->__r_.__value_.__l + 2);
      *(_OWORD *)long long v211 = v167;
      v166->__r_.__value_.__l.__size_ = 0;
      v166->__r_.__value_.__r.__words[2] = 0;
      v166->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v210.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v168, (const std::string *)v211);
      __cxa_throw(v168, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)a2 + 64))(v211);
    v210.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    char v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v207, v5, (uint64_t)&std::piecewise_construct, (long long **)&v210);
    long long v49 = *(_OWORD *)v211;
    *(_OWORD *)long long v211 = 0uLL;
    uint64_t v50 = (std::__shared_weak_count *)*((void *)v48 + 6);
    *(_OWORD *)(v48 + 40) = v49;
    if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      uint64_t v51 = *(std::__shared_weak_count **)&v211[8];
      if (*(void *)&v211[8]) {
        goto LABEL_86;
      }
    }
    else
    {
      uint64_t v51 = *(std::__shared_weak_count **)&v211[8];
      if (*(void *)&v211[8])
      {
LABEL_86:
        if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
    }
    Espresso::AOT::GetCallees(a2, (uint64_t)v211);
    uint64_t v52 = *(void **)&v211[16];
    if (*(void *)&v211[16])
    {
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>((uint64_t)&v207, (uint64_t)(v52 + 2), (uint64_t)(v52 + 2));
        uint64_t v52 = (void *)*v52;
      }
      while (v52);
      uint64_t v53 = *(void ***)&v211[16];
      if (*(void *)&v211[16])
      {
        do
        {
          while (1)
          {
            char v54 = (void **)*v53;
            std::basic_string_view<_CharT, _Traits>::size_type v55 = (std::__shared_weak_count *)v53[6];
            if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            if (*((char *)v53 + 39) < 0) {
              break;
            }
            operator delete(v53);
            uint64_t v53 = v54;
            if (!v54) {
              goto LABEL_99;
            }
          }
          operator delete(v53[2]);
          operator delete(v53);
          uint64_t v53 = v54;
        }
        while (v54);
      }
    }
LABEL_99:
    std::string v56 = *(void **)v211;
    *(void *)long long v211 = 0;
    if (v56) {
      operator delete(v56);
    }
    v5 += 24;
  }
  while (v5 != v174);
  Espresso::AOT::MakeIRProgramWithFunctions((uint64_t)&v207, 1, &v205);
  char v58 = *v173;
  std::basic_string_view<_CharT, _Traits>::size_type v57 = v173[1];
  if (*v173 == v57) {
    goto LABEL_207;
  }
  while (1)
  {
    Espresso::AOT::RequireDecompositionForANE((uint64_t **)v211);
    long long v59 = *(_OWORD *)v211;
    if (*(void *)v211)
    {
      *(void *)&v211[8] = *(void *)v211;
      operator delete((void *)v59);
    }
    if ((void)v59 != *((void *)&v59 + 1)) {
      break;
    }
    v58 += 24;
    if (v58 == v57) {
      goto LABEL_207;
    }
  }
  int v60 = (MIL::Opsets::Common *)(*(uint64_t (**)(uint64_t))(*(void *)v205 + 40))(v205);
  MIL::Opsets::Common::RegisterIos18Decompositions(v60, v61);
  uint64_t v62 = 0;
  *(_OWORD *)&v210.__r_.__value_.__r.__words[1] = 0uLL;
  char v63 = off_1E5746B70;
  v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210.__r_.__value_.__l.__size_;
  while (2)
  {
    (*(void (**)(uint64_t))(*(void *)v205 + 40))(v205);
    vimage2espresso_param __src = *v63;
    size_t v64 = strlen(*v63);
    if (v64 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v65 = v64;
    if (v64 >= 0x17)
    {
      uint64_t v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v64 | 7) != 0x17) {
        uint64_t v67 = v64 | 7;
      }
      uint64_t v68 = v67 + 1;
      p_dst = (std::string *)operator new(v67 + 1);
      __dst.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      __dst.__r_.__value_.__l.__size_ = v65;
      goto LABEL_116;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v64;
    p_dst = &__dst;
    if (v64) {
LABEL_116:
    }
      memmove(p_dst, __src, v65);
    uint64_t v175 = v62;
    p_dst->__r_.__value_.__s.__data_[v65] = 0;
    Opset = (MIL::IROpset *)MIL::MILContext::GetOpset();
    MIL::IROpset::GetReversedOperatorNamesMap((uint64_t *)v211, Opset);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      uint64_t v70 = *(uint64_t ***)&v211[16];
      if (!*(void *)&v211[16]) {
        goto LABEL_199;
      }
      while (1)
      {
        while (1)
        {
LABEL_124:
          *((unsigned char *)&v203.__r_.__value_.__s + 23) = 2;
          strcpy((char *)&v203, "::");
          uint64_t v71 = std::string::insert(&v203, 0, __src);
          long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v72;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          int v73 = *((char *)v70 + 63);
          uint64_t v74 = v73 >= 0 ? (const std::string::value_type *)(v70 + 5) : (const std::string::value_type *)v70[5];
          std::string::size_type v75 = v73 >= 0 ? *((unsigned __int8 *)v70 + 63) : (std::string::size_type)v70[6];
          int v76 = std::string::append(&__p, v74, v75);
          std::string __dst = *v76;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v77 = v210.__r_.__value_.__l.__size_;
          p_std::string::size_type size = &v210.__r_.__value_.__l.__size_;
          long long v79 = &v210.__r_.__value_.__l.__size_;
          if (v210.__r_.__value_.__l.__size_)
          {
            char v80 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            std::string::size_type v81 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
                : __dst.__r_.__value_.__l.__size_;
            int v82 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__dst
                : (std::string *)__dst.__r_.__value_.__r.__words[0];
            while (1)
            {
              while (1)
              {
                long long v79 = (std::string::size_type *)v77;
                uint64_t v85 = *(const void **)(v77 + 32);
                std::string::size_type v83 = v77 + 32;
                uint64_t v84 = v85;
                int v86 = *(char *)(v83 + 23);
                if (v86 >= 0) {
                  size_t v87 = *(unsigned __int8 *)(v83 + 23);
                }
                else {
                  size_t v87 = *(void *)(v83 + 8);
                }
                if (v86 >= 0) {
                  std::string::size_type v88 = (const void *)v83;
                }
                else {
                  std::string::size_type v88 = v84;
                }
                if (v87 >= v81) {
                  size_t v89 = v81;
                }
                else {
                  size_t v89 = v87;
                }
                int v90 = memcmp(v82, v88, v89);
                BOOL v91 = v81 < v87;
                if (v90) {
                  BOOL v91 = v90 < 0;
                }
                if (!v91) {
                  break;
                }
                std::string::size_type v77 = *v79;
                p_std::string::size_type size = v79;
                if (!*v79) {
                  goto LABEL_155;
                }
              }
              int v92 = memcmp(v88, v82, v89);
              BOOL v93 = v87 < v81;
              if (v92) {
                BOOL v93 = v92 < 0;
              }
              if (!v93) {
                break;
              }
              std::string::size_type v77 = v79[1];
              if (!v77)
              {
                p_std::string::size_type size = v79 + 1;
                goto LABEL_155;
              }
            }
          }
          else
          {
LABEL_155:
            size_t v94 = (char *)operator new(0x38uLL);
            *(std::string *)(v94 + 32) = __dst;
            memset(&__dst, 0, sizeof(__dst));
            *(void *)size_t v94 = 0;
            *((void *)v94 + 1) = 0;
            *((void *)v94 + 2) = v79;
            *p_std::string::size_type size = (std::string::size_type)v94;
            if (*(void *)v210.__r_.__value_.__l.__data_)
            {
              v210.__r_.__value_.__r.__words[0] = *(void *)v210.__r_.__value_.__l.__data_;
              size_t v94 = (char *)*p_size;
            }
            std::string::size_type v95 = v210.__r_.__value_.__l.__size_;
            v94[24] = v94 == (char *)v210.__r_.__value_.__l.__size_;
            if (v94 != (char *)v95)
            {
              do
              {
                uint64_t v96 = *((void *)v94 + 2);
                if (*(unsigned char *)(v96 + 24)) {
                  break;
                }
                unint64_t v97 = *(unsigned char **)(v96 + 16);
                uint64_t v98 = *(void *)v97;
                if (*(void *)v97 == v96)
                {
                  uint64_t v101 = *((void *)v97 + 1);
                  if (!v101 || (v102 = *(unsigned __int8 *)(v101 + 24), std::string::size_type v99 = (unsigned char *)(v101 + 24), v102))
                  {
                    if (*(char **)v96 == v94)
                    {
                      *(unsigned char *)(v96 + 24) = 1;
                      v97[24] = 0;
                      uint64_t v105 = *(void *)(v96 + 8);
                      *(void *)unint64_t v97 = v105;
                      if (v105) {
                        goto LABEL_171;
                      }
                    }
                    else
                    {
                      uint8x8_t v103 = *(uint64_t **)(v96 + 8);
                      uint64_t v104 = *v103;
                      *(void *)(v96 + 8) = *v103;
                      if (v104)
                      {
                        *(void *)(v104 + 16) = v96;
                        unint64_t v97 = *(unsigned char **)(v96 + 16);
                      }
                      v103[2] = (uint64_t)v97;
                      *(void *)(*(void *)(v96 + 16) + 8 * (**(void **)(v96 + 16) != v96)) = v103;
                      *uint8x8_t v103 = v96;
                      *(void *)(v96 + 16) = v103;
                      unint64_t v97 = (unsigned char *)v103[2];
                      uint64_t v96 = *(void *)v97;
                      *((unsigned char *)v103 + 24) = 1;
                      v97[24] = 0;
                      uint64_t v105 = *(void *)(v96 + 8);
                      *(void *)unint64_t v97 = v105;
                      if (v105) {
LABEL_171:
                      }
                        *(void *)(v105 + 16) = v97;
                    }
                    *(void *)(v96 + 16) = *((void *)v97 + 2);
                    *(void *)(*((void *)v97 + 2) + 8 * (**((void **)v97 + 2) != (void)v97)) = v96;
                    *(void *)(v96 + 8) = v97;
LABEL_177:
                    *((void *)v97 + 2) = v96;
                    break;
                  }
                }
                else if (!v98 || (v100 = *(unsigned __int8 *)(v98 + 24), std::string::size_type v99 = (unsigned char *)(v98 + 24), v100))
                {
                  if (*(char **)v96 == v94)
                  {
                    uint64_t v107 = *((void *)v94 + 1);
                    *(void *)uint64_t v96 = v107;
                    if (v107)
                    {
                      *(void *)(v107 + 16) = v96;
                      unint64_t v97 = *(unsigned char **)(v96 + 16);
                    }
                    *((void *)v94 + 2) = v97;
                    *(void *)(*(void *)(v96 + 16) + 8 * (**(void **)(v96 + 16) != v96)) = v94;
                    *((void *)v94 + 1) = v96;
                    *(void *)(v96 + 16) = v94;
                    unint64_t v97 = (unsigned char *)*((void *)v94 + 2);
                    v94[24] = 1;
                    v97[24] = 0;
                    uint64_t v96 = *((void *)v97 + 1);
                    std::string::size_type v106 = *(char **)v96;
                    *((void *)v97 + 1) = *(void *)v96;
                    if (v106) {
LABEL_175:
                    }
                      *((void *)v106 + 2) = v97;
                  }
                  else
                  {
                    *(unsigned char *)(v96 + 24) = 1;
                    v97[24] = 0;
                    uint64_t v96 = *((void *)v97 + 1);
                    std::string::size_type v106 = *(char **)v96;
                    *((void *)v97 + 1) = *(void *)v96;
                    if (v106) {
                      goto LABEL_175;
                    }
                  }
                  *(void *)(v96 + 16) = *((void *)v97 + 2);
                  *(void *)(*((void *)v97 + 2) + 8 * (**((void **)v97 + 2) != (void)v97)) = v96;
                  *(void *)uint64_t v96 = v97;
                  goto LABEL_177;
                }
                *(unsigned char *)(v96 + 24) = 1;
                size_t v94 = v97;
                v97[24] = v97 == (unsigned char *)v95;
                *std::string::size_type v99 = 1;
              }
              while (v97 != (unsigned char *)v95);
            }
            ++v210.__r_.__value_.__r.__words[2];
            char v80 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          if ((v80 & 0x80) == 0) {
            break;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_122;
          }
LABEL_183:
          if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_123;
          }
LABEL_184:
          operator delete(v203.__r_.__value_.__l.__data_);
          uint64_t v70 = (uint64_t **)*v70;
          if (!v70)
          {
LABEL_192:
            uint64_t v108 = *(uint64_t ***)&v211[16];
            if (!*(void *)&v211[16]) {
              goto LABEL_199;
            }
            while (1)
            {
              unint64_t v109 = *v108;
              if (*((char *)v108 + 63) < 0)
              {
                operator delete(v108[5]);
                if ((*((char *)v108 + 39) & 0x80000000) == 0) {
                  goto LABEL_195;
                }
              }
              else if ((*((char *)v108 + 39) & 0x80000000) == 0)
              {
LABEL_195:
                operator delete(v108);
                uint64_t v108 = (uint64_t **)v109;
                if (!v109) {
                  goto LABEL_199;
                }
                continue;
              }
              operator delete(v108[2]);
              operator delete(v108);
              uint64_t v108 = (uint64_t **)v109;
              if (!v109) {
                goto LABEL_199;
              }
            }
          }
        }
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_183;
        }
LABEL_122:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_184;
        }
LABEL_123:
        uint64_t v70 = (uint64_t **)*v70;
        if (!v70) {
          goto LABEL_192;
        }
      }
    }
    uint64_t v70 = *(uint64_t ***)&v211[16];
    if (*(void *)&v211[16]) {
      goto LABEL_124;
    }
LABEL_199:
    uint64_t v110 = *(void **)v211;
    *(void *)long long v211 = 0;
    if (v110) {
      operator delete(v110);
    }
    char v63 = &off_1E5746B70[v175 + 1];
    uint64_t v62 = v175 + 1;
    if (v175 != 3) {
      continue;
    }
    break;
  }
  *(void *)long long v211 = operator new(0x28uLL);
  *(_OWORD *)&v211[8] = xmmword_192DB16A0;
  strcpy(*(char **)v211, "ios18::scaled_dot_product_attention");
  std::__tree<std::string>::__erase_unique<std::string>(&v210, v211);
  uint64_t v42 = v176;
  if ((v211[23] & 0x80000000) != 0) {
    operator delete(*(void **)v211);
  }
  uint64_t v111 = (*(uint64_t (**)(uint64_t))(*(void *)v205 + 40))(v205);
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v111 + 56))(v211);
  uint64_t v112 = *(void *)v211;
  *(void *)long long v211 = 0;
  uint64_t v113 = v205;
  uint64_t v205 = v112;
  if (v113)
  {
    (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
    uint64_t v114 = *(void *)v211;
    *(void *)long long v211 = 0;
    if (v114) {
      (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v210, (char *)v210.__r_.__value_.__l.__size_);
LABEL_207:
  MIL::Attributes::BlobFileMutabilityInfo::Make();
  std::string::size_type v115 = v202;
  if (v202) {
    MIL::Attributes::BlobFileMutabilityInfo::Replace();
  }
  v211[23] = 14;
  strcpy(v211, "ANEBinaryPoint");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if ((v211[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v211);
    uint64_t v116 = v200;
    if (!v200) {
      goto LABEL_219;
    }
LABEL_213:
    char v199 = 14;
    strcpy((char *)v198, "ANEBinaryPoint");
    uint64_t v196 = v116;
    std::string::size_type v197 = v201;
    if (v201) {
      atomic_fetch_add_explicit(&v201->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::IRObject::SetAttribute();
    int8x8_t v117 = v197;
    if (v197 && !atomic_fetch_add(&v197->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
      if ((v199 & 0x80000000) == 0) {
        goto LABEL_219;
      }
    }
    else if ((v199 & 0x80000000) == 0)
    {
      goto LABEL_219;
    }
    operator delete(v198[0]);
    goto LABEL_219;
  }
  uint64_t v116 = v200;
  if (v200) {
    goto LABEL_213;
  }
LABEL_219:
  unint64_t v119 = *v173;
  BOOL v118 = v173[1];
  if (v118 == *v173) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if ((char)v119[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v119, *((void *)v119 + 1));
    unint64_t v119 = *v173;
    BOOL v118 = v173[1];
  }
  else
  {
    long long v120 = *(_OWORD *)v119;
    __dst.__r_.__value_.__r.__words[2] = *((void *)v119 + 2);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v120;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v118 - v119) >> 3) >= 2) {
    MEMORY[0x192FF0F50](&__dst, "multiprocedure");
  }
  memset(&__p, 0, sizeof(__p));
  char v121 = *(unsigned char *)(v42 + 287);
  if (v121 >= 0) {
    std::string::size_type v122 = (std::string *)(v42 + 264);
  }
  else {
    std::string::size_type v122 = *(std::string **)(v42 + 264);
  }
  if (v121 >= 0) {
    uint64_t v123 = *(unsigned __int8 *)(v42 + 287);
  }
  else {
    uint64_t v123 = *(void *)(v42 + 272);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v122, (std::string *)((char *)v122 + v123));
  memset(v211, 0, 24);
  std::string::size_type v124 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v125 = &__dst;
  }
  else {
    uint64_t v125 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v124 = __dst.__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>((std::string *)v211, v125, (std::string *)((char *)v125 + v124));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v211, (uint64_t)&__p, (std::__fs::filesystem::path *)&v203);
  if ((v211[23] & 0x80000000) != 0) {
    operator delete(*(void **)v211);
  }
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v203, 0);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v203, 0);
  size_t v127 = Espresso::espresso_os_log_subsystem(0, v126);
  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG)) {
    Espresso::AOT::MILCompilerForANE::Run((uint64_t *)&v203, (uint64_t)v195, v127);
  }

  memset(v211, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>((std::string *)v211, (std::string *)"ane_mil_model", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v211, (uint64_t)&v203, &v194);
  if ((v211[23] & 0x80000000) != 0) {
    operator delete(*(void **)v211);
  }
  std::__fs::filesystem::__create_directories(&v194, 0);
  memset(v211, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>((std::string *)v211, (std::string *)"model.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v211, (uint64_t)&v194, &v193);
  if ((v211[23] & 0x80000000) != 0) {
    operator delete(*(void **)v211);
  }
  *(_DWORD *)((char *)v192 + 3) = 0;
  v192[0] = 0;
  if (!Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)v42)
    && !*(unsigned char *)(v42 + 288))
  {
    uint64_t v133 = v205;
    if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, v193.__pn_.__r_.__value_.__l.__data_, v193.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = v193.__pn_;
    }
    if (SHIBYTE(v194.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v187, v194.__pn_.__r_.__value_.__l.__data_, v194.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string v187 = v194.__pn_;
    }
    v185[0] = 0;
    v185[1] = 0;
    uint64_t v186 = 0;
    Espresso::MILUtil::SerializeProgram(v133, (uint64_t)&pn, (uint64_t)&v187, (uint64_t)v185, 0x100000004, 0);
    if (SHIBYTE(v186) < 0)
    {
      operator delete(v185[0]);
      if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_276:
        unint64_t v129 = 0;
        int v130 = 0;
        if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_277;
        }
LABEL_352:
        p_std::string pn = &pn;
        goto LABEL_265;
      }
    }
    else if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_276;
    }
    operator delete(v187.__r_.__value_.__l.__data_);
    unint64_t v129 = 0;
    int v130 = 0;
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_277;
    }
    goto LABEL_352;
  }
  if (SHIBYTE(v194.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v211, v194.__pn_.__r_.__value_.__l.__data_, v194.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    *(std::__fs::filesystem::path *)long long v211 = v194;
  }
  std::string::size_type v128 = *(void *)&v211[8];
  unint64_t v129 = *(std::string::value_type **)v211;
  v192[0] = *(_DWORD *)&v211[16];
  *(_DWORD *)((char *)v192 + 3) = *(_DWORD *)&v211[19];
  int v130 = v211[23];
  uint64_t v131 = v205;
  if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v191, v193.__pn_.__r_.__value_.__l.__data_, v193.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v191 = v193.__pn_;
  }
  if (SHIBYTE(v194.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v190, v194.__pn_.__r_.__value_.__l.__data_, v194.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v190 = v194.__pn_;
  }
  if (v130 < 0)
  {
    std::string::__init_copy_ctor_external(&v189, v129, v128);
  }
  else
  {
    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
    v189.__r_.__value_.__l.__size_ = v128;
    LODWORD(v189.__r_.__value_.__r.__words[2]) = v192[0];
    *(_DWORD *)((char *)&v189.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v192 + 3);
    *((unsigned char *)&v189.__r_.__value_.__s + 23) = v130;
  }
  Espresso::MILUtil::SerializeProgramWithWeightsDirectory(v131, (uint64_t)&v191, (uint64_t)&v190, (uint64_t)&v189, 0x100000004, v115 != 0);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v189.__r_.__value_.__l.__data_);
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_263;
    }
LABEL_260:
    if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_277;
    }
LABEL_264:
    p_std::string pn = &v191;
LABEL_265:
    operator delete(p_pn->__r_.__value_.__l.__data_);
    goto LABEL_277;
  }
  if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_260;
  }
LABEL_263:
  operator delete(v190.__r_.__value_.__l.__data_);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_264;
  }
LABEL_277:
  if (!*(unsigned char *)(v42 + 288))
  {
    memset(v211, 0, 24);
    std::string::append[abi:ne180100]<char const*,0>((std::string *)v211, (std::string *)"model.hwx", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v211, (uint64_t)&v203, (std::__fs::filesystem::path *)&v210);
    if ((v211[23] & 0x80000000) != 0) {
      operator delete(*(void **)v211);
    }
    std::__fs::filesystem::path::__string_view v136 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&__p);
    if (v136.__size_ > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v136.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v146 = (v136.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v136.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v146 = v136.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v147 = v146 + 1;
      long long v137 = operator new(v146 + 1);
      *(void *)&v211[8] = v136.__size_;
      *(void *)&v211[16] = v147 | 0x8000000000000000;
      *(void *)long long v211 = v137;
    }
    else
    {
      v211[23] = v136.__size_;
      long long v137 = v211;
      if (!v136.__size_)
      {
LABEL_323:
        v137[v136.__size_] = 0;
        std::string v181 = *(std::string *)v211;
        std::__fs::filesystem::path::lexically_relative((std::__fs::filesystem::path *)&v182, (const std::__fs::filesystem::path *)&v210, (const std::__fs::filesystem::path *)&v181);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v181.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_325;
          }
        }
        else if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_325:
          *(std::string *)long long v211 = v182;
          goto LABEL_328;
        }
        std::string::__init_copy_ctor_external((std::string *)v211, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
LABEL_328:
        uint64_t v148 = (void **)(v42 + 392);
        if (*(char *)(v42 + 415) < 0) {
          operator delete(*v148);
        }
        *(_OWORD *)uint64_t v148 = *(_OWORD *)v211;
        *(void *)(v42 + 408) = *(void *)&v211[16];
        std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&v210, 0);
        if (Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)v42))
        {
          uint64_t v150 = Espresso::espresso_os_log_subsystem(0, v149);
          if (os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG)) {
            Espresso::AOT::MILCompilerForANE::Run(v150);
          }

          memset(v211, 0, 24);
          std::string::append[abi:ne180100]<char const*,0>((std::string *)v211, (std::string *)"model.anehash", (std::string *)"");
          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v211, (uint64_t)&v203, (std::__fs::filesystem::path *)&v181);
          if ((v211[23] & 0x80000000) != 0) {
            operator delete(*(void **)v211);
          }
          std::__fs::filesystem::path::__string_view v151 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&__p);
          if (v151.__size_ > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v151.__size_ >= 0x17)
          {
            std::basic_string_view<_CharT, _Traits>::size_type v154 = (v151.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v151.__size_ | 7) != 0x17) {
              std::basic_string_view<_CharT, _Traits>::size_type v154 = v151.__size_ | 7;
            }
            std::basic_string_view<_CharT, _Traits>::size_type v155 = v154 + 1;
            uint64_t v152 = operator new(v154 + 1);
            *(void *)&v211[8] = v151.__size_;
            *(void *)&v211[16] = v155 | 0x8000000000000000;
            *(void *)long long v211 = v152;
          }
          else
          {
            v211[23] = v151.__size_;
            uint64_t v152 = v211;
            if (!v151.__size_)
            {
LABEL_347:
              v152[v151.__size_] = 0;
              std::__fs::filesystem::path __base = *(std::__fs::filesystem::path *)v211;
              std::__fs::filesystem::path::lexically_relative(&v180, (const std::__fs::filesystem::path *)&v181, &__base);
              if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__base.__pn_.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v180.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_349;
                }
              }
              else if ((SHIBYTE(v180.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_349:
                *(std::__fs::filesystem::path *)long long v211 = v180;
                goto LABEL_367;
              }
              std::string::__init_copy_ctor_external((std::string *)v211, v180.__pn_.__r_.__value_.__l.__data_, v180.__pn_.__r_.__value_.__l.__size_);
LABEL_367:
              if (*(char *)(v42 + 415) < 0)
              {
                operator delete(*v148);
                *(_OWORD *)uint64_t v148 = *(_OWORD *)v211;
                *(void *)(v42 + 408) = *(void *)&v211[16];
                if ((SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_369;
                }
              }
              else
              {
                *(_OWORD *)uint64_t v148 = *(_OWORD *)v211;
                *(void *)(v42 + 408) = *(void *)&v211[16];
                if ((SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_369:
                  *(std::__fs::filesystem::path *)long long v211 = v193;
                  goto LABEL_372;
                }
              }
              std::string::__init_copy_ctor_external((std::string *)v211, v193.__pn_.__r_.__value_.__l.__data_, v193.__pn_.__r_.__value_.__l.__size_);
LABEL_372:
              if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&__base.__pn_, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
              }
              else {
                __base.__pn_ = v181;
              }
              Espresso::AOT::MILCompilerForANE::CompileUsingANEF(v42, (std::string::size_type)v211, (std::string::size_type)&__base);
              if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__base.__pn_.__r_.__value_.__l.__data_);
                if ((v211[23] & 0x80000000) == 0)
                {
LABEL_377:
                  if ((SHIBYTE(v180.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_378;
                  }
                  goto LABEL_416;
                }
              }
              else if ((v211[23] & 0x80000000) == 0)
              {
                goto LABEL_377;
              }
              operator delete(*(void **)v211);
              if ((SHIBYTE(v180.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_378:
                if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_379;
                }
LABEL_417:
                operator delete(v181.__r_.__value_.__l.__data_);
                goto LABEL_379;
              }
LABEL_416:
              operator delete(v180.__pn_.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_379;
              }
              goto LABEL_417;
            }
          }
          memmove(v152, v151.__data_, v151.__size_);
          goto LABEL_347;
        }
        uint64_t v153 = Espresso::espresso_os_log_subsystem(0, v149);
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG)) {
          Espresso::AOT::MILCompilerForANE::Run(v153);
        }

        if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v211, v193.__pn_.__r_.__value_.__l.__data_, v193.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          *(std::__fs::filesystem::path *)long long v211 = v193;
        }
        if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v181, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
        }
        else {
          std::string v181 = v210;
        }
        Espresso::AOT::MILCompilerForANE::CompileUsingANEC(v42, (std::string *)v211, (uint64_t *)&v181);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v181.__r_.__value_.__l.__data_);
          if ((v211[23] & 0x80000000) == 0) {
            goto LABEL_359;
          }
        }
        else if ((v211[23] & 0x80000000) == 0)
        {
LABEL_359:
          std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v210, 0);
          if (v211[0] == 255 || !v211[0])
          {
            if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v181, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
            }
            else {
              std::string v181 = v210;
            }
            uint64_t v170 = std::string::insert(&v181, 0, "Macho not found at the path ");
            long long v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
            *(void *)&v211[16] = *((void *)&v170->__r_.__value_.__l + 2);
            *(_OWORD *)long long v211 = v171;
            v170->__r_.__value_.__l.__size_ = 0;
            v170->__r_.__value_.__r.__words[2] = 0;
            v170->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v181.__r_.__value_.__l.__data_);
            }
            uint64_t v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v172, (const std::string *)v211);
            __cxa_throw(v172, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_379:
          std::__fs::filesystem::__remove_all(&v194, 0);
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v182.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v210.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_381;
            }
          }
          else if ((SHIBYTE(v210.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_381;
          }
          operator delete(v210.__r_.__value_.__l.__data_);
          if ((v130 & 0x80000000) == 0) {
            goto LABEL_382;
          }
          goto LABEL_391;
        }
        operator delete(*(void **)v211);
        goto LABEL_359;
      }
    }
    memmove(v137, v136.__data_, v136.__size_);
    goto LABEL_323;
  }
  memset(v211, 0, sizeof(v211));
  int v212 = 1065353216;
  unsigned int v213 = 0;
  size_t v134 = (const std::string::value_type **)(v42 + 320);
  if (*(char *)(v42 + 343) < 0)
  {
    std::string::size_type v138 = *(void *)(v42 + 328);
    if (!v138) {
      goto LABEL_291;
    }
    std::string::__init_copy_ctor_external(&v210, *v134, v138);
    unsigned int v135 = v213;
    if (v213 != -1) {
LABEL_289:
    }
      ((void (*)(std::string *, unsigned char *))off_1EE39B958[v135])(&v182, v211);
    *(std::string *)long long v211 = v210;
    unsigned int v213 = 1;
  }
  else
  {
    if (*(unsigned char *)(v42 + 343))
    {
      unsigned int v135 = 0;
      *(_OWORD *)&v210.__r_.__value_.__l.__data_ = *(_OWORD *)v134;
      v210.__r_.__value_.__r.__words[2] = *(void *)(v42 + 336);
      goto LABEL_289;
    }
LABEL_291:
    if (v211 != (unsigned char *)(v42 + 344))
    {
      int v212 = *(_DWORD *)(v42 + 376);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v211, *(uint64_t **)(v42 + 360), 0);
    }
  }
  if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v181, v193.__pn_.__r_.__value_.__l.__data_, v193.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v181 = v193.__pn_;
  }
  std::__fs::filesystem::path::__string_view v139 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&v181);
  if (v139.__size_ > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v139.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v141 = (v139.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v139.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v141 = v139.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v142 = v141 + 1;
    long long v140 = operator new(v141 + 1);
    v210.__r_.__value_.__l.__size_ = v139.__size_;
    v210.__r_.__value_.__r.__words[2] = v142 | 0x8000000000000000;
    v210.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
    goto LABEL_303;
  }
  *((unsigned char *)&v210.__r_.__value_.__s + 23) = v139.__size_;
  long long v140 = &v210;
  if (v139.__size_) {
LABEL_303:
  }
    memmove(v140, v139.__data_, v139.__size_);
  *((unsigned char *)v140 + v139.__size_) = 0;
  std::string::size_type v143 = (void *)v210.__r_.__value_.__r.__words[0];
  LODWORD(v180.__pn_.__r_.__value_.__l.__data_) = v210.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v180.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v210.__r_.__value_.__r.__words[2]
                                                                            + 3);
  int v144 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v182, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v182.__r_.__value_.__l.__data_ = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
    LODWORD(v182.__r_.__value_.__r.__words[2]) = v180.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v182.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v180.__pn_.__r_.__value_.__r.__words
                                                                            + 3);
    *((unsigned char *)&v182.__r_.__value_.__s + 23) = *((unsigned char *)&v210.__r_.__value_.__s + 23);
  }
  if (v184 && SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v183.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v144 & 0x80000000) == 0) {
      goto LABEL_312;
    }
LABEL_316:
    operator delete(v143);
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_317;
    }
LABEL_313:
    uint64_t v145 = v213;
    if (v213 == -1) {
      goto LABEL_381;
    }
LABEL_318:
    ((void (*)(std::string *, unsigned char *))off_1EE39B958[v145])(&v210, v211);
    goto LABEL_381;
  }
  operator delete(v182.__r_.__value_.__l.__data_);
  if (v144 < 0) {
    goto LABEL_316;
  }
LABEL_312:
  if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_313;
  }
LABEL_317:
  operator delete(v181.__r_.__value_.__l.__data_);
  uint64_t v145 = v213;
  if (v213 != -1) {
    goto LABEL_318;
  }
LABEL_381:
  if ((v130 & 0x80000000) == 0)
  {
LABEL_382:
    if ((SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_383;
    }
LABEL_392:
    operator delete(v193.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v194.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_393;
    }
LABEL_384:
    if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_385;
    }
LABEL_394:
    operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_395;
    }
LABEL_386:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_387;
    }
LABEL_396:
    operator delete(__dst.__r_.__value_.__l.__data_);
    unint64_t v156 = v201;
    if (v201) {
      goto LABEL_397;
    }
    goto LABEL_399;
  }
LABEL_391:
  operator delete(v129);
  if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_392;
  }
LABEL_383:
  if ((SHIBYTE(v194.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_384;
  }
LABEL_393:
  operator delete(v194.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_394;
  }
LABEL_385:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_386;
  }
LABEL_395:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_396;
  }
LABEL_387:
  unint64_t v156 = v201;
  if (v201)
  {
LABEL_397:
    if (!atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
LABEL_399:
  uint64_t v157 = v202;
  uint64_t v202 = 0;
  if (v157)
  {
    MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(v157);
    MEMORY[0x192FF16B0]();
  }
  uint64_t v158 = v205;
  uint64_t v205 = 0;
  if (v158) {
    (*(void (**)(uint64_t))(*(void *)v158 + 8))(v158);
  }
  long long v159 = (void **)v208;
  if ((void)v208)
  {
    do
    {
      while (1)
      {
        uint64_t v160 = (void **)*v159;
        unint64_t v161 = (std::__shared_weak_count *)v159[6];
        if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
        if (*((char *)v159 + 39) < 0) {
          break;
        }
        operator delete(v159);
        long long v159 = v160;
        if (!v160) {
          goto LABEL_411;
        }
      }
      operator delete(v159[2]);
      operator delete(v159);
      long long v159 = v160;
    }
    while (v160);
  }
LABEL_411:
  v162 = (void *)v207;
  *(void *)&long long v207 = 0;
  if (v162) {
    operator delete(v162);
  }
  return kdebug_trace();
}

void sub_19250B0E4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v77 - 137) < 0)
  {
    operator delete(*(void **)(v77 - 160));
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_6:
    if (a31 < 0) {
      operator delete(a26);
    }
    if (a2 == 2)
    {
      char v80 = __cxa_begin_catch(a1);
      std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&a70, 0);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      int v82 = (const char *)(*(uint64_t (**)(void *))(*(void *)v80 + 16))(v80);
      std::runtime_error::runtime_error(exception, v82);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (a38 < 0) {
      operator delete(a33);
    }
    if (*(char *)(v77 - 169) < 0) {
      operator delete(*(void **)(v77 - 192));
    }
    if (v76 < 0) {
      operator delete(v75);
    }
    if (a69 < 0) {
      operator delete(a64);
    }
    if (a71 < 0) {
      operator delete(a70);
    }
    if (a75 < 0) {
      operator delete(a74);
    }
    if (SLOBYTE(STACK[0x217]) < 0) {
      operator delete((void *)STACK[0x200]);
    }
    if (SLOBYTE(STACK[0x237]) < 0) {
      operator delete((void *)STACK[0x220]);
    }
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
    std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo>::~unique_ptr[abi:ne180100](&a73);
    JUMPOUT(0x19250B87CLL);
  }
  operator delete(__p);
  goto LABEL_6;
}

void sub_19250B440()
{
  __cxa_free_exception(v0);
  __cxa_end_catch();
  JUMPOUT(0x19250B5ECLL);
}

void sub_19250B47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((v77 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v77 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_5:
      std::variant<std::unordered_map<std::string,std::string>,std::string>::~variant[abi:ne180100](v80 - 160);
      if (v79 < 0) {
        operator delete(v78);
      }
      if (a66 < 0) {
        operator delete(a61);
      }
      if (a72 < 0) {
        operator delete(a67);
      }
      if (a76 < 0) {
        operator delete(a75);
      }
      if (SLOBYTE(STACK[0x217]) < 0) {
        operator delete((void *)STACK[0x200]);
      }
      if (SLOBYTE(STACK[0x237]) < 0) {
        operator delete((void *)STACK[0x220]);
      }
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a73);
      std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo>::~unique_ptr[abi:ne180100](&a74);
      unint64_t v82 = STACK[0x218];
      STACK[0x218] = 0;
      if (v82) {
        (*(void (**)(unint64_t))(*(void *)v82 + 8))(v82);
      }
      std::string::size_type v83 = *(void ***)(v80 - 224);
      if (v83)
      {
        do
        {
          while (1)
          {
            uint64_t v84 = (void **)*v83;
            uint64_t v85 = (std::__shared_weak_count *)v83[6];
            if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
            if (*((char *)v83 + 39) < 0) {
              break;
            }
            operator delete(v83);
            std::string::size_type v83 = v84;
            if (!v84) {
              goto LABEL_31;
            }
          }
          operator delete(v83[2]);
          operator delete(v83);
          std::string::size_type v83 = v84;
        }
        while (v84);
      }
LABEL_31:
      int v86 = *(void **)(v80 - 240);
      *(void *)(v80 - 240) = 0;
      if (v86) {
        operator delete(v86);
      }
      kdebug_trace();
      _Unwind_Resume(a1);
    }
LABEL_4:
    operator delete(a23);
    goto LABEL_5;
  }
  operator delete(v76);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

void sub_19250B4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  if (a69 < 0) {
    JUMPOUT(0x19250B66CLL);
  }
  JUMPOUT(0x19250B670);
}

void sub_19250B4E4()
{
}

void sub_19250B4F0()
{
  unint64_t v0 = STACK[0x218];
  STACK[0x218] = 0;
  if (v0) {
    (*(void (**)(unint64_t))(*(void *)v0 + 8))(v0);
  }
  JUMPOUT(0x19250B8F0);
}

void sub_19250B4FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a49 < 0)
  {
    operator delete(__p);
    if ((a55 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a55 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a62 & 0x80000000) == 0) {
LABEL_8:
    }
      JUMPOUT(0x19250B614);
LABEL_9:
    JUMPOUT(0x19250B608);
  }
  operator delete(a50);
  if ((a62 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_9;
}

void sub_19250B544()
{
}

void sub_19250B550()
{
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x19250B62CLL);
  }
  JUMPOUT(0x19250B630);
}

void sub_19250B568()
{
}

void sub_19250B570()
{
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x19250B63CLL);
  }
  JUMPOUT(0x19250B640);
}

void sub_19250B588()
{
}

void sub_19250B590()
{
}

void sub_19250B598()
{
}

void sub_19250B5A0()
{
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x19250B64CLL);
  }
  JUMPOUT(0x19250B650);
}

void sub_19250B5B8()
{
}

void sub_19250B5C0()
{
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  JUMPOUT(0x19250B678);
}

void sub_19250B5D8()
{
  unint64_t v0 = STACK[0x218];
  STACK[0x218] = 0;
  if (v0) {
    (*(void (**)(unint64_t))(*(void *)v0 + 8))(v0);
  }
  JUMPOUT(0x19250B8F0);
}

void sub_19250B5E0()
{
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_9;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_9:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x19250B9B4);
}

void sub_19250B684()
{
}

void sub_19250B68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if ((a28 & 0x80000000) == 0) {
    JUMPOUT(0x19250B4A4);
  }
  JUMPOUT(0x19250B49CLL);
}

void sub_19250B6A0()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x19250B744);
}

void sub_19250B6B4()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_13;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_13:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace();
  JUMPOUT(0x19250B9B4);
}

void sub_19250B6EC()
{
}

void sub_19250B6F4()
{
  unint64_t v0 = STACK[0x218];
  STACK[0x218] = 0;
  if (v0) {
    (*(void (**)(unint64_t))(*(void *)v0 + 8))(v0);
  }
  JUMPOUT(0x19250B8F0);
}

void sub_19250B6FC()
{
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_9;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_9:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x19250B9B4);
}

void sub_19250B704()
{
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  std::__tree<std::string>::destroy(v0 - 192, *(void *)(v0 - 184));
  JUMPOUT(0x19250B87CLL);
}

void sub_19250B720()
{
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_9;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_9:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x19250B9B4);
}

void sub_19250B728()
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v0 - 160);
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_9;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_9:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace();
  JUMPOUT(0x19250B9B4);
}

void sub_19250B738()
{
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_9;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_9:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x19250B9B4);
}

void sub_19250B740()
{
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_11;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_11:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace();
  JUMPOUT(0x19250B9B4);
}

void sub_19250B758()
{
}

void sub_19250B760()
{
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  JUMPOUT(0x19250B8E8);
}

void sub_19250B778()
{
}

void sub_19250B780()
{
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_9;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_9:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x19250B9B4);
}

void sub_19250B788()
{
  operator delete(v0);
  JUMPOUT(0x19250B8CCLL);
}

void sub_19250B798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x237]) < 0)
  {
    operator delete((void *)STACK[0x220]);
    if (SLOBYTE(STACK[0x217]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0x200]);
      if ((a73 & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_9:
      operator delete(a70);
      uint64_t v74 = *(char **)(v73 - 144);
      if (!v74) {
        goto LABEL_16;
      }
      while (1)
      {
LABEL_13:
        std::string::size_type v75 = *(char **)v74;
        if (v74[63] < 0)
        {
          operator delete(*((void **)v74 + 5));
          if ((v74[39] & 0x80000000) == 0) {
            goto LABEL_12;
          }
LABEL_15:
          operator delete(*((void **)v74 + 2));
          operator delete(v74);
          uint64_t v74 = v75;
          if (!v75) {
            goto LABEL_16;
          }
        }
        else
        {
          if (v74[39] < 0) {
            goto LABEL_15;
          }
LABEL_12:
          operator delete(v74);
          uint64_t v74 = v75;
          if (!v75) {
            goto LABEL_16;
          }
        }
      }
    }
  }
  else if (SLOBYTE(STACK[0x217]) < 0)
  {
    goto LABEL_5;
  }
  if ((a73 & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t v74 = *(char **)(v73 - 144);
    if (v74) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t v76 = *(void *)(v73 - 160);
    *(void *)(v73 - 160) = 0;
    if (v76) {
      JUMPOUT(0x19250B86CLL);
    }
    JUMPOUT(0x19250B870);
  }
  goto LABEL_9;
}

void sub_19250B8B4()
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v0 - 160);
  uint64_t v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (void **)*v1;
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        if (*((char *)v1 + 39) < 0) {
          break;
        }
        operator delete(v1);
        uint64_t v1 = v2;
        if (!v2) {
          goto LABEL_9;
        }
      }
      operator delete(v1[2]);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
LABEL_9:
  std::vector<std::string>::size_type v4 = *(void **)(v0 - 240);
  *(void *)(v0 - 240) = 0;
  if (v4) {
    operator delete(v4);
  }
  kdebug_trace();
  JUMPOUT(0x19250B9B4);
}

void sub_19250B8C8()
{
  std::__tree<std::string>::destroy(v0 - 192, *(char **)(v0 - 184));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v0 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  JUMPOUT(0x19250B8F0);
}

void sub_19250B9AC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x19250B9B4);
  }
  __clang_call_terminate(a1);
}

void anonymous namespace'::GetAneCompilerOptionsPlistPath(std::string *a1, unsigned __int8 *a2, uint64_t a3, const void **a4, char a5)
{
  int v5 = *((char *)a4 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v6 = (size_t)a4[1];
  }
  unint64_t v7 = v6 + 14;
  if (v6 + 14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v14 = v7 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v6 + 14;
    int64_t v54 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    int64_t v54 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v54) = v6 + 14;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v5 >= 0) {
    std::string::size_type v16 = a4;
  }
  else {
    std::string::size_type v16 = *a4;
  }
  memmove(p_dst, v16, v6);
LABEL_15:
  strcpy((char *)p_dst + v6, "/options.plist");
  int v17 = *(_DWORD *)(a3 + 40);
  if (v17 != 1)
  {
    if (v17) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&__p, a3);
    if ((a5 & 1) == 0 && !v51)
    {
      a1->__r_.__value_.__s.__data_[0] = 0;
      a1[1].__r_.__value_.__s.__data_[0] = 0;
      uint64_t v18 = (char *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2]) {
        goto LABEL_104;
      }
LABEL_107:
      uint64_t v46 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (!v46) {
        goto LABEL_109;
      }
      goto LABEL_108;
    }
    unint64_t v19 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:(int)v51];
    uint64_t v20 = (uint64_t *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      while (1)
      {
        unint64_t v21 = v20 + 5;
        E5Common::StringUtils::ToLower((unsigned __int8 *)v20 + 40, (uint64_t)&__str);
        int v22 = v20 + 2;
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          p_str = &__str;
          switch(*((unsigned char *)&__str.__r_.__value_.__s + 23))
          {
            case 2:
              goto LABEL_29;
            case 3:
              if (LOWORD(__str.__r_.__value_.__l.__data_) != 25977 || __str.__r_.__value_.__s.__data_[2] != 115) {
                goto LABEL_63;
              }
              goto LABEL_59;
            case 4:
              if (LODWORD(__str.__r_.__value_.__l.__data_) == 1702195828) {
                goto LABEL_59;
              }
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 2) {
                goto LABEL_63;
              }
LABEL_29:
              if (LOWORD(__str.__r_.__value_.__l.__data_) == 28526) {
                goto LABEL_49;
              }
              goto LABEL_63;
            case 5:
              goto LABEL_44;
            default:
              goto LABEL_63;
          }
        }
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ == 3
          && *(_WORD *)__str.__r_.__value_.__l.__data_ == 25977
          && *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + 2) == 115)
        {
          goto LABEL_59;
        }
        if (__str.__r_.__value_.__l.__size_ != 4) {
          goto LABEL_39;
        }
        if (*(_DWORD *)__str.__r_.__value_.__l.__data_ == 1702195828)
        {
LABEL_59:
          if (*((char *)v20 + 39) < 0) {
            int v22 = (void *)*v22;
          }
          long long v29 = [NSString stringWithUTF8String:v22];
          [v19 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v29];
LABEL_25:

          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_26;
          }
LABEL_72:
          operator delete(__str.__r_.__value_.__l.__data_);
          uint64_t v20 = (uint64_t *)*v20;
          if (!v20) {
            break;
          }
        }
        else
        {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
LABEL_39:
          if (size == 2)
          {
            if (*(_WORD *)__str.__r_.__value_.__l.__data_ == 28526) {
              goto LABEL_49;
            }
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          if (size == 5)
          {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_44:
            int data = (int)p_str->__r_.__value_.__l.__data_;
            int v27 = p_str->__r_.__value_.__s.__data_[4];
            if (data == 1936482662 && v27 == 101)
            {
LABEL_49:
              if (*((char *)v20 + 39) < 0) {
                int v22 = (void *)*v22;
              }
              long long v29 = [NSString stringWithUTF8String:v22];
              [v19 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:v29];
              goto LABEL_25;
            }
          }
LABEL_63:
          if (E5Common::StringUtils::IsInteger((uint64_t)&__str))
          {
            BOOL v31 = objc_msgSend(NSNumber, "numberWithLongLong:", std::stoll(&__str, 0, 10));
            if (*((char *)v20 + 39) < 0) {
              int v22 = (void *)*v22;
            }
          }
          else
          {
            if (*((char *)v20 + 63) < 0) {
              unint64_t v21 = (void *)*v21;
            }
            BOOL v31 = [NSString stringWithUTF8String:v21];
            if (*((char *)v20 + 39) < 0) {
              int v22 = (void *)*v22;
            }
          }
          uint64_t v32 = [NSString stringWithUTF8String:v22];
          [v19 setObject:v31 forKeyedSubscript:v32];

          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_72;
          }
LABEL_26:
          uint64_t v20 = (uint64_t *)*v20;
          if (!v20) {
            break;
          }
        }
      }
    }
    if (a5)
    {
      [v19 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"CompileANEProgramForDebugging"];
      [v19 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"GenerateStaticPerfAnalytics"];
      [v19 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"GenerateAnalyticsBuffer"];
      [v19 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"DumpStatusDictionaryToFile"];
    }
    std::string::size_type v33 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:1];
    int8x8_t v34 = NSString;
    E5Common::StringUtils::ToLower(a2, (uint64_t)&__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v35 = &__str;
    }
    else {
      unint64_t v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    uint64_t v36 = [v34 stringWithUTF8String:v35];
    [v33 setObject:v19 forKeyedSubscript:v36];

    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v54 >= 0) {
      uint64_t v37 = &__dst;
    }
    else {
      uint64_t v37 = (long long *)__dst;
    }
    unint64_t v38 = [NSString stringWithUTF8String:v37];
    char v39 = [v33 writeToFile:v38 atomically:1];

    if ((v39 & 1) == 0)
    {
      std::operator+<char>();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &__str);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (SHIBYTE(v54) < 0)
    {
      std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = __dst;
      a1->__r_.__value_.__r.__words[2] = v54;
    }
    a1[1].__r_.__value_.__s.__data_[0] = 1;

    uint64_t v18 = (char *)__p.__r_.__value_.__r.__words[2];
    if (!__p.__r_.__value_.__r.__words[2]) {
      goto LABEL_107;
    }
    while (1)
    {
LABEL_104:
      long long v47 = *(char **)v18;
      if (v18[63] < 0)
      {
        operator delete(*((void **)v18 + 5));
        if ((v18[39] & 0x80000000) == 0) {
          goto LABEL_103;
        }
LABEL_106:
        operator delete(*((void **)v18 + 2));
        operator delete(v18);
        uint64_t v18 = v47;
        if (!v47) {
          goto LABEL_107;
        }
      }
      else
      {
        if (v18[39] < 0) {
          goto LABEL_106;
        }
LABEL_103:
        operator delete(v18);
        uint64_t v18 = v47;
        if (!v47) {
          goto LABEL_107;
        }
      }
    }
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  long long v41 = objc_msgSend(NSString, "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  if (v54 >= 0) {
    uint64_t v42 = &__dst;
  }
  else {
    uint64_t v42 = (long long *)__dst;
  }
  uint64_t v43 = [NSString stringWithUTF8String:v42];
  long long v44 = [MEMORY[0x1E4F28CB8] defaultManager];
  char v45 = [v44 copyItemAtPath:v41 toPath:v43 error:0];

  if ((v45 & 1) == 0)
  {
    std::operator+<char>();
    char v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, &__str);
    __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (SHIBYTE(v54) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = __dst;
    a1->__r_.__value_.__r.__words[2] = v54;
  }
  a1[1].__r_.__value_.__s.__data_[0] = 1;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v46 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_108:
    operator delete(v46);
  }
LABEL_109:
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_19250C11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  if ((a29 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t std::variant<std::unordered_map<std::string,std::string>,std::string>::~variant[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39B958[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void Espresso::AOT::MILCompilerForANE::CompileUsingANEF(uint64_t a1, std::string::size_type a2, std::string::size_type a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (!Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MILCompilerForANE::CompileUsingANEF() only supported with on-device compilation.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v68 = [MEMORY[0x1E4F4E030] sharedConnection];
  if (*(char *)(a2 + 23) >= 0) {
    std::string::size_type v6 = a2;
  }
  else {
    std::string::size_type v6 = *(void *)a2;
  }
  unint64_t v7 = [NSString stringWithUTF8String:v6];
  uint64_t v69 = [v7 lastPathComponent];
  uint64_t v8 = [v7 stringByDeletingLastPathComponent];

  std::string::size_type v65 = (void *)v8;
  uint64_t v70 = [MEMORY[0x1E4F1CB10] URLWithString:v8];
  Compiler = (const void *)E5RT::E5Compiler::GetCompiler(v70);
  if (!v10) {
    __cxa_bad_cast();
  }
  E5RT::E5CompilerPriv::getBundleRootPath(v10, &__p);
  memset(&__base, 0, sizeof(__base));
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, p_p, (std::string *)((char *)p_p + size));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = (std::string *)a3;
  }
  else {
    uint64_t v14 = *(std::string **)a3;
  }
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v14, (std::string *)((char *)v14 + v13));
  std::__fs::filesystem::path::lexically_relative(&v78, (const std::__fs::filesystem::path *)&__p, &__base);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v78.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v78;
  }
  else {
    uint64_t v15 = (std::__fs::filesystem::path *)v78.__pn_.__r_.__value_.__r.__words[0];
  }
  id v71 = [NSString stringWithUTF8String:v15];
  int v17 = Espresso::espresso_os_log_subsystem(0, v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    int v67 = *(char *)(a2 + 23);
    std::string::size_type v49 = *(void *)a2;
    int v50 = *(char *)(a3 + 23);
    std::string::size_type v51 = *(void *)a3;
    uint64_t v52 = [v71 UTF8String];
    if (v50 >= 0) {
      std::string::size_type v53 = a3;
    }
    else {
      std::string::size_type v53 = v51;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    if (v67 >= 0) {
      std::string::size_type v54 = a2;
    }
    else {
      std::string::size_type v54 = v49;
    }
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v54;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v53;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v81 = v52;
    _os_log_debug_impl(&dword_1920CB000, v17, OS_LOG_TYPE_DEBUG, "MILCompilerForANE: CompileUsingANEF(): milFullPath = %s, cacheUrlIdentifierFile = %s, segmentKey = %s\n", (uint8_t *)&__p, 0x20u);
  }

  uint64_t v18 = (void *)MEMORY[0x1E4F1CB10];
  unint64_t v19 = NSString;
  uint64_t Options = Espresso::AOT::AbstractMILCompiler::GetOptions((Espresso::AOT::AbstractMILCompiler *)a1);
  if (*(char *)(Options + 23) >= 0) {
    uint64_t v21 = Options;
  }
  else {
    uint64_t v21 = *(void *)Options;
  }
  int v22 = [v19 stringWithUTF8String:v21];
  uint64_t v23 = [v18 fileURLWithPath:v22];

  uint64_t v66 = v23;
  size_t v64 = [v23 URLByDeletingLastPathComponent];
  int v24 = [MEMORY[0x1E4F4E060] modelAtURLWithSourceURL:v70 sourceURL:v64 key:v71 cacheURLIdentifier:0];
  long long v25 = [MEMORY[0x1E4F1CA60] dictionary];
  [v25 setObject:*MEMORY[0x1E4F4E140] forKeyedSubscript:*MEMORY[0x1E4F4E188]];
  [v25 setObject:v69 forKeyedSubscript:*MEMORY[0x1E4F4E190]];
  [v25 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F4E100]];
  [v25 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F4E0C0]];
  long long v84 = 0u;
  long long v85 = 0u;
  int v86 = 1065353216;
  int v87 = 0;
  uint64_t v26 = (const std::string::value_type **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
  {
    std::string::size_type v28 = *(void *)(a1 + 328);
    if (v28)
    {
      std::string::__init_copy_ctor_external(&__p, *v26, v28);
      int v27 = v87;
      if (v87 == -1)
      {
LABEL_33:
        long long v84 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)&long long v85 = *((void *)&__p.__r_.__value_.__l + 2);
        int v87 = 1;
        goto LABEL_36;
      }
LABEL_32:
      ((void (*)(std::string *, long long *))off_1EE39B958[v27])(&v76, &v84);
      goto LABEL_33;
    }
  }
  else if (*(unsigned char *)(a1 + 343))
  {
    int v27 = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v26;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 336);
    goto LABEL_32;
  }
  if (&v84 != (long long *)(a1 + 344))
  {
    int v86 = *(_DWORD *)(a1 + 376);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(&v84, *(uint64_t **)(a1 + 360), 0);
  }
LABEL_36:
  memset(&v73, 0, sizeof(v73));
  uint64_t v29 = *(unsigned __int8 *)(a2 + 23);
  if ((v29 & 0x80u) == 0) {
    BOOL v30 = (std::string *)a2;
  }
  else {
    BOOL v30 = *(std::string **)a2;
  }
  if ((v29 & 0x80u) != 0) {
    uint64_t v29 = *(void *)(a2 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v73.__pn_, v30, (std::string *)((char *)v30 + v29));
  std::__fs::filesystem::path::__string_view v31 = std::__fs::filesystem::path::__parent_path(&v73);
  if (v31.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v31.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v33 = (v31.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v33 = v31.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v34 = v33 + 1;
    uint64_t v32 = (std::string *)operator new(v33 + 1);
    __p.__r_.__value_.__l.__size_ = v31.__size_;
    __p.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    goto LABEL_48;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v31.__size_;
  uint64_t v32 = &__p;
  if (v31.__size_) {
LABEL_48:
  }
    memmove(v32, v31.__data_, v31.__size_);
  v32->__r_.__value_.__s.__data_[v31.__size_] = 0;
  unint64_t v35 = (void *)__p.__r_.__value_.__r.__words[0];
  v74[0] = __p.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v74 + 3) = *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3);
  int v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v75, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    LODWORD(v75.__r_.__value_.__r.__words[2]) = v74[0];
    *(_DWORD *)((char *)&v75.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v74 + 3);
    *((unsigned char *)&v75.__r_.__value_.__s + 23) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v75.__r_.__value_.__l.__data_);
    if ((v36 & 0x80000000) == 0)
    {
LABEL_54:
      if ((SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_55;
      }
      goto LABEL_59;
    }
  }
  else if ((v36 & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(v35);
  if ((SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if (!v77) {
      goto LABEL_64;
    }
LABEL_60:
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v37 = &v76;
    }
    else {
      uint64_t v37 = (std::string *)v76.__r_.__value_.__r.__words[0];
    }
    unint64_t v38 = [NSString stringWithUTF8String:v37];
    char v39 = [v38 lastPathComponent];
    [v25 setObject:v39 forKeyedSubscript:*MEMORY[0x1E4F4E0C8]];

    goto LABEL_64;
  }
LABEL_59:
  operator delete(v73.__pn_.__r_.__value_.__l.__data_);
  if (v77) {
    goto LABEL_60;
  }
LABEL_64:
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  if (proc_pidoriginatorinfo() == 4 && LODWORD(__p.__r_.__value_.__l.__data_))
  {
    uint64_t v40 = 9;
  }
  else
  {
    qos_class_t v41 = qos_class_self();
    if (v41) {
      uint64_t v40 = v41;
    }
    else {
      uint64_t v40 = 21;
    }
  }
  id v72 = 0;
  char v42 = [v68 compileModel:v24 options:v25 qos:v40 error:&v72];
  id v43 = v72;
  long long v44 = v43;
  if ((v42 & 1) == 0)
  {
    if (v43)
    {
      std::string v56 = [v43 localizedDescription];
    }
    else
    {
      std::string v56 = &stru_1EE39BDB0;
    }
    uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v75, (char *)[(__CFString *)v56 UTF8String]);
    uint64_t v62 = std::string::insert(&v75, 0, "MILCompilerForANE error: failed to compile ANE model using ANEF. Error=");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v61, &__p);
    __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  char v45 = [v24 getCacheURLIdentifier];
  if (!v45)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "MILCompilerForANE error: ANEF returned cacheURLIdentifier as nil.");
    __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::ofstream::basic_ofstream((uint64_t *)&__p);
  if (*(_DWORD *)&v82[*(void *)(__p.__r_.__value_.__r.__words[0] - 24)])
  {
    std::operator+<char>();
    char v58 = std::string::append(&v73.__pn_, " for writing.");
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__pn_.__r_.__value_.__l.__data_);
    }
    int v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, &v75);
    __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v46 = v45;
  long long v47 = (const char *)[v46 UTF8String];
  size_t v48 = strlen(v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v47, v48);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&__p + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)&v82[*(void *)(__p.__r_.__value_.__r.__words[0] - 24)] | 4);
  }
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(__p.__r_.__value_.__r.__words[0] - 2std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x192FF1040](&__p.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&v83);

  if (v77 && SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v87 != -1) {
    ((void (*)(std::string *, long long *))off_1EE39B958[v87])(&__p, &v84);
  }

  if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v78.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_82;
    }
LABEL_84:
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_82;
  }
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_84;
  }
LABEL_82:
}

void sub_19250CD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v57 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v57)
  {
LABEL_8:

    if (a37 && a36 < 0) {
      operator delete(a31);
    }
    std::variant<std::unordered_map<std::string,std::string>,std::string>::~variant[abi:ne180100](v61 - 160);

    if (a43 < 0) {
      operator delete(a38);
    }
    if (a49 < 0) {
      operator delete(a44);
    }

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v58);
  goto LABEL_8;
}

void Espresso::AOT::MILCompilerForANE::CompileUsingANEC(uint64_t a1, std::string *a2, uint64_t *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = (uint64_t *)a2;
  }
  else {
    std::string::size_type v6 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  uint64_t v40 = [NSString stringWithUTF8String:v6];
  unint64_t v7 = [v40 stringByDeletingLastPathComponent];
  uint64_t v8 = [v7 stringByAppendingString:@"/"];

  long long v9 = [v40 lastPathComponent];
  if (*((char *)a3 + 23) >= 0) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = (uint64_t *)*a3;
  }
  char v39 = v9;
  int v11 = [NSString stringWithUTF8String:v10];
  unint64_t v12 = [v11 stringByDeletingLastPathComponent];
  uint64_t v13 = [v12 stringByAppendingString:@"/"];

  qos_class_t v41 = v13;
  value = [v11 lastPathComponent];
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, @"NetworkPlistName", v9);
  CFDictionaryAddValue(Mutable, @"NetworkPlistPath", v8);
  std::string::size_type v16 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(v16, Mutable);
  CFRelease(Mutable);
  int v17 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(v17, @"InputNetworks", v16);
  CFRelease(v16);
  CFDictionaryAddValue(v17, @"OutputFileName", value);
  CFDictionaryAddValue(v17, @"OutputFilePath", v13);
  uint64_t v18 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v19 = a1 + 296;
  if (*(char *)(a1 + 319) < 0) {
    uint64_t v19 = *(void *)(a1 + 296);
  }
  uint64_t v20 = [NSString stringWithUTF8String:v19];
  CFDictionaryAddValue(v18, @"TargetArchitecture", v20);
  long long v51 = 0u;
  long long v52 = 0u;
  int v53 = 1065353216;
  int v54 = 0;
  uint64_t v21 = (const std::string::value_type **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
  {
    std::string::size_type v23 = *(void *)(a1 + 328);
    if (v23)
    {
      std::string::__init_copy_ctor_external(&v49, *v21, v23);
      int v22 = v54;
      if (v54 == -1)
      {
LABEL_15:
        long long v51 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        *(void *)&long long v52 = *((void *)&v49.__r_.__value_.__l + 2);
        int v54 = 1;
        goto LABEL_18;
      }
LABEL_14:
      ((void (*)(long long *, long long *))off_1EE39B958[v22])(&__dst, &v51);
      goto LABEL_15;
    }
  }
  else if (*(unsigned char *)(a1 + 343))
  {
    int v22 = 0;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)v21;
    v49.__r_.__value_.__r.__words[2] = *(void *)(a1 + 336);
    goto LABEL_14;
  }
  if (&v51 != (long long *)(a1 + 344))
  {
    int v53 = *(_DWORD *)(a1 + 376);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(&v51, *(uint64_t **)(a1 + 360), 0);
  }
LABEL_18:
  memset(&v46, 0, sizeof(v46));
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    long long v25 = a2;
  }
  else {
    long long v25 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v46.__pn_, v25, (std::string *)((char *)v25 + size));
  std::__fs::filesystem::path::__string_view v26 = std::__fs::filesystem::path::__parent_path(&v46);
  if (v26.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v26.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v28 = (v26.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v28 = v26.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v29 = v28 + 1;
    p_dst = (long long *)operator new(v28 + 1);
    *((void *)&__dst + 1) = v26.__size_;
    unint64_t v44 = v29 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v44) = v26.__size_;
  p_dst = &__dst;
  if (v26.__size_) {
LABEL_30:
  }
    memmove(p_dst, v26.__data_, v26.__size_);
  *((unsigned char *)p_dst + v26.__size_) = 0;
  BOOL v30 = (void *)__dst;
  v47[0] = v44;
  *(_DWORD *)((char *)v47 + 3) = *(_DWORD *)((char *)&v44 + 3);
  int v31 = SHIBYTE(v44);
  if (SHIBYTE(v44) < 0)
  {
    uint64_t v32 = v41;
    std::string::__init_copy_ctor_external(&v48, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = __dst;
    LODWORD(v48.__r_.__value_.__r.__words[2]) = v47[0];
    *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v47 + 3);
    *((unsigned char *)&v48.__r_.__value_.__s + 23) = HIBYTE(v44);
    uint64_t v32 = v41;
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_36:
      if ((SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_41;
    }
  }
  else if ((v31 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v30);
  if ((SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_37:
    std::basic_string_view<_CharT, _Traits>::size_type v33 = v40;
    if (!v50) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v46.__pn_.__r_.__value_.__l.__data_);
  std::basic_string_view<_CharT, _Traits>::size_type v33 = v40;
  if (!v50) {
    goto LABEL_46;
  }
LABEL_42:
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::basic_string_view<_CharT, _Traits>::size_type v34 = &v49;
  }
  else {
    std::basic_string_view<_CharT, _Traits>::size_type v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  unint64_t v35 = [NSString stringWithUTF8String:v34];
  CFDictionaryAddValue(v18, @"OptionsFilePath", v35);

LABEL_46:
  *(void *)&long long __dst = 0;
  *((void *)&__dst + 1) = &__dst;
  unint64_t v44 = 0x2020000000;
  uint64_t v45 = 0;
  uint64_t v36 = ANECCompile();
  if (v36)
  {
    uint64_t v37 = [NSString stringWithFormat:@"ANECCompile() failed: status=%d, statusdict=%@", v36, *(void *)(*((void *)&__dst + 1) + 24)];
    CFRelease(*(CFTypeRef *)(*((void *)&__dst + 1) + 24));
    CFRelease(v17);
    CFRelease(v18);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const char *)[v37 UTF8String]);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRelease(v17);
  CFRelease(v18);
  _Block_object_dispose(&__dst, 8);
  if (v50 && SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v54 != -1) {
    ((void (*)(std::string *, long long *))off_1EE39B958[v54])(&v49, &v51);
  }
}

void sub_19250D688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_free_exception(v38);

  _Block_object_dispose(&a22, 8);
  if (*(unsigned char *)(v42 - 152))
  {
    if (*(char *)(v42 - 153) < 0) {
      operator delete(*(void **)(v42 - 176));
    }
  }
  std::variant<std::unordered_map<std::string,std::string>,std::string>::~variant[abi:ne180100](v42 - 144);

  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForANE::GetOutputPaths(Espresso::AOT::MILCompilerForANE *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 415) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 49), *((void *)this + 50));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 392);
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19250D8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *___ZNK8Espresso3AOT17MILCompilerForANE16CompileUsingANECERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(void *result, int a2, uint64_t a3)
{
  if (a2)
  {
    *(void *)(*(void *)(result[4] + 8) + 24) = a3;
    return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
  }
  return result;
}

void Espresso::AOT::MILCompilerForANE::~MILCompilerForANE(Espresso::AOT::MILCompilerForANE *this)
{
  Espresso::AOT::MILCompilerForANE::~MILCompilerForANE(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  Espresso::AOT::AOTCompilerBackend *v3;
  void **v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE36B240;
  if ((*((char *)this + 415) & 0x80000000) == 0)
  {
    Espresso::AOT::MILCompilerForANE::Options::~Options((Espresso::AOT::MILCompilerForANE *)((char *)this + 264));
    *(void *)this = &unk_1EE36B370;
    uint64_t v2 = (void **)*((void *)this + 29);
    if (!v2) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v4 = (void **)*((void *)this + 30);
    if (v4 == v2)
    {
      *((void *)this + 30) = v2;
      operator delete(v2);
      if (*((char *)this + 231) < 0) {
        goto LABEL_16;
      }
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      int v5 = (void *)*((void *)this + 29);
      *((void *)this + 30) = v2;
      operator delete(v5);
      if (*((char *)this + 231) < 0) {
        goto LABEL_16;
      }
    }
LABEL_4:
    if ((*((char *)this + 207) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
  operator delete(*((void **)this + 49));
  Espresso::AOT::MILCompilerForANE::Options::~Options((Espresso::AOT::MILCompilerForANE *)((char *)this + 264));
  *(void *)this = &unk_1EE36B370;
  uint64_t v2 = (void **)*((void *)this + 29);
  if (v2) {
    goto LABEL_9;
  }
LABEL_3:
  if ((*((char *)this + 231) & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_16:
  operator delete(*((void **)this + 26));
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v3 = this;
    goto LABEL_7;
  }
LABEL_17:
  operator delete(*((void **)this + 23));
  uint64_t v3 = this;

LABEL_7:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v3);
}

void Espresso::AOT::MILCompilerForANE::Options::~Options(Espresso::AOT::MILCompilerForANE::Options *this)
{
  uint64_t v2 = (void **)*((void *)this + 12);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_13:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_13;
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*((char *)this + 79) < 0)
  {
    operator delete(*((void **)this + 7));
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_16:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0) {
    goto LABEL_16;
  }
}

BOOL anonymous namespace'::ValidateFuncIOAlignment(MIL::IRFunction const&)::$_0::operator()(uint64_t a1, MIL::IRValueType *a2, uint64_t a3)
{
  if (!E5Common::Utils::IsTensor((uint64_t)a2))
  {
    if (E5Common::Utils::IsTensorBuffer(a2, v6))
    {
      uint64_t v15 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
      std::string::size_type v16 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v15);
      int DataType = MIL::IRTensorBufferValueType::GetDataType(v16);
      uint64_t v18 = Espresso::AOT::IRDataTypeToByteSize(DataType);
      uint64_t Shape = (void *)MIL::IRTensorBufferValueType::GetShape(v16);
      if (Shape[1] - *Shape >= 0x10uLL)
      {
        uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides(v16);
        std::__fs::filesystem::path v46 = 0;
        long long __p = 0uLL;
        std::string::size_type v23 = *(const void **)Strides;
        uint64_t v22 = *(void *)(Strides + 8);
        int64_t v24 = v22 - *(void *)Strides;
        if (v22 == *(void *)Strides) {
          goto LABEL_36;
        }
        if (v24 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        long long v25 = (char *)operator new(v22 - *(void *)Strides);
        *(void *)&long long __p = v25;
        std::__fs::filesystem::path v46 = &v25[8 * (v24 >> 3)];
        memcpy(v25, v23, v24);
        *((void *)&__p + 1) = v46;
        if ((unint64_t)(8 * (v24 >> 3)) <= 8) {
LABEL_36:
        }
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        std::__fs::filesystem::path::__string_view v26 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(*(MIL::IRProperty **)&v25[8 * (v24 >> 3) - 16]);
        if (v26) {
          BOOL v27 = 1;
        }
        else {
          BOOL v27 = *(void *)a1 == 0;
        }
        BOOL v20 = !v27;
        if (v26)
        {
          uint64_t v28 = MIL::IRConstantProperty::GetInt64ScalarValue(v26) * v18;
          BOOL v20 = (v28 & 0x3F) == 0 && v28 != 0;
        }
        if ((void)__p) {
          operator delete((void *)__p);
        }
        return v20;
      }
    }
    return 1;
  }
  uint64_t v7 = MIL::IRValueType::AsTensorType(a2);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  if (v8[1] - *v8 < 0x10uLL) {
    return 1;
  }
  long long v9 = v8;
  HIBYTE(v46) = 10;
  strcpy((char *)&__p, "alignments");
  uint64_t Attribute = (MIL::IRValue *)MIL::IRTensorValueType::GetAttribute();
  MIL::IRValue::AsTensor(Attribute);
  uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned long long>();
  unint64_t v13 = v12;
  uint64_t v47 = Data;
  unint64_t v48 = v12;
  uint64_t v14 = v9[1];
  if (v12 != (v14 - *v9) >> 3) {
    return 0;
  }
  uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(v14 - 8) + 16))(*(void *)(v14 - 8));
  if (!(*(void *)a1 | v30)) {
    return 0;
  }
  uint64_t v32 = v30;
  if (*(void *)a1)
  {
    if (!v30) {
      return 1;
    }
  }
  unint64_t v33 = *(void *)(Data + 8 * v13 - 8);
  std::basic_string_view<_CharT, _Traits>::size_type v34 = **(MIL::IRValue ***)(a1 + 16);
  if (v34)
  {
    E5Common::Utils::MILDictToCpp<std::string,BOOL>(v34, (uint64_t)&__p);
    p_p = &__p;
    {
      if (v48 >= 3)
      {
        unint64_t v35 = *(void *)MIL::Util::Span<unsigned long long const,18446744073709551615ul>::At(&v47, v48 - 3);
        int v36 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
LABEL_35:
        BOOL v20 = v37;
        std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
        return v20;
      }
      if (v48 == 2 && *(void *)MIL::Util::Span<unsigned long long const,18446744073709551615ul>::At(&v47, 0) == 1)
      {
        int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
        goto LABEL_35;
      }
    }
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
    unint64_t v13 = v48;
  }
  if (v13 < 2) {
    unint64_t v39 = 1;
  }
  else {
    unint64_t v39 = *(void *)MIL::Util::Span<unsigned long long const,18446744073709551615ul>::At(&v47, v13 - 2);
  }
  uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
  int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
  unint64_t v42 = v39 + (v33 + Espresso::AOT::IRDataTypeToByteSize(v41) - 1) / v33 * v33 * v40 - 1;
  return ((v42 - (v42 % v39)) & 0x3FLL) == 0 && v42 != v42 % v39;
}

void sub_19250DE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19250DE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19250DE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL anonymous namespace'::ValidateFuncIOAlignment(MIL::IRFunction const&)::$_0::operator() const(MIL::IRValueType const*,std::string const&)::{lambda(std::string const&)#1}::operator()(void **a1, uint64_t a2)
{
  if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(*a1, a2))
  {
    uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(*a1, (unsigned __int8 *)a2);
    if (!v4) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return v4[40] != 0;
  }
  std::string::size_type v7 = std::string::rfind((const std::string *)a2, 95, 0xFFFFFFFFFFFFFFFFLL);
  if (v7 == -1) {
    return 0;
  }
  size_t v8 = *(unsigned __int8 *)(a2 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    size_t v8 = *(void *)(a2 + 8);
  }
  if (v9 >= 0) {
    unint64_t v10 = (const void *)a2;
  }
  else {
    unint64_t v10 = *(const void **)a2;
  }
  if (v8 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v8;
  }
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    unint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v11;
    unint64_t v17 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_22;
  }
  HIBYTE(v17) = v11;
  unint64_t v12 = __dst;
  if (v11) {
LABEL_22:
  }
    memmove(v12, v10, v11);
  *((unsigned char *)v12 + v11) = 0;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(*a1, (uint64_t)__dst))
  {
    BOOL v5 = 0;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      return v5;
    }
LABEL_28:
    operator delete(__dst[0]);
    return v5;
  }
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(*a1, (unsigned __int8 *)__dst);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  BOOL v5 = v15[40] != 0;
  if (SHIBYTE(v17) < 0) {
    goto LABEL_28;
  }
  return v5;
}

void sub_19250DFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::Span<unsigned long long const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
  }
  return *a1 + 8 * a2;
}

void sub_19250E080(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::ValidatePlaneStride(void *a1, int a2, unint64_t a3, unint64_t a4)
{
  if (a1[1] - *a1 < 0x18uLL) {
    return 0;
  }
  unint64_t v7 = (a3 + Espresso::AOT::IRDataTypeToByteSize(a2) - 1) / a3 * a3;
  uint64_t v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(a1[1] - 8));
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  uint64_t v10 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(a1[1] - 16));
  unint64_t v11 = a4 + v9 * v7 * (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10) - 1;
  return ((v11 - (v11 % a4)) & 0x3FLL) == 0 && v11 != v11 % a4;
}

BOOL anonymous namespace'::Validate2DTensorPlaneStride(void *a1, void *a2, int a3)
{
  if (a1[1] - *a1 != 16) {
    return 0;
  }
  uint64_t v5 = Espresso::AOT::IRDataTypeToByteSize(a3);
  uint64_t v6 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(a1[1] - 8));
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  uint64_t v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(a1[1] - 16));
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  unint64_t v10 = a2[1];
  if (!v10) {
    goto LABEL_13;
  }
  if (*(void *)*a2 != 1) {
    return 0;
  }
  if (v10 <= 1)
  {
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
  }
  if (*(void *)(*a2 + 8) != 1) {
    return 0;
  }
  uint64_t v11 = v7 * v5 * v9;
  return (v11 & 0x3F) == 0 && v11 != 0;
}

void sub_19250E2DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19250E2F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESE_NS_4hashISE_EENS_8equal_toISE_EENSC_INS_4pairIKSE_SE_EEEEEESE_EEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSN_SE_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void ***)(a2 + 16);
  if (v3)
  {
    do
    {
      uint64_t v5 = (void **)*v3;
      if (*((char *)v3 + 63) < 0)
      {
        operator delete(v3[5]);
        if (*((char *)v3 + 39) < 0) {
LABEL_11:
        }
          operator delete(v3[2]);
      }
      else if (*((char *)v3 + 39) < 0)
      {
        goto LABEL_11;
      }
      operator delete(v3);
      uint64_t v3 = v5;
    }
    while (v5);
  }
  uint64_t v4 = *(void **)a2;
  *(void *)a2 = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESE_NS_4hashISE_EENS_8equal_toISE_EENSC_INS_4pairIKSE_SE_EEEEEESE_EEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSN_SE_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void Espresso::AOT::MILCompilerForANE::Run(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "Invoking ANEC using ANEF path", v1, 2u);
}

{
  uint8_t v1[16];

  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "Invoking ANEC directly", v1, 2u);
}

void Espresso::AOT::MILCompilerForANE::Run(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = 136315394;
  uint64_t v6 = v3;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "MILCompilerForANE: Run(): Created directory @ %s. Permissions (octal) = 0%o", (uint8_t *)&v5, 0x12u);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetCpuTargetOS(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 88;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetCpuTargetArch(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 112;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetEnableClassicCpuFallbackForMlc(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 332);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetAneOptionsPlistPath(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 216;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetAneOptions@<X0>(Espresso::AOT::CompilerOptionsForE5 *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,std::string>::unordered_map(a2, (uint64_t)this + 240);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetRequireAneResident(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 280;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetBuildForProfiling(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 328);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetOnDeviceCompilation(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 329);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetDisableDataDependentShape(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 335);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetEnableMPSGraphPackage(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 336);
}

void Espresso::AOT::CompilerOptionsForE5::RegisterOptions(Espresso::AOT::CompilerOptionsForE5 *this, Espresso::AOT::AOTCompilerOptionsManager *a2)
{
  char v17 = 3;
  strcpy((char *)&v16[3], "ane");
  HIBYTE(v16[2]) = 13;
  strcpy((char *)v16, "options-plist");
  *(void *)long long __p = operator new(0x58uLL);
  strcpy(*(char **)__p, "Path to ANE compilation options plist. (only works with Espresso IR model format)");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
  {
    operator delete(v16[0]);
    if (v17 < 0) {
      goto LABEL_152;
    }
  }
  else if (v17 < 0)
  {
LABEL_152:
    operator delete(v16[3]);
  }
  char v17 = 3;
  strcpy((char *)&v16[3], "ane");
  HIBYTE(v16[2]) = 7;
  strcpy((char *)v16, "options");
  *(void *)long long __p = operator new(0x60uLL);
  *(_OWORD *)&__p[8] = xmmword_192DAB910;
  strcpy(*(char **)__p, "ANE compilation options (separated by comma), E.g. SpatialSplitMode=Memory,KernelRewind=YES");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
  {
    operator delete(v16[0]);
    if (v17 < 0) {
      goto LABEL_155;
    }
  }
  else if (v17 < 0)
  {
LABEL_155:
    operator delete(v16[3]);
  }
  char v17 = 4;
  strcpy((char *)&v16[3], "bnns");
  HIBYTE(v16[2]) = 15;
  strcpy((char *)v16, "compile-on-load");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Defer MIL compilation to BNNS IR until load-time.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_158:
      operator delete(v16[0]);
      if (v17 < 0) {
        goto LABEL_159;
      }
      goto LABEL_8;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_158;
  }
  if (v17 < 0) {
LABEL_159:
  }
    operator delete(v16[3]);
LABEL_8:
  char v17 = 4;
  strcpy((char *)&v16[3], "bnns");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_192DAB6A0;
  strcpy(v16[0], "experimental-target-override");
  char __p[23] = 0;
  __p[0] = 0;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xC0uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Target to use specifically for the BNNS IR compilation, which may be different from the --e5-platforms target. Must be specified as an ID like 'X99Y', with uppercase letters and a subtype.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_162:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_163;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_162;
  }
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_11;
  }
LABEL_163:
  operator delete(v16[3]);
LABEL_11:
  char v17 = 4;
  strcpy((char *)&v16[3], "bnns");
  HIBYTE(v16[2]) = 7;
  strcpy((char *)v16, "options");
  *(void *)long long __p = operator new(0x78uLL);
  *(_OWORD *)&__p[8] = xmmword_192DC53D0;
  strcpy(*(char **)__p, "BNNS compilation options (separated by comma), E.g. SingleThread=true,PredefinedOptimization=SomeModelSpecificName");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_165:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_166:
    operator delete(v16[3]);
    goto LABEL_14;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_165;
  }
LABEL_13:
  if (v17 < 0) {
    goto LABEL_166;
  }
LABEL_14:
  char v17 = 8;
  strcpy((char *)&v16[3], "mpsgraph");
  strcpy((char *)v16, "disable-type-inference");
  HIBYTE(v16[2]) = 22;
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Disables type inference in MPSGraph.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_169:
      operator delete(v16[0]);
      if (v17 < 0) {
        goto LABEL_170;
      }
      goto LABEL_17;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_169;
  }
  if (v17 < 0) {
LABEL_170:
  }
    operator delete(v16[3]);
LABEL_17:
  char v17 = 8;
  strcpy((char *)&v16[3], "mpsgraph");
  HIBYTE(v16[2]) = 20;
  strcpy((char *)v16, "enable-gpu-quant-ops");
  char __p[23] = 4;
  strcpy(__p, "true");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Enables quantization op support in MPSGraph.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_173:
      operator delete(v16[0]);
      if (v17 < 0) {
        goto LABEL_174;
      }
      goto LABEL_20;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_173;
  }
  if (v17 < 0) {
LABEL_174:
  }
    operator delete(v16[3]);
LABEL_20:
  char v17 = 8;
  strcpy((char *)&v16[3], "mpsgraph");
  strcpy((char *)v16, "enable-parallel-encode");
  HIBYTE(v16[2]) = 22;
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Enables parallel encode in MPSGraph.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_177:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_178;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_177;
  }
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_23;
  }
LABEL_178:
  operator delete(v16[3]);
LABEL_23:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 8;
  strcpy((char *)v16, "deadline");
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_192DBF190;
  strcpy(*(char **)__p, "Time limit in seconds for compilation.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 1);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_180:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_181;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_180;
  }
LABEL_25:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_181:
  operator delete(v16[3]);
LABEL_26:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 6;
  strcpy((char *)v16, "header");
  *(void *)long long __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_192DA88D0;
  strcpy(*(char **)__p, "Generated header name. Example: myheader.h");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_183:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_184:
    operator delete(v16[3]);
    goto LABEL_29;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_183;
  }
LABEL_28:
  if (v17 < 0) {
    goto LABEL_184;
  }
LABEL_29:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 3;
  strcpy((char *)v16, "sdk");
  char __p[23] = 15;
  strcpy(__p, "macosx.internal");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Xcode SDK containing mlcompilertool.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_187:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_188;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_187;
  }
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_32;
  }
LABEL_188:
  operator delete(v16[3]);
LABEL_32:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 4;
  strcpy((char *)v16, "size");
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_192DAB6B0;
  strcpy(*(char **)__p, "Size limit for generated artifact.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 1);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_190:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_191;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_190;
  }
LABEL_34:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_35;
  }
LABEL_191:
  operator delete(v16[3]);
LABEL_35:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 6;
  strcpy((char *)v16, "target");
  *(void *)long long __p = operator new(0x58uLL);
  *(_OWORD *)&__p[8] = xmmword_192DBEA70;
  strcpy(*(char **)__p, "Target triple and mcpu separated by colon. Example: x86_64-apple-macosx:haswell.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_193:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_194;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_193;
  }
LABEL_37:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_38;
  }
LABEL_194:
  operator delete(v16[3]);
LABEL_38:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 3;
  strcpy((char *)v16, "api");
  *(void *)long long __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_192DA88C0;
  strcpy(*(char **)__p, "Substring used in names of generated symbols.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_40;
    }
LABEL_196:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_197:
    operator delete(v16[3]);
    goto LABEL_41;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_196;
  }
LABEL_40:
  if (v17 < 0) {
    goto LABEL_197;
  }
LABEL_41:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 13;
  strcpy((char *)v16, "force-loopkit");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Force LoopKit CPU backend.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_200:
      operator delete(v16[0]);
      if (v17 < 0) {
        goto LABEL_201;
      }
      goto LABEL_44;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_200;
  }
  if (v17 < 0) {
LABEL_201:
  }
    operator delete(v16[3]);
LABEL_44:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 16;
  strcpy((char *)v16, "use-fast-reshape");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Use fast reshape implementation");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_204:
      operator delete(v16[0]);
      if (v17 < 0) {
        goto LABEL_205;
      }
      goto LABEL_47;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_204;
  }
  if (v17 < 0) {
LABEL_205:
  }
    operator delete(v16[3]);
LABEL_47:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 16;
  strcpy((char *)v16, "force-in-process");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Force MLC on-device compilation to occur in-process.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_208:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_50;
      }
      goto LABEL_209;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_208;
  }
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_50;
  }
LABEL_209:
  operator delete(v16[3]);
LABEL_50:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 12;
  strcpy((char *)v16, "experimental");
  *(void *)long long __p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_192DA90A0;
  strcpy(*(char **)__p, "Internal. Experimental arguments for CPU compilation");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_52;
    }
LABEL_211:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_53;
    }
LABEL_212:
    operator delete(v16[3]);
    goto LABEL_53;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_211;
  }
LABEL_52:
  if (v17 < 0) {
    goto LABEL_212;
  }
LABEL_53:
  char v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 17;
  strcpy((char *)v16, "preferred-backend");
  char __p[23] = 0;
  __p[0] = 0;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Preferred backend to use for CPU segments (classic_cpu, mlc, bnns).");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_215:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_56;
      }
      goto LABEL_216;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_215;
  }
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_56;
  }
LABEL_216:
  operator delete(v16[3]);
LABEL_56:
  char v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 13;
  strcpy((char *)v16, "compute-units");
  *(void *)long long __p = operator new(0x1E8uLL);
  *(_OWORD *)&__p[8] = xmmword_192DC53E0;
  strcpy(*(char **)__p, "Comma-separated list of compute units permitted to be used by dispatch for compilation: ane,gpu,cpu; if omitted, def"
    "ault dispatch behavior is ane,gpu,cpu for MIL AOT, and ane,cpu for classic (EspressoIR) AOT on ANE capable devices a"
    "nd CPU elsewhere.  --e5-compute-units=ane,gpu,cpu yields classic Espresso dispatch with ANE, MPSGraph, and BNNS back"
    "ends.  NOTE: Do NOT use EspressoIR + E5ML without prior approval.  Pre-approved use cases only.  E5ML POR support is"
    " MIL, not EspressoIR.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_58;
    }
LABEL_218:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_59;
    }
LABEL_219:
    operator delete(v16[3]);
    goto LABEL_59;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_218;
  }
LABEL_58:
  if (v17 < 0) {
    goto LABEL_219;
  }
LABEL_59:
  char v17 = 2;
  strcpy((char *)&v16[3], "e5");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_192DAA350;
  strcpy(v16[0], "force-classic-aot-old-hw");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  strcpy(v14.__r_.__value_.__l.__data_, "Use classic AOT to generate E5 bundle on pre-H13 SoCs.  Opt-in, pre-approved use cases only.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_222:
      operator delete(v16[0]);
      if (v17 < 0) {
        goto LABEL_223;
      }
      goto LABEL_62;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_222;
  }
  if (v17 < 0) {
LABEL_223:
  }
    operator delete(v16[3]);
LABEL_62:
  char v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 12;
  strcpy((char *)v16, "dump-ir-only");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DAB8E0;
  strcpy(v14.__r_.__value_.__l.__data_, "Emit internal IR instead of invoking hardware-specific backend compilers");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v16[2]) < 0)
    {
LABEL_226:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_227;
    }
  }
  else if (SHIBYTE(v16[2]) < 0)
  {
    goto LABEL_226;
  }
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_65;
  }
LABEL_227:
  operator delete(v16[3]);
LABEL_65:
  char v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 13;
  strcpy((char *)v16, "cpu-target-os");
  *(void *)long long __p = operator new(0x40uLL);
  *(_OWORD *)&__p[8] = xmmword_192DB16B0;
  strcpy(*(char **)__p, "Target OS for CPU compilation (e.g. macosx,tvos14,ios15.2.1).");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_229:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_230;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_229;
  }
LABEL_67:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_68;
  }
LABEL_230:
  operator delete(v16[3]);
LABEL_68:
  char v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 15;
  strcpy((char *)v16, "cpu-target-arch");
  *(void *)long long __p = operator new(0x40uLL);
  *(_OWORD *)&__p[8] = xmmword_192DACCC0;
  strcpy(*(char **)__p, "Target architecture for CPU compilation (x86_64,arm64,arm64e).");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
LABEL_232:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_233;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_232;
  }
LABEL_70:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_71;
  }
LABEL_233:
  operator delete(v16[3]);
LABEL_71:
  char v17 = 2;
  strcpy((char *)&v16[2] + 7, "\te5");
  strcpy((char *)v16, "platforms");
  Espresso::AOT::Utils::GetSupportedPlatformsStr(v3);
  int v4 = std::string::insert(&v13, 0, "Comma-separated list of target platforms (");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v14, "). Note: Hxx specification above denotes a specific chip (the 'P' phone chip) and does not refer to an entire generation of chips. E.g., H11 refers to H11P/cyprus and does not include H11G/aruba as well.");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v6->__r_.__value_.__l + 2);
  *(_OWORD *)long long __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_73:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_236;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_73;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_74:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_75;
    }
LABEL_237:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_238;
  }
LABEL_236:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_237;
  }
LABEL_75:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_76;
  }
LABEL_238:
  operator delete(v16[3]);
LABEL_76:
  char v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 17;
  strcpy((char *)v16, "platform-families");
  Espresso::AOT::Utils::GetSupportedPlatformFamiliesStr(v8);
  uint64_t v9 = std::string::insert(&v13, 0, "Comma-separated list of platform families (");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v14, "). Each family listed implies that a compiled artifact should be generated for every chip in that family. Families include all platforms the share the base name. For example, family H11 -> cyprus (H11) and aruba (H11G). Family M9 -> platform M9.");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)long long __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_78:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      goto LABEL_241;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_78;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
LABEL_242:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_243;
  }
LABEL_241:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_242;
  }
LABEL_80:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_81;
  }
LABEL_243:
  operator delete(v16[3]);
LABEL_81:
  char v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 20;
  strcpy((char *)v16, "require-ane-resident");
  char __p[23] = 2;
  strcpy(__p, "no");
  *((unsigned char *)&v14.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v14, "inference");
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xC8uLL);
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_192DC5400;
  strcpy(v13.__r_.__value_.__l.__data_, "Control ANE residency requirements: arg=inference -> inference ops must run on ANE; arg=strict: -> also disallow dat"
    "a conversion ops (quant, dequant, cast, etc.); arg=no -> allow all compute units");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefaultAndImplicit((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_84;
      }
      goto LABEL_246;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_83;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_84:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
LABEL_247:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_248;
  }
LABEL_246:
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_247;
  }
LABEL_85:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_86;
  }
LABEL_248:
  operator delete(v16[3]);
LABEL_86:
  char v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 21;
  strcpy((char *)v16, "on-device-compilation");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x78uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DC5410;
  strcpy(v14.__r_.__value_.__l.__data_, "Perform on-device compilation.Note: Enabling this flag will cause the compiler to invoke on-device compilation APIs.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_88:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
        goto LABEL_89;
      }
LABEL_251:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_90;
      }
      goto LABEL_252;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_251;
  }
LABEL_89:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_90;
  }
LABEL_252:
  operator delete(v16[3]);
LABEL_90:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 18;
  strcpy((char *)v16, "backend-validation");
  *(void *)long long __p = operator new(0x90uLL);
  *(_OWORD *)&__p[8] = xmmword_192DC5420;
  strcpy(*(char **)__p, "Comma-separated list of compute units for which backend validation is used. [Deprecated] Note this is on for all compute units by default.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
LABEL_254:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_93;
    }
    goto LABEL_255;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_254;
  }
LABEL_92:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_93;
  }
LABEL_255:
  operator delete(v16[3]);
LABEL_93:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 8;
  strcpy((char *)v16, "mil-cost");
  *(void *)long long __p = operator new(0x90uLL);
  *(_OWORD *)&__p[8] = xmmword_192DAC010;
  strcpy(*(char **)__p, "Comma-separated list of compute units for which mil based cost model is used.[Deprecated] Note this is on for all compute units by default.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_95;
    }
LABEL_257:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_258;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_257;
  }
LABEL_95:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_96;
  }
LABEL_258:
  operator delete(v16[3]);
LABEL_96:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 18;
  strcpy((char *)v16, "classic-validation");
  *(void *)long long __p = operator new(0x60uLL);
  *(_OWORD *)&__p[8] = xmmword_192DAB6D0;
  strcpy(*(char **)__p, "Comma-separated list of compute units for which classic espresso based validation is used.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_98;
    }
LABEL_260:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_261;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_260;
  }
LABEL_98:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_99;
  }
LABEL_261:
  operator delete(v16[3]);
LABEL_99:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 12;
  strcpy((char *)v16, "classic-cost");
  *(void *)long long __p = operator new(0x60uLL);
  *(_OWORD *)&__p[8] = xmmword_192DAB6D0;
  strcpy(*(char **)__p, "Comma-separated list of compute units for which classic espresso based cost model is used.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
LABEL_263:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_102;
    }
    goto LABEL_264;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_263;
  }
LABEL_101:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_102;
  }
LABEL_264:
  operator delete(v16[3]);
LABEL_102:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_192DAB6A0;
  strcpy(v16[0], "mil-cost-skip-decision-trees");
  *(void *)long long __p = operator new(0x98uLL);
  *(_OWORD *)&__p[8] = xmmword_192DC5430;
  strcpy(*(char **)__p, "Feature flag to skip using per MIL operator decision trees. The decision trees more accurately predict machine performance for cost estimation. ");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_104;
    }
LABEL_266:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_267;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_266;
  }
LABEL_104:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_105;
  }
LABEL_267:
  operator delete(v16[3]);
LABEL_105:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_192DBA240;
  strcpy(v16[0], "enable-ranked-segmentation");
  *(void *)long long __p = operator new(0x78uLL);
  *(_OWORD *)&__p[8] = xmmword_192DC5410;
  strcpy(*(char **)__p, "Feature flag to enable segmentation based on a ranked choice of backends.Backend ranks provided in e5-compute-units ");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_107;
    }
LABEL_269:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_270;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_269;
  }
LABEL_107:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_108;
  }
LABEL_270:
  operator delete(v16[3]);
LABEL_108:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v16[1] = xmmword_192DB16A0;
  strcpy(v16[0], "enable-classic-cpu-fallback-for-mlc");
  *(void *)long long __p = operator new(0x58uLL);
  *(_OWORD *)&__p[8] = xmmword_192DC5440;
  strcpy(*(char **)__p, "When MLC is enabled and this flag is true, classic CPU backend will be also enabled.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_110;
    }
LABEL_272:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_111;
    }
    goto LABEL_273;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_272;
  }
LABEL_110:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_111;
  }
LABEL_273:
  operator delete(v16[3]);
LABEL_111:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_192DAB6A0;
  strcpy(v16[0], "disable-data-dependent-shape");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x90uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DC5450;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to disable data-dependent shape. If this flag is true, E5 compiler will fail when the model has data-dependent output.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_113:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
        goto LABEL_114;
      }
LABEL_276:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_115;
      }
      goto LABEL_277;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_113;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_276;
  }
LABEL_114:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_115;
  }
LABEL_277:
  operator delete(v16[3]);
LABEL_115:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  strcpy((char *)v16, "enable-mpsgraphpackage");
  HIBYTE(v16[2]) = 22;
  char __p[23] = 4;
  strcpy(__p, "true");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xF0uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DC5460;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to enable or disable the creation of MPSGraphPackage within the E5 bundle. This flag may be ignored in some cases where the MIL source program cannot be pre-compiled to MPSGraphPackage due to some known E5ML issues.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_117:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
        goto LABEL_118;
      }
LABEL_280:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_281;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_117;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_280;
  }
LABEL_118:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_119;
  }
LABEL_281:
  operator delete(v16[3]);
LABEL_119:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v16[1] = xmmword_192DAB6C0;
  strcpy(v16[0], "enable-default-function-for-range-dim");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DC5470;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to enable or disable adding default function for models with RangeDim.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_121:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
        goto LABEL_122;
      }
LABEL_284:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_285;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_284;
  }
LABEL_122:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_123;
  }
LABEL_285:
  operator delete(v16[3]);
LABEL_123:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 19;
  strcpy((char *)v16, "move-read-state-ops");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DB5500;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to move read_state ops closer to theirconsumers during program canonicalization.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
        goto LABEL_126;
      }
LABEL_288:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_127;
      }
      goto LABEL_289;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_288;
  }
LABEL_126:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_127;
  }
LABEL_289:
  operator delete(v16[3]);
LABEL_127:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 18;
  strcpy((char *)v16, "shrink-quant-group");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DA88E0;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to shrink quantization group.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_129:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
        goto LABEL_130;
      }
LABEL_292:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_131;
      }
      goto LABEL_293;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_129;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_292;
  }
LABEL_130:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_131;
  }
LABEL_293:
  operator delete(v16[3]);
LABEL_131:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_192DB16C0;
  strcpy(v16[0], "coalesce-ops-with-consumers");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DB2FE0;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to coalesce operations closer to their consumers during program canonicalization.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_133:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
        goto LABEL_134;
      }
LABEL_296:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_135;
      }
      goto LABEL_297;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_133;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_296;
  }
LABEL_134:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_135;
  }
LABEL_297:
  operator delete(v16[3]);
LABEL_135:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_192DB5600;
  strcpy(v16[0], "match-e5-minimal-cpu-patterns");
  char __p[23] = 5;
  strcpy(__p, "false");
  *((unsigned char *)&v14.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v14, "true");
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x120uLL);
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_192DC5480;
  strcpy(v13.__r_.__value_.__l.__data_, "Flag to override whether to match patterns for E5MinimalCpu kernels. If enabled, patterns supported by the E5MinimalCpu backend will always be scheduled there. E5MinimalCpu is used to provide efficient support for operations that are not efficiently supported by any other backend.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefaultAndImplicit((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_137:
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_138;
      }
      goto LABEL_300;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_137;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_138:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_139;
    }
LABEL_301:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_140;
    }
    goto LABEL_302;
  }
LABEL_300:
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_301;
  }
LABEL_139:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_140;
  }
LABEL_302:
  operator delete(v16[3]);
LABEL_140:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v16[1] = xmmword_192DAC000;
  strcpy(v16[0], "match-e5-minimal-cpu-patterns-for-states");
  char __p[23] = 5;
  strcpy(__p, "false");
  *((unsigned char *)&v14.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v14, "true");
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x138uLL);
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_192DC5490;
  strcpy(v13.__r_.__value_.__l.__data_, "Flag to override whether to match patterns for E5MinimalCpu kernels. If enabled, ReadState and WriteState patterns supported by the E5MinimalCpu backend will always be scheduled there. E5MinimalCpu is used to provide efficient support for operations that are not efficiently supported by any other backend.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefaultAndImplicit((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_143;
      }
      goto LABEL_305;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_142;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_143:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
      goto LABEL_144;
    }
LABEL_306:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_145;
    }
    goto LABEL_307;
  }
LABEL_305:
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0) {
    goto LABEL_306;
  }
LABEL_144:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_145;
  }
LABEL_307:
  operator delete(v16[3]);
LABEL_145:
  char v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 14;
  strcpy((char *)v16, "merge-segments");
  char __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x80uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_192DC54A0;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to merge segments if possible (segments must use the same backend and may not create a cycle in the graph).");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_147:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0) {
        goto LABEL_148;
      }
      goto LABEL_310;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_147;
  }
  operator delete(*(void **)__p);
  if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
  {
LABEL_148:
    if ((v17 & 0x80000000) == 0) {
      return;
    }
LABEL_311:
    operator delete(v16[3]);
    return;
  }
LABEL_310:
  operator delete(v16[0]);
  if (v17 < 0) {
    goto LABEL_311;
  }
}