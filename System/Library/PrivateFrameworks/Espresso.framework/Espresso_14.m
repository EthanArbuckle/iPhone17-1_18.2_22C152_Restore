void sub_1928072DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::gather_nd_kernel::on_resized(Espresso::MPSBuffersEngine::gather_nd_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  v6 = (void *)*((void *)this + 38);
  *((void *)this + 38) = 0;

  uint64_t v7 = *(void *)a2;
  if (*((void *)a2 + 1) == *(void *)a2) {
    return;
  }
  uint64_t v8 = *(void *)a3;
  if (*((void *)a3 + 1) - *(void *)a3 < 0x20uLL) {
    return;
  }
  if (!*(void *)v7)
  {
    v9 = 0;
    goto LABEL_8;
  }
  if (!v9)
  {
LABEL_8:
    v10 = 0;
    goto LABEL_9;
  }
  v10 = *(std::__shared_weak_count **)(v7 + 8);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void *)a3;
  }
LABEL_9:
  v68 = v10;
  if (!*(void *)v8)
  {
    v11 = 0;
    goto LABEL_14;
  }
  if (!v11)
  {
LABEL_14:
    v12 = 0;
    goto LABEL_15;
  }
  v12 = *(std::__shared_weak_count **)(v8 + 8);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void *)a3;
  }
LABEL_15:
  v13 = *(const void **)(v8 + 16);
  if (v13)
  {
    if (v14)
    {
      v15 = *(std::__shared_weak_count **)(v8 + 24);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_21;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
LABEL_21:
  v16 = (const void *)*((void *)this + 1);
  if (!v16
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  v18 = v17;
  v19 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9 && v11 && v14)
  {
    int v20 = (*(uint64_t (**)(char *))(*(void *)v11 + 32))(v11);
    int v21 = *((_DWORD *)v11 + 2);
    int v22 = *((_DWORD *)v11 + 3);
    int v23 = *((_DWORD *)v11 + 4);
    int32x2_t v24 = vmax_s32(*(int32x2_t *)(v11 + 20), (int32x2_t)0x100000001);
    if ((v20 - 1) > 0xC) {
      unint64_t v25 = 4;
    }
    else {
      unint64_t v25 = qword_192DF6AD8[v20 - 1];
    }
    unint64_t v26 = (*((void *)v11 + 31) + *((void *)v11 + 31) * ((v25 * v21 - 1) / *((void *)v11 + 31))) / v25;
    int v27 = v22 * v26 * v23;
    *((_DWORD *)this + 88) = v21;
    *((_DWORD *)this + 89) = v22;
    *((_DWORD *)this + 90) = v23;
    *(int32x2_t *)((char *)this + 364) = v24;
    *((_DWORD *)this + 93) = 1;
    *((_DWORD *)this + 94) = v26;
    *((_DWORD *)this + 95) = v22 * v26;
    *((_DWORD *)this + 96) = v27;
    *((_DWORD *)this + 97) = v27 * v24.i32[0];
    int v28 = (*(uint64_t (**)(char *))(*(void *)v14 + 32))(v14);
    int v29 = *((_DWORD *)v14 + 2);
    int v30 = *((_DWORD *)v14 + 3);
    int v31 = *((_DWORD *)v14 + 4);
    int32x2_t v32 = vmax_s32(*(int32x2_t *)(v14 + 20), (int32x2_t)0x100000001);
    if ((v28 - 1) > 0xC) {
      unint64_t v33 = 4;
    }
    else {
      unint64_t v33 = qword_192DF6AD8[v28 - 1];
    }
    unint64_t v34 = (*((void *)v14 + 31) + *((void *)v14 + 31) * ((v33 * v29 - 1) / *((void *)v14 + 31))) / v33;
    int v35 = v30 * v34 * v31;
    *((_DWORD *)this + 98) = v29;
    *((_DWORD *)this + 99) = v30;
    *((_DWORD *)this + 100) = v31;
    *(int32x2_t *)((char *)this + 404) = v32;
    *((_DWORD *)this + 103) = 1;
    *((_DWORD *)this + 104) = v34;
    *((_DWORD *)this + 105) = v30 * v34;
    *((_DWORD *)this + 106) = v35;
    *((_DWORD *)this + 107) = v35 * v32.i32[0];
    int v36 = (*(uint64_t (**)(char *))(*(void *)v9 + 32))(v9);
    int v37 = *((_DWORD *)v9 + 2);
    int v38 = *((_DWORD *)v9 + 3);
    int v39 = *((_DWORD *)v9 + 4);
    int32x2_t v40 = vmax_s32(*(int32x2_t *)(v9 + 20), (int32x2_t)0x100000001);
    if ((v36 - 1) > 0xC) {
      unint64_t v41 = 4;
    }
    else {
      unint64_t v41 = qword_192DF6AD8[v36 - 1];
    }
    unint64_t v42 = (*((void *)v9 + 31) + *((void *)v9 + 31) * ((v41 * v37 - 1) / *((void *)v9 + 31))) / v41;
    int v43 = v38 * v42 * v39;
    *((_DWORD *)this + 78) = v37;
    *((_DWORD *)this + 79) = v38;
    *((_DWORD *)this + 80) = v39;
    *(int32x2_t *)((char *)this + 324) = v40;
    *((_DWORD *)this + 83) = 1;
    *((_DWORD *)this + 84) = v42;
    *((_DWORD *)this + 85) = v38 * v42;
    *((_DWORD *)this + 86) = v43;
    *((_DWORD *)this + 87) = v43 * v40.i32[0];
    Espresso::abstract_blob_container::shape(v71, **(void **)a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v74, (const Espresso::layer_shape *)v71, 0);
    if (__p)
    {
      v73 = __p;
      operator delete(__p);
    }
    unsigned int v44 = v75;
    Espresso::abstract_blob_container::shape(v71, *(void *)(*(void *)a3 + 16));
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v69, (const Espresso::layer_shape *)v71, 0);
    if (__p)
    {
      v73 = __p;
      operator delete(__p);
    }
    int v45 = *((_DWORD *)this + 71);
    int v46 = v44 & (v45 >> 31);
    BOOL v47 = __OFADD__(v46, v45);
    int v48 = v46 + v45;
    if (v48 < 0 != v47) {
      uint64_t v49 = v75;
    }
    else {
      uint64_t v49 = v48;
    }
    int v50 = 1;
    if ((int)v49 >= 1)
    {
      v51 = v74;
      do
      {
        int v52 = *v51++;
        v50 *= v52;
        --v49;
      }
      while (v49);
    }
    if (v48 < 0) {
      int v53 = -1;
    }
    else {
      int v53 = v48;
    }
    unsigned int v54 = v53 + 1;
    if (v53 + 1 >= (int)v75)
    {
      int v56 = 1;
    }
    else
    {
      unint64_t v55 = v75 - (unint64_t)v54;
      int v56 = 1;
      v57 = &v74[v54];
      do
      {
        int v58 = *v57++;
        v56 *= v58;
        --v55;
      }
      while (v55);
    }
    int v59 = v74[v48];
    uint64_t v60 = v70;
    int v61 = 1;
    if (v70 >= 1)
    {
      v62 = (int *)v69;
      do
      {
        int v63 = *v62++;
        v61 *= v63;
        --v60;
      }
      while (v60);
    }
    *((_DWORD *)this + 112) = v48;
    *((_DWORD *)this + 109) = v50;
    *((_DWORD *)this + 108) = v59;
    *((_DWORD *)this + 110) = v56;
    *((_DWORD *)this + 111) = v61;
    if (!*((_DWORD *)this + 70))
    {
      if ((*(unsigned int (**)(char *))(*(void *)v9 + 32))(v9))
      {
        if ((*(unsigned int (**)(char *))(*(void *)v9 + 32))(v9) != 1) {
          Espresso::throw_exception_selector<Espresso::generic_error>("Failed to find kernel for TF_GATHER in gather_nd kernel mps buffers");
        }
        v64 = @"gather_nd_tf_gather_mode_kernel_f16_buffers";
      }
      else
      {
        v64 = @"gather_nd_tf_gather_mode_kernel_f32_buffers";
      }
      uint64_t v65 = Espresso::context_metal::kernel_for_function(v18, &v64->isa);
      v66 = (void *)*((void *)this + 38);
      *((void *)this + 38) = v65;
    }
    if (!*((void *)this + 38)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to find kernel in gather_nd kernel MPSBuffers");
    }
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }
}

void sub_19280799C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    if (!v22)
    {
LABEL_3:
      if (!v21) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if (!v22)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v22);
  if (!v21)
  {
LABEL_4:
    if (!v20) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  nitro::nitro_function::nitro_function(v21);
  if (!v20)
  {
LABEL_6:
    if (a10) {
      nitro::nitro_function::nitro_function(a10);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  nitro::nitro_function::nitro_function(v20);
  goto LABEL_6;
}

void Espresso::MPSBuffersEngine::gather_nd_kernel::blob_options(Espresso::MPSBuffersEngine::gather_nd_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192807BB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::gather_nd_kernel::__launch(Espresso::MPSBuffersEngine::gather_nd_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  if (!*((void *)this + 38))
  {
    Espresso::MPSBuffersEngine::gather_nd_kernel::on_resized(this, a3, a4);
    if (!*((void *)this + 38)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to create kernel for gather_nd mps buffers.");
    }
  }
  uint64_t v8 = *(void **)a4;
  v9 = **(const void ***)a4;
  if (!v9)
  {
    v10 = 0;
    goto LABEL_8;
  }
  if (!v10)
  {
LABEL_8:
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = (std::__shared_weak_count *)v8[1];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void **)a4;
  }
LABEL_9:
  uint64_t v12 = (const void *)v8[2];
  if (!v12)
  {
    v13 = 0;
    goto LABEL_14;
  }
  if (!v13)
  {
LABEL_14:
    v14 = 0;
    goto LABEL_15;
  }
  v14 = (std::__shared_weak_count *)v8[3];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  uint64_t v15 = *(void *)a3;
  if (!*(void *)v15) {
    goto LABEL_28;
  }
  if (!v16) {
    goto LABEL_28;
  }
  v17 = v16;
  v18 = *(std::__shared_weak_count **)(v15 + 8);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10 || !v13) {
LABEL_28:
  }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Found nil blob in gather_nd mps buffers");
  id v19 = v10[21];
  id v20 = v13[21];
  id v21 = v17[21];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v23, *a2);
  id v22 = v23[0];
  [v22 setComputePipelineState:*((void *)this + 38)];
  [v22 setBuffer:v19 offset:0 atIndex:0];
  [v22 setBuffer:v20 offset:0 atIndex:1];
  [v22 setBuffer:v21 offset:0 atIndex:2];
  [v22 setBytes:(char *)this + 352 length:40 atIndex:3];
  [v22 setBytes:(char *)this + 392 length:40 atIndex:4];
  [v22 setBytes:(char *)this + 312 length:40 atIndex:5];
  [v22 setBytes:(char *)this + 432 length:20 atIndex:6];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v23);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192807ECC(_Unwind_Exception *a1)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::MPSBuffersEngine::gather_nd_kernel::~gather_nd_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sgd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_sgd_kernel::kernel_type_str(Espresso::generic_sgd_kernel *this)
{
  return "sgd";
}

void Espresso::MPSBuffersEngine::sgd_kernel::blob_options(Espresso::MPSBuffersEngine::sgd_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192808140(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::sgd_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (*(void *)a2
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5)
    {
      int v50 = *(std::__shared_weak_count **)(a2 + 8);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_7;
    }
  }
  else
  {
    int v52 = 0;
  }
  int v50 = 0;
LABEL_7:
  uint64_t v6 = *(int *)(a1 + 288);
  if (*(unsigned char *)(a1 + 280))
  {
    uint64_t v7 = 3 * v6;
    uint64_t v8 = *a4;
    if (v7 + 1 < (unint64_t)((a4[1] - *a4) >> 4)) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("momentum scale as input is not supported on mps buffers sgd");
    }
  }
  else
  {
    uint64_t v7 = 2 * (int)v6;
    uint64_t v8 = *a4;
  }
  long long v9 = *(_OWORD *)(v8 + 16 * v7);
  v10 = *(std::__shared_weak_count **)(v8 + 16 * v7 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v49 = v10;
  *(float *)&double v11 = get_cpu_scalar(a2, (uint64_t *)v9, v10);
  [*(id *)(a1 + 296) setLearningRate:v11];
  LODWORD(v12) = *(_DWORD *)(a1 + 288);
  if (v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = *a4;
      v16 = *(const void **)(*a4 + v13);
      if (v16
      {
        v18 = *(std::__shared_weak_count **)(v15 + v13 + 8);
        uint64_t v65 = v17;
        v66 = v18;
        if (v18)
        {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          LODWORD(v12) = *(_DWORD *)(a1 + 288);
          uint64_t v15 = *a4;
        }
      }
      else
      {
        uint64_t v65 = 0;
        v66 = 0;
      }
      unint64_t v19 = v14 + (int)v12;
      id v20 = *(const void **)(v15 + 16 * v19);
      if (v20
      {
        id v22 = *(std::__shared_weak_count **)(v15 + 16 * v19 + 8);
        int v63 = v21;
        v64 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        int v63 = 0;
        v64 = 0;
      }
      uint64_t v23 = *a3;
      int32x2_t v24 = *(const void **)(*a3 + v13);
      if (v24
      {
        unint64_t v26 = *(std::__shared_weak_count **)(v23 + v13 + 8);
        int v61 = v25;
        v62 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        int v61 = 0;
        v62 = 0;
      }
      if (*(unsigned char *)(a1 + 280)) {
        break;
      }
      unint64_t v33 = *(void **)(a1 + 296);
      uint64_t v34 = v52[18];
      int v35 = pack_mps_vector((uint64_t)&v63);
      int v36 = pack_mps_vector((uint64_t)&v65);
      int v37 = pack_mps_vector((uint64_t)&v61);
      [v33 encodeToCommandBuffer:v34 inputGradientVector:v35 inputValuesVector:v36 inputMomentumVector:0 resultValuesVector:v37];

LABEL_53:
      if (v62) {
        nitro::nitro_function::nitro_function(v62);
      }
      if (v64) {
        nitro::nitro_function::nitro_function(v64);
      }
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }
      ++v14;
      unint64_t v12 = *(int *)(a1 + 288);
      v13 += 16;
      if (v14 >= v12) {
        goto LABEL_60;
      }
    }
    uint64_t v27 = *(int *)(a1 + 288);
    unint64_t v28 = v14 + 2 * v27;
    uint64_t v29 = *a4;
    int v30 = *(const void **)(*a4 + 16 * v28);
    if (v30)
    {
      if (v31)
      {
        int32x2_t v32 = *(std::__shared_weak_count **)(v29 + 16 * v28 + 8);
        if (v32)
        {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          LODWORD(v27) = *(_DWORD *)(a1 + 288);
        }
        goto LABEL_38;
      }
    }
    else
    {
      int v31 = 0;
    }
    int32x2_t v32 = 0;
LABEL_38:
    unint64_t v38 = v14 + (int)v27;
    uint64_t v39 = *a3;
    int32x2_t v40 = *(const void **)(*a3 + 16 * v38);
    if (v40
    {
      unint64_t v42 = *(std::__shared_weak_count **)(v39 + 16 * v38 + 8);
      int v59 = v41;
      uint64_t v60 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      unint64_t v41 = 0;
      int v59 = 0;
      uint64_t v60 = 0;
    }
    v57 = v31;
    int v58 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v55 = 0;
    int v56 = 0;
    (*(void (**)(void *, uint64_t, void **, uint64_t *))(*(void *)v41 + 144))(v41, a2, &v57, &v55);
    if (v56) {
      nitro::nitro_function::nitro_function(v56);
    }
    if (v58) {
      nitro::nitro_function::nitro_function(v58);
    }
    int v43 = *(void **)(a1 + 296);
    uint64_t v44 = v52[18];
    int v45 = pack_mps_vector((uint64_t)&v63);
    int v46 = pack_mps_vector((uint64_t)&v65);
    BOOL v47 = pack_mps_vector((uint64_t)&v59);
    int v48 = pack_mps_vector((uint64_t)&v61);
    [v43 encodeToCommandBuffer:v44 inputGradientVector:v45 inputValuesVector:v46 inputMomentumVector:v47 resultValuesVector:v48];

    if (v60) {
      nitro::nitro_function::nitro_function(v60);
    }
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    goto LABEL_53;
  }
LABEL_60:
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
}

void sub_1928086E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1928087B8()
{
  JUMPOUT(0x1928087C0);
}

float get_cpu_scalar(uint64_t a1, uint64_t *lpsrc, std::__shared_weak_count *a3)
{
  uint64_t v6 = *lpsrc;
  if (v7)
  {
    if (!a3) {
      return **(float **)(v7[20] + 24);
    }
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    float v8 = **(float **)(v7[20] + 24);
    long long v9 = a3;
    goto LABEL_5;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(v6 + 40))(lpsrc, a1, &v11);
  (*(void (**)(void))(**(void **)a1 + 40))();
  long long v9 = v12;
  float v8 = **(float **)(v11 + 24);
  if (v12) {
LABEL_5:
  }
    nitro::nitro_function::nitro_function(v9);
  return v8;
}

void sub_192808904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

id pack_mps_vector(uint64_t a1)
{
  v2 = [MEMORY[0x1E4F35998] vectorDescriptorWithLength:(*(_DWORD *)(*(void *)a1 + 12)* *(_DWORD *)(*(void *)a1 + 240)* *(_DWORD *)(*(void *)a1 + 16)* *(_DWORD *)(*(void *)a1 + 20)* *(_DWORD *)(*(void *)a1 + 24)) dataType:*(unsigned int *)(*(void *)a1 + 192)];
  v3 = (void *)[objc_alloc(MEMORY[0x1E4F35990]) initWithBuffer:*(void *)(*(void *)a1 + 168) descriptor:v2];

  return v3;
}

void sub_1928089AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::sgd_kernel::~sgd_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::adam_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_adam_kernel::kernel_type_str(Espresso::generic_adam_kernel *this)
{
  return "adam";
}

void Espresso::MPSBuffersEngine::adam_kernel::blob_options(Espresso::MPSBuffersEngine::adam_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  float v8 = v7;
  long long v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192808BCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::adam_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (*(void *)a2
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 292);
  uint64_t v8 = *a4;
  if (((4 * v7) | 2uLL) < (a4[1] - *a4) >> 4) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("betas as input is not supported on mps buffers adam");
  }
  uint64_t v9 = 4 * v7;
  long long v10 = *(_OWORD *)(v8 + 16 * v9);
  uint64_t v11 = *(std::__shared_weak_count **)(v8 + 16 * v9 + 8);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *a4;
  }
  long long v12 = *(_OWORD *)(v8 + ((16 * v9) | 0x10));
  uint64_t v65 = *(uint64_t **)(v8 + ((16 * v9) | 0x10));
  uint64_t v13 = *(std::__shared_weak_count **)(v8 + ((16 * v9) | 0x10) + 8);
  if (*((void *)&v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v58 = v6;
  float cpu_scalar = get_cpu_scalar(a2, (uint64_t *)v10, v11);
  int v56 = v13;
  v57 = v11;
  uint64_t v63 = a2;
  float v15 = get_cpu_scalar(a2, v65, v13);
  *(float *)&double v16 = cpu_scalar;
  [*(id *)(a1 + 296) setLearningRate:v16];
  if (*(_DWORD *)(a1 + 292))
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v59 = (int)llroundf(v15);
    uint64_t v64 = a1;
    do
    {
      [*(id *)(a1 + 296) setTimeStep:v59];
      uint64_t v19 = *a4;
      id v20 = *(const void **)(*a4 + v17);
      if (v20
      {
        id v22 = *(std::__shared_weak_count **)(v19 + v17 + 8);
        v83 = v21;
        v84 = v22;
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v19 = *a4;
        }
      }
      else
      {
        v83 = 0;
        v84 = 0;
      }
      uint64_t v23 = *(int *)(a1 + 292);
      int32x2_t v24 = *(const void **)(v19 + 16 * (v18 + v23));
      if (v24
      {
        unint64_t v26 = *(std::__shared_weak_count **)(v19 + 16 * (v18 + v23) + 8);
        v81 = v25;
        v82 = v26;
        if (v26)
        {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          LODWORD(v23) = *(_DWORD *)(a1 + 292);
          uint64_t v19 = *a4;
        }
      }
      else
      {
        v81 = 0;
        v82 = 0;
      }
      unint64_t v27 = v18 + 2 * (int)v23;
      unint64_t v28 = *(const void **)(v19 + 16 * v27);
      if (v28)
      {
        if (v29)
        {
          uint64_t v30 = *(void *)(v19 + 16 * v27 + 8);
          if (v30)
          {
            v66 = *(std::__shared_weak_count **)(v19 + 16 * v27 + 8);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
            LODWORD(v23) = *(_DWORD *)(a1 + 292);
            uint64_t v19 = *a4;
            goto LABEL_29;
          }
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      v66 = 0;
LABEL_29:
      unint64_t v31 = v18 + 3 * (int)v23;
      int32x2_t v32 = *(const void **)(v19 + 16 * v31);
      if (v32)
      {
        if (v33)
        {
          uint64_t v34 = *(std::__shared_weak_count **)(v19 + 16 * v31 + 8);
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_35;
        }
      }
      else
      {
        unint64_t v33 = 0;
      }
      uint64_t v34 = 0;
LABEL_35:
      uint64_t v35 = *a3;
      int v36 = *(const void **)(*a3 + v17);
      if (v36
      {
        unint64_t v38 = *(std::__shared_weak_count **)(v35 + v17 + 8);
        v79 = v37;
        v80 = v38;
        if (v38)
        {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v35 = *a3;
        }
      }
      else
      {
        v79 = 0;
        v80 = 0;
      }
      uint64_t v39 = *(int *)(a1 + 292);
      int32x2_t v40 = *(const void **)(v35 + 16 * (v18 + v39));
      if (v40
      {
        unint64_t v42 = v41;
        int v43 = *(std::__shared_weak_count **)(v35 + 16 * (v18 + v39) + 8);
        v77 = v41;
        v78 = v43;
        if (v43)
        {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          LODWORD(v39) = *(_DWORD *)(v64 + 292);
          uint64_t v35 = *a3;
        }
      }
      else
      {
        unint64_t v42 = 0;
        v77 = 0;
        v78 = 0;
      }
      unint64_t v44 = v18 + 2 * (int)v39;
      int v45 = *(const void **)(v35 + 16 * v44);
      if (v45
      {
        BOOL v47 = v46;
        unsigned int v75 = v46;
        int v48 = *(std::__shared_weak_count **)(v35 + 16 * v44 + 8);
        v76 = v48;
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        BOOL v47 = 0;
        unsigned int v75 = 0;
        v76 = 0;
      }
      v73 = v29;
      v74 = v66;
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v71 = 0;
      v72 = 0;
      (*(void (**)(void *, uint64_t, void **, uint64_t *))(*(void *)v42 + 144))(v42, v63, &v73, &v71);
      if (v72) {
        nitro::nitro_function::nitro_function(v72);
      }
      if (v74) {
        nitro::nitro_function::nitro_function(v74);
      }
      v69 = v33;
      int v70 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v67 = 0;
      v68 = 0;
      (*(void (**)(void *, uint64_t, void **, uint64_t *))(*(void *)v47 + 144))(v47, v63, &v69, &v67);
      if (v68) {
        nitro::nitro_function::nitro_function(v68);
      }
      if (v70) {
        nitro::nitro_function::nitro_function(v70);
      }
      uint64_t v49 = *(void **)(v64 + 296);
      uint64_t v50 = v60[18];
      v51 = pack_mps_vector((uint64_t)&v81);
      int v52 = pack_mps_vector((uint64_t)&v83);
      int v53 = pack_mps_vector((uint64_t)&v77);
      unsigned int v54 = pack_mps_vector((uint64_t)&v75);
      uint64_t v55 = pack_mps_vector((uint64_t)&v79);
      [v49 encodeToCommandBuffer:v50 inputGradientVector:v51 inputValuesVector:v52 inputMomentumVector:v53 inputVelocityVector:v54 resultValuesVector:v55];

      if (v76) {
        nitro::nitro_function::nitro_function(v76);
      }
      a1 = v64;
      if (v78) {
        nitro::nitro_function::nitro_function(v78);
      }
      if (v80) {
        nitro::nitro_function::nitro_function(v80);
      }
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }
      if (v82) {
        nitro::nitro_function::nitro_function(v82);
      }
      if (v84) {
        nitro::nitro_function::nitro_function(v84);
      }
      ++v18;
      v17 += 16;
    }
    while (v18 < *(int *)(v64 + 292));
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
}

void sub_19280933C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (v32)
  {
    nitro::nitro_function::nitro_function(v32);
    if (!v31)
    {
LABEL_3:
      if (!a12) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v31)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v31);
  if (!a12) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(a12);
  goto LABEL_5;
}

void Espresso::MPSBuffersEngine::adam_kernel::~adam_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSBuffersEngine::dev_op_kernel::is_valid_for_engine(uint64_t a1)
{
  if (*(char *)(a1 + 367) < 0)
  {
    if (*(void *)(a1 + 352)) {
      return *(_DWORD *)(a1 + 280) == 50002;
    }
  }
  else if (*(unsigned char *)(a1 + 367))
  {
    return *(_DWORD *)(a1 + 280) == 50002;
  }
  return 0;
}

void Espresso::MPSBuffersEngine::dev_op_kernel::on_resized(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v2 = [NSString alloc];
  v3 = (void *)(a1 + 344);
  if (*(char *)(a1 + 367) < 0) {
    v3 = (void *)*v3;
  }
  v4 = (void *)[v2 initWithCString:v3 encoding:4];
  uint64_t v5 = [*(id *)(a1 + 416) stringByAppendingPathComponent:v4];
  uint64_t v7 = Espresso::espresso_os_log_subsystem(v5, v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = [(Espresso *)v5 UTF8String];
    _os_log_debug_impl(&dword_1920CB000, v7, OS_LOG_TYPE_DEBUG, "mpsbuffers dev_op: attempting to access mil program at %s", buf, 0xCu);
  }

  MIL::MILContext::Make((uint64_t *)buf, v8);
  std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>(a1 + 448, buf);
  uint64_t v9 = *(MIL::ParserOptions **)buf;
  *(void *)buf = 0;
  if (v9) {
    uint64_t v9 = (MIL::ParserOptions *)(*(uint64_t (**)(MIL::ParserOptions *))(*(void *)v9 + 8))(v9);
  }
  MIL::ParserOptions::Make((uint64_t *)buf, v9);
  uint64_t v10 = *(void *)buf;
  uint64_t v11 = v5;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[(Espresso *)v11 UTF8String]);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 32))(v10, __p, 1);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void, uint64_t))(**(void **)buf + 64))(*(void *)buf, 1);
  long long v12 = *(std::__shared_weak_count **)(a1 + 456);
  uint64_t v21 = *(void *)(a1 + 448);
  id v22 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Text::ParseProgramFromFile();
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (!v23) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to load MIL program.");
  }
  uint64_t v13 = objc_opt_new();
  objc_msgSend(v13, "setCompilerOptions:", objc_msgSend(v13, "compilerOptions", v21) | 0x10);
  unint64_t v14 = objc_opt_new();
  [v13 setCompilationDescriptor:v14];

  float v15 = [v13 compilationDescriptor];
  [v15 setOptimizationLevel:0];

  id v16 = objc_alloc(MEMORY[0x1E4F35A58]);
  uint64_t v17 = objc_opt_new();
  uint64_t v18 = [v16 initWithMILProgram:v23 executableDescriptor:v17];
  uint64_t v19 = *(void **)(a1 + 440);
  *(void *)(a1 + 440) = v18;

  (*(void (**)())(*(void *)v23 + 8))();
  uint64_t v20 = *(void *)buf;
  *(void *)buf = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
}

void sub_192809880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = 0u;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return a1;
}

void Espresso::MPSBuffersEngine::dev_op_kernel::blob_options(Espresso::MPSBuffersEngine::dev_op_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192809BCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::dev_op_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 440))
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 80))(a1, a3, a4);
    if (!*(void *)(a1 + 440)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expected non-nill executable in dev_op kernel.");
    }
  }
  if (!*(void *)a2)
  {
    uint64_t v8 = 0;
LABEL_8:
    uint64_t v35 = 0;
    goto LABEL_9;
  }
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v35 = *(std::__shared_weak_count **)(a2 + 8);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
LABEL_9:
  if (!*(void *)(a1 + 424))
  {
    uint64_t v10 = objc_opt_new();
    uint64_t v11 = *(void **)(a1 + 424);
    *(void *)(a1 + 424) = v10;

    uint64_t v12 = *a4;
    if (a4[1] != *a4)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        uint64_t v15 = v12 + v13;
        uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = objc_msgSend(v16[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *((void *)v8 + 18), v16[28], 1, v35);
        uint64_t v19 = (void *)[objc_alloc(MEMORY[0x1E4F35A90]) initWithMPSNDArray:v18];
        [*(id *)(a1 + 424) addObject:v19];

        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        ++v14;
        uint64_t v12 = *a4;
        v13 += 16;
      }
      while (v14 < (a4[1] - *a4) >> 4);
    }
  }
  if (!*(void *)(a1 + 432))
  {
    uint64_t v20 = objc_opt_new();
    uint64_t v21 = *(void **)(a1 + 432);
    *(void *)(a1 + 432) = v20;

    uint64_t v22 = *a3;
    if (a3[1] != *a3)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      do
      {
        uint64_t v25 = v22 + v23;
        uint64_t v27 = *(std::__shared_weak_count **)(v25 + 8);
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v28 = objc_msgSend(v26[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *((void *)v8 + 18), v26[28], 1, v35);
        uint64_t v29 = (void *)[objc_alloc(MEMORY[0x1E4F35A90]) initWithMPSNDArray:v28];
        [*(id *)(a1 + 432) addObject:v29];

        if (v27) {
          nitro::nitro_function::nitro_function(v27);
        }
        ++v24;
        uint64_t v22 = *a3;
        v23 += 16;
      }
      while (v24 < (a3[1] - *a3) >> 4);
    }
  }
  Espresso::batch_metal::recreate_command_buffer((Espresso::batch_metal *)v8);
  id v30 = *((id *)v8 + 23);
  if (!v30)
  {
    int32x2_t v32 = *(std::__shared_weak_count **)(a1 + 16);
    if (v32)
    {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      id v30 = v31[24];
      nitro::nitro_function::nitro_function(v32);
      if (v30) {
        goto LABEL_28;
      }
LABEL_36:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("No command queue found in dev_op");
    }
    id v30 = v31[24];
    if (!v30) {
      goto LABEL_36;
    }
  }
LABEL_28:
  unint64_t v33 = objc_opt_new();
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3321888768;
  v36[2] = ___ZN8Espresso16MPSBuffersEngine13dev_op_kernel8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke;
  v36[3] = &__block_descriptor_56_ea8_40c53_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine5batchEEE_e29_v24__0__NSArray_8__NSError_16l;
  v36[4] = a1;
  v36[5] = v8;
  int v37 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = (void *)MEMORY[0x192FF2250](v36);
  [v33 setScheduledHandler:v34];
  [*(id *)(a1 + 440) runAsyncWithMTLCommandQueue:v30 inputsArray:*(void *)(a1 + 424) resultsArray:*(void *)(a1 + 432) executionDescriptor:v33];

  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }

  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
}

void sub_19280A070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso16MPSBuffersEngine13dev_op_kernel8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  while (v6 < [*(id *)(v7 + 432) count])
  {
    uint64_t v8 = [*(id *)(v7 + 432) objectAtIndex:v6];
    uint64_t v9 = [v8 mpsndarray];
    [v9 synchronizeOnCommandBuffer:*(void *)(*(void *)(a1 + 40) + 144)];

    ++v6;
  }
}

void sub_19280A1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c53_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine5batchEEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c53_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine5batchEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::MPSBuffersEngine::dev_op_kernel::~dev_op_kernel(Espresso::MPSBuffersEngine::dev_op_kernel *this)
{
  *(void *)this = &unk_1EE33BAD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE33BAD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel((void **)this);
}

void sub_19280A3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37B7D0;
      v13[1] = v3 + 16;
      unint64_t v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      unint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          uint64_t v11 = v7 + 1;
          if (v10) {
            uint64_t v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_19280A4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes22merge_tf_normalizationERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  v3 = (Espresso::zephyr::node_t *)*a2;
  matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(*a2, 0);
  if (!matched)
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem(0, v5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 148;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "match_simple_eltwise_binop(add1, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_20;
    }
    return 0;
  }
  uint64_t v6 = *((void *)v3 + 15);
  uint64_t v7 = *((void *)v3 + 16);
  while (1)
  {
    if (v6 == v7) {
      goto LABEL_17;
    }
    if (*(void *)v6)
    {
      uint64_t v8 = *(void *)(*(void *)v6 + 80);
      matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v8, 0x21u);
      if (matched) {
        break;
      }
    }
    v6 += 8;
  }
  if (!v8)
  {
LABEL_17:
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem(matched, v5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 153;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "sub";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_20:

      return 0;
    }
    return 0;
  }
  uint64_t v10 = *((void *)v3 + 15);
  uint64_t v11 = *((void *)v3 + 16);
  while (1)
  {
    if (v10 == v11) {
      goto LABEL_30;
    }
    if (*(void *)v10)
    {
      uint64_t v12 = *(void *)(*(void *)v10 + 80);
      matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v12, 1u);
      if (matched) {
        break;
      }
    }
    v10 += 8;
  }
  if (!v12)
  {
LABEL_30:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(matched, v5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 158;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul1";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  unint64_t v14 = *(Espresso::zephyr::node_t **)(**(void **)(v8 + 120) + 80);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v14))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(0, v15);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 161;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "zephyr::cast_kernel<generic_load_constant_kernel>(beta_read)";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  uint64_t v16 = *(void *)(*(void *)(*(void *)(v8 + 120) + 8) + 80);
  constant = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v16, 1u);
  if (!constant)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(0, v18);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 164;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(mul2, ELEMENTWISE_OPERATION_MUL)";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)(v12 + 120);
  uint64_t v20 = *(void *)(v12 + 128);
  while (1)
  {
    if (v19 == v20) {
      goto LABEL_49;
    }
    if (*(void *)v19)
    {
      uint64_t v21 = *(void *)(*(void *)v19 + 80);
      constant = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v21, 1u);
      if (constant) {
        break;
      }
    }
    v19 += 8;
  }
  if (!v21)
  {
LABEL_49:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(constant, v18);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 170;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  uint64_t v22 = *(void *)(v16 + 120);
  uint64_t v23 = *(void *)(v16 + 128);
  while (1)
  {
    if (v22 == v23)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem(constant, v18);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 177;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "mul_from_mul2";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_20;
    }
    if (*(void *)v22)
    {
      if (v21 == *(void *)(*(void *)v22 + 80))
      {
        constant = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v21, 1u);
        if (constant) {
          break;
        }
      }
    }
    v22 += 8;
  }
  unint64_t v24 = (Espresso::zephyr::node_t *)v21;
  uint64_t v26 = *(void *)(v21 + 120);
  uint64_t v25 = *(void *)(v21 + 128);
  if (v26 == v25) {
    goto LABEL_62;
  }
  uint64_t v27 = v16;
  while (1)
  {
    if (*(void *)v26)
    {
      unint64_t v28 = *(Espresso::zephyr::node_t **)(*(void *)v26 + 80);
      constant = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v28);
      if (constant) {
        break;
      }
    }
    v26 += 8;
    if (v26 == v25) {
      goto LABEL_62;
    }
  }
  if (!v28)
  {
LABEL_62:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(constant, v18);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 182;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "gamma_read";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  long long v76 = 0u;
  long long v77 = 0u;
  long long v75 = 0u;
  uint64_t v29 = (Espresso *)Espresso::zephyr_passes::normalization_factors_matcher::match((Espresso::zephyr_passes::normalization_factors_matcher *)&v75, v24);
  if ((v29 & 1) == 0)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v29, v30);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 186;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "f.match(mul)";
      _os_log_impl(&dword_1920CB000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_81;
  }
  unint64_t v31 = *(uint64_t **)(v77 + 96);
  if (*(uint64_t **)(v77 + 104) == v31) {
    goto LABEL_130;
  }
  int32x2_t v32 = *(void **)(v27 + 120);
  uint64_t v33 = *(void *)(v27 + 128) - (void)v32;
  if (!v33)
  {
LABEL_74:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v29, v30);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 192;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul2->input_index(v_mean).first";
      _os_log_impl(&dword_1920CB000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_81:

    return 0;
  }
  uint64_t v34 = *v31;
  unint64_t v35 = v33 >> 3;
  if (v35 <= 1) {
    unint64_t v35 = 1;
  }
  while (*v32 != v34)
  {
    ++v32;
    if (!--v35) {
      goto LABEL_74;
    }
  }
  unint64_t v38 = *(Espresso::zephyr::value_t ***)(v77 + 120);
  if (*(Espresso::zephyr::value_t ***)(v77 + 128) == v38
    || (uint64_t v39 = (char **)*((void *)v3 + 12), *((char ***)v3 + 13) == v39))
  {
LABEL_130:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int32x2_t v40 = *(Espresso::zephyr::value_t ***)(*((void *)&v77 + 1) + 120);
  uint64_t v41 = *(void *)(*((void *)&v77 + 1) + 128) - (void)v40;
  if (!v41) {
    return 0;
  }
  unint64_t v42 = *v38;
  uint64_t v67 = *v39;
  uint64_t v43 = v41 >> 3;
  if ((unint64_t)(v41 >> 3) <= 1) {
    uint64_t v43 = 1;
  }
  while (*v40 != v42)
  {
    ++v40;
    if (!--v43) {
      return 0;
    }
  }
  unint64_t v44 = *(Espresso::zephyr::value_t ***)(v12 + 120);
  uint64_t v45 = *(void *)(v12 + 128) - (void)v44;
  if (!v45) {
    return 0;
  }
  unint64_t v46 = v45 >> 3;
  if (v46 <= 1) {
    unint64_t v46 = 1;
  }
  while (*v44 != v42)
  {
    BOOL v37 = 0;
    ++v44;
    if (!--v46) {
      return v37;
    }
  }
  *(void *)buf = v3;
  *(void *)&buf[8] = v8;
  *(void *)&buf[16] = v12;
  *(void *)&unsigned char buf[24] = v14;
  uint64_t v79 = v27;
  v80 = v24;
  uint64_t v66 = *((void *)&v75 + 1);
  long long v82 = v75;
  long long v83 = v76;
  v81 = v28;
  uint64_t v84 = *((void *)&v77 + 1);
  uint64_t v85 = v77;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v73, (unint64_t *)buf, 13);
  Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v70, v73);
  if (v72 != 1 || (BOOL v47 = v71) == 0)
  {
LABEL_110:
    BOOL v37 = 0;
    goto LABEL_111;
  }
  while (2)
  {
    if (v67) {
      unint64_t v48 = *(void *)v67;
    }
    else {
      unint64_t v48 = 0;
    }
    uint64_t v49 = (char *)v47[4];
    if (v49)
    {
      uint64_t v49 = *(char **)v49;
      if (v48 < (unint64_t)v49)
      {
LABEL_109:
        BOOL v47 = (void *)*v47;
        if (!v47) {
          goto LABEL_110;
        }
        continue;
      }
    }
    break;
  }
  uint64_t v50 = v67;
  if (v67) {
    uint64_t v50 = *(char **)v67;
  }
  if (v49 < v50)
  {
    ++v47;
    goto LABEL_109;
  }
  v51 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v66);
  uint64_t v52 = (*(uint64_t (**)(void *))(*(void *)v51 + 320))(v51);
  Espresso::zephyr_passes::create_instancenorm_kenel((Espresso::zephyr_passes *)&v68, v28, v14, *(float *)(v52 + 8));
  uint64_t v55 = v68;
  BOOL v37 = v68 != 0;
  if (v68)
  {
    int v56 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v66 + 24), v66 + 144);
    uint64_t v57 = *((void *)v56 + 1);
    int v58 = v69;
    if (v69) {
      atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v59 = *(std::__shared_weak_count **)(v57 + 16);
    *(void *)(v57 + 8) = v55;
    *(void *)(v57 + 16) = v58;
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v56, v42);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v56, (Espresso::zephyr::value_t *)v67);
    v62 = Espresso::espresso_os_log_subsystem(v60, v61);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v65 = v67 + 32;
      if (v67[55] < 0) {
        uint64_t v65 = (void *)*v65;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v65;
      _os_log_debug_impl(&dword_1920CB000, v62, OS_LOG_TYPE_DEBUG, "zephyr_passes::merge_tf_normalization: at %s", buf, 0xCu);
    }

    Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v56, v3);
    for (i = v74; i; i = (uint64_t **)*i)
      Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)i[2]);
  }
  else if (Espresso::zephyr::match_verbose)
  {
    uint64_t v64 = Espresso::espresso_os_log_subsystem(v53, v54);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 224;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "instancenorm_kernel";
      _os_log_impl(&dword_1920CB000, v64, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
  }
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
LABEL_111:
  std::__tree<int>::destroy(v71);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v73);
  return v37;
}

void sub_19280B03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__tree<int>::destroy(a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    char v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

uint64_t Espresso::zephyr_passes::normalization_factors_matcher::match(Espresso::zephyr_passes::normalization_factors_matcher *this, Espresso::zephyr::node_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  matched = (float *)Espresso::zephyr::match_simple_eltwise_binop((uint64_t)a2, 0x66u);
  uint64_t v6 = *((void *)a2 + 15);
  uint64_t v7 = *((void *)a2 + 16);
  if (matched)
  {
    for (; v6 != v7; v6 += 8)
    {
      if (*(void *)v6)
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 80);
        matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v8, 11);
        if (matched) {
          goto LABEL_18;
        }
      }
    }
LABEL_11:
    *(void *)this = 0;
LABEL_12:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_16;
    }
    int v32 = 136315650;
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    __int16 v34 = 1024;
    int v35 = 33;
    __int16 v36 = 2080;
    BOOL v37 = "rsqrt_or_sqrt";
    goto LABEL_15;
  }
  if (v6 == v7) {
    goto LABEL_11;
  }
  while (1)
  {
    if (*(void *)v6)
    {
      uint64_t v8 = *(void *)(*(void *)v6 + 80);
      matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v8, 12);
      if (matched) {
        break;
      }
    }
    v6 += 8;
    if (v6 == v7) {
      goto LABEL_11;
    }
  }
LABEL_18:
  *(void *)this = v8;
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(v8 + 120);
  uint64_t v12 = *(void *)(v8 + 128);
  while (1)
  {
    if (v11 == v12)
    {
      *((void *)this + 1) = 0;
LABEL_26:
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_16;
      }
      int v32 = 136315650;
      uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      __int16 v34 = 1024;
      int v35 = 41;
      __int16 v36 = 2080;
      BOOL v37 = "add";
      goto LABEL_15;
    }
    if (*(void *)v11)
    {
      uint64_t v13 = *(void *)(*(void *)v11 + 80);
      matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v13, 2);
      if (matched) {
        break;
      }
      matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v13, 0);
      if (matched) {
        break;
      }
    }
    v11 += 8;
  }
  *((void *)this + 1) = v13;
  if (!v13) {
    goto LABEL_26;
  }
  uint64_t v14 = *(void *)(v13 + 120);
  uint64_t v15 = *(void *)(v13 + 128);
  while (1)
  {
    if (v14 == v15)
    {
      *((void *)this + 2) = 0;
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_16;
      }
      int v32 = 136315650;
      uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      __int16 v34 = 1024;
      int v35 = 59;
      __int16 v36 = 2080;
      BOOL v37 = "variance";
      goto LABEL_15;
    }
    if (*(void *)v14)
    {
      uint64_t v16 = *(void *)(*(void *)v14 + 80);
      matched = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(v16);
      if (matched)
      {
        if (*(void *)(v16 + 128) - *(void *)(v16 + 120) == 8)
        {
          matched = (float *)(*(uint64_t (**)(float *))(*(void *)matched + 320))(matched);
          if (*(_DWORD *)matched == 1
            && *((_DWORD *)matched + 2) == 1
            && (*((_DWORD *)matched + 9) == -1 || ((_BYTE)matched[10] & 1) == 0))
          {
            break;
          }
        }
      }
    }
    v14 += 8;
  }
  *((void *)this + 2) = v16;
  uint64_t v19 = *(void *)(v16 + 120);
  uint64_t v20 = *(void *)(v16 + 128);
  if (v19 == v20)
  {
LABEL_57:
    *((void *)this + 3) = 0;
LABEL_58:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_16;
    }
    int v32 = 136315650;
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    __int16 v34 = 1024;
    int v35 = 73;
    __int16 v36 = 2080;
    BOOL v37 = "squared_difference";
LABEL_15:
    _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v32, 0x1Cu);
    goto LABEL_16;
  }
  while (1)
  {
    if (!*(void *)v19) {
      goto LABEL_56;
    }
    uint64_t v21 = *(void *)(*(void *)v19 + 80);
    uint64_t v22 = Espresso::zephyr::match_simple_eltwise_unaryop(v21, 13);
    if (v22) {
      break;
    }
    matched = (float *)Espresso::zephyr::match_simple_eltwise_binop(v21, 1u);
    if (matched)
    {
      unint64_t v24 = *(void **)(v21 + 120);
      if (*v24 == v24[1])
      {
        *((void *)this + 3) = v21;
        goto LABEL_64;
      }
    }
LABEL_56:
    v19 += 8;
    if (v19 == v20) {
      goto LABEL_57;
    }
  }
  uint64_t v23 = v22;
  matched = (float *)(*(uint64_t (**)(void *))(*(void *)v22 + 320))(v22);
  if (fabsf(matched[2] + -2.0) >= 1.0e-10) {
    goto LABEL_56;
  }
  matched = (float *)(*(uint64_t (**)(void *))(*(void *)v23 + 320))(v23);
  if (fabsf(matched[3]) >= 1.0e-10) {
    goto LABEL_56;
  }
  *((void *)this + 3) = v21;
  if (!v21) {
    goto LABEL_58;
  }
  unint64_t v24 = *(void **)(v21 + 120);
LABEL_64:
  uint64_t v25 = *(void **)(v21 + 128);
  while (1)
  {
    if (v24 == v25)
    {
      *((void *)this + 5) = 0;
      goto LABEL_70;
    }
    if (*v24)
    {
      uint64_t v26 = *(void *)(*v24 + 80);
      matched = (float *)Espresso::zephyr::match_simple_eltwise_binop(v26, 0x21u);
      if (matched) {
        break;
      }
    }
    ++v24;
  }
  *((void *)this + 5) = v26;
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 120);
    uint64_t v28 = *(void *)(v26 + 128);
    while (v27 != v28)
    {
      if (*(void *)v27)
      {
        uint64_t v29 = *(void *)(*(void *)v27 + 80);
        matched = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(v29);
        if (matched)
        {
          if (*(void *)(v29 + 128) - *(void *)(v29 + 120) == 8)
          {
            matched = (float *)(*(uint64_t (**)(float *))(*(void *)matched + 320))(matched);
            if (*(_DWORD *)matched == 1
              && *((_DWORD *)matched + 2) == 1
              && (*((_DWORD *)matched + 9) == -1 || ((_BYTE)matched[10] & 1) == 0))
            {
              *((void *)this + 4) = v29;
              return 1;
            }
          }
        }
      }
      v27 += 8;
    }
    *((void *)this + 4) = 0;
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v32 = 136315650;
      uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      __int16 v34 = 1024;
      int v35 = 96;
      __int16 v36 = 2080;
      BOOL v37 = "mean";
      goto LABEL_15;
    }
    goto LABEL_16;
  }
LABEL_70:
  if (!Espresso::zephyr::match_verbose) {
    return 0;
  }
  char v9 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v32 = 136315650;
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    __int16 v34 = 1024;
    int v35 = 78;
    __int16 v36 = 2080;
    BOOL v37 = "squared_difference_sub_";
    goto LABEL_15;
  }
LABEL_16:

  return 0;
}

uint64_t std::unordered_set<Espresso::zephyr::node_t *>::unordered_set(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>(a1, *a2, *a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_19280B814(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(uint64_t **result, void *a2)
{
  result[1] = 0;
  result[2] = 0;
  *result = (uint64_t *)(result + 1);
  uint64_t v2 = (void *)a2[2];
  if (v2)
  {
    char v4 = result;
    do
    {
      uint64_t v5 = v2[2];
      uint64_t v6 = *(unint64_t ***)(v5 + 96);
      uint64_t v7 = *(unint64_t ***)(v5 + 104);
      while (v6 != v7)
      {
        uint64_t v8 = *v6;
        uint64_t v11 = v8;
        char v9 = (unint64_t *)v8[7];
        uint64_t v10 = (unint64_t *)v8[8];
        while (v9 != v10)
        {
          result = (uint64_t **)std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(a2, *v9);
          if (!result)
          {
            result = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(v4, v8, (uint64_t *)&v11);
            break;
          }
          v9 += 2;
        }
        ++v6;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_19280B8E8(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(*v1);
  _Unwind_Resume(a1);
}

void Espresso::zephyr_passes::create_instancenorm_kenel(Espresso::zephyr_passes *this, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3, float a4)
{
  uint64_t v30 = 0x358637BD00000000;
  uint64_t v31 = 0;
  int v32 = 0;
  Espresso::zephyr::make_kernel<Espresso::generic_instancenorm_1d_kernel,Espresso::zephyr::node_t,Espresso::instancenorm_1d_params_t>(&v29, *(void *)(*((void *)a2 + 1) + 8), (uint64_t)&v30);
  *((float *)&v30 + 1) = a4;
  HIDWORD(v31) = 1;
  constant = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)a2);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v27, constant + 43);
  uint64_t v9 = v27;
  if (v27)
  {
    uint64_t v10 = (void *)v29;
    if (*(unsigned char *)(*(void *)(v29 + 8) + 53))
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "wGamma");
      uint64_t v11 = 0;
      uint64_t v12 = *(int *)(v9 + 8);
      do
      {
        v12 *= *(int *)(v9 + 12 + v11);
        v11 += 4;
      }
      while (v11 != 12);
      (*(void (**)(void *, uint64_t *, void **, void, uint64_t, void))(*v10 + 168))(v10, &v25, __p, *(void *)(v9 + 24), 4 * v12, 0);
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "wGamma");
      uint64_t v13 = 0;
      uint64_t v14 = *(int *)(v9 + 8);
      do
      {
        v14 *= *(int *)(v9 + 12 + v13);
        v13 += 4;
      }
      while (v13 != 12);
      (*(void (**)(void *, uint64_t *, void **, void, uint64_t, void))(*v10 + 160))(v10, &v25, __p, *(void *)(v9 + 24), 4 * v14, 0);
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    uint64_t v15 = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)a3);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v25, v15 + 43);
    uint64_t v16 = v25;
    if (v25)
    {
      if (*(unsigned char *)(v10[1] + 53))
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "wBeta");
        uint64_t v17 = 0;
        uint64_t v18 = *(int *)(v16 + 8);
        do
        {
          v18 *= *(int *)(v16 + 12 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        (*(void (**)(void *, uint64_t *, void **, void, uint64_t, void))(*v10 + 168))(v10, &v21, __p, *(void *)(v16 + 24), 4 * v18, 0);
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "wBeta");
        uint64_t v19 = 0;
        uint64_t v20 = *(int *)(v16 + 8);
        do
        {
          v20 *= *(int *)(v16 + 12 + v19);
          v19 += 4;
        }
        while (v19 != 12);
        (*(void (**)(void *, uint64_t *, void **, void, uint64_t, void))(*v10 + 160))(v10, &v21, __p, *(void *)(v16 + 24), 4 * v20, 0);
      }
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      *(_OWORD *)this = v29;
      this = (Espresso::zephyr_passes *)&v29;
    }
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (*((void *)&v29 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v29 + 1));
  }
}

void sub_19280BC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::zephyr::make_kernel<Espresso::generic_instancenorm_1d_kernel,Espresso::zephyr::node_t,Espresso::instancenorm_1d_params_t>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "instancenorm_1d");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    uint64_t v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_19280BDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  result = std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    uint8x8_t v6 = (uint64_t **)result;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a3;
    uint64_t v8 = v9;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v8, v6, v7);
  }
  return result;
}

void *std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>(uint64_t a1, void *a2, unint64_t *a3)
{
  unint64_t v5 = *(void **)(a1 + 8);
  result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        uint8x8_t v6 = v4;
        unint64_t v7 = a3 ? *a3 : 0;
        uint64_t v8 = (void *)v4[4];
        if (!v8) {
          break;
        }
        uint64_t v8 = (void *)*v8;
        if (v7 >= (unint64_t)v8) {
          break;
        }
        unint64_t v4 = (void *)*v6;
        result = v6;
        if (!*v6) {
          goto LABEL_16;
        }
      }
      if (a3) {
        unint64_t v9 = *a3;
      }
      else {
        unint64_t v9 = 0;
      }
      if ((unint64_t)v8 >= v9) {
        break;
      }
      result = v6 + 1;
      unint64_t v4 = (void *)v6[1];
    }
    while (v4);
  }
  else
  {
    uint8x8_t v6 = result;
  }
LABEL_16:
  *a2 = v6;
  return result;
}

void std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (void *)*v11; i; i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    void *v14 = *v22;
LABEL_38:
    *uint64_t v22 = v14;
    goto LABEL_39;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_19280C218(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  int8x8_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B7D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B7D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_19280C3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37B670;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      unint64_t v8 = *(void **)(v5 + 120);
      unint64_t v6 = (void *)(v5 + 120);
      unint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          unint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_19280C4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes18merge_tf_layernormERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(void *)(*(void *)a2 + 104) - *(void *)(*(void *)a2 + 96) != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    unint64_t v8 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 255;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "add1->outputs().size() == 1";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_31:

    return 0;
  }
  if (!Espresso::zephyr::match_simple_eltwise_binop(*(void *)a2, 0))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    unint64_t v8 = Espresso::espresso_os_log_subsystem(0, v4);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 258;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(add1, ELEMENTWISE_OPERATION_ADD)";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  v118[0] = &unk_1EE37E798;
  v119 = v118;
  uint64_t v5 = (void *)*((void *)v2 + 15);
  if (*((void *)v2 + 16) - (void)v5 != 16) {
    goto LABEL_27;
  }
  uint64_t v6 = *(void *)(*v5 + 80);
  uint64_t v7 = *(void *)(v5[1] + 80);
  if (std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v118, v6, v7))
  {
    uint64_t v7 = v6;
    goto LABEL_15;
  }
  if ((std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v119, v7, v6) & 1) == 0)
  {
LABEL_27:
    char v9 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v118);
    goto LABEL_28;
  }
LABEL_15:
  char v9 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v118);
  if (!v7)
  {
LABEL_28:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    unint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 265;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul1";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  char v11 = (void *)*((void *)v2 + 15);
  if (*((void *)v2 + 16) - (void)v11 != 16
    || ((uint64_t v12 = *(Espresso::zephyr::node_t **)(*v11 + 80),
         unint64_t v13 = *(Espresso::zephyr::node_t **)(v11[1] + 80),
         v13 != (Espresso::zephyr::node_t *)v7)
      ? (uint64_t v14 = 0)
      : (uint64_t v14 = v12),
        v12 != (Espresso::zephyr::node_t *)v7 ? (uint64_t v15 = v14) : (uint64_t v15 = v13),
        !v15))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    unint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 267;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "beta_read";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  v116[0] = &unk_1EE37E740;
  v117 = v116;
  float v16 = *(void **)(v7 + 120);
  if (*(void *)(v7 + 128) - (void)v16 != 16) {
    goto LABEL_57;
  }
  uint64_t v17 = *(void *)(*v16 + 80);
  unint64_t v18 = *(Espresso::zephyr::node_t **)(v16[1] + 80);
  if (std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v116, v17, (uint64_t)v18))
  {
    unint64_t v18 = (Espresso::zephyr::node_t *)v17;
    goto LABEL_38;
  }
  if ((std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v117, (uint64_t)v18, v17) & 1) == 0)
  {
LABEL_57:
    size_t v20 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v116);
    goto LABEL_58;
  }
LABEL_38:
  size_t v20 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v116);
  if (!v18)
  {
LABEL_58:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    unint64_t v8 = Espresso::espresso_os_log_subsystem(v20, v21);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 280;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_or_div";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  uint64_t v22 = *(void **)(v7 + 120);
  if (*(void *)(v7 + 128) - (void)v22 != 16) {
    goto LABEL_62;
  }
  unint64_t v23 = *(Espresso::zephyr::node_t **)(*v22 + 80);
  char v24 = *(Espresso::zephyr::node_t **)(v22[1] + 80);
  if (v24 == v18) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = 0;
  }
  if (v23 != v18) {
    char v24 = v25;
  }
  if (!v24)
  {
LABEL_62:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    unint64_t v8 = Espresso::espresso_os_log_subsystem(v20, v21);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 283;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "gamma_read";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  v98 = v24;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v106 = 0u;
  matched = (Espresso *)Espresso::zephyr_passes::normalization_factors_matcher::match((Espresso::zephyr_passes::normalization_factors_matcher *)&v106, v18);
  if ((matched & 1) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v33 = Espresso::espresso_os_log_subsystem(matched, v27);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 287;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "f.match(mul_or_div)";
        _os_log_impl(&dword_1920CB000, v33, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_135;
    }
    return 0;
  }
  uint64_t v28 = (uint64_t *)*((void *)v18 + 15);
  long long v29 = (uint64_t *)*((void *)v18 + 16);
  if (v28 == v29) {
    goto LABEL_53;
  }
  uint64_t v30 = v106;
  while (1)
  {
    uint64_t v31 = *v28;
    if (*v28)
    {
      uint64_t v32 = *(void *)(v31 + 80);
      if (v30 != v32)
      {
        matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(*(void *)(v31 + 80), 0x21u);
        if (matched) {
          break;
        }
      }
    }
    if (++v28 == v29) {
      goto LABEL_53;
    }
  }
  if (!v32)
  {
LABEL_53:
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v33 = Espresso::espresso_os_log_subsystem(matched, v27);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 293;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "sub_1";
        _os_log_impl(&dword_1920CB000, v33, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_135:
    }
    return 0;
  }
  __int16 v34 = *(Espresso ***)(v108 + 96);
  if (*(Espresso ***)(v108 + 104) == v34) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v35 = *(Espresso ***)(v32 + 120);
  uint64_t v36 = *(void *)(v32 + 128) - (void)v35;
  if (!v36) {
    goto LABEL_120;
  }
  BOOL v37 = v18;
  uint64_t v38 = v7;
  matched = *v34;
  unint64_t v39 = v36 >> 3;
  uint64_t v40 = (unint64_t)(v36 >> 3) <= 1 ? 1 : v36 >> 3;
  if (*v35 != matched)
  {
    unint64_t v41 = 0;
    uint64_t v27 = (const char *)(v40 - 1);
    do
    {
      if (v27 == (const char *)v41) {
        goto LABEL_120;
      }
      unint64_t v42 = v35[++v41];
    }
    while (v42 != matched);
    if (v41 >= v39)
    {
LABEL_120:
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v33 = Espresso::espresso_os_log_subsystem(matched, v27);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 297;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "sub_1->uses_value(f.mean->output())";
          _os_log_impl(&dword_1920CB000, v33, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_135;
      }
      return 0;
    }
  }
  uint64_t v43 = *(const char **)(*((void *)&v108 + 1) + 120);
  uint64_t v44 = *(void *)(*((void *)&v108 + 1) + 128) - (void)v43;
  if (!v44) {
    goto LABEL_124;
  }
  unint64_t v45 = v44 >> 3;
  uint64_t v46 = v45 <= 1 ? 1 : v45;
  if (*(Espresso **)v43 != matched)
  {
    unint64_t v47 = 0;
    do
    {
      if (v46 - 1 == v47) {
        goto LABEL_124;
      }
      unint64_t v48 = *(Espresso **)&v43[8 * v47++ + 8];
    }
    while (v48 != matched);
    if (v47 >= v45)
    {
LABEL_124:
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v33 = Espresso::espresso_os_log_subsystem(matched, v43);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 298;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "f.squared_difference_sub_->uses_value(f.mean->output())";
          _os_log_impl(&dword_1920CB000, v33, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_135;
      }
      return 0;
    }
  }
  uint64_t v49 = *(Espresso **)(v108 + 120);
  if (*(Espresso **)(v108 + 128) == v49) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v50 = (char **)*((void *)v2 + 12);
  if (*((char ***)v2 + 13) == v50) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  v51 = *(Espresso::zephyr::value_t **)v49;
  uint64_t v52 = *v50;
  if (*(void *)v43 != *(void *)v49)
  {
    uint64_t v49 = 0;
    v43 += 8;
    int v53 = (Espresso *)(v46 - 1);
    do
    {
      if (v53 == v49) {
        goto LABEL_128;
      }
      unsigned int v54 = *(Espresso::zephyr::value_t **)&v43[8 * (void)v49];
      uint64_t v49 = (Espresso *)((char *)v49 + 1);
    }
    while (v54 != v51);
    if ((unint64_t)v49 >= v45)
    {
LABEL_128:
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v33 = Espresso::espresso_os_log_subsystem(v49, v43);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 303;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "f.squared_difference_sub_->uses_value(x)";
          _os_log_impl(&dword_1920CB000, v33, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_135;
      }
      return 0;
    }
  }
  if (*v35 != v51)
  {
    unint64_t v55 = 0;
    int v56 = v35 + 1;
    uint64_t v57 = v40 - 1;
    do
    {
      if (v57 == v55) {
        goto LABEL_132;
      }
      int v58 = (Espresso::zephyr::value_t *)v56[v55++];
    }
    while (v58 != v51);
    if (v55 >= v39)
    {
LABEL_132:
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v33 = Espresso::espresso_os_log_subsystem(v49, v43);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 305;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "sub_1->uses_value(x)";
          _os_log_impl(&dword_1920CB000, v33, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_135;
      }
      return 0;
    }
  }
  *(void *)buf = v2;
  *(void *)&buf[8] = v38;
  *(void *)&buf[16] = v15;
  *(void *)&unsigned char buf[24] = v98;
  uint64_t v97 = *((void *)&v106 + 1);
  long long v110 = v106;
  long long v111 = v107;
  uint64_t v112 = *((void *)&v108 + 1);
  uint64_t v113 = v108;
  uint64_t v114 = v32;
  v115 = v37;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v104, (unint64_t *)buf, 12);
  uint64_t v59 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v101, v104);
  if (v103 != 3)
  {
    if (v103 == 1)
    {
      int v61 = 0;
      v62 = v102;
      if (v102) {
        goto LABEL_105;
      }
LABEL_116:
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_158;
      }
      uint64_t v66 = Espresso::espresso_os_log_subsystem((Espresso *)v59, v60);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 331;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "external_values.count(y)";
        _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_157;
    }
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v66 = Espresso::espresso_os_log_subsystem((Espresso *)v59, v60);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 322;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "external_values.size() == 1 || external_values.size() == 3";
        _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_157:

      goto LABEL_158;
    }
    goto LABEL_158;
  }
  uint64_t v67 = (unint64_t **)*((void *)v98 + 12);
  if (*((unint64_t ***)v98 + 13) == v67) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  v62 = v102;
  if (!v102)
  {
LABEL_150:
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v66 = Espresso::espresso_os_log_subsystem((Espresso *)v59, v60);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 327;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "external_values.count(gamma_read->output())";
        _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_157;
    }
LABEL_158:
    BOOL v73 = 0;
    goto LABEL_159;
  }
  uint64_t v68 = *v67;
  v69 = v102;
  while (1)
  {
    if (v68) {
      unint64_t v70 = *v68;
    }
    else {
      unint64_t v70 = 0;
    }
    uint64_t v71 = (void *)v69[4];
    if (v71)
    {
      uint64_t v71 = (void *)*v71;
      if (v70 < (unint64_t)v71) {
        goto LABEL_149;
      }
    }
    unint64_t v72 = v68 ? *v68 : 0;
    if ((unint64_t)v71 >= v72) {
      break;
    }
    ++v69;
LABEL_149:
    v69 = (void *)*v69;
    if (!v69) {
      goto LABEL_150;
    }
  }
  v89 = (unint64_t **)*((void *)v15 + 12);
  if (*((unint64_t ***)v15 + 13) == v89) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  v90 = *v89;
  v91 = v102;
  while (2)
  {
    if (v90) {
      unint64_t v92 = *v90;
    }
    else {
      unint64_t v92 = 0;
    }
    v93 = (void *)v91[4];
    if (v93)
    {
      v93 = (void *)*v93;
      if (v92 < (unint64_t)v93)
      {
LABEL_187:
        v91 = (void *)*v91;
        if (v91) {
          continue;
        }
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v66 = Espresso::espresso_os_log_subsystem((Espresso *)v59, v60);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "omplex_subgraph_matching.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 328;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "external_values.count(beta_read->output())";
            _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_157;
        }
        goto LABEL_158;
      }
    }
    break;
  }
  if (v90) {
    unint64_t v94 = *v90;
  }
  else {
    unint64_t v94 = 0;
  }
  if ((unint64_t)v93 < v94)
  {
    ++v91;
    goto LABEL_187;
  }
  int v61 = 1;
LABEL_105:
  while (2)
  {
    if (v52) {
      unint64_t v63 = *(void *)v52;
    }
    else {
      unint64_t v63 = 0;
    }
    uint64_t v64 = (void *)v62[4];
    if (v64)
    {
      uint64_t v64 = (void *)*v64;
      if (v63 < (unint64_t)v64)
      {
LABEL_115:
        v62 = (void *)*v62;
        if (!v62) {
          goto LABEL_116;
        }
        continue;
      }
    }
    break;
  }
  if (v52) {
    unint64_t v65 = *(void *)v52;
  }
  else {
    unint64_t v65 = 0;
  }
  if ((unint64_t)v64 < v65)
  {
    ++v62;
    goto LABEL_115;
  }
  v74 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v97);
  uint64_t v75 = (*(uint64_t (**)(void *))(*(void *)v74 + 320))(v74);
  Espresso::zephyr_passes::create_instancenorm_kenel((Espresso::zephyr_passes *)&v99, v98, v15, *(float *)(v75 + 8));
  uint64_t v78 = v99;
  BOOL v73 = v99 != 0;
  if (v99)
  {
    uint64_t v79 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v97 + 24), v97 + 144);
    uint64_t v80 = *((void *)v79 + 1);
    v81 = v100;
    if (v100) {
      atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v82 = *(std::__shared_weak_count **)(v80 + 16);
    *(void *)(v80 + 8) = v78;
    *(void *)(v80 + 16) = v81;
    if (v82) {
      nitro::nitro_function::nitro_function(v82);
    }
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v79, v51);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v79, (Espresso::zephyr::value_t *)v52);
    uint64_t v85 = Espresso::espresso_os_log_subsystem(v83, v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
    {
      v96 = v52 + 32;
      if (v52[55] < 0) {
        v96 = (void *)*v96;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v96;
      _os_log_debug_impl(&dword_1920CB000, v85, OS_LOG_TYPE_DEBUG, "zephyr_passes::merge_tf_layernorm: at %s", buf, 0xCu);
    }

    Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v79, v2);
    for (i = v105; i; i = (void *)*i)
    {
      v87 = (Espresso::zephyr::node_t *)i[2];
      if (v61)
      {
        if (v87 == v98 || v87 == v15) {
          continue;
        }
      }
      Espresso::zephyr::node_t::remove_from_graphs(v87);
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    v95 = Espresso::espresso_os_log_subsystem(v76, v77);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 338;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "instancenorm_kernel";
      _os_log_impl(&dword_1920CB000, v95, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
  }
  if (v100) {
    nitro::nitro_function::nitro_function(v100);
  }
LABEL_159:
  std::__tree<int>::destroy(v102);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v104);
  return v73;
}

void sub_19280D594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__tree<int>::destroy(a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes18merge_tf_layernormERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  matched = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (!matched) {
    matched = Espresso::zephyr::match_simple_eltwise_binop(v3, 0x66u);
  }
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v4);
  if (matched) {
    BOOL v7 = constant == 0;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7;
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E740;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_1EE37E740;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes18merge_tf_layernormERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  result = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (result) {
    return (void *)(Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v3) != 0);
  }
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E798;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_1EE37E798;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B670;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B670;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_19280DA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37B358;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      unint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      BOOL v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          BOOL v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_19280DB34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_fast_gelu_1ERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (Espresso::zephyr::node_t *)*a2;
  result = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (!result) {
    return result;
  }
  uint64_t v5 = *((void *)v3 + 15);
  uint64_t v6 = *((void *)v3 + 16);
  if (v5 == v6)
  {
LABEL_75:
    uint64_t v11 = 0;
    return (void *)(v11 != 0);
  }
  unint64_t v55 = *(Espresso::zephyr::ordered_block_t ***)(a1 + 8);
  __asm { FMOV            V13.2S, #1.0 }
  while (1)
  {
    if (*(void *)v5)
    {
      uint64_t v11 = *(void *)(*(void *)v5 + 80);
      matched = Espresso::zephyr::match_simple_eltwise_unaryop(v11, 3);
      if (matched)
      {
        if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)matched + 320))(matched) + 8) + -0.5) < 1.0e-10)
        {
          uint64_t v13 = *(void *)(v11 + 120);
          if (*(void *)(v11 + 128) == v13) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v14 = *(void *)(*(void *)v13 + 80);
          uint64_t v15 = Espresso::zephyr::match_simple_eltwise_unaryop(v14, 2);
          if (v15)
          {
            if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)v15 + 320))(v15) + 8) + -1.0) < 1.0e-10)
            {
              uint64_t v16 = *(void *)(v14 + 120);
              if (*(void *)(v14 + 128) == v16) {
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v17 = *(void *)(*(void *)v16 + 80);
              if (Espresso::zephyr::match_simple_activation(v17, 1))
              {
                uint64_t v18 = *(void *)(v17 + 120);
                if (*(void *)(v17 + 128) == v18) {
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v19 = *(void *)(*(void *)v18 + 80);
                size_t v20 = Espresso::zephyr::match_simple_eltwise_unaryop(v19, 3);
                if (v20)
                {
                  if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)v20 + 320))(v20) + 8) + -0.79788) < 1.0e-10)
                  {
                    uint64_t v21 = *(void *)(v19 + 120);
                    if (*(void *)(v19 + 128) == v21) {
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    }
                    uint64_t v54 = *(void *)(*(void *)v21 + 80);
                    uint64_t v22 = Espresso::zephyr::match_simple_eltwise_binop(v54, 0);
                    if (v22)
                    {
                      if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)v22 + 320))(v22) + 8) + -1.0) < 1.0e-10) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_70:
    v5 += 8;
    if (v5 == v6) {
      goto LABEL_75;
    }
  }
  uint64_t v24 = *(void *)(v54 + 120);
  uint64_t v23 = *(void *)(v54 + 128);
  for (i = v23; ; uint64_t v23 = i)
  {
    if (v24 == v23) {
      goto LABEL_70;
    }
    if (*(void *)v24)
    {
      uint64_t v56 = *(void *)(*(void *)v24 + 80);
      uint64_t v25 = Espresso::zephyr::match_simple_eltwise_unaryop(v19, 3);
      if (v25)
      {
        if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)v25 + 320))(v25) + 8) + -0.79788) < 1.0e-10)
        {
          uint64_t v26 = *(void *)(v56 + 120);
          if (*(void *)(v56 + 128) == v26) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v27 = *(void *)(*(void *)v26 + 80);
          uint64_t v28 = Espresso::zephyr::match_simple_eltwise_unaryop(v27, 13);
          long long v29 = v28;
          if (v28)
          {
            if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)v28 + 320))(v28) + 8) + -3.0) < 1.0e-10
              && fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)v29 + 320))(v29) + 12)) < 1.0e-10)
            {
              break;
            }
          }
        }
      }
    }
LABEL_59:
    v24 += 8;
  }
  *(void *)buf = v3;
  *(void *)&buf[8] = v11;
  *(void *)&buf[16] = v14;
  *(void *)&unsigned char buf[24] = v17;
  *(void *)&unsigned char buf[32] = v19;
  uint64_t v66 = v54;
  uint64_t v67 = v56;
  uint64_t v68 = v27;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v63, (unint64_t *)buf, 8);
  uint64_t v30 = *(Espresso::zephyr::value_t ***)(v27 + 120);
  if (*(Espresso::zephyr::value_t ***)(v27 + 128) == v30) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v31 = (char **)*((void *)v3 + 12);
  if (*((char ***)v3 + 13) == v31) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v32 = (Espresso::zephyr::value_t **)*((void *)v3 + 15);
  uint64_t v33 = *((void *)v3 + 16) - (void)v32;
  if (!v33) {
    goto LABEL_58;
  }
  __int16 v34 = *v30;
  int v35 = *v31;
  uint64_t v36 = v33 >> 3;
  if ((unint64_t)(v33 >> 3) <= 1) {
    uint64_t v36 = 1;
  }
  while (*v32 != v34)
  {
    ++v32;
    if (!--v36) {
      goto LABEL_58;
    }
  }
  BOOL v37 = *(Espresso::zephyr::value_t ***)(v54 + 120);
  uint64_t v38 = *(void *)(v54 + 128) - (void)v37;
  if (!v38)
  {
LABEL_58:
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v63);
    goto LABEL_59;
  }
  unint64_t v39 = v38 >> 3;
  if (v39 <= 1) {
    unint64_t v39 = 1;
  }
  while (*v37 != v34)
  {
    ++v37;
    if (!--v39) {
      goto LABEL_58;
    }
  }
  Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v60, v63);
  if (v62 != 1 || v61 == 0)
  {
LABEL_57:
    std::__tree<int>::destroy(v61);
    goto LABEL_58;
  }
  unint64_t v42 = v61;
  while (1)
  {
    if (v35) {
      unint64_t v43 = *(void *)v35;
    }
    else {
      unint64_t v43 = 0;
    }
    uint64_t v44 = (void *)*((void *)v42 + 4);
    if (v44)
    {
      uint64_t v44 = (void *)*v44;
      if (v43 < (unint64_t)v44) {
        goto LABEL_56;
      }
    }
    unint64_t v45 = v35 ? *(void *)v35 : 0;
    if ((unint64_t)v44 >= v45) {
      break;
    }
    unint64_t v42 = (Espresso *)((char *)v42 + 8);
LABEL_56:
    unint64_t v42 = *(Espresso **)v42;
    if (!v42) {
      goto LABEL_57;
    }
  }
  uint64_t v46 = Espresso::espresso_os_log_subsystem(v61, v40);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    int v53 = v35 + 32;
    if (v35[55] < 0) {
      int v53 = (void *)*v53;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v53;
    _os_log_debug_impl(&dword_1920CB000, v46, OS_LOG_TYPE_DEBUG, "zephyr_passes::fuse_fast_gelu_1: at %s", buf, 0xCu);
  }

  *(void *)&buf[4] = _D13;
  memset(&buf[12], 0, 24);
  *(_DWORD *)buf = 21;
  Espresso::zephyr::make_kernel<Espresso::generic_activation_kernel,Espresso::zephyr::node_t,Espresso::activation_params>(&v58, *(void *)(*((void *)v3 + 1) + 8), (uint64_t)buf);
  unint64_t v47 = Espresso::zephyr::function_t::new_detached_node(*((void *)v3 + 3), (uint64_t)v3 + 144);
  uint64_t v48 = *((void *)v47 + 1);
  uint64_t v49 = v58;
  uint64_t v50 = v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v51 = *(std::__shared_weak_count **)(v48 + 16);
  *(void *)(v48 + 8) = v49;
  *(void *)(v48 + 16) = v50;
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v47, v34);
  Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v47, (Espresso::zephyr::value_t *)v35);
  Espresso::zephyr::ordered_block_t::insert_node_after(*v55, (Espresso::zephyr::node_t *)v47, v3);
  for (j = v64; j; j = (uint64_t **)*j)
    Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)j[2]);
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  std::__tree<int>::destroy(v61);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v63);
  if (!v56) {
    goto LABEL_70;
  }
  return (void *)(v11 != 0);
}

void sub_19280E204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__tree<int>::destroy(a15);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::make_kernel<Espresso::generic_activation_kernel,Espresso::zephyr::node_t,Espresso::activation_params>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    unint64_t v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_19280E390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B358;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B358;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_19280E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37B568;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      unint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      BOOL v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          BOOL v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_19280E5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes18fuse_gelu_with_erfERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (Espresso::zephyr::node_t *)*a2;
  matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (!matched)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v40 = Espresso::espresso_os_log_subsystem(0, v5);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v67 = 136315650;
        uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v69 = 1024;
        v70[0] = 510;
        LOWORD(v70[1]) = 2080;
        *(void *)((char *)&v70[1] + 2) = "match_simple_eltwise_binop(mul_3, ELEMENTWISE_OPERATION_MUL)";
        _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  uint64_t v6 = (void *)*((void *)v3 + 15);
  if (!*v6)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v40 = Espresso::espresso_os_log_subsystem(matched, v5);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v67 = 136315650;
        uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v69 = 1024;
        v70[0] = 511;
        LOWORD(v70[1]) = 2080;
        *(void *)((char *)&v70[1] + 2) = "mul_3->inputs()[0]";
        _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  if (*((void *)v3 + 16) - (void)v6 != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v40 = Espresso::espresso_os_log_subsystem(matched, v5);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v67 = 136315650;
        uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v69 = 1024;
        v70[0] = 512;
        LOWORD(v70[1]) = 2080;
        *(void *)((char *)&v70[1] + 2) = "mul_3->inputs().size() == 2";
        _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  uint64_t v7 = *(void *)(v6[1] + 80);
  unint64_t v8 = Espresso::zephyr::match_simple_eltwise_unaryop(v7, 3);
  if (!v8)
  {
    unint64_t v8 = Espresso::zephyr::match_simple_eltwise_unaryop(v7, 1);
    if (!v8)
    {
      uint64_t v7 = *(void *)(**((void **)v3 + 15) + 80);
      unint64_t v8 = Espresso::zephyr::match_simple_eltwise_unaryop(v7, 3);
      if (!v8)
      {
        unint64_t v8 = Espresso::zephyr::match_simple_eltwise_unaryop(v7, 1);
        if (!v8)
        {
          if (Espresso::zephyr::match_verbose)
          {
            uint64_t v40 = Espresso::espresso_os_log_subsystem(0, v9);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t v67 = 136315650;
              uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
              __int16 v69 = 1024;
              v70[0] = 525;
              LOWORD(v70[1]) = 2080;
              *(void *)((char *)&v70[1] + 2) = "k_mul2 != nullptr";
              _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
            }
            goto LABEL_90;
          }
          return 0;
        }
      }
    }
  }
  int v10 = (float *)(*(uint64_t (**)(void *))(*(void *)v8 + 320))(v8);
  if (fabsf(v10[2] + -0.5) >= 1.0e-10)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v40 = Espresso::espresso_os_log_subsystem((Espresso *)v10, v11);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v67 = 136315650;
        uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v69 = 1024;
        v70[0] = 526;
        LOWORD(v70[1]) = 2080;
        *(void *)((char *)&v70[1] + 2) = "close_floats(k_mul2->get_params().alpha, 0.5f)";
        _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  uint64_t v12 = *(void *)(v7 + 120);
  if (*(void *)(v7 + 128) == v12) {
    goto LABEL_110;
  }
  uint64_t v13 = *(void *)(*(void *)v12 + 80);
  uint64_t v14 = Espresso::zephyr::match_simple_eltwise_unaryop(v13, 2);
  if (!v14)
  {
    uint64_t v14 = Espresso::zephyr::match_simple_eltwise_unaryop(v13, 0);
    if (!v14)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v40 = Espresso::espresso_os_log_subsystem(0, v15);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v67 = 136315650;
          uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          __int16 v69 = 1024;
          v70[0] = 533;
          LOWORD(v70[1]) = 2080;
          *(void *)((char *)&v70[1] + 2) = "k_add1 != nullptr";
          _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
        }
        goto LABEL_90;
      }
      return 0;
    }
  }
  uint64_t v16 = (float *)(*(uint64_t (**)(void *))(*(void *)v14 + 320))(v14);
  if (fabsf(v16[2] + -1.0) >= 1.0e-10)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v40 = Espresso::espresso_os_log_subsystem((Espresso *)v16, v17);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v67 = 136315650;
        uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v69 = 1024;
        v70[0] = 534;
        LOWORD(v70[1]) = 2080;
        *(void *)((char *)&v70[1] + 2) = "close_floats(k_add1->get_params().alpha, 1.0f)";
        _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  uint64_t v18 = *(void *)(v13 + 120);
  if (*(void *)(v13 + 128) == v18) {
    goto LABEL_110;
  }
  uint64_t v19 = *(void *)(*(void *)v18 + 80);
  if (!Espresso::zephyr::match_simple_activation(v19, 20))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v40 = Espresso::espresso_os_log_subsystem(0, v20);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v67 = 136315650;
        uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v69 = 1024;
        v70[0] = 537;
        LOWORD(v70[1]) = 2080;
        *(void *)((char *)&v70[1] + 2) = "match_simple_activation(erf, ACTIVATION_ERF)";
        _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  uint64_t v21 = *(void *)(v19 + 120);
  if (*(void *)(v19 + 128) == v21) {
LABEL_110:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  uint64_t v22 = *(void *)(*(void *)v21 + 80);
  uint64_t v23 = Espresso::zephyr::match_simple_eltwise_unaryop(v22, 3);
  if (!v23)
  {
    uint64_t v23 = Espresso::zephyr::match_simple_eltwise_unaryop(v22, 1);
    if (!v23)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v40 = Espresso::espresso_os_log_subsystem(0, v24);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v67 = 136315650;
          uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          __int16 v69 = 1024;
          v70[0] = 545;
          LOWORD(v70[1]) = 2080;
          *(void *)((char *)&v70[1] + 2) = "k_mul != nullptr";
          _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
        }
        goto LABEL_90;
      }
      return 0;
    }
  }
  if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)v23 + 320))(v23) + 8) + -0.70711) >= 1.0e-10)
  {
    uint64_t v25 = (float *)(*(uint64_t (**)(void *))(*(void *)v23 + 320))(v23);
    if (fabsf(v25[2] + -0.70703) >= 0.0001)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v40 = Espresso::espresso_os_log_subsystem((Espresso *)v25, v26);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v67 = 136315650;
          uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          __int16 v69 = 1024;
          v70[0] = 547;
          LOWORD(v70[1]) = 2080;
          *(void *)((char *)&v70[1] + 2) = "close_floats(k_mul->get_params().alpha, k_one_over_sqrt2) || close_floats(k"
                                             "_mul->get_params().alpha, 0.707031, 1e-4)";
          _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v67, 0x1Cu);
        }
LABEL_90:

        return 0;
      }
      return 0;
    }
  }
  *(void *)buf = v3;
  *(void *)&buf[8] = v7;
  *(void *)&buf[16] = v13;
  *(void *)&unsigned char buf[24] = v19;
  *(void *)&unsigned char buf[32] = v22;
  uint64_t v27 = (Espresso *)std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v67, (unint64_t *)buf, 5);
  long long v29 = *(Espresso::zephyr::value_t ***)(v22 + 120);
  if (*(Espresso::zephyr::value_t ***)(v22 + 128) == v29) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v30 = (char **)*((void *)v3 + 12);
  if (*((char ***)v3 + 13) == v30) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v31 = (Espresso::zephyr::value_t **)*((void *)v3 + 15);
  uint64_t v32 = *((void *)v3 + 16) - (void)v31;
  if (!v32)
  {
LABEL_28:
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v38 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 556;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "mul_3->input_index(x).first";
        _os_log_impl(&dword_1920CB000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  uint64_t v33 = *v29;
  __int16 v34 = *v30;
  uint64_t v35 = v32 >> 3;
  if ((unint64_t)(v32 >> 3) <= 1) {
    uint64_t v35 = 1;
  }
  uint64_t v36 = (Espresso::zephyr::value_t **)*((void *)v3 + 15);
  uint64_t v37 = v35;
  while (*v36 != v33)
  {
    ++v36;
    if (!--v37) {
      goto LABEL_28;
    }
  }
  while (*v31 != v33)
  {
    ++v31;
    if (!--v35)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v38 = Espresso::espresso_os_log_subsystem(v27, v28);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "mul_3->input_index(x).first";
          _os_log_impl(&dword_1920CB000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
LABEL_31:
      }
LABEL_32:
      uint64_t v39 = 0;
      goto LABEL_33;
    }
  }
  unint64_t v41 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v63, v67);
  if (v65 != 1 || (unint64_t v43 = v64) == 0)
  {
LABEL_65:
    uint64_t v39 = 0;
    goto LABEL_66;
  }
  while (1)
  {
    if (v34) {
      unint64_t v44 = *(void *)v34;
    }
    else {
      unint64_t v44 = 0;
    }
    unint64_t v45 = (void *)v43[4];
    if (v45)
    {
      unint64_t v45 = (void *)*v45;
      if (v44 < (unint64_t)v45) {
        goto LABEL_64;
      }
    }
    unint64_t v46 = v34 ? *(void *)v34 : 0;
    if ((unint64_t)v45 >= v46) {
      break;
    }
    ++v43;
LABEL_64:
    unint64_t v43 = (void *)*v43;
    if (!v43) {
      goto LABEL_65;
    }
  }
  uint64_t v48 = Espresso::espresso_os_log_subsystem((Espresso *)v41, v42);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v60 = v34 + 32;
    if (v34[55] < 0) {
      uint64_t v60 = (void *)*v60;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v60;
    _os_log_debug_impl(&dword_1920CB000, v48, OS_LOG_TYPE_DEBUG, "zephyr_passes::fuse_gelu_with_erf: at %s", buf, 0xCu);
  }

  __asm { FMOV            V0.2S, #1.0 }
  *(_OWORD *)&buf[4] = _D0;
  *(_OWORD *)&buf[20] = 0uLL;
  *(_DWORD *)buf = 19;
  Espresso::zephyr::make_kernel<Espresso::generic_activation_kernel,Espresso::zephyr::node_t,Espresso::activation_params>(&v61, *(void *)(*((void *)v3 + 1) + 8), (uint64_t)buf);
  uint64_t v54 = Espresso::zephyr::function_t::new_detached_node(*((void *)v3 + 3), (uint64_t)v3 + 144);
  uint64_t v55 = *((void *)v54 + 1);
  uint64_t v56 = v61;
  uint64_t v57 = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v58 = *(std::__shared_weak_count **)(v55 + 16);
  *(void *)(v55 + 8) = v56;
  *(void *)(v55 + 16) = v57;
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v54, v33);
  Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v54, (Espresso::zephyr::value_t *)v34);
  Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v54, v3);
  uint64_t v59 = *(uint64_t ***)((char *)v70 + 2);
  if (*(void *)((char *)v70 + 2))
  {
    do
    {
      Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v59[2]);
      uint64_t v59 = (uint64_t **)*v59;
    }
    while (v59);
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  uint64_t v39 = 1;
LABEL_66:
  std::__tree<int>::destroy(v64);
LABEL_33:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v67);
  return v39;
}

void sub_19280F1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::__tree<int>::destroy(a6);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B568;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B568;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_19280F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BA38;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      unint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_19280F46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes31l2_normalize_5d_to_instancenormERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a2;
  char v4 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(*a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(0, v5);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 611;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel != nullptr";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v6 = v4;
  uint64_t v7 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  if (*((_DWORD *)v7 + 2) != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(v7, v8);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 612;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel->get_params().dst_k == 1";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  char v9 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
  if (*((_DWORD *)v9 + 3) != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(v9, v10);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 613;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel->get_params().dst_n == 1";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  char v11 = (int *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
  if (v11[4] >= 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem((Espresso *)v11, v12);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 614;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel->get_params().dst_seq <= 1";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v13 = *(void *)(**(void **)(v3 + 120) + 80);
  if (!Espresso::zephyr::match_simple_eltwise_binop(v13, 0))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(0, v14);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 617;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "match_simple_eltwise_binop(beta_add, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v15 = *(Espresso::zephyr::node_t **)(*(void *)(*(void *)(v13 + 120) + 8) + 80);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v15))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(0, v16);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 620;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "zephyr::cast_kernel<generic_load_constant_kernel>(beta_read)";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v17 = *(void *)(**(void **)(v13 + 120) + 80);
  if (!Espresso::zephyr::match_simple_eltwise_binop(v17, 1u))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(0, v18);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 623;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "match_simple_eltwise_binop(gamma_mul, ELEMENTWISE_OPERATION_MUL)";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v19 = *(Espresso::zephyr::node_t **)(*(void *)(*(void *)(v17 + 120) + 8) + 80);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v19))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(0, v20);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 626;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "zephyr::cast_kernel<generic_load_constant_kernel>(gamma_read)";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v21 = *(void *)(**(void **)(v17 + 120) + 80);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_l2_normalize_kernel>(v21))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(0, v22);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 629;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "zephyr::cast_kernel<generic_l2_normalize_kernel>(l2_normalize)";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v23 = *(uint64_t **)(**(void **)(v21 + 120) + 80);
  uint64_t v24 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>((uint64_t)v23);
  if (!v24)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(0, v25);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 633;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape2_kernel";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v26 = v24;
  uint64_t v27 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v24 + 320))(v24);
  if (*(_DWORD *)v27 != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 634;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape2_kernel->get_params().dst_w == 1";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  long long v29 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v26 + 320))(v26);
  if (*((_DWORD *)v29 + 1) != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(v29, v30);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 635;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape2_kernel->get_params().dst_h == 1";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v31 = (int *)(*(uint64_t (**)(void *))(*(void *)v26 + 320))(v26);
  if (v31[4] >= 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem((Espresso *)v31, v32);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 636;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape2_kernel->get_params().dst_seq <= 1";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_78:

      return 0;
    }
    return 0;
  }
  *(void *)buf = v3;
  *(void *)&buf[8] = v13;
  *(void *)&buf[16] = v15;
  *(void *)&unsigned char buf[24] = v17;
  v87 = v19;
  uint64_t v88 = v21;
  v89 = v23;
  uint64_t v33 = (Espresso *)std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v84, (unint64_t *)buf, 7);
  uint64_t v35 = *(Espresso::zephyr::value_t ***)(v3 + 96);
  if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v35) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v36 = v23[15];
  if (v23[16] == v36) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v37 = *(Espresso::zephyr::value_t **)v36;
  if (!*(void *)(*(void *)(*(void *)v36 + 8) + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v58 = Espresso::espresso_os_log_subsystem(v33, v34);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 646;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "ec(x)->shape";
        _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  uint64_t v38 = *v35;
  if (!*(void *)(*((void *)v38 + 1) + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v58 = Espresso::espresso_os_log_subsystem(v33, v34);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 647;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "ec(y)->shape";
        _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  uint64_t v78 = v38;
  uint64_t v39 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
  if (*(_DWORD *)v39 != **(_DWORD **)(*((void *)v37 + 1) + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v58 = Espresso::espresso_os_log_subsystem(v39, v40);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 648;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel->get_params().dst_w == ec(x)->shape->w";
        _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  unint64_t v41 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
  if (*((_DWORD *)v41 + 1) != *(_DWORD *)(*(void *)(*((void *)v37 + 1) + 8) + 4))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v58 = Espresso::espresso_os_log_subsystem(v41, v42);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 649;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel->get_params().dst_h == ec(x)->shape->h";
        _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  unint64_t v43 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
  if (*((_DWORD *)v43 + 2) != *(_DWORD *)(*(void *)(*((void *)v37 + 1) + 8) + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v58 = Espresso::espresso_os_log_subsystem(v43, v44);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 650;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel->get_params().dst_k == ec(x)->shape->k";
        _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  unint64_t v45 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
  if (*((_DWORD *)v45 + 3) != *(_DWORD *)(*(void *)(*((void *)v37 + 1) + 8) + 12))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v58 = Espresso::espresso_os_log_subsystem(v45, v46);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 651;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel->get_params().dst_n == ec(x)->shape->n";
        _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
LABEL_109:
    BOOL v56 = 0;
    goto LABEL_110;
  }
  unint64_t v47 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
  int v49 = *((_DWORD *)v47 + 4);
  uint64_t v50 = *(void *)(*((void *)v37 + 1) + 8);
  if (v49 != *(_DWORD *)(v50 + 16))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v58 = Espresso::espresso_os_log_subsystem(v47, v48);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 652;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reshape_kernel->get_params().dst_seq == ec(x)->shape->seq";
        _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_108:

      goto LABEL_109;
    }
    goto LABEL_109;
  }
  uint64_t v51 = *(void *)(*((void *)v78 + 1) + 8);
  int v52 = *(_DWORD *)(v51 + 20);
  if (v52 == -1)
  {
    if (*(_DWORD *)(v51 + 16) == 1) {
      int v52 = 4;
    }
    else {
      int v52 = 5;
    }
    int v53 = *(_DWORD *)(v50 + 20);
    if (v49 == 1) {
      int v54 = 4;
    }
    else {
      int v54 = 5;
    }
  }
  else
  {
    int v53 = *(_DWORD *)(v50 + 20);
    if (v49 == 1) {
      int v54 = 4;
    }
    else {
      int v54 = 5;
    }
  }
  if (v53 != -1) {
    int v54 = v53;
  }
  if (v52 != v54 && v52 != v54 + 1)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_109;
    }
    uint64_t v58 = Espresso::espresso_os_log_subsystem(v47, v48);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 656;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "ec(y)->shape->rank() == ec(x)->shape->rank() || ec(y)->shape->rank() == ec(x)->shape->rank() + 1";
      _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_108;
  }
  Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v81, v84);
  if (v83 != 1 || (uint64_t v59 = v82) == 0)
  {
LABEL_129:
    BOOL v56 = 0;
    goto LABEL_130;
  }
  unint64_t v60 = *(void *)v78;
  while (1)
  {
    uint64_t v61 = (void *)v59[4];
    if (v61)
    {
      uint64_t v61 = (void *)*v61;
      if (v60 < (unint64_t)v61) {
        goto LABEL_128;
      }
    }
    if ((unint64_t)v61 >= v60) {
      break;
    }
    ++v59;
LABEL_128:
    uint64_t v59 = (void *)*v59;
    if (!v59) {
      goto LABEL_129;
    }
  }
  uint64_t v62 = *(void *)(*((void *)v78 + 1) + 8);
  int v63 = *(_DWORD *)(v62 + 20);
  if (v63 == -1)
  {
    if (*(_DWORD *)(v62 + 16) == 1) {
      int v63 = 4;
    }
    else {
      int v63 = 5;
    }
  }
  uint64_t v64 = *(void *)(*((void *)v37 + 1) + 8);
  int v65 = *(_DWORD *)(v64 + 20);
  if (v65 == -1)
  {
    if (*(_DWORD *)(v64 + 16) == 1) {
      int v65 = 4;
    }
    else {
      int v65 = 5;
    }
  }
  if (v63 == v65 + 1)
  {
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>(v84, v3);
    uint64_t v66 = *(Espresso::zephyr::value_t ***)(v3 + 120);
    if (*(Espresso::zephyr::value_t ***)(v3 + 128) == v66) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v78 = *v66;
  }
  uint64_t v67 = Espresso::zephyr::cast_kernel<Espresso::generic_l2_normalize_kernel>(v21);
  uint64_t v68 = (float *)(*(uint64_t (**)(void *))(*(void *)v67 + 320))(v67);
  Espresso::zephyr_passes::create_instancenorm_kenel((Espresso::zephyr_passes *)&v79, v19, v15, *v68);
  uint64_t v71 = v79;
  BOOL v56 = v79 != 0;
  if (v79)
  {
    unint64_t v72 = Espresso::zephyr::function_t::new_detached_node(v23[3], (uint64_t)(v23 + 18));
    uint64_t v73 = *((void *)v72 + 1);
    v74 = v80;
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v75 = *(std::__shared_weak_count **)(v73 + 16);
    *(void *)(v73 + 8) = v71;
    *(void *)(v73 + 16) = v74;
    if (v75) {
      nitro::nitro_function::nitro_function(v75);
    }
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v72, v37);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v72, v78);
    Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v72, (Espresso::zephyr::node_t *)v23);
    for (uint64_t i = v85; i; uint64_t i = (uint64_t **)*i)
      Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)i[2]);
  }
  else if (Espresso::zephyr::match_verbose)
  {
    long long v77 = Espresso::espresso_os_log_subsystem(v69, v70);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 672;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "instancenorm_kernel";
      _os_log_impl(&dword_1920CB000, v77, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
  }
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
LABEL_130:
  std::__tree<int>::destroy(v82);
LABEL_110:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v84);
  return v56;
}

void sub_192810760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__tree<int>::destroy(a7);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    char v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_l2_normalize_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    char v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
    unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
      if (v5 >= *(void *)&v2) {
        unint64_t v7 = v5 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v7 = v5 & (*(void *)&v2 - 1);
    }
    uint64_t v8 = *a1;
    char v9 = *(uint64_t ***)(*a1 + 8 * v7);
    if (v9)
    {
      int v10 = *v9;
      if (v10)
      {
        uint64_t v11 = *(void *)&v2 - 1;
        do
        {
          unint64_t v12 = v10[1];
          if (v12 == v5)
          {
            if (v10[2] == a2)
            {
              if (v6.u32[0] > 1uLL)
              {
                if (v5 >= *(void *)&v2) {
                  v5 %= *(void *)&v2;
                }
              }
              else
              {
                v5 &= v11;
              }
              uint64_t v13 = *(uint64_t **)(v8 + 8 * v5);
              do
              {
                uint64_t v14 = v13;
                uint64_t v13 = (uint64_t *)*v13;
              }
              while (v13 != v10);
              if (v14 == a1 + 2) {
                goto LABEL_36;
              }
              unint64_t v15 = v14[1];
              if (v6.u32[0] > 1uLL)
              {
                if (v15 >= *(void *)&v2) {
                  v15 %= *(void *)&v2;
                }
              }
              else
              {
                v15 &= v11;
              }
              if (v15 != v5)
              {
LABEL_36:
                if (!*v10) {
                  goto LABEL_37;
                }
                unint64_t v16 = *(void *)(*v10 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v16 >= *(void *)&v2) {
                    v16 %= *(void *)&v2;
                  }
                }
                else
                {
                  v16 &= v11;
                }
                if (v16 != v5) {
LABEL_37:
                }
                  *(void *)(v8 + 8 * v5) = 0;
              }
              uint64_t v17 = *v10;
              if (*v10)
              {
                unint64_t v18 = *(void *)(v17 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v18 >= *(void *)&v2) {
                    v18 %= *(void *)&v2;
                  }
                }
                else
                {
                  v18 &= v11;
                }
                if (v18 != v5)
                {
                  *(void *)(*a1 + 8 * v18) = v14;
                  uint64_t v17 = *v10;
                }
              }
              uint64_t *v14 = v17;
              uint64_t *v10 = 0;
              --a1[3];
              operator delete(v10);
              return;
            }
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v12 >= *(void *)&v2) {
                v12 %= *(void *)&v2;
              }
            }
            else
            {
              v12 &= v11;
            }
            if (v12 != v7) {
              return;
            }
          }
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BA38;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37BA38;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192810BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      size_t v20 = v3 + 16;
      v23[0] = &unk_1EE37B5C0;
      v23[1] = v3 + 16;
      id v23[2] = &v20;
      uint64_t v24 = v23;
      uint64_t v8 = *(void **)(v5 + 120);
      unint64_t v7 = (void *)(v5 + 120);
      uint8x8_t v6 = v8;
      if (v8 == v7 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v24, v6[2]);
          uint64_t v11 = v6 + 1;
          if (v10) {
            uint64_t v11 = v7;
          }
          v9 |= v10;
          uint8x8_t v6 = (void *)*v11;
        }
        while ((void *)*v11 != v7 - 1);
      }
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v23);
      uint64_t v12 = *((void *)v3 + 2);
      v21[0] = &unk_1EE37B618;
      v21[1] = v3 + 16;
      v21[2] = &v20;
      uint64_t v22 = v21;
      unint64_t v15 = *(void **)(v12 + 120);
      uint64_t v14 = (void *)(v12 + 120);
      uint64_t v13 = v15;
      if (v15 == v14 - 1)
      {
        char v16 = 0;
      }
      else
      {
        char v16 = 0;
        do
        {
          int v17 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v22, v13[2]);
          unint64_t v18 = v13 + 1;
          if (v17) {
            unint64_t v18 = v14;
          }
          v16 |= v17;
          uint64_t v13 = (void *)*v18;
        }
        while ((void *)*v18 != v14 - 1);
      }
      v4 |= v16 | v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v21);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192810D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes18merge_channel_normERNS_6zephyr10function_tEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ****a1, const char *a2)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)a2;
  if (*(void *)(*(void *)a2 + 104) - *(void *)(*(void *)a2 + 96) != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1036;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "add_0->outputs().size() == 1";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v2[16] - v2[15] != 16)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1037;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "add_0->inputs().size() == 2";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (!Espresso::zephyr::match_simple_eltwise_binop(*(void *)a2, 0))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(0, v4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1039;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(add_0, ELEMENTWISE_OPERATION_ADD)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>((uint64_t)v2);
  constant = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  if (!*((unsigned char *)constant + 24))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(constant, v7);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1041;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "zephyr::cast_kernel<generic_elementwise_kernel>(add_0)->get_params().nd_mode";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v8 = v2[15];
  uint64_t v9 = v2[16];
  while (1)
  {
    if (v8 == v9) {
      goto LABEL_41;
    }
    if (*(void *)v8)
    {
      uint64_t v10 = *(void *)(*(void *)v8 + 80);
      constant = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v10);
      if (constant) {
        break;
      }
    }
    v8 += 8;
  }
  if (!v10)
  {
LABEL_41:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(constant, v7);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1047;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "beta";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v12 = v2[15];
  uint64_t v13 = v2[16];
  if (v12 == v13)
  {
LABEL_37:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(constant, v7);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1057;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "div_0";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  while (1)
  {
    if (*(void *)v12)
    {
      uint64_t v14 = *(void *)(*(void *)v12 + 80);
      constant = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v14, 0x66u);
      if (!constant)
      {
        if (Espresso::zephyr::match_verbose)
        {
          char v16 = Espresso::espresso_os_log_subsystem(0, v7);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "omplex_subgraph_matching.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1050;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "match_simple_eltwise_binop(div_0, ELEMENTWISE_OPERATION_DIV)";
            _os_log_impl(&dword_1920CB000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
        }
        goto LABEL_36;
      }
      unint64_t v15 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v14);
      constant = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v15 + 320))(v15);
      if (*((unsigned char *)constant + 24)) {
        break;
      }
    }
LABEL_36:
    v12 += 8;
    if (v12 == v13) {
      goto LABEL_37;
    }
  }
  if (!v14) {
    goto LABEL_37;
  }
  uint64_t v19 = *(void *)(**(void **)(v14 + 120) + 80);
  if (!Espresso::zephyr::match_simple_eltwise_binop(v19, 1u))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(0, v20);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1060;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(mul_0, ELEMENTWISE_OPERATION_MUL)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v21 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v19);
  matched = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v21 + 320))(v21);
  if (!*((unsigned char *)matched + 24))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(matched, v23);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1063;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "zephyr::cast_kernel<generic_elementwise_kernel>(mul_0)->get_params().nd_mode == true";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v24 = *(void *)(v19 + 120);
  uint64_t v25 = *(void *)(v19 + 128);
  while (1)
  {
    if (v24 == v25) {
      goto LABEL_78;
    }
    if (*(void *)v24)
    {
      uint64_t v26 = *(void *)(*(void *)v24 + 80);
      matched = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v26);
      if (matched) {
        break;
      }
    }
    v24 += 8;
  }
  if (!v26)
  {
LABEL_78:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(matched, v23);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1068;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "gamma";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v28 = *(void *)(v19 + 120);
  uint64_t v27 = *(void *)(v19 + 128);
  if (v28 == v27)
  {
LABEL_74:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(matched, v23);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1078;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "sub_0";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  while (2)
  {
    if (!*(void *)v28)
    {
LABEL_73:
      v28 += 8;
      if (v28 == v27) {
        goto LABEL_74;
      }
      continue;
    }
    break;
  }
  uint64_t v29 = *(void *)(*(void *)v28 + 80);
  matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v29, 0x21u);
  if (!matched)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v31 = Espresso::espresso_os_log_subsystem(0, v23);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1072;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "match_simple_eltwise_binop(sub_0, ELEMENTWISE_OPERATION_SUBTRACT)";
        _os_log_impl(&dword_1920CB000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    goto LABEL_73;
  }
  uint64_t v30 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v29);
  matched = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v30 + 320))(v30);
  if (!*((unsigned char *)matched + 24)) {
    goto LABEL_73;
  }
  if (!v29) {
    goto LABEL_74;
  }
  uint64_t v32 = *(void *)(*(void *)(*(void *)(v14 + 120) + 8) + 80);
  uint64_t v33 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v32);
  if (!v33)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(0, v34);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1082;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "std_0_k";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v35 = (float *)(*(uint64_t (**)(void *))(*(void *)v33 + 320))(v33);
  uint64_t v37 = *(void *)(v32 + 120);
  uint64_t v38 = *(void *)(v32 + 128);
  BOOL v39 = v38 - v37 == 8 && *(_DWORD *)v35 == 0;
  if (!v39 || v35[4] <= 0.0)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem((Espresso *)v35, v36);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1086;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "std_0->inputs().size() == 1 && std_0_p.operation == ELEMENTWISE_OPERATION_ADD && std_0_p.eps > 0.0f";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v38 == v37) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v40 = *(void *)(*(void *)v37 + 80);
  unint64_t v41 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v40);
  if (!v41)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(0, v42);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1090;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_1_k";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  unint64_t v43 = (float *)(*(uint64_t (**)(void *))(*(void *)v41 + 320))(v41);
  uint64_t v45 = *(void *)(v40 + 120);
  uint64_t v46 = *(void *)(v40 + 128);
  if (v46 - v45 != 8 || *(_DWORD *)v43 != 1 || v43[2] <= 1.0)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem((Espresso *)v43, v44);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1094;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_1->inputs().size() == 1 && mul_1_p.operation == ELEMENTWISE_OPERATION_MUL && mul_1_p.alpha > 1.0f";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v46 == v45) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v49 = *(void *)(*(void *)v45 + 80);
  uint64_t v50 = (Espresso *)Espresso::zephyr::match_simple_eltwise_unaryop(v49, 11);
  if (!v50)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(0, v51);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1097;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_unaryop(sqrt_0, ELEMENTWISE_OPERATION_SQRT)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v52 = *(void *)(v49 + 120);
  if (*(void *)(v49 + 128) == v52) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  v119 = *(void **)(*(void *)v52 + 80);
  if (v119[16] - v119[15] != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(v50, v51);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1101;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mean_1->inputs().size() == 1";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v119[13] - v119[12] != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(v50, v51);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1102;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mean_1->outputs().size() == 1";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  int v53 = Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>((uint64_t)v119);
  if (!v53)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(0, v54);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1104;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mean_1_k";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v55 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v53 + 320))(v53);
  if (*(_DWORD *)v55 != 1 || *((_DWORD *)v55 + 2) != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v11 = Espresso::espresso_os_log_subsystem(v55, v56);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1107;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "mean_1_p.mode == REDUCE_MODE_AVG && mean_1_p.axis_mode == REDUCE_AXIS_Y";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  uint64_t v58 = v119[15];
  if (v119[16] == v58) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v112 = *(void *)(*(void *)v58 + 80);
  uint64_t v59 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v112);
  if (!v59)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem(0, v60);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1111;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "square_0_k";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v61 = (*(uint64_t (**)(void *))(*(void *)v59 + 320))(v59);
  int v63 = *(uint64_t **)(v112 + 120);
  uint64_t v64 = *(uint64_t **)(v112 + 128);
  if ((char *)v64 - (char *)v63 != 8 || *(_DWORD *)v61 != 13 || *(float *)(v61 + 8) != 2.0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v11 = Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1115;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "square_0->inputs().size() == 1 && square_0_p.operation == ELEMENTWISE_OPERATION_POW && squ"
                              "are_0_p.alpha == 2.0f";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  if (v64 == v63) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v67 = *v63;
  uint64_t v68 = *(unsigned __int8 *)(*v63 + 55);
  size_t v69 = *(void *)(v67 + 40);
  if ((v68 & 0x80u) == 0) {
    uint64_t v70 = v68;
  }
  else {
    uint64_t v70 = *(void *)(v67 + 40);
  }
  uint64_t v71 = *(unsigned __int8 *)(v29 + 167);
  int v72 = (char)v71;
  if ((v71 & 0x80u) != 0) {
    uint64_t v71 = *(void *)(v29 + 152);
  }
  if (v70 != v71) {
    goto LABEL_179;
  }
  uint64_t v73 = (const void **)(v67 + 32);
  if (v72 >= 0) {
    isa = (const char *)(v29 + 144);
  }
  else {
    isa = *(const char **)(v29 + 144);
  }
  if ((v68 & 0x80) != 0)
  {
    uint64_t v61 = memcmp(*v73, isa, v69);
    if (v61) {
      goto LABEL_179;
    }
  }
  else if (v68)
  {
    while (*(unsigned __int8 *)v73 == *(unsigned __int8 *)isa)
    {
      uint64_t v73 = (const void **)((char *)v73 + 1);
      ++isa;
      if (!--v68) {
        goto LABEL_183;
      }
    }
LABEL_179:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v11 = Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1117;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "square_0->input()->name() == sub_0->name()";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_44:

    return 0;
  }
LABEL_183:
  uint64_t v74 = *(void *)(v29 + 120);
  uint64_t v75 = *(void *)(v29 + 128);
  uint64_t v116 = v74;
  uint64_t v113 = v75;
  while (2)
  {
    if (v74 == v75)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v11 = Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1127;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "mean_0";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    if (!*(void *)v116) {
      goto LABEL_206;
    }
    os_log_t log = *(os_log_t *)(*(void *)v116 + 80);
    if ((Class)(log[16].isa - log[15].isa) != (Class)8)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_206;
      }
      loga = Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      if (!os_log_type_enabled(loga, OS_LOG_TYPE_INFO)) {
        goto LABEL_205;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1120;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mean_0->inputs().size() == 1";
      long long v77 = loga;
LABEL_204:
      _os_log_impl(&dword_1920CB000, v77, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      goto LABEL_205;
    }
    if ((Class)(log[13].isa - log[12].isa) != (Class)8)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_206;
      }
      loga = Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      if (!os_log_type_enabled(loga, OS_LOG_TYPE_INFO)) {
        goto LABEL_205;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1121;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mean_0->outputs().size() == 1";
      long long v77 = loga;
      goto LABEL_204;
    }
    uint64_t v61 = (uint64_t)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>((uint64_t)log);
    if (!v61)
    {
      if (Espresso::zephyr::match_verbose)
      {
        loga = Espresso::espresso_os_log_subsystem(0, isa);
        if (os_log_type_enabled(loga, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1123;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "mean_0_k";
          long long v77 = loga;
          goto LABEL_204;
        }
LABEL_205:
      }
LABEL_206:
      uint64_t v74 = v116 + 8;
      v116 += 8;
      uint64_t v75 = v113;
      continue;
    }
    break;
  }
  uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 320))(v61);
  if (*(_DWORD *)(v61 + 8) != 2 || *(_DWORD *)v61 != 1) {
    goto LABEL_206;
  }
  uint64_t v117 = *(void *)(v29 + 120);
  uint64_t v78 = *(unsigned __int8 *)(*(void *)v117 + 55);
  if ((v78 & 0x80u) == 0) {
    uint64_t v79 = (objc_class *)*(unsigned __int8 *)(*(void *)v117 + 55);
  }
  else {
    uint64_t v79 = *(objc_class **)(*(void *)v117 + 40);
  }
  Class isa_high = (Class)HIBYTE(log[20].isa);
  int v81 = (char)isa_high;
  if ((char)isa_high < 0) {
    Class isa_high = log[19].isa;
  }
  if (v79 == isa_high)
  {
    long long v82 = (const void **)(*(void *)v117 + 32);
    if (v81 >= 0) {
      isa = (const char *)&log[18];
    }
    else {
      isa = (const char *)log[18].isa;
    }
    if ((v78 & 0x80) != 0)
    {
      uint64_t v61 = memcmp(*v82, isa, *(void *)(*(void *)v117 + 40));
      BOOL v90 = v61 == 0;
    }
    else if (*(unsigned char *)(*(void *)v117 + 55))
    {
      uint64_t v83 = v78 - 1;
      do
      {
        int v85 = *(unsigned __int8 *)v82;
        long long v82 = (const void **)((char *)v82 + 1);
        int v84 = v85;
        int v87 = *(unsigned __int8 *)isa++;
        int v86 = v87;
        BOOL v89 = v83-- != 0;
        BOOL v39 = v84 == v86;
        BOOL v90 = v84 == v86;
      }
      while (v39 && v89);
    }
    else
    {
      BOOL v90 = 1;
    }
  }
  else
  {
    BOOL v90 = 0;
  }
  v91 = log[15].isa;
  if (log[16].isa == v91) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v92 = *(void *)(v117 + 8 * v90);
  uint64_t v93 = *(void *)v91;
  uint64_t v94 = *(unsigned __int8 *)(*(void *)v91 + 55);
  size_t v95 = *(void *)(v93 + 40);
  if ((v94 & 0x80u) == 0) {
    uint64_t v96 = v94;
  }
  else {
    uint64_t v96 = *(void *)(v93 + 40);
  }
  uint64_t v97 = *(unsigned __int8 *)(v92 + 55);
  int v98 = (char)v97;
  uint64_t v118 = v92;
  uint64_t v99 = *(void *)(v92 + 40);
  if ((v97 & 0x80u) != 0) {
    uint64_t v97 = v99;
  }
  if (v96 != v97) {
    goto LABEL_249;
  }
  v100 = (const void **)(v93 + 32);
  if (v98 >= 0) {
    isa = (const char *)(v118 + 32);
  }
  else {
    isa = *(const char **)(v118 + 32);
  }
  if ((v94 & 0x80) != 0)
  {
    uint64_t v61 = memcmp(*v100, isa, v95);
    if (v61) {
      goto LABEL_249;
    }
  }
  else if (v94)
  {
    while (*(unsigned __int8 *)v100 == *(unsigned __int8 *)isa)
    {
      v100 = (const void **)((char *)v100 + 1);
      ++isa;
      if (!--v94) {
        goto LABEL_253;
      }
    }
LABEL_249:
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v11 = Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1132;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "mean_0->input()->name() == conv_out->name()";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
LABEL_253:
  *(void *)buf = v2;
  *(void *)&buf[8] = v10;
  *(void *)&buf[16] = v14;
  *(void *)&unsigned char buf[24] = v19;
  uint64_t v125 = v26;
  uint64_t v126 = v29;
  uint64_t v127 = v32;
  uint64_t v128 = v40;
  uint64_t v129 = v49;
  v130 = v119;
  uint64_t v131 = v112;
  os_log_t v132 = log;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v123, (unint64_t *)buf, 12);
  v101 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v120, v123);
  if (v122 != 1) {
    goto LABEL_268;
  }
  uint64_t v103 = (unint64_t **)v2[12];
  if ((unint64_t **)v2[13] == v103) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  v104 = v121;
  if (!v121)
  {
LABEL_268:
    if (Espresso::zephyr::match_verbose)
    {
      v109 = Espresso::espresso_os_log_subsystem((Espresso *)v101, v102);
      if (!os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
      {
LABEL_272:
        uint64_t v17 = 0;
        goto LABEL_273;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1142;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "external_values.size() == 1 && external_values.count(add_0->output())";
LABEL_271:
      _os_log_impl(&dword_1920CB000, v109, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      goto LABEL_272;
    }
LABEL_281:
    uint64_t v17 = 0;
    goto LABEL_282;
  }
  v105 = *v103;
  while (1)
  {
    if (v105) {
      unint64_t v106 = *v105;
    }
    else {
      unint64_t v106 = 0;
    }
    long long v107 = (void *)v104[4];
    if (v107)
    {
      long long v107 = (void *)*v107;
      if (v106 < (unint64_t)v107) {
        goto LABEL_267;
      }
    }
    unint64_t v108 = v105 ? *v105 : 0;
    if ((unint64_t)v107 >= v108) {
      break;
    }
    ++v104;
LABEL_267:
    v104 = (void *)*v104;
    if (!v104) {
      goto LABEL_268;
    }
  }
  BOOL v110 = Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_0::operator()(a1[2], (uint64_t)v123, v2, v26, v10, (Espresso::zephyr::node_t **)v118);
  if (!v110)
  {
    if (Espresso::zephyr::match_verbose)
    {
      v109 = Espresso::espresso_os_log_subsystem((Espresso *)v110, v111);
      if (!os_log_type_enabled(v109, OS_LOG_TYPE_INFO)) {
        goto LABEL_272;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1144;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "substitution_func(subgraph, add_0, gamma, beta, conv_out)";
      goto LABEL_271;
    }
    goto LABEL_281;
  }
  if (Espresso::zephyr::match_verbose)
  {
    v109 = Espresso::espresso_os_log_subsystem((Espresso *)v110, v111);
    uint64_t v17 = 1;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1145;
      _os_log_impl(&dword_1920CB000, v109, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
LABEL_273:
  }
  else
  {
    uint64_t v17 = 1;
  }
LABEL_282:
  std::__tree<int>::destroy(v121);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v123);
  return v17;
}

void sub_192812700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__tree<int>::destroy(a11);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_0::operator()(Espresso::zephyr::ordered_block_t ***a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, Espresso::zephyr::node_t **a6)
{
  uint64_t v9 = a1;
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (const std::string *)(a4 + 144);
  if (*(char *)(a4 + 167) < 0)
  {
    uint64_t v12 = *(char **)(a4 + 144);
    uint64_t v11 = *(void *)(a4 + 152);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a4 + 167);
    uint64_t v12 = (char *)(a4 + 144);
  }
  uint64_t v13 = &v12[v11];
  if (v11 >= 6)
  {
    char v16 = v12;
    do
    {
      uint64_t v14 = (char *)memchr(v16, 46, v11 - 5);
      if (!v14) {
        break;
      }
      if (*(_DWORD *)v14 == 1835099950 && *((_WORD *)v14 + 2) == 24941) {
        goto LABEL_14;
      }
      char v16 = v14 + 1;
      uint64_t v11 = v13 - (unsigned char *)v16;
    }
    while (v13 - (unsigned char *)v16 > 5);
    uint64_t v14 = v13;
LABEL_14:
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v14 = &v12[v11];
  }
  if (v14 == v13) {
    std::string::size_type v18 = -1;
  }
  else {
    std::string::size_type v18 = v14 - v12;
  }
  std::string::basic_string(&v103, v10, 0, v18, (std::allocator<char> *)buf);
  uint64_t v19 = a3[3];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v103.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = buf;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, size + 6);
  if (SBYTE3(v108) < 0) {
    uint64_t v21 = *(unsigned char **)buf;
  }
  if (size)
  {
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v103;
    }
    else {
      uint64_t v22 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v22, size);
  }
  strcpy(&v21[size], "_input");
  uint64_t v23 = Espresso::zephyr::function_t::new_detached_node(v19, (uint64_t)buf);
  if (SBYTE3(v108) < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v24 = a3[3];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v25 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v25 = v103.__r_.__value_.__l.__size_;
  }
  uint64_t v26 = buf;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, v25 + 7);
  if (SBYTE3(v108) < 0) {
    uint64_t v26 = *(unsigned char **)buf;
  }
  if (v25)
  {
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v103;
    }
    else {
      uint64_t v27 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    memmove(v26, v27, v25);
  }
  strcpy(&v26[v25], "_output");
  uint64_t v28 = Espresso::zephyr::function_t::new_detached_node(v24, (uint64_t)buf);
  if (SBYTE3(v108) < 0) {
    operator delete(*(void **)buf);
  }
  long long v101 = xmmword_192DCA520;
  int v102 = 4;
  long long v99 = xmmword_192DCA530;
  int v100 = 4;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v97, (Espresso::zephyr::value_t *)a6);
  if (v97)
  {
    if (*v97 != 1 && v97[1] != 1 && v97[2] == 1 && v97[3] == 1 && v97[4] == 1)
    {
      long long v99 = xmmword_192DCA540;
      int v100 = 4;
      int v102 = 4;
      long long v101 = xmmword_192DCA540;
    }
    Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v95, *(void *)(a3[1] + 8), (uint64_t)&v101);
    Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v93, *(void *)(a3[1] + 8), (uint64_t)&v99);
    uint64_t v31 = *((void *)v23 + 1);
    uint64_t v32 = v95;
    uint64_t v33 = v96;
    if (v96) {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v34 = *(std::__shared_weak_count **)(v31 + 16);
    *(void *)(v31 + 8) = v32;
    *(void *)(v31 + 16) = v33;
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    uint64_t v35 = *((void *)v28 + 1);
    uint64_t v36 = v93;
    uint64_t v37 = v94;
    if (v94) {
      atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v38 = *(std::__shared_weak_count **)(v35 + 16);
    *(void *)(v35 + 8) = v36;
    *(void *)(v35 + 16) = v37;
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    int v92 = 0;
    v91[1] = 1;
    v91[0] = 0x358637BD00000001;
    Espresso::zephyr::make_kernel<Espresso::generic_instancenorm_1d_kernel,Espresso::zephyr::node_t,Espresso::instancenorm_1d_params_t>(&v89, *(void *)(*(void *)(a4 + 8) + 8), (uint64_t)v91);
    unint64_t v41 = v89;
    if (v89)
    {
      constant = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(a4);
      unint64_t v43 = (Espresso *)Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v87, constant + 43);
      uint64_t v45 = v87;
      if (v87)
      {
        uint64_t v80 = v9;
        uint64_t v46 = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(a5);
        unint64_t v47 = (Espresso *)Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v85, v46 + 43);
        uint64_t v49 = v85;
        BOOL v50 = v85 != 0;
        if (v85)
        {
          if (*(unsigned char *)(v41[1] + 53))
          {
            uint64_t v83 = 0;
            int v84 = 0;
            std::string::basic_string[abi:ne180100]<0>(buf, "wGamma");
            uint64_t v51 = 0;
            uint64_t v52 = *(int *)(v45 + 8);
            do
            {
              v52 *= *(int *)(v45 + 12 + v51);
              v51 += 4;
            }
            while (v51 != 12);
            (*(void (**)(void *, uint64_t *, unsigned char *, void, uint64_t, void))(*v41 + 168))(v41, &v83, buf, *(void *)(v45 + 24), 4 * v52, 0);
            if (SBYTE3(v108) < 0) {
              operator delete(*(void **)buf);
            }
            if (v84) {
              nitro::nitro_function::nitro_function(v84);
            }
            uint64_t v83 = 0;
            int v84 = 0;
            std::string::basic_string[abi:ne180100]<0>(buf, "wBeta");
            uint64_t v53 = 0;
            uint64_t v54 = *(int *)(v49 + 8);
            do
            {
              v54 *= *(int *)(v49 + 12 + v53);
              v53 += 4;
            }
            while (v53 != 12);
            (*(void (**)(void *, uint64_t *, unsigned char *, void, uint64_t, void))(*v41 + 168))(v41, &v83, buf, *(void *)(v49 + 24), 4 * v54, 0);
          }
          else
          {
            uint64_t v83 = 0;
            int v84 = 0;
            std::string::basic_string[abi:ne180100]<0>(buf, "wGamma");
            uint64_t v60 = 0;
            uint64_t v61 = *(int *)(v45 + 8);
            do
            {
              v61 *= *(int *)(v45 + 12 + v60);
              v60 += 4;
            }
            while (v60 != 12);
            (*(void (**)(void *, uint64_t *, unsigned char *, void, uint64_t, void))(*v41 + 160))(v41, &v83, buf, *(void *)(v45 + 24), 4 * v61, 0);
            if (SBYTE3(v108) < 0) {
              operator delete(*(void **)buf);
            }
            if (v84) {
              nitro::nitro_function::nitro_function(v84);
            }
            uint64_t v83 = 0;
            int v84 = 0;
            std::string::basic_string[abi:ne180100]<0>(buf, "wBeta");
            uint64_t v62 = 0;
            uint64_t v63 = *(int *)(v49 + 8);
            do
            {
              v63 *= *(int *)(v49 + 12 + v62);
              v62 += 4;
            }
            while (v62 != 12);
            (*(void (**)(void *, uint64_t *, unsigned char *, void, uint64_t, void))(*v41 + 160))(v41, &v83, buf, *(void *)(v49 + 24), 4 * v63, 0);
          }
          if (SBYTE3(v108) < 0) {
            operator delete(*(void **)buf);
          }
          if (v84) {
            nitro::nitro_function::nitro_function(v84);
          }
          uint64_t v64 = Espresso::zephyr::function_t::new_detached_node(a3[3], (uint64_t)&v103);
          uint64_t v65 = *((void *)v64 + 1);
          uint64_t v66 = v90;
          if (v90) {
            atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v67 = *(std::__shared_weak_count **)(v65 + 16);
          *(void *)(v65 + 8) = v41;
          *(void *)(v65 + 16) = v66;
          if (v67) {
            nitro::nitro_function::nitro_function(v67);
          }
          Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v23, (Espresso::zephyr::value_t *)a6);
          uint64_t v68 = a3[3];
          if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v69 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v69 = v103.__r_.__value_.__l.__size_;
          }
          uint64_t v70 = buf;
          std::string::basic_string[abi:ne180100]((uint64_t)buf, v69 + 6);
          if (SBYTE3(v108) < 0) {
            uint64_t v70 = *(unsigned char **)buf;
          }
          if (v69)
          {
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v71 = &v103;
            }
            else {
              uint64_t v71 = (std::string *)v103.__r_.__value_.__r.__words[0];
            }
            memmove(v70, v71, v69);
          }
          strcpy(&v70[v69], "_input");
          int v72 = Espresso::zephyr::function_t::new_value(v68, (uint64_t)buf);
          if (SBYTE3(v108) < 0) {
            operator delete(*(void **)buf);
          }
          Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v23, (Espresso::zephyr::value_t *)v72);
          Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v64, (Espresso::zephyr::value_t *)v72);
          uint64_t v73 = a3[3];
          if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v74 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v74 = v103.__r_.__value_.__l.__size_;
          }
          uint64_t v75 = buf;
          std::string::basic_string[abi:ne180100]((uint64_t)buf, v74 + 7);
          if (SBYTE3(v108) < 0) {
            uint64_t v75 = *(unsigned char **)buf;
          }
          if (v74)
          {
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v76 = &v103;
            }
            else {
              long long v76 = (std::string *)v103.__r_.__value_.__r.__words[0];
            }
            memmove(v75, v76, v74);
          }
          strcpy(&v75[v74], "_output");
          long long v77 = Espresso::zephyr::function_t::new_value(v73, (uint64_t)buf);
          if (SBYTE3(v108) < 0) {
            operator delete(*(void **)buf);
          }
          Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v64, (Espresso::zephyr::value_t *)v77);
          Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v28, (Espresso::zephyr::value_t *)v77);
          uint64_t v78 = (Espresso::zephyr::value_t **)a3[12];
          if ((Espresso::zephyr::value_t **)a3[13] == v78) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v28, *v78);
          Espresso::zephyr::ordered_block_t::insert_node_after(**v80, (Espresso::zephyr::node_t *)v23, a6[10]);
          Espresso::zephyr::ordered_block_t::insert_node_after(**v80, (Espresso::zephyr::node_t *)v64, (Espresso::zephyr::node_t *)v23);
          Espresso::zephyr::ordered_block_t::insert_node_after(**v80, (Espresso::zephyr::node_t *)v28, (Espresso::zephyr::node_t *)v64);
          for (uint64_t i = (uint64_t **)(a2 + 16); ; Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)i[2]))
          {
            uint64_t i = (uint64_t **)*i;
            if (!i) {
              break;
            }
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          uint64_t v58 = Espresso::espresso_os_log_subsystem(v47, v48);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "omplex_subgraph_matching.mm";
            __int16 v105 = 1024;
            int v106 = 761;
            __int16 v107 = 2080;
            unint64_t v108 = "beta_blob";
            _os_log_impl(&dword_1920CB000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
        }
        if (v86) {
          nitro::nitro_function::nitro_function(v86);
        }
      }
      else
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v57 = Espresso::espresso_os_log_subsystem(v43, v44);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "omplex_subgraph_matching.mm";
            __int16 v105 = 1024;
            int v106 = 756;
            __int16 v107 = 2080;
            unint64_t v108 = "gamma_blob";
            _os_log_impl(&dword_1920CB000, v57, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
        }
        BOOL v50 = 0;
      }
      if (v88) {
        nitro::nitro_function::nitro_function(v88);
      }
    }
    else
    {
      if (Espresso::zephyr::match_verbose)
      {
        BOOL v56 = Espresso::espresso_os_log_subsystem(v39, v40);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          __int16 v105 = 1024;
          int v106 = 751;
          __int16 v107 = 2080;
          unint64_t v108 = "instancenorm_kernel";
          _os_log_impl(&dword_1920CB000, v56, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
      }
      BOOL v50 = 0;
    }
    if (v90) {
      nitro::nitro_function::nitro_function(v90);
    }
    if (v37) {
      nitro::nitro_function::nitro_function(v37);
    }
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
  }
  else
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(v29, v30);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        __int16 v105 = 1024;
        int v106 = 725;
        __int16 v107 = 2080;
        unint64_t v108 = "input_shape_ptr";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    BOOL v50 = 0;
  }
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  return v50;
}

void sub_1928131F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (*(char *)(v30 - 121) < 0) {
    operator delete(*(void **)(v30 - 144));
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a19)
  {
    nitro::nitro_function::nitro_function(a19);
    if (!v29)
    {
LABEL_11:
      if (!v28) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if (!v29)
  {
    goto LABEL_11;
  }
  nitro::nitro_function::nitro_function(v29);
  if (!v28)
  {
LABEL_13:
    if (a28) {
      nitro::nitro_function::nitro_function(a28);
    }
    if (*(char *)(v30 - 145) < 0) {
      operator delete(*(void **)(v30 - 168));
    }
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  nitro::nitro_function::nitro_function(v28);
  goto LABEL_13;
}

void Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    uint64_t v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_19281347C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37B618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37B618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes18merge_channel_normERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke[abi:ne180100]<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1 &,Espresso::zephyr::node_t *>((Espresso::zephyr::ordered_block_t ****)(a1 + 8), *a2);
}

uint64_t std::__invoke[abi:ne180100]<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1 &,Espresso::zephyr::node_t *>(Espresso::zephyr::ordered_block_t ****a1, uint64_t a2)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 104) - *(void *)(a2 + 96) != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 826;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "add_18->outputs().size() == 1";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (*(void *)(a2 + 128) - *(void *)(a2 + 120) != 16)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 827;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "add_18->inputs().size() == 2";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (!Espresso::zephyr::match_simple_eltwise_binop(a2, 0))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(0, v4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 829;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(add_18, ELEMENTWISE_OPERATION_ADD)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(a2);
  constant = (float *)(*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  if (!*((unsigned char *)constant + 24))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 831;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "zephyr::cast_kernel<generic_elementwise_kernel>(add_18)->get_params().nd_mode";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v8 = *(void *)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 128);
  while (1)
  {
    if (v8 == v9) {
      goto LABEL_41;
    }
    if (*(void *)v8)
    {
      uint64_t v10 = *(void *)(*(void *)v8 + 80);
      constant = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v10);
      if (constant) {
        break;
      }
    }
    v8 += 8;
  }
  if (!v10)
  {
LABEL_41:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 837;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "beta";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v12 = *(void *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  if (v12 == v13)
  {
LABEL_37:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 847;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "div_17";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  while (1)
  {
    if (*(void *)v12)
    {
      uint64_t v14 = *(void *)(*(void *)v12 + 80);
      constant = (float *)Espresso::zephyr::match_simple_eltwise_binop(v14, 0x66u);
      if (!constant)
      {
        if (Espresso::zephyr::match_verbose)
        {
          char v16 = Espresso::espresso_os_log_subsystem(0, v7);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "omplex_subgraph_matching.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 840;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "match_simple_eltwise_binop(div_17, ELEMENTWISE_OPERATION_DIV)";
            _os_log_impl(&dword_1920CB000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
        }
        goto LABEL_36;
      }
      unint64_t v15 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v14);
      constant = (float *)(*(uint64_t (**)(void *))(*(void *)v15 + 320))(v15);
      if (*((unsigned char *)constant + 24)) {
        break;
      }
    }
LABEL_36:
    v12 += 8;
    if (v12 == v13) {
      goto LABEL_37;
    }
  }
  if (!v14) {
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v14 + 120);
  uint64_t v19 = *(void *)(v14 + 128);
  if (v20 == v19) {
    goto LABEL_75;
  }
  while (1)
  {
    if (!*(void *)v20) {
      goto LABEL_74;
    }
    uint64_t v21 = *(void *)(*(void *)v20 + 80);
    constant = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v21);
    if (!constant)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v23 = Espresso::espresso_os_log_subsystem(0, v7);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 852;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "clip_14_k";
          uint64_t v24 = v23;
          size_t v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
          goto LABEL_71;
        }
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    constant = (float *)(*(uint64_t (**)(float *))(*(void *)constant + 320))(constant);
    float v22 = constant[2];
    if (*(_DWORD *)constant != 119)
    {
      if (*(_DWORD *)constant == 2)
      {
        if (v22 >= 0.00000001) {
          goto LABEL_79;
        }
        if (!Espresso::zephyr::match_verbose) {
          goto LABEL_74;
        }
        uint64_t v23 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 858;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "clip_14_p.alpha >= 9.99999993922529e-09";
          uint64_t v24 = v23;
          size_t v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
          goto LABEL_71;
        }
        goto LABEL_73;
      }
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v23 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 865;
          uint64_t v24 = v23;
          size_t v25 = "ZEPHYR_MATCH_FAIL %s:%d\n";
          uint32_t v26 = 18;
          goto LABEL_72;
        }
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (v22 > 0.0) {
      break;
    }
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v23 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 861;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "clip_14_p.alpha > 0";
        uint64_t v24 = v23;
        size_t v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
LABEL_71:
        uint32_t v26 = 28;
LABEL_72:
        _os_log_impl(&dword_1920CB000, v24, OS_LOG_TYPE_INFO, v25, buf, v26);
      }
LABEL_73:
    }
LABEL_74:
    v20 += 8;
    if (v20 == v19) {
      goto LABEL_75;
    }
  }
  if (constant[3] > 3.4028e38)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v23 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 863;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "clip_14_p.beta <= FLT_MAX";
        uint64_t v24 = v23;
        size_t v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
        goto LABEL_71;
      }
      goto LABEL_73;
    }
    goto LABEL_74;
  }
LABEL_79:
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v27 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 868;
      _os_log_impl(&dword_1920CB000, v27, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
  }
  if (!v21)
  {
LABEL_75:
    if (Espresso::zephyr::match_verbose)
    {
      char v11 = Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 871;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "clip_14";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  uint64_t v28 = *(void *)(v21 + 120);
  if (*(void *)(v21 + 128) == v28) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v29 = *(void *)(*(void *)v28 + 80);
  if (!Espresso::zephyr::match_simple_eltwise_unaryop(v29, 11))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(0, v30);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 875;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_unaryop(sqrt_13, ELEMENTWISE_OPERATION_SQRT)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v31 = *(void *)(v29 + 120);
  if (*(void *)(v29 + 128) == v31) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v151 = *(void *)(*(void *)v31 + 80);
  if (!Espresso::zephyr::match_simple_eltwise_binop(v151, 0x66u))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(0, v32);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 879;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(div_12, ELEMENTWISE_OPERATION_DIV)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v33 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v151);
  __int16 v34 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v33 + 320))(v33);
  if (!*((unsigned char *)v34 + 24))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(v34, v35);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 882;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "zephyr::cast_kernel<generic_elementwise_kernel>(div_12)->get_params().nd_mode";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v36 = *(void *)(v151 + 120);
  uint64_t v37 = *(void *)(v151 + 128);
  while (1)
  {
    if (v36 == v37) {
      goto LABEL_125;
    }
    if (*(void *)v36)
    {
      uint64_t v38 = *(void *)(*(void *)v36 + 80);
      __int16 v34 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v38);
      if (v34) {
        break;
      }
    }
    v36 += 8;
  }
  if (!v38)
  {
LABEL_125:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(v34, v35);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 888;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "const_306";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v40 = *(void *)(v151 + 120);
  uint64_t v39 = *(void *)(v151 + 128);
  while (2)
  {
    if (v40 == v39)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v11 = Espresso::espresso_os_log_subsystem(v34, v35);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 902;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "mul_10";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    if (!*(void *)v40) {
      goto LABEL_124;
    }
    uint64_t v41 = *(void *)(*(void *)v40 + 80);
    if (*(void *)(v41 + 128) - *(void *)(v41 + 120) != 8)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_124;
      }
      unint64_t v42 = Espresso::espresso_os_log_subsystem(v34, v35);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO)) {
        goto LABEL_123;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 891;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_10->inputs().size() == 1";
      unint64_t v43 = v42;
LABEL_122:
      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      goto LABEL_123;
    }
    __int16 v34 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(*(void *)(*(void *)v40 + 80));
    if (!v34)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_124;
      }
      unint64_t v42 = Espresso::espresso_os_log_subsystem(0, v35);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO)) {
        goto LABEL_123;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 894;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_10_k";
      unint64_t v43 = v42;
      goto LABEL_122;
    }
    __int16 v34 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v34 + 320))(v34);
    if (*(_DWORD *)v34 != 3)
    {
      if (Espresso::zephyr::match_verbose)
      {
        unint64_t v42 = Espresso::espresso_os_log_subsystem(v34, v35);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 897;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "mul_10_p.operation == ELEMENTWISE_OPERATION_INTERNAL_MULC";
          unint64_t v43 = v42;
          goto LABEL_122;
        }
LABEL_123:
      }
LABEL_124:
      v40 += 8;
      continue;
    }
    break;
  }
  if (Espresso::zephyr::match_verbose)
  {
    unint64_t v44 = Espresso::espresso_os_log_subsystem(v34, v35);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 899;
      _os_log_impl(&dword_1920CB000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
  }
  uint64_t v45 = *(void *)(v41 + 120);
  if (*(void *)(v41 + 128) == v45) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v149 = *(void *)(*(void *)v45 + 80);
  if (!Espresso::zephyr::match_simple_eltwise_unaryop(v149, 24))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(0, v46);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 906;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_unaryop(abs_8, ELEMENTWISE_OPERATION_ABS)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v47 = *(void *)(v149 + 120);
  if (*(void *)(v149 + 128) == v47) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v148 = *(void *)(*(void *)v47 + 80);
  uint64_t matched = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop(v148, 0x21u);
  if (!matched)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(0, v49);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 910;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(sub_7, ELEMENTWISE_OPERATION_SUBTRACT)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v50 = *(void *)(v148 + 120);
  uint64_t v51 = *(void *)(v148 + 128);
  while (1)
  {
    if (v50 == v51) {
      goto LABEL_169;
    }
    if (*(void *)v50)
    {
      uint64_t v150 = *(void *)(*(void *)v50 + 80);
      uint64_t matched = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop(v150, 1u);
      if (matched) {
        break;
      }
    }
    v50 += 8;
  }
  if (!v150)
  {
LABEL_169:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 916;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_6";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v52 = *(void **)(v150 + 120);
  uint64_t v53 = *v52;
  uint64_t v54 = v52[1];
  uint64_t v55 = *(unsigned __int8 *)(*v52 + 55);
  size_t v56 = *(void *)(v53 + 40);
  if ((v55 & 0x80u) == 0) {
    uint64_t v57 = v55;
  }
  else {
    uint64_t v57 = *(void *)(v53 + 40);
  }
  uint64_t v58 = *(unsigned __int8 *)(v54 + 55);
  int v59 = (char)v58;
  if ((v58 & 0x80u) != 0) {
    uint64_t v58 = *(void *)(v54 + 40);
  }
  if (v57 != v58)
  {
LABEL_174:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 918;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_6->inputs()[0]->name() == mul_6->inputs()[1]->name()";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v60 = (const void **)(v53 + 32);
  uint64_t v63 = *(const char **)(v54 + 32);
  uint64_t v61 = (const char *)(v54 + 32);
  uint64_t v62 = v63;
  if (v59 >= 0) {
    uint64_t v49 = v61;
  }
  else {
    uint64_t v49 = v62;
  }
  if ((v55 & 0x80) != 0)
  {
    uint64_t matched = memcmp(*v60, v49, v56);
    if (matched) {
      goto LABEL_174;
    }
  }
  else if (v55)
  {
    while (*(unsigned __int8 *)v60 == *(unsigned __int8 *)v49)
    {
      uint64_t v60 = (const void **)((char *)v60 + 1);
      ++v49;
      if (!--v55) {
        goto LABEL_178;
      }
    }
    goto LABEL_174;
  }
LABEL_178:
  uint64_t v65 = *(void *)(v148 + 120);
  uint64_t v64 = *(void *)(v148 + 128);
  uint64_t v146 = v64;
  while (2)
  {
    if (v65 == v64)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v11 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 937;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reducemean_4";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    if (!*(void *)v65) {
      goto LABEL_207;
    }
    v145 = *(void **)(*(void *)v65 + 80);
    uint64_t matched = (uint64_t)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>((uint64_t)v145);
    if (!matched)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v70 = Espresso::espresso_os_log_subsystem(0, v49);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 923;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "reducemean_4_k";
          uint64_t v71 = v70;
          goto LABEL_205;
        }
        goto LABEL_206;
      }
      goto LABEL_207;
    }
    uint64_t matched = (*(uint64_t (**)(uint64_t))(*(void *)matched + 320))(matched);
    int v66 = *(_DWORD *)(matched + 8);
    if (v66 != 2 && v66 != 4)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v70 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 928;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "reducemean_4_p.axis_mode == REDUCE_AXIS_Y || reducemean_4_p.axis_mode == REDUCE_AXIS_K";
          uint64_t v71 = v70;
          goto LABEL_205;
        }
        goto LABEL_206;
      }
      goto LABEL_207;
    }
    if (*(_DWORD *)matched != 1)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v70 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 929;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "reducemean_4_p.mode == REDUCE_MODE_AVG";
          uint64_t v71 = v70;
          goto LABEL_205;
        }
        goto LABEL_206;
      }
      goto LABEL_207;
    }
    uint64_t v68 = v145[15];
    uint64_t v69 = v145[16];
    if (v69 - v68 != 8)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v70 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 931;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "reducemean_4->inputs().size() == 1";
          uint64_t v71 = v70;
LABEL_205:
          _os_log_impl(&dword_1920CB000, v71, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
LABEL_206:
      }
LABEL_207:
      v65 += 8;
      uint64_t v64 = v146;
      continue;
    }
    break;
  }
  if (v145[13] - v145[12] != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v70 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 932;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reducemean_4->outputs().size() == 1";
        uint64_t v71 = v70;
        goto LABEL_205;
      }
      goto LABEL_206;
    }
    goto LABEL_207;
  }
  if (Espresso::zephyr::match_verbose)
  {
    int v72 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 934;
      _os_log_impl(&dword_1920CB000, v72, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }

    uint64_t v68 = v145[15];
    uint64_t v69 = v145[16];
  }
  if (v69 == v68) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v147 = *(void *)(*(void *)v68 + 80);
  uint64_t v73 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v147, 1u);
  if (!v73)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(0, v74);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 941;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(mul_3, ELEMENTWISE_OPERATION_MUL)";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v75 = *(void **)(v147 + 120);
  uint64_t v77 = *v75;
  uint64_t v76 = v75[1];
  uint64_t v78 = *(unsigned __int8 *)(*v75 + 55);
  uint64_t v144 = v77;
  size_t v79 = *(void *)(v77 + 40);
  if ((v78 & 0x80u) == 0) {
    uint64_t v80 = v78;
  }
  else {
    uint64_t v80 = *(void *)(v77 + 40);
  }
  uint64_t v81 = *(unsigned __int8 *)(v76 + 55);
  int v82 = (char)v81;
  if ((v81 & 0x80u) != 0) {
    uint64_t v81 = *(void *)(v76 + 40);
  }
  if (v80 != v81) {
    goto LABEL_240;
  }
  v143 = (const void **)(v144 + 32);
  uint64_t v85 = *(const char **)(v76 + 32);
  uint64_t v83 = (const char *)(v76 + 32);
  int v84 = v85;
  if (v82 >= 0) {
    size_t v74 = v83;
  }
  else {
    size_t v74 = v84;
  }
  if ((v78 & 0x80) != 0)
  {
    uint64_t v73 = (Espresso *)memcmp(*v143, v74, v79);
    if (v73) {
      goto LABEL_240;
    }
  }
  else if (v78)
  {
    int v86 = (unsigned __int8 *)(v144 + 32);
    while (*v86 == *(unsigned __int8 *)v74)
    {
      ++v86;
      ++v74;
      if (!--v78) {
        goto LABEL_244;
      }
    }
LABEL_240:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem(v73, v74);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 943;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_3->inputs()[0]->name() == mul_3->inputs()[1]->name()";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_44:

    return 0;
  }
LABEL_244:
  v142 = *(void **)(**(void **)(v150 + 120) + 80);
  uint64_t v87 = Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>((uint64_t)v142);
  uint64_t v88 = (*(uint64_t (**)(void *))(*(void *)v87 + 320))(v87);
  int v90 = *(_DWORD *)(v88 + 8);
  if (v90 != 2 && v90 != 4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 953;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reducemean_5_p.axis_mode == REDUCE_AXIS_Y || reducemean_5_p.axis_mode == REDUCE_AXIS_K";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  if (*(_DWORD *)v88 != 1)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 954;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "reducemean_5_p.mode == REDUCE_MODE_AVG";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  int v92 = (uint64_t *)v142[15];
  uint64_t v93 = (uint64_t *)v142[16];
  if ((char *)v93 - (char *)v92 != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 956;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "reducemean_5->inputs().size() == 1";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v94 = v142[13];
  os_log_t log = (os_log_t)v142[12];
  if ((char *)v94 - (char *)log != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 957;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "reducemean_5->outputs().size() == 1";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v93 == v92) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v95 = *v92;
  uint64_t v96 = *(unsigned __int8 *)(*v92 + 55);
  size_t v97 = *(void *)(v95 + 40);
  if ((v96 & 0x80u) == 0) {
    uint64_t v98 = v96;
  }
  else {
    uint64_t v98 = *(void *)(v95 + 40);
  }
  uint64_t v99 = *(unsigned __int8 *)(v144 + 55);
  int v100 = (char)v99;
  if ((v99 & 0x80u) != 0) {
    uint64_t v99 = *(void *)(v144 + 40);
  }
  if (v98 != v99)
  {
LABEL_284:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 959;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "reducemean_5->input()->name() == conv_0_new1->name()";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  long long v101 = (const void **)(v95 + 32);
  if (v100 >= 0) {
    BOOL v89 = (const char *)(v144 + 32);
  }
  else {
    BOOL v89 = (const char *)*v143;
  }
  if ((v96 & 0x80) != 0)
  {
    uint64_t v88 = memcmp(*v101, v89, v97);
    if (!v88) {
      goto LABEL_288;
    }
    goto LABEL_284;
  }
  if (v96)
  {
    while (*(unsigned __int8 *)v101 == *(unsigned __int8 *)v89)
    {
      long long v101 = (const void **)((char *)v101 + 1);
      ++v89;
      if (!--v96) {
        goto LABEL_288;
      }
    }
    goto LABEL_284;
  }
LABEL_288:
  if (v94 == log) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v102 = *(void *)(v14 + 120);
  uint64_t v103 = *(void *)(v14 + 128);
  if (v102 == v103)
  {
LABEL_300:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 971;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_16";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  Class isa = log->isa;
  while (2)
  {
    if (!*(void *)v102)
    {
LABEL_299:
      v102 += 8;
      if (v102 == v103) {
        goto LABEL_300;
      }
      continue;
    }
    break;
  }
  os_log_t loga = *(os_log_t *)(*(void *)v102 + 80);
  uint64_t v88 = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop((uint64_t)loga, 1u);
  if (!v88)
  {
    if (Espresso::zephyr::match_verbose)
    {
      logb = Espresso::espresso_os_log_subsystem(0, v89);
      if (os_log_type_enabled(logb, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 964;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "match_simple_eltwise_binop(mul_16, ELEMENTWISE_OPERATION_MUL)";
        _os_log_impl(&dword_1920CB000, logb, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    goto LABEL_299;
  }
  v104 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>((uint64_t)loga);
  uint64_t v88 = (*(uint64_t (**)(void *))(*(void *)v104 + 320))(v104);
  if (!*(unsigned char *)(v88 + 24)) {
    goto LABEL_299;
  }
  if (!loga) {
    goto LABEL_300;
  }
  Class v105 = loga[15].isa;
  Class v106 = loga[16].isa;
  while (1)
  {
    if (v105 == v106) {
      goto LABEL_324;
    }
    if (*(void *)v105)
    {
      uint64_t v138 = *(void *)(*(void *)v105 + 80);
      uint64_t v88 = (uint64_t)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v138);
      if (v88) {
        break;
      }
    }
    Class v105 = (Class)((char *)v105 + 8);
  }
  if (!v138)
  {
LABEL_324:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 977;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "gamma";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  Class v108 = loga[15].isa;
  Class v107 = loga[16].isa;
  v136 = v107;
  while (2)
  {
    if (v108 == v107) {
      goto LABEL_343;
    }
    if (!*(void *)v108) {
      goto LABEL_323;
    }
    uint64_t v109 = *(void *)(*(void *)v108 + 80);
    uint64_t v88 = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop(v109, 0x21u);
    if (!v88)
    {
      if (Espresso::zephyr::match_verbose)
      {
        long long v111 = Espresso::espresso_os_log_subsystem(0, v89);
        if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 981;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "match_simple_eltwise_binop(sub_15, ELEMENTWISE_OPERATION_SUBTRACT)";
          _os_log_impl(&dword_1920CB000, v111, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
      }
      goto LABEL_323;
    }
    BOOL v110 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v109);
    uint64_t v88 = (*(uint64_t (**)(void *))(*(void *)v110 + 320))(v110);
    if (!*(unsigned char *)(v88 + 24))
    {
LABEL_323:
      Class v108 = (Class)((char *)v108 + 8);
      Class v107 = v136;
      continue;
    }
    break;
  }
  if (!v109)
  {
LABEL_343:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 988;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "sub_15";
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  uint64_t v112 = *(void **)(v109 + 120);
  uint64_t v113 = *(unsigned __int8 *)(*v112 + 55);
  if ((v113 & 0x80u) == 0) {
    uint64_t v114 = *(unsigned __int8 *)(*v112 + 55);
  }
  else {
    uint64_t v114 = *(void *)(*v112 + 40);
  }
  uint64_t v115 = *(unsigned __int8 *)(v144 + 55);
  int v116 = (char)v115;
  if ((v115 & 0x80u) != 0) {
    uint64_t v115 = *(void *)(v144 + 40);
  }
  if (v114 != v115) {
    goto LABEL_348;
  }
  uint64_t v117 = (const void **)(*v112 + 32);
  if (v116 >= 0) {
    BOOL v89 = (const char *)(v144 + 32);
  }
  else {
    BOOL v89 = (const char *)*v143;
  }
  if ((v113 & 0x80) != 0)
  {
    uint64_t v88 = memcmp(*v117, v89, *(void *)(*v112 + 40));
    if (v88) {
      goto LABEL_348;
    }
  }
  else if (*(unsigned char *)(*v112 + 55))
  {
    while (*(unsigned __int8 *)v117 == *(unsigned __int8 *)v89)
    {
      uint64_t v117 = (const void **)((char *)v117 + 1);
      ++v89;
      if (!--v113) {
        goto LABEL_352;
      }
    }
LABEL_348:
    if (Espresso::zephyr::match_verbose)
    {
      char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 990;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "sub_15->inputs()[0]->name() == conv_0_new1->name()";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
LABEL_352:
  uint64_t v118 = v112[1];
  uint64_t v119 = *(unsigned __int8 *)(v118 + 55);
  size_t v120 = *(void *)(v118 + 40);
  if ((v119 & 0x80u) == 0) {
    uint64_t v121 = *(unsigned __int8 *)(v118 + 55);
  }
  else {
    uint64_t v121 = *(void *)(v118 + 40);
  }
  uint64_t v122 = *((unsigned __int8 *)isa + 55);
  int v123 = (char)v122;
  if ((v122 & 0x80u) != 0) {
    uint64_t v122 = *((void *)isa + 5);
  }
  if (v121 != v122)
  {
LABEL_368:
    if (Espresso::zephyr::match_verbose)
    {
      char v11 = Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 991;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "sub_15->inputs()[1]->name() == conv_0_new1_avg->name()";
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  v124 = (const void **)(v118 + 32);
  if (v123 >= 0) {
    BOOL v89 = (char *)isa + 32;
  }
  else {
    BOOL v89 = (const char *)*((void *)isa + 4);
  }
  if ((v119 & 0x80) != 0)
  {
    uint64_t v88 = memcmp(*v124, v89, v120);
    if (v88) {
      goto LABEL_368;
    }
  }
  else if (v119)
  {
    while (*(unsigned __int8 *)v124 == *(unsigned __int8 *)v89)
    {
      v124 = (const void **)((char *)v124 + 1);
      ++v89;
      if (!--v119) {
        goto LABEL_372;
      }
    }
    goto LABEL_368;
  }
LABEL_372:
  *(void *)buf = a2;
  *(void *)&buf[8] = v10;
  *(void *)&buf[16] = v14;
  *(void *)&unsigned char buf[24] = v21;
  uint64_t v157 = v29;
  uint64_t v158 = v151;
  uint64_t v159 = v38;
  uint64_t v160 = v41;
  uint64_t v161 = v149;
  uint64_t v162 = v148;
  uint64_t v163 = v150;
  v164 = v145;
  uint64_t v165 = v147;
  v166 = v142;
  os_log_t v167 = loga;
  uint64_t v168 = v138;
  uint64_t v169 = v109;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v155, (unint64_t *)buf, 17);
  uint64_t v125 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v152, v155);
  if (v154 != 1) {
    goto LABEL_387;
  }
  uint64_t v127 = *(unint64_t ***)(a2 + 96);
  if (*(unint64_t ***)(a2 + 104) == v127) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v128 = v153;
  if (!v153)
  {
LABEL_387:
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v133 = Espresso::espresso_os_log_subsystem((Espresso *)v125, v126);
      if (!os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
      {
LABEL_391:
        uint64_t v17 = 0;
        goto LABEL_392;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1003;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "external_values.size() == 1 && external_values.count(add_18->output())";
LABEL_390:
      _os_log_impl(&dword_1920CB000, v133, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      goto LABEL_391;
    }
LABEL_400:
    uint64_t v17 = 0;
    goto LABEL_401;
  }
  uint64_t v129 = *v127;
  while (1)
  {
    if (v129) {
      unint64_t v130 = *v129;
    }
    else {
      unint64_t v130 = 0;
    }
    uint64_t v131 = (void *)v128[4];
    if (v131)
    {
      uint64_t v131 = (void *)*v131;
      if (v130 < (unint64_t)v131) {
        goto LABEL_386;
      }
    }
    unint64_t v132 = v129 ? *v129 : 0;
    if ((unint64_t)v131 >= v132) {
      break;
    }
    ++v128;
LABEL_386:
    uint64_t v128 = (void *)*v128;
    if (!v128) {
      goto LABEL_387;
    }
  }
  BOOL v134 = Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_0::operator()(a1[1], (uint64_t)v155, (void *)a2, v138, v10, (Espresso::zephyr::node_t **)v144);
  if (!v134)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v133 = Espresso::espresso_os_log_subsystem((Espresso *)v134, v135);
      if (!os_log_type_enabled(v133, OS_LOG_TYPE_INFO)) {
        goto LABEL_391;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1005;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "substitution_func(subgraph, add_18, gamma, beta, conv_0_new1)";
      goto LABEL_390;
    }
    goto LABEL_400;
  }
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v133 = Espresso::espresso_os_log_subsystem((Espresso *)v134, v135);
    uint64_t v17 = 1;
    if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1006;
      _os_log_impl(&dword_1920CB000, v133, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
LABEL_392:
  }
  else
  {
    uint64_t v17 = 1;
  }
LABEL_401:
  std::__tree<int>::destroy(v153);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v155);
  return v17;
}

void sub_192815A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,char a30)
{
}

__n128 std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37B5C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37B5C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192815B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37B828;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      unint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          unint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192815CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes23merge_pytorch_layernormERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)a2;
  if (*(void *)(*(void *)a2 + 104) - *(void *)(*(void *)a2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1161;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "add1->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_31;
    }
    return 0;
  }
  if (!Espresso::zephyr::match_simple_eltwise_binop(*(void *)a2, 0))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(0, v4);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1162;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "match_simple_eltwise_binop(add1, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_31;
    }
    return 0;
  }
  v107[0] = &unk_1EE37E8A0;
  Class v108 = v107;
  uint64_t v5 = (void *)v2[15];
  if (v2[16] - (void)v5 != 16) {
    goto LABEL_27;
  }
  uint64_t v6 = *(void *)(*v5 + 80);
  uint64_t v7 = *(void *)(v5[1] + 80);
  if (std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v107, v6, v7))
  {
    uint64_t v7 = v6;
    goto LABEL_15;
  }
  if ((std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v108, v7, v6) & 1) == 0)
  {
LABEL_27:
    char v9 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v107);
LABEL_28:
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1169;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "mul1";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_31:

      return 0;
    }
    return 0;
  }
LABEL_15:
  char v9 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v107);
  if (!v7) {
    goto LABEL_28;
  }
  char v11 = (void *)v2[15];
  if (v2[16] - (void)v11 != 16
    || ((uint64_t v12 = *(Espresso::zephyr::node_t **)(*v11 + 80),
         uint64_t v13 = *(Espresso::zephyr::node_t **)(v11[1] + 80),
         v13 != (Espresso::zephyr::node_t *)v7)
      ? (uint64_t v14 = 0)
      : (uint64_t v14 = v12),
        v12 != (Espresso::zephyr::node_t *)v7 ? (uint64_t v15 = v14) : (uint64_t v15 = v13),
        !v15))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1171;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "beta_read";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  v105[0] = &unk_1EE37E848;
  Class v106 = v105;
  char v16 = *(void **)(v7 + 120);
  if (*(void *)(v7 + 128) - (void)v16 != 16) {
    goto LABEL_53;
  }
  uint64_t v17 = *(void *)(*v16 + 80);
  uint64_t v18 = *(void *)(v16[1] + 80);
  if (std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v105, v17, v18))
  {
    uint64_t v18 = v17;
    goto LABEL_39;
  }
  if ((std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v106, v18, v17) & 1) == 0)
  {
LABEL_53:
    uint64_t v21 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v105);
    goto LABEL_54;
  }
LABEL_39:
  uint64_t v21 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v105);
  if (!v18)
  {
LABEL_54:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v8 = Espresso::espresso_os_log_subsystem(v21, v22);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1184;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "mul_or_div";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  uint64_t v23 = *(void **)(v7 + 120);
  if (*(void *)(v7 + 128) - (void)v23 != 16) {
    goto LABEL_58;
  }
  uint64_t v24 = *(Espresso::zephyr::node_t **)(*v23 + 80);
  size_t v25 = *(Espresso::zephyr::node_t **)(v23[1] + 80);
  if (v25 == (Espresso::zephyr::node_t *)v18) {
    uint32_t v26 = v24;
  }
  else {
    uint32_t v26 = 0;
  }
  if (v24 != (Espresso::zephyr::node_t *)v18) {
    size_t v25 = v26;
  }
  if (!v25)
  {
LABEL_58:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v8 = Espresso::espresso_os_log_subsystem(v21, v22);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1187;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "gamma_read";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  int v90 = v25;
  uint64_t matched = (float *)Espresso::zephyr::match_simple_eltwise_binop(v18, 0x66u);
  if (!matched)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v8 = Espresso::espresso_os_log_subsystem(0, v28);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1190;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(mul_or_div, ELEMENTWISE_OPERATION_DIV)";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  uint64_t v29 = *(void *)(v18 + 120);
  uint64_t v30 = *(void *)(v18 + 128);
  while (1)
  {
    if (v29 == v30) {
      goto LABEL_78;
    }
    if (*(void *)v29)
    {
      uint64_t v31 = *(void *)(*(void *)v29 + 80);
      uint64_t matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v31, 11);
      if (matched) {
        break;
      }
    }
    v29 += 8;
  }
  if (!v31)
  {
LABEL_78:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v8 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v28);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1195;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "denominator";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  uint64_t v32 = *(void *)(v31 + 120);
  uint64_t v33 = *(void *)(v31 + 128);
  while (1)
  {
    if (v32 == v33)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v8 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v28);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1220;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "square_of_denominator";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_31;
    }
    if (*(void *)v32)
    {
      uint64_t v34 = *(void *)(*(void *)v32 + 80);
      uint64_t matched = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v34);
      if (matched)
      {
        uint64_t matched = (float *)(*(uint64_t (**)(float *))(*(void *)matched + 320))(matched);
        uint64_t v36 = *(char **)(v34 + 120);
        uint64_t v35 = *(char **)(v34 + 128);
        BOOL v37 = v35 - v36 == 16 && *(_DWORD *)matched == 1;
        if (v37 && *(void *)v36 == *((void *)v36 + 1)) {
          break;
        }
      }
    }
    v32 += 8;
  }
  uint64_t v89 = v34;
  if (v36 == v35)
  {
LABEL_96:
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v8 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v28);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1237;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "reduce_l2";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  float v38 = matched[3];
  while (1)
  {
    if (*(void *)v36)
    {
      uint64_t v39 = *(void *)(*(void *)v36 + 80);
      uint64_t v40 = v35;
      uint64_t matched = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(v39);
      uint64_t v35 = v40;
      if (matched)
      {
        if (*(void *)(v39 + 128) - *(void *)(v39 + 120) == 8)
        {
          uint64_t matched = (float *)(*(uint64_t (**)(float *))(*(void *)matched + 320))(matched);
          BOOL v41 = *(_DWORD *)matched == 5 && *((_DWORD *)matched + 2) == 1;
          uint64_t v35 = v40;
          if (v41) {
            break;
          }
        }
      }
    }
    v36 += 8;
    if (v36 == v35) {
      goto LABEL_96;
    }
  }
  uint64_t v42 = *(void *)(v39 + 120);
  if (*(void *)(v39 + 128) == v42) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v88 = *(void *)(*(void *)v42 + 80);
  if (!v88)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v8 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v28);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1240;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "numerator";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  unint64_t v43 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v88, 0x21u);
  if (!v43)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v8 = Espresso::espresso_os_log_subsystem(0, v44);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1242;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "match_simple_eltwise_binop(numerator, ELEMENTWISE_OPERATION_SUBTRACT)";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  uint64_t v45 = *(void *)(v88 + 120);
  uint64_t v46 = *(void *)(v88 + 128);
  while (1)
  {
    if (v45 == v46)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v43, v44);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1258;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "reduce_mean";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_31;
    }
    if (*(void *)v45)
    {
      uint64_t v47 = *(void *)(*(void *)v45 + 80);
      unint64_t v43 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(v47);
      if (v43)
      {
        if (*(void *)(v47 + 128) - *(void *)(v47 + 120) == 8)
        {
          unint64_t v43 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v43 + 320))(v43);
          if (*(_DWORD *)v43 == 1 && *((_DWORD *)v43 + 2) == 1) {
            break;
          }
        }
      }
    }
    v45 += 8;
  }
  uint64_t v49 = *(Espresso::zephyr::value_t ***)(v47 + 120);
  if (*(Espresso::zephyr::value_t ***)(v47 + 128) == v49) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v50 = (char **)v2[12];
  if ((char **)v2[13] == v50) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v87 = *v49;
  uint64_t v51 = *v50;
  *(void *)buf = v2;
  *(void *)&buf[8] = v7;
  *(void *)&buf[16] = v15;
  *(void *)&unsigned char buf[24] = v90;
  uint64_t v99 = v18;
  uint64_t v100 = v31;
  uint64_t v101 = v89;
  uint64_t v102 = v39;
  uint64_t v103 = v88;
  uint64_t v104 = v47;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v96, (unint64_t *)buf, 10);
  uint64_t v52 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v93, v96);
  if (v95 != 3)
  {
    if (v95 == 1)
    {
      int v54 = 0;
      uint64_t v55 = v94;
      if (v94) {
        goto LABEL_130;
      }
LABEL_141:
      if (Espresso::zephyr::match_verbose)
      {
        int v59 = Espresso::espresso_os_log_subsystem((Espresso *)v52, v53);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1286;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "external_values.count(y)";
          _os_log_impl(&dword_1920CB000, v59, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_166;
      }
LABEL_167:
      BOOL v19 = 0;
      goto LABEL_168;
    }
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_167;
    }
    int v59 = Espresso::espresso_os_log_subsystem((Espresso *)v52, v53);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1277;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "external_values.size() == 1 || external_values.size() == 3";
      _os_log_impl(&dword_1920CB000, v59, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_166:

    goto LABEL_167;
  }
  uint64_t v60 = (unint64_t **)*((void *)v90 + 12);
  if (*((unint64_t ***)v90 + 13) == v60) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v55 = v94;
  if (!v94)
  {
LABEL_159:
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_167;
    }
    int v59 = Espresso::espresso_os_log_subsystem((Espresso *)v52, v53);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1282;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "external_values.count(gamma_read->output())";
      _os_log_impl(&dword_1920CB000, v59, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_166;
  }
  uint64_t v61 = *v60;
  uint64_t v62 = v94;
  while (2)
  {
    if (v61) {
      unint64_t v63 = *v61;
    }
    else {
      unint64_t v63 = 0;
    }
    uint64_t v64 = (void *)v62[4];
    if (v64)
    {
      uint64_t v64 = (void *)*v64;
      if (v63 < (unint64_t)v64)
      {
LABEL_158:
        uint64_t v62 = (void *)*v62;
        if (!v62) {
          goto LABEL_159;
        }
        continue;
      }
    }
    break;
  }
  if (v61) {
    unint64_t v65 = *v61;
  }
  else {
    unint64_t v65 = 0;
  }
  if ((unint64_t)v64 < v65)
  {
    ++v62;
    goto LABEL_158;
  }
  size_t v79 = (unint64_t **)*((void *)v15 + 12);
  if (*((unint64_t ***)v15 + 13) == v79) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v80 = *v79;
  uint64_t v81 = v94;
  while (2)
  {
    if (v80) {
      unint64_t v82 = *v80;
    }
    else {
      unint64_t v82 = 0;
    }
    uint64_t v83 = (void *)v81[4];
    if (v83)
    {
      uint64_t v83 = (void *)*v83;
      if (v82 < (unint64_t)v83)
      {
LABEL_196:
        uint64_t v81 = (void *)*v81;
        if (v81) {
          continue;
        }
        if (!Espresso::zephyr::match_verbose) {
          goto LABEL_167;
        }
        int v59 = Espresso::espresso_os_log_subsystem((Espresso *)v52, v53);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1283;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "external_values.count(beta_read->output())";
          _os_log_impl(&dword_1920CB000, v59, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_166;
      }
    }
    break;
  }
  if (v80) {
    unint64_t v84 = *v80;
  }
  else {
    unint64_t v84 = 0;
  }
  if ((unint64_t)v83 < v84)
  {
    ++v81;
    goto LABEL_196;
  }
  int v54 = 1;
LABEL_130:
  while (2)
  {
    if (v51) {
      unint64_t v56 = *(void *)v51;
    }
    else {
      unint64_t v56 = 0;
    }
    uint64_t v57 = (void *)v55[4];
    if (v57)
    {
      uint64_t v57 = (void *)*v57;
      if (v56 < (unint64_t)v57)
      {
LABEL_140:
        uint64_t v55 = (void *)*v55;
        if (!v55) {
          goto LABEL_141;
        }
        continue;
      }
    }
    break;
  }
  if (v51) {
    unint64_t v58 = *(void *)v51;
  }
  else {
    unint64_t v58 = 0;
  }
  if ((unint64_t)v57 < v58)
  {
    ++v55;
    goto LABEL_140;
  }
  Espresso::zephyr_passes::create_instancenorm_kenel((Espresso::zephyr_passes *)&v91, v90, v15, v38);
  uint64_t v68 = v91;
  BOOL v19 = v91 != 0;
  if (v91)
  {
    uint64_t v69 = Espresso::zephyr::function_t::new_detached_node(v2[3], (uint64_t)(v2 + 18));
    uint64_t v70 = *((void *)v69 + 1);
    uint64_t v71 = v92;
    if (v92) {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v72 = *(std::__shared_weak_count **)(v70 + 16);
    *(void *)(v70 + 8) = v68;
    *(void *)(v70 + 16) = v71;
    if (v72) {
      nitro::nitro_function::nitro_function(v72);
    }
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v69, v87);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v69, (Espresso::zephyr::value_t *)v51);
    uint64_t v75 = Espresso::espresso_os_log_subsystem(v73, v74);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      int v86 = v51 + 32;
      if (v51[55] < 0) {
        int v86 = (void *)*v86;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v86;
      _os_log_debug_impl(&dword_1920CB000, v75, OS_LOG_TYPE_DEBUG, "zephyr_passes::merge_pytorch_layernorm: at %s", buf, 0xCu);
    }

    Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v69, (Espresso::zephyr::node_t *)v2);
    for (uint64_t i = v97; i; uint64_t i = (void *)*i)
    {
      uint64_t v77 = (Espresso::zephyr::node_t *)i[2];
      if (v54)
      {
        if (v77 == v90 || v77 == v15) {
          continue;
        }
      }
      Espresso::zephyr::node_t::remove_from_graphs(v77);
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    uint64_t v85 = Espresso::espresso_os_log_subsystem(v66, v67);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1292;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "instancenorm_kernel";
      _os_log_impl(&dword_1920CB000, v85, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
  }
  if (v92) {
    nitro::nitro_function::nitro_function(v92);
  }
LABEL_168:
  std::__tree<int>::destroy(v94);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v96);
  return v19;
}

void sub_192816DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__tree<int>::destroy(a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes23merge_pytorch_layernormERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t matched = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (!matched) {
    uint64_t matched = Espresso::zephyr::match_simple_eltwise_binop(v3, 0x66u);
  }
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v4);
  if (matched) {
    BOOL v7 = constant == 0;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7;
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E848;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EE37E848;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes23merge_pytorch_layernormERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  __n128 result = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (result) {
    return (void *)(Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v3) != 0);
  }
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E8A0;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EE37E8A0;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B828;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B828;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_19281718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37B930;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      BOOL v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          BOOL v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_1928172BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes28optimize_coreml_conv1d_lreluERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)*a2;
  char v4 = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(*a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v18 = Espresso::espresso_os_log_subsystem(0, v5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v65 = 1024;
        int v66 = 1336;
        __int16 v67 = 2080;
        uint64_t v68 = "act_k";
        _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_85;
    }
    return 0;
  }
  uint64_t v6 = v4;
  BOOL v7 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  char v9 = (float *)v7;
  if (*(_DWORD *)v7 == 2)
  {
    int v17 = 0;
    float v16 = 0.0;
  }
  else
  {
    if (*(_DWORD *)v7 != 4)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v18 = Espresso::espresso_os_log_subsystem(v7, v8);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          __int16 v65 = 1024;
          int v66 = 1339;
          __int16 v67 = 2080;
          uint64_t v68 = "act_params.mode == ACTIVATION_PRELU || act_params.mode == ACTIVATION_LEAKY_RELU";
          _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_85;
      }
      return 0;
    }
    uint64_t v10 = *((void *)v6 + 43);
    char v11 = (std::__shared_weak_count *)*((void *)v6 + 44);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v12 = *(_DWORD *)(v10 + 8);
    if (v12)
    {
      int v13 = 0;
      uint64_t v14 = *(float **)(v10 + 16);
      float v15 = 0.0;
      while (1)
      {
        float v16 = *v14;
        if (v13)
        {
          float v16 = v15;
          if (*v14 != v15) {
            break;
          }
        }
        ++v13;
        float v15 = v16;
        if (v12 == v13)
        {
          if (v11) {
            goto LABEL_12;
          }
          goto LABEL_13;
        }
      }
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v51 = Espresso::espresso_os_log_subsystem(v7, v8);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          __int16 v65 = 1024;
          int v66 = 1350;
          _os_log_impl(&dword_1920CB000, v51, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
        }
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      return 0;
    }
    float v16 = 0.0;
    if (v11) {
LABEL_12:
    }
      nitro::nitro_function::nitro_function(v11);
LABEL_13:
    int v17 = 1;
  }
  BOOL v19 = (Espresso::zephyr::value_t **)v3[12];
  if ((Espresso::zephyr::value_t **)v3[13] == v19) {
    goto LABEL_106;
  }
  uint64_t v20 = v3[15];
  if (v3[16] == v20) {
    goto LABEL_106;
  }
  uint64_t v21 = *v19;
  float v22 = *(Espresso::zephyr::node_t **)(*(void *)v20 + 80);
  uint64_t v23 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>((uint64_t)v22);
  if (!v23)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v18 = Espresso::espresso_os_log_subsystem(0, v24);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v65 = 1024;
        int v66 = 1361;
        __int16 v67 = 2080;
        uint64_t v68 = "squeeze_k";
        _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_85;
    }
    return 0;
  }
  size_t v25 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v23 + 320))(v23);
  uint64_t v27 = v25;
  BOOL v28 = v25[1] == 1 && v25[2] == -2;
  int v29 = v28;
  if (!v28 && *v25 != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v18 = Espresso::espresso_os_log_subsystem((Espresso *)v25, v26);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v65 = 1024;
        int v66 = 1367;
        _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
      }
LABEL_85:

      return 0;
    }
    return 0;
  }
  uint64_t v30 = (Espresso::zephyr::value_t **)*((void *)v22 + 12);
  if (*((Espresso::zephyr::value_t ***)v22 + 13) == v30) {
    goto LABEL_106;
  }
  uint64_t v31 = *v30;
  if (*((void *)*v30 + 8) - *((void *)*v30 + 7) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v18 = Espresso::espresso_os_log_subsystem((Espresso *)v25, v26);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v65 = 1024;
        int v66 = 1370;
        __int16 v67 = 2080;
        uint64_t v68 = "squeeze_out->has_one_use()";
        _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_85;
    }
    return 0;
  }
  int v60 = v29;
  int v59 = v21;
  uint64_t v32 = (Espresso::zephyr::value_t **)*((void *)v22 + 15);
  if (*((Espresso::zephyr::value_t ***)v22 + 16) == v32) {
LABEL_106:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  uint64_t v33 = *v32;
  uint64_t v34 = *((void *)*v32 + 10);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v34))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v18 = Espresso::espresso_os_log_subsystem(0, v35);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v65 = 1024;
        int v66 = 1377;
        __int16 v67 = 2080;
        uint64_t v68 = "conv_k";
        _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_85;
    }
    return 0;
  }
  unint64_t v58 = v33;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v61, v33);
  if (!v61 || (int v38 = *(_DWORD *)(v61 + 20), v38 != 4) && (v38 != -1 || *(_DWORD *)(v61 + 16) != 1))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v47 = Espresso::espresso_os_log_subsystem(v36, v37);
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_INFO)) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      __int16 v65 = 1024;
      int v66 = 1379;
      __int16 v67 = 2080;
      uint64_t v68 = "conv_out_shape_ptr && conv_out_shape_ptr->rank() == 4";
      uint64_t v48 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
LABEL_78:
      uint64_t v49 = v47;
      uint32_t v50 = 28;
      goto LABEL_79;
    }
LABEL_91:
    uint64_t v52 = 0;
    goto LABEL_92;
  }
  uint64_t v39 = *(void *)(v34 + 120);
  if (*(void *)(v34 + 128) == v39) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v40 = Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(*(void *)(*(void *)v39 + 80));
  if (!v40)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v47 = Espresso::espresso_os_log_subsystem(0, v41);
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_INFO)) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      __int16 v65 = 1024;
      int v66 = 1385;
      __int16 v67 = 2080;
      uint64_t v68 = "expand_dims_k";
      uint64_t v48 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
      goto LABEL_78;
    }
    goto LABEL_91;
  }
  uint64_t v42 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v40 + 320))(v40);
  unint64_t v44 = v42;
  BOOL v45 = v42[1] == 1 && v42[2] == -2;
  int v46 = v45;
  if (!v45 && *v42 != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v47 = Espresso::espresso_os_log_subsystem((Espresso *)v42, v43);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        __int16 v65 = 1024;
        int v66 = 1391;
        uint64_t v48 = "ZEPHYR_MATCH_FAIL %s:%d\n";
        uint64_t v49 = v47;
        uint32_t v50 = 18;
LABEL_79:
        _os_log_impl(&dword_1920CB000, v49, OS_LOG_TYPE_INFO, v48, buf, v50);
      }
LABEL_80:
      uint64_t v52 = 0;
LABEL_81:

      goto LABEL_92;
    }
    goto LABEL_91;
  }
  if (v17)
  {
    int v54 = (std::__shared_weak_count *)*((void *)v6 + 44);
    *((void *)v6 + 43) = 0;
    *((void *)v6 + 44) = 0;
    if (v54) {
      nitro::nitro_function::nitro_function(v54);
    }
    *(_DWORD *)char v9 = 2;
    v9[1] = v16;
    v9[2] = 0.0;
  }
  if (v60) {
    *uint64_t v27 = 2;
  }
  if (v46) {
    *unint64_t v44 = 2;
  }
  uint64_t v55 = Espresso::zephyr::function_t::new_value(v3[3], (uint64_t)v31 + 32);
  Espresso::zephyr::node_t::replace_output_at((uint64_t)v3, 0, (Espresso::zephyr::value_t *)v55);
  Espresso::zephyr::node_t::replace_input_with((Espresso::zephyr::node_t *)v3, v31, v58);
  Espresso::zephyr::node_t::remove_from_graphs(v22);
  Espresso::zephyr::node_t::add_input(v22, (Espresso::zephyr::value_t *)v55);
  Espresso::zephyr::node_t::add_output(v22, v59);
  inserted = (Espresso *)Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), v22, (Espresso::zephyr::node_t *)v3);
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v47 = Espresso::espresso_os_log_subsystem(inserted, v57);
    uint64_t v52 = 1;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      __int16 v65 = 1024;
      int v66 = 1431;
      _os_log_impl(&dword_1920CB000, v47, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
    goto LABEL_81;
  }
  uint64_t v52 = 1;
LABEL_92:
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  return v52;
}

void sub_192817C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B930;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B930;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

float *channelnorm1d_training_slice(float *a1, unint64_t a2, unint64_t a3, uint64_t a4, float *a5, uint64_t a6, const float *a7, unint64_t a8, double a9, double a10, double a11, double a12, double a13, unint64_t a14, float *a15, float *a16, BOOL a17, BOOL a18)
{
  uint64_t v20 = a16;
  __asm { FMOV            V1.4S, #1.0 }
  uint64_t v389 = a6;
  if (_ZF && a4)
  {
    uint64_t v369 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    float v28 = 1.0 / (float)a8;
    float v29 = 1.0 / (float)((float)a8 + -1.0);
    int32x2_t v30 = 0;
    if (a18) {
      *(float *)&a13 = 0.0;
    }
    else {
      *(float *)&a13 = *(float *)&a9;
    }
    if (a18) {
      v30.i32[0] = SLODWORD(a9);
    }
    float32x4_t v31 = (float32x4_t)vdupq_lane_s32(v30, 0);
    unint64_t v32 = a8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v33 = a7;
    unint64_t v352 = a14 * a8;
    unint64_t v34 = 16 * a14;
    uint64_t v35 = &a7[2 * a14];
    unint64_t v36 = 4 * a14;
    BOOL v37 = &a7[a14];
    v348 = &a7[3 * a14];
    uint64_t v350 = 4 * a8 * a6;
    uint64_t v38 = 16 * a6;
    uint64_t v39 = &a5[3 * a6];
    uint64_t v40 = &a5[2 * a6];
    uint64_t v41 = 4 * a6;
    float32x4_t v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a13, 0);
    unint64_t v43 = &a5[a6];
    v365 = v39;
    v367 = v40;
    if (!a17) {
      float v29 = 1.0 / (float)a8;
    }
    unint64_t v44 = a5;
    v344 = &a7[2 * a14];
    BOOL v45 = &a7[3 * a14];
    unint64_t v372 = a2;
    do
    {
      uint64_t v359 = v27;
      uint64_t v361 = v26;
      v357 = v37;
      v363 = v35;
      int v46 = v20;
      if (a2 >= 8)
      {
        uint64_t v48 = 0;
        uint64_t v49 = (float32x4_t *)v44;
        uint32_t v50 = v33;
        uint64_t v51 = v37;
        uint64_t v52 = v45;
        uint64_t v53 = 8;
        do
        {
          uint64_t v47 = v53;
          if (a8 >= 4)
          {
            uint64_t v57 = 0;
            float32x4_t v58 = 0uLL;
            float32x4_t v59 = 0uLL;
            unint64_t v60 = 4;
            float32x4_t v61 = 0uLL;
            float32x4_t v62 = 0uLL;
            float32x4_t v63 = 0uLL;
            float32x4_t v64 = 0uLL;
            float32x4_t v65 = 0uLL;
            float32x4_t v66 = 0uLL;
            do
            {
              float32x4_t v59 = vaddq_f32(v59, *(float32x4_t *)((char *)v50 + v57 + 16));
              float32x4_t v58 = vaddq_f32(v58, *(float32x4_t *)((char *)v50 + v57));
              float32x4_t v62 = vaddq_f32(v62, *(float32x4_t *)((char *)v51 + v57 + 16));
              float32x4_t v61 = vaddq_f32(v61, *(float32x4_t *)((char *)v51 + v57));
              float32x4_t v64 = vaddq_f32(v64, *(float32x4_t *)((char *)v35 + v57 + 16));
              float32x4_t v63 = vaddq_f32(v63, *(float32x4_t *)((char *)v35 + v57));
              float32x4_t v66 = vaddq_f32(v66, *(float32x4_t *)((char *)v52 + v57 + 16));
              float32x4_t v65 = vaddq_f32(v65, *(float32x4_t *)((char *)v52 + v57));
              v60 += 4;
              v57 += v34;
            }
            while (v60 <= a8);
            float32x4_t v55 = vaddq_f32(vaddq_f32(v65, v63), vaddq_f32(v61, v58));
            float32x4_t v56 = vaddq_f32(vaddq_f32(v66, v64), vaddq_f32(v62, v59));
            unint64_t v54 = v32;
          }
          else
          {
            unint64_t v54 = 0;
            float32x4_t v55 = 0uLL;
            float32x4_t v56 = 0uLL;
          }
          unint64_t v67 = a8 - v54;
          if (a8 > v54)
          {
            unint64_t v68 = v36 * v54;
            do
            {
              float32x4_t v56 = vaddq_f32(v56, *(float32x4_t *)((char *)v50 + v68 + 16));
              float32x4_t v55 = vaddq_f32(v55, *(float32x4_t *)((char *)v50 + v68));
              v68 += v36;
              --v67;
            }
            while (v67);
          }
          float32x4_t v69 = vmulq_n_f32(v55, v28);
          float32x4_t v70 = vmulq_n_f32(v56, v28);
          if (a8 >= 4)
          {
            uint64_t v72 = 0;
            unint64_t v71 = 0;
            float32x4_t v73 = 0uLL;
            float32x4_t v74 = 0uLL;
            uint64_t v75 = v26;
            float32x4_t v76 = 0uLL;
            float32x4_t v77 = 0uLL;
            float32x4_t v78 = 0uLL;
            float32x4_t v79 = 0uLL;
            float32x4_t v80 = 0uLL;
            float32x4_t v81 = 0uLL;
            do
            {
              float32x4_t v82 = vsubq_f32(*(float32x4_t *)((char *)v50 + v72), v69);
              float32x4_t v83 = vsubq_f32(*(float32x4_t *)((char *)v50 + v72 + 16), v70);
              float32x4_t v84 = vsubq_f32(*(float32x4_t *)((char *)v51 + v72), v69);
              float32x4_t v85 = vsubq_f32(*(float32x4_t *)((char *)v51 + v72 + 16), v70);
              float32x4_t v86 = vsubq_f32(*(float32x4_t *)((char *)v35 + v72), v69);
              float32x4_t v87 = vsubq_f32(*(float32x4_t *)((char *)v35 + v72 + 16), v70);
              float32x4_t v88 = vsubq_f32(*(float32x4_t *)((char *)v52 + v72), v69);
              float32x4_t v89 = vsubq_f32(*(float32x4_t *)((char *)v52 + v72 + 16), v70);
              int v90 = (float32x4_t *)((char *)a5 + v75);
              float32x4_t *v90 = v82;
              v90[1] = v83;
              uint64_t v91 = (float32x4_t *)((char *)v43 + v75);
              float32x4_t *v91 = v84;
              v91[1] = v85;
              int v92 = (float32x4_t *)((char *)v40 + v75);
              *int v92 = v86;
              v92[1] = v87;
              uint64_t v93 = (float32x4_t *)((char *)v39 + v75);
              float32x4_t *v93 = v88;
              v93[1] = v89;
              float32x4_t v74 = vmlaq_f32(v74, v83, v83);
              float32x4_t v73 = vmlaq_f32(v73, v82, v82);
              float32x4_t v77 = vmlaq_f32(v77, v85, v85);
              float32x4_t v76 = vmlaq_f32(v76, v84, v84);
              float32x4_t v81 = vmlaq_f32(v81, v87, v87);
              float32x4_t v80 = vmlaq_f32(v80, v86, v86);
              float32x4_t v79 = vmlaq_f32(v79, v89, v89);
              unint64_t v94 = v71 + 8;
              float32x4_t v78 = vmlaq_f32(v78, v88, v88);
              v71 += 4;
              v75 += v38;
              v72 += v34;
            }
            while (v94 <= a8);
            float32x4_t v18 = vaddq_f32(vaddq_f32(v80, v78), vaddq_f32(v76, v73));
            float32x4_t v19 = vaddq_f32(vaddq_f32(v81, v79), vaddq_f32(v77, v74));
          }
          else
          {
            unint64_t v71 = 0;
            float32x4_t v18 = 0uLL;
            float32x4_t v19 = 0uLL;
          }
          uint64_t v95 = a8 - v71;
          if (a8 > v71)
          {
            uint64_t v96 = (float32x4_t *)&v44[v48 + a6 * v71];
            unint64_t v97 = v36 * v71;
            do
            {
              float32x4_t v98 = vsubq_f32(*(float32x4_t *)((char *)v50 + v97), v69);
              float32x4_t v99 = vsubq_f32(*(float32x4_t *)((char *)v50 + v97 + 16), v70);
              float32x4_t *v96 = v98;
              v96[1] = v99;
              float32x4_t v19 = vmlaq_f32(v19, v99, v99);
              float32x4_t v18 = vmlaq_f32(v18, v98, v98);
              uint64_t v96 = (float32x4_t *)((char *)v96 + v41);
              v97 += v36;
              --v95;
            }
            while (v95);
          }
          if (a8)
          {
            float32x4_t v100 = vdivq_f32(_Q1, vaddq_f32(v42, vsqrtq_f32(vaddq_f32(v31, vmulq_n_f32(v18, v29)))));
            float32x4_t v101 = vdivq_f32(_Q1, vaddq_f32(v42, vsqrtq_f32(vaddq_f32(v31, vmulq_n_f32(v19, v29)))));
            uint64_t v102 = v49;
            uint64_t v103 = a15;
            uint64_t v104 = v46;
            unint64_t v105 = a8;
            do
            {
              float32x4_t v106 = vld1q_dup_f32(v103++);
              float32x4_t v19 = vmulq_f32(v100, *v102);
              float32x4_t v18 = vmulq_f32(v101, v102[1]);
              float32x4_t v107 = vld1q_dup_f32(v104++);
              float32x4_t *v102 = vmlaq_f32(v107, v106, v19);
              v102[1] = vmlaq_f32(v107, v106, v18);
              uint64_t v102 = (float32x4_t *)((char *)v102 + v41);
              --v105;
            }
            while (v105);
          }
          uint64_t v53 = v47 + 8;
          v52 += 8;
          v35 += 8;
          v51 += 8;
          v50 += 8;
          v26 += 32;
          v48 += 8;
          v49 += 2;
        }
        while (v47 + 8 <= a2);
      }
      else
      {
        uint64_t v47 = 0;
      }
      uint64_t v108 = v47 | 4;
      v355 = v45;
      if ((v47 | 4uLL) <= a2)
      {
        uint64_t v110 = 0;
        uint64_t v111 = 4 * v47;
        uint64_t v112 = &v348[v47];
        uint64_t v113 = &v344[v47];
        uint64_t v114 = &a7[a14 + v47];
        uint64_t v115 = &a7[v47];
        v386 = &v365[v47];
        v388 = &v44[v47];
        v382 = &v367[v47];
        v384 = &v45[v47];
        v378 = &v44[a6 + v47];
        v380 = &v363[v47];
        uint64_t v116 = v369;
        v374 = &v33[v47];
        v376 = &v33[a14 + v47];
        do
        {
          unint64_t v109 = v108;
          if (a8 >= 4)
          {
            float32x4_t v119 = 0uLL;
            uint64_t v120 = v116;
            unint64_t v121 = 4;
            float32x4_t v122 = 0uLL;
            float32x4_t v123 = 0uLL;
            float32x4_t v19 = 0uLL;
            do
            {
              float32x4_t v19 = vaddq_f32(v19, *(float32x4_t *)((char *)v115 + v120));
              float32x4_t v123 = vaddq_f32(v123, *(float32x4_t *)((char *)v114 + v120));
              float32x4_t v122 = vaddq_f32(v122, *(float32x4_t *)((char *)v113 + v120));
              float32x4_t v119 = vaddq_f32(v119, *(float32x4_t *)((char *)v112 + v120));
              v121 += 4;
              v120 += v34;
            }
            while (v121 <= a8);
            float32x4_t v18 = vaddq_f32(v19, v123);
            float32x4_t v118 = vaddq_f32(v18, vaddq_f32(v122, v119));
            unint64_t v117 = v32;
          }
          else
          {
            unint64_t v117 = 0;
            float32x4_t v118 = 0uLL;
          }
          unint64_t v124 = a8 - v117;
          if (a8 > v117)
          {
            unint64_t v125 = 4 * (v47 + a14 * v117);
            do
            {
              float32x4_t v118 = vaddq_f32(v118, *(float32x4_t *)((char *)v33 + v125));
              v125 += v36;
              --v124;
            }
            while (v124);
          }
          float32x4_t v126 = vmulq_n_f32(v118, v28);
          if (a8 >= 4)
          {
            uint64_t v390 = v47;
            unint64_t v127 = 0;
            float32x4_t v129 = 0uLL;
            unint64_t v130 = v374;
            uint64_t v131 = v376;
            uint64_t v133 = v378;
            unint64_t v132 = v380;
            v135 = v382;
            BOOL v134 = v384;
            float32x4_t v18 = 0uLL;
            float32x4_t v136 = 0uLL;
            uint64_t v138 = v386;
            v137 = v388;
            float32x4_t v139 = 0uLL;
            do
            {
              float32x4_t v140 = *(float32x4_t *)&v134[v110];
              float32x4_t v141 = vsubq_f32(*(float32x4_t *)&v130[v110], v126);
              float32x4_t v142 = vsubq_f32(*(float32x4_t *)&v131[v110], v126);
              float32x4_t v143 = vsubq_f32(*(float32x4_t *)&v132[v110], v126);
              *(float32x4_t *)&v137[v110] = v141;
              *(float32x4_t *)&v133[v110] = v142;
              *(float32x4_t *)&v135[v110] = v143;
              float32x4_t v144 = vsubq_f32(v140, v126);
              *(float32x4_t *)&v138[v110] = v144;
              float32x4_t v139 = vmlaq_f32(v139, v141, v141);
              float32x4_t v136 = vmlaq_f32(v136, v142, v142);
              float32x4_t v18 = vmlaq_f32(v18, v143, v143);
              unint64_t v145 = v127 + 8;
              v127 += 4;
              v137 = (float *)((char *)v137 + v38);
              uint64_t v138 = (float *)((char *)v138 + v38);
              BOOL v134 = (const float *)((char *)v134 + v34);
              v135 = (float *)((char *)v135 + v38);
              unint64_t v132 = (const float *)((char *)v132 + v34);
              float32x4_t v129 = vmlaq_f32(v129, v144, v144);
              uint64_t v133 = (float *)((char *)v133 + v38);
              uint64_t v131 = (const float *)((char *)v131 + v34);
              unint64_t v130 = (const float *)((char *)v130 + v34);
            }
            while (v145 <= a8);
            float32x4_t v19 = vaddq_f32(v139, v136);
            float32x4_t v128 = vaddq_f32(v19, vaddq_f32(v18, v129));
            int v46 = a16;
            a6 = v389;
            unint64_t v32 = a8 & 0xFFFFFFFFFFFFFFFCLL;
            a2 = v372;
            uint64_t v47 = v390;
          }
          else
          {
            unint64_t v127 = 0;
            float32x4_t v128 = 0uLL;
          }
          uint64_t v146 = a8 - v127;
          if (a8 > v127)
          {
            uint64_t v147 = 4 * (v47 + a6 * v127);
            unint64_t v148 = 4 * (v47 + a14 * v127);
            do
            {
              float32x4_t v18 = vsubq_f32(*(float32x4_t *)((char *)v33 + v148), v126);
              *(float32x4_t *)((char *)v44 + v147) = v18;
              float32x4_t v128 = vmlaq_f32(v128, v18, v18);
              v147 += v41;
              v148 += v36;
              --v146;
            }
            while (v146);
          }
          if (a8)
          {
            float32x4_t v149 = vdivq_f32(_Q1, vaddq_f32(v42, vsqrtq_f32(vaddq_f32(v31, vmulq_n_f32(v128, v29)))));
            uint64_t v150 = v111;
            uint64_t v151 = a15;
            v152 = v46;
            unint64_t v153 = a8;
            do
            {
              float v154 = *v151++;
              float v155 = v154;
              __int32 v156 = *(_DWORD *)v152++;
              v19.i32[0] = v156;
              float32x4_t v19 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0), vmulq_f32(v149, *(float32x4_t *)((char *)v44 + v150)), v155);
              *(float32x4_t *)((char *)v44 + v150) = v19;
              v150 += v41;
              --v153;
            }
            while (v153);
          }
          uint64_t v108 = v109 + 4;
          v116 += 16;
          v47 += 4;
          v110 += 4;
          v111 += 16;
        }
        while (v109 + 4 <= a2);
      }
      else
      {
        unint64_t v109 = v47;
      }
      uint64_t v20 = v46;
      if (v109 < a2)
      {
        uint64_t v157 = v109;
        do
        {
          if (a8)
          {
            float v158 = 0.0;
            uint64_t v159 = v157 * 4;
            unint64_t v160 = a8;
            do
            {
              float v158 = v158 + *(const float *)((char *)v33 + v159);
              v159 += v36;
              --v160;
            }
            while (v160);
            float v161 = v28 * v158;
            float v162 = 0.0;
            uint64_t v163 = v33;
            v164 = v44;
            unint64_t v165 = a8;
            do
            {
              float v166 = v163[v157] - v161;
              v164[v157] = v166;
              float v162 = v162 + (float)(v166 * v166);
              v164 = (float *)((char *)v164 + v41);
              uint64_t v163 = (const float *)((char *)v163 + v36);
              --v165;
            }
            while (v165);
            float v167 = 1.0 / (float)(*(float *)&a13 + sqrtf(*(float *)v30.i32 + (float)(v29 * v162)));
            uint64_t v168 = v44;
            uint64_t v169 = a15;
            uint64_t v170 = v46;
            unint64_t v171 = a8;
            do
            {
              float v172 = *v169++;
              float v173 = v172;
              float v174 = *v170++;
              v168[v157] = v174 + (float)((float)(v167 * v168[v157]) * v173);
              uint64_t v168 = (float *)((char *)v168 + v41);
              --v171;
            }
            while (v171);
          }
          ++v109;
          ++v157;
        }
        while (v109 != a2);
      }
      uint64_t v27 = v359 + 1;
      BOOL v45 = &v355[v352];
      uint64_t v35 = &v363[v352];
      BOOL v37 = &v357[v352];
      uint64_t v33 = (const float *)((char *)v33 + v352 * 4);
      uint64_t v26 = v361 + v350;
      unint64_t v44 = (float *)((char *)v44 + v350);
      v369 += v352 * 4;
      v365 = (float *)((char *)v365 + v350);
      v367 = (float *)((char *)v367 + v350);
    }
    while (v359 + 1 != a4);
  }
  unint64_t v175 = a14 - a2;
  if (a3 <= a14) {
    unint64_t v176 = a14 - a2;
  }
  else {
    unint64_t v176 = a3;
  }
  __n128 result = a1;
  if (a1 && a4)
  {
    uint64_t v178 = 0;
    uint64_t v179 = 0;
    uint64_t v180 = 0;
    v181 = &a5[a2];
    v182 = &a7[a2];
    float v183 = 1.0 / (float)a8;
    float v184 = 1.0 / (float)((float)a8 + -1.0);
    unint64_t v349 = 4 * a14 * a8;
    unint64_t v185 = 16 * a14;
    if (a18) {
      *(float *)&a13 = 0.0;
    }
    else {
      *(float *)&a13 = *(float *)&a9;
    }
    if (!a18) {
      *(float *)&a9 = 0.0;
    }
    float32x4_t v186 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
    v187 = &a7[3 * a14 + a2];
    v188 = &a7[2 * a14 + a2];
    unint64_t v189 = 4 * a14;
    uint64_t v190 = 16 * a6;
    v191 = &a5[3 * a6 + a2];
    v192 = &a5[2 * a6 + a2];
    uint64_t v193 = 4 * a6;
    v194 = &a7[a14 + a2];
    uint64_t v195 = 4 * a6 + 4 * a2;
    v196 = &a5[a2];
    v197 = (char *)a5 + v195;
    float32x4_t v198 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a13, 0);
    uint64_t v345 = 4 * v176 * a8;
    uint64_t v347 = 4 * a8 * a6;
    uint64_t v199 = 4 * a3;
    v362 = v191;
    v364 = v192;
    if (!a17) {
      float v184 = 1.0 / (float)a8;
    }
    v341 = v187;
    v343 = v182;
    v340 = v188;
    v200 = v188;
    v366 = v187;
    v368 = v181;
    v391 = v197;
    unint64_t v370 = v175;
    do
    {
      v358 = v200;
      uint64_t v360 = v178;
      uint64_t v356 = v179;
      v351 = v194;
      uint64_t v353 = v180;
      if (v175 >= 8)
      {
        uint64_t v202 = 0;
        v203 = (float32x4_t *)v181;
        v204 = result;
        v205 = v182;
        v206 = v366;
        uint64_t v207 = 8;
        do
        {
          uint64_t v201 = v207;
          if (a8 >= 4)
          {
            uint64_t v211 = 0;
            float32x4_t v212 = 0uLL;
            float32x4_t v213 = 0uLL;
            unint64_t v214 = 4;
            float32x4_t v215 = 0uLL;
            float32x4_t v216 = 0uLL;
            float32x4_t v217 = 0uLL;
            float32x4_t v218 = 0uLL;
            float32x4_t v219 = 0uLL;
            float32x4_t v220 = 0uLL;
            do
            {
              float32x4_t v213 = vaddq_f32(v213, *(float32x4_t *)((char *)v205 + v211 + 16));
              float32x4_t v212 = vaddq_f32(v212, *(float32x4_t *)((char *)v205 + v211));
              float32x4_t v216 = vaddq_f32(v216, *(float32x4_t *)((char *)v194 + v211 + 16));
              float32x4_t v215 = vaddq_f32(v215, *(float32x4_t *)((char *)v194 + v211));
              float32x4_t v218 = vaddq_f32(v218, *(float32x4_t *)((char *)v200 + v211 + 16));
              float32x4_t v217 = vaddq_f32(v217, *(float32x4_t *)((char *)v200 + v211));
              float32x4_t v220 = vaddq_f32(v220, *(float32x4_t *)((char *)v206 + v211 + 16));
              float32x4_t v219 = vaddq_f32(v219, *(float32x4_t *)((char *)v206 + v211));
              v214 += 4;
              v211 += v185;
            }
            while (v214 <= a8);
            float32x4_t v209 = vaddq_f32(vaddq_f32(v219, v217), vaddq_f32(v215, v212));
            float32x4_t v210 = vaddq_f32(vaddq_f32(v220, v218), vaddq_f32(v216, v213));
            unint64_t v208 = a8 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            unint64_t v208 = 0;
            float32x4_t v209 = 0uLL;
            float32x4_t v210 = 0uLL;
          }
          unint64_t v221 = a8 - v208;
          if (a8 > v208)
          {
            unint64_t v222 = v189 * v208;
            do
            {
              float32x4_t v210 = vaddq_f32(v210, *(float32x4_t *)((char *)v205 + v222 + 16));
              float32x4_t v209 = vaddq_f32(v209, *(float32x4_t *)((char *)v205 + v222));
              v222 += v189;
              --v221;
            }
            while (v221);
          }
          float32x4_t v223 = vmulq_n_f32(v209, v183);
          float32x4_t v224 = vmulq_n_f32(v210, v183);
          if (a8 >= 4)
          {
            uint64_t v227 = 0;
            unint64_t v225 = 0;
            float32x4_t v228 = 0uLL;
            float32x4_t v229 = 0uLL;
            uint64_t v230 = v179;
            float32x4_t v231 = 0uLL;
            float32x4_t v232 = 0uLL;
            float32x4_t v233 = 0uLL;
            float32x4_t v234 = 0uLL;
            float32x4_t v235 = 0uLL;
            float32x4_t v236 = 0uLL;
            do
            {
              float32x4_t v237 = vsubq_f32(*(float32x4_t *)((char *)v205 + v227), v223);
              float32x4_t v238 = vsubq_f32(*(float32x4_t *)((char *)v205 + v227 + 16), v224);
              float32x4_t v239 = vsubq_f32(*(float32x4_t *)((char *)v194 + v227), v223);
              float32x4_t v240 = vsubq_f32(*(float32x4_t *)((char *)v194 + v227 + 16), v224);
              float32x4_t v241 = vsubq_f32(*(float32x4_t *)((char *)v200 + v227), v223);
              float32x4_t v242 = vsubq_f32(*(float32x4_t *)((char *)v200 + v227 + 16), v224);
              float32x4_t v243 = vsubq_f32(*(float32x4_t *)((char *)v206 + v227), v223);
              float32x4_t v244 = vsubq_f32(*(float32x4_t *)((char *)v206 + v227 + 16), v224);
              v245 = (float32x4_t *)((char *)v196 + v230);
              float32x4_t *v245 = v237;
              v245[1] = v238;
              v246 = (float32x4_t *)&v197[v230];
              float32x4_t *v246 = v239;
              v246[1] = v240;
              v247 = (float32x4_t *)((char *)v192 + v230);
              float32x4_t *v247 = v241;
              v247[1] = v242;
              v248 = (float32x4_t *)((char *)v191 + v230);
              float32x4_t *v248 = v243;
              v248[1] = v244;
              float32x4_t v229 = vmlaq_f32(v229, v238, v238);
              float32x4_t v228 = vmlaq_f32(v228, v237, v237);
              float32x4_t v232 = vmlaq_f32(v232, v240, v240);
              float32x4_t v231 = vmlaq_f32(v231, v239, v239);
              float32x4_t v236 = vmlaq_f32(v236, v242, v242);
              float32x4_t v235 = vmlaq_f32(v235, v241, v241);
              float32x4_t v234 = vmlaq_f32(v234, v244, v244);
              unint64_t v249 = v225 + 8;
              float32x4_t v233 = vmlaq_f32(v233, v243, v243);
              v225 += 4;
              v230 += v190;
              v227 += v185;
            }
            while (v249 <= a8);
            float32x4_t v226 = vaddq_f32(vaddq_f32(v235, v233), vaddq_f32(v231, v228));
            float32x4_t v18 = vaddq_f32(vaddq_f32(v236, v234), vaddq_f32(v232, v229));
          }
          else
          {
            unint64_t v225 = 0;
            float32x4_t v226 = 0uLL;
            float32x4_t v18 = 0uLL;
          }
          uint64_t v250 = a8 - v225;
          if (a8 > v225)
          {
            v251 = (float32x4_t *)&v181[v202 + a6 * v225];
            unint64_t v252 = v189 * v225;
            do
            {
              float32x4_t v253 = vsubq_f32(*(float32x4_t *)((char *)v205 + v252), v223);
              float32x4_t v254 = vsubq_f32(*(float32x4_t *)((char *)v205 + v252 + 16), v224);
              float32x4_t *v251 = v253;
              v251[1] = v254;
              float32x4_t v18 = vmlaq_f32(v18, v254, v254);
              float32x4_t v226 = vmlaq_f32(v226, v253, v253);
              v251 = (float32x4_t *)((char *)v251 + v193);
              v252 += v189;
              --v250;
            }
            while (v250);
          }
          if (a8)
          {
            float32x4_t v255 = vdivq_f32(_Q1, vaddq_f32(v198, vsqrtq_f32(vaddq_f32(v186, vmulq_n_f32(v226, v184)))));
            v256 = v203;
            float32x4_t v257 = vdivq_f32(_Q1, vaddq_f32(v198, vsqrtq_f32(vaddq_f32(v186, vmulq_n_f32(v18, v184)))));
            v258 = a15;
            v259 = v20;
            v260 = (float32x4_t *)v204;
            unint64_t v261 = a8;
            do
            {
              float32x4_t v262 = vld1q_dup_f32(v258++);
              float32x4_t v263 = vld1q_dup_f32(v259++);
              float32x4_t v18 = vmulq_f32(v255, *v256);
              float32x4_t v264 = vmlaq_f32(v263, v262, vmulq_f32(v257, v256[1]));
              float32x4_t v265 = vmlaq_f32(v263, v262, v18);
              float32x4_t *v256 = v265;
              v256[1] = v264;
              float32x4_t *v260 = v265;
              v260[1] = v264;
              v260 = (float32x4_t *)((char *)v260 + v199);
              v256 = (float32x4_t *)((char *)v256 + v193);
              --v261;
            }
            while (v261);
          }
          uint64_t v207 = v201 + 8;
          v206 += 8;
          v200 += 8;
          v194 += 8;
          v205 += 8;
          v179 += 32;
          v202 += 8;
          v204 += 8;
          v203 += 2;
          v197 = v391;
        }
        while (v201 + 8 <= v175);
      }
      else
      {
        uint64_t v201 = 0;
      }
      uint64_t v266 = v201 | 4;
      uint64_t v267 = v201;
      if ((v201 | 4uLL) <= v175)
      {
        uint64_t v269 = 0;
        uint64_t v270 = 4 * v201;
        v271 = &v341[v201];
        v272 = &v340[v201];
        v273 = &v343[a14 + v201];
        v274 = &v343[v201];
        v385 = &v181[v201];
        uint64_t v275 = v360;
        v383 = &v362[v267];
        v381 = &v366[v267];
        v379 = &v364[v267];
        v377 = &v358[v267];
        v373 = &v182[a14 + v267];
        v375 = &v181[a6 + v267];
        v371 = &v182[v267];
        do
        {
          unint64_t v268 = v266;
          if (a8 >= 4)
          {
            float32x4_t v278 = 0uLL;
            uint64_t v279 = v275;
            unint64_t v280 = 4;
            float32x4_t v281 = 0uLL;
            float32x4_t v282 = 0uLL;
            float32x4_t v18 = 0uLL;
            do
            {
              float32x4_t v18 = vaddq_f32(v18, *(float32x4_t *)((char *)v274 + v279));
              float32x4_t v282 = vaddq_f32(v282, *(float32x4_t *)((char *)v273 + v279));
              float32x4_t v281 = vaddq_f32(v281, *(float32x4_t *)((char *)v272 + v279));
              float32x4_t v278 = vaddq_f32(v278, *(float32x4_t *)((char *)v271 + v279));
              v280 += 4;
              v279 += v185;
            }
            while (v280 <= a8);
            float32x4_t v277 = vaddq_f32(vaddq_f32(v18, v282), vaddq_f32(v281, v278));
            unint64_t v276 = a8 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            unint64_t v276 = 0;
            float32x4_t v277 = 0uLL;
          }
          unint64_t v283 = a8 - v276;
          if (a8 > v276)
          {
            unint64_t v284 = 4 * (v267 + a14 * v276);
            do
            {
              float32x4_t v277 = vaddq_f32(v277, *(float32x4_t *)((char *)v182 + v284));
              v284 += v189;
              --v283;
            }
            while (v283);
          }
          float32x4_t v285 = vmulq_n_f32(v277, v183);
          if (a8 >= 4)
          {
            uint64_t v387 = v267;
            unint64_t v286 = 0;
            float32x4_t v288 = 0uLL;
            v289 = v371;
            v290 = v373;
            v292 = v375;
            v291 = v377;
            v293 = v379;
            v294 = v381;
            float32x4_t v295 = 0uLL;
            float32x4_t v296 = 0uLL;
            v297 = v383;
            v298 = v385;
            float32x4_t v299 = 0uLL;
            do
            {
              float32x4_t v300 = *(float32x4_t *)&v294[v269];
              float32x4_t v301 = vsubq_f32(*(float32x4_t *)&v289[v269], v285);
              float32x4_t v302 = vsubq_f32(*(float32x4_t *)&v290[v269], v285);
              float32x4_t v303 = vsubq_f32(*(float32x4_t *)&v291[v269], v285);
              *(float32x4_t *)&v298[v269] = v301;
              *(float32x4_t *)&v292[v269] = v302;
              *(float32x4_t *)&v293[v269] = v303;
              float32x4_t v304 = vsubq_f32(v300, v285);
              *(float32x4_t *)&v297[v269] = v304;
              float32x4_t v299 = vmlaq_f32(v299, v301, v301);
              float32x4_t v296 = vmlaq_f32(v296, v302, v302);
              float32x4_t v295 = vmlaq_f32(v295, v303, v303);
              unint64_t v305 = v286 + 8;
              v286 += 4;
              v298 = (float *)((char *)v298 + v190);
              v297 = (float *)((char *)v297 + v190);
              v294 = (const float *)((char *)v294 + v185);
              v293 = (float *)((char *)v293 + v190);
              v291 = (const float *)((char *)v291 + v185);
              float32x4_t v288 = vmlaq_f32(v288, v304, v304);
              v292 = (float *)((char *)v292 + v190);
              v290 = (const float *)((char *)v290 + v185);
              v289 = (const float *)((char *)v289 + v185);
            }
            while (v305 <= a8);
            float32x4_t v18 = vaddq_f32(v299, v296);
            float32x4_t v287 = vaddq_f32(v18, vaddq_f32(v295, v288));
            uint64_t v20 = a16;
            a6 = v389;
            v196 = v368;
            unint64_t v175 = v370;
            uint64_t v267 = v387;
          }
          else
          {
            unint64_t v286 = 0;
            float32x4_t v287 = 0uLL;
          }
          uint64_t v306 = a8 - v286;
          if (a8 > v286)
          {
            uint64_t v307 = 4 * (v267 + a6 * v286);
            unint64_t v308 = 4 * (v267 + a14 * v286);
            do
            {
              float32x4_t v309 = vsubq_f32(*(float32x4_t *)((char *)v182 + v308), v285);
              *(float32x4_t *)((char *)v181 + v307) = v309;
              float32x4_t v287 = vmlaq_f32(v287, v309, v309);
              v307 += v193;
              v308 += v189;
              --v306;
            }
            while (v306);
          }
          if (a8)
          {
            uint64_t v310 = v270;
            float32x4_t v311 = vdivq_f32(_Q1, vaddq_f32(v198, vsqrtq_f32(vaddq_f32(v186, vmulq_n_f32(v287, v184)))));
            v312 = a15;
            v313 = v20;
            uint64_t v314 = v270;
            unint64_t v315 = a8;
            do
            {
              float v316 = *v312++;
              float v317 = v316;
              __int32 v318 = *(_DWORD *)v313++;
              v18.i32[0] = v318;
              float32x4_t v18 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0), vmulq_f32(v311, *(float32x4_t *)((char *)v181 + v310)), v317);
              *(float32x4_t *)((char *)v181 + v310) = v18;
              *(float32x4_t *)((char *)result + v314) = v18;
              v314 += v199;
              v310 += v193;
              --v315;
            }
            while (v315);
          }
          uint64_t v266 = v268 + 4;
          v275 += 16;
          v267 += 4;
          v269 += 4;
          v270 += 16;
        }
        while (v268 + 4 <= v175);
      }
      else
      {
        unint64_t v268 = v201;
      }
      if (v268 < v175)
      {
        uint64_t v319 = 4 * v268;
        do
        {
          if (a8)
          {
            float v320 = 0.0;
            uint64_t v321 = v319;
            unint64_t v322 = a8;
            do
            {
              float v320 = v320 + *(const float *)((char *)v182 + v321);
              v321 += v189;
              --v322;
            }
            while (v322);
            float v323 = v183 * v320;
            float v324 = 0.0;
            uint64_t v325 = v319;
            uint64_t v326 = v319;
            unint64_t v327 = a8;
            do
            {
              float v328 = *(const float *)((char *)v182 + v325) - v323;
              *(float *)((char *)v181 + v326) = v328;
              float v324 = v324 + (float)(v328 * v328);
              v326 += v193;
              v325 += v189;
              --v327;
            }
            while (v327);
            uint64_t v329 = v319;
            float v330 = 1.0 / (float)(*(float *)&a13 + sqrtf(*(float *)&a9 + (float)(v184 * v324)));
            v331 = a15;
            v332 = v20;
            uint64_t v333 = v319;
            unint64_t v334 = a8;
            do
            {
              float v335 = *v331++;
              float v336 = v335;
              float v337 = *v332++;
              float v338 = v337 + (float)((float)(v330 * *(float *)((char *)v181 + v329)) * v336);
              *(float *)((char *)v181 + v329) = v338;
              *(float *)((char *)result + v333) = v338;
              v333 += v199;
              v329 += v193;
              --v334;
            }
            while (v334);
          }
          ++v268;
          v319 += 4;
        }
        while (v268 != v175);
      }
      uint64_t v180 = v353 + 1;
      v366 = (const float *)((char *)v366 + v349);
      v200 = &v358[v349 / 4];
      v194 = &v351[v349 / 4];
      v182 = (const float *)((char *)v182 + v349);
      uint64_t v179 = v356 + v347;
      v181 = (float *)((char *)v181 + v347);
      __n128 result = (float *)((char *)result + v345);
      uint64_t v178 = v360 + v349;
      v362 = (float *)((char *)v362 + v347);
      v364 = (float *)((char *)v364 + v347);
      v197 = v391;
    }
    while (v353 + 1 != a4);
  }
  return result;
}

uint64_t Espresso::MPSGraphEngine::Kernels::split_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) - *(void *)a3 != 64)
  {
    BOOL v7 = a2[1];
    v27[0] = *a2;
    v27[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "[Dispatch::MPSGraph::split_kernel] unsupported: layer supports 1 input only");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v21, a3, 0);
    Espresso::emit_kernel_validation_warning(v27, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    v17[0] = v25;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
    v17[0] = v24;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    goto LABEL_36;
  }
  if (*(_DWORD *)(a1 + 284) != 2)
  {
    BOOL v7 = a2[1];
    v20[0] = *a2;
    v20[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "[Dispatch::MPSGraph::split_kernel] unsupported: axis must be 2");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v21, a3, 0);
    Espresso::emit_kernel_validation_warning(v20, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    v17[0] = v25;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
    v17[0] = v24;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22) < 0)
    {
      uint64_t v8 = v21[0];
      goto LABEL_40;
    }
LABEL_36:
    if (!v7) {
      return 0;
    }
LABEL_37:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v7);
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v21, *(const Espresso::layer_shape **)a3, 0);
  if (v22 <= 3)
  {
    uint64_t v6 = *a2;
    BOOL v7 = a2[1];
    v19[0] = v6;
    v19[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "[Dispatch::MPSGraph::split_kernel] unsupported: input rank < 4");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v17, a3, 0);
    Espresso::emit_kernel_validation_warning(v19, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_31:
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    float v28 = (void **)v25;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v28);
    float v28 = (void **)v24;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_35:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    uint64_t v8 = v17[0];
LABEL_40:
    operator delete(v8);
    if (!v7) {
      return 0;
    }
    goto LABEL_37;
  }
  uint64_t v9 = *(int *)(a1 + 280);
  if (v9 != (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6)
  {
    char v11 = *a2;
    BOOL v7 = a2[1];
    v16[0] = v11;
    v16[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "[Dispatch::MPSGraph::split_kernel] top blobs size does not match n_outputs for split layer");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v17, a3, 0);
    Espresso::emit_kernel_validation_warning(v16, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 288))
  {
    uint64_t v10 = *a2;
    BOOL v7 = a2[1];
    v15[0] = v10;
    v15[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "[Dispatch::MPSGraph::split_kernel] unsupported: nd_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v17, a3, 0);
    Espresso::emit_kernel_validation_warning(v15, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_31;
  }
  if ((int)v9 <= 1)
  {
    int v13 = *a2;
    BOOL v7 = a2[1];
    v14[0] = v13;
    v14[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "[Dispatch::MPSGraph::split_kernel] split must produce more than one output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v17, a3, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_35;
  }
  return 1;
}

void sub_192819040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a32);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::split_kernel::~split_kernel(Espresso::MPSGraphEngine::Kernels::split_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::DTypeConverter::DTypeConversionSpec>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::DTypeConverter::DTypeConversionSpec>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void Espresso::DTypeConverter::~DTypeConverter(Espresso::DTypeConverter *this)
{
}

BOOL Espresso::DTypeConverter::NeedsConversion(void *a1, unsigned __int8 *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  char v4 = (void *)*a1;
  if (v4 + 48 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a1 + 376, a2))
  {
    if (v4 + 30 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v4 + 29), a2)&& (uint64_t v5 = (Espresso *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v4 + 32), a2), v4 + 33 == (void *)v5))
    {
      int v12 = Espresso::espresso_os_log_subsystem(v5, v6);
      BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      if ((a2[23] & 0x80u) == 0) {
        int v13 = (uint64_t *)a2;
      }
      else {
        int v13 = *(uint64_t **)a2;
      }
      int v14 = 136315138;
      float v15 = v13;
      _os_log_error_impl(&dword_1920CB000, v12, OS_LOG_TYPE_ERROR, "Ignoring invalid io_bind_info specification for blob \"%s\" that is neither a network input nor an output", (uint8_t *)&v14, 0xCu);
    }
    else
    {
      BOOL v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v4 + 17, a2);
      if (!v7) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v8 = *((void *)v7 + 5);
      uint64_t v9 = std::map<std::string,Espresso::blob_numerical_properties>::at(*a1 + 376, a2);
      if (*(_DWORD *)(v8 + 120) != *(_DWORD *)(v9 + 8) || *(_DWORD *)(v8 + 124) != *(_DWORD *)(v9 + 12)) {
        return std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a1 + 2, a2) == 0;
      }
    }
  }
  return 0;
}

void Espresso::DTypeConverter::GetConversionSpec(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(*(void *)a2 + 136), (unsigned __int8 *)a3);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = *((void *)v8 + 5);
  uint64_t v10 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(void *)a2 + 376, (void *)a3);
  if (*(_DWORD *)(v9 + 124) != *(_DWORD *)(v10 + 12)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Interleave factors do not match. Conversion not supported");
  }
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v9 + 120);
  if (*(char *)(a3 + 23) >= 0) {
    size_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v13 = *(void *)(a3 + 8);
  }
  int v14 = &v27;
  std::string::basic_string[abi:ne180100]((uint64_t)&v27, v13 + 1);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if (*(char *)(a3 + 23) >= 0) {
      float v15 = (const void *)a3;
    }
    else {
      float v15 = *(const void **)a3;
    }
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 64;
  Espresso::compute_path_to_string(v12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v18 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)float v28 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 52) = 1065353216;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 56) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_DWORD *)(a1 + 48) = a4 ^ 1;
  if (a4) {
    uint64_t v20 = (const std::string *)a3;
  }
  else {
    uint64_t v20 = (const std::string *)v28;
  }
  *(void *)(a1 + 68) = 0xFFFFFFFF00000000;
  std::string::operator=((std::string *)a1, v20);
  if (a4) {
    uint64_t v21 = (const std::string *)v28;
  }
  else {
    uint64_t v21 = (const std::string *)a3;
  }
  std::string::operator=((std::string *)(a1 + 24), v21);
  uint64_t v22 = v9 + 112;
  if (a4) {
    uint64_t v23 = v11;
  }
  else {
    uint64_t v23 = v9 + 112;
  }
  uint64_t v24 = *(void *)v23;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v23 + 8);
  *(void *)(a1 + 52) = v24;
  if (!a4) {
    uint64_t v22 = v11;
  }
  uint64_t v25 = *(void *)v22;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v22 + 8);
  *(void *)(a1 + 64) = v25;
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
}

void sub_19281956C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  float v15 = (void *)(a1 + 16);
  uint64_t v16 = (char *)operator new(0x78uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  int v17 = (std::string *)(v16 + 16);
  char v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 23) = 1065353216;
  *((_DWORD *)v16 + 25) = -1;
  *((_DWORD *)v16 + 26) = 1065353216;
  *((_DWORD *)v16 + 28) = -1;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          std::string v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          std::string::size_type v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            uint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *std::string::size_type v29 = *v35;
                  *uint64_t v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  uint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                std::string::size_type v29 = v35;
                uint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  BOOL v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *BOOL v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    BOOL v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_192819A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::DTypeConverter::DTypeConversionSpec>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

Espresso::DTypeConverter *Espresso::DTypeConverter::DTypeConverter(Espresso::DTypeConverter *this, Espresso::net *a2)
{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  unint64_t v3 = (char *)this + 16;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  uint64_t v4 = *((void *)a2 + 5) - *((void *)a2 + 4);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = v4 >> 4;
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    do
    {
      uint64_t v8 = *(void *)this;
      unint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)(*(void *)this + 56), v5);
      if (!v9) {
        goto LABEL_29;
      }
      uint8x8_t v10 = (long long *)v9[3];
      unint64_t v11 = (long long *)v9[4];
      if (v10 != v11)
      {
        do
        {
          if (Espresso::DTypeConverter::NeedsConversion(this, (unsigned __int8 *)v10))
          {
            Espresso::DTypeConverter::GetConversionSpec((uint64_t)__p, (uint64_t)this, (uint64_t)v10, 1);
            std::string::size_type v29 = v10;
            int v12 = std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)v10, &v29);
            size_t v13 = (void **)(v12 + 40);
            if ((char)v12[63] < 0) {
              operator delete(*v13);
            }
            char v14 = 0;
            *((void *)v12 + 7) = v25;
            *(_OWORD *)size_t v13 = *(_OWORD *)__p;
            HIBYTE(v25) = 0;
            LOBYTE(__p[0]) = 0;
            float v15 = (void **)(v12 + 64);
            if ((char)v12[87] < 0)
            {
              operator delete(*v15);
              char v14 = HIBYTE(v25);
            }
            *(_OWORD *)float v15 = v26;
            *((void *)v12 + 10) = v27;
            HIBYTE(v27) = 0;
            LOBYTE(v26) = 0;
            *(_OWORD *)(v12 + 88) = v28[0];
            *(_OWORD *)(v12 + 100) = *(_OWORD *)((char *)v28 + 12);
            if (v14 < 0) {
              operator delete(__p[0]);
            }
          }
          uint8x8_t v10 = (long long *)((char *)v10 + 24);
        }
        while (v10 != v11);
        uint64_t v8 = *(void *)this;
      }
      uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)(v8 + 96), v5);
      if (!v16) {
LABEL_29:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      int v17 = (long long *)v16[3];
      char v18 = (long long *)v16[4];
      while (v17 != v18)
      {
        if (Espresso::DTypeConverter::NeedsConversion(this, (unsigned __int8 *)v17))
        {
          Espresso::DTypeConverter::GetConversionSpec((uint64_t)__p, (uint64_t)this, (uint64_t)v17, 0);
          std::string::size_type v29 = v17;
          long long v19 = std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)v17, &v29);
          float v20 = (void **)(v19 + 40);
          if ((char)v19[63] < 0) {
            operator delete(*v20);
          }
          char v21 = 0;
          *((void *)v19 + 7) = v25;
          *(_OWORD *)float v20 = *(_OWORD *)__p;
          HIBYTE(v25) = 0;
          LOBYTE(__p[0]) = 0;
          BOOL v22 = (void **)(v19 + 64);
          if ((char)v19[87] < 0)
          {
            operator delete(*v22);
            char v21 = HIBYTE(v25);
          }
          *(_OWORD *)BOOL v22 = v26;
          *((void *)v19 + 10) = v27;
          HIBYTE(v27) = 0;
          LOBYTE(v26) = 0;
          *(_OWORD *)(v19 + 88) = v28[0];
          *(_OWORD *)(v19 + 100) = *(_OWORD *)((char *)v28 + 12);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
        int v17 = (long long *)((char *)v17 + 24);
      }
      ++v5;
    }
    while (v5 != v7);
  }
  return this;
}

void sub_192819D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

void Espresso::DTypeConverter::PrepareNetworkForConversion(Espresso::DTypeConverter *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v38 = *(void *)(*(void *)this + 32);
  uint64_t v39 = *(void *)(*(void *)this + 40);
  unint64_t v3 = (uint64_t *)*((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = (void *)(v2 + 136);
    unint64_t v5 = (uint64_t **)(v2 + 352);
    unint64_t v6 = (uint64_t **)(v2 + 184);
    uint64_t v40 = (char *)(v2 + 192);
    uint64_t v7 = (char *)(v2 + 360);
    do
    {
      uint64_t v8 = v3 + 2;
      unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v4, (unsigned __int8 *)v3 + 16);
      uint8x8_t v10 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v6, v3 + 2);
      if (!v9 || (unint64_t v11 = v10, v40 == v10))
      {
        if (*((char *)v3 + 39) < 0) {
          uint64_t v8 = (uint64_t *)*v8;
        }
        v42[0] = v8;
        BOOL v37 = "Blob container or shapes not found for %s";
LABEL_49:
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v37, v42);
      }
      int v12 = v3 + 5;
      uint64_t v13 = 5;
      if (!*((_DWORD *)v3 + 22))
      {
        uint64_t v13 = 8;
        int v12 = v3 + 8;
      }
      if (*((char *)v12 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v41, (const std::string::value_type *)v3[v13], v12[1]);
      }
      else {
        std::string v41 = *(std::string *)v12;
      }
      v42[0] = (uint64_t *)&v41;
      char v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v4, (unsigned __int8 *)&v41, (long long **)v42);
      uint64_t v16 = *((void *)v9 + 5);
      uint64_t v15 = *((void *)v9 + 6);
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      int v17 = (std::__shared_weak_count *)*((void *)v14 + 6);
      *((void *)v14 + 5) = v16;
      *((void *)v14 + 6) = v15;
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::remove((uint64_t)v42, v4, v9);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
      v42[0] = (uint64_t *)&v41;
      char v18 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, &v41, (long long **)v42);
      long long v19 = *(_OWORD *)(v11 + 56);
      long long v20 = *(_OWORD *)(v11 + 72);
      *((void *)v18 + 11) = *((void *)v11 + 11);
      *(_OWORD *)(v18 + 72) = v20;
      *(_OWORD *)(v18 + 56) = v19;
      if (v18 != v11) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18 + 96, *((char **)v11 + 12), *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - *((void *)v11 + 12)) >> 2);
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(v6, (uint64_t *)v11);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(v11 + 32));
      operator delete(v11);
      uint64_t v21 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v5, v3 + 2);
      if (v7 == v21)
      {
        v42[0] = (uint64_t *)&v41;
        unint64_t v24 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, &v41, (uint64_t)&std::piecewise_construct, (long long **)v42);
        uint64_t v25 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(void *)this + 376, v3 + 2);
        *(_OWORD *)(v24 + 56) = *(_OWORD *)v25;
        if (v24 + 56 != (char *)v25) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v24 + 72, *(char **)(v25 + 16), *(void *)(v25 + 24), (uint64_t)(*(void *)(v25 + 24) - *(void *)(v25 + 16)) >> 2);
        }
        if (*((_DWORD *)v3 + 22)) {
          long long v26 = (uint64_t *)((char *)v3 + 92);
        }
        else {
          long long v26 = v3 + 13;
        }
        uint64_t v27 = *v26;
        *((_DWORD *)v24 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((_DWORD *)v26 + 2);
        *((void *)v24 + 7) = v27;
      }
      else
      {
        BOOL v22 = v21;
        v42[0] = (uint64_t *)&v41;
        unint64_t v23 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, &v41, (uint64_t)&std::piecewise_construct, (long long **)v42);
        *(_OWORD *)(v23 + 56) = *(_OWORD *)(v22 + 56);
        if (v23 != v22) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v23 + 72, *((char **)v22 + 9), *((void *)v22 + 10), (uint64_t)(*((void *)v22 + 10) - *((void *)v22 + 9)) >> 2);
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(v5, (uint64_t *)v22);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>((uint64_t)(v22 + 32));
        operator delete(v22);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      unint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  v41.__r_.__value_.__r.__words[0] = 0;
  if (v39 != v38)
  {
    do
    {
      uint64_t v28 = *(void *)this + 56;
      v42[0] = (uint64_t *)&v41;
      std::string::size_type v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v28, (unint64_t *)&v41, (uint64_t)&std::piecewise_construct, v42);
      uint64_t v30 = *(void *)this + 96;
      v42[0] = (uint64_t *)&v41;
      uint8x8_t v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v30, (unint64_t *)&v41, (uint64_t)&std::piecewise_construct, v42);
      for (uint64_t i = (std::string *)v29[3]; i != (std::string *)v29[4]; ++i)
      {
        uint8x8_t v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)this + 2, (unsigned __int8 *)i);
        if (v33)
        {
          if (*((_DWORD *)v33 + 22) == 1) {
            uint64_t v34 = (const std::string *)(v33 + 40);
          }
          else {
            uint64_t v34 = (const std::string *)(v33 + 64);
          }
          std::string::operator=(i, v34);
        }
      }
      for (j = (std::string *)v31[3]; j != (std::string *)v31[4]; ++j)
      {
        unint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)this + 2, (unsigned __int8 *)j);
        if (v36)
        {
          if (!*((_DWORD *)v36 + 22))
          {
            if (SHIBYTE(j->__r_.__value_.__r.__words[2]) < 0) {
              j = (std::string *)j->__r_.__value_.__r.__words[0];
            }
            v42[0] = (uint64_t *)j;
            BOOL v37 = "Invalid dtype conversion mode for layer input/output blob %s. The blob is expressed as an external inp"
                  "ut and also an output of a layer.";
            goto LABEL_49;
          }
          std::string::operator=(j, (const std::string *)(v36 + 40));
        }
      }
      ++v41.__r_.__value_.__r.__words[0];
    }
    while (v41.__r_.__value_.__r.__words[0] < (v39 - v38) >> 4);
  }
  *((unsigned char *)this + 8) = 1;
}

void sub_19281A170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::DTypeConverter::PerformConversions(Espresso::DTypeConverter *this)
{
  if (!*((unsigned char *)this + 8)) {
    Espresso::throw_exception_selector<Espresso::generic_error,char const(&)[19]>();
  }
  int64x2_t v96 = 0uLL;
  unint64_t v97 = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 4);
  if (v2)
  {
    float32x4_t v86 = (void *)((char *)this + 16);
    while (1)
    {
      unint64_t v3 = (long long *)(v2 + 2);
      uint64_t v4 = *(uint64_t ***)this;
      unint64_t v5 = (uint64_t **)(*(void *)this + 232);
      memset(&v95, 0, sizeof(v95));
      unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v5, v2 + 2);
      if (v4 + 30 == v6 || *((_DWORD *)v2 + 22))
      {
        uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v4 + 32), v2 + 2);
        if (v4 + 33 == v7 || *((_DWORD *)v2 + 22) != 1)
        {
          if (*((char *)v2 + 39) < 0) {
            unint64_t v3 = *(long long **)v3;
          }
          int v90 = (int64x2_t *)v3;
          Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Invalid DType conversion spec ORDType conversion requested for non I/O blob: %s", &v90);
        }
        uint64_t v8 = (uint64_t)v7;
        std::string::operator=(&v95, (const std::string *)(v2 + 5));
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(v4 + 32, v8);
        int v90 = (int64x2_t *)(v2 + 8);
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4 + 32, v2 + 8, (long long **)&v90)[56] = 1;
        unint64_t v9 = *(void *)(*(void *)this + 40) - *(void *)(*(void *)this + 32);
        if ((int)(v9 >> 4) < 1)
        {
LABEL_136:
          float32x4_t v82 = (long long *)&v95;
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            float32x4_t v82 = (long long *)v95.__r_.__value_.__r.__words[0];
          }
          int v90 = (int64x2_t *)v82;
          Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("No consumers found for %s", &v90);
        }
        unint64_t v10 = 0;
        uint64_t v11 = (v9 >> 4);
        int v12 = (void *)(*(void *)this + 96);
        while (1)
        {
          uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v12, v10);
          if (!v13) {
            goto LABEL_139;
          }
          uint64_t v14 = v13[4];
          if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v13[3], v14, (unsigned __int8 **)&v95) != v14)break; {
          if (v11 == ++v10)
          }
            goto LABEL_136;
        }
        int v15 = 0;
      }
      else
      {
        uint64_t v16 = (uint64_t)v6;
        std::string::operator=(&v95, (const std::string *)(v2 + 8));
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(v5, v16);
        int v90 = (int64x2_t *)(v2 + 5);
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, v2 + 5, (long long **)&v90)[56] = 1;
        unint64_t v17 = *(void *)(*(void *)this + 40) - *(void *)(*(void *)this + 32);
        if ((int)(v17 >> 4) < 1) {
          goto LABEL_136;
        }
        unint64_t v10 = 0;
        uint64_t v18 = (v17 >> 4);
        long long v19 = (void *)(*(void *)this + 56);
        while (1)
        {
          long long v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v19, v10);
          if (!v20) {
LABEL_139:
          }
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          uint64_t v21 = v20[4];
          if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v20[3], v21, (unsigned __int8 **)&v95) != v21)break; {
          if (v18 == ++v10)
          }
            goto LABEL_136;
        }
        int v15 = 1;
      }
      BOOL v22 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v86, (unsigned __int8 *)v2 + 16);
      if (!v22)
      {
        if (*((char *)v2 + 39) >= 0) {
          float32x4_t v83 = v2 + 2;
        }
        else {
          float32x4_t v83 = (void *)v2[2];
        }
        __p[0] = v83;
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Cannot create conversion layer. No conversion specs for %s.", __p);
      }
      unint64_t v23 = v22;
      LODWORD(v90) = 0;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      unint64_t v24 = (char *)operator new(0xF8uLL);
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = 0;
      *(void *)unint64_t v24 = &unk_1EE389DF0;
      *((void *)v24 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v24 + 40) = 0u;
      uint64_t v25 = (std::string *)(v24 + 40);
      *(_OWORD *)(v24 + 56) = 0u;
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(_OWORD *)(v24 + 104) = 0u;
      *(_OWORD *)(v24 + 120) = 0u;
      *(_OWORD *)(v24 + 136) = 0u;
      *(_OWORD *)(v24 + 152) = 0u;
      *(_OWORD *)(v24 + 161) = 0u;
      *((_OWORD *)v24 + 13) = 0u;
      *((_OWORD *)v24 + 14) = 0u;
      *((void *)v24 + 30) = 0;
      *(void *)&long long v91 = v24 + 24;
      *((void *)&v91 + 1) = v24;
      int v26 = *((_DWORD *)v23 + 22);
      int v87 = v15;
      if (v15)
      {
        if (v26)
        {
          if (*((char *)v2 + 39) >= 0) {
            float32x4_t v84 = v2 + 2;
          }
          else {
            float32x4_t v84 = (void *)v2[2];
          }
          __p[0] = v84;
          Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Invalid conversion mode for input blob %s", __p);
        }
        LODWORD(v10) = v10 - 1;
      }
      else if (v26 != 1)
      {
        if (*((char *)v2 + 39) >= 0) {
          float32x4_t v85 = v2 + 2;
        }
        else {
          float32x4_t v85 = (void *)v2[2];
        }
        __p[0] = v85;
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Invalid conversion mode for output blob %s", __p);
      }
      LODWORD(v90) = v10;
      unsigned int v27 = *((_DWORD *)v23 + 25);
      unsigned int v28 = *((_DWORD *)v23 + 28);
      Espresso::abstract_engine_factory::shared(&v103);
      if (v27 != 4 && v27 != 2) {
        break;
      }
      if (v28 > 1)
      {
        BOOL v37 = 0;
        BOOL v38 = 0;
LABEL_64:
        if (v28) {
          BOOL v44 = 0;
        }
        else {
          BOOL v44 = v38;
        }
        if (v28 != 1) {
          BOOL v37 = 0;
        }
        BOOL v46 = v27 == 2 && v28 == 4;
        BOOL v48 = v27 == 4 && v28 == 2;
        if (!v44 && !v37 && !v46 && !v48) {
          Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported conversion.");
        }
        uint64_t v101 = v28;
        uint64_t v49 = v103;
        uint64_t v50 = *(void *)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "cast");
        uint64_t v98 = 0;
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v49, v50 + 16, (uint64_t)__p, (uint64_t)&v101, (int *)&v98 + 1);
        unint64_t v32 = (std::__shared_weak_count *)*((void *)&v99 + 1);
        uint64_t v31 = v99;
        long long v99 = 0uLL;
        if (SHIBYTE(v89[0]) < 0) {
          operator delete(__p[0]);
        }
        MEMORY[0x192FF0F50](v24 + 64, "cast");
        if (*((char *)v2 + 39) >= 0) {
          size_t v51 = *((unsigned __int8 *)v2 + 39);
        }
        else {
          size_t v51 = v2[3];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v51 + 6);
        if (SHIBYTE(v89[0]) >= 0) {
          uint64_t v52 = __p;
        }
        else {
          uint64_t v52 = (void **)__p[0];
        }
        if (v51)
        {
          if (*((char *)v2 + 39) >= 0) {
            uint64_t v53 = v2 + 2;
          }
          else {
            uint64_t v53 = (const void *)v2[2];
          }
          memmove(v52, v53, v51);
        }
        strcpy((char *)v52 + v51, "__cast");
        goto LABEL_99;
      }
      LODWORD(v89[0]) = 0;
      __p[1] = 0;
      *(void **)((char *)v89 + 4) = (void *)1065353216;
      HIDWORD(v89[1]) = 0;
      LODWORD(__p[0]) = v28;
      HIDWORD(__p[0]) = *((_DWORD *)v23 + 23);
      std::string::size_type v29 = v103;
      uint64_t v30 = *(void *)this;
      std::string::basic_string[abi:ne180100]<0>(&v99, "static_dequantize");
      uint64_t v98 = 0;
      Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v29, v30 + 16, (uint64_t)&v99, (uint64_t)__p, (int *)&v98 + 1);
      uint64_t v31 = v101;
      unint64_t v32 = v102;
      uint64_t v101 = 0;
      uint64_t v102 = 0;
      if (SHIBYTE(v100) < 0) {
        operator delete((void *)v99);
      }
      MEMORY[0x192FF0F50](v24 + 64, "static_dequantize");
      if (*((char *)v2 + 39) >= 0) {
        size_t v33 = *((unsigned __int8 *)v2 + 39);
      }
      else {
        size_t v33 = v2[3];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v99, v33 + 12);
      if (SHIBYTE(v100) >= 0) {
        uint64_t v34 = &v99;
      }
      else {
        uint64_t v34 = (long long *)v99;
      }
      if (v33)
      {
        if (*((char *)v2 + 39) >= 0) {
          uint64_t v35 = v2 + 2;
        }
        else {
          uint64_t v35 = (const void *)v2[2];
        }
        memmove(v34, v35, v33);
      }
      strcpy((char *)v34 + v33, "__dequantize");
      if (v24[63] < 0) {
        operator delete(v25->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v99;
      unint64_t v36 = v100;
LABEL_102:
      *((void *)v24 + 7) = v36;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v54 = (std::__shared_weak_count *)*((void *)v24 + 12);
      *((void *)v24 + 11) = v31;
      *((void *)v24 + 12) = v32;
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      *((void *)v24 + 4) = 0;
      std::string::operator=((std::string *)(v24 + 224), v25);
      float32x4_t v55 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v92, (uint64_t)(v23 + 40));
      float32x4_t v56 = (_OWORD *)v94;
      *((void *)&v92 + 1) = v55;
      uint64_t v57 = (long long *)(v23 + 64);
      if ((unint64_t)v94 >= *((void *)&v94 + 1))
      {
        float32x4_t v59 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v93 + 1, (uint64_t)v57);
      }
      else
      {
        if ((char)v23[87] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v94, *((const std::string::value_type **)v23 + 8), *((void *)v23 + 9));
        }
        else
        {
          long long v58 = *v57;
          *(void *)(v94 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)v23 + 10);
          *float32x4_t v56 = v58;
        }
        float32x4_t v59 = (std::string *)((char *)v56 + 24);
      }
      *(void *)&long long v94 = v59;
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
      if (v104) {
        nitro::nitro_function::nitro_function(v104);
      }
      uint64_t v60 = v96.i64[1];
      if (v96.i64[1] >= v97)
      {
        uint64_t v61 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v96, (uint64_t)&v90);
      }
      else
      {
        std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v96.i64[1], (uint64_t)&v90);
        uint64_t v61 = v60 + 72;
      }
      v96.i64[1] = v61;
      uint64_t v62 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(void *)this + 184, &v95);
      float32x4_t v63 = (uint64_t **)(*(void *)this + 184);
      __p[0] = v2 + 2;
      float32x4_t v64 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v63, v2 + 2, (long long **)__p);
      long long v65 = *(_OWORD *)v62;
      long long v66 = *(_OWORD *)(v62 + 16);
      *((void *)v64 + 11) = *(void *)(v62 + 32);
      *(_OWORD *)(v64 + 72) = v66;
      *(_OWORD *)(v64 + 56) = v65;
      if (v64 + 56 != (char *)v62) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v64 + 96, *(char **)(v62 + 40), *(void *)(v62 + 48), (uint64_t)(*(void *)(v62 + 48) - *(void *)(v62 + 40)) >> 2);
      }
      unint64_t v67 = (uint64_t **)(*(void *)this + 184);
      if (v87)
      {
        __p[0] = &v95;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, &v95, (long long **)__p)+ 20) = 0;
        unint64_t v68 = (uint64_t **)(*(void *)this + 184);
        __p[0] = &v95;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, &v95, (long long **)__p)+ 21) = 0;
        float32x4_t v69 = (uint64_t **)(*(void *)this + 184);
        __p[0] = &v95;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69, &v95, (long long **)__p)+ 22) = 0;
        float32x4_t v70 = (uint64_t **)(*(void *)this + 184);
        __p[0] = &v95;
        unint64_t v71 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v70, &v95, (long long **)__p);
      }
      else
      {
        __p[0] = v2 + 2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, v2 + 2, (long long **)__p)+ 20) = 0;
        uint64_t v72 = (uint64_t **)(*(void *)this + 184);
        __p[0] = v2 + 2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v72, v2 + 2, (long long **)__p)+ 21) = 0;
        float32x4_t v73 = (uint64_t **)(*(void *)this + 184);
        __p[0] = v2 + 2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v73, v2 + 2, (long long **)__p)+ 22) = 0;
        float32x4_t v74 = (uint64_t **)(*(void *)this + 184);
        __p[0] = v2 + 2;
        unint64_t v71 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v74, v2 + 2, (long long **)__p);
      }
      *((_DWORD *)v71 + 23) = 0;
      uint64_t v75 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(void *)this + 376, v2 + 2);
      *(_OWORD *)std::string __p = *(_OWORD *)v75;
      memset(v89, 0, 24);
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v89, *(const void **)(v75 + 16), *(void *)(v75 + 24), (uint64_t)(*(void *)(v75 + 24) - *(void *)(v75 + 16)) >> 2);
      float32x4_t v76 = (uint64_t **)(*(void *)this + 352);
      uint64_t v103 = (long long *)(v2 + 2);
      float32x4_t v77 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v76, v2 + 2, (uint64_t)&std::piecewise_construct, &v103);
      *(_OWORD *)(v77 + 56) = *(_OWORD *)__p;
      if (v77 + 56 != (char *)__p) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v77 + 72, (char *)v89[0], (uint64_t)v89[1], ((char *)v89[1] - (char *)v89[0]) >> 2);
      }
      uint64_t v78 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(void *)this + 352, &v95);
      uint64_t v79 = 52;
      if (v87) {
        uint64_t v79 = 64;
      }
      uint64_t v80 = (uint64_t)v2 + v79;
      uint64_t v81 = *(void *)(v80 + 40);
      *(_DWORD *)(v78 + 8) = *(_DWORD *)(v80 + 48);
      *(void *)uint64_t v78 = v81;
      if (v89[0])
      {
        v89[1] = v89[0];
        operator delete(v89[0]);
      }
      __p[0] = (char *)&v93 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v92;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (*((void *)&v91 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v91 + 1));
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_135;
      }
    }
    BOOL v37 = v27 == 0;
    BOOL v38 = v27 == 1;
    if (v27 > 1 || v28 != 4 && v28 != 2) {
      goto LABEL_64;
    }
    LODWORD(v102) = 0;
    LODWORD(v101) = v28;
    HIDWORD(v101) = *((_DWORD *)v23 + 26);
    uint64_t v39 = v103;
    uint64_t v40 = *(void *)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "static_quantize");
    uint64_t v98 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v39, v40 + 16, (uint64_t)__p, (uint64_t)&v101, (int *)&v98 + 1);
    unint64_t v32 = (std::__shared_weak_count *)*((void *)&v99 + 1);
    uint64_t v31 = v99;
    long long v99 = 0uLL;
    if (SHIBYTE(v89[0]) < 0) {
      operator delete(__p[0]);
    }
    MEMORY[0x192FF0F50](v24 + 64, "static_quantize");
    if (*((char *)v2 + 39) >= 0) {
      size_t v41 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      size_t v41 = v2[3];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v41 + 10);
    if (SHIBYTE(v89[0]) >= 0) {
      char v42 = __p;
    }
    else {
      char v42 = (void **)__p[0];
    }
    if (v41)
    {
      if (*((char *)v2 + 39) >= 0) {
        unint64_t v43 = v2 + 2;
      }
      else {
        unint64_t v43 = (const void *)v2[2];
      }
      memmove(v42, v43, v41);
    }
    strcpy((char *)v42 + v41, "__quantize");
LABEL_99:
    if (v24[63] < 0) {
      operator delete(v25->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    unint64_t v36 = v89[0];
    goto LABEL_102;
  }
LABEL_135:
  Espresso::net::insert_layers(*(void *)this, (uint64_t **)&v96);
  Espresso::shape_network_recursive(*(Espresso **)this, (Espresso::net *)(*(void *)this + 184), 0, 0);
  int v90 = &v96;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
}

void sub_19281AC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40)
{
  *(void *)(v40 - 160) = &a39;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 160));
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const(&)[19]>()
{
}

void Espresso::prepare_network_reshape_graph_coloring(Espresso::net **a1, uint64_t a2)
{
  Espresso::net::_tag_inputs_and_outputs(*a1);
  uint64_t v4 = *a1;
  unint64_t v5 = (uint64_t **)((char *)*a1 + 184);
  if (v5 != (uint64_t **)a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(v5, *(long long **)a2, (long long *)(a2 + 8));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v4 + 26, *(long long **)(a2 + 24), (long long *)(a2 + 32));
    uint64_t v4 = *a1;
  }
  (*(void (**)(void, Espresso::net *))(**((void **)v4 + 2) + 64))(*((void *)v4 + 2), v4);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear((uint64_t)*a1 + 136);
  unint64_t v6 = *a1;
  uint64_t v7 = (void *)*((void *)*a1 + 4);
  uint64_t v108 = (void *)*((void *)*a1 + 5);
  if (v7 != v108)
  {
    unint64_t v114 = 0;
    while (1)
    {
      unint64_t v109 = v7;
      uint64_t v9 = *v7;
      uint64_t v8 = (std::__shared_weak_count *)v7[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v110 = v8;
      int v111 = *(_DWORD *)(v9 + 8);
      unsigned int v130 = *(_DWORD *)(v9 + 12);
      uint64_t v10 = *(void *)(v9 + 64);
      uint64_t v12 = *(void *)(v10 + 8);
      uint64_t v11 = *(std::__shared_weak_count **)(v10 + 16);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (void *)(v9 + 104);
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)(v9 + 104));
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)(v9 + 80));
      uint64_t v14 = (uint64_t)*a1 + 96;
      *(void *)&long long v126 = v114;
      int v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v114, &v126);
      uint64_t v16 = (long long *)v15[3];
      uint64_t v112 = (long long *)v15[4];
      uint64_t v113 = v12;
      if (v16 != v112)
      {
        uint64_t v17 = 0;
        uint64_t v115 = v11;
        do
        {
          uint64_t v129 = 0;
          *(_OWORD *)&v127[8] = 0u;
          long long v128 = 0u;
          long long v126 = xmmword_192DC3600;
          *(void *)unint64_t v127 = 0xFFFFFFFF00000001;
          uint64_t v18 = *a1;
          long long v19 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)*a1 + 184, v16);
          if ((void *)((char *)v18 + 192) == v19)
          {
            *(void *)&long long v122 = v114;
            uint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v18 + 56, v114, &v122);
            std::vector<Espresso::layer_shape>::vector(v125, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[4] - v21[3]) >> 3));
            uint64_t v22 = (uint64_t)*a1 + 56;
            *(void *)&long long v122 = v114;
            unint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v114, &v122);
            unint64_t v24 = (void *)v23[3];
            uint64_t v25 = (void *)v23[4];
            if (v24 != v25)
            {
              uint64_t v26 = 0;
              do
              {
                *(_OWORD *)&v123[8] = 0u;
                memset(__p, 0, 24);
                long long v122 = xmmword_192DC3600;
                *(void *)float32x4_t v123 = 0xFFFFFFFF00000001;
                unsigned int v27 = *a1;
                unsigned int v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)*a1 + 184, v24);
                if ((void *)((char *)v27 + 192) != v28)
                {
                  long long v29 = *(_OWORD *)(v28 + 9);
                  long long v122 = *(_OWORD *)(v28 + 7);
                  *(_OWORD *)float32x4_t v123 = v29;
                  *(void *)&v123[16] = v28[11];
                  if (&v122 != (long long *)(v28 + 7)) {
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)__p, (char *)v28[12], v28[13], (uint64_t)(v28[13] - v28[12]) >> 2);
                  }
                }
                uint64_t v30 = &v125[0][v26];
                long long v31 = v122;
                long long v32 = *(_OWORD *)v123;
                *((void *)v30 + 4) = *(void *)&v123[16];
                *uint64_t v30 = v31;
                v30[1] = v32;
                if (v30 != &v122) {
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v30 + 40, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                v24 += 3;
                v26 += 4;
              }
              while (v24 != v25);
            }
            (*(void (**)(long long *__return_ptr))(**(void **)(v9 + 64) + 64))(&v122);
            uint64_t v33 = v122;
            uint64_t v34 = (uint64_t **)((char *)*a1 + 184);
            uint64_t v131 = v16;
            uint64_t v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, v16, &v131);
            unint64_t v36 = (char *)(v33 + (v17 << 6));
            long long v37 = *(_OWORD *)v36;
            long long v38 = *((_OWORD *)v36 + 1);
            *((void *)v35 + 11) = *((void *)v36 + 4);
            *(_OWORD *)(v35 + 72) = v38;
            *(_OWORD *)(v35 + 56) = v37;
            if (v35 + 56 != v36) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35 + 96, *((char **)v36 + 5), *((void *)v36 + 6), (uint64_t)(*((void *)v36 + 6) - *((void *)v36 + 5)) >> 2);
            }
            uint64_t v39 = v122 + (v17 << 6);
            uint64_t v40 = *(void *)(v39 + 32);
            long long v41 = *(_OWORD *)(v39 + 16);
            long long v126 = *(_OWORD *)v39;
            *(_OWORD *)unint64_t v127 = v41;
            *(void *)&v127[16] = v40;
            if (&v126 != (long long *)v39) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v128, *(char **)(v39 + 40), *(void *)(v39 + 48), (uint64_t)(*(void *)(v39 + 48) - *(void *)(v39 + 40)) >> 2);
            }
            unint64_t v132 = (void **)&v122;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v132);
            *(void *)&long long v122 = v125;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            uint64_t v12 = v113;
            uint64_t v13 = (void *)(v9 + 104);
          }
          else
          {
            long long v20 = *(_OWORD *)(v19 + 9);
            long long v126 = *(_OWORD *)(v19 + 7);
            *(_OWORD *)unint64_t v127 = v20;
            *(void *)&v127[16] = v19[11];
            if (&v126 != (long long *)(v19 + 7)) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v128, (char *)v19[12], v19[13], (uint64_t)(v19[13] - v19[12]) >> 2);
            }
          }
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)*a1 + 17, (unsigned __int8 *)v16))
          {
            (*(void (**)(long long *__return_ptr))(**(void **)(v9 + 64) + 24))(&v122);
            char v42 = *a1;
            unint64_t v43 = *(void ***)(v9 + 64);
            uint64_t v120 = v12;
            unint64_t v121 = v115;
            if (v115) {
              atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            blob_container = Espresso::make_blob_container(v111, &v130, (uint64_t)v42, v43, &v120, v16, 1, v17);
            uint64_t v45 = (uint64_t)*a1 + 136;
            v125[0] = v16;
            BOOL v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, (unsigned __int8 *)v16, v125);
            uint64_t v48 = *(void *)blob_container;
            uint64_t v47 = *((void *)blob_container + 1);
            if (v47) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v49 = (std::__shared_weak_count *)*((void *)v46 + 6);
            *((void *)v46 + 5) = v48;
            *((void *)v46 + 6) = v47;
            if (v49) {
              nitro::nitro_function::nitro_function(v49);
            }
            if (v121) {
              nitro::nitro_function::nitro_function(v121);
            }
            if (*((void *)&v122 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v122 + 1));
            }
          }
          uint64_t v50 = (uint64_t)*a1 + 136;
          *(void *)&long long v122 = v16;
          size_t v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50, (unsigned __int8 *)v16, (long long **)&v122);
          uint64_t v52 = v51;
          uint64_t v53 = *(void **)(v9 + 112);
          unint64_t v54 = *(void *)(v9 + 120);
          if ((unint64_t)v53 >= v54)
          {
            uint64_t v57 = ((uint64_t)v53 - *v13) >> 4;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v59 = v54 - *v13;
            if (v59 >> 3 > v58) {
              unint64_t v58 = v59 >> 3;
            }
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v58;
            }
            *(void *)&v123[16] = v9 + 120;
            uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v60);
            uint64_t v62 = &v61[16 * v57];
            *(void *)&long long v122 = v61;
            *((void *)&v122 + 1) = v62;
            *(void *)&v123[8] = &v61[16 * v63];
            long long v64 = *(_OWORD *)(v52 + 40);
            *(_OWORD *)uint64_t v62 = v64;
            if (*((void *)&v64 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)float32x4_t v123 = v62 + 16;
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v13, &v122);
            float32x4_t v56 = *(void **)(v9 + 112);
            std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v122);
          }
          else
          {
            *uint64_t v53 = *((void *)v51 + 5);
            uint64_t v55 = *((void *)v51 + 6);
            v53[1] = v55;
            if (v55) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
            }
            float32x4_t v56 = v53 + 2;
            *(void *)(v9 + 112) = v53 + 2;
          }
          uint64_t v11 = v115;
          *(void *)(v9 + 112) = v56;
          if ((void)v128)
          {
            *((void *)&v128 + 1) = v128;
            operator delete((void *)v128);
          }
          ++v17;
          uint64_t v16 = (long long *)((char *)v16 + 24);
        }
        while (v16 != v112);
      }
      uint64_t v65 = (uint64_t)*a1 + 56;
      *(void *)&long long v126 = v114;
      long long v66 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v65, v114, &v126);
      unint64_t v67 = (unsigned __int8 *)v66[3];
      uint64_t v116 = (unsigned __int8 *)v66[4];
      unint64_t v68 = (void *)(v9 + 80);
      if (v67 != v116) {
        break;
      }
LABEL_114:
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      if (v110) {
        nitro::nitro_function::nitro_function(v110);
      }
      ++v114;
      uint64_t v7 = v109 + 2;
      if (v109 + 2 == v108)
      {
        unint64_t v6 = *a1;
        goto LABEL_120;
      }
    }
    uint64_t v69 = 0;
    while (1)
    {
      float32x4_t v70 = v11;
      uint64_t v129 = 0;
      *(_OWORD *)&v127[8] = 0u;
      long long v128 = 0u;
      long long v126 = xmmword_192DC3600;
      *(void *)unint64_t v127 = 0xFFFFFFFF00000001;
      unint64_t v71 = *a1;
      uint64_t v72 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)*a1 + 184, v67);
      if ((void *)((char *)v71 + 192) != v72)
      {
        long long v73 = *(_OWORD *)(v72 + 9);
        long long v126 = *(_OWORD *)(v72 + 7);
        *(_OWORD *)unint64_t v127 = v73;
        *(void *)&v127[16] = v72[11];
        if (&v126 != (long long *)(v72 + 7))
        {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v128, (char *)v72[12], v72[13], (uint64_t)(v72[13] - v72[12]) >> 2);
          unint64_t v71 = *a1;
        }
      }
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)v71 + 17, v67))
      {
        goto LABEL_95;
      }
      (*(void (**)(long long *__return_ptr))(**(void **)(v9 + 64) + 24))(&v122);
      float32x4_t v74 = *(const void **)(v9 + 64);
      if (v74)
      {
        if (v75)
        {
          float32x4_t v76 = v75;
          float32x4_t v77 = *(std::__shared_weak_count **)(v9 + 72);
          if (v77) {
            atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v78 = v75[41];
          if (v78)
          {
            int v111 = (***(uint64_t (****)(void))(v78 + 8))(*(void *)(v78 + 8));
            unsigned int v130 = *(_DWORD *)((*(uint64_t (**)(void *))(*v76 + 320))(v76) + 24);
            uint64_t v79 = v76[41];
            if (!v79)
            {
              uint64_t v79 = v113;
              uint64_t v80 = v70;
              if (!v77) {
                goto LABEL_78;
              }
              goto LABEL_77;
            }
            uint64_t v80 = (std::__shared_weak_count *)v76[42];
            if (v80) {
              atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v70)
            {
              nitro::nitro_function::nitro_function(v70);
              if (!v77) {
                goto LABEL_78;
              }
LABEL_77:
              nitro::nitro_function::nitro_function(v77);
LABEL_78:
              uint64_t v81 = v79;
              uint64_t v11 = v80;
              unint64_t v68 = (void *)(v9 + 80);
              goto LABEL_79;
            }
          }
          else
          {
            uint64_t v80 = v11;
            uint64_t v79 = v113;
          }
          if (v77) {
            goto LABEL_77;
          }
          goto LABEL_78;
        }
        unint64_t v68 = (void *)(v9 + 80);
      }
      uint64_t v81 = v113;
LABEL_79:
      float32x4_t v82 = *a1;
      float32x4_t v83 = *(void ***)(v9 + 64);
      uint64_t v118 = v81;
      float32x4_t v119 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float32x4_t v84 = Espresso::make_blob_container(v111, &v130, (uint64_t)v82, v83, &v118, (long long *)v67, 0, v69);
      uint64_t v85 = (uint64_t)*a1 + 136;
      v125[0] = (long long *)v67;
      float32x4_t v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v85, v67, v125);
      uint64_t v88 = *(void *)v84;
      uint64_t v87 = *((void *)v84 + 1);
      if (v87) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
      }
      float32x4_t v89 = (std::__shared_weak_count *)*((void *)v86 + 6);
      *((void *)v86 + 5) = v88;
      *((void *)v86 + 6) = v87;
      if (v89) {
        nitro::nitro_function::nitro_function(v89);
      }
      if (v119) {
        nitro::nitro_function::nitro_function(v119);
      }
      int v90 = *a1;
      uint64_t v91 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)*a1 + 30), v67);
      if (!v114 || v91)
      {
        v125[0] = (long long *)v67;
        uint64_t v92 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90 + 136, v67, v125)+ 5);
        long long v117 = v122;
        if (*((void *)&v122 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v122 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v92 + 16))(v92, &v126, &v117);
        if (*((void *)&v117 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v117 + 1));
        }
      }
      uint64_t v113 = v81;
      float32x4_t v70 = v11;
      if (*((void *)&v122 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v122 + 1));
      }
LABEL_95:
      uint64_t v93 = (uint64_t)*a1 + 136;
      *(void *)&long long v122 = v67;
      long long v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v93, v67, (long long **)&v122);
      std::string v95 = v94;
      int64x2_t v96 = *(void **)(v9 + 88);
      unint64_t v97 = *(void *)(v9 + 96);
      if ((unint64_t)v96 >= v97)
      {
        uint64_t v100 = ((uint64_t)v96 - *v68) >> 4;
        unint64_t v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v102 = v97 - *v68;
        if (v102 >> 3 > v101) {
          unint64_t v101 = v102 >> 3;
        }
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v103 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v103 = v101;
        }
        *(void *)&v123[16] = v9 + 96;
        uint64_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v103);
        unint64_t v105 = &v104[16 * v100];
        *(void *)&long long v122 = v104;
        *((void *)&v122 + 1) = v105;
        *(void *)&v123[8] = &v104[16 * v106];
        long long v107 = *(_OWORD *)(v95 + 40);
        *(_OWORD *)unint64_t v105 = v107;
        if (*((void *)&v107 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v107 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)float32x4_t v123 = v105 + 16;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v68, &v122);
        long long v99 = *(void **)(v9 + 88);
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v122);
      }
      else
      {
        void *v96 = *((void *)v94 + 5);
        uint64_t v98 = *((void *)v94 + 6);
        v96[1] = v98;
        if (v98) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v98 + 8), 1uLL, memory_order_relaxed);
        }
        long long v99 = v96 + 2;
        *(void *)(v9 + 88) = v96 + 2;
      }
      uint64_t v11 = v70;
      *(void *)(v9 + 88) = v99;
      if ((void)v128)
      {
        *((void *)&v128 + 1) = v128;
        operator delete((void *)v128);
      }
      v67 += 24;
      uint64_t v69 = (v69 + 1);
      if (v67 == v116) {
        goto LABEL_114;
      }
    }
  }
LABEL_120:
  Espresso::net::_assign_streams(v6);
  Espresso::net::_on_resized(*a1);
  Espresso::net::_resolve_default_configuration(*a1);
  (*(void (**)(void))(**((void **)*a1 + 2) + 80))(*((void *)*a1 + 2));
  Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>((uint64_t)*a1);
}

void sub_19281B8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::pass_update_absolute_indexes_after_transform>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389760;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_update_absolute_indexes_after_transform>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::shape_network(Espresso *this, Espresso::net *a2, const Espresso::network_shape *a3)
{
}

void *std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>::~tuple(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<Espresso::pass_params_graph_coloring>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388618;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_params_graph_coloring>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_unpack_layers>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386858;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_unpack_layers>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::shape_network(Espresso **a1, Espresso::net *a2)
{
}

void Espresso::shape_network_and_keep_unchanged_blobs(Espresso **a1, Espresso::net *a2)
{
}

void Espresso::compute_network_shape_starting_from_data_shape(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v14 = v15;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v16 = __p;
  unint64_t v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v14, __p, (_OWORD **)&v16);
  long long v7 = *a2;
  long long v8 = a2[1];
  *((void *)v6 + 11) = *((void *)a2 + 4);
  *(_OWORD *)((char *)v6 + 72) = v8;
  *(_OWORD *)((char *)v6 + 56) = v7;
  if ((_OWORD *)((char *)v6 + 56) != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v6 + 96, *((char **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *a1;
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  v11[0] = v9;
  v11[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::compute_network_shape_starting_from_data_shapes(v11, (uint64_t)&v14, a3);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_19281BC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, char *a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t Espresso::compute_network_shape_starting_from_data_shapes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>(a3, a1, a2);
}

uint64_t Espresso::net_fast_reshaper::net_fast_reshaper(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v5 = (uint64_t *)(a1 + 8);
  unint64_t v6 = (uint64_t *)(a1 + 32);
  uint64_t v7 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  Espresso::net::get_analysis_if_existing<Espresso::pass_blob_name_indexing_result>(&v32, v4);
  uint64_t v8 = v32;
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (!v8) {
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(*a2);
  }
  uint64_t v9 = (long long **)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>(*(void *)a1);
  uint64_t v10 = v9;
  uint64_t v11 = (uint64_t *)(v9 + 16);
  if (v5 != (uint64_t *)(v9 + 16)) {
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v5, v9[16], v9[17], ((char *)v9[17] - (char *)v9[16]) >> 6);
  }
  if (v6 != v11) {
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v6, v10[16], v10[17], ((char *)v10[17] - (char *)v10[16]) >> 6);
  }
  unint64_t v12 = (unint64_t)v10[5];
  uint64_t v14 = *(unsigned char **)(a1 + 56);
  char v13 = *(char **)(a1 + 64);
  unint64_t v15 = (v13 - v14) >> 3;
  if (v12 <= v15)
  {
    if (v12 >= v15) {
      goto LABEL_27;
    }
    uint64_t v25 = &v14[8 * v12];
    goto LABEL_26;
  }
  unint64_t v16 = v12 - v15;
  uint64_t v17 = *(void *)(a1 + 72);
  if (v12 - v15 <= (v17 - (uint64_t)v13) >> 3)
  {
    bzero(*(void **)(a1 + 64), 8 * v16);
    uint64_t v25 = &v13[8 * v16];
LABEL_26:
    *(void *)(a1 + 64) = v25;
    goto LABEL_27;
  }
  if (v12 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = v17 - (void)v14;
  if (v18 >> 2 > v12) {
    unint64_t v12 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v12;
  }
  if (v19 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v20 = (char *)operator new(8 * v19);
  uint64_t v21 = &v20[8 * v15];
  uint64_t v22 = &v20[8 * v19];
  bzero(v21, 8 * v16);
  unint64_t v23 = &v21[8 * v16];
  if (v13 != v14)
  {
    do
    {
      uint64_t v24 = *((void *)v13 - 1);
      v13 -= 8;
      *((void *)v21 - 1) = v24;
      v21 -= 8;
    }
    while (v13 != v14);
    char v13 = *(char **)(a1 + 56);
  }
  *(void *)(a1 + 56) = v21;
  *(void *)(a1 + 64) = v23;
  *(void *)(a1 + 72) = v22;
  if (v13) {
    operator delete(v13);
  }
LABEL_27:
  std::vector<BOOL>::resize(v7, (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 6);
  uint64_t v26 = *(void **)(*(void *)a1 + 184);
  if (v26 != (void *)(*(void *)a1 + 192))
  {
    uint64_t v27 = (uint64_t)(v10 + 2);
    do
    {
      uint64_t v34 = (long long *)(v26 + 4);
      *(void *)(*(void *)(a1 + 56)
                + 8
                * *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)v26 + 32, (uint64_t)&std::piecewise_construct, &v34)+ 10)) = v26;
      unsigned int v28 = (void *)v26[1];
      if (v28)
      {
        do
        {
          long long v29 = v28;
          unsigned int v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          long long v29 = (void *)v26[2];
          BOOL v30 = *v29 == (void)v26;
          uint64_t v26 = v29;
        }
        while (!v30);
      }
      uint64_t v26 = v29;
    }
    while (v29 != (void *)(*(void *)a1 + 192));
  }
  return a1;
}

void sub_19281BF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (*v10) {
    operator delete(*v10);
  }
  unint64_t v12 = *(void **)(v9 + 56);
  if (v12)
  {
    *(void *)(v9 + 64) = v12;
    operator delete(v12);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::net_fast_reshaper::reshape(uint64_t a1, uint64_t a2)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>(*(void *)a1);
  v111[0] = 1;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  uint64_t v117 = 0;
  uint64_t v113 = 255;
  int v112 = 723714080;
  kdebug_trace();
  long long v5 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  unint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    *(void *)buf = *(void *)(a1 + 80);
    *(_DWORD *)&buf[8] = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)buf, v7);
  }
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  if (v8)
  {
    while (1)
    {
      uint64_t v9 = v8 + 2;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v4 + 2, (unsigned __int8 *)v8 + 16);
      if (!v10) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v11 = *((int *)v10 + 10);
      uint64_t v12 = *(void *)(a1 + 8) + (v11 << 6);
      long long v13 = *(_OWORD *)(v8 + 5);
      long long v14 = *(_OWORD *)(v8 + 7);
      *(void *)(v12 + 32) = v8[9];
      *(_OWORD *)uint64_t v12 = v13;
      *(_OWORD *)(v12 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v14;
      if ((uint64_t *)v12 != v8 + 5) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v12 + 40), (char *)v8[10], v8[11], (v8[11] - v8[10]) >> 2);
      }
      *(void *)(*(void *)(a1 + 80) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v15 = *(void *)a1 + 136;
      *(void *)buf = v8 + 2;
      uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)v8 + 16, (long long **)buf);
      uint64_t v18 = *((void *)v17 + 5);
      if (!v18) {
        break;
      }
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      char v19 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 184))(v18, v8 + 5, &v109);
      if (v110) {
        nitro::nitro_function::nitro_function(v110);
      }
      if ((v19 & 1) == 0)
      {
        long long v20 = (Espresso *)(*(uint64_t (**)(void))(**((void **)v17 + 5) + 72))(*((void *)v17 + 5));
        if (!v20)
        {
          uint64_t v80 = Espresso::espresso_os_log_subsystem(v20, v21);
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)v8 + 39) < 0) {
              uint64_t v9 = (void *)*v9;
            }
            uint64_t v88 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(v8 + 5));
            int v89 = (*(uint64_t (**)(void))(**((void **)v17 + 5) + 24))(*((void *)v17 + 5));
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = v9;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v88;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = v89;
            _os_log_debug_impl(&dword_1920CB000, v80, OS_LOG_TYPE_DEBUG, "Fail fast reshape (input) %s new=%lld, platform=%d", buf, 0x1Cu);
          }
LABEL_72:

          uint64_t v79 = 0;
          goto LABEL_76;
        }
        uint64_t v22 = *((void *)v17 + 5);
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v22 + 16))(v22, v8 + 5, &v107);
        if (v108) {
          nitro::nitro_function::nitro_function(v108);
        }
      }
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_15;
      }
    }
    uint64_t v80 = Espresso::espresso_os_log_subsystem(0, v16);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v8 + 39) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      uint64_t v87 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(v8 + 5));
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v87;
      _os_log_debug_impl(&dword_1920CB000, v80, OS_LOG_TYPE_DEBUG, "Fail fast reshape (input) %s new=%lld old was null", buf, 0x16u);
    }
    goto LABEL_72;
  }
LABEL_15:
  uint64_t v104 = 0;
  unint64_t v105 = 0;
  unint64_t v106 = 0;
  std::vector<Espresso::layer_shape>::reserve(&v104, 8uLL);
  unint64_t v23 = *(Espresso::net **)a1;
  uint64_t v24 = *(void *)(*(void *)a1 + 32);
  if (*(void *)(*(void *)a1 + 40) == v24)
  {
LABEL_59:
    uint64_t v72 = *(void *)(a1 + 8);
    if (*(void *)(a1 + 16) != v72)
    {
      uint64_t v73 = 0;
      unint64_t v74 = 0;
      do
      {
        if ((*(void *)(*(void *)(a1 + 80) + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v74))
        {
          uint64_t v75 = (long long *)(v72 + v73);
          uint64_t v76 = *(void *)(*(void *)(a1 + 56) + 8 * v74);
          long long v77 = *v75;
          long long v78 = v75[1];
          *(void *)(v76 + 88) = *((void *)v75 + 4);
          *(_OWORD *)(v76 + 72) = v78;
          *(_OWORD *)(v76 + 56) = v77;
          if (v75 != (long long *)(v76 + 56)) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v76 + 96), *((char **)v75 + 5), *((void *)v75 + 6), (uint64_t)(*((void *)v75 + 6) - *((void *)v75 + 5)) >> 2);
          }
        }
        ++v74;
        uint64_t v72 = *(void *)(a1 + 8);
        v73 += 64;
      }
      while (v74 < (*(void *)(a1 + 16) - v72) >> 6);
      unint64_t v23 = *(Espresso::net **)a1;
    }
    Espresso::net::_on_resized(v23);
    uint64_t v79 = 1;
    goto LABEL_75;
  }
  unint64_t v25 = 0;
  while (1)
  {
    uint64_t v92 = v24;
    uint64_t v26 = v104;
    unint64_t v27 = v105;
    if (v105 != v104)
    {
      do
      {
        unsigned int v28 = *(void **)(v27 - 24);
        if (v28)
        {
          *(void *)(v27 - std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v28;
          operator delete(v28);
        }
        v27 -= 64;
      }
      while (v27 != v26);
      unint64_t v23 = *(Espresso::net **)a1;
    }
    unint64_t v105 = v26;
    char v29 = *((void *)v23 + 121) != 0;
    uint64_t v30 = v4[13] + 24 * v25;
    uint64_t v32 = *(int **)v30;
    long long v31 = *(int **)(v30 + 8);
    while (v32 != v31)
    {
      uint64_t v33 = *v32;
      uint64_t v34 = *(void *)(a1 + 8) + (v33 << 6);
      uint64_t v35 = *(void *)(v34 + 32);
      long long v36 = *(_OWORD *)(v34 + 16);
      *(_OWORD *)buf = *(_OWORD *)v34;
      *(_OWORD *)&buf[16] = v36;
      uint64_t v120 = v35;
      uint64_t v122 = 0;
      long long v121 = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v121, *(const void **)(v34 + 40), *(void *)(v34 + 48), (uint64_t)(*(void *)(v34 + 48) - *(void *)(v34 + 40)) >> 2);
      long long v37 = (long long *)(*(void *)(a1 + 32) + (v33 << 6));
      uint64_t v38 = *((void *)v37 + 4);
      long long v39 = v37[1];
      long long v98 = *v37;
      long long v99 = v39;
      uint64_t v100 = v38;
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v37 + 5), *((void *)v37 + 6), (uint64_t)(*((void *)v37 + 6) - *((void *)v37 + 5)) >> 2);
      BOOL v40 = Espresso::layer_shape::operator==((uint64_t)&v98, (uint64_t)buf);
      unint64_t v41 = v105;
      if (v105 >= v106)
      {
        uint64_t v44 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(&v104, (long long *)buf);
      }
      else
      {
        long long v42 = *(_OWORD *)buf;
        long long v43 = *(_OWORD *)&buf[16];
        *(void *)(v105 + 32) = v120;
        *(_OWORD *)unint64_t v41 = v42;
        *(_OWORD *)(v41 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v43;
        *(void *)(v41 + 48) = 0;
        *(void *)(v41 + 56) = 0;
        *(void *)(v41 + 40) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v41 + 40), (const void *)v121, *((uint64_t *)&v121 + 1), (uint64_t)(*((void *)&v121 + 1) - v121) >> 2);
        uint64_t v44 = v41 + 64;
      }
      unint64_t v105 = v44;
      if (__p)
      {
        uint64_t v102 = __p;
        operator delete(__p);
      }
      if ((void)v121)
      {
        *((void *)&v121 + 1) = v121;
        operator delete((void *)v121);
      }
      v29 |= !v40;
      ++v32;
    }
    if ((v29 & 1) == 0)
    {
      if (*(void *)(v4[10] + 24 * v25 + 8) != *(void *)(v4[10] + 24 * v25))
      {
        uint64_t v65 = 0;
        unint64_t v66 = 0;
        do
        {
          Espresso::abstract_blob_container::shape(buf, *(void *)(*(void *)(*(void *)(v92 + 16 * v25) + 104) + v65));
          uint64_t v67 = *(void *)(a1 + 8) + ((uint64_t)*(int *)(*(void *)(v4[10] + 24 * v25) + 4 * v66) << 6);
          long long v68 = *(_OWORD *)buf;
          long long v69 = *(_OWORD *)&buf[16];
          *(void *)(v67 + 32) = v120;
          *(_OWORD *)uint64_t v67 = v68;
          *(_OWORD *)(v67 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v69;
          unint64_t v71 = (void *)(v67 + 40);
          float32x4_t v70 = *(void **)(v67 + 40);
          if (v70)
          {
            *(void *)(v67 + 48) = v70;
            operator delete(v70);
            *unint64_t v71 = 0;
            *(void *)(v67 + 48) = 0;
            *(void *)(v67 + 56) = 0;
          }
          *(_OWORD *)unint64_t v71 = v121;
          *(void *)(v67 + 56) = v122;
          ++v66;
          v65 += 16;
        }
        while (v66 < (uint64_t)(*(void *)(v4[10] + 24 * v25 + 8) - *(void *)(v4[10] + 24 * v25)) >> 2);
      }
      goto LABEL_58;
    }
    long long v98 = 0uLL;
    *(void *)&long long v99 = 0;
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(*(void *)(*(void *)(*(void *)a1 + 32) + 16 * v25)
                                                              + 64)
                                                + 64))(buf);
    std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)&v98);
    long long v98 = *(_OWORD *)buf;
    *(void *)&long long v99 = *(void *)&buf[16];
    uint64_t v118 = (void **)buf;
    memset(buf, 0, 24);
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v118);
    uint64_t v46 = *(void *)(v4[10] + 24 * v25);
    uint64_t v47 = *(void *)(v4[10] + 24 * v25 + 8);
    if ((uint64_t)(*((void *)&v98 + 1) - v98) >> 6 >= (unint64_t)((v47 - v46) >> 2)) {
      uint64_t v48 = (v47 - v46) >> 2;
    }
    else {
      uint64_t v48 = (uint64_t)(*((void *)&v98 + 1) - v98) >> 6;
    }
    uint64_t v93 = v92 + 16 * v25;
    if (v48)
    {
      uint64_t v49 = 0;
      for (uint64_t i = 0; i != v48; ++i)
      {
        uint64_t v51 = v98 + v49;
        uint64_t v52 = *(void *)(a1 + 8) + ((uint64_t)*(int *)(*(void *)(v4[10] + 24 * v25) + 4 * i) << 6);
        long long v53 = *(_OWORD *)(v98 + v49);
        long long v54 = *(_OWORD *)(v98 + v49 + 16);
        *(void *)(v52 + 32) = *(void *)(v98 + v49 + 32);
        *(_OWORD *)uint64_t v52 = v53;
        *(_OWORD *)(v52 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v54;
        if (v51 != v52) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v52 + 40), *(char **)(v51 + 40), *(void *)(v51 + 48), (uint64_t)(*(void *)(v51 + 48) - *(void *)(v51 + 40)) >> 2);
        }
        v49 += 64;
      }
      uint64_t v46 = *(void *)(v4[10] + 24 * v25);
      uint64_t v47 = *(void *)(v4[10] + 24 * v25 + 8);
    }
    if (v47 != v46) {
      break;
    }
LABEL_52:
    *(void *)buf = &v98;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_58:
    ++v25;
    unint64_t v23 = *(Espresso::net **)a1;
    uint64_t v24 = *(void *)(*(void *)a1 + 32);
    if (v25 >= (*(void *)(*(void *)a1 + 40) - v24) >> 4) {
      goto LABEL_59;
    }
  }
  uint64_t v55 = 0;
  unint64_t v56 = 0;
  while (1)
  {
    unint64_t v57 = *(int *)(v46 + 4 * v56);
    *(void *)(*(void *)(a1 + 80) + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
    unint64_t v58 = (Espresso::layer_shape *)(*(void *)(a1 + 8) + (v57 << 6));
    uint64_t v59 = *(void *)(*(void *)v93 + 104);
    uint64_t v60 = *(void *)(v59 + v55);
    if (!v60)
    {
      uint64_t v81 = Espresso::espresso_os_log_subsystem(0, v45);
      if (!os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_74;
      }
      uint64_t v82 = Espresso::layer_shape::total_dim(v58);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v82;
      float32x4_t v83 = "Fail fast reshape (top_blob) new=%lld old was null";
      float32x4_t v84 = v81;
      uint32_t v85 = 12;
      goto LABEL_84;
    }
    uint64_t v96 = 0;
    unint64_t v97 = 0;
    char v61 = (*(uint64_t (**)(uint64_t, Espresso::layer_shape *, uint64_t *))(*(void *)v60 + 184))(v60, v58, &v96);
    if (v97) {
      nitro::nitro_function::nitro_function(v97);
    }
    if ((v61 & 1) == 0) {
      break;
    }
LABEL_51:
    ++v56;
    uint64_t v46 = *(void *)(v4[10] + 24 * v25);
    v55 += 16;
    if (v56 >= (*(void *)(v4[10] + 24 * v25 + 8) - v46) >> 2) {
      goto LABEL_52;
    }
  }
  uint64_t v62 = (Espresso *)(*(uint64_t (**)(void))(**(void **)(v59 + v55) + 72))(*(void *)(v59 + v55));
  if (v62)
  {
    uint64_t v64 = *(void *)(v59 + v55);
    uint64_t v94 = 0;
    std::string v95 = 0;
    (*(void (**)(uint64_t, Espresso::layer_shape *, uint64_t *))(*(void *)v64 + 16))(v64, v58, &v94);
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    goto LABEL_51;
  }
  uint64_t v81 = Espresso::espresso_os_log_subsystem(v62, v63);
  if (!os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_74;
  }
  uint64_t v90 = Espresso::layer_shape::total_dim(v58);
  int v91 = (*(uint64_t (**)(void))(**(void **)(v59 + v55) + 24))(*(void *)(v59 + v55));
  *(_DWORD *)buf = 134218240;
  *(void *)&uint8_t buf[4] = v90;
  *(_WORD *)&unsigned char buf[12] = 1024;
  *(_DWORD *)&buf[14] = v91;
  float32x4_t v83 = "Fail fast reshape (top_blob) new=%lld, platform=%d";
  float32x4_t v84 = v81;
  uint32_t v85 = 18;
LABEL_84:
  _os_log_debug_impl(&dword_1920CB000, v84, OS_LOG_TYPE_DEBUG, v83, buf, v85);
LABEL_74:

  *(void *)buf = &v98;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  uint64_t v79 = 0;
LABEL_75:
  *(void *)buf = &v104;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_76:
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v111);
  return v79;
}

void sub_19281CA6C()
{
  __cxa_end_catch();
  *(void *)(v0 - 192) = &v1;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 192));
  JUMPOUT(0x19281CB70);
}

void sub_19281CA84(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x19281CB88);
}

void sub_19281CAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  *(void *)(v12 - 192) = &v13;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 192));
  JUMPOUT(0x19281CB70);
}

void sub_19281CAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30) {
    JUMPOUT(0x19281CAF8);
  }
  JUMPOUT(0x19281CB80);
}

void sub_19281CB24()
{
}

void sub_19281CB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v27 = *(void **)(v25 - 152);
  if (v27)
  {
    *(void *)(v25 - 144) = v27;
    operator delete(v27);
  }
  *(void *)(v25 - 192) = &v28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 192));
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v29);
  _Unwind_Resume(a1);
}

void sub_19281CB54(_Unwind_Exception *a1)
{
  *(void *)(v1 - 192) = &v3;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v1 - 192);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v4);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::layer_shape>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a1, a2);
  }
  else
  {
    std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a1, a2);
    uint64_t result = v3 + 64;
  }
  a1[1] = result;
  return result;
}

void sub_19281CC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19281CCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::MPSGraphEngine::Kernels::slice_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, void *a3)
{
  if (a3[1] - *a3 != 64 || a3[4] - a3[3] != 64)
  {
    uint64_t v4 = a2[1];
    v17[0] = *a2;
    v17[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v11, "[Dispatch::MPSGraph::slice_kernel] unsupported: invalid number of inputs or outputs. ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v11, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v17, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_11;
  }
  if (a1[73] == 1)
  {
    if (a1[74])
    {
      uint64_t v4 = a2[1];
      v10[0] = *a2;
      v10[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v11, "[Dispatch::MPSGraph::slice_kernel] unsupported: mode must be SLICE_STATIC ");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v11, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v10, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    else
    {
      int v6 = a1[72];
      if (v6 >= a1[71])
      {
        if (v6 <= 0)
        {
          uint64_t v4 = a2[1];
          v8[0] = *a2;
          v8[1] = v4;
          if (v4) {
            atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v11, "[Dispatch::MPSGraph::slice_kernel] unsupported: end < 1");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v11, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v8, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        }
        else
        {
          if ((a1[70] & 0xFFFFFFFE) == 2) {
            return 1;
          }
          uint64_t v4 = a2[1];
          v7[0] = *a2;
          v7[1] = v4;
          if (v4) {
            atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v11, "[Dispatch::MPSGraph::slice_kernel] unsupported: axis != 2 && axis != 3");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v11, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v7, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        }
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        goto LABEL_15;
      }
      uint64_t v4 = a2[1];
      v9[0] = *a2;
      v9[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v11, "[Dispatch::MPSGraph::slice_kernel] unsupported: end < start");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v11, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v9, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
LABEL_11:
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    uint64_t v18 = (void **)&v15;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v18);
    uint64_t v18 = (void **)&v14;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_15:
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v4) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
    }
  }
  return 0;
}

void sub_19281CF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a23);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::slice_kernel::~slice_kernel(Espresso::MPSGraphEngine::Kernels::slice_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void exitFramework(int a1)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = a1;
  __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
}

uint64_t i2s(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (uint64_t)a1);
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v4[2] = v2;
  v4[3] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v6);
}

void sub_19281D19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

size_t writeByteArray(size_t __stream, int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    int v5 = a3;
    unint64_t v7 = (FILE *)__stream;
    do
    {
      char __ptr = 85;
      __stream = fwrite(&__ptr, 1uLL, 1uLL, v7);
      ++*a2;
      --v5;
    }
    while (v5);
  }
  return __stream;
}

size_t writeArray<float,float>(FILE *__stream, _DWORD *a2, void *__ptr, int a4)
{
  size_t result = fwrite(__ptr, 4uLL, a4, __stream);
  if (result != a4) {
    exitFramework(9);
  }
  *a2 += 4 * a4;
  return result;
}

size_t writeArray<float,short>(FILE *__stream, _DWORD *a2, float *a3, _WORD *__ptr, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = a5;
    uint64_t v8 = __ptr;
    do
    {
      float v9 = *a3;
      if (*a3 <= -5.0)
      {
        LOWORD(v10) = -32767;
      }
      else if (v9 < 5.0 && (int v10 = llroundf(v9 * 6553.6), v10 < 0x8000))
      {
        if (v10 <= -32767) {
          LOWORD(v10) = -32767;
        }
      }
      else
      {
        LOWORD(v10) = 0x7FFF;
      }
      *v8++ = v10;
      ++a3;
      --v7;
    }
    while (v7);
  }
  size_t result = fwrite(__ptr, 2uLL, a5, __stream);
  if (result != a5) {
    exitFramework(9);
  }
  *a2 += 2 * a5;
  return result;
}

size_t writeArray<float,signed char>(FILE *__stream, _DWORD *a2, float *a3, unsigned char *__ptr, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = a5;
    uint64_t v8 = __ptr;
    do
    {
      float v9 = *a3;
      if (*a3 <= -5.0)
      {
        LOBYTE(v10) = -127;
      }
      else if (v9 < 5.0 && (int v10 = llroundf(v9 * 25.6), v10 <= 127))
      {
        if (v10 <= -127) {
          LOBYTE(v10) = -127;
        }
      }
      else
      {
        LOBYTE(v10) = 127;
      }
      *v8++ = v10;
      ++a3;
      --v7;
    }
    while (v7);
  }
  size_t result = fwrite(__ptr, 1uLL, a5, __stream);
  if (result != a5) {
    exitFramework(9);
  }
  *a2 += a5;
  return result;
}

size_t writeArray<signed char,float>(FILE *__stream, _DWORD *a2, char *a3, float *__ptr, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = a5;
    uint64_t v8 = __ptr;
    do
    {
      int v10 = *a3++;
      int v9 = v10;
      float v11 = -5.0;
      if (v10 >= -126)
      {
        float v11 = 5.0;
        if (v9 != 127) {
          float v11 = (float)v9 * 0.039062;
        }
      }
      *v8++ = v11;
      --v7;
    }
    while (v7);
  }
  size_t result = fwrite(__ptr, 4uLL, a5, __stream);
  if (result != a5) {
    exitFramework(9);
  }
  *a2 += 4 * a5;
  return result;
}

size_t writeArray<short,float>(FILE *__stream, _DWORD *a2, __int16 *a3, float *__ptr, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = __ptr;
    uint64_t v8 = a5;
    do
    {
      int v10 = *a3++;
      int v9 = v10;
      float v11 = -5.0;
      if (v10 >= -32766)
      {
        float v11 = 5.0;
        if (v9 != 0x7FFF) {
          float v11 = (float)v9 * 0.00015259;
        }
      }
      *v7++ = v11;
      --v8;
    }
    while (v8);
  }
  size_t result = fwrite(__ptr, 4uLL, a5, __stream);
  if (result != a5) {
    exitFramework(9);
  }
  *a2 += 4 * a5;
  return result;
}

void ___ZN8Espresso14abstract_batch18log_profiler_eventEiyyyy_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v2 = [v0 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v1 = [v2 objectForKeyedSubscript:@"com.apple.espresso.profiler.signposts"];
  Espresso::abstract_batch::log_profiler_event(int,unsigned long long,unsigned long long,unsigned long long,unsigned long long)::profiler_signposts_enabled = [v1 BOOLValue];
}

void sub_19281D5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_context::is_valid_for_submit()
{
  return 0;
}

uint64_t Espresso::abstract_context::set_platform_specific_option(Espresso::abstract_context *this, const char *a2)
{
  return 0;
}

uint64_t Espresso::abstract_context::enable_training(Espresso::abstract_context *this)
{
  uint64_t result = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
  if (result == 80000) {
    *((unsigned char *)this + 44) = 0;
  }
  *((unsigned char *)this + 53) = 1;
  *((unsigned char *)this + 114) = 1;
  return result;
}

void Espresso::abstract_context::batch_callback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  int v5 = a3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN8Espresso16abstract_context14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke;
  block[3] = &__block_descriptor_64_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE_e5_v8__0l;
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100]((uint64_t)v7, a4);
  dispatch_async(v5, block);
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100](v7);
}

void sub_19281D774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso16abstract_context14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v1 + 48))(v1, __p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[1]);
  }
}

void sub_19281D800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *__destroy_helper_block_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void Espresso::base_kernel::build_grads_for_inputs()
{
}

void Espresso::base_kernel::backpropable(void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unsigned __int8 v4 = 1;
  std::vector<BOOL>::vector(__p, v3, &v4);
  std::vector<BOOL>::vector(a2, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_19281D9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return a1;
  }
  std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
  int v5 = *(void **)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = a1[1];
  unint64_t v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    unint64_t v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v9 = v8 - 1;
  }
  unint64_t v10 = v9 >> 6;
  if (v8 >= 0x41) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  *(void *)(*a1 + 8 * v11) = 0;
LABEL_10:
  int v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = &v5[v6 >> 6];
    int v16 = v7 & 0x3F;
    uint64_t v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      uint64_t v18 = 1 << v16;
      if ((*v5 >> v14)) {
        uint64_t v19 = *v17 | v18;
      }
      else {
        uint64_t v19 = *v17 & ~v18;
      }
      uint64_t *v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63) {
        int v14 = 0;
      }
      v17 += v16 == 63;
      if (v16 == 63) {
        int v16 = 0;
      }
      else {
        ++v16;
      }
      int v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

void Espresso::base_kernel::__set_weight_raw_blob_for_serialization(uint64_t **a1, uint64_t a2, long long *a3, const void *a4, size_t a5)
{
  unint64_t v8 = a1 + 19;
  ((void (*)(uint64_t **))(*a1)[20])(a1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v13, a5, 1, 1, 1);
  uint64_t v9 = v13;
  memcpy(*(void **)(v13 + 16), a4, a5);
  uint64_t v15 = a3;
  unint64_t v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a3, &v15);
  unint64_t v11 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count *)v10[8];
  v10[7] = v9;
  v10[8] = (uint64_t)v11;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_19281DBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::base_kernel::clear_weights(Espresso::base_kernel *this)
{
  uint64_t v1 = (void *)((char *)this + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 20));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
}

void Espresso::base_kernel::share_weights(void *a1, void *a2)
{
  id v2 = (void *)*a2;
  if ((void *)*a2 != a1)
  {
    uint64_t v4 = (uint64_t **)(a1 + 19);
    int v5 = (void *)v2[19];
    unint64_t v6 = v2 + 20;
    if (a1[21])
    {
      unint64_t v8 = (uint64_t **)(a1 + 20);
      uint64_t v7 = a1[20];
      uint64_t v9 = a1[19];
      a1[19] = a1 + 20;
      *(void *)(v7 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
      a1[20] = 0;
      a1[21] = 0;
      if (*(void *)(v9 + 8)) {
        unint64_t v10 = *(uint64_t **)(v9 + 8);
      }
      else {
        unint64_t v10 = (uint64_t *)v9;
      }
      unint64_t v27 = a1 + 19;
      uint64_t v28 = v10;
      uint64_t v29 = v10;
      if (!v10
        || (uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v10),
            v5 == v6))
      {
        uint64_t v18 = v5;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v10 + 4), (const std::string *)(v5 + 4));
          uint64_t v12 = v5[7];
          uint64_t v11 = v5[8];
          if (v11) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[8];
          v10[7] = v12;
          v10[8] = v11;
          if (v13) {
            nitro::nitro_function::nitro_function(v13);
          }
          int v14 = *v8;
          uint64_t v15 = (uint64_t **)(a1 + 20);
          int v16 = (uint64_t **)(a1 + 20);
          if (*v8)
          {
            do
            {
              while (1)
              {
                uint64_t v15 = (uint64_t **)v14;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v29 + 4, v14 + 4)) {
                  break;
                }
                int v14 = *v15;
                int v16 = v15;
                if (!*v15) {
                  goto LABEL_18;
                }
              }
              int v14 = v15[1];
            }
            while (v14);
            int v16 = v15 + 1;
          }
LABEL_18:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v15, v16, v29);
          unint64_t v10 = v28;
          uint64_t v29 = v28;
          if (v28) {
            uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v28);
          }
          uint64_t v17 = (void *)v5[1];
          if (v17)
          {
            do
            {
              uint64_t v18 = v17;
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              uint64_t v18 = (void *)v5[2];
              BOOL v19 = *v18 == (void)v5;
              int v5 = v18;
            }
            while (!v19);
          }
          if (!v10) {
            break;
          }
          int v5 = v18;
        }
        while (v18 != v6);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v27);
      int v5 = v18;
    }
    if (v5 != v6)
    {
      long long v20 = a1 + 20;
      do
      {
        uint64_t v21 = (char *)operator new(0x48uLL);
        unint64_t v27 = v21;
        uint64_t v28 = v20;
        LOBYTE(v29) = 0;
        std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v21 + 32), (long long *)v5 + 2);
        LOBYTE(v29) = 1;
        uint64_t v22 = (uint64_t *)*v20;
        unint64_t v23 = (uint64_t **)v20;
        uint64_t v24 = (uint64_t **)v20;
        if (*v20)
        {
          do
          {
            while (1)
            {
              unint64_t v23 = (uint64_t **)v22;
              if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v21 + 4, v22 + 4))break; {
              uint64_t v22 = *v23;
              }
              uint64_t v24 = v23;
              if (!*v23) {
                goto LABEL_38;
              }
            }
            uint64_t v22 = v23[1];
          }
          while (v22);
          uint64_t v24 = v23 + 1;
        }
LABEL_38:
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v23, v24, (uint64_t *)v21);
        unint64_t v27 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v27);
        uint64_t v25 = (void *)v5[1];
        if (v25)
        {
          do
          {
            uint64_t v26 = v25;
            uint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = (void *)v5[2];
            BOOL v19 = *v26 == (void)v5;
            int v5 = v26;
          }
          while (!v19);
        }
        int v5 = v26;
      }
      while (v26 != v6);
    }
  }
}

void sub_19281DEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 16));
  id v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        id v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v2);
  }
  return a1;
}

uint64_t Espresso::base_kernel::input_blob_type(Espresso::base_kernel *this)
{
  return 0;
}

void Espresso::wrong_context_type::~wrong_context_type(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::wrong_batch_type::~wrong_batch_type(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

void *Espresso::abstract_blob_container::create_uninitialized_host_blob@<X0>(Espresso::abstract_blob_container *this@<X0>, void *a2@<X8>)
{
  return std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(a2, *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6) * *((_DWORD *)this + 5));
}

uint64_t Espresso::abstract_blob_container::use_external_cvpixelbuffers()
{
  return 0;
}

void Espresso::abstract_blob_container::__copy_to_CVPixelBuffer()
{
}

void Espresso::abstract_blob_container::__copy_from_MTLTexture()
{
}

void Espresso::abstract_blob_container::__copy_from_CVPixelBuffer(int *a1, uint64_t a2, int a3, CVPixelBufferRef pixelBuffer, __n128 *a5, uint64_t a6)
{
  if (a6) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Batch index > 0 not supported");
  }
  if (!pixelBuffer) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid source CVPixelBufferRef.");
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType == 1111970369)
  {
    uint64_t v11 = 4;
  }
  else
  {
    if (PixelFormatType != 1278226488) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("CVPixelBuffer format must be Planar8 or 32BGRA");
    }
    if (a1[4] != 1) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("kCVPixelFormatType_OneComponent8 supported only for single channel inputs");
    }
    uint64_t v11 = 1;
  }
  v26[2] = pixelBuffer;
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  v26[1] = IOSurface;
  if (IOSurface)
  {
    uint64_t v13 = IOSurface;
    IOSurfaceLock(IOSurface, 5u, 0);
    BaseAddress = IOSurfaceGetBaseAddress(v13);
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  uint64_t v15 = BaseAddress;
  v26[0] = BaseAddress;
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (!v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::memory_error::memory_error(exception);
  }
  size_t v19 = BytesPerRow;
  long long v20 = operator new(0x20uLL);
  uint64_t v24 = v20 + 4;
  uint64_t v25 = v20 + 4;
  *long long v20 = v15;
  v20[1] = Height;
  v20[2] = Width;
  v20[3] = v19;
  std::string __p = v20;
  Espresso::fill_blob_with_images_batch_safe_v2(a2, a1, (const char ***)&__p, v11, v21, a5);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  Espresso::scoped_cvpixelbuffer_iosurface_lock::~scoped_cvpixelbuffer_iosurface_lock((Espresso::scoped_cvpixelbuffer_iosurface_lock *)v26);
}

void sub_19281E1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  Espresso::scoped_cvpixelbuffer_iosurface_lock::~scoped_cvpixelbuffer_iosurface_lock((Espresso::scoped_cvpixelbuffer_iosurface_lock *)&a12);
  _Unwind_Resume(a1);
}

void Espresso::scoped_cvpixelbuffer_iosurface_lock::~scoped_cvpixelbuffer_iosurface_lock(Espresso::scoped_cvpixelbuffer_iosurface_lock *this)
{
  id v2 = (__IOSurface *)*((void *)this + 1);
  if (v2) {
    IOSurfaceUnlock(v2, 5u, 0);
  }
  else {
    CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 2), 1uLL);
  }
}

uint64_t Espresso::switch_engine_batch::log_profiler_event(Espresso::switch_engine_batch *this)
{
  uint64_t result = *((void *)this + 15);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t Espresso::switch_engine_batch::sync_point(Espresso::switch_engine_batch *this)
{
  uint64_t result = *((void *)this + 15);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t Espresso::switch_engine_batch::sync_wait_for_scheduled(Espresso::switch_engine_batch *this)
{
  uint64_t result = *((void *)this + 15);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t Espresso::switch_engine_batch::sync_wait(Espresso::switch_engine_batch *this)
{
  uint64_t result = *((void *)this + 15);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void Espresso::switch_engine_batch::~switch_engine_batch(Espresso::switch_engine_batch *this)
{
  *(void *)this = &unk_1EE350548;
  id v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::abstract_batch::~abstract_batch(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE350548;
  id v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::abstract_batch::~abstract_batch(this);
}

void Espresso::base_kernel::get_parameter_blob<unsigned short,5>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a1 + 64), a2);
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported blob_key for kernel parameter.");
  }
  int v5 = v4;
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6) {
    goto LABEL_14;
  }
  if (!v6) {
    goto LABEL_14;
  }
  unint64_t v8 = v6;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = ((uint64_t (*)(std::__shared_weak_count *))v6->__on_zero_shared_weak)(v6);
  unint64_t v6 = v7;
  if (v9 != 1 || (shared_owners = v8[7].__shared_owners_, unint64_t v6 = v7, !shared_owners))
  {
LABEL_14:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_15;
  }
  uint64_t v11 = *(const void **)(shared_owners + 56);
  if (v11)
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(shared_owners + 64);
      *a3 = v12;
      a3[1] = v13;
      unint64_t v6 = v7;
      if (v13)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_23;
      }
LABEL_15:
      if (!v6) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_23:
  unint64_t v6 = v7;
  if (v7) {
LABEL_16:
  }
    nitro::nitro_function::nitro_function(v6);
LABEL_17:
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_19281E578(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<Espresso::blob_cpu  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000192DE941FLL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<Espresso::blob_cpu  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void Espresso::base_kernel::set_parameter_blob<unsigned short,5>()
{
}

{
  while (1)
    ;
}

void sub_19281E80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::is_ptr_aligned(Espresso *this, void *a2)
{
  return (this & 0x3F) == 0;
}

void Espresso::platform_to_string(int a1@<W0>, void *a2@<X8>)
{
  int v7 = a1;
  Espresso::abstract_engine_factory::shared(&v8);
  Espresso::abstract_engine_factory::engine_for_platform(v8, &v7, &v5);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  unint64_t v3 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  std::string::basic_string[abi:ne180100]<0>(a2, v3);
  uint64_t v4 = v6;
  if (v6)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_19281E930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::is_ane_platform(unsigned int a1)
{
  BOOL v1 = a1 == 10011 || a1 >> 1 == 5003;
  return a1 == 10008 || v1;
}

BOOL Espresso::is_ane_compiler_platform(int a1)
{
  return a1 == 10008 || a1 == 10011;
}

BOOL Espresso::is_ane_runtime_platform(unsigned int a1)
{
  return a1 >> 1 == 5003;
}

std::string *Espresso::compute_path_to_string@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      id v2 = "FP32";
      goto LABEL_10;
    case 1:
      id v2 = "FP16";
      goto LABEL_10;
    case 2:
      id v2 = "S8";
      goto LABEL_10;
    case 3:
      id v2 = "I32";
      goto LABEL_10;
    case 4:
      id v2 = "U8";
      goto LABEL_10;
    case 5:
      id v2 = "U16";
      goto LABEL_10;
    case 7:
      id v2 = "I16";
LABEL_10:
      uint64_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
      break;
    default:
      uint64_t result = std::to_string(a2, a1);
      break;
  }
  return result;
}

uint64_t Espresso::is_floating_point_compute_path(unsigned int a1)
{
  return (a1 > 0xE) | (0x3003u >> a1) & 1;
}

uint64_t Espresso::is_integral_compute_path(unsigned int a1)
{
  return (a1 > 0xD) | (0xFFCu >> a1) & 1;
}

uint64_t Espresso::abstract_context::set_option(Espresso::abstract_context *this, const char *a2, uint64_t a3)
{
  int v6 = Espresso::abstract_context::set_generic_option(this, a2, a3);
  return v6 | (*(unsigned int (**)(Espresso::abstract_context *, const char *, uint64_t))(*(void *)this
                                                                                                  + 144))(this, a2, a3);
}

uint64_t Espresso::abstract_context::set_generic_option(Espresso::abstract_context *this, const char *__s1, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!strcmp(__s1, "random_seed"))
  {
    unsigned int v8 = a3 + ((a3 / 0x7FFFFFFFu) | ((a3 / 0x7FFFFFFFu) << 31));
    if (v8 <= 1) {
      unsigned int v8 = 1;
    }
    **((_DWORD **)this + 11) = v8;
    return 1;
  }
  int v6 = strcmp(__s1, "implicit_casting_enabled");
  if (a3 >= 1 && !v6)
  {
    uint64_t result = 1;
    *((unsigned char *)this + 54) = 1;
    return result;
  }
  int v9 = strncmp(__s1, "fast_reshape", 0xDuLL);
  if (a3 >= 1 && !v9)
  {
    uint64_t result = 1;
    *((unsigned char *)this + 126) = 1;
    return result;
  }
  int v10 = strncmp(__s1, "is_reload_info_caching_enabled", 0x1EuLL);
  if (a3 >= 1 && !v10)
  {
    uint64_t result = 1;
    *((unsigned char *)this + 55) = 1;
    return result;
  }
  int v11 = strcmp(__s1, "compute_unit_mask");
  if (a3 >= 1 && !v11)
  {
    *((void *)this + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = a3;
    return 1;
  }
  int v12 = strcmp(__s1, "is_from_virtual_machine");
  if (a3 < 1 || v12)
  {
    int v13 = strncmp(__s1, "in_memory_model", 0x100uLL);
    if (a3 < 1 || v13)
    {
      int v14 = (Espresso *)strcmp(__s1, "need_to_keep_blob_storage");
      if (a3 < 1 || v14)
      {
        int v16 = Espresso::espresso_os_log_subsystem(v14, v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          int v17 = 136315138;
          uint64_t v18 = __s1;
          _os_log_debug_impl(&dword_1920CB000, v16, OS_LOG_TYPE_DEBUG, "option %s does not exist in generic options", (uint8_t *)&v17, 0xCu);
        }

        return 0;
      }
      else
      {
        uint64_t result = 1;
        *((unsigned char *)this + 72) = 1;
      }
    }
    else
    {
      uint64_t result = 1;
      *((unsigned char *)this + 123) = 1;
    }
  }
  else
  {
    uint64_t result = 1;
    *((unsigned char *)this + 121) = 1;
  }
  return result;
}

void Espresso::abstract_engine::~abstract_engine(Espresso::abstract_engine *this)
{
  *(void *)this = &unk_1EE332290;
  BOOL v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

BOOL Espresso::blobcpy(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (!*a2)
  {
    uint64_t v7 = *a3 + 72;
    uint64_t v8 = *(void *)(*(void *)v7 + 8);
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a3 + 32))();
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 24))(v32, v8, v7, v9);
    long long v10 = v32[0];
    v32[0] = 0uLL;
    int v11 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v10;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      if (*((void *)&v32[0] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v32[0] + 1));
      }
    }
    uint64_t v6 = *a2;
  }
  uint64_t v12 = *a3;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(*a3 + 112);
  if (v6 != v12) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v6 + 128), *(char **)(v12 + 128), *(void *)(v12 + 136), (uint64_t)(*(void *)(v12 + 136) - *(void *)(v12 + 128)) >> 2);
  }
  Espresso::abstract_blob_container::shape((char *)v32, *a2);
  Espresso::abstract_blob_container::shape(v29, *a3);
  BOOL v13 = Espresso::layer_shape::operator==((uint64_t)v32, (uint64_t)v29);
  if (__p)
  {
    long long v31 = __p;
    operator delete(__p);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (!v13)
  {
    uint64_t v14 = *a2;
    Espresso::abstract_blob_container::shape((char *)v32, *a3);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    (*(void (**)(uint64_t, _OWORD *, uint64_t *))(*(void *)v14 + 16))(v14, v32, &v27);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
  }
  uint64_t v15 = *a2;
  int v16 = (std::__shared_weak_count *)a3[1];
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 144))(v15, a1, &v25, &v23);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if ((v17 & 1) == 0)
  {
    (*(void (**)(_OWORD *__return_ptr))(*(void *)*a3 + 192))(v32);
    if ((***(unsigned int (****)(void))(*(void *)(*a3 + 72) + 8))() == 10007
      || (uint64_t v18 = *(unsigned int (****)(void))(*(void *)(*a3 + 72) + 8), (**v18)(v18) == 10006))
    {
      (*(void (**)(void))(**(void **)a1 + 40))();
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)*a3 + 40))(*a3, a1, v32);
    if ((v19 & 1) == 0)
    {
      long long v20 = *(unsigned int (****)(void))(*(void *)(*a3 + 72) + 8);
      if ((**v20)(v20))
      {
        uint64_t v21 = *(unsigned int (****)(void))(*(void *)(*a3 + 72) + 8);
        if ((**v21)(v21) != 100) {
          (*(void (**)(void))(**(void **)a1 + 40))();
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)*a2 + 48))(*a2, a1, v32);
    if (*((void *)&v32[0] + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v32[0] + 1));
    }
  }
  return !v13;
}

void sub_19281F188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL Espresso::base_kernel::has_blob_file_metadata(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 24), a2) != 0;
}

unsigned __int8 *Espresso::base_kernel::get_parameter_blob@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a1 + 64), a2);
  if (!result) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported blob_key for kernel parameter.");
  }
  uint64_t v5 = *((void *)result + 6);
  *a3 = *((void *)result + 5);
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::base_kernel::set_parameter_blob()
{
}

void sub_19281F4BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)va);
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  _Unwind_Resume(a1);
}

double Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(Espresso::base_kernel::validate_for_engine_warning_t *this)
{
  *((void *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 22) = 1;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 1;
  return result;
}

{
  double result;

  *((void *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 22) = 1;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 1;
  return result;
}

uint64_t Espresso::is_espresso_os_log_requested(int a1)
{
  if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
    dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
  }
  return Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[a1];
}

char *___ZN8Espresso28is_espresso_os_log_requestedENS_20espresso_os_log_flagE_block_invoke()
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    double result = getenv(Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::log_env_vars[i]);
    if (result)
    {
      if (*result == 49) {
        Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[i] = 1;
      }
    }
  }
  return result;
}

void Espresso::switch_engine_batch::switch_to_engine(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  if (*(void *)a2) {
    unsigned int v8 = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = *((unsigned int *)a1 + 34);
  LOBYTE(v18[0]) = *((unsigned char *)a1 + 40);
  memset(&v18[1], 0, 32);
  long long v19 = 0u;
  long long v20 = 0u;
  int v21 = 0;
  if (LOBYTE(v18[0]))
  {
    *(void *)&v18[2] = v9;
    *(void *)&v18[4] = v10;
    *(void *)&v18[6] = v8;
    v18[1] = 723714144;
    kdebug_trace();
  }
  if (!*(void *)a2 || v8 != *((_DWORD *)a1 + 34) || (uint64_t v11 = a1[15]) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 16))(a1, v9, v10);
    uint64_t v12 = *a1;
    if (v8 == 100 || !v8 || !*((unsigned char *)a1 + 96) || (a3 & 1) != 0) {
      BOOL v13 = (void (**)(uint64_t *))(v12 + 24);
    }
    else {
      BOOL v13 = (void (**)(uint64_t *))(v12 + 32);
    }
    (*v13)(a1);
    if (*(void *)a2)
    {
      (***(void (****)(long long *__return_ptr))a2)(&v17);
      long long v14 = v17;
      long long v17 = 0uLL;
      uint64_t v15 = (std::__shared_weak_count *)a1[16];
      *(_OWORD *)(a1 + 15) = v14;
      if (v15)
      {
        nitro::nitro_function::nitro_function(v15);
        if (*((void *)&v17 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v17 + 1));
        }
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1[15] + 56))(a1[15], a1);
      *((_DWORD *)a1 + 34) = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
    }
    goto LABEL_23;
  }
  if (v8 >> 1 == 5003 && *((unsigned char *)a1 + 96))
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 24))(a1, v9, v10);
LABEL_23:
    uint64_t v11 = a1[15];
  }
  uint64_t v16 = a1[16];
  *a4 = v11;
  a4[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v18);
}

void sub_19281F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);
  _Unwind_Resume(a1);
}

unint64_t Espresso::abstract_blob_container::get_src_crop_rect(unint64_t a1, unint64_t a2, _DWORD *a3, int a4, int a5)
{
  int v5 = a3[20];
  if (v5) {
    BOOL v6 = v5 == 3;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = (int)(float)((float)((float)a1 / (float)a4) * (float)a5);
    int v8 = a2 - v7;
    if ((int)a2 >= v7) {
      int v9 = a2 - v7;
    }
    else {
      int v9 = v8 + 1;
    }
    unsigned int v10 = v9 >> 1;
    int v11 = (int)(float)((float)((float)a2 / (float)a5) * (float)a4);
    int v12 = a1 - v11;
    if ((int)a1 < v11) {
      ++v12;
    }
    int v13 = v12 >> 1;
    BOOL v14 = v8 <= -2;
    if (v8 <= -2) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v10;
    }
    if (v14) {
      unsigned int v18 = v13;
    }
    else {
      unsigned int v18 = 0;
    }
    if (v5 == 3)
    {
      int v15 = a3[26];
      if (v15 >= a4) {
        int v15 = a4;
      }
      unsigned int v18 = v15 & ~(v15 >> 31);
      if (a3[27] >= a5) {
        int v16 = a5;
      }
      else {
        int v16 = a3[27];
      }
      uint64_t v17 = v16 & ~(v16 >> 31);
    }
  }
  else
  {
    uint64_t v17 = 0;
    unsigned int v18 = 0;
  }
  return v18 | (unint64_t)(v17 << 32);
}

void Espresso::check_backpropable_result_t::backpropable_input_names(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v6 != a1[1]) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("input_names and inputs_backpropable should be of same length");
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  if (v4 != v5)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if ((*(void *)(*a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11))
      {
        int v12 = (long long *)(*a2 + v9);
        if ((unint64_t)v10 >= *(void *)(a3 + 16))
        {
          unsigned int v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)v12);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v12);
          ++v10;
        }
        *(void *)(a3 + 8) = v10;
        unint64_t v6 = a1[1];
      }
      ++v11;
      v9 += 24;
    }
    while (v11 < v6);
  }
}

void sub_19281FAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs(Espresso::check_backpropable_result_t *this@<X0>, void *a2@<X8>)
{
  unsigned __int8 v3 = 0;
  std::vector<BOOL>::vector(__p, (unint64_t)this, &v3);
  std::vector<BOOL>::vector(a2, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_19281FB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::ane_kernel::get_mmapped_info_for_js_key(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = *(void *)(a2 + 224);
  if (v4)
  {
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, a3);
    uint64_t v10 = *(void *)(a2 + 224);
    if (v9)
    {
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(*(void *)v10 + 72))(*(void *)(a2 + 224), a3);
LABEL_4:
      a4[1] = (*(int (**)(void, uint64_t))(**(void **)(*(void *)a1 + 576) + 32))(*(void *)(*(void *)a1 + 576), v11);
      a4[2] = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)a1 + 576) + 24))(*(void *)(*(void *)a1 + 576), v11);
      *a4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)a1 + 576) + 80))(*(void *)(*(void *)a1 + 576), v11);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "weights");
    int v12 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v10 + 24))(v10, __p);
    int v13 = v12;
    if (v20 < 0)
    {
      operator delete(__p[0]);
      if (!v13) {
        return;
      }
    }
    else if (!v12)
    {
      return;
    }
    uint64_t v14 = *(void *)(a2 + 224);
    std::string::basic_string[abi:ne180100]<0>(__p, "weights");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v14 + 120))(&v17, v14, __p);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 24))(v17, a3);
    char v16 = v15;
    if (v15) {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 72))(v17, a3);
    }
    else {
      uint64_t v11 = 0;
    }
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    if (v16) {
      goto LABEL_4;
    }
  }
}

void sub_19281FDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::get_offset_for_js_key(unsigned char *a1, uint64_t *a2)
{
  unsigned __int8 v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *))(*(void *)a1 + 120))(&v7, a1, &v5);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  if (a1[208]) {
    return 0;
  }
  return v8;
}

void sub_19281FE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::ane_kernel::add_high_precision_rsqrt_units_extended_lut(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3, uint64_t a4, int32x2_t a5)
{
  int v94 = *((unsigned __int8 *)a2 + 552);
  uint64_t v147 = 0;
  unint64_t v148 = 0;
  unint64_t v149 = 0;
  float32x4_t v144 = 0;
  unint64_t v145 = 0;
  unint64_t v146 = 0;
  float32x4_t v141 = 0;
  float32x4_t v142 = 0;
  unint64_t v143 = 0;
  std::vector<float>::reserve((void **)&v144, 0xFuLL);
  std::vector<float>::reserve((void **)&v141, 0xFuLL);
  for (int i = -7; i != 8; ++i)
  {
    float v10 = 1.0 / exp2((double)i + (double)i);
    uint64_t v11 = v145;
    if ((unint64_t)v145 >= v146)
    {
      int v13 = v144;
      uint64_t v14 = v145 - v144;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        goto LABEL_116;
      }
      uint64_t v16 = v146 - (void)v144;
      if ((uint64_t)(v146 - (void)v144) >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
        int v13 = v144;
        uint64_t v11 = v145;
      }
      else
      {
        uint64_t v18 = 0;
      }
      long long v19 = (float *)(v17 + 4 * v14);
      float *v19 = v10;
      int v12 = v19 + 1;
      while (v11 != v13)
      {
        int v20 = *((_DWORD *)v11-- - 1);
        *((_DWORD *)v19-- - 1) = v20;
      }
      float32x4_t v144 = v19;
      unint64_t v145 = v12;
      unint64_t v146 = v17 + 4 * v18;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      float *v145 = v10;
      int v12 = v11 + 1;
    }
    float v21 = fabsf(sqrtf(v10));
    unint64_t v145 = v12;
    uint64_t v22 = v142;
    if ((unint64_t)v142 >= v143)
    {
      uint64_t v24 = v141;
      uint64_t v25 = v142 - v141;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62) {
LABEL_116:
      }
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      uint64_t v27 = v143 - (void)v141;
      if ((uint64_t)(v143 - (void)v141) >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v28);
        uint64_t v24 = v141;
        uint64_t v22 = v142;
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = (float *)(v28 + 4 * v25);
      *uint64_t v30 = v21;
      uint64_t v23 = v30 + 1;
      while (v22 != v24)
      {
        int v31 = *((_DWORD *)v22-- - 1);
        *((_DWORD *)v30-- - 1) = v31;
      }
      float32x4_t v141 = v30;
      float32x4_t v142 = v23;
      unint64_t v143 = v28 + 4 * v29;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      float *v142 = v21;
      uint64_t v23 = v22 + 1;
    }
    float32x4_t v142 = v23;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v139, 30, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v137, 30, 1, 1, 1);
  uint64_t v32 = 0;
  uint64_t v33 = v144;
  uint64_t v34 = v139;
  uint64_t v35 = *(const unsigned __int8 **)(v139 + 16);
  do
  {
    _S0 = v33[v32];
    __asm { FCVT            H0, S0 }
    *(_WORD *)&v35[2 * v32++] = LOWORD(_S0);
  }
  while (v32 != 15);
  uint64_t v41 = 0;
  long long v42 = v141;
  uint64_t v43 = v137;
  uint64_t v44 = *(void *)(v137 + 16);
  do
  {
    _S0 = v42[v41];
    __asm { FCVT            H0, S0 }
    *(_WORD *)(v44 + 2 * v41++) = LOWORD(_S0);
  }
  while (v41 != 15);
  uint64_t v92 = this;
  uint64_t v46 = v140;
  if (v140)
  {
    atomic_fetch_add_explicit(&v140->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v35 = *(const unsigned __int8 **)(v34 + 16);
  }
  uint64_t v47 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), v35, *(int *)(v34 + 8));
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  uint64_t v48 = v138;
  if (v138) {
    atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v49 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v43 + 16), *(int *)(v43 + 8));
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v126, a3);
  uint64_t v50 = v133;
  uint64_t v133 = @"Conv";

  uint64_t v51 = objc_opt_new();
  uint64_t v52 = [NSNumber numberWithInt:a4];
  [v51 setObject:v52 forKeyedSubscript:@"Channels"];

  [v51 setObject:@"Conv" forKeyedSubscript:@"Type"];
  [v51 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"KernelGroupReuse"];
  [v51 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  [v51 setObject:&unk_1EE3AEE90 forKeyedSubscript:@"KernelWidth"];
  [v51 setObject:&unk_1EE3AEE90 forKeyedSubscript:@"KernelHeight"];
  long long v53 = NSNumber;
  if (v94) {
    uint64_t weights_file_index = 0;
  }
  else {
  uint64_t v55 = objc_msgSend(v53, "numberWithUnsignedLong:", weights_file_index, v92);
  }
  [v51 setObject:v55 forKeyedSubscript:@"KernelIndex"];

  unint64_t v56 = [NSNumber numberWithInt:v47];
  [v51 setObject:v56 forKeyedSubscript:@"KernelOffset"];

  [v51 setObject:&unk_1EE3AF160 forKeyedSubscript:@"Step"];
  [v51 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadLeft"];
  [v51 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadRight"];
  [v51 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadTop"];
  [v51 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadBot"];
  [v51 setObject:@"Zero" forKeyedSubscript:@"PaddingMode"];
  int v136 = a4;
  int v135 = 15 * a4;
  objc_storeStrong(&v134, v51);
  uint64_t v57 = 0;
  float32x2_t v58 = (float32x2_t)vdup_lane_s32(a5, 0);
  uint64x2_t v59 = (uint64x2_t)xmmword_192DBFE30;
  __asm
  {
    FMOV            V10.2S, #3.0
    FMOV            V11.2S, #1.0
  }
  int64x2_t v95 = vdupq_n_s64(2uLL);
  uint64x2_t v96 = (uint64x2_t)vdupq_n_s64(0x21uLL);
  do
  {
    unsigned __int8 v99 = vmovn_s64((int64x2_t)vcgtq_u64(v96, v59)).u8[0];
    int64x2_t v101 = (int64x2_t)v59;
    v62.i32[0] = v57;
    v62.i32[1] = v57 + 1;
    float32x2_t v63 = vadd_f32(vmla_f32(_D11, _D10, vmul_f32(vcvt_f32_s32(v62), (float32x2_t)0x3D0000003D000000)), v58);
    float v97 = v63.f32[0];
    float v98 = powf(v63.f32[1], -0.5);
    float v64 = powf(v97, -0.5);
    if (v99) {
      *((float *)v124 + v57) = v64;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x21uLL), *(uint64x2_t *)&v101)).i32[1]) {
      *((float *)v124 + v57 + 1) = v98;
    }
    v57 += 2;
    uint64x2_t v59 = (uint64x2_t)vaddq_s64(v101, v95);
  }
  while (v57 != 34);
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v115, a3);
  v113[6] = v124[6];
  v113[7] = v124[7];
  int v114 = v125;
  v113[2] = v124[2];
  v113[3] = v124[3];
  v113[4] = v124[4];
  v113[5] = v124[5];
  v113[0] = v124[0];
  v113[1] = v124[1];
  uint64_t v65 = Espresso::ANECompilerEngine::generate_v1_custom_neuron_from_values((float *)v113, 0, 0.99951, 0.0, 4.0, 0.0, 1.0, 4.0, 0.00001);
  uint64_t v66 = v49;
  id v67 = v123;
  id v123 = v65;

  long long v68 = v122;
  uint64_t v122 = @"NeuronCustom";

  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v102, a3);
  long long v69 = v109;
  uint64_t v109 = @"Conv";

  float32x4_t v70 = objc_opt_new();
  unint64_t v71 = [NSNumber numberWithInt:(15 * a4)];
  [v70 setObject:v71 forKeyedSubscript:@"Channels"];

  [v70 setObject:@"Conv" forKeyedSubscript:@"Type"];
  [v70 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"KernelGroupReuse"];
  [v70 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  [v70 setObject:&unk_1EE3AEE90 forKeyedSubscript:@"KernelWidth"];
  [v70 setObject:&unk_1EE3AEE90 forKeyedSubscript:@"KernelHeight"];
  uint64_t v72 = NSNumber;
  if (v94) {
    uint64_t v73 = 0;
  }
  else {
  unint64_t v74 = [v72 numberWithUnsignedLong:v73];
  }
  [v70 setObject:v74 forKeyedSubscript:@"KernelIndex"];

  uint64_t v75 = [NSNumber numberWithInt:v66];
  [v70 setObject:v75 forKeyedSubscript:@"KernelOffset"];

  [v70 setObject:&unk_1EE3AF178 forKeyedSubscript:@"Step"];
  [v70 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadLeft"];
  [v70 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadRight"];
  [v70 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadTop"];
  [v70 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadBot"];
  [v70 setObject:@"Zero" forKeyedSubscript:@"PaddingMode"];
  int v111 = a4;
  int v112 = a4;
  objc_storeStrong(&v110, v70);
  uint64_t v76 = v148;
  if ((unint64_t)v148 >= v149)
  {
    unint64_t v78 = 0x8E38E38E38E38E39 * (((uint64_t)v148 - v147) >> 4);
    if (v78 + 1 > 0x1C71C71C71C71C7) {
      goto LABEL_117;
    }
    unint64_t v79 = 0x1C71C71C71C71C72 * ((uint64_t)(v149 - v147) >> 4);
    if (v79 <= v78 + 1) {
      unint64_t v79 = v78 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v149 - v147) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v80 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v80 = v79;
    }
    float v154 = &v149;
    if (v80) {
      unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v80);
    }
    else {
      uint64_t v81 = 0;
    }
    uint64_t v150 = (void **)v80;
    uint64_t v151 = (std::string *)(v80 + 144 * v78);
    v152 = v151;
    unint64_t v153 = v80 + 144 * v81;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v151, (uint64_t)v126);
    v152 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v147, &v150);
    long long v77 = v148;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v150);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v148, (uint64_t)v126);
    long long v77 = v76 + 6;
  }
  unint64_t v148 = v77;
  if ((unint64_t)v77 >= v149)
  {
    unint64_t v83 = 0x8E38E38E38E38E39 * (((uint64_t)v77 - v147) >> 4);
    if (v83 + 1 > 0x1C71C71C71C71C7) {
      goto LABEL_117;
    }
    unint64_t v84 = 0x1C71C71C71C71C72 * ((uint64_t)(v149 - v147) >> 4);
    if (v84 <= v83 + 1) {
      unint64_t v84 = v83 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v149 - v147) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v85 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v85 = v84;
    }
    float v154 = &v149;
    if (v85) {
      unint64_t v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v85);
    }
    else {
      uint64_t v86 = 0;
    }
    uint64_t v150 = (void **)v85;
    uint64_t v151 = (std::string *)(v85 + 144 * v83);
    v152 = v151;
    unint64_t v153 = v85 + 144 * v86;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v151, (uint64_t)v115);
    v152 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v147, &v150);
    uint64_t v82 = v148;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v150);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v77, (uint64_t)v115);
    uint64_t v82 = v77 + 6;
  }
  unint64_t v148 = v82;
  if ((unint64_t)v82 < v149)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v82, (uint64_t)v102);
    uint64_t v87 = v82 + 6;
    goto LABEL_95;
  }
  unint64_t v88 = 0x8E38E38E38E38E39 * (((uint64_t)v82 - v147) >> 4);
  if (v88 + 1 > 0x1C71C71C71C71C7) {
LABEL_117:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  unint64_t v89 = 0x1C71C71C71C71C72 * ((uint64_t)(v149 - v147) >> 4);
  if (v89 <= v88 + 1) {
    unint64_t v89 = v88 + 1;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(v149 - v147) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v90 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v90 = v89;
  }
  float v154 = &v149;
  if (v90) {
    unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v90);
  }
  else {
    uint64_t v91 = 0;
  }
  uint64_t v150 = (void **)v90;
  uint64_t v151 = (std::string *)(v90 + 144 * v88);
  v152 = v151;
  unint64_t v153 = v90 + 144 * v91;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v151, (uint64_t)v102);
  v152 += 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v147, &v150);
  uint64_t v87 = v148;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v150);
LABEL_95:
  unint64_t v148 = v87;
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v93 + 32))(v93, a2, &v147);

  if (v107 < 0) {
    operator delete(__p);
  }
  uint64_t v150 = (void **)&v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v150);
  uint64_t v150 = (void **)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v150);
  if (v103 < 0) {
    operator delete(v102[0]);
  }

  if (v120 < 0) {
    operator delete(v119);
  }
  v102[0] = &v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
  v102[0] = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
  if (v116 < 0) {
    operator delete(v115[0]);
  }

  if (v131 < 0) {
    operator delete(v130);
  }
  v115[0] = &v129;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
  v115[0] = &v128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
  if (v127 < 0) {
    operator delete(v126[0]);
  }
  if (v138) {
    nitro::nitro_function::nitro_function(v138);
  }
  if (v140) {
    nitro::nitro_function::nitro_function(v140);
  }
  if (v141)
  {
    float32x4_t v142 = v141;
    operator delete(v141);
  }
  if (v144)
  {
    unint64_t v145 = v144;
    operator delete(v144);
  }
  v126[0] = &v147;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
}

void sub_192820B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id a58)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v60 - 168);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a23);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a58);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x2A0]);
  if (STACK[0x338]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x338]);
  }
  int32x2_t v62 = *(std::__shared_weak_count **)(v60 - 248);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  float32x2_t v63 = *(void **)(v60 - 240);
  if (v63)
  {
    *(void *)(v60 - 232) = v63;
    operator delete(v63);
  }
  float v64 = *(void **)(v60 - 216);
  if (v64)
  {
    *(void *)(v60 - 208) = v64;
    operator delete(v64);
  }
  STACK[0x2A0] = v60 - 192;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::add_softmax_exp_units(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v28, a3);
  uint64_t v5 = v35;
  uint64_t v35 = @"NeuronCustom";

  unint64_t v6 = Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)&__block_literal_global_87, -12.201, -5.8186, -25.0, -5.6241, 0.0, 0.0);
  uint64_t v7 = Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)&__block_literal_global_87, -5.6241, -0.17043, -5.8186, 0.0, 0.0, 1.0);
  objc_storeStrong(v36, v6);
  unsigned int v8 = v38;
  if ((unint64_t)v38 >= v39)
  {
    unint64_t v10 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
    if (v10 + 1 > 0x1C71C71C71C71C7) {
      goto LABEL_42;
    }
    unint64_t v11 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
    if (v11 <= v10 + 1) {
      unint64_t v11 = v10 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v12 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v44 = &v39;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v40 = (void **)v12;
    uint64_t v41 = (std::string *)(v12 + 144 * v10);
    long long v42 = v41;
    unint64_t v43 = v12 + 144 * v13;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
    v42 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
    uint64_t v9 = v38;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    uint64_t v9 = v8 + 6;
  }
  uint64_t v38 = v9;
  objc_storeStrong(v36, v7);
  uint64_t v14 = v38;
  if ((unint64_t)v38 < v39)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    unint64_t v15 = v14 + 6;
    goto LABEL_25;
  }
  unint64_t v16 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
  if (v16 + 1 > 0x1C71C71C71C71C7) {
LABEL_42:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  unint64_t v17 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
  if (v17 <= v16 + 1) {
    unint64_t v17 = v16 + 1;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v18 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v18 = v17;
  }
  uint64_t v44 = &v39;
  if (v18) {
    unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v18);
  }
  else {
    uint64_t v19 = 0;
  }
  BOOL v40 = (void **)v18;
  uint64_t v41 = (std::string *)(v18 + 144 * v16);
  long long v42 = v41;
  unint64_t v43 = v18 + 144 * v19;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
  v42 += 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
  unint64_t v15 = v38;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
LABEL_25:
  uint64_t v38 = v15;
  int v20 = objc_opt_new();
  [v20 setObject:@"Add" forKeyedSubscript:@"Type"];
  float v21 = v35;
  uint64_t v35 = @"ElementWise";

  objc_storeStrong(v36, v20);
  uint64_t v22 = v38;
  if ((unint64_t)v38 >= v39)
  {
    unint64_t v24 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
    if (v24 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v25 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
    if (v25 <= v24 + 1) {
      unint64_t v25 = v24 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v26 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v26 = v25;
    }
    uint64_t v44 = &v39;
    if (v26) {
      unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v26);
    }
    else {
      uint64_t v27 = 0;
    }
    BOOL v40 = (void **)v26;
    uint64_t v41 = (std::string *)(v26 + 144 * v24);
    long long v42 = v41;
    unint64_t v43 = v26 + 144 * v27;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
    v42 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
    uint64_t v23 = v38;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    uint64_t v23 = v22 + 6;
  }
  uint64_t v38 = v23;
  (*(void (**)(Espresso::ANECompilerEngine::ane_kernel *, Espresso::ANECompilerEngine::compiler *, uint64_t *, uint64_t))(*(void *)this + 40))(this, a2, &v37, 1);

  if (v33 < 0) {
    operator delete(__p);
  }
  BOOL v40 = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  BOOL v40 = (void **)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  v28[0] = &v37;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
}

void sub_192821124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v30 - 136);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::add_softmax_inverse_units_extended_lut(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, uint64_t a3, unint64_t a4, id *a5)
{
  int v7 = *((unsigned __int8 *)a2 + 552);
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  unint64_t v123 = 0;
  unint64_t v8 = (unint64_t)fmax((double)(unint64_t)ceil(log2((double)a4)), 1.0);
  uint64_t v118 = 0;
  float32x4_t v119 = 0;
  unint64_t v120 = 0;
  std::vector<float>::reserve((void **)&v118, v8);
  if (v8)
  {
    unint64_t v9 = 0;
    unint64_t v10 = v119;
    do
    {
      float v11 = 1.0 / exp2((double)v9);
      if ((unint64_t)v10 >= v120)
      {
        uint64_t v13 = v118;
        uint64_t v14 = v10 - v118;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v120 - (void)v118;
        if ((uint64_t)(v120 - (void)v118) >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
          uint64_t v13 = v118;
          unint64_t v10 = v119;
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (float *)(v17 + 4 * v14);
        float *v19 = v11;
        unint64_t v12 = v19 + 1;
        while (v10 != v13)
        {
          int v20 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        uint64_t v118 = v19;
        float32x4_t v119 = v12;
        unint64_t v120 = v17 + 4 * v18;
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        float *v10 = v11;
        unint64_t v12 = v10 + 1;
      }
      float32x4_t v119 = v12;
      ++v9;
      unint64_t v10 = v12;
    }
    while (v9 != v8);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v116, 2 * v8, 1, 1, 1);
  uint64_t v21 = v116;
  uint64_t v22 = *(const unsigned __int8 **)(v116 + 16);
  if (v8)
  {
    uint64_t v23 = v118;
    unint64_t v24 = *(_WORD **)(v116 + 16);
    unint64_t v25 = v8;
    do
    {
      int v26 = *(_DWORD *)v23++;
      _S0 = v26;
      __asm { FCVT            H0, S0 }
      *v24++ = _S0;
      --v25;
    }
    while (v25);
  }
  uint64_t v32 = v117;
  if (v117)
  {
    atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v22 = *(const unsigned __int8 **)(v21 + 16);
  }
  uint64_t v33 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), v22, *(int *)(v21 + 8));
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v105, a5);
  id v34 = v112;
  int v112 = @"Conv";

  uint64_t v35 = objc_opt_new();
  long long v36 = [NSNumber numberWithUnsignedLong:a3];
  [v35 setObject:v36 forKeyedSubscript:@"Channels"];

  [v35 setObject:@"Conv" forKeyedSubscript:@"Type"];
  [v35 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"KernelGroupReuse"];
  [v35 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  uint64_t v37 = [NSNumber numberWithInt:1];
  [v35 setObject:v37 forKeyedSubscript:@"KernelWidth"];

  uint64_t v38 = [NSNumber numberWithInt:1];
  [v35 setObject:v38 forKeyedSubscript:@"KernelHeight"];

  unint64_t v39 = NSNumber;
  if (v7) {
    uint64_t weights_file_index = 0;
  }
  else {
  uint64_t v41 = objc_msgSend(v39, "numberWithUnsignedLong:", weights_file_index, this);
  }
  [v35 setObject:v41 forKeyedSubscript:@"KernelIndex"];

  long long v42 = [NSNumber numberWithInt:v33];
  [v35 setObject:v42 forKeyedSubscript:@"KernelOffset"];

  [v35 setObject:&unk_1EE3AF130 forKeyedSubscript:@"Step"];
  [v35 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadLeft"];
  [v35 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadRight"];
  [v35 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadTop"];
  [v35 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadBot"];
  [v35 setObject:@"Zero" forKeyedSubscript:@"PaddingMode"];
  unint64_t v43 = v8 * a3;
  int v115 = a3;
  int v114 = v43;
  objc_storeStrong(&v113, v35);
  uint64_t v44 = 0;
  int64x2_t v45 = (int64x2_t)xmmword_192DBFE30;
  uint64x2_t v46 = (uint64x2_t)vdupq_n_s64(0x21uLL);
  int64x2_t v47 = vdupq_n_s64(2uLL);
  do
  {
    if (vmovn_s64((int64x2_t)vcgtq_u64(v46, (uint64x2_t)v45)).u8[0])
    {
      float v48 = 1.0 / ((float)(int)v44 * 0.03125 + 1.0);
      *((float *)v103 + v44) = v48;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x21uLL), *(uint64x2_t *)&v45)).i32[1])
    {
      float v49 = 1.0 / ((float)(v44 + 1) * 0.03125 + 1.0);
      *((float *)v103 + v44 + 1) = v49;
    }
    v44 += 2;
    int64x2_t v45 = vaddq_s64(v45, v47);
  }
  while (v44 != 34);
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v94, a5);
  v92[6] = v103[6];
  v92[7] = v103[7];
  int v93 = v104;
  v92[2] = v103[2];
  v92[3] = v103[3];
  v92[4] = v103[4];
  v92[5] = v103[5];
  v92[0] = v103[0];
  v92[1] = v103[1];
  uint64_t v50 = Espresso::ANECompilerEngine::generate_v1_custom_neuron_from_values((float *)v92, 1, 0.99951, 0.0, 2.0, 0.0, 1.0, 2.0, 0.00001);
  id v51 = v102;
  id v102 = v50;

  uint64_t v52 = v101;
  int64x2_t v101 = @"NeuronCustom";

  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v81, a5);
  long long v53 = v88;
  unint64_t v88 = @"Conv";

  long long v54 = objc_opt_new();
  uint64_t v55 = [NSNumber numberWithUnsignedLong:v43];
  [v54 setObject:v55 forKeyedSubscript:@"Channels"];

  [v54 setObject:@"Conv" forKeyedSubscript:@"Type"];
  [v54 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"KernelGroupReuse"];
  [v54 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  unint64_t v56 = [NSNumber numberWithInt:1];
  [v54 setObject:v56 forKeyedSubscript:@"KernelWidth"];

  uint64_t v57 = [NSNumber numberWithInt:1];
  [v54 setObject:v57 forKeyedSubscript:@"KernelHeight"];

  float32x2_t v58 = NSNumber;
  if (v7) {
    uint64_t v59 = 0;
  }
  else {
  uint64_t v60 = [v58 numberWithUnsignedLong:v59];
  }
  [v54 setObject:v60 forKeyedSubscript:@"KernelIndex"];

  char v61 = [NSNumber numberWithInt:v33];
  [v54 setObject:v61 forKeyedSubscript:@"KernelOffset"];

  [v54 setObject:&unk_1EE3AF148 forKeyedSubscript:@"Step"];
  [v54 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadLeft"];
  [v54 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadRight"];
  [v54 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadTop"];
  [v54 setObject:&unk_1EE3AEEA8 forKeyedSubscript:@"PadBot"];
  [v54 setObject:@"Zero" forKeyedSubscript:@"PaddingMode"];
  int v90 = a3;
  int v91 = a3;
  objc_storeStrong(&v89, v54);
  int32x2_t v62 = v122;
  if ((unint64_t)v122 >= v123)
  {
    unint64_t v64 = 0x8E38E38E38E38E39 * (((uint64_t)v122 - v121) >> 4);
    if (v64 + 1 > 0x1C71C71C71C71C7) {
      goto LABEL_93;
    }
    unint64_t v65 = 0x1C71C71C71C71C72 * ((uint64_t)(v123 - v121) >> 4);
    if (v65 <= v64 + 1) {
      unint64_t v65 = v64 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v123 - v121) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v66 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v66 = v65;
    }
    uint64_t v128 = &v123;
    if (v66) {
      unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v66);
    }
    else {
      uint64_t v67 = 0;
    }
    unint64_t v124 = (void **)v66;
    int v125 = (std::string *)(v66 + 144 * v64);
    long long v126 = v125;
    unint64_t v127 = v66 + 144 * v67;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v125, (uint64_t)v105);
    v126 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v121, &v124);
    float32x2_t v63 = v122;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v124);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v122, (uint64_t)v105);
    float32x2_t v63 = v62 + 6;
  }
  uint64_t v122 = v63;
  if ((unint64_t)v63 >= v123)
  {
    unint64_t v69 = 0x8E38E38E38E38E39 * (((uint64_t)v63 - v121) >> 4);
    if (v69 + 1 > 0x1C71C71C71C71C7) {
      goto LABEL_93;
    }
    unint64_t v70 = 0x1C71C71C71C71C72 * ((uint64_t)(v123 - v121) >> 4);
    if (v70 <= v69 + 1) {
      unint64_t v70 = v69 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v123 - v121) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v71 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v71 = v70;
    }
    uint64_t v128 = &v123;
    if (v71) {
      unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v71);
    }
    else {
      uint64_t v72 = 0;
    }
    unint64_t v124 = (void **)v71;
    int v125 = (std::string *)(v71 + 144 * v69);
    long long v126 = v125;
    unint64_t v127 = v71 + 144 * v72;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v125, (uint64_t)v94);
    v126 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v121, &v124);
    long long v68 = v122;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v124);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v63, (uint64_t)v94);
    long long v68 = v63 + 6;
  }
  uint64_t v122 = v68;
  if ((unint64_t)v68 < v123)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v68, (uint64_t)v81);
    uint64_t v73 = v68 + 6;
    goto LABEL_75;
  }
  unint64_t v74 = 0x8E38E38E38E38E39 * (((uint64_t)v68 - v121) >> 4);
  if (v74 + 1 > 0x1C71C71C71C71C7) {
LABEL_93:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  unint64_t v75 = 0x1C71C71C71C71C72 * ((uint64_t)(v123 - v121) >> 4);
  if (v75 <= v74 + 1) {
    unint64_t v75 = v74 + 1;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(v123 - v121) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v76 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v76 = v75;
  }
  uint64_t v128 = &v123;
  if (v76) {
    unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v76);
  }
  else {
    uint64_t v77 = 0;
  }
  unint64_t v124 = (void **)v76;
  int v125 = (std::string *)(v76 + 144 * v74);
  long long v126 = v125;
  unint64_t v127 = v76 + 144 * v77;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v125, (uint64_t)v81);
  v126 += 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v121, &v124);
  uint64_t v73 = v122;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v124);
LABEL_75:
  uint64_t v122 = v73;
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v79 + 32))(v79, a2, &v121);

  if (v86 < 0) {
    operator delete(__p);
  }
  unint64_t v124 = (void **)&v84;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v124);
  unint64_t v124 = (void **)&v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v124);
  if (v82 < 0) {
    operator delete(v81[0]);
  }

  if (v99 < 0) {
    operator delete(v98);
  }
  v81[0] = &v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v81);
  v81[0] = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v81);
  if (v95 < 0) {
    operator delete(v94[0]);
  }

  if (v110 < 0) {
    operator delete(v109);
  }
  v94[0] = &v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
  v94[0] = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  if (v117) {
    nitro::nitro_function::nitro_function(v117);
  }
  if (v118)
  {
    float32x4_t v119 = v118;
    operator delete(v118);
  }
  v105[0] = &v121;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
}

void sub_192821D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id a47)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v49 - 152);

  id v51 = *(std::__shared_weak_count **)(v49 - 208);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a11);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a47);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x248]);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  uint64_t v52 = *(void **)(v49 - 200);
  if (v52)
  {
    *(void *)(v49 - 192) = v52;
    operator delete(v52);
  }
  STACK[0x248] = v49 - 176;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x248]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::add_high_precision_sigmoid_units(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3, int a4)
{
  int v93 = 0;
  int v94 = 0;
  unint64_t v95 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v84, a3);
  unint64_t v8 = v91;
  int v91 = @"NeuronCustom";

  Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_20_7101, 0.25, 2.5, 0.0, 2.625, 0.0, 0.0);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_20_7101, 2.625, 7.0, 2.5, 8.75, 0.0, 0.5);
  id v61 = (id)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(__p, a3);
  unint64_t v9 = v82;
  char v82 = @"NeuronCustom";

  if (SHIBYTE(v76) >= 0) {
    size_t v10 = HIBYTE(v76);
  }
  else {
    size_t v10 = (size_t)__p[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)v63, v10 + 9);
  if (SHIBYTE(v64) >= 0) {
    float v11 = v63;
  }
  else {
    float v11 = (void **)v63[0];
  }
  if (v10)
  {
    if (SHIBYTE(v76) >= 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "_pre_bias");
  if (SHIBYTE(v76) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v63;
  unint64_t v76 = v64;
  objc_storeStrong(v83, obj);
  uint64_t v13 = v94;
  if ((unint64_t)v94 >= v95)
  {
    unint64_t v15 = 0x8E38E38E38E38E39 * (((char *)v94 - (char *)v93) >> 4);
    if (v15 + 1 > 0x1C71C71C71C71C7) {
      goto LABEL_106;
    }
    unint64_t v16 = 0x1C71C71C71C71C72 * ((uint64_t)(v95 - (void)v93) >> 4);
    if (v16 <= v15 + 1) {
      unint64_t v16 = v15 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v95 - (void)v93) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v17 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v17 = v16;
    }
    unint64_t v66 = &v95;
    if (v17) {
      unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    v63[0] = (void *)v17;
    v63[1] = (void *)(v17 + 144 * v15);
    unint64_t v64 = (char *)v63[1];
    unint64_t v65 = v17 + 144 * v18;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v63[1], (uint64_t)__p);
    v64 += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v93, v63);
    uint64_t v14 = v94;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v63);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v94, (uint64_t)__p);
    uint64_t v14 = v13 + 6;
  }
  int v94 = v14;
  objc_storeStrong(v83, v61);
  uint64_t v19 = v94;
  if ((unint64_t)v94 < v95)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v94, (uint64_t)__p);
    int v20 = v19 + 6;
    goto LABEL_38;
  }
  unint64_t v21 = 0x8E38E38E38E38E39 * (((char *)v94 - (char *)v93) >> 4);
  if (v21 + 1 > 0x1C71C71C71C71C7) {
LABEL_106:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  unint64_t v22 = 0x1C71C71C71C71C72 * ((uint64_t)(v95 - (void)v93) >> 4);
  if (v22 <= v21 + 1) {
    unint64_t v22 = v21 + 1;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(v95 - (void)v93) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v23 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v23 = v22;
  }
  unint64_t v66 = &v95;
  if (v23) {
    unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v23);
  }
  else {
    uint64_t v24 = 0;
  }
  v63[0] = (void *)v23;
  v63[1] = (void *)(v23 + 144 * v21);
  unint64_t v64 = (char *)v63[1];
  unint64_t v65 = v23 + 144 * v24;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v63[1], (uint64_t)__p);
  v64 += 144;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v93, v63);
  int v20 = v94;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v63);
LABEL_38:
  int v94 = v20;
  unint64_t v25 = objc_opt_new();
  [v25 setObject:@"Add" forKeyedSubscript:@"Type"];
  int v26 = v82;
  char v82 = @"ElementWise";

  objc_storeStrong(v83, v25);
  uint64_t v27 = v94;
  if ((unint64_t)v94 >= v95)
  {
    unint64_t v29 = 0x8E38E38E38E38E39 * (((char *)v94 - (char *)v93) >> 4);
    if (v29 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v30 = 0x1C71C71C71C71C72 * ((uint64_t)(v95 - (void)v93) >> 4);
    if (v30 <= v29 + 1) {
      unint64_t v30 = v29 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v95 - (void)v93) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v31 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v31 = v30;
    }
    unint64_t v66 = &v95;
    if (v31) {
      unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v31);
    }
    else {
      uint64_t v32 = 0;
    }
    v63[0] = (void *)v31;
    v63[1] = (void *)(v31 + 144 * v29);
    unint64_t v64 = (char *)v63[1];
    unint64_t v65 = v31 + 144 * v32;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v63[1], (uint64_t)__p);
    v64 += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v93, v63);
    unint64_t v28 = v94;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v63);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v94, (uint64_t)__p);
    unint64_t v28 = v27 + 6;
  }
  int v94 = v28;
  (*(void (**)(Espresso::ANECompilerEngine::ane_kernel *, Espresso::ANECompilerEngine::compiler *, std::string **, uint64_t))(*(void *)this + 40))(this, a2, &v93, 1);
  uint64_t v33 = v93;
  for (int i = v94; i != v33; std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::destroy[abi:ne180100]((uint64_t)i))
    i -= 6;
  int v94 = v33;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v63, a3);
  long long v36 = v67;
  for (j = v68; j != v36; --j)
  {
    if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(j[-1].__r_.__value_.__l.__data_);
    }
  }
  long long v68 = v36;
  if ((unint64_t)v36 >= v69)
  {
    uint64_t v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v67, (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v76) < 0)
    {
      std::string::__init_copy_ctor_external(v36, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      long long v37 = *(_OWORD *)__p;
      v36->__r_.__value_.__r.__words[2] = (std::string::size_type)v76;
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
    }
    uint64_t v38 = v36 + 1;
  }
  long long v68 = v38;
  unint64_t v39 = objc_opt_new();
  objc_storeStrong(&v74, v39);
  BOOL v40 = v73;
  uint64_t v73 = @"GOC";

  uint64_t v42 = *((void *)this + 8);
  uint64_t v41 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v42)
  {
    BOOL v46 = 1;
    _S8 = 0.0;
    if (!v41) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  unint64_t v43 = *(float **)(v42 + 16);
  _S8 = *v43;
  uint64_t v45 = *(int *)(v42 + 8);
  if (!v45)
  {
    BOOL v46 = 1;
    if (!v41) {
      goto LABEL_74;
    }
LABEL_73:
    nitro::nitro_function::nitro_function(v41);
    goto LABEL_74;
  }
  while (1)
  {
    BOOL v46 = _S8 != *v43;
    if (_S8 != *v43) {
      break;
    }
    ++v43;
    if (!--v45)
    {
      BOOL v46 = 0;
      if (v41) {
        goto LABEL_73;
      }
      goto LABEL_74;
    }
  }
  _S8 = 1.0;
  if (v41) {
    goto LABEL_73;
  }
LABEL_74:
  if ((v46 | a4 ^ 1))
  {
    [NSNumber numberWithShort:14336];
  }
  else
  {
    *(unsigned char *)((*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *))(*(void *)this + 104))(this)
             + 40) = 1;
    __asm { FCVT            H0, S8 }
    long long v53 = [NSNumber numberWithShort:_H0];
    [v39 setObject:v53 forKeyedSubscript:@"ScaleScalar"];

    _S0 = _S8 * 0.5;
    __asm { FCVT            H0, S0 }
    [NSNumber numberWithShort:SLOWORD(_S0)];
  int64x2_t v47 = };
  [v39 setObject:v47 forKeyedSubscript:@"BiasScalar"];

  uint64_t v55 = v94;
  if ((unint64_t)v94 >= v95)
  {
    unint64_t v57 = 0x8E38E38E38E38E39 * (((char *)v94 - (char *)v93) >> 4);
    if (v57 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0x1C71C71C71C71C72 * ((uint64_t)(v95 - (void)v93) >> 4);
    if (v58 <= v57 + 1) {
      unint64_t v58 = v57 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v95 - (void)v93) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v59 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v59 = v58;
    }
    id v100 = &v95;
    if (v59) {
      unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v59);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v96 = (char **)v59;
    uint64_t v97 = (std::string *)(v59 + 144 * v57);
    float v98 = v97;
    unint64_t v99 = v59 + 144 * v60;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v97, (uint64_t)v63);
    v98 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v93, &v96);
    unint64_t v56 = v94;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v96);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v94, (uint64_t)v63);
    unint64_t v56 = v55 + 6;
  }
  int v94 = v56;

  if (v71 < 0) {
    operator delete(v70);
  }
  uint64_t v96 = (char **)&v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  uint64_t v96 = (char **)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  if (SHIBYTE(v64) < 0) {
    operator delete(v63[0]);
  }
  (*(void (**)(Espresso::ANECompilerEngine::ane_kernel *, Espresso::ANECompilerEngine::compiler *, std::string **))(*(void *)this + 32))(this, a2, &v93);

  if (v80 < 0) {
    operator delete(v79);
  }
  v63[0] = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
  v63[0] = &v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
  if (SHIBYTE(v76) < 0) {
    operator delete(__p[0]);
  }

  if (v89 < 0) {
    operator delete(v88);
  }
  __p[0] = &v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v86;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v85 < 0) {
    operator delete(v84[0]);
  }
  v84[0] = &v93;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
}

void sub_192822778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a11);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a29);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a48);
  a48 = (void **)(v49 - 168);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a48);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine10ane_kernel32add_high_precision_sigmoid_unitsEPNS0_8compilerERKNS2_18layer_graph_info_tEb_block_invoke(float a1)
{
  return (float)(1.0 / (float)(expf(-a1) + 1.0)) + -0.5;
}

void Espresso::ANECompilerEngine::ane_kernel::add_high_precision_tanh_units(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v28, a3);
  uint64_t v5 = v35;
  uint64_t v35 = @"NeuronCustom";

  unint64_t v6 = Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_7113, 0.1, 1.625, 0.0, 1.75, 0.0, 0.0);
  int v7 = Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_7113, 1.75, 3.5, 1.625, 4.25, 0.0, 1.0);
  objc_storeStrong(v36, v6);
  unint64_t v8 = v38;
  if ((unint64_t)v38 >= v39)
  {
    unint64_t v10 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
    if (v10 + 1 > 0x1C71C71C71C71C7) {
      goto LABEL_42;
    }
    unint64_t v11 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
    if (v11 <= v10 + 1) {
      unint64_t v11 = v10 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v12 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v44 = &v39;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v40 = (void **)v12;
    uint64_t v41 = (std::string *)(v12 + 144 * v10);
    uint64_t v42 = v41;
    unint64_t v43 = v12 + 144 * v13;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
    v42 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
    unint64_t v9 = v38;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    unint64_t v9 = v8 + 6;
  }
  uint64_t v38 = v9;
  objc_storeStrong(v36, v7);
  uint64_t v14 = v38;
  if ((unint64_t)v38 < v39)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    unint64_t v15 = v14 + 6;
    goto LABEL_25;
  }
  unint64_t v16 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
  if (v16 + 1 > 0x1C71C71C71C71C7) {
LABEL_42:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  unint64_t v17 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
  if (v17 <= v16 + 1) {
    unint64_t v17 = v16 + 1;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v18 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v18 = v17;
  }
  uint64_t v44 = &v39;
  if (v18) {
    unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v18);
  }
  else {
    uint64_t v19 = 0;
  }
  BOOL v40 = (void **)v18;
  uint64_t v41 = (std::string *)(v18 + 144 * v16);
  uint64_t v42 = v41;
  unint64_t v43 = v18 + 144 * v19;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
  v42 += 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
  unint64_t v15 = v38;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
LABEL_25:
  uint64_t v38 = v15;
  int v20 = objc_opt_new();
  [v20 setObject:@"Add" forKeyedSubscript:@"Type"];
  unint64_t v21 = v35;
  uint64_t v35 = @"ElementWise";

  objc_storeStrong(v36, v20);
  unint64_t v22 = v38;
  if ((unint64_t)v38 >= v39)
  {
    unint64_t v24 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
    if (v24 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v25 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
    if (v25 <= v24 + 1) {
      unint64_t v25 = v24 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v26 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v26 = v25;
    }
    uint64_t v44 = &v39;
    if (v26) {
      unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v26);
    }
    else {
      uint64_t v27 = 0;
    }
    BOOL v40 = (void **)v26;
    uint64_t v41 = (std::string *)(v26 + 144 * v24);
    uint64_t v42 = v41;
    unint64_t v43 = v26 + 144 * v27;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
    v42 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
    unint64_t v23 = v38;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    unint64_t v23 = v22 + 6;
  }
  uint64_t v38 = v23;
  (*(void (**)(Espresso::ANECompilerEngine::ane_kernel *, Espresso::ANECompilerEngine::compiler *, uint64_t *, uint64_t))(*(void *)this + 40))(this, a2, &v37, 1);

  if (v33 < 0) {
    operator delete(__p);
  }
  BOOL v40 = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  BOOL v40 = (void **)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  v28[0] = &v37;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
}

void sub_192822D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v30 - 120);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine10ane_kernel29add_high_precision_tanh_unitsEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(float a1)
{
  double v2 = expf(a1);
  float v3 = expf(-a1);
  return (v2 - v3) / (v2 + v3);
}

void Espresso::ANECompilerEngine::ane_kernel::add_units_parallel_and_merge(uint64_t a1, Espresso::ANECompilerEngine::compiler *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 4);
  unint64_t v5 = v4 - a4;
  if (v4 <= a4 || a4 == 0 || v4 <= 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid unit count for add_units_parallel_and_merge");
  }
  unint64_t v35 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 4);
  uint64_t v10 = *a3 + 144 * v5;
  unint64_t v11 = (char **)(v10 + 48);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v10 + 48));
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = (std::string **)(v10 + 56);
  unint64_t v15 = (void *)(v10 + 64);
  do
  {
    uint64_t v16 = *a3;
    std::to_string(&v37, v13);
    unint64_t v17 = std::string::insert(&v37, 0, "_tmp_parallel_");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    int64_t v39 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (v39 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    if (v39 >= 0) {
      std::string::size_type v20 = HIBYTE(v39);
    }
    else {
      std::string::size_type v20 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(*a3 + v12), (const std::string::value_type *)v19, v20);
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    unint64_t v21 = (long long *)(*a3 + v12);
    unint64_t v22 = *v14;
    if ((unint64_t)*v14 >= *v15)
    {
      unint64_t v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v11, (uint64_t)v21);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v11, v21);
      unint64_t v23 = v22 + 1;
    }
    std::string *v14 = v23;
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)(v16 + v12));
    ++v13;
    v12 += 144;
  }
  while (v5 != v13);
  unint64_t v24 = 0;
  if (a4 <= 1) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = a4;
  }
  uint64_t v26 = 144 * v35 - 144 * a4;
  do
  {
    if (a4 - 1 > v24)
    {
      std::to_string(&v37, v24);
      uint64_t v27 = std::string::insert(&v37, 0, "_tmp_merge_");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      int64_t v39 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (v39 >= 0) {
        char v29 = __p;
      }
      else {
        char v29 = (void **)__p[0];
      }
      if (v39 >= 0) {
        std::string::size_type v30 = HIBYTE(v39);
      }
      else {
        std::string::size_type v30 = (std::string::size_type)__p[1];
      }
      std::string::append((std::string *)(*a3 + v26), (const std::string::value_type *)v29, v30);
      if (SHIBYTE(v39) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*a3 + v26 + 192));
      uint64_t v31 = *a3 + v26;
      uint64_t v32 = (char **)(v31 + 192);
      char v33 = *(std::string **)(v31 + 200);
      if ((unint64_t)v33 >= *(void *)(v31 + 208))
      {
        id v34 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v32, v31);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v32, (long long *)v31);
        id v34 = v33 + 1;
      }
      *(void *)(v31 + 200) = v34;
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)(*a3 + v26));
    ++v24;
    v26 += 144;
  }
  while (v25 != v24);
}

void sub_192823094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::ane_kernel::add_units_sequential(int a1, Espresso::ANECompilerEngine::compiler *this, uint64_t *a3)
{
  *(void *)&long long v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0x8E38E38E38E38E39 * (v4 >> 4);
    do
    {
      if (v9 - 1 <= v8) {
        goto LABEL_13;
      }
      std::to_string(&v16, v8);
      uint64_t v10 = std::string::insert(&v16, 0, "_tmp_");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(*a3 + v7), (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v16.__r_.__value_.__l.__data_);
        if (v8)
        {
LABEL_14:
          uint64_t v14 = *a3 + 144 * (v8 - 1);
          if (*(char *)(v14 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
          }
          else
          {
            long long v15 = *(_OWORD *)v14;
            __p.__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v3 + v7 + 48), &__p, &v18, 1uLL);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
LABEL_13:
        if (v8) {
          goto LABEL_14;
        }
      }
      Espresso::ANECompilerEngine::compiler::add_unit(this, (const Espresso::ANECompilerEngine::compiler::unit_t *)(v3 + v7));
      ++v8;
      uint64_t v3 = *a3;
      unint64_t v9 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 4);
      v7 += 144;
    }
    while (v9 > v8);
  }
}

void sub_1928232A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void Espresso::ANECompilerEngine::ane_kernel::add_units(int a1, Espresso::ANECompilerEngine::compiler *this, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      Espresso::ANECompilerEngine::compiler::add_unit(this, (const Espresso::ANECompilerEngine::compiler::unit_t *)(v3 + v6));
      ++v7;
      uint64_t v3 = *a3;
      v6 += 144;
    }
    while (0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 4) > v7);
  }
}

void Espresso::ANECompilerEngine::ane_kernel::compile(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(uint64_t *a1)
{
  BOOL v1 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a1 + 23);
    if (v2 != 8)
    {
      if (v2 != 10)
      {
        if (v2 != 14) {
          return strncmp("hx_", (const char *)v1, 3uLL) == 0;
        }
        goto LABEL_9;
      }
LABEL_16:
      if (*v1 != 0x6163735F74736F70 || *((_WORD *)v1 + 4) != 25964) {
        return strncmp("hx_", (const char *)v1, 3uLL) == 0;
      }
      return 1;
    }
    goto LABEL_14;
  }
  BOOL v1 = (uint64_t *)*a1;
  uint64_t v3 = a1[1];
  if (v3 == 8)
  {
LABEL_14:
    if (*v1 == 0x736169625F656E61) {
      return 1;
    }
    return strncmp("hx_", (const char *)v1, 3uLL) == 0;
  }
  if (v3 == 10) {
    goto LABEL_16;
  }
  if (v3 != 14) {
    return strncmp("hx_", (const char *)v1, 3uLL) == 0;
  }
LABEL_9:
  if (*v1 != 0x74736F705F656E61 || *(uint64_t *)((char *)v1 + 6) != 0x656C6163735F7473) {
    return strncmp("hx_", (const char *)v1, 3uLL) == 0;
  }
  return 1;
}

void Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(void *a1, uint64_t *a2, const void *a3, size_t a4)
{
  uint64_t v6 = a2;
  int v8 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v10 = a2[1];
    if (v10 != 10) {
      goto LABEL_21;
    }
    unint64_t v9 = (uint64_t *)*a2;
  }
  else
  {
    unint64_t v9 = a2;
    if (v8 != 10) {
      goto LABEL_11;
    }
  }
  uint64_t v11 = *v9;
  int v12 = *((unsigned __int16 *)v9 + 4);
  if (v11 == 0x6163735F74736F70 && v12 == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v27, (int)a4 / 4, 1, 1, 1);
    uint64_t v15 = v27;
    memcpy(*(void **)(v27 + 16), a3, a4);
    std::string v16 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v17 = (std::__shared_weak_count *)a1[9];
    a1[8] = v15;
    a1[9] = v16;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    int v8 = *((unsigned __int8 *)v6 + 23);
    if ((v8 & 0x80) == 0) {
      goto LABEL_11;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
LABEL_11:
    if (v8 != 14) {
      goto LABEL_28;
    }
    uint64_t v14 = v6;
    goto LABEL_23;
  }
  uint64_t v10 = v6[1];
LABEL_21:
  if (v10 != 14) {
    goto LABEL_38;
  }
  uint64_t v14 = (uint64_t *)*v6;
LABEL_23:
  uint64_t v18 = *v14;
  uint64_t v19 = *(uint64_t *)((char *)v14 + 6);
  if (v18 == 0x74736F705F656E61 && v19 == 0x656C6163735F7473)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v27, (int)a4 / 4, 1, 1, 1);
    uint64_t v21 = v27;
    memcpy(*(void **)(v27 + 16), a3, a4);
    unint64_t v22 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v23 = (std::__shared_weak_count *)a1[15];
    a1[14] = v21;
    a1[15] = v22;
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    int v8 = *((unsigned __int8 *)v6 + 23);
    if ((v8 & 0x80) == 0)
    {
LABEL_28:
      if (v8 != 8) {
        return;
      }
      goto LABEL_40;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_28;
  }
  uint64_t v10 = v6[1];
LABEL_38:
  if (v10 != 8) {
    return;
  }
  uint64_t v6 = (uint64_t *)*v6;
LABEL_40:
  if (*v6 == 0x736169625F656E61)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v27, (int)a4 / 4, 1, 1, 1);
    uint64_t v24 = v27;
    memcpy(*(void **)(v27 + 16), a3, a4);
    uint64_t v25 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = (std::__shared_weak_count *)a1[13];
    a1[12] = v24;
    a1[13] = v25;
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
  }
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::bahdanau_attention_params_t,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t Espresso::bahdanau_attention_kernel_cpu::should_unpack()
{
  return 1;
}

void Espresso::bahdanau_attention_kernel_cpu::unpack(Espresso::bahdanau_attention_kernel_cpu *this, Espresso::unpack_options *a2)
{
  *(void *)&long long v194 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  v163[0] = *((void *)this + 1);
  v163[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *((_DWORD *)this + 79);
  v162[1] = 0;
  v162[0] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v164, v163, v5, v162);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  char v153 = 0;
  int v155 = -1;
  __asm { FMOV            V9.2S, #1.0 }
  uint64_t v156 = _D9;
  uint64_t v161 = 0;
  uint64_t v150 = _D9;
  uint64_t v157 = 0;
  uint64_t v151 = 0;
  uint64_t v154 = 0;
  int v149 = 0;
  int v152 = 0;
  uint64_t v158 = 0;
  uint64_t v160 = 0;
  uint64_t v159 = 0;
  int32x2_t v11 = vrev64_s32(*(int32x2_t *)((char *)this + 308));
  v148[1] = 1;
  v148[0] = v11;
  std::string::basic_string[abi:ne180100]<0>(&v123, "inner_product");
  std::string::basic_string[abi:ne180100]<0>(__p, "query_fc");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, _DWORD *))(*(void *)this + 296))(&v186, this, a2, __p);
  int v12 = (long long *)*((void *)a2 + 3);
  if (*((char *)v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)v12, *((void *)v12 + 1));
  }
  else
  {
    long long v13 = *v12;
    v177.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v13;
  }
  float32x4_t v144 = 0;
  unint64_t v143 = 0;
  unint64_t v145 = 0;
  v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
  v193.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v143 = (std::string *)operator new(0x18uLL);
  float32x4_t v144 = v143;
  unint64_t v145 = v143 + 1;
  float32x4_t v144 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v145, (long long *)&v177, &v178, v143);
  std::string::basic_string[abi:ne180100]<0>(&v191, "query_fc");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v193, this, a2, &v191);
  float32x4_t v141 = 0;
  float32x4_t v140 = 0;
  float32x4_t v142 = 0;
  *(void *)&long long v189 = &v140;
  BYTE8(v189) = 0;
  float32x4_t v140 = (std::string *)operator new(0x18uLL);
  float32x4_t v141 = v140;
  float32x4_t v142 = v140 + 1;
  float32x4_t v141 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v142, (long long *)&v193, &v194, v140);
  Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v146, &v164, (uint64_t)&v123, (uint64_t)&v186, (uint64_t)v148, (uint64_t *)&v143, (uint64_t *)&v140);
  *(void *)&long long v189 = &v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v185[0]) < 0) {
    operator delete(*(void **)__p);
  }
  if ((v124[7] & 0x80000000) != 0) {
    operator delete((void *)v123);
  }
  uint64_t v14 = v146;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 51);
  uint64_t v138 = *((void *)this + 50);
  uint64_t v139 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 400))(v14, &v138);
  if (v139) {
    nitro::nitro_function::nitro_function(v139);
  }
  std::string v16 = (std::__shared_weak_count *)*((void *)this + 57);
  uint64_t v136 = *((void *)this + 56);
  uint64_t v137 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 392))(v14, &v136);
  if (v137) {
    nitro::nitro_function::nitro_function(v137);
  }
  if (*((void *)this + 52))
  {
    char v127 = 0;
    int v129 = -1;
    uint64_t v130 = _D9;
    uint64_t v135 = 0;
    *((void *)&v123 + 1) = 1;
    *(void *)&v124[4] = _D9;
    uint64_t v131 = 0;
    uint64_t v125 = 0;
    uint64_t v128 = 0;
    *(_DWORD *)unint64_t v124 = 0;
    int v126 = 0;
    uint64_t v132 = 0;
    uint64_t v134 = 0;
    uint64_t v133 = 0;
    int v17 = *((_DWORD *)this + 78);
    DWORD1(v123) = *((_DWORD *)this + 76);
    LODWORD(v123) = v17;
    std::string::basic_string[abi:ne180100]<0>(&v186, "inner_product");
    std::string::basic_string[abi:ne180100]<0>(&v177, "key_fc");
    (*(void (**)(_DWORD *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(__p, this, a2, &v177);
    uint64_t v18 = *((void *)a2 + 3);
    if (*(char *)(v18 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(v18 + 24), *(void *)(v18 + 32));
    }
    else {
      std::string v193 = *(std::string *)(v18 + 24);
    }
    uint64_t v121 = 0;
    unint64_t v120 = 0;
    uint64_t v122 = 0;
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
    v191.__r_.__value_.__s.__data_[8] = 0;
    unint64_t v120 = (std::string *)operator new(0x18uLL);
    uint64_t v121 = v120;
    uint64_t v122 = v120 + 1;
    uint64_t v121 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122, (long long *)&v193, &v194, v120);
    std::string::basic_string[abi:ne180100]<0>(&v189, "key_fc");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))(&v191, this, a2, &v189);
    uint64_t v118 = 0;
    uint64_t v117 = 0;
    float32x4_t v119 = 0;
    v182[0] = &v117;
    LOBYTE(v182[1]) = 0;
    uint64_t v117 = (std::string *)operator new(0x18uLL);
    uint64_t v118 = v117;
    float32x4_t v119 = v117 + 1;
    uint64_t v118 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v191, (long long *)&v192, v117);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v85, &v164, (uint64_t)&v186, (uint64_t)__p, (uint64_t)&v123, (uint64_t *)&v120, (uint64_t *)&v117);
    v182[0] = &v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    if (v190 < 0) {
      operator delete((void *)v189);
    }
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v193.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v185[0]) < 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v186.__r_.__value_.__l.__data_);
    }
    uint64_t v20 = v85;
    uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 53);
    uint64_t v115 = *((void *)this + 52);
    uint64_t v116 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v20 + 400))(v20, &v115);
    if (v116) {
      nitro::nitro_function::nitro_function(v116);
    }
    v186.__r_.__value_.__r.__words[2] = 897988541;
    LOBYTE(v187[0]) = 0;
    uint64_t v188 = 0;
    v186.__r_.__value_.__r.__words[0] = 0;
    v186.__r_.__value_.__l.__size_ = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&v177, "elementwise");
    std::string::basic_string[abi:ne180100]<0>(&v191, "add");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v193, this, a2, &v191);
    std::string::basic_string[abi:ne180100]<0>(&v189, "key_fc");
    (*(void (**)(_DWORD *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))(__p, this, a2, &v189);
    std::string::basic_string[abi:ne180100]<0>(v182, "query_fc");
    (*(void (**)(_DWORD *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v185[1], this, a2, v182);
    id v113 = 0;
    int v112 = 0;
    int v114 = 0;
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
    v181.__r_.__value_.__s.__data_[8] = 0;
    int v112 = (std::string *)operator new(0x30uLL);
    id v113 = v112;
    int v114 = v112 + 2;
    id v113 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v114, (long long *)__p, (long long *)&v186, v112);
    std::string::basic_string[abi:ne180100]<0>(v179, "add");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v181, this, a2, v179);
    char v110 = 0;
    uint64_t v109 = 0;
    id v111 = 0;
    LOBYTE(v43) = 0;
    uint64_t v109 = (std::string *)operator new(0x18uLL);
    char v110 = v109;
    id v111 = v109 + 1;
    char v110 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v111, (long long *)&v181, (long long *)v182, v109);
    Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(&v175, &v164, (uint64_t)&v177, (uint64_t)&v193, (uint64_t)&v186, (uint64_t *)&v112, (uint64_t *)&v109);
    lpsrc = &v109;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    if (v180 < 0) {
      operator delete(v179[0]);
    }
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
    for (uint64_t i = 0; i != -12; i -= 6)
    {
      if (SHIBYTE(v185[i + 6]) < 0) {
        operator delete(*(void **)&v185[i + 1]);
      }
    }
    if (v183 < 0) {
      operator delete(v182[0]);
    }
    if (v190 < 0) {
      operator delete((void *)v189);
    }
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v193.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v177.__r_.__value_.__l.__data_);
    }
    if (v176) {
      nitro::nitro_function::nitro_function(v176);
    }
    unint64_t v23 = (std::__shared_weak_count *)*((void *)&v85 + 1);
    if (*((void *)&v85 + 1)) {
LABEL_71:
    }
      nitro::nitro_function::nitro_function(v23);
  }
  else
  {
    *(void *)unint64_t v124 = 897988541;
    _OWORD v124[8] = 0;
    uint64_t v128 = 0;
    *((void *)&v123 + 1) = 1065353216;
    *(void *)&long long v123 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    std::string::basic_string[abi:ne180100]<0>(&v193, "add");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v177, this, a2, &v193);
    uint64_t v19 = *((void *)a2 + 3);
    if (*(char *)(v19 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(v19 + 24), *(void *)(v19 + 32));
    }
    else {
      std::string v186 = *(std::string *)(v19 + 24);
    }
    std::string::basic_string[abi:ne180100]<0>(&v191, "query_fc");
    (*(void (**)(void *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v187, this, a2, &v191);
    uint64_t v107 = 0;
    char v106 = 0;
    uint64_t v108 = 0;
    *(void *)&long long v189 = &v106;
    BYTE8(v189) = 0;
    char v106 = (std::string *)operator new(0x30uLL);
    uint64_t v107 = v106;
    uint64_t v108 = v106 + 2;
    uint64_t v107 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v108, (long long *)&v186, (long long *)((char *)&v188 + 4), v106);
    std::string::basic_string[abi:ne180100]<0>(v182, "add");
    (*(void (**)(long long *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v189, this, a2, v182);
    int v104 = 0;
    char v103 = 0;
    uint64_t v105 = 0;
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
    v181.__r_.__value_.__s.__data_[8] = 0;
    char v103 = (std::string *)operator new(0x18uLL);
    int v104 = v103;
    uint64_t v105 = v103 + 1;
    int v104 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v105, &v189, (long long *)&v191, v103);
    Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(v179, &v164, (uint64_t)__p, (uint64_t)&v177, (uint64_t)&v123, (uint64_t *)&v106, (uint64_t *)&v103);
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
    if (v190 < 0) {
      operator delete((void *)v189);
    }
    if (v183 < 0) {
      operator delete(v182[0]);
    }
    *(void *)&long long v189 = &v106;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
    for (uint64_t j = 0; j != -48; j -= 24)
    {
      if (*((char *)&v188 + j + 3) < 0) {
        operator delete(*(void **)((char *)&v186 + j + 24));
      }
    }
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v193.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v185[0]) < 0) {
      operator delete(*(void **)__p);
    }
    unint64_t v23 = (std::__shared_weak_count *)v179[1];
    if (v179[1]) {
      goto LABEL_71;
    }
  }
  *(void *)&__p[1] = _D9;
  *(void *)&__p[3] = 0;
  *(void *)&v185[2] = 0;
  *(void *)unint64_t v185 = 0;
  __p[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v177, "activation");
  std::string::basic_string[abi:ne180100]<0>(&v191, "tanh");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v193, this, a2, &v191);
  std::string::basic_string[abi:ne180100]<0>(v182, "add");
  (*(void (**)(long long *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v189, this, a2, v182);
  int64x2_t v101 = 0;
  id v100 = 0;
  id v102 = 0;
  *(void *)&long long v123 = &v100;
  BYTE8(v123) = 0;
  id v100 = (std::string *)operator new(0x18uLL);
  int64x2_t v101 = v100;
  id v102 = v100 + 1;
  int64x2_t v101 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v102, &v189, (long long *)&v191, v100);
  std::string::basic_string[abi:ne180100]<0>(v179, "tanh");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v181, this, a2, v179);
  uint64_t v97 = 0;
  float v98 = 0;
  unint64_t v99 = 0;
  *(void *)&long long v123 = &v97;
  BYTE8(v123) = 0;
  uint64_t v97 = (std::string *)operator new(0x18uLL);
  float v98 = v97;
  unint64_t v99 = v97 + 1;
  float v98 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v99, (long long *)&v181, (long long *)v182, v97);
  uint64_t v24 = v170;
  LODWORD(v123) = (***(uint64_t (****)(void))(v172 + 8))();
  Espresso::abstract_engine_factory::make_kernel_priv(v24, (uint64_t)&v172, (uint64_t)&v177, (uint64_t)__p, (int *)&v123);
  uint64_t v25 = lpsrc;
  if (!lpsrc
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)&v123);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v26 = v43;
  if (v43)
  {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v85 = v25;
    *((void *)&v85 + 1) = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v85 = (unint64_t)v25;
  }
  long long v123 = 0uLL;
  *(void *)unint64_t v124 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v123, (uint64_t)v100, (uint64_t)v101, 0xAAAAAAAAAAAAAAABLL * (((char *)v101 - (char *)v100) >> 3));
  memset(&v186, 0, sizeof(v186));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v186, (uint64_t)v97, (uint64_t)v98, 0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)v97) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)&v164, &v85, (uint64_t)&v177, (uint64_t)&v193, (std::string **)&v123, (std::string **)&v186);
  unint64_t v175 = &v186;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
  unint64_t v175 = (std::string *)&v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
  if (*((void *)&v85 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v85 + 1));
  }
  if (v164) {
    Espresso::sequential_builder::add_shape_from_kernel(&v164, (uint64_t)lpsrc, (long long **)&v100, (uint64_t *)&v97);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  *(void *)&long long v123 = &v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  if (v180 < 0) {
    operator delete(v179[0]);
  }
  *(void *)&long long v123 = &v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  if (v190 < 0) {
    operator delete((void *)v189);
  }
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  char v127 = 0;
  int v129 = -1;
  uint64_t v130 = _D9;
  uint64_t v135 = 0;
  *((void *)&v123 + 1) = 1;
  *(void *)&v124[4] = _D9;
  uint64_t v131 = 0;
  uint64_t v125 = 0;
  uint64_t v128 = 0;
  *(_DWORD *)unint64_t v124 = 0;
  int v126 = 0;
  uint64_t v132 = 0;
  uint64_t v134 = 0;
  uint64_t v133 = 0;
  DWORD1(v123) = *((_DWORD *)this + 78);
  LODWORD(v123) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v186, "inner_product");
  std::string::basic_string[abi:ne180100]<0>(&v193, "v_fc");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v177, this, a2, &v193);
  std::string::basic_string[abi:ne180100]<0>(&v189, "tanh");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))(&v191, this, a2, &v189);
  id v92 = 0;
  int v93 = 0;
  int v94 = 0;
  v182[0] = &v92;
  LOBYTE(v182[1]) = 0;
  id v92 = (std::string *)operator new(0x18uLL);
  int v93 = v92;
  int v94 = v92 + 1;
  int v93 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v94, (long long *)&v191, (long long *)&v192, v92);
  std::string::basic_string[abi:ne180100]<0>(&v181, "v_fc");
  (*(void (**)(void **__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v182, this, a2, &v181);
  char v89 = 0;
  id v90 = 0;
  int v91 = 0;
  v179[0] = &v89;
  LOBYTE(v179[1]) = 0;
  char v89 = (std::string *)operator new(0x18uLL);
  id v90 = v89;
  int v91 = v89 + 1;
  id v90 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v91, (long long *)v182, (long long *)__p, v89);
  Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v95, &v164, (uint64_t)&v186, (uint64_t)&v177, (uint64_t)&v123, (uint64_t *)&v92, (uint64_t *)&v89);
  v179[0] = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  v182[0] = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (v190 < 0) {
    operator delete((void *)v189);
  }
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = v95;
  long long v28 = (std::__shared_weak_count *)*((void *)this + 55);
  uint64_t v87 = *((void *)this + 54);
  unint64_t v88 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v27 + 400))(v27, &v87);
  if (v88) {
    nitro::nitro_function::nitro_function(v88);
  }
  long long v85 = xmmword_192DCA550;
  int v86 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v193, "v_fc_t");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v177, this, a2, &v193);
  std::string::basic_string[abi:ne180100]<0>(&v189, "v_fc");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))(&v191, this, a2, &v189);
  char v80 = 0;
  id v81 = 0;
  char v82 = 0;
  v182[0] = &v80;
  LOBYTE(v182[1]) = 0;
  char v80 = (std::string *)operator new(0x18uLL);
  id v81 = v80;
  char v82 = v80 + 1;
  id v81 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v82, (long long *)&v191, (long long *)&v192, v80);
  std::string::basic_string[abi:ne180100]<0>(&v181, "v_fc_t");
  (*(void (**)(void **__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v182, this, a2, &v181);
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  v179[0] = &v77;
  LOBYTE(v179[1]) = 0;
  uint64_t v77 = (std::string *)operator new(0x18uLL);
  uint64_t v78 = v77;
  uint64_t v79 = v77 + 1;
  uint64_t v78 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v79, (long long *)v182, (long long *)__p, v77);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v83, &v164, (uint64_t)&v186, (uint64_t)&v177, (uint64_t)&v85, (uint64_t *)&v80, (uint64_t *)&v77);
  v179[0] = &v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  v182[0] = &v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (v190 < 0) {
    operator delete((void *)v189);
  }
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v186, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v193, "value_t");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v177, this, a2, &v193);
  uint64_t v29 = *((void *)a2 + 3);
  if (*(char *)(v29 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(v29 + 48), *(void *)(v29 + 56));
  }
  else {
    std::string v191 = *(std::string *)(v29 + 48);
  }
  id v72 = 0;
  uint64_t v73 = 0;
  id v74 = 0;
  *(void *)&long long v189 = &v72;
  BYTE8(v189) = 0;
  id v72 = (std::string *)operator new(0x18uLL);
  uint64_t v73 = v72;
  id v74 = v72 + 1;
  uint64_t v73 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v74, (long long *)&v191, (long long *)&v192, v72);
  std::string::basic_string[abi:ne180100]<0>(v182, "value_t");
  (*(void (**)(long long *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v189, this, a2, v182);
  unint64_t v69 = 0;
  unint64_t v70 = 0;
  char v71 = 0;
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  v181.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v69 = (std::string *)operator new(0x18uLL);
  unint64_t v70 = v69;
  char v71 = v69 + 1;
  unint64_t v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, &v189, (long long *)&v191, v69);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v75, &v164, (uint64_t)&v186, (uint64_t)&v177, (uint64_t)&v85, (uint64_t *)&v72, (uint64_t *)&v69);
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  if (v190 < 0) {
    operator delete((void *)v189);
  }
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  *(void *)&long long v189 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v177.__r_.__value_.__l.__data_ = xmmword_192DCA290;
  v177.__r_.__value_.__r.__words[2] = 1;
  LODWORD(v178) = 16777472;
  std::string::basic_string[abi:ne180100]<0>(&v186, "softmax");
  std::string::basic_string[abi:ne180100]<0>(&v191, "softmax");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v193, this, a2, &v191);
  std::string::basic_string[abi:ne180100]<0>(v182, "v_fc_t");
  (*(void (**)(long long *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v189, this, a2, v182);
  unint64_t v64 = 0;
  unint64_t v65 = 0;
  unint64_t v66 = 0;
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  v181.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v64 = (std::string *)operator new(0x18uLL);
  unint64_t v65 = v64;
  unint64_t v66 = v64 + 1;
  unint64_t v65 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v66, &v189, (long long *)&v191, v64);
  std::string::basic_string[abi:ne180100]<0>(v179, "softmax");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v181, this, a2, v179);
  id v61 = 0;
  int32x2_t v62 = 0;
  float32x2_t v63 = 0;
  lpsrc = &v61;
  LOBYTE(v43) = 0;
  id v61 = (std::string *)operator new(0x18uLL);
  int32x2_t v62 = v61;
  float32x2_t v63 = v61 + 1;
  int32x2_t v62 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v63, (long long *)&v181, (long long *)v182, v61);
  Espresso::sequential_builder::add_t<Espresso::generic_softmax_kernel,Espresso::softmax_params>(&v67, &v164, (uint64_t)&v186, (uint64_t)&v193, (uint64_t)&v177, (uint64_t *)&v64, (uint64_t *)&v61);
  lpsrc = &v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  if (v180 < 0) {
    operator delete(v179[0]);
  }
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  if (v190 < 0) {
    operator delete((void *)v189);
  }
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v186, "transpose");
    std::string::basic_string[abi:ne180100]<0>(&v191, "raw_score");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v193, this, a2, &v191);
    std::string::basic_string[abi:ne180100]<0>(v182, "softmax");
    (*(void (**)(long long *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v189, this, a2, v182);
    unint64_t v58 = 0;
    unint64_t v59 = 0;
    uint64_t v60 = 0;
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    v181.__r_.__value_.__s.__data_[8] = 0;
    unint64_t v58 = (std::string *)operator new(0x18uLL);
    unint64_t v59 = v58;
    uint64_t v60 = v58 + 1;
    unint64_t v59 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v60, &v189, (long long *)&v191, v58);
    std::string::size_type v30 = *(std::string **)a2;
    if (*(char *)(*(void *)a2 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v181, v30[1].__r_.__value_.__l.__data_, v30[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v181 = v30[1];
    }
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    unint64_t v57 = 0;
    v179[0] = &v55;
    LOBYTE(v179[1]) = 0;
    uint64_t v55 = (std::string *)operator new(0x18uLL);
    unint64_t v56 = v55;
    unint64_t v57 = v55 + 1;
    unint64_t v56 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57, (long long *)&v181, (long long *)v182, v55);
    Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&lpsrc, &v164, (uint64_t)&v186, (uint64_t)&v193, (uint64_t)&v85, (uint64_t *)&v58, (uint64_t *)&v55);
    v179[0] = &v55;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
    if (v190 < 0) {
      operator delete((void *)v189);
    }
    if (v183 < 0) {
      operator delete(v182[0]);
    }
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v193.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v186.__r_.__value_.__l.__data_);
    }
    if (v43) {
      nitro::nitro_function::nitro_function(v43);
    }
  }
  __int16 v53 = 0;
  char v54 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v193, "batch_matmul");
  std::string::basic_string[abi:ne180100]<0>(&v189, "weighed_avg");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))(&v191, this, a2, &v189);
  std::string::basic_string[abi:ne180100]<0>(v182, "value_t");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v186, this, a2, v182);
  std::string::basic_string[abi:ne180100]<0>(&v181, "softmax");
  (*(void (**)(void *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v187, this, a2, &v181);
  float v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  v179[0] = &v48;
  LOBYTE(v179[1]) = 0;
  float v48 = (std::string *)operator new(0x30uLL);
  uint64_t v49 = v48;
  uint64_t v50 = v48 + 2;
  uint64_t v49 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v50, (long long *)&v186, (long long *)((char *)&v188 + 4), v48);
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "weighted_avg");
  (*(void (**)(void **__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v179, this, a2, &lpsrc);
  uint64_t v45 = 0;
  BOOL v46 = 0;
  int64x2_t v47 = 0;
  unint64_t v175 = (std::string *)&v45;
  LOBYTE(v176) = 0;
  uint64_t v45 = (std::string *)operator new(0x18uLL);
  BOOL v46 = v45;
  int64x2_t v47 = v45 + 1;
  BOOL v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, (long long *)v179, (long long *)&v181, v45);
  Espresso::sequential_builder::add_t<Espresso::generic_batch_matmul_kernel,Espresso::batch_matmul_params_t>(&v51, &v164, (uint64_t)&v193, (uint64_t)&v191, (uint64_t)&v53, (uint64_t *)&v48, (uint64_t *)&v45);
  unint64_t v175 = (std::string *)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
  if (v180 < 0) {
    operator delete(v179[0]);
  }
  if (v44 < 0) {
    operator delete(lpsrc);
  }
  v179[0] = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
  for (uint64_t k = 0; k != -48; k -= 24)
  {
    if (*((char *)&v188 + k + 3) < 0) {
      operator delete(*(void **)((char *)&v186 + k + 24));
    }
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (v190 < 0) {
    operator delete((void *)v189);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v186, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v191, "weighted_avg_t");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v193, this, a2, &v191);
  std::string::basic_string[abi:ne180100]<0>(v182, "weighted_avg");
  (*(void (**)(long long *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(&v189, this, a2, v182);
  int64_t v39 = 0;
  BOOL v40 = 0;
  uint64_t v41 = 0;
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  v181.__r_.__value_.__s.__data_[8] = 0;
  int64_t v39 = (std::string *)operator new(0x18uLL);
  BOOL v40 = v39;
  uint64_t v41 = v39 + 1;
  BOOL v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v41, &v189, (long long *)&v191, v39);
  uint64_t v32 = *(long long **)a2;
  if (*(char *)(*(void *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)v32, *((void *)v32 + 1));
  }
  else
  {
    long long v33 = *v32;
    v181.__r_.__value_.__r.__words[2] = *((void *)v32 + 2);
    *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v33;
  }
  long long v36 = 0;
  std::string v37 = 0;
  uint64_t v38 = 0;
  v179[0] = &v36;
  LOBYTE(v179[1]) = 0;
  long long v36 = (std::string *)operator new(0x18uLL);
  std::string v37 = v36;
  uint64_t v38 = v36 + 1;
  std::string v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, (long long *)&v181, (long long *)v182, v36);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&lpsrc, &v164, (uint64_t)&v186, (uint64_t)&v193, (uint64_t)&v85, (uint64_t *)&v39, (uint64_t *)&v36);
  v179[0] = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  if (v190 < 0) {
    operator delete((void *)v189);
  }
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  insert_network_layers(*((Espresso::net **)a2 + 6), v168, *((void *)a2 + 8));
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  if (v84) {
    nitro::nitro_function::nitro_function(v84);
  }
  if (v96) {
    nitro::nitro_function::nitro_function(v96);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v147) {
    nitro::nitro_function::nitro_function(v147);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v174);
  if (v173) {
    nitro::nitro_function::nitro_function(v173);
  }
  if (v171) {
    nitro::nitro_function::nitro_function(v171);
  }
  if (v169) {
    nitro::nitro_function::nitro_function(v169);
  }
  if (v167 < 0) {
    operator delete(v166[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v166, v166[1]);
  if (v165) {
    nitro::nitro_function::nitro_function(v165);
  }
}

void sub_19282592C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x537]) < 0) {
    operator delete((void *)STACK[0x520]);
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  if (STACK[0x398]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x398]);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x448]);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  std::string v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v22 = v16;
    unint64_t v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v22 = v16;
    unint64_t v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_19282690C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  std::string v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v22 = v16;
    unint64_t v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v22 = v16;
    unint64_t v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_192826C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_t<Espresso::generic_softmax_kernel,Espresso::softmax_params>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  std::string v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v22 = v16;
    unint64_t v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v22 = v16;
    unint64_t v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_192826EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_t<Espresso::generic_batch_matmul_kernel,Espresso::batch_matmul_params_t>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  std::string v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v22 = v16;
    unint64_t v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v22 = v16;
    unint64_t v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_1928271E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

const char *Espresso::generic_bahdanau_attention_kernel::kernel_type_str(Espresso::generic_bahdanau_attention_kernel *this)
{
  return "bahdanau_attention";
}

uint64_t Espresso::bahdanau_attention_kernel_cpu::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v6 = a2[1];
    if (v6 != (unsigned __int8 *)1)
    {
      if (v6 == (unsigned __int8 *)5)
      {
        int v7 = (*a2)[4];
        BOOL v8 = *(_DWORD *)*a2 == 1701535575;
        int v9 = 121;
      }
      else
      {
        if (v6 != (unsigned __int8 *)7) {
          return 0;
        }
        int v7 = *(_DWORD *)(*a2 + 3);
        BOOL v8 = *(_DWORD *)*a2 == 1970364247;
        int v9 = 2037540213;
      }
      return v8 && v7 == v9;
    }
    int v11 = **a2;
  }
  else
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 1)
    {
      if (v2 == 5)
      {
        int v3 = *((unsigned __int8 *)a2 + 4);
        BOOL v4 = *(_DWORD *)a2 == 1701535575;
        int v5 = 121;
        return v4 && v3 == v5;
      }
      if (v2 == 7)
      {
        int v3 = *(_DWORD *)((char *)a2 + 3);
        BOOL v4 = *(_DWORD *)a2 == 1970364247;
        int v5 = 2037540213;
        return v4 && v3 == v5;
      }
      return 0;
    }
    int v11 = *(unsigned __int8 *)a2;
  }
  if (v11 == 86) {
    return 1;
  }
  return v11 == 98;
}

void Espresso::bahdanau_attention_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, char *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a4) {
    return;
  }
  int v7 = a3;
  if (a6 && (uint64_t v28 = *a6) != 0)
  {
    int v9 = (std::__shared_weak_count *)a6[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v28 = 0;
    int v9 = 0;
  }
  int v10 = a3[23];
  int v11 = *(char **)a3;
  uint64_t v12 = *((void *)a3 + 1);
  if ((v10 & 0x80u) == 0) {
    uint64_t v13 = a3[23];
  }
  else {
    uint64_t v13 = *((void *)a3 + 1);
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = *(char **)a3;
  }
  if (v13 >= 2)
  {
    uint64_t v15 = &v14[v13];
    std::string v16 = v14;
    while (1)
    {
      int v17 = (char *)memchr(v16, 87, v13 - 1);
      if (!v17) {
        goto LABEL_48;
      }
      if (*(_WORD *)v17 == 24407) {
        break;
      }
      std::string v16 = v17 + 1;
      uint64_t v13 = v15 - v16;
      if (v15 - v16 < 2) {
        goto LABEL_48;
      }
    }
    if (v17 == v15 || v17 != v14) {
      goto LABEL_48;
    }
    if ((v10 & 0x80) != 0)
    {
      if (v12 != 5)
      {
        if (v12 != 7) {
          goto LABEL_48;
        }
        int v18 = *(_DWORD *)v11;
        int v19 = *(_DWORD *)(v11 + 3);
LABEL_28:
        if (v18 != 1970364247 || v19 != 2037540213) {
          goto LABEL_48;
        }
        v32[0] = v28;
        v32[1] = (uint64_t)v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v33, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v32, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
        uint64_t v21 = *(std::__shared_weak_count **)(a1 + 408);
        *(_OWORD *)(a1 + 400) = v33;
        if (!v21) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
    }
    else
    {
      int v11 = v7;
      if (v10 != 5)
      {
        if (v10 != 7) {
          goto LABEL_48;
        }
        int v18 = *(_DWORD *)v7;
        int v19 = *(_DWORD *)(v7 + 3);
        goto LABEL_28;
      }
    }
    if (*(_DWORD *)v11 != 1701535575 || v11[4] != 121) {
      goto LABEL_48;
    }
    v31[0] = v28;
    v31[1] = (uint64_t)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v33, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v31, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 424);
    *(_OWORD *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v33;
    if (!v21) {
      goto LABEL_46;
    }
LABEL_45:
    nitro::nitro_function::nitro_function(v21);
LABEL_46:
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
LABEL_48:
  int v23 = v7[23];
  if (v7[23] < 0)
  {
    if (*((void *)v7 + 1) != 1) {
      goto LABEL_73;
    }
    std::string v24 = *(unsigned char **)v7;
  }
  else
  {
    std::string v24 = v7;
    if (v23 != 1) {
      goto LABEL_62;
    }
  }
  if (*v24 == 86)
  {
    v30[0] = v28;
    v30[1] = (uint64_t)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v33, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v30, 1, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 440);
    *(_OWORD *)(a1 + 432) = v33;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    int v23 = v7[23];
  }
  if ((v23 & 0x80) != 0)
  {
    if (*((void *)v7 + 1) != 1) {
      goto LABEL_73;
    }
    int v7 = *(char **)v7;
LABEL_66:
    if (*v7 == 98)
    {
      v29[0] = v28;
      v29[1] = (uint64_t)v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v33, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v29, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
      uint64_t v26 = *(std::__shared_weak_count **)(a1 + 456);
      *(_OWORD *)(a1 + 448) = v33;
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
    }
    goto LABEL_73;
  }
LABEL_62:
  if (v23 == 1) {
    goto LABEL_66;
  }
LABEL_73:
  if (v9)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192827714(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::on_resized(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 320;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(a1 + 320);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::clear(a1 + 360);
  uint64_t v7 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v8 = 0;
    do
    {
      std::to_string(&v23, v8);
      int v9 = std::string::insert(&v23, 0, "src_");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v9->__r_.__value_.__r.__words[2];
      uint64_t v26 = __p;
      *(_OWORD *)std::string __p = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      int v11 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (unsigned __int8 *)__p, (long long **)&v26);
      long long v12 = *(_OWORD *)(v7 + 16 * v8);
      uint64_t v13 = *(void *)(v7 + 16 * v8 + 8);
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v11 + 6);
      *(_OWORD *)(v11 + 40) = v12;
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      ++v8;
      uint64_t v7 = *a3;
    }
    while (v8 < (a3[1] - *a3) >> 4);
  }
  uint64_t v15 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v16 = 0;
    do
    {
      std::to_string(&v23, v16);
      int v17 = std::string::insert(&v23, 0, "dst_");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v17->__r_.__value_.__r.__words[2];
      uint64_t v26 = __p;
      *(_OWORD *)std::string __p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      int v19 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (unsigned __int8 *)__p, (long long **)&v26);
      long long v20 = *(_OWORD *)(v15 + 16 * v16);
      uint64_t v21 = *(void *)(v15 + 16 * v16 + 8);
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v22 = (std::__shared_weak_count *)*((void *)v19 + 6);
      *(_OWORD *)(v19 + 40) = v20;
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      ++v16;
      uint64_t v15 = *a2;
    }
    while (v16 < (a2[1] - *a2) >> 4);
  }
}

void sub_192827920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::__deallocate_node(*(char **)(a1 + 16));
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::__deallocate_node(char *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = *(char **)v1;
      int v3 = (std::__shared_weak_count *)*((void *)v1 + 6);
      if (v3) {
        nitro::nitro_function::nitro_function(v3);
      }
      if (v1[39] < 0) {
        operator delete(*((void **)v1 + 2));
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void Espresso::bahdanau_attention_kernel_cpu::clear_weights(Espresso::bahdanau_attention_kernel_cpu *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 53);
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 55);
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void Espresso::bahdanau_attention_kernel_cpu::__launch()
{
}

void Espresso::bahdanau_attention_kernel_cpu::~bahdanau_attention_kernel_cpu(Espresso::bahdanau_attention_kernel_cpu *this)
{
  *(void *)this = &unk_1EE364068;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE364068;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(this);
}

void Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(Espresso::base_kernel *a1)
{
  *(void *)a1 = &unk_1EE368D78;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::~__hash_table((uint64_t)a1 + 360);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)a1 + 320);
  *(void *)a1 = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)a1 + 36));

  Espresso::base_kernel::~base_kernel(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::__deallocate_node(*(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void Espresso::abstract_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::self_attention_params_t,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t Espresso::self_attention_kernel_cpu::should_unpack()
{
  return 1;
}

void Espresso::self_attention_kernel_cpu::unpack(Espresso::self_attention_kernel_cpu *this, Espresso::unpack_options *a2)
{
  uint64_t v318 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  v268[0] = *((void *)this + 1);
  v268[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *((_DWORD *)this + 79);
  v267[1] = 0;
  v267[0] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v269, v268, v5, v267);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  char v258 = 0;
  int v260 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v261 = _D0;
  uint64_t v266 = 0;
  uint64_t v253 = 1;
  uint64_t v255 = _D0;
  uint64_t v262 = 0;
  uint64_t v256 = 0;
  uint64_t v259 = 0;
  int v254 = 0;
  int v257 = 0;
  uint64_t v263 = 0;
  uint64_t v265 = 0;
  uint64_t v264 = 0;
  int v252 = *((_DWORD *)this + 76);
  int v251 = v252;
  int v11 = (long long *)*((void *)a2 + 3);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - (void)v11) >> 3);
  if (v12 <= 2) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("self_attention_kernel_cpu: requires atleast 3 bottoms; only %zu given",
  }
      v12);
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  if (v13 != v12 - 2) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long,unsigned long>(v12 - 3, v13 - 1);
  }
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v14 = *v11;
    v250.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
    *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v14;
  }
  if (*((void *)this + 50))
  {
    std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "query_fc");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(void *)this + 296))(&v292, this, a2, (char *)&v285 + 8);
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v250.__r_.__value_.__l.__data_);
    }
    std::string v250 = v292;
    *((unsigned char *)&v292.__r_.__value_.__s + 23) = 0;
    v292.__r_.__value_.__s.__data_[0] = 0;
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    std::string::basic_string[abi:ne180100]<0>(&v292, "inner_product");
    std::string::basic_string[abi:ne180100]<0>(&v282, "query_fc");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
    uint64_t v15 = (long long *)*((void *)a2 + 3);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v314, *(const std::string::value_type **)v15, *((void *)v15 + 1));
    }
    else
    {
      long long v16 = *v15;
      *(void *)&v314[16] = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v314 = v16;
    }
    v248 = 0;
    v247 = 0;
    unint64_t v249 = 0;
    *(void *)v298 = &v247;
    v298[8] = 0;
    v247 = (std::string *)operator new(0x18uLL);
    v248 = v247;
    unint64_t v249 = v247 + 1;
    v248 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v249, (long long *)v314, (long long *)&v314[24], v247);
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v298, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)v298 = v250;
    }
    v245 = 0;
    float32x4_t v244 = 0;
    v246 = 0;
    *(void *)float32x4_t v295 = &v244;
    v295[8] = 0;
    float32x4_t v244 = (std::string *)operator new(0x18uLL);
    v245 = v244;
    v246 = v244 + 1;
    v245 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v246, (long long *)v298, (long long *)&v298[24], v244);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v239, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)&v251, (uint64_t *)&v247, (uint64_t *)&v244);
    *(void *)float32x4_t v295 = &v244;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v295);
    if ((v298[23] & 0x80000000) != 0) {
      operator delete(*(void **)v298);
    }
    *(void *)v298 = &v247;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v298);
    if ((v314[23] & 0x80000000) != 0) {
      operator delete(*(void **)v314);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
    std::string::size_type v17 = v239.__r_.__value_.__r.__words[0];
    long long v18 = (std::__shared_weak_count *)*((void *)this + 51);
    uint64_t v242 = *((void *)this + 50);
    float32x4_t v243 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v17 + 400))(v17, &v242);
    if (v243) {
      nitro::nitro_function::nitro_function(v243);
    }
    int v19 = (std::__shared_weak_count *)*((void *)this + 57);
    uint64_t v240 = *((void *)this + 56);
    float32x4_t v241 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v17 + 392))(v17, &v240);
    if (v241) {
      nitro::nitro_function::nitro_function(v241);
    }
    if (v239.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v239.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v20 = *((void *)a2 + 3);
  if (*(char *)(v20 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(v20 + 24), *(void *)(v20 + 32));
  }
  else {
    std::string v239 = *(std::string *)(v20 + 24);
  }
  if (*((void *)this + 52))
  {
    std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "key_fc");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(void *)this + 296))(&v292, this, a2, (char *)&v285 + 8);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v239.__r_.__value_.__l.__data_);
    }
    std::string v239 = v292;
    *((unsigned char *)&v292.__r_.__value_.__s + 23) = 0;
    v292.__r_.__value_.__s.__data_[0] = 0;
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    std::string::basic_string[abi:ne180100]<0>(&v292, "inner_product");
    std::string::basic_string[abi:ne180100]<0>(&v282, "key_fc");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
    uint64_t v21 = *((void *)a2 + 3);
    if (*(char *)(v21 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v314, *(const std::string::value_type **)(v21 + 24), *(void *)(v21 + 32));
    }
    else
    {
      *(_OWORD *)uint64_t v314 = *(_OWORD *)(v21 + 24);
      *(void *)&v314[16] = *(void *)(v21 + 40);
    }
    float32x4_t v237 = 0;
    float32x4_t v236 = 0;
    float32x4_t v238 = 0;
    *(void *)v298 = &v236;
    v298[8] = 0;
    float32x4_t v236 = (std::string *)operator new(0x18uLL);
    float32x4_t v237 = v236;
    float32x4_t v238 = v236 + 1;
    float32x4_t v237 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v238, (long long *)v314, (long long *)&v314[24], v236);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v298, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)v298 = v239;
    }
    float32x4_t v234 = 0;
    float32x4_t v233 = 0;
    float32x4_t v235 = 0;
    *(void *)float32x4_t v295 = &v233;
    v295[8] = 0;
    float32x4_t v233 = (std::string *)operator new(0x18uLL);
    float32x4_t v234 = v233;
    float32x4_t v235 = v233 + 1;
    float32x4_t v234 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v235, (long long *)v298, (long long *)&v298[24], v233);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v228, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)&v251, (uint64_t *)&v236, (uint64_t *)&v233);
    *(void *)float32x4_t v295 = &v233;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v295);
    if ((v298[23] & 0x80000000) != 0) {
      operator delete(*(void **)v298);
    }
    *(void *)v298 = &v236;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v298);
    if ((v314[23] & 0x80000000) != 0) {
      operator delete(*(void **)v314);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
    std::string::size_type v22 = v228.__r_.__value_.__r.__words[0];
    std::string v23 = (std::__shared_weak_count *)*((void *)this + 53);
    uint64_t v231 = *((void *)this + 52);
    float32x4_t v232 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v22 + 400))(v22, &v231);
    if (v232) {
      nitro::nitro_function::nitro_function(v232);
    }
    std::string v24 = (std::__shared_weak_count *)*((void *)this + 59);
    uint64_t v229 = *((void *)this + 58);
    uint64_t v230 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v22 + 392))(v22, &v229);
    if (v230) {
      nitro::nitro_function::nitro_function(v230);
    }
    if (v228.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v228.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v25 = *((void *)a2 + 3);
  if (*(char *)(v25 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(v25 + 48), *(void *)(v25 + 56));
  }
  else {
    std::string v228 = *(std::string *)(v25 + 48);
  }
  if (*((void *)this + 54))
  {
    std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "value_fc");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(void *)this + 296))(&v292, this, a2, (char *)&v285 + 8);
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v228.__r_.__value_.__l.__data_);
    }
    std::string v228 = v292;
    *((unsigned char *)&v292.__r_.__value_.__s + 23) = 0;
    v292.__r_.__value_.__s.__data_[0] = 0;
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    std::string::basic_string[abi:ne180100]<0>(&v292, "inner_product");
    std::string::basic_string[abi:ne180100]<0>(&v282, "value_fc");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
    uint64_t v26 = *((void *)a2 + 3);
    if (*(char *)(v26 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v314, *(const std::string::value_type **)(v26 + 48), *(void *)(v26 + 56));
    }
    else
    {
      *(_OWORD *)uint64_t v314 = *(_OWORD *)(v26 + 48);
      *(void *)&v314[16] = *(void *)(v26 + 64);
    }
    float32x4_t v226 = 0;
    unint64_t v225 = 0;
    uint64_t v227 = 0;
    *(void *)v298 = &v225;
    v298[8] = 0;
    unint64_t v225 = (std::string *)operator new(0x18uLL);
    float32x4_t v226 = v225;
    uint64_t v227 = v225 + 1;
    float32x4_t v226 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v227, (long long *)v314, (long long *)&v314[24], v225);
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v298, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)v298 = v228;
    }
    float32x4_t v223 = 0;
    unint64_t v222 = 0;
    float32x4_t v224 = 0;
    *(void *)float32x4_t v295 = &v222;
    v295[8] = 0;
    unint64_t v222 = (std::string *)operator new(0x18uLL);
    float32x4_t v223 = v222;
    float32x4_t v224 = v222 + 1;
    float32x4_t v223 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v224, (long long *)v298, (long long *)&v298[24], v222);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v312, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)&v251, (uint64_t *)&v225, (uint64_t *)&v222);
    *(void *)float32x4_t v295 = &v222;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v295);
    if ((v298[23] & 0x80000000) != 0) {
      operator delete(*(void **)v298);
    }
    *(void *)v298 = &v225;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v298);
    if ((v314[23] & 0x80000000) != 0) {
      operator delete(*(void **)v314);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
    std::string::size_type v27 = v312.__r_.__value_.__r.__words[0];
    uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 55);
    uint64_t v220 = *((void *)this + 54);
    unint64_t v221 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v27 + 400))(v27, &v220);
    if (v221) {
      nitro::nitro_function::nitro_function(v221);
    }
    uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 61);
    uint64_t v218 = *((void *)this + 60);
    float32x4_t v219 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v27 + 392))(v27, &v218);
    if (v219) {
      nitro::nitro_function::nitro_function(v219);
    }
    if (v312.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v312.__r_.__value_.__l.__size_);
    }
  }
  __int16 v316 = 1;
  int v317 = 1;
  unsigned int v30 = *((_DWORD *)this + 77);
  *(_DWORD *)uint64_t v314 = *((_DWORD *)this + 76) / v30;
  *(_DWORD *)&v314[4] = 1;
  int v315 = 0;
  *(_DWORD *)&v314[8] = v30;
  *(_OWORD *)&v314[12] = xmmword_192DCA480;
  std::string::basic_string[abi:ne180100]<0>(&v292, "reshape");
  std::string::basic_string[abi:ne180100]<0>(&v282, "query_reshape");
  (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v298, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)v298 = v250;
  }
  unint64_t v214 = 0;
  float32x4_t v213 = 0;
  float32x4_t v215 = 0;
  *(void *)float32x4_t v295 = &v213;
  v295[8] = 0;
  float32x4_t v213 = (std::string *)operator new(0x18uLL);
  unint64_t v214 = v213;
  float32x4_t v215 = v213 + 1;
  unint64_t v214 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v215, (long long *)v298, (long long *)&v298[24], v213);
  std::string::basic_string[abi:ne180100]<0>(&v312, "query_reshaped");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v295, this, a2, &v312);
  uint64_t v211 = 0;
  float32x4_t v210 = 0;
  float32x4_t v212 = 0;
  v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
  v310.__r_.__value_.__s.__data_[8] = 0;
  float32x4_t v210 = (std::string *)operator new(0x18uLL);
  uint64_t v211 = v210;
  float32x4_t v212 = v210 + 1;
  uint64_t v211 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v212, (long long *)v295, (long long *)&v295[24], v210);
  Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(&v216, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)v314, (uint64_t *)&v213, (uint64_t *)&v210);
  v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v312.__r_.__value_.__l.__data_);
  }
  *(void *)float32x4_t v295 = &v213;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v295);
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  if (SHIBYTE(v283) < 0) {
    operator delete((void *)v282);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v292, "reshape");
  std::string::basic_string[abi:ne180100]<0>(&v282, "key_reshape");
  (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v298, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)v298 = v239;
  }
  v206 = 0;
  v205 = 0;
  uint64_t v207 = 0;
  *(void *)float32x4_t v295 = &v205;
  v295[8] = 0;
  v205 = (std::string *)operator new(0x18uLL);
  v206 = v205;
  uint64_t v207 = v205 + 1;
  v206 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v207, (long long *)v298, (long long *)&v298[24], v205);
  std::string::basic_string[abi:ne180100]<0>(&v312, "key_reshaped");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v295, this, a2, &v312);
  v203 = 0;
  uint64_t v202 = 0;
  v204 = 0;
  v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  v310.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v202 = (std::string *)operator new(0x18uLL);
  v203 = v202;
  v204 = v202 + 1;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v204, (long long *)v295, (long long *)&v295[24], v202);
  Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(&v208, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)v314, (uint64_t *)&v205, (uint64_t *)&v202);
  v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v312.__r_.__value_.__l.__data_);
  }
  *(void *)float32x4_t v295 = &v205;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v295);
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  if (SHIBYTE(v283) < 0) {
    operator delete((void *)v282);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v292, "reshape");
  std::string::basic_string[abi:ne180100]<0>(&v282, "value_reshape");
  (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v298, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)v298 = v228;
  }
  float32x4_t v198 = 0;
  v197 = 0;
  uint64_t v199 = 0;
  *(void *)float32x4_t v295 = &v197;
  v295[8] = 0;
  v197 = (std::string *)operator new(0x18uLL);
  float32x4_t v198 = v197;
  uint64_t v199 = v197 + 1;
  float32x4_t v198 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v199, (long long *)v298, (long long *)&v298[24], v197);
  std::string::basic_string[abi:ne180100]<0>(&v312, "value_reshaped");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v295, this, a2, &v312);
  uint64_t v195 = 0;
  long long v194 = 0;
  v196 = 0;
  v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
  v310.__r_.__value_.__s.__data_[8] = 0;
  long long v194 = (std::string *)operator new(0x18uLL);
  uint64_t v195 = v194;
  v196 = v194 + 1;
  uint64_t v195 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196, (long long *)v295, (long long *)&v295[24], v194);
  Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(&v200, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)v314, (uint64_t *)&v197, (uint64_t *)&v194);
  v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v312.__r_.__value_.__l.__data_);
  }
  *(void *)float32x4_t v295 = &v197;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v295);
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  if (SHIBYTE(v283) < 0) {
    operator delete((void *)v282);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  long long v192 = xmmword_192DCA560;
  int v193 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v292, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v282, "query_t");
  (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
  std::string::basic_string[abi:ne180100]<0>(v295, "query_reshaped");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(v298, this, a2, v295);
  uint64_t v188 = 0;
  v187 = 0;
  long long v189 = 0;
  v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
  v312.__r_.__value_.__s.__data_[8] = 0;
  v187 = (std::string *)operator new(0x18uLL);
  uint64_t v188 = v187;
  long long v189 = v187 + 1;
  uint64_t v188 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v189, (long long *)v298, (long long *)&v298[24], v187);
  std::string::basic_string[abi:ne180100]<0>(&v310, "query_t");
  (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v312, this, a2, &v310);
  unint64_t v185 = 0;
  float v184 = 0;
  std::string v186 = 0;
  v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
  v308.__r_.__value_.__s.__data_[8] = 0;
  float v184 = (std::string *)operator new(0x18uLL);
  unint64_t v185 = v184;
  std::string v186 = v184 + 1;
  unint64_t v185 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v186, (long long *)&v312, (long long *)&v313, v184);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v190, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)&v192, (uint64_t *)&v187, (uint64_t *)&v184);
  v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v312.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v310.__r_.__value_.__l.__data_);
  }
  v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v312);
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  if (SHIBYTE(v283) < 0) {
    operator delete((void *)v282);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  uint64_t v31 = *(long long **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3) >= 2)
  {
    if (*((char *)v31 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v312, *((const std::string::value_type **)v31 + 3), *((void *)v31 + 4));
    }
    else {
      std::string v312 = *(std::string *)((unsigned char *)v31 + 1);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v292, "key_t");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v312, this, a2, &v292);
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v292, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v282, "key_t");
  (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
  std::string::basic_string[abi:ne180100]<0>(v295, "key_reshaped");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(v298, this, a2, v295);
  char v180 = 0;
  uint64_t v179 = 0;
  std::string v181 = 0;
  v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
  v310.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v179 = (std::string *)operator new(0x18uLL);
  char v180 = v179;
  std::string v181 = v179 + 1;
  char v180 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v181, (long long *)v298, (long long *)&v298[24], v179);
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v310, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  }
  else {
    std::string v310 = v312;
  }
  std::string v177 = 0;
  unint64_t v176 = 0;
  long long v178 = 0;
  v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
  v308.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v176 = (std::string *)operator new(0x18uLL);
  std::string v177 = v176;
  long long v178 = v176 + 1;
  std::string v177 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v178, (long long *)&v310, (long long *)&v311, v176);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v182, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)&v192, (uint64_t *)&v179, (uint64_t *)&v176);
  v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v310.__r_.__value_.__l.__data_);
  }
  v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  if (SHIBYTE(v283) < 0) {
    operator delete((void *)v282);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  uint64_t v32 = *(long long **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3) >= 3)
  {
    if (*((char *)v32 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v310, *((const std::string::value_type **)v32 + 6), *((void *)v32 + 7));
    }
    else {
      std::string v310 = *(std::string *)((unsigned char *)v32 + 2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v292, "value_t");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v310, this, a2, &v292);
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v292, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v282, "value_t");
  (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
  std::string::basic_string[abi:ne180100]<0>(v295, "value_reshaped");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(v298, this, a2, v295);
  uint64_t v172 = 0;
  unint64_t v171 = 0;
  float v173 = 0;
  v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
  v308.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v171 = (std::string *)operator new(0x18uLL);
  uint64_t v172 = v171;
  float v173 = v171 + 1;
  uint64_t v172 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v173, (long long *)v298, (long long *)&v298[24], v171);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v308, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  }
  else {
    std::string v308 = v310;
  }
  uint64_t v169 = 0;
  uint64_t v168 = 0;
  uint64_t v170 = 0;
  v161.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v168 = (std::string *)operator new(0x18uLL);
  uint64_t v169 = v168;
  uint64_t v170 = v168 + 1;
  uint64_t v169 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v170, (long long *)&v308, (long long *)&v309, v168);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v174, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)&v192, (uint64_t *)&v171, (uint64_t *)&v168);
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v308.__r_.__value_.__l.__data_);
  }
  v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  if (SHIBYTE(v283) < 0) {
    operator delete((void *)v282);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v308, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  }
  else {
    std::string v308 = v312;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3) >= 4)
  {
    std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "key_state_concat");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(void *)this + 296))(&v292, this, a2, (char *)&v285 + 8);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v308.__r_.__value_.__l.__data_);
    }
    std::string v308 = v292;
    *((unsigned char *)&v292.__r_.__value_.__s + 23) = 0;
    v292.__r_.__value_.__s.__data_[0] = 0;
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    WORD2(v304[0]) = 0;
    LODWORD(v304[0]) = 1;
    std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "general_concat");
    std::string::basic_string[abi:ne180100]<0>(v298, "key_state_concat");
    (*(void (**)(long long *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(&v282, this, a2, v298);
    uint64_t v33 = *((void *)a2 + 3);
    if (*(char *)(v33 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(v33 + 72), *(void *)(v33 + 80));
    }
    else {
      std::string v292 = *(std::string *)(v33 + 72);
    }
    if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v293, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
    }
    else {
      std::string v293 = v312;
    }
    float v166 = 0;
    unint64_t v165 = 0;
    char v167 = 0;
    *(void *)float32x4_t v295 = &v165;
    v295[8] = 0;
    unint64_t v165 = (std::string *)operator new(0x30uLL);
    float v166 = v165;
    char v167 = v165 + 2;
    float v166 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v167, (long long *)&v292, &v294, v165);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v295, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)float32x4_t v295 = v308;
    }
    uint64_t v163 = 0;
    float v162 = 0;
    uint64_t v164 = 0;
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
    v161.__r_.__value_.__s.__data_[8] = 0;
    float v162 = (std::string *)operator new(0x18uLL);
    uint64_t v163 = v162;
    uint64_t v164 = v162 + 1;
    uint64_t v163 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v164, (long long *)v295, (long long *)&v295[24], v162);
    Espresso::sequential_builder::add_t<Espresso::generic_general_concat_kernel,Espresso::general_concat_params_t>(v306, &v269, (uint64_t)&v285 + 8, (uint64_t)&v282, (uint64_t)v304, (uint64_t *)&v165, (uint64_t *)&v162);
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
    if ((v295[23] & 0x80000000) != 0) {
      operator delete(*(void **)v295);
    }
    *(void *)float32x4_t v295 = &v165;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v295);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v293.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v292 + i * 8 + 24));
      }
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if ((v298[23] & 0x80000000) != 0) {
      operator delete(*(void **)v298);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (v306[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v306[1]);
    }
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v161, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  }
  else {
    std::string v161 = v310;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3) >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "value_state_concat");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(void *)this + 296))(&v292, this, a2, (char *)&v285 + 8);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v161.__r_.__value_.__l.__data_);
    }
    std::string v161 = v292;
    *((unsigned char *)&v292.__r_.__value_.__s + 23) = 0;
    v292.__r_.__value_.__s.__data_[0] = 0;
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    WORD2(v302[0]) = 0;
    LODWORD(v302[0]) = 1;
    std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "general_concat");
    std::string::basic_string[abi:ne180100]<0>(v298, "value_state_concat");
    (*(void (**)(long long *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(&v282, this, a2, v298);
    uint64_t v35 = *((void *)a2 + 3);
    if (*(char *)(v35 + 119) < 0) {
      std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(v35 + 96), *(void *)(v35 + 104));
    }
    else {
      std::string v292 = *(std::string *)(v35 + 96);
    }
    if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v293, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
    }
    else {
      std::string v293 = v310;
    }
    uint64_t v159 = 0;
    uint64_t v158 = 0;
    uint64_t v160 = 0;
    *(void *)float32x4_t v295 = &v158;
    v295[8] = 0;
    uint64_t v158 = (std::string *)operator new(0x30uLL);
    uint64_t v159 = v158;
    uint64_t v160 = v158 + 2;
    uint64_t v159 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v160, (long long *)&v292, &v294, v158);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v295, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)float32x4_t v295 = v161;
    }
    uint64_t v156 = 0;
    int v155 = 0;
    uint64_t v157 = 0;
    v306[0] = &v155;
    LOBYTE(v306[1]) = 0;
    int v155 = (std::string *)operator new(0x18uLL);
    uint64_t v156 = v155;
    uint64_t v157 = v155 + 1;
    uint64_t v156 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v157, (long long *)v295, (long long *)&v295[24], v155);
    Espresso::sequential_builder::add_t<Espresso::generic_general_concat_kernel,Espresso::general_concat_params_t>(v304, &v269, (uint64_t)&v285 + 8, (uint64_t)&v282, (uint64_t)v302, (uint64_t *)&v158, (uint64_t *)&v155);
    v306[0] = &v155;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v306);
    if ((v295[23] & 0x80000000) != 0) {
      operator delete(*(void **)v295);
    }
    *(void *)float32x4_t v295 = &v158;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v295);
    for (uint64_t j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v293.__r_.__value_.__r.__words[j + 2]) < 0) {
        operator delete(*(void **)((char *)&v292 + j * 8 + 24));
      }
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if ((v298[23] & 0x80000000) != 0) {
      operator delete(*(void **)v298);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (v304[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v304[1]);
    }
  }
  __int16 v153 = 0;
  char v154 = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "batch_matmul");
  std::string::basic_string[abi:ne180100]<0>(v298, "raw_score");
  (*(void (**)(long long *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(&v282, this, a2, v298);
  std::string::basic_string[abi:ne180100]<0>(v295, "query_t");
  (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(&v292, this, a2, v295);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v293, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else {
    std::string v293 = v308;
  }
  int v149 = 0;
  unint64_t v148 = 0;
  uint64_t v150 = 0;
  v306[0] = &v148;
  LOBYTE(v306[1]) = 0;
  unint64_t v148 = (std::string *)operator new(0x30uLL);
  int v149 = v148;
  uint64_t v150 = v148 + 2;
  int v149 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, (long long *)&v292, &v294, v148);
  std::string::basic_string[abi:ne180100]<0>(v304, "raw_score");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v306, this, a2, v304);
  uint64_t v146 = 0;
  unint64_t v145 = 0;
  uint64_t v147 = 0;
  v302[0] = &v145;
  LOBYTE(v302[1]) = 0;
  unint64_t v145 = (std::string *)operator new(0x18uLL);
  uint64_t v146 = v145;
  uint64_t v147 = v145 + 1;
  uint64_t v146 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v147, (long long *)v306, (long long *)&v308, v145);
  Espresso::sequential_builder::add_t<Espresso::generic_batch_matmul_kernel,Espresso::batch_matmul_params_t>(&v151, &v269, (uint64_t)&v285 + 8, (uint64_t)&v282, (uint64_t)&v153, (uint64_t *)&v148, (uint64_t *)&v145);
  v302[0] = &v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
  if (v307 < 0) {
    operator delete(v306[0]);
  }
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  v306[0] = &v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v306);
  for (uint64_t k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v293.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v292 + k * 8 + 24));
    }
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if (SHIBYTE(v283) < 0) {
    operator delete((void *)v282);
  }
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  if (*((unsigned char *)this + 312))
  {
    uint64_t v144 = 0xFFFFFFFFLL;
    std::string::basic_string[abi:ne180100]<0>(&v282, "get_shape");
    std::string::basic_string[abi:ne180100]<0>(v295, "raw_score_shape");
    (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(v298, this, a2, v295);
    std::string::basic_string[abi:ne180100]<0>(v304, "raw_score");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v306, this, a2, v304);
    float32x4_t v142 = 0;
    float32x4_t v141 = 0;
    unint64_t v143 = 0;
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
    v292.__r_.__value_.__s.__data_[8] = 0;
    float32x4_t v141 = (std::string *)operator new(0x18uLL);
    float32x4_t v142 = v141;
    unint64_t v143 = v141 + 1;
    float32x4_t v142 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v143, (long long *)v306, (long long *)&v308, v141);
    std::string::basic_string[abi:ne180100]<0>(&v301, "raw_score_shape");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v302, this, a2, &v301);
    uint64_t v139 = 0;
    uint64_t v138 = 0;
    float32x4_t v140 = 0;
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
    v292.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v138 = (std::string *)operator new(0x18uLL);
    uint64_t v139 = v138;
    float32x4_t v140 = v138 + 1;
    uint64_t v139 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v140, (long long *)v302, (long long *)v304, v138);
    uint64_t v38 = v275;
    LODWORD(v292.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v277 + 8))();
    Espresso::abstract_engine_factory::make_kernel_priv(v38, (uint64_t)&v277, (uint64_t)&v282, (uint64_t)&v144, (int *)&v292);
    int64_t v39 = lpsrc[0];
    if (!lpsrc[0]
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v292);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v40 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
      v288[0] = v39;
      v288[1] = lpsrc[1];
      if (lpsrc[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      v288[0] = v39;
      v288[1] = 0;
    }
    memset(&v292, 0, sizeof(v292));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v292, (uint64_t)v141, (uint64_t)v142, 0xAAAAAAAAAAAAAAABLL * (((char *)v142 - (char *)v141) >> 3));
    *(void *)unint64_t v286 = 0;
    *((void *)&v285 + 1) = 0;
    *(void *)&v286[8] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v285 + 1, (uint64_t)v138, (uint64_t)v139, 0xAAAAAAAAAAAAAAABLL * (((char *)v139 - (char *)v138) >> 3));
    Espresso::sequential_builder::add_kernel((uint64_t)&v269, v288, (uint64_t)&v282, (uint64_t)v298, (std::string **)&v292, (std::string **)&v285 + 1);
    id v81 = (char *)&v285 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    id v81 = &v292;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    if (v288[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v288[1]);
    }
    if (v269) {
      Espresso::sequential_builder::add_shape_from_kernel(&v269, (uint64_t)lpsrc[0], (long long **)&v141, (uint64_t *)&v138);
    }
    if (lpsrc[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc[1]);
    }
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
    if (v303 < 0) {
      operator delete(v302[0]);
    }
    if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v301.__r_.__value_.__l.__data_);
    }
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
    if (v307 < 0) {
      operator delete(v306[0]);
    }
    if (v305 < 0) {
      operator delete(v304[0]);
    }
    if ((v298[23] & 0x80000000) != 0) {
      operator delete(*(void **)v298);
    }
    if ((v295[23] & 0x80000000) != 0) {
      operator delete(*(void **)v295);
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    *(_OWORD *)&v298[4] = 0uLL;
    *(void *)&v298[20] = 0xFFFFFFFF00000001;
    int v299 = 0;
    *(_DWORD *)v298 = 1065353216;
    char v300 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v292, "fill");
    std::string::basic_string[abi:ne180100]<0>(&v282, "mask_fill");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
    std::string::basic_string[abi:ne180100]<0>(v306, "raw_score_shape");
    (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v295, this, a2, v306);
    uint64_t v134 = 0;
    uint64_t v133 = 0;
    uint64_t v135 = 0;
    v304[0] = &v133;
    LOBYTE(v304[1]) = 0;
    uint64_t v133 = (std::string *)operator new(0x18uLL);
    uint64_t v134 = v133;
    uint64_t v135 = v133 + 1;
    uint64_t v134 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v135, (long long *)v295, (long long *)&v295[24], v133);
    std::string::basic_string[abi:ne180100]<0>(v302, "mask_fill");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v304, this, a2, v302);
    uint64_t v131 = 0;
    uint64_t v130 = 0;
    uint64_t v132 = 0;
    v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
    v301.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v130 = (std::string *)operator new(0x18uLL);
    uint64_t v131 = v130;
    uint64_t v132 = v130 + 1;
    uint64_t v131 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v132, (long long *)v304, (long long *)v306, v130);
    Espresso::sequential_builder::add_t<Espresso::generic_fill_kernel,Espresso::fill_params_t>(&v136, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)v298, (uint64_t *)&v133, (uint64_t *)&v130);
    v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v301);
    if (v305 < 0) {
      operator delete(v304[0]);
    }
    if (v303 < 0) {
      operator delete(v302[0]);
    }
    v304[0] = &v133;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v304);
    if ((v295[23] & 0x80000000) != 0) {
      operator delete(*(void **)v295);
    }
    if (v307 < 0) {
      operator delete(v306[0]);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v295[4] = 0uLL;
    *(void *)&v295[20] = 0xFFFFFFFF00000001;
    int v296 = 0;
    *(_DWORD *)float32x4_t v295 = -831624408;
    char v297 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v292, "fill");
    std::string::basic_string[abi:ne180100]<0>(&v282, "eps_fill");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
    std::string::basic_string[abi:ne180100]<0>(v304, "raw_score_shape");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v306, this, a2, v304);
    int v126 = 0;
    uint64_t v125 = 0;
    char v127 = 0;
    v302[0] = &v125;
    LOBYTE(v302[1]) = 0;
    uint64_t v125 = (std::string *)operator new(0x18uLL);
    int v126 = v125;
    char v127 = v125 + 1;
    int v126 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v127, (long long *)v306, (long long *)&v308, v125);
    std::string::basic_string[abi:ne180100]<0>(&v301, "eps_fill");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v302, this, a2, &v301);
    long long v123 = 0;
    uint64_t v122 = 0;
    unint64_t v124 = 0;
    lpsrc[0] = &v122;
    LOBYTE(lpsrc[1]) = 0;
    uint64_t v122 = (std::string *)operator new(0x18uLL);
    long long v123 = v122;
    unint64_t v124 = v122 + 1;
    long long v123 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v124, (long long *)v302, (long long *)v304, v122);
    Espresso::sequential_builder::add_t<Espresso::generic_fill_kernel,Espresso::fill_params_t>(&v128, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)v295, (uint64_t *)&v125, (uint64_t *)&v122);
    lpsrc[0] = &v122;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
    if (v303 < 0) {
      operator delete(v302[0]);
    }
    if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v301.__r_.__value_.__l.__data_);
    }
    v302[0] = &v125;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
    if (v307 < 0) {
      operator delete(v306[0]);
    }
    if (v305 < 0) {
      operator delete(v304[0]);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
    BYTE4(v120) = 0;
    uint64_t v119 = 0xFFFFFFFFLL;
    LODWORD(v120) = 1;
    int v121 = -1;
    std::string::basic_string[abi:ne180100]<0>(&v292, "matrix_band_part");
    std::string::basic_string[abi:ne180100]<0>(&v282, "mask");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
    std::string::basic_string[abi:ne180100]<0>(v304, "mask_fill");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v306, this, a2, v304);
    uint64_t v115 = 0;
    int v114 = 0;
    uint64_t v116 = 0;
    v302[0] = &v114;
    LOBYTE(v302[1]) = 0;
    int v114 = (std::string *)operator new(0x18uLL);
    uint64_t v115 = v114;
    uint64_t v116 = v114 + 1;
    uint64_t v115 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v116, (long long *)v306, (long long *)&v308, v114);
    std::string::basic_string[abi:ne180100]<0>(&v301, "mask");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v302, this, a2, &v301);
    id v111 = 0;
    int v112 = 0;
    id v113 = 0;
    lpsrc[0] = &v111;
    LOBYTE(lpsrc[1]) = 0;
    id v111 = (std::string *)operator new(0x18uLL);
    int v112 = v111;
    id v113 = v111 + 1;
    int v112 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v113, (long long *)v302, (long long *)v304, v111);
    Espresso::sequential_builder::add_t<Espresso::generic_matrix_band_part_kernel,Espresso::matrix_band_part_params_t>(&v117, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)&v119, (uint64_t *)&v114, (uint64_t *)&v111);
    lpsrc[0] = &v111;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
    if (v303 < 0) {
      operator delete(v302[0]);
    }
    if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v301.__r_.__value_.__l.__data_);
    }
    v302[0] = &v114;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
    if (v307 < 0) {
      operator delete(v306[0]);
    }
    if (v305 < 0) {
      operator delete(v304[0]);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
    uint64_t v108 = 0xFFFFFFFFLL;
    BYTE4(v109) = 1;
    LODWORD(v109) = 1;
    int v110 = -1;
    std::string::basic_string[abi:ne180100]<0>(&v292, "matrix_band_part");
    std::string::basic_string[abi:ne180100]<0>(&v282, "eps");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, long long *))(*(void *)this + 296))((void *)&v285 + 1, this, a2, &v282);
    std::string::basic_string[abi:ne180100]<0>(v304, "eps_fill");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v306, this, a2, v304);
    char v103 = 0;
    int v104 = 0;
    uint64_t v105 = 0;
    v302[0] = &v103;
    LOBYTE(v302[1]) = 0;
    char v103 = (std::string *)operator new(0x18uLL);
    int v104 = v103;
    uint64_t v105 = v103 + 1;
    int v104 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v105, (long long *)v306, (long long *)&v308, v103);
    std::string::basic_string[abi:ne180100]<0>(&v301, "eps");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v302, this, a2, &v301);
    id v100 = 0;
    int64x2_t v101 = 0;
    id v102 = 0;
    lpsrc[0] = &v100;
    LOBYTE(lpsrc[1]) = 0;
    id v100 = (std::string *)operator new(0x18uLL);
    int64x2_t v101 = v100;
    id v102 = v100 + 1;
    int64x2_t v101 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v102, (long long *)v302, (long long *)v304, v100);
    Espresso::sequential_builder::add_t<Espresso::generic_matrix_band_part_kernel,Espresso::matrix_band_part_params_t>(&v106, &v269, (uint64_t)&v292, (uint64_t)&v285 + 8, (uint64_t)&v108, (uint64_t *)&v103, (uint64_t *)&v100);
    lpsrc[0] = &v100;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
    if (v303 < 0) {
      operator delete(v302[0]);
    }
    if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v301.__r_.__value_.__l.__data_);
    }
    v302[0] = &v103;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
    if (v307 < 0) {
      operator delete(v306[0]);
    }
    if (v305 < 0) {
      operator delete(v304[0]);
    }
    if ((v286[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v285 + 1));
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v292.__r_.__value_.__l.__data_);
    }
    v292.__r_.__value_.__r.__words[2] = 897988541;
    v293.__r_.__value_.__s.__data_[0] = 0;
    LODWORD(v294) = 0;
    HIDWORD(v293.__r_.__value_.__r.__words[2]) = 0;
    v292.__r_.__value_.__l.__size_ = 1065353216;
    v292.__r_.__value_.__r.__words[0] = 1;
    std::string::basic_string[abi:ne180100]<0>(&v282, "elementwise");
    std::string::basic_string[abi:ne180100]<0>(v304, "masking");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v306, this, a2, v304);
    std::string::basic_string[abi:ne180100]<0>(v302, "raw_score");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))((void *)&v285 + 1, this, a2, v302);
    std::string::basic_string[abi:ne180100]<0>(&v301, "mask");
    (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v286[16], this, a2, &v301);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    lpsrc[0] = &v95;
    LOBYTE(lpsrc[1]) = 0;
    uint64_t v95 = (std::string *)operator new(0x30uLL);
    uint64_t v96 = v95;
    uint64_t v97 = v95 + 2;
    uint64_t v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v97, (long long *)((char *)&v285 + 8), (long long *)&v287[8], v95);
    std::string::basic_string[abi:ne180100]<0>(v288, "raw_score_for_eps");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(lpsrc, this, a2, v288);
    id v92 = 0;
    int v93 = 0;
    int v94 = 0;
    id v81 = &v92;
    LOBYTE(v82) = 0;
    id v92 = (std::string *)operator new(0x18uLL);
    int v93 = v92;
    int v94 = v92 + 1;
    int v93 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v94, (long long *)lpsrc, (long long *)&v292, v92);
    Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(&v98, &v269, (uint64_t)&v282, (uint64_t)v306, (uint64_t)&v292, (uint64_t *)&v95, (uint64_t *)&v92);
    id v81 = &v92;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    if (v291 < 0) {
      operator delete(lpsrc[0]);
    }
    if (v289 < 0) {
      operator delete(v288[0]);
    }
    lpsrc[0] = &v95;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
    for (uint64_t m = 0; m != -48; m -= 24)
    {
      if ((char)v287[m + 7] < 0) {
        operator delete(*(void **)&v286[m + 16]);
      }
    }
    if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v301.__r_.__value_.__l.__data_);
    }
    if (v303 < 0) {
      operator delete(v302[0]);
    }
    if (v307 < 0) {
      operator delete(v306[0]);
    }
    if (v305 < 0) {
      operator delete(v304[0]);
    }
    if (SHIBYTE(v283) < 0) {
      operator delete((void *)v282);
    }
    *(void *)&v286[8] = 897988541;
    v286[16] = 0;
    *(void *)&v287[4] = 0;
    *(void *)unint64_t v286 = 1065353216;
    *((void *)&v285 + 1) = 0;
    std::string::basic_string[abi:ne180100]<0>(v306, "elementwise");
    std::string::basic_string[abi:ne180100]<0>(v302, "masking_eps");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v304, this, a2, v302);
    std::string::basic_string[abi:ne180100]<0>(&v301, "raw_score_for_eps");
    (*(void (**)(long long *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(&v282, this, a2, &v301);
    std::string::basic_string[abi:ne180100]<0>(lpsrc, "eps");
    (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v284, this, a2, lpsrc);
    uint64_t v87 = 0;
    unint64_t v88 = 0;
    char v89 = 0;
    v288[0] = &v87;
    LOBYTE(v288[1]) = 0;
    uint64_t v87 = (std::string *)operator new(0x30uLL);
    unint64_t v88 = v87;
    char v89 = v87 + 2;
    unint64_t v88 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v89, &v282, &v285, v87);
    std::string::basic_string[abi:ne180100]<0>(&v81, "masked_raw_score");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v288, this, a2, &v81);
    uint64_t v84 = 0;
    long long v85 = 0;
    int v86 = 0;
    unint64_t v280 = &v84;
    LOBYTE(v281) = 0;
    uint64_t v84 = (std::string *)operator new(0x18uLL);
    long long v85 = v84;
    int v86 = v84 + 1;
    long long v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v86, (long long *)v288, (long long *)lpsrc, v84);
    Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(&v90, &v269, (uint64_t)v306, (uint64_t)v304, (uint64_t)&v285 + 8, (uint64_t *)&v87, (uint64_t *)&v84);
    unint64_t v280 = &v84;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v280);
    if (v289 < 0) {
      operator delete(v288[0]);
    }
    if (v83 < 0) {
      operator delete(v81);
    }
    v288[0] = &v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v288);
    for (uint64_t n = 0; n != -6; n -= 3)
    {
      if (SHIBYTE(v284[n + 2]) < 0) {
        operator delete((void *)v284[n]);
      }
    }
    if (v291 < 0) {
      operator delete(lpsrc[0]);
    }
    if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v301.__r_.__value_.__l.__data_);
    }
    if (v305 < 0) {
      operator delete(v304[0]);
    }
    if (v303 < 0) {
      operator delete(v302[0]);
    }
    if (v307 < 0) {
      operator delete(v306[0]);
    }
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    if (v99) {
      nitro::nitro_function::nitro_function(v99);
    }
    if (v107) {
      nitro::nitro_function::nitro_function(v107);
    }
    if (v118) {
      nitro::nitro_function::nitro_function(v118);
    }
    if (v129) {
      nitro::nitro_function::nitro_function(v129);
    }
    if (v137) {
      nitro::nitro_function::nitro_function(v137);
    }
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
  }
  *(std::string::size_type *)((char *)&v292.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
  HIDWORD(v292.__r_.__value_.__r.__words[2]) = 0;
  v293.__r_.__value_.__s.__data_[0] = 0;
  LODWORD(v294) = 0;
  HIDWORD(v293.__r_.__value_.__r.__words[2]) = 0;
  unsigned int v43 = *((_DWORD *)this + 76) / *((_DWORD *)this + 77);
  v292.__r_.__value_.__r.__words[0] = 3;
  float v44 = 1.0 / sqrt((double)v43);
  *(float *)&v292.__r_.__value_.__r.__words[1] = v44;
  std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(v298, "scaled_raw_score");
  (*(void (**)(long long *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(&v282, this, a2, v298);
  if (*((unsigned char *)this + 312)) {
    uint64_t v45 = "masked_raw_score";
  }
  else {
    uint64_t v45 = "raw_score";
  }
  std::string::basic_string[abi:ne180100]<0>(v306, v45);
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v295, this, a2, v306);
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  char v80 = 0;
  v304[0] = &v78;
  LOBYTE(v304[1]) = 0;
  uint64_t v78 = (std::string *)operator new(0x18uLL);
  uint64_t v79 = v78;
  char v80 = v78 + 1;
  uint64_t v79 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v80, (long long *)v295, (long long *)&v295[24], v78);
  std::string::basic_string[abi:ne180100]<0>(v302, "scaled_raw_score");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v304, this, a2, v302);
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  uint64_t v77 = 0;
  v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  v301.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v75 = (std::string *)operator new(0x18uLL);
  unint64_t v76 = v75;
  uint64_t v77 = v75 + 1;
  unint64_t v76 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v77, (long long *)v304, (long long *)v306, v75);
  Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(v288, &v269, (uint64_t)&v285 + 8, (uint64_t)&v282, (uint64_t)&v292, (uint64_t *)&v78, (uint64_t *)&v75);
  v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v301);
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  if (v303 < 0) {
    operator delete(v302[0]);
  }
  v304[0] = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v304);
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if (v307 < 0) {
    operator delete(v306[0]);
  }
  if (SHIBYTE(v283) < 0) {
    operator delete((void *)v282);
  }
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  long long v282 = xmmword_192DCA290;
  uint64_t v283 = 1;
  LODWORD(v284[0]) = 16777472;
  std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "softmax");
  std::string::basic_string[abi:ne180100]<0>(v295, "softmax");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(v298, this, a2, v295);
  std::string::basic_string[abi:ne180100]<0>(v304, "scaled_raw_score");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v306, this, a2, v304);
  id v72 = 0;
  uint64_t v73 = 0;
  id v74 = 0;
  v302[0] = &v72;
  LOBYTE(v302[1]) = 0;
  id v72 = (std::string *)operator new(0x18uLL);
  uint64_t v73 = v72;
  id v74 = v72 + 1;
  uint64_t v73 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v74, (long long *)v306, (long long *)&v308, v72);
  std::string::basic_string[abi:ne180100]<0>(&v301, "softmax");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v302, this, a2, &v301);
  unint64_t v69 = 0;
  unint64_t v70 = 0;
  char v71 = 0;
  lpsrc[0] = &v69;
  LOBYTE(lpsrc[1]) = 0;
  unint64_t v69 = (std::string *)operator new(0x18uLL);
  unint64_t v70 = v69;
  char v71 = v69 + 1;
  unint64_t v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (long long *)v302, (long long *)v304, v69);
  Espresso::sequential_builder::add_t<Espresso::generic_softmax_kernel,Espresso::softmax_params>(&v81, &v269, (uint64_t)&v285 + 8, (uint64_t)v298, (uint64_t)&v282, (uint64_t *)&v72, (uint64_t *)&v69);
  lpsrc[0] = &v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
  if (v303 < 0) {
    operator delete(v302[0]);
  }
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v301.__r_.__value_.__l.__data_);
  }
  v302[0] = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
  if (v307 < 0) {
    operator delete(v306[0]);
  }
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  BYTE2(v136) = 0;
  LOWORD(v136) = 0;
  std::string::basic_string[abi:ne180100]<0>(v298, "batch_matmul");
  std::string::basic_string[abi:ne180100]<0>(v306, "weighted_avg");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v295, this, a2, v306);
  std::string::basic_string[abi:ne180100]<0>(v304, "softmax");
  (*(void (**)(void *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))((void *)&v285 + 1, this, a2, v304);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v286[16], v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v286[16] = *(_OWORD *)&v161.__r_.__value_.__l.__data_;
    *(void *)float32x4_t v287 = *((void *)&v161.__r_.__value_.__l + 2);
  }
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  long long v68 = 0;
  v302[0] = &v66;
  LOBYTE(v302[1]) = 0;
  unint64_t v66 = (std::string *)operator new(0x30uLL);
  uint64_t v67 = v66;
  long long v68 = v66 + 2;
  uint64_t v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v68, (long long *)((char *)&v285 + 8), (long long *)&v287[8], v66);
  std::string::basic_string[abi:ne180100]<0>(&v301, "weighted_avg");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v302, this, a2, &v301);
  float32x2_t v63 = 0;
  unint64_t v64 = 0;
  unint64_t v65 = 0;
  lpsrc[0] = &v63;
  LOBYTE(lpsrc[1]) = 0;
  float32x2_t v63 = (std::string *)operator new(0x18uLL);
  unint64_t v64 = v63;
  unint64_t v65 = v63 + 1;
  unint64_t v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, (long long *)v302, (long long *)v304, v63);
  Espresso::sequential_builder::add_t<Espresso::generic_batch_matmul_kernel,Espresso::batch_matmul_params_t>(&v119, &v269, (uint64_t)v298, (uint64_t)v295, (uint64_t)&v136, (uint64_t *)&v66, (uint64_t *)&v63);
  lpsrc[0] = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
  if (v303 < 0) {
    operator delete(v302[0]);
  }
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v301.__r_.__value_.__l.__data_);
  }
  v302[0] = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
  for (iuint64_t i = 0; ii != -48; ii -= 24)
  {
    if ((char)v287[ii + 7] < 0) {
      operator delete(*(void **)&v286[ii + 16]);
    }
  }
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if (v307 < 0) {
    operator delete(v306[0]);
  }
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  std::string::basic_string[abi:ne180100]<0>((void *)&v285 + 1, "transpose");
  std::string::basic_string[abi:ne180100]<0>(v295, "context_t");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, unsigned char *))(*(void *)this + 296))(v298, this, a2, v295);
  std::string::basic_string[abi:ne180100]<0>(v304, "weighted_avg");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v306, this, a2, v304);
  uint64_t v60 = 0;
  id v61 = 0;
  int32x2_t v62 = 0;
  v302[0] = &v60;
  LOBYTE(v302[1]) = 0;
  uint64_t v60 = (std::string *)operator new(0x18uLL);
  id v61 = v60;
  int32x2_t v62 = v60 + 1;
  id v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62, (long long *)v306, (long long *)&v308, v60);
  std::string::basic_string[abi:ne180100]<0>(&v301, "context_t");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(void *)this + 296))(v302, this, a2, &v301);
  unint64_t v57 = 0;
  unint64_t v58 = 0;
  unint64_t v59 = 0;
  lpsrc[0] = &v57;
  LOBYTE(lpsrc[1]) = 0;
  unint64_t v57 = (std::string *)operator new(0x18uLL);
  unint64_t v58 = v57;
  unint64_t v59 = v57 + 1;
  unint64_t v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59, (long long *)v302, (long long *)v304, v57);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v108, &v269, (uint64_t)&v285 + 8, (uint64_t)v298, (uint64_t)&v192, (uint64_t *)&v60, (uint64_t *)&v57);
  lpsrc[0] = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
  if (v303 < 0) {
    operator delete(v302[0]);
  }
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v301.__r_.__value_.__l.__data_);
  }
  v302[0] = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
  if (v307 < 0) {
    operator delete(v306[0]);
  }
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if ((v286[15] & 0x80000000) != 0) {
    operator delete(*((void **)&v285 + 1));
  }
  *(_WORD *)&v286[24] = 1;
  *(_DWORD *)&v286[28] = 1;
  *((void *)&v285 + 1) = 0x100000001;
  int v47 = *((_DWORD *)this + 76);
  *(_DWORD *)&v286[20] = 0;
  *(_DWORD *)unint64_t v286 = v47;
  *(_OWORD *)&v286[4] = xmmword_192DCA570;
  std::string::basic_string[abi:ne180100]<0>(v298, "reshape");
  std::string::basic_string[abi:ne180100]<0>(v306, "context");
  (*(void (**)(unsigned char *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v295, this, a2, v306);
  std::string::basic_string[abi:ne180100]<0>(v302, "context_t");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(void *)this + 296))(v304, this, a2, v302);
  char v54 = 0;
  uint64_t v55 = 0;
  unint64_t v56 = 0;
  v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  v301.__r_.__value_.__s.__data_[8] = 0;
  char v54 = (std::string *)operator new(0x18uLL);
  uint64_t v55 = v54;
  unint64_t v56 = v54 + 1;
  uint64_t v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, (long long *)v304, (long long *)v306, v54);
  float v48 = *(long long **)a2;
  if (*(char *)(*(void *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)v48, *((void *)v48 + 1));
  }
  else
  {
    long long v49 = *v48;
    v301.__r_.__value_.__r.__words[2] = *((void *)v48 + 2);
    *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v49;
  }
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  __int16 v53 = 0;
  lpsrc[0] = &v51;
  LOBYTE(lpsrc[1]) = 0;
  uint64_t v51 = (std::string *)operator new(0x18uLL);
  uint64_t v52 = v51;
  __int16 v53 = v51 + 1;
  uint64_t v52 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (long long *)&v301, (long long *)v302, v51);
  Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(&v280, &v269, (uint64_t)v298, (uint64_t)v295, (uint64_t)&v285 + 8, (uint64_t *)&v54, (uint64_t *)&v51);
  lpsrc[0] = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v301.__r_.__value_.__l.__data_);
  }
  v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v301);
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  if (v303 < 0) {
    operator delete(v302[0]);
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if (v307 < 0) {
    operator delete(v306[0]);
  }
  if ((v298[23] & 0x80000000) != 0) {
    operator delete(*(void **)v298);
  }
  insert_network_layers(*((Espresso::net **)a2 + 6), v273, *((void *)a2 + 8));
  if (v281) {
    nitro::nitro_function::nitro_function(v281);
  }
  if (v109) {
    nitro::nitro_function::nitro_function(v109);
  }
  if (v120) {
    nitro::nitro_function::nitro_function(v120);
  }
  if (v82) {
    nitro::nitro_function::nitro_function(v82);
  }
  if (v288[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v288[1]);
  }
  if (v152) {
    nitro::nitro_function::nitro_function(v152);
  }
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v308.__r_.__value_.__l.__data_);
  }
  if (v175) {
    nitro::nitro_function::nitro_function(v175);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v310.__r_.__value_.__l.__data_);
  }
  if (v183) {
    nitro::nitro_function::nitro_function(v183);
  }
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v312.__r_.__value_.__l.__data_);
  }
  if (v191) {
    nitro::nitro_function::nitro_function(v191);
  }
  if (v201) {
    nitro::nitro_function::nitro_function(v201);
  }
  if (v209) {
    nitro::nitro_function::nitro_function(v209);
  }
  if (v217) {
    nitro::nitro_function::nitro_function(v217);
  }
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v279);
  if (v278) {
    nitro::nitro_function::nitro_function(v278);
  }
  if (v276) {
    nitro::nitro_function::nitro_function(v276);
  }
  if (v274) {
    nitro::nitro_function::nitro_function(v274);
  }
  if (v272 < 0) {
    operator delete(v271[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v271, v271[1]);
  if (v270) {
    nitro::nitro_function::nitro_function(v270);
  }
}

void sub_19282C04C(_Unwind_Exception *a1)
{
  STACK[0x910] = (unint64_t)&STACK[0x358];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x910]);
  uint64_t v3 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x8D0] + v3 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x8D0] + v3 + 24));
    }
    v3 -= 24;
    if (v3 == -48)
    {
      if (SLOBYTE(STACK[0x847]) < 0) {
        operator delete((void *)STACK[0x830]);
      }
      if (SLOBYTE(STACK[0x957]) < 0) {
        operator delete((void *)STACK[0x940]);
      }
      if (SLOBYTE(STACK[0x87F]) < 0) {
        operator delete((void *)STACK[0x868]);
      }
      if (SLOBYTE(STACK[0x387]) < 0) {
        operator delete((void *)STACK[0x370]);
      }
      if (*(char *)(v1 - 233) < 0) {
        operator delete(*(void **)(v1 - 256));
      }
      if (STACK[0x3F8]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3F8]);
      }
      if (*(char *)(v1 - 201) < 0) {
        operator delete(*(void **)(v1 - 224));
      }
      if (STACK[0x438]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x438]);
      }
      if (*(char *)(v1 - 169) < 0) {
        operator delete(*(void **)(v1 - 192));
      }
      if (STACK[0x478]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x478]);
      }
      if (STACK[0x4D8]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x4D8]);
      }
      if (STACK[0x518]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x518]);
      }
      if (STACK[0x558]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x558]);
      }
      if (SLOBYTE(STACK[0x5C7]) < 0) {
        operator delete((void *)STACK[0x5B0]);
      }
      if (SLOBYTE(STACK[0x637]) < 0) {
        operator delete((void *)STACK[0x620]);
      }
      if (SLOBYTE(STACK[0x6A7]) < 0) {
        operator delete((void *)STACK[0x690]);
      }
      Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x758]);
      _Unwind_Resume(a1);
    }
  }
}

void sub_19282D474()
{
  STACK[0x370] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x370]);
  if (*(char *)(v1 - 233) < 0) {
    operator delete(*(void **)(v1 - 256));
  }
  *(void *)(v1 - 256) = &STACK[0x3D8];
  JUMPOUT(0x19282D4C4);
}

void sub_19282D4B4()
{
  STACK[0x3E0] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v1 - 256);
  if (SLOBYTE(STACK[0x957]) < 0) {
    operator delete((void *)STACK[0x940]);
  }
  JUMPOUT(0x19282D4E4);
}

void sub_19282D538()
{
}

void sub_19282D540()
{
}

void sub_19282D548()
{
  *(void *)(v1 - 256) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 256));
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  *(void *)(v1 - 224) = &STACK[0x418];
  JUMPOUT(0x19282D598);
}

void sub_19282D588()
{
  STACK[0x420] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v1 - 224);
  if (SLOBYTE(STACK[0x957]) < 0) {
    operator delete((void *)STACK[0x940]);
  }
  JUMPOUT(0x19282D5B8);
}

void sub_19282D60C()
{
}

void sub_19282D614()
{
}

void sub_19282D61C()
{
  *(void *)(v1 - 256) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 256));
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  *(void *)(v1 - 192) = &STACK[0x458];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 192));
  if (SLOBYTE(STACK[0x957]) < 0) {
    operator delete((void *)STACK[0x940]);
  }
  if (SLOBYTE(STACK[0x927]) < 0) {
    operator delete((void *)STACK[0x910]);
  }
  if (SLOBYTE(STACK[0x87F]) < 0) {
    operator delete((void *)STACK[0x868]);
  }
  if (SLOBYTE(STACK[0x847]) < 0) {
    operator delete((void *)STACK[0x830]);
  }
  if (SLOBYTE(STACK[0x8E7]) < 0) {
    operator delete((void *)STACK[0x8D0]);
  }
  JUMPOUT(0x19282D1D0);
}

void sub_19282D6F8()
{
}

void sub_19282D700()
{
}

void sub_19282D708()
{
}

void sub_19282D710()
{
  *(void *)(v1 - 224) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 224));
  if (SLOBYTE(STACK[0x927]) < 0) {
    operator delete((void *)STACK[0x910]);
  }
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  STACK[0x910] = (unint64_t)&STACK[0x4B8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x910]);
  if (SLOBYTE(STACK[0x957]) < 0) {
    operator delete((void *)STACK[0x940]);
  }
  if (SLOBYTE(STACK[0x87F]) < 0) {
    operator delete((void *)STACK[0x868]);
  }
  JUMPOUT(0x19282D7B0);
}

void sub_19282D798()
{
  STACK[0x4C0] = v0;
  JUMPOUT(0x19282D76CLL);
}

void sub_19282D7A4()
{
}

void sub_19282D7D4()
{
}

void sub_19282D7DC()
{
}

void sub_19282D7E4()
{
  *(void *)(v1 - 224) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 224));
  if (SLOBYTE(STACK[0x927]) < 0) {
    operator delete((void *)STACK[0x910]);
  }
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  STACK[0x910] = (unint64_t)&STACK[0x4F8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x910]);
  if (SLOBYTE(STACK[0x957]) < 0) {
    operator delete((void *)STACK[0x940]);
  }
  if (SLOBYTE(STACK[0x87F]) < 0) {
    operator delete((void *)STACK[0x868]);
  }
  JUMPOUT(0x19282D884);
}

void sub_19282D86C()
{
  STACK[0x500] = v0;
  JUMPOUT(0x19282D840);
}

void sub_19282D878()
{
}

void sub_19282D8A8()
{
}

void sub_19282D8B0()
{
}

void sub_19282D8B8()
{
  *(void *)(v1 - 224) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 224));
  if (SLOBYTE(STACK[0x927]) < 0) {
    operator delete((void *)STACK[0x910]);
  }
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  STACK[0x910] = (unint64_t)&STACK[0x538];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x910]);
  if (SLOBYTE(STACK[0x957]) < 0) {
    JUMPOUT(0x19282D928);
  }
  JUMPOUT(0x19282D92CLL);
}

void sub_19282D940()
{
  STACK[0x540] = v0;
  JUMPOUT(0x19282D914);
}

void sub_19282D94C()
{
}

void sub_19282D98C()
{
}

void sub_19282D998()
{
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  JUMPOUT(0x19282D22CLL);
}

void sub_19282DA44()
{
}

void sub_19282DA50()
{
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long,unsigned long>(uint64_t a1, uint64_t a2)
{
}

void Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  long long v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v22 = v16;
    std::string v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::string::size_type v22 = v16;
    std::string v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_19282DCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_t<Espresso::generic_general_concat_kernel,Espresso::general_concat_params_t>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  long long v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v22 = v16;
    std::string v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::string::size_type v22 = v16;
    std::string v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_19282DFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_t<Espresso::generic_matrix_band_part_kernel,Espresso::matrix_band_part_params_t>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  long long v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v22 = v16;
    std::string v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::string::size_type v22 = v16;
    std::string v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_19282E2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

const char *Espresso::generic_self_attention_kernel::kernel_type_str(Espresso::generic_self_attention_kernel *this)
{
  return "self_attention";
}

uint64_t Espresso::generic_self_attention_kernel::has_dynamic_top_shape(Espresso::generic_self_attention_kernel *this)
{
  return *((unsigned __int8 *)this + 312);
}

BOOL Espresso::self_attention_kernel_cpu::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v3 = *((void *)a2 + 1);
    if (v3 != 5)
    {
      if (v3 == 7)
      {
        a2 = *(_DWORD **)a2;
        goto LABEL_8;
      }
      return 0;
    }
    if (**(_DWORD **)a2 != 1701535575 || *(unsigned char *)(*(void *)a2 + 4) != 121) {
      return **(_DWORD **)a2 == 1701535586 && *(unsigned char *)(*(void *)a2 + 4) == 121;
    }
    return 1;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 5)
  {
    if (*a2 != 1701535575 || *((unsigned char *)a2 + 4) != 121) {
      return *a2 == 1701535586 && *((unsigned char *)a2 + 4) == 121;
    }
    return 1;
  }
  if (v2 != 7) {
    return 0;
  }
LABEL_8:
  if (*a2 == 1970364247 && *(_DWORD *)((char *)a2 + 3) == 2037540213) {
    return 1;
  }
  if (*a2 == 1635147607 && *(_DWORD *)((char *)a2 + 3) == 1702194273) {
    return 1;
  }
  if (*a2 == 1970364258 && *(_DWORD *)((char *)a2 + 3) == 2037540213) {
    return 1;
  }
  return *a2 == 1635147618 && *(_DWORD *)((char *)a2 + 3) == 1702194273;
}

void Espresso::self_attention_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = *a6;
  if (!*a6)
  {
LABEL_6:
    unint64_t v8 = 0;
    goto LABEL_7;
  }
  unint64_t v8 = (std::__shared_weak_count *)a6[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    int v9 = *((unsigned __int8 *)a3 + 23);
    if (v9 != 5)
    {
      if (v9 != 7) {
        goto LABEL_64;
      }
      goto LABEL_14;
    }
    if (*(_DWORD *)a3 != 1701535575 || *((unsigned char *)a3 + 4) != 121)
    {
      if (*(_DWORD *)a3 != 1701535586 || *((unsigned char *)a3 + 4) != 121) {
        goto LABEL_64;
      }
      goto LABEL_54;
    }
    goto LABEL_69;
  }
  uint64_t v10 = a3[1];
  if (v10 == 5)
  {
    if (*(_DWORD *)*a3 != 1701535575 || *(unsigned char *)(*a3 + 4) != 121)
    {
      if (*(_DWORD *)*a3 != 1701535586 || *(unsigned char *)(*a3 + 4) != 121) {
        goto LABEL_64;
      }
LABEL_54:
      v21[0] = v7;
      v21[1] = (uint64_t)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v26, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v21, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 472);
      *(_OWORD *)(a1 + 464) = v26;
      if (!v15) {
        goto LABEL_62;
      }
      goto LABEL_61;
    }
LABEL_69:
    v24[0] = v7;
    v24[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v26, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v24, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 424);
    *(_OWORD *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v26;
    if (!v15) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  if (v10 != 7) {
    goto LABEL_64;
  }
  a3 = (uint64_t *)*a3;
LABEL_14:
  if (*(_DWORD *)a3 == 1970364247 && *(_DWORD *)((char *)a3 + 3) == 2037540213)
  {
    v25[0] = v7;
    v25[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v26, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v25, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 408);
    *(_OWORD *)(a1 + 400) = v26;
    if (!v15) {
      goto LABEL_62;
    }
  }
  else if (*(_DWORD *)a3 == 1635147607 && *(_DWORD *)((char *)a3 + 3) == 1702194273)
  {
    v23[0] = v7;
    v23[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v26, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v23, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 440);
    *(_OWORD *)(a1 + 432) = v26;
    if (!v15) {
      goto LABEL_62;
    }
  }
  else if (*(_DWORD *)a3 == 1970364258 && *(_DWORD *)((char *)a3 + 3) == 2037540213)
  {
    v22[0] = v7;
    v22[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v26, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v22, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 456);
    *(_OWORD *)(a1 + 448) = v26;
    if (!v15) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*(_DWORD *)a3 != 1635147618 || *(_DWORD *)((char *)a3 + 3) != 1702194273) {
      goto LABEL_64;
    }
    v20[0] = v7;
    v20[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v26, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v20, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 488);
    *(_OWORD *)(a1 + 480) = v26;
    if (!v15) {
      goto LABEL_62;
    }
  }
LABEL_61:
  nitro::nitro_function::nitro_function(v15);
LABEL_62:
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
LABEL_64:
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_19282E84C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::on_resized(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 320;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(a1 + 320);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::clear(a1 + 360);
  uint64_t v7 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v8 = 0;
    do
    {
      std::to_string(&v23, v8);
      int v9 = std::string::insert(&v23, 0, "src_");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v9->__r_.__value_.__r.__words[2];
      long long v26 = __p;
      *(_OWORD *)std::string __p = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      int v11 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (unsigned __int8 *)__p, (long long **)&v26);
      long long v12 = *(_OWORD *)(v7 + 16 * v8);
      uint64_t v13 = *(void *)(v7 + 16 * v8 + 8);
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v11 + 6);
      *(_OWORD *)(v11 + 40) = v12;
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      ++v8;
      uint64_t v7 = *a3;
    }
    while (v8 < (a3[1] - *a3) >> 4);
  }
  uint64_t v15 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v16 = 0;
    do
    {
      std::to_string(&v23, v16);
      std::string::size_type v17 = std::string::insert(&v23, 0, "dst_");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v17->__r_.__value_.__r.__words[2];
      long long v26 = __p;
      *(_OWORD *)std::string __p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      int v19 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (unsigned __int8 *)__p, (long long **)&v26);
      long long v20 = *(_OWORD *)(v15 + 16 * v16);
      uint64_t v21 = *(void *)(v15 + 16 * v16 + 8);
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type v22 = (std::__shared_weak_count *)*((void *)v19 + 6);
      *(_OWORD *)(v19 + 40) = v20;
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      ++v16;
      uint64_t v15 = *a2;
    }
    while (v16 < (a2[1] - *a2) >> 4);
  }
}

void sub_19282EA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::self_attention_kernel_cpu::clear_weights(Espresso::self_attention_kernel_cpu *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 53);
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 55);
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 61);
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void Espresso::self_attention_kernel_cpu::__launch()
{
}

void Espresso::self_attention_kernel_cpu::~self_attention_kernel_cpu(Espresso::self_attention_kernel_cpu *this)
{
  *(void *)this = &unk_1EE35DC58;
  int v2 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE35DC58;
  int v2 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(this);
}

void Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(Espresso::base_kernel *a1)
{
  *(void *)a1 = &unk_1EE368BE0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::~__hash_table((uint64_t)a1 + 360);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)a1 + 320);
  *(void *)a1 = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)a1 + 36));

  Espresso::base_kernel::~base_kernel(a1);
}

void Espresso::abstract_kernel_with_named_weights<Espresso::self_attention_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

uint64_t ___ZN8Espresso8hardware17supports_platformENS_8platformE_block_invoke_2()
{
  uint64_t result = MGIsQuestionValid();
  if (result)
  {
    uint64_t result = MGGetBoolAnswer();
    Espresso::hardware::supports_platform(Espresso::platform)::has_metal = result;
  }
  return result;
}

BOOL Espresso::hardware::is_virtual_machine(Espresso::hardware *this)
{
  if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1) {
    dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_37_7277);
  }
  return Espresso::hardware::is_virtual_machine(void)::result != 0;
}

uint64_t Espresso::hardware::enable_mpsgraph_for_hardware(Espresso::hardware *this, void *a2)
{
  if (Espresso::hardware::enable_mpsgraph_for_hardware(void *)::once_token != -1) {
    dispatch_once(&Espresso::hardware::enable_mpsgraph_for_hardware(void *)::once_token, &__block_literal_global_32_7286);
  }
  return Espresso::hardware::enable_mpsgraph_for_hardware(void *)::has_ane;
}

uint64_t ___ZN8Espresso8hardware28enable_mpsgraph_for_hardwareEPv_block_invoke()
{
  uint64_t result = MGIsQuestionValid();
  if (result)
  {
    uint64_t result = MGGetBoolAnswer();
    Espresso::hardware::enable_mpsgraph_for_hardware(void *)::has_ane = result;
  }
  return result;
}

void Espresso::abstract_engine_factory::get_registered_kernels(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = (std::recursive_mutex *)a1[12];
  std::recursive_mutex::lock(v5);
  int v6 = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
  unint64_t v58 = 0;
  unint64_t v59 = 0;
  unint64_t v60 = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v55);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v7 = v59;
  if ((unint64_t)v59 >= v60)
  {
    int v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v58, (uint64_t)v53);
  }
  else
  {
    if (SHIBYTE(v54) < 0)
    {
      std::string::__init_copy_ctor_external(v59, (const std::string::value_type *)v53[0], (std::string::size_type)v53[1]);
    }
    else
    {
      long long v8 = *(_OWORD *)v53;
      v59->__r_.__value_.__r.__words[2] = v54;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    int v9 = v7 + 1;
  }
  unint64_t v59 = v9;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v10 = a1[1];
  int v11 = (std::string::size_type *)MEMORY[0x1E4FBA418];
  float v44 = v5;
  if (!v10) {
    goto LABEL_29;
  }
  long long v12 = (uint64_t *)a1[1];
  while (1)
  {
    int v13 = *((_DWORD *)v12 + 7);
    if (v6 >= v13) {
      break;
    }
LABEL_12:
    long long v12 = (uint64_t *)*v12;
    if (!v12) {
      goto LABEL_29;
    }
  }
  if (v13 < v6)
  {
    ++v12;
    goto LABEL_12;
  }
  do
  {
    if (*(_DWORD *)(v10 + 28) >= v6) {
      uint64_t v14 = (uint64_t *)v10;
    }
    else {
      uint64_t v14 = (uint64_t *)(v10 + 8);
    }
    uint64_t v10 = *v14;
  }
  while (*v14);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v15 = v59;
  if ((unint64_t)v59 >= v60)
  {
    std::string::size_type v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v58, (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v48) < 0)
    {
      std::string::__init_copy_ctor_external(v59, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      long long v16 = *(_OWORD *)__p;
      v59->__r_.__value_.__r.__words[2] = v48;
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    std::string::size_type v17 = v15 + 1;
  }
  unint64_t v59 = v17;
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  v49.__r_.__value_.__r.__words[0] = *v11;
  *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + *(void *)(v49.__r_.__value_.__r.__words[0] - 24)) = v11[3];
  v49.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
  if (v51 < 0) {
    operator delete(v50);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&v52);
  int v9 = v59;
LABEL_29:
  long long v18 = (char *)v58;
  uint64_t v45 = v9;
  if (v58 != v9)
  {
    int v19 = a1 + 10;
    uint64_t v20 = MEMORY[0x1E4F14390];
    while (1)
    {
      uint64_t v21 = (void *)a1[9];
      if (v21 != v19) {
        break;
      }
LABEL_83:
      v18 += 24;
      if (v18 == (char *)v45) {
        goto LABEL_84;
      }
    }
    while (2)
    {
      std::string::size_type v22 = *((unsigned __int8 *)v21 + 55);
      if (*((char *)v21 + 55) < 0) {
        unint64_t v23 = v21[5];
      }
      else {
        unint64_t v23 = *((unsigned __int8 *)v21 + 55);
      }
      if (v18[23] < 0) {
        unint64_t v24 = *((void *)v18 + 1);
      }
      else {
        unint64_t v24 = v18[23];
      }
      if (v23 > v24)
      {
        if ((v22 & 0x80) != 0)
        {
          uint64_t v25 = v21[5];
          if (v18[23] < 0) {
            goto LABEL_43;
          }
LABEL_41:
          size_t v26 = v18[23];
        }
        else
        {
          uint64_t v25 = *((unsigned __int8 *)v21 + 55);
          if ((v18[23] & 0x80) == 0) {
            goto LABEL_41;
          }
LABEL_43:
          size_t v26 = *((void *)v18 + 1);
        }
        std::string::size_type v27 = v21 + 4;
        std::string::size_type v28 = v25 - v26;
        if ((v22 & 0x80) != 0)
        {
          if (v26 == -1 || (std::string::size_type v31 = v21[5], v32 = v31 >= v28, v33 = v31 - v28, !v32)) {
LABEL_89:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v33 >= v26) {
            size_t v29 = v26;
          }
          else {
            size_t v29 = v33;
          }
          unsigned int v30 = (void *)*v27;
        }
        else
        {
          if (v22 < v28 || v26 == -1) {
            goto LABEL_89;
          }
          if (v22 - v28 >= v26) {
            size_t v29 = v26;
          }
          else {
            size_t v29 = v22 - v28;
          }
          unsigned int v30 = v21 + 4;
        }
        if (v18[23] >= 0) {
          id v34 = v18;
        }
        else {
          id v34 = *(char **)v18;
        }
        if (!memcmp((char *)v30 + v28, v34, v29) && v29 == v26)
        {
          uint64_t v35 = v21 + 4;
          if ((v22 & 0x80) != 0) {
            uint64_t v35 = (void *)*v27;
          }
          unsigned int v36 = *((char *)v35 + v28 - 1);
          if ((v36 & 0x80000000) != 0) {
            int v37 = __maskrune(v36, 0x100uLL);
          }
          else {
            int v37 = *(_DWORD *)(v20 + 4 * v36 + 60) & 0x100;
          }
          if (v37)
          {
            std::string::basic_string(&v49, (const std::string *)(v21 + 4), 0, v28, (std::allocator<char> *)__p);
            unint64_t v38 = *(void *)(a3 + 8);
            if (v38 >= *(void *)(a3 + 16))
            {
              BOOL v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)&v49);
            }
            else
            {
              if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v39 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
                *(void *)(v38 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v49.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v38 = v39;
              }
              BOOL v40 = (std::string *)(v38 + 24);
              *(void *)(a3 + 8) = v38 + 24;
            }
            *(void *)(a3 + 8) = v40;
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v49.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      uint64_t v41 = (void *)v21[1];
      if (v41)
      {
        do
        {
          uint64_t v42 = v41;
          uint64_t v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          uint64_t v42 = (void *)v21[2];
          BOOL v43 = *v42 == (void)v21;
          uint64_t v21 = v42;
        }
        while (!v43);
      }
      uint64_t v21 = v42;
      if (v42 == v19) {
        goto LABEL_83;
      }
      continue;
    }
  }
LABEL_84:
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[0]);
  }
  v55[0] = *(void ***)MEMORY[0x1E4FBA418];
  *(void ***)((char *)v55 + (unint64_t)*(v55[0] - 3)) = *(void ***)(MEMORY[0x1E4FBA418] + 24);
  v55[1] = (void **)(MEMORY[0x1E4FBA470] + 16);
  if (v56 < 0) {
    operator delete(v55[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&v57);
  v55[0] = (void **)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v55);
  std::recursive_mutex::unlock(v44);
}

void sub_19282F434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61)
{
  *(void *)(v63 - 104) = v62;
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a60 < 0) {
    operator delete(a55);
  }
  std::ostringstream::~ostringstream((uint64_t)&a61);
  a61 = v63 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  std::recursive_mutex::unlock(v61);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(*a1);
    std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      nitro::nitro_function::nitro_function(v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3822C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3822C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3846E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3846E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D270;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C518;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386078;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::IREngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::IREngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C080;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::IREngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3869E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3869E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3873F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3873F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382F40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382F40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382220;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381730;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::direct_engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::direct_engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3833D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::direct_engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3833D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::QuantSimEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382DB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382DB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3857B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3857B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::HXEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::engine>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EE332290;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3813E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3813E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso23abstract_engine_factory15register_engineENSt3__110shared_ptrINS_15abstract_engineEEE_block_invoke@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  int v9 = a3;
  uint64_t v7 = operator new(0x1B8uLL);
  v7[1] = 0;
  v7[2] = 0;
  *uint64_t v7 = &unk_1EE3818B8;
  result.n128_u64[0] = Espresso::brick_kernel::brick_kernel((uint64_t)(v7 + 3), a1, &v9, a2);
  result.n128_u64[1] = (unint64_t)v7;
  *a4 = result;
  return result;
}

void sub_19283023C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::brick_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::brick_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3818B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::brick_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3818B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::engine_cpu>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::engine_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::engine_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::abstract_engine_factory>::__on_zero_shared(uint64_t a1)
{
  std::unique_ptr<std::recursive_mutex>::reset[abi:ne180100]((std::recursive_mutex **)(a1 + 120), 0);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 80));
  std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(*(void **)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 32);

  std::__tree<int>::destroy(v2);
}

void std::__shared_ptr_emplace<Espresso::abstract_engine_factory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387A10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::abstract_engine_factory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL Espresso::abstract_engine_factory::singleton_exists(Espresso::abstract_engine_factory *this)
{
  return singleton != 0;
}

void Espresso::abstract_engine_factory::destroy_singleton(Espresso::abstract_engine_factory *this)
{
  onceTokeuint64_t n = 0;
  uint64_t v1 = singleton;
  if (singleton)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(singleton + 8);
    if (v2) {
      nitro::nitro_function::nitro_function(v2);
    }
    MEMORY[0x192FF16B0](v1, 0x20C40A4A59CD2);
  }
  singletouint64_t n = 0;
}

uint64_t Espresso::espresso_training_data_source::get_num_samples(id *this)
{
  return [this[2] numberOfDataPoints];
}

void Espresso::espresso_training_data_source::~espresso_training_data_source(id *this)
{
  JUMPOUT(0x192FF16B0);
}

{
}

void Espresso::espresso_training_data_source::get_data_for_sample(id *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  unint64_t v6 = [this[2] numberOfDataPoints];
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Size of data source is 0");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v7 = a2 % v6;
  context = (void *)MEMORY[0x192FF2020]();
  id v8 = this[2];
  id v56 = 0;
  int v9 = [v8 dataPointAtIndex:(int)v7 error:&v56];
  uint64_t v39 = v7;
  id v41 = v56;
  if (!v9)
  {
    unint64_t v38 = [v41 localizedDescription];
    Espresso::throw_exception_selector<Espresso::io_error>(v38);
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v10 = v9;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v52 objects:v58 count:16];
  if (v11)
  {
    uint64_t v42 = *(void *)v53;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v53 != v42) {
          objc_enumerationMutation(v10);
        }
        id v13 = *(id *)(*((void *)&v52 + 1) + 8 * i);
        std::string::basic_string[abi:ne180100]<0>(v50, (char *)[v13 UTF8String]);
        uint64_t v14 = [v10 objectForKeyedSubscript:v13];
        uint64_t v15 = (const void *)[v14 dataPointer];

        if (!v15)
        {
          if (v51 >= 0) {
            unsigned int v36 = v50;
          }
          else {
            unsigned int v36 = (void **)v50[0];
          }
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,unsigned long &>((const char *)v36, v39);
        }
        id v16 = [v10 objectForKeyedSubscript:v13];
        std::string::size_type v17 = [v16 shape];
        std::vector<int>::vector(&v57, [v17 count]);

        for (unint64_t j = 0; ; ++j)
        {
          int v19 = [v16 shape];
          BOOL v20 = [v19 count] > j;

          if (!v20) {
            break;
          }
          uint64_t v21 = [v16 shape];
          std::string::size_type v22 = [v21 objectAtIndexedSubscript:j];
          int v23 = [v22 intValue];
          v57.__begin_[j] = v23;
        }
        __dst[0] = 0;
        __dst[1] = 0;
        uint64_t v44 = 0;
        begiuint64_t n = v57.__begin_;
        int64_t v25 = (char *)v57.__end_ - (char *)v57.__begin_;
        if (v57.__end_ == v57.__begin_)
        {
          HIDWORD(v44) = (unint64_t)v25 >> 2;
          if (!v57.__end_) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v26 = v25 >> 2;
          unint64_t v27 = (unint64_t)v25 >> 2;
          if ((unint64_t)(v25 >> 2) <= 1) {
            uint64_t v26 = 1;
          }
          memcpy(__dst, v57.__begin_, 4 * v26);
          HIDWORD(v44) = v27;
        }
        v57.__end_ = begin;
        operator delete(begin);
LABEL_18:

        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)__dst, 0, (uint64_t)v45);
        if (v46 != 1) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("data provider should provide tensor with batch size 1, instead of %d", v46);
        }
        if (v47 != 1) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("5d tensor not supported yet");
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v57, v45[0], v45[1], v45[2], 1);
        __dst[0] = (long long *)v50;
        std::string::size_type v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v50, __dst);
        size_t v29 = (std::__shared_weak_count *)*((void *)v28 + 6);
        *(_OWORD *)(v28 + 40) = *(_OWORD *)&v57.__begin_;
        if (v29) {
          nitro::nitro_function::nitro_function(v29);
        }
        v57.__begin_ = (std::vector<int>::pointer)v50;
        unsigned int v30 = *(void **)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v50, (long long **)&v57)+ 5)+ 24);
        v57.__begin_ = (std::vector<int>::pointer)v50;
        std::string::size_type v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v50, (long long **)&v57);
        uint64_t v32 = 0;
        uint64_t v33 = *((void *)v31 + 5);
        uint64_t v34 = *(int *)(v33 + 8);
        uint64_t v35 = v33 + 12;
        do
        {
          v34 *= *(int *)(v35 + v32);
          v32 += 4;
        }
        while (v32 != 12);
        memcpy(v30, v15, 4 * v34);
        if (__p)
        {
          std::string v49 = __p;
          operator delete(__p);
        }
        if (v51 < 0) {
          operator delete(v50[0]);
        }
      }
      uint64_t v11 = [v10 countByEnumeratingWithState:&v52 objects:v58 count:16];
    }
    while (v11);
  }
}

void sub_192830988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v43);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,unsigned long &>(const char *a1, uint64_t a2)
{
}

void Espresso::generic_factory_t::~generic_factory_t(Espresso::generic_factory_t *this)
{
  Espresso::generic_factory_t::~generic_factory_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE34CE18;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 13));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void Espresso::factory_object::~factory_object(Espresso::factory_object *this)
{
}

void Espresso::generic_factory_t::get_objects_copy(Espresso::generic_factory_t *this@<X0>, uint64_t a2@<X8>)
{
  BOOL v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  *(void *)a2 = a2 + 8;
  int v5 = (Espresso::generic_factory_t *)*((void *)this + 12);
  if (v5 != (Espresso::generic_factory_t *)((char *)this + 104))
  {
    do
    {
      uint64_t v6 = *(void *)(a2 + 8);
      unint64_t v7 = (void *)(a2 + 8);
      if (*(void *)a2 == a2 + 8) {
        goto LABEL_8;
      }
      id v8 = *(void **)(a2 + 8);
      int v9 = (void *)(a2 + 8);
      if (v6)
      {
        do
        {
          unint64_t v7 = v8;
          id v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          int v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, (void *)v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          std::string::size_type v17 = (void *)(a2 + 8);
          uint64_t v11 = (uint64_t **)(a2 + 8);
LABEL_14:
          long long v12 = (char *)operator new(0x48uLL);
          v15[0] = v12;
          v15[1] = a2 + 8;
          char v16 = 0;
          std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v12 + 32), (long long *)v5 + 2);
          char v16 = 1;
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a2, (uint64_t)v17, v11, (uint64_t *)v12);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        std::string::size_type v17 = v7;
        uint64_t v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a2, &v17, (void *)v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      id v13 = (Espresso::generic_factory_t *)*((void *)v5 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          id v13 = *(Espresso::generic_factory_t **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (Espresso::generic_factory_t *)*((void *)v5 + 2);
          BOOL v10 = *(void *)v14 == (void)v5;
          int v5 = v14;
        }
        while (!v10);
      }
      int v5 = v14;
    }
    while (v14 != (Espresso::generic_factory_t *)((char *)this + 104));
  }

  std::mutex::unlock(v4);
}

void sub_192830D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v10);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

double Espresso::generic_factory_t::generic_factory_t(Espresso::generic_factory_t *this)
{
  *(void *)this = &unk_1EE34CE18;
  *((void *)this + 1) = 850045863;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = (char *)this + 104;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EE34CE18;
  *((void *)this + 1) = 850045863;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = (char *)this + 104;
  return result;
}

void Espresso::generic_factory_t::destroy_singleton(Espresso::generic_factory_t *this)
{
  uint64_t v1 = Espresso::factories;
  if (Espresso::factories)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(Espresso::factories + 8));
    MEMORY[0x192FF16B0](v1, 0x1020C4062D53EE8);
  }
  Espresso::factories = 0;
  uint64_t v2 = (void *)Espresso::factory_queue;
  Espresso::factory_queue = 0;

  Espresso::onceTokeuint64_t n = 0;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::chop_argsort_kernel::~chop_argsort_kernel(Espresso::ANECompilerEngine::chop_argsort_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::chop_argsort_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::chop_argsort_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::chop_argsort_kernel::compile(Espresso::ANECompilerEngine::chop_argsort_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::chop_argsort_kernel::compile(Espresso::ANECompilerEngine::chop_argsort_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  BOOL v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (unint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v28[0] = a3[6];
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v28[0], (long long **)v28);
  uint64_t v11 = *((void *)v9 + 5);
  BOOL v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v28[0] = a3;
  long long v12 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)v28)+ 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v28, a3);
  uint64_t v13 = v30;
  for (uint64_t i = v31; i != v13; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  uint64_t v15 = v36;
  uint64_t v31 = v13;
  unsigned int v36 = @"Sort";

  char v16 = objc_opt_new();
  std::string::size_type v17 = v16;
  if (*((unsigned char *)this + 284)) {
    long long v18 = @"Ascending";
  }
  else {
    long long v18 = @"Descending";
  }
  [v16 setObject:v18 forKeyedSubscript:@"Direction"];
  Espresso::abstract_blob_container::shape((char *)v23, v11);
  if (v24 == 1) {
    int v19 = 4;
  }
  else {
    int v19 = 5;
  }
  if (v25 == -1) {
    int v20 = v19;
  }
  else {
    int v20 = v25;
  }
  if (__p)
  {
    unint64_t v27 = __p;
    operator delete(__p);
  }
  int v21 = (v20 & (*((int *)this + 70) >> 31)) + *((_DWORD *)this + 70);
  if (v21 >= 0)
  {
    std::string::size_type v22 = @"Height";
    switch(v20 + ~v21)
    {
      case 0:
        std::string::size_type v22 = @"Width";
        goto LABEL_37;
      case 1:
        goto LABEL_37;
      case 2:
        if (v20 == 5 && *(unsigned char *)(v8 + 1281)) {
          goto LABEL_33;
        }
        goto LABEL_36;
      case 3:
        std::string::size_type v22 = @"Batch";
        if (v20 == 5 && *(unsigned char *)(v8 + 1281)) {
LABEL_36:
        }
          std::string::size_type v22 = @"Channel";
        goto LABEL_37;
      case 4:
        if (v20 == 5 && *(unsigned char *)(v8 + 1281)) {
          std::string::size_type v22 = @"Batch";
        }
        else {
LABEL_33:
        }
          std::string::size_type v22 = @"Depth";
LABEL_37:
        [v17 setObject:v22 forKeyedSubscript:@"SortDimension"];
        [v17 setObject:&unk_1EE3AF190 forKeyedSubscript:@"SortIndices"];
        Espresso::abstract_blob_container::shape((char *)v23, v11);
        if (__p)
        {
          unint64_t v27 = __p;
          operator delete(__p);
        }
        [v17 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"Indices"];
        objc_storeStrong(&v37, v17);
        Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v28);

        if (v34 < 0) {
          operator delete(v33);
        }
        v23[0] = (__CFString *)&v32;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
        v23[0] = (__CFString *)&v30;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
        if (v29 < 0) {
          operator delete(v28[0]);
        }
        if (v12) {
          nitro::nitro_function::nitro_function(v12);
        }
        if (v10) {
          nitro::nitro_function::nitro_function(v10);
        }
        nitro::nitro_function::nitro_function(v7);
        return;
      default:
        break;
    }
  }
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
}

void sub_192831260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, id a18)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a18);
  if (v20)
  {
    nitro::nitro_function::nitro_function(v20);
    if (!v19)
    {
LABEL_3:
      if (!v18) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v19)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v19);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v18);
  goto LABEL_5;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::argsort_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_argsort_kernel::kernel_type_str(Espresso::generic_argsort_kernel *this)
{
  return "argsort";
}

BOOL Espresso::ANECompilerEngine::chop_argsort_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6 = (_OWORD *)*((void *)a3 + 6);
  unint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      int v9 = (unsigned __int8 *)*((void *)v6 + 9);
    }
    else {
      int v9 = 0;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  BOOL v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v9 + 472));
  if ((Espresso::ANECompilerEngine::is_mix_c((Espresso::ANECompilerEngine *)v10, v11) & 1) == 0)
  {
    unsigned int v12 = Espresso::ANECompilerEngine::bottom_compute_path(a3, (const Espresso::base_kernel::validate_for_engine_args_t *)v9, 0);
    if (v12 < 8 && ((0x97u >> v12) & 1) != 0)
    {
      int v18 = *(_DWORD *)(*(void *)a3 + 20);
      if (v18 == -1)
      {
        if (*(_DWORD *)(*(void *)a3 + 16) == 1) {
          int v18 = 4;
        }
        else {
          int v18 = 5;
        }
      }
      int v19 = off_1E5747280[v12];
      ANECSortLayerDescInitialize();
      if (*(unsigned char *)(a1 + 284)) {
        int v20 = @"Ascending";
      }
      else {
        int v20 = @"Descending";
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      int v21 = (v18 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
      if (v21 < 0) {
LABEL_73:
      }
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      int v22 = v18 + ~v21;
      int v23 = v9[1281];
      int v24 = @"Height";
      switch(v22)
      {
        case 0:
          int v24 = @"Width";
          goto LABEL_43;
        case 1:
          goto LABEL_43;
        case 2:
          if (v18 == 5 && v9[1281]) {
            goto LABEL_39;
          }
          goto LABEL_42;
        case 3:
          int v24 = @"Batch";
          if (v18 == 5 && v9[1281]) {
LABEL_42:
          }
            int v24 = @"Channel";
          goto LABEL_43;
        case 4:
          if (v18 == 5 && v9[1281]) {
            int v24 = @"Batch";
          }
          else {
LABEL_39:
          }
            int v24 = @"Depth";
LABEL_43:
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
          if (vector_dimension)
          {
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)vector_dimension;
            long long v61 = xmmword_192DC8DC0;
            uint64_t v64 = *MEMORY[0x1E4F1CFD0];
            ANECTensorDescInitialize();
            Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v49, (NSString *)(a1 + 288), v10);
            uint64_t v47 = 0;
            uint64_t v48 = 0;
            if (v8) {
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v26 = *(const __CFString *const **)a3;
            uint64_t v27 = *(void *)(*(void *)a3 + 32);
            long long v28 = *(_OWORD *)(*(void *)a3 + 16);
            v38[0] = *(_OWORD *)*(void *)a3;
            v38[1] = v28;
            uint64_t v39 = v27;
            BOOL v40 = 0;
            id v41 = 0;
            uint64_t v42 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v40, *((const void **)v26 + 5), *((void *)v26 + 6), (uint64_t)(*((void *)v26 + 6) - *((void *)v26 + 5)) >> 2);
            Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v43, (const Espresso::net *)v9, (const Espresso::layer_shape *)v38, 1);
            if (v40)
            {
              id v41 = v40;
              operator delete(v40);
            }
            if (v8) {
              nitro::nitro_function::nitro_function(v8);
            }
            *(void *)&long long v29 = v45;
            *((void *)&v29 + 1) = v46;
            long long v53 = v29;
            p_Class isa = &v19->isa;
            uint64_t v54 = v44;
            *(void *)&long long v29 = (int)v43;
            *((void *)&v29 + 1) = SHIDWORD(v43);
            long long v52 = v29;
            int v30 = ANECValidateSortLayer();
            BOOL v16 = v30 == 0;
            if (v30)
            {
              uint64_t v31 = *a2;
              uint64_t v32 = a2[1];
              v37[0] = v31;
              v37[1] = v32;
              if (v32) {
                atomic_fetch_add_explicit(&v32->i64[1], 1uLL, memory_order_relaxed);
              }
              std::to_string(&v35, v30);
              uint64_t v33 = std::string::insert(&v35, 0, "argsort_kernel: ANECValidateSortLayer failed with status ");
              std::string v36 = *v33;
              v33->__r_.__value_.__l.__size_ = 0;
              v33->__r_.__value_.__r.__words[2] = 0;
              v33->__r_.__value_.__r.__words[0] = 0;
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v55, (long long *)&v36, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(v37, (Espresso::base_kernel::validate_for_engine_warning_t *)&v55);
              if (v58) {
                nitro::nitro_function::nitro_function(v58);
              }
              unint64_t v66 = (void **)v57;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v66);
              unint64_t v66 = (void **)v56;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v66);
              if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v55.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v36.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v35.__r_.__value_.__l.__data_);
              }
              if (v32) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32);
              }
            }
            if (v50) {
              nitro::nitro_function::nitro_function(v50);
            }
            goto LABEL_21;
          }
          char v34 = *a2;
          uint64_t v14 = a2[1];
          v59[0] = v34;
          v59[1] = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&p_isa, "argsort_kernel: unsupported input shape: expect one of the non-axis dimension to have size 1.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v55, (long long *)&p_isa, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v59, (Espresso::base_kernel::validate_for_engine_warning_t *)&v55);
          if (v58) {
            nitro::nitro_function::nitro_function(v58);
          }
          uint64_t v43 = (void **)v57;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v43);
          uint64_t v43 = (void **)v56;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v43);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v52) < 0)
          {
            uint64_t v15 = p_isa;
            goto LABEL_17;
          }
          break;
        default:
          goto LABEL_73;
      }
    }
    else
    {
      uint64_t v13 = *a2;
      uint64_t v14 = a2[1];
      v65[0] = v13;
      v65[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v55, "argsort_kernel: invalid compute path for input.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v55, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v65, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (v63) {
        nitro::nitro_function::nitro_function(v63);
      }
      p_Class isa = (void **)&v62;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&p_isa);
      p_Class isa = (void **)&v61;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&p_isa);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v15 = (void **)v55.__r_.__value_.__r.__words[0];
LABEL_17:
        operator delete(v15);
      }
    }
    if (v14) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14);
    }
  }
  BOOL v16 = 0;
LABEL_21:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v16;
}

void sub_192831854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a46);
  if (a40 < 0) {
    operator delete(__p);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }

  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  _Unwind_Resume(a1);
}

void sub_192831978()
{
  if (!v0) {
    JUMPOUT(0x192831970);
  }
  JUMPOUT(0x192831968);
}

void Espresso::ANECompilerEngine::chop_argsort_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::chop_argsort_kernel::~chop_argsort_kernel(Espresso::ANECompilerEngine::chop_argsort_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::chop_argsort_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::chop_argsort_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::func_argv_name(uint64_t a1, const void **a2, int a3)
{
  if (a3 == 2)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    uint64_t result = std::string::basic_string[abi:ne180100](a1, v10 + 9);
    if (*(char *)(result + 23) >= 0) {
      uint64_t v11 = (char *)result;
    }
    else {
      uint64_t v11 = *(char **)result;
    }
    if (v10)
    {
      if (*((char *)a2 + 23) >= 0) {
        unsigned int v12 = a2;
      }
      else {
        unsigned int v12 = *a2;
      }
      uint64_t result = (uint64_t)memmove(v11, v12, v10);
    }
    uint64_t v13 = &v11[v10];
    *(void *)uint64_t v13 = *(void *)"_dim_argv";
    v13[8] = 118;
    int v9 = &v11[v10 + 9];
  }
  else if (a3 == 1)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v14 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v14 = (size_t)a2[1];
    }
    uint64_t result = std::string::basic_string[abi:ne180100](a1, v14 + 11);
    if (*(char *)(result + 23) >= 0) {
      uint64_t v15 = (char *)result;
    }
    else {
      uint64_t v15 = *(char **)result;
    }
    if (v14)
    {
      if (*((char *)a2 + 23) >= 0) {
        BOOL v16 = a2;
      }
      else {
        BOOL v16 = *a2;
      }
      uint64_t result = (uint64_t)memmove(v15, v16, v14);
    }
    std::string::size_type v17 = &v15[v14];
    *(void *)std::string::size_type v17 = *(void *)"_shape_argv";
    *(_DWORD *)(v17 + 7) = 1986490977;
    int v9 = &v15[v14 + 11];
  }
  else
  {
    if (a3) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,Espresso::loopkit_func_t &>(a3);
    }
    if (*((char *)a2 + 23) >= 0) {
      size_t v4 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v4 = (size_t)a2[1];
    }
    uint64_t result = std::string::basic_string[abi:ne180100](a1, v4 + 5);
    if (*(char *)(result + 23) >= 0) {
      uint64_t v6 = (char *)result;
    }
    else {
      uint64_t v6 = *(char **)result;
    }
    if (v4)
    {
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v7 = a2;
      }
      else {
        unint64_t v7 = *a2;
      }
      uint64_t result = (uint64_t)memmove(v6, v7, v4);
    }
    uint64_t v8 = &v6[v4];
    v8[4] = 118;
    *(_DWORD *)uint64_t v8 = 1735549279;
    int v9 = &v6[v4 + 5];
  }
  char *v9 = 0;
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,Espresso::loopkit_func_t &>(int a1)
{
}

uint64_t Espresso::lk_buffer_generator::lk_buffer_generator(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  unint64_t v7 = *(int *)(a2 + 20);
  memset(&v20, 0, sizeof(v20));
  if (v7)
  {
    std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](&v20, v7);
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
    bzero((void *)v20.__r_.__value_.__l.__size_, 16 * v7);
    v20.__r_.__value_.__l.__size_ = size + 16 * v7;
    std::string::size_type v10 = v20.__r_.__value_.__r.__words[0];
    uint64_t v11 = a2 - 4;
    unsigned int v12 = (int *)(v20.__r_.__value_.__r.__words[0] + 8);
    int v13 = 1;
    do
    {
      int v14 = *(_DWORD *)(v11 + 4 * v7);
      *(v12 - 2) = 0;
      *(v12 - 1) = v14;
      int *v12 = v13;
      v12[1] = 0;
      v12 += 4;
      v13 *= *(_DWORD *)(v11 + 4 * v7--);
    }
    while (v7);
    uint64_t v15 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v15;
      operator delete(v15);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
    }
  }
  else
  {
    std::string::size_type v10 = 0;
  }
  *(void *)a1 = v10;
  std::string::size_type v16 = v20.__r_.__value_.__l.__size_;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v20.__r_.__value_.__r.__words[1];
  if (a4 >= 5)
  {
    Espresso::compute_path_to_string(a4, &v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v19 = &v20;
    }
    else {
      int v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    int v21 = v19;
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("compute_path_to_lk_type for compute path %s", &v21);
  }
  int v17 = dword_192DD6520[a4] | dword_192DD650C[a4];
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = v17;
  *(_DWORD *)(a1 + 60) = (v16 - v10) >> 4;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_192831D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string::size_type v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,Espresso::loopkit_func_t &>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("loopkit func of type %d fail to evaluate. exit code = %d", a1, v1);
}

double Espresso::solver_sgd::solver_sgd(uint64_t a1, void *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = *a4;
  *(void *)(a1 + 56) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = a1 + 136;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  double result;

  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = *a4;
  *(void *)(a1 + 56) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = a1 + 136;
  return result;
}

uint64_t Espresso::solver_sgd::solver_sgd(uint64_t a1, void *a2, uint64_t *a3, long long *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  long long v11 = *a4;
  uint64_t v12 = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 56) = v12;
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)(a1 + 80), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)(a1 + 104), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  return a1;
}

void sub_192831F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 32);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  _Unwind_Resume(a1);
}

void Espresso::solver_sgd::step(Espresso::solver_sgd *this)
{
  void (***v4)(void **__return_ptr, void);
  std::__shared_weak_count *v5;
  long long v6;
  std::__shared_weak_count *v7;
  void *i;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  const void *v17;
  float *v18;
  float *v19;
  std::__shared_weak_count *v20;
  float v21;
  float v22;
  void *v23;
  std::runtime_error *exception;
  void *__p[2];
  void *v26;
  long long v27;
  long long v28;
  long long v29;
  long long *v30;

  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v4 = *(void (****)(void **__return_ptr, void))(v2 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::context_switcher::finish((Espresso::context_switcher *)&v28);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  *(void *)&long long v28 = v4;
  *((void *)&v28 + 1) = v3;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  (**v4)(__p, v4);
  uint64_t v6 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  long long v7 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  long long v29 = v6;
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
    if (__p[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v27 = v29;
  if (*((void *)&v29 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  (*(void (**)(void **__return_ptr))(**((void **)this + 1) + 8))(__p);
  for (uint64_t i = v26; i; uint64_t i = (void *)*i)
  {
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*((void *)this + 3) + 136), (unsigned __int8 *)i + 16))
    {
      uint64_t v9 = *((void *)this + 3) + 136;
      int v30 = (long long *)(i + 2);
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)i + 16, &v30);
      long long v11 = *((void *)v10 + 5);
      uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 + 6);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!i[5])
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "data error");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      (*(void (**)(uint64_t, long long *, void *))(*(void *)v11 + 48))(v11, &v27, i + 5);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
    }
  }
  Espresso::net::__forward(*((void *)this + 3), &v27, 0, 0xFFFFFFFFLL);
  int v13 = *((void *)this + 3);
  uint64_t v14 = *(uint64_t **)(v13 + 32);
  uint64_t v15 = *(uint64_t **)(v13 + 40);
  if (v14 != v15)
  {
    while (1)
    {
      std::string::size_type v16 = *v14;
      int v17 = *(const void **)(*v14 + 64);
      if (v17)
      {
        if (v18) {
          break;
        }
      }
      v14 += 2;
      if (v14 == v15) {
        goto LABEL_34;
      }
    }
    int v19 = v18;
    std::string v20 = *(std::__shared_weak_count **)(v16 + 72);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = v19[77];
    *((float *)this + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v21;
    if (*((void *)this + 9))
    {
      int v22 = *((float *)this + 17);
    }
    else
    {
      *((float *)this + 17) = v21;
      int v22 = v21;
    }
    *((float *)this + 17) = (float)(v22 * 0.9) + (float)(v21 * 0.1);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
  }
LABEL_34:
  ++*((void *)this + 9);
  Espresso::context_switcher::finish((Espresso::context_switcher *)&v28);
  ++*(void *)this;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v26);
  int v23 = __p[0];
  __p[0] = 0;
  if (v23) {
    operator delete(v23);
  }
  if (*((void *)&v27 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v27 + 1));
  }
  Espresso::context_switcher::~context_switcher((std::__shared_weak_count **)&v28);
}

void sub_192832300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  Espresso::context_switcher::~context_switcher((std::__shared_weak_count **)va);
  _Unwind_Resume(a1);
}

void Espresso::context_switcher::finish(Espresso::context_switcher *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::context_switcher::~context_switcher(std::__shared_weak_count **this)
{
  Espresso::context_switcher::finish((Espresso::context_switcher *)this);
  uint64_t v2 = this[3];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = this[1];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 408);
  *a2 = *(void *)(this + 400);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 408);
  *(void *)(a1 + 400) = v3;
  *(void *)(a1 + 408) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 368))
  {
    uint64_t v4 = a2[1];
    v15[0] = *a2;
    v15[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "[Dispatch::MPSGraph::batchnorm_kernel] unsupported: generate_mean_ivar");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v9, a3, 0);
    Espresso::emit_kernel_validation_warning(v15, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else if (fabsf(*(float *)(a1 + 372)) <= 0.00000001)
  {
    if (*(_DWORD *)(a1 + 308) && *(_DWORD *)(a1 + 312) != 1)
    {
      uint64_t v4 = a2[1];
      v7[0] = *a2;
      v7[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v9, "[Dispatch::MPSGraph::batchnorm_kernel] unsupported: instancenorm training_instancenorm mode");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v9, a3, 0);
      Espresso::emit_kernel_validation_warning(v7, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    else
    {
      if (*(_DWORD *)(a1 + 376) == 2) {
        return 1;
      }
      uint64_t v4 = a2[1];
      v6[0] = *a2;
      v6[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v9, "[Dispatch::MPSGraph::batchnorm_kernel] unsupported: Only BatchNorm2D is supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v9, a3, 0);
      Espresso::emit_kernel_validation_warning(v6, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
  }
  else
  {
    uint64_t v4 = a2[1];
    v8[0] = *a2;
    v8[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "[Dispatch::MPSGraph::batchnorm_kernel] unsupported: regularization_eps");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v9, a3, 0);
    Espresso::emit_kernel_validation_warning(v8, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  std::string::size_type v16 = (void **)&v13;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v16);
  std::string::size_type v16 = (void **)&v12;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v4) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
  }
  return 0;
}

void sub_1928326B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a21);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::clear_weights(Espresso::MPSGraphEngine::Kernels::batchnorm_kernel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::share_weights(uint64_t a1, const void **a2)
{
  if (*a2)
  {
    if (v3)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)v3 + 408))(&v6);
      long long v4 = v6;
      long long v6 = 0uLL;
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 408);
      *(_OWORD *)(a1 + 400) = v4;
      if (v5)
      {
        nitro::nitro_function::nitro_function(v5);
        if (*((void *)&v6 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v6 + 1));
        }
      }
    }
  }
}

void Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::~batchnorm_kernel(Espresso::MPSGraphEngine::Kernels::batchnorm_kernel *this)
{
  *(void *)this = &unk_1EE32F8D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE32F8D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

void sub_192833010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void sub_1928331BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1928332A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }

  _Unwind_Resume(a1);
}

void sub_192833384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }

  _Unwind_Resume(a1);
}

void sub_192833AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v39 = *(void **)v36;
  if (*(void *)v36)
  {
    *(void *)(v36 + 8) = v39;
    operator delete(v39);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)(v37 - 192));
  _Unwind_Resume(a1);
}

void *copy_to_blobrgb(void *result, uint64_t a2, float a3, float a4)
{
  uint64_t v4 = result[1];
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = result[2];
    uint64_t v8 = result[3];
    uint64_t v9 = v6 + 8 * v4 * v7;
    uint64_t v10 = v6 + 4 * v4 * v7;
    uint64_t v11 = *result + 2;
    do
    {
      if (v7)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v7;
        do
        {
          double result = (void *)(v11 + v12);
          LOBYTE(a4) = *(unsigned char *)(v11 + v12);
          *(float *)&unsigned int v14 = (float)LODWORD(a4) + a3;
          *(float *)(v6 + v12) = *(float *)&v14;
          LOBYTE(v14) = *(unsigned char *)(v11 + v12 - 1);
          *(float *)&unsigned int v15 = (float)v14 + a3;
          *(float *)(v10 + v12) = *(float *)&v15;
          LOBYTE(v15) = *(unsigned char *)(v11 + v12 - 2);
          a4 = (float)v15 + a3;
          *(float *)(v9 + v12) = a4;
          v12 += 4;
          --v13;
        }
        while (v13);
        v6 += v12;
        v9 += v12;
        v10 += v12;
      }
      ++v5;
      v11 += v8;
    }
    while (v5 != v4);
  }
  return result;
}

void sub_192833DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1928345B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 240));
  uint64_t v48 = 0;
  uint64_t v49 = v46 - 208;
  while (1)
  {
    uint64_t v50 = *(void **)(v49 + v48 + 48);
    if (v50)
    {
      *(void *)(v49 + v48 + 56) = v50;
      operator delete(v50);
    }
    v48 -= 24;
    if (v48 == -72)
    {
      *(void *)(v46 - 208) = &a39;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 208));
      *(void *)(v46 - 208) = &a42;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 208));
      char v51 = *(void **)v45;
      if (*(void *)v45)
      {
        *(void *)(v45 + 8) = v51;
        operator delete(v51);
      }
      Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&a45);
      _Unwind_Resume(a1);
    }
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1928348AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float FaceLandmarkDetectorPointMake(const float *a1, const float *a2)
{
  return *a1;
}

uint64_t non-virtual thunk to'Espresso::ANECompilerEngine::elementwise_kernel::get_anec_lowering_hint(Espresso::ANECompilerEngine::elementwise_kernel *this)
{
  return (uint64_t)this + 216;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::elementwise_kernel::~elementwise_kernel(Espresso::ANECompilerEngine::elementwise_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this - 336);
  *((void *)this - 42) = &unk_1EE342CA8;
  *(void *)this = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this - 336);
  *((void *)this - 42) = &unk_1EE342CA8;
  *(void *)this = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::elementwise_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::elementwise_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *i2)
{
  uint64_t v438 = *MEMORY[0x1E4F143B8];
  uint64_t v400 = 0;
  v401 = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4
    || (uint64_t v6 = std::__shared_weak_count::lock(v4), (v401 = v6) == 0)
    || (uint64_t v7 = *((void *)a2 + 1), (v400 = v7) == 0))
  {
    float v336 = "Inconsistent state: null network";
    goto LABEL_700;
  }
  if (!*(void *)(v7 + 576))
  {
    float v336 = "Inconsistent state: blob_storage";
LABEL_700:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v336);
  }
  uint64_t v8 = v6;
  *(void *)&long long v405 = *((void *)i2 + 6);
  char v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v405, (long long **)&v405)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v405 = i2;
  v375 = v9;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)i2, (long long **)&v405);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  v373 = (float *)*((void *)v10 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v379 = v11;
  int v12 = *((unsigned __int8 *)a2 + 552);
  uint64_t v397 = 0;
  v398 = 0;
  unint64_t v399 = 0;
  id obj = (id)objc_opt_new();
  v376 = this;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v388, (id *)i2);
  int v370 = v12;
  v385 = 0;
  v386 = 0;
  unint64_t v387 = 0;
  uint64_t v13 = (unsigned __int8 *)*((void *)i2 + 6);
  unsigned int v14 = (unsigned __int8 *)*((void *)i2 + 7);
  v378 = i2;
  if (v13 == v14)
  {
    uint64_t v29 = *((void *)i2 + 6);
  }
  else
  {
    do
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      unsigned int v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, v13, (long long **)&__str);
      Espresso::abstract_blob_container::shape((char *)&v405, *((void *)v15 + 5));
      std::string::size_type v16 = v386;
      if ((unint64_t)v386 >= v387)
      {
        uint64_t v19 = (v386 - v385) >> 6;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v387 - (void)v385;
        if ((uint64_t)(v387 - (void)v385) >> 5 > v20) {
          unint64_t v20 = v21 >> 5;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        *((void *)&v428 + 1) = &v387;
        int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v22);
        std::string::size_type v24 = (std::string::size_type)&v23[64 * v19];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        __str.__r_.__value_.__l.__size_ = v24;
        *(void *)&long long v428 = &v23[64 * v25];
        long long v26 = *(_OWORD *)&v406.__r_.__value_.__l.__data_;
        std::string::size_type v27 = v406.__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string::size_type v24 = v405;
        *(_OWORD *)(v24 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v26;
        *(void *)(v24 + 32) = v27;
        *(void *)(v24 + 40) = 0;
        *(void *)(v24 + 48) = 0;
        *(void *)(v24 + 56) = 0;
        *(_OWORD *)(v24 + 40) = __p;
        *(void *)(v24 + 56) = v408;
        long long __p = 0uLL;
        v408 = 0;
        __str.__r_.__value_.__r.__words[2] = v24 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v385, &__str);
        long long v28 = v386;
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&__str);
        v386 = v28;
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)&v406.__r_.__value_.__l.__data_;
        std::string::size_type v18 = v406.__r_.__value_.__r.__words[2];
        *(_OWORD *)v386 = v405;
        *((_OWORD *)v16 + 1) = v17;
        *((void *)v16 + 4) = v18;
        *((void *)v16 + 5) = 0;
        *((void *)v16 + 6) = 0;
        *((void *)v16 + 7) = 0;
        *(_OWORD *)(v16 + 40) = __p;
        *((void *)v16 + 7) = v408;
        long long __p = 0uLL;
        v408 = 0;
        v386 = v16 + 64;
      }
      v13 += 24;
    }
    while (v13 != v14);
    uint64_t v13 = (unsigned __int8 *)*((void *)i2 + 6);
    uint64_t v29 = *((void *)i2 + 7);
  }
  uint64_t v30 = v29 - (void)v13;
  i4 = this;
  if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) > 2) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Elementwise ops for n_blobs > 2 not implemented");
  }
  if (v30 == 48)
  {
    v436.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE37C2D0;
    *(void *)&long long v437 = &v436;
    uint64_t v32 = (_DWORD *)((char *)this + 280);
    Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel_valid_and_fix_p((uint64_t)this, &v385, (uint64_t)this + 280, (uint64_t)&v436, 0, (uint64_t)&v400);
    uint64_t v33 = *((unsigned int *)this + 70);
    if ((int)v33 > 28)
    {
      switch((int)v33)
      {
        case 'd':
          [obj setObject:@"Equal" forKeyedSubscript:@"Type"];
          goto LABEL_451;
        case 'e':
        case 'f':
        case 'l':
        case 'm':
        case 'p':
          goto LABEL_730;
        case 'g':
          [obj setObject:@"LessThan" forKeyedSubscript:@"Type"];
          goto LABEL_451;
        case 'h':
          [obj setObject:@"LessThanEqual" forKeyedSubscript:@"Type"];
          goto LABEL_451;
        case 'i':
          [obj setObject:@"GreaterThan" forKeyedSubscript:@"Type"];
          goto LABEL_451;
        case 'j':
          [obj setObject:@"GreaterThanEqual" forKeyedSubscript:@"Type"];
          goto LABEL_451;
        case 'k':
          [obj setObject:@"NotEqual" forKeyedSubscript:@"Type"];
          goto LABEL_451;
        case 'n':
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v405, (id *)i2);
          char v127 = v413;
          v413 = @"ElementWise";

          uint64_t v128 = (std::string *)*((void *)&__p + 1);
          for (uint64_t i = v408; i != v128; --i)
          {
            if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(i[-1].__r_.__value_.__l.__data_);
            }
          }
          v408 = v128;
          float32x4_t v140 = (long long *)*((void *)i2 + 6);
          if ((unint64_t)v128 >= v409)
          {
            float32x4_t v141 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p + 1, (uint64_t)v140);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&__p + 8, v140);
            float32x4_t v141 = v128 + 1;
          }
          v408 = v141;
          if (*((char *)i2 + 23) >= 0) {
            size_t v193 = *((unsigned __int8 *)i2 + 23);
          }
          else {
            size_t v193 = *((void *)i2 + 1);
          }
          p_str = &__str;
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, v193 + 18);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v193)
          {
            if (*((char *)i2 + 23) >= 0) {
              uint64_t v195 = i2;
            }
            else {
              uint64_t v195 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)i2;
            }
            memmove(p_str, v195, v193);
          }
          strcpy((char *)p_str + v193, "__not_equal_zero_0");
          if (v406.__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v405);
          }
          long long v405 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v406.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
          v196 = objc_opt_new();
          [v196 setObject:@"NotEqualZero" forKeyedSubscript:@"Type"];
          objc_storeStrong(v414, v196);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v405);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)i2);
          v197 = v434;
          v434 = @"ElementWise";

          begistd::vector<std::string>::pointer n = v430.__begin_;
          for (std::vector<std::string>::pointer j = v430.__end_; j != begin; --j)
          {
            if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(j[-1].__r_.__value_.__l.__data_);
            }
          }
          v430.__end_ = begin;
          uint64_t v200 = (long long *)(*((void *)v378 + 6) + 24);
          if (begin >= v430.__end_cap_.__value_)
          {
            uint64_t v201 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v430, (uint64_t)v200);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v430, v200);
            uint64_t v201 = begin + 1;
          }
          v430.__end_ = v201;
          if (*((char *)v378 + 23) >= 0) {
            size_t v218 = *((unsigned __int8 *)v378 + 23);
          }
          else {
            size_t v218 = *((void *)v378 + 1);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v417, v218 + 18);
          if ((v417.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float32x4_t v219 = &v417;
          }
          else {
            float32x4_t v219 = (std::string *)v417.__r_.__value_.__r.__words[0];
          }
          if (v218)
          {
            if (*((char *)v378 + 23) >= 0) {
              uint64_t v220 = v378;
            }
            else {
              uint64_t v220 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v378;
            }
            memmove(v219, v220, v218);
          }
          strcpy((char *)v219 + v218, "__not_equal_zero_1");
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v417;
          unint64_t v221 = objc_opt_new();
          [v221 setObject:@"NotEqualZero" forKeyedSubscript:@"Type"];
          objc_storeStrong(v435, v221);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
          unint64_t v222 = v395;
          v395 = @"ElementWise";

          std::vector<std::string>::pointer v223 = v391.__begin_;
          for (std::vector<std::string>::pointer k = v391.__end_; k != v223; --k)
          {
            if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(k[-1].__r_.__value_.__l.__data_);
            }
          }
          v391.__end_ = v223;
          if (v223 >= v391.__end_cap_.__value_)
          {
            v246 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v391, (uint64_t)&v405);
          }
          else
          {
            if (v406.__r_.__value_.__s.__data_[7] < 0)
            {
              std::string::__init_copy_ctor_external(v223, (const std::string::value_type *)v405, *((std::string::size_type *)&v405 + 1));
            }
            else
            {
              long long v225 = v405;
              v223->__r_.__value_.__r.__words[2] = v406.__r_.__value_.__r.__words[0];
              *(_OWORD *)&v223->__r_.__value_.__l.__data_ = v225;
            }
            v246 = v223 + 1;
          }
          v391.__end_ = v246;
          if (v246 >= v391.__end_cap_.__value_)
          {
            __int16 v316 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v391, (uint64_t)&__str);
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v246, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v315 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              v246->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v246->__r_.__value_.__l.__data_ = v315;
            }
            __int16 v316 = v246 + 1;
          }
          v391.__end_ = v316;
          [obj setObject:@"Mult" forKeyedSubscript:@"Type"];
          objc_storeStrong(v396, obj);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v388);

          if (v432 < 0) {
            operator delete(v431);
          }
          v417.__r_.__value_.__r.__words[0] = (std::string::size_type)&v430;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v417);
          v417.__r_.__value_.__r.__words[0] = (std::string::size_type)&v428;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v417);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          goto LABEL_656;
        case 'o':
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v405, (id *)i2);
          uint64_t v130 = v413;
          v413 = @"ElementWise";

          uint64_t v131 = (std::string *)*((void *)&__p + 1);
          for (uint64_t m = v408; m != v131; --m)
          {
            if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(m[-1].__r_.__value_.__l.__data_);
            }
          }
          v408 = v131;
          float32x4_t v142 = (long long *)*((void *)i2 + 6);
          if ((unint64_t)v131 >= v409)
          {
            unint64_t v143 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p + 1, (uint64_t)v142);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&__p + 8, v142);
            unint64_t v143 = v131 + 1;
          }
          v408 = v143;
          if (*((char *)i2 + 23) >= 0) {
            size_t v202 = *((unsigned __int8 *)i2 + 23);
          }
          else {
            size_t v202 = *((void *)i2 + 1);
          }
          v203 = &__str;
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, v202 + 14);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v203 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v202)
          {
            if (*((char *)i2 + 23) >= 0) {
              v204 = i2;
            }
            else {
              v204 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)i2;
            }
            memmove(v203, v204, v202);
          }
          strcpy((char *)v203 + v202, "__equal_zero_0");
          if (v406.__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v405);
          }
          long long v405 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v406.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
          v196 = objc_opt_new();
          [v196 setObject:@"EqualZero" forKeyedSubscript:@"Type"];
          objc_storeStrong(v414, v196);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v405);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)i2);
          v205 = v434;
          v434 = @"ElementWise";

          v206 = v430.__begin_;
          for (std::vector<std::string>::pointer n = v430.__end_; n != v206; --n)
          {
            if (SHIBYTE(n[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(n[-1].__r_.__value_.__l.__data_);
            }
          }
          v430.__end_ = v206;
          uint64_t v208 = (long long *)(*((void *)i2 + 6) + 24);
          if (v206 >= v430.__end_cap_.__value_)
          {
            float32x4_t v209 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v430, (uint64_t)v208);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v430, v208);
            float32x4_t v209 = v206 + 1;
          }
          v430.__end_ = v209;
          if (*((char *)i2 + 23) >= 0) {
            size_t v226 = *((unsigned __int8 *)i2 + 23);
          }
          else {
            size_t v226 = *((void *)i2 + 1);
          }
          uint64_t v227 = &v417;
          std::string::basic_string[abi:ne180100]((uint64_t)&v417, v226 + 14);
          if ((v417.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v227 = (std::string *)v417.__r_.__value_.__r.__words[0];
          }
          if (v226)
          {
            if (*((char *)i2 + 23) >= 0) {
              std::string v228 = i2;
            }
            else {
              std::string v228 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)i2;
            }
            memmove(v227, v228, v226);
          }
          strcpy((char *)v227 + v226, "__equal_zero_1");
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v417;
          uint64_t v229 = objc_opt_new();
          [v229 setObject:@"EqualZero" forKeyedSubscript:@"Type"];
          objc_storeStrong(v435, v229);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v417.__r_.__value_.__l.__data_, (id *)i2);
          uint64_t v230 = v425;
          v425 = @"ElementWise";

          uint64_t v231 = v419;
          for (iuint64_t i = v420; ii != v231; --ii)
          {
            if (SHIBYTE(ii[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(ii[-1].__r_.__value_.__l.__data_);
            }
          }
          v420 = v231;
          if ((unint64_t)v231 >= v421)
          {
            float32x4_t v233 = v378;
            v248 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v419, (uint64_t)&v405);
          }
          else
          {
            float32x4_t v233 = v378;
            if (v406.__r_.__value_.__s.__data_[7] < 0)
            {
              std::string::__init_copy_ctor_external(v231, (const std::string::value_type *)v405, *((std::string::size_type *)&v405 + 1));
            }
            else
            {
              long long v234 = v405;
              v231->__r_.__value_.__r.__words[2] = v406.__r_.__value_.__r.__words[0];
              *(_OWORD *)&v231->__r_.__value_.__l.__data_ = v234;
            }
            v248 = v231 + 1;
          }
          v420 = v248;
          if ((unint64_t)v248 >= v421)
          {
            float v320 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v419, (uint64_t)&__str);
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v248, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v319 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              v248->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v248->__r_.__value_.__l.__data_ = v319;
            }
            float v320 = v248 + 1;
          }
          v420 = v320;
          if (*((char *)v233 + 23) >= 0) {
            size_t v321 = *((unsigned __int8 *)v233 + 23);
          }
          else {
            size_t v321 = *((void *)v233 + 1);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v415, v321 + 26);
          if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v322 = &v415;
          }
          else {
            unint64_t v322 = (std::string *)v415.__r_.__value_.__r.__words[0];
          }
          if (v321)
          {
            if (*((char *)v233 + 23) >= 0) {
              float v323 = v233;
            }
            else {
              float v323 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v233;
            }
            memmove(v322, v323, v321);
          }
          strcpy((char *)v322 + v321, "__pre_equals_zero_multiply");
          if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v417.__r_.__value_.__l.__data_);
          }
          std::string v417 = v415;
          float v324 = objc_opt_new();
          [v324 setObject:@"Mult" forKeyedSubscript:@"Type"];
          objc_storeStrong(&v426, v324);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v417);
          uint64_t v325 = v395;
          v395 = @"ElementWise";

          std::vector<std::string>::pointer v326 = v391.__begin_;
          for (jstd::vector<std::string>::pointer j = v391.__end_; jj != v326; --jj)
          {
            if (SHIBYTE(jj[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(jj[-1].__r_.__value_.__l.__data_);
            }
          }
          v391.__end_ = v326;
          if (v326 >= v391.__end_cap_.__value_)
          {
            uint64_t v329 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v391, (uint64_t)&v417);
          }
          else
          {
            if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v326, v417.__r_.__value_.__l.__data_, v417.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v328 = *(_OWORD *)&v417.__r_.__value_.__l.__data_;
              v326->__r_.__value_.__r.__words[2] = v417.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v326->__r_.__value_.__l.__data_ = v328;
            }
            uint64_t v329 = v326 + 1;
          }
          v391.__end_ = v329;
          [obj setObject:@"EqualZero" forKeyedSubscript:@"Type"];
          objc_storeStrong(v396, obj);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v388);

          if (v423 < 0) {
            operator delete(v422);
          }
          v415.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
          v415.__r_.__value_.__r.__words[0] = (std::string::size_type)&v418;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
          if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v417.__r_.__value_.__l.__data_);
          }

          if (v432 < 0) {
            operator delete(v431);
          }
          v417.__r_.__value_.__r.__words[0] = (std::string::size_type)&v430;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v417);
          v417.__r_.__value_.__r.__words[0] = (std::string::size_type)&v428;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v417);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          goto LABEL_656;
        case 'q':
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v405, (id *)i2);
          uint64_t v133 = v413;
          v413 = @"ElementWise";

          uint64_t v134 = (std::string *)*((void *)&__p + 1);
          for (kstd::vector<std::string>::pointer k = v408; kk != v134; --kk)
          {
            if (SHIBYTE(kk[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(kk[-1].__r_.__value_.__l.__data_);
            }
          }
          v408 = v134;
          uint64_t v144 = (long long *)*((void *)i2 + 6);
          if ((unint64_t)v134 >= v409)
          {
            unint64_t v145 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p + 1, (uint64_t)v144);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&__p + 8, v144);
            unint64_t v145 = v134 + 1;
          }
          v408 = v145;
          if (*((char *)i2 + 23) >= 0) {
            size_t v210 = *((unsigned __int8 *)i2 + 23);
          }
          else {
            size_t v210 = *((void *)i2 + 1);
          }
          uint64_t v211 = &__str;
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, v210 + 18);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v211 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v210)
          {
            if (*((char *)i2 + 23) >= 0) {
              float32x4_t v212 = i2;
            }
            else {
              float32x4_t v212 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)i2;
            }
            memmove(v211, v212, v210);
          }
          strcpy((char *)v211 + v210, "__not_equal_zero_0");
          if (v406.__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v405);
          }
          long long v405 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v406.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
          v196 = objc_opt_new();
          [v196 setObject:@"NotEqualZero" forKeyedSubscript:@"Type"];
          objc_storeStrong(v414, v196);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v405);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)i2);
          float32x4_t v213 = v434;
          v434 = @"ElementWise";

          unint64_t v214 = v430.__begin_;
          for (muint64_t m = v430.__end_; mm != v214; --mm)
          {
            if (SHIBYTE(mm[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(mm[-1].__r_.__value_.__l.__data_);
            }
          }
          v430.__end_ = v214;
          uint64_t v216 = (long long *)(*((void *)v378 + 6) + 24);
          if (v214 >= v430.__end_cap_.__value_)
          {
            float32x4_t v217 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v430, (uint64_t)v216);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v430, v216);
            float32x4_t v217 = v214 + 1;
          }
          v430.__end_ = v217;
          if (*((char *)v378 + 23) >= 0) {
            size_t v235 = *((unsigned __int8 *)v378 + 23);
          }
          else {
            size_t v235 = *((void *)v378 + 1);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v417, v235 + 18);
          if ((v417.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float32x4_t v236 = &v417;
          }
          else {
            float32x4_t v236 = (std::string *)v417.__r_.__value_.__r.__words[0];
          }
          if (v235)
          {
            if (*((char *)v378 + 23) >= 0) {
              float32x4_t v237 = v378;
            }
            else {
              float32x4_t v237 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v378;
            }
            memmove(v236, v237, v235);
          }
          strcpy((char *)v236 + v235, "__not_equal_zero_1");
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v417;
          float32x4_t v238 = objc_opt_new();
          [v238 setObject:@"NotEqualZero" forKeyedSubscript:@"Type"];
          objc_storeStrong(v435, v238);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
          std::string v239 = v395;
          v395 = @"ElementWise";

          std::vector<std::string>::pointer v240 = v391.__begin_;
          for (nstd::vector<std::string>::pointer n = v391.__end_; nn != v240; --nn)
          {
            if (SHIBYTE(nn[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(nn[-1].__r_.__value_.__l.__data_);
            }
          }
          v391.__end_ = v240;
          if (v240 >= v391.__end_cap_.__value_)
          {
            v247 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v391, (uint64_t)&v405);
          }
          else
          {
            if (v406.__r_.__value_.__s.__data_[7] < 0)
            {
              std::string::__init_copy_ctor_external(v240, (const std::string::value_type *)v405, *((std::string::size_type *)&v405 + 1));
            }
            else
            {
              long long v242 = v405;
              v240->__r_.__value_.__r.__words[2] = v406.__r_.__value_.__r.__words[0];
              *(_OWORD *)&v240->__r_.__value_.__l.__data_ = v242;
            }
            v247 = v240 + 1;
          }
          v391.__end_ = v247;
          if (v247 >= v391.__end_cap_.__value_)
          {
            uint64_t v318 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v391, (uint64_t)&__str);
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v247, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v317 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              v247->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v247->__r_.__value_.__l.__data_ = v317;
            }
            uint64_t v318 = v247 + 1;
          }
          v391.__end_ = v318;
          [obj setObject:@"NotEqual" forKeyedSubscript:@"Type"];
          objc_storeStrong(v396, obj);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v388);

          if (v432 < 0) {
            operator delete(v431);
          }
          v417.__r_.__value_.__r.__words[0] = (std::string::size_type)&v430;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v417);
          v417.__r_.__value_.__r.__words[0] = (std::string::size_type)&v428;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v417);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
LABEL_656:

          if (v411 < 0) {
            operator delete(v410);
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v406.__r_.__value_.__l.__size_;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (v406.__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v405);
          }
          std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](&v436);
          goto LABEL_575;
        default:
          if ((v33 - 29) < 2) {
            goto LABEL_71;
          }
          if (v33 != 33) {
            goto LABEL_730;
          }
          [obj setObject:@"Sub" forKeyedSubscript:@"Type"];
          break;
      }
      goto LABEL_451;
    }
    if ((int)v33 > 7)
    {
      if ((v33 - 22) < 2)
      {
        uint64_t v85 = 0;
        char v366 = 0;
        v371 = (uint64_t **)((char *)a2 + 272);
        char v86 = 1;
        do
        {
          char v87 = v86;
          v382[0] = v7;
          v382[1] = (uint64_t)v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          Espresso::ANECompilerEngine::get_constant_input(&v417, v382, *((void *)i2 + 6), v85);
          nitro::nitro_function::nitro_function(v8);
          if (v417.__r_.__value_.__r.__words[0])
          {
            uint64_t v88 = 0;
            uint64_t v89 = *(int *)(v417.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v89 *= *(int *)(v417.__r_.__value_.__r.__words[0] + 12 + v88);
              v88 += 4;
            }
            while (v88 != 12);
            if (v89 == 1)
            {
              unint64_t v90 = 0;
              int v91 = *(int **)(v417.__r_.__value_.__r.__words[0] + 24);
              int v92 = *v91;
              for (char i1 = *v32 == 23; ; i1 &= *(float *)&v91[v90++] == 0.0)
              {
                uint64_t v94 = 0;
                unint64_t v95 = *(int *)(v417.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v95 *= *(int *)(v417.__r_.__value_.__r.__words[0] + 12 + v94);
                  v94 += 4;
                }
                while (v94 != 12);
                if (v90 >= v95) {
                  break;
                }
              }
              if (i1)
              {
                uint64_t v97 = v395;
                v395 = @"Neuron";

                [obj setObject:@"ReLU" forKeyedSubscript:@"Type"];
                std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__erase_unique<std::string>(v371, (void *)(*((void *)i2 + 6) + 24 * v85));
                std::vector<std::string>::pointer end = v391.__end_;
                unint64_t v99 = &v391.__begin_[v85];
                std::vector<std::string>::pointer v100 = v99 + 1;
                if (&v99[1] != v391.__end_)
                {
                  do
                  {
                    if (SHIBYTE(v99->__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v99->__r_.__value_.__l.__data_);
                    }
                    *(_OWORD *)&v99->__r_.__value_.__l.__data_ = *(_OWORD *)&v99[1].__r_.__value_.__l.__data_;
                    v99->__r_.__value_.__r.__words[2] = v99[1].__r_.__value_.__r.__words[2];
                    *((unsigned char *)&v99[1].__r_.__value_.__s + 23) = 0;
                    int64x2_t v101 = v99 + 2;
                    v99[1].__r_.__value_.__s.__data_[0] = 0;
                    ++v99;
                  }
                  while (v101 != end);
                  std::vector<std::string>::pointer v100 = v391.__end_;
                }
                for (i2 = v378; v100 != v99; --v100)
                {
                  if (SHIBYTE(v100[-1].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v100[-1].__r_.__value_.__l.__data_);
                  }
                }
                v391.__end_ = v99;
                char v366 = 1;
              }
              else
              {
                *(void *)&long long v405 = *((void *)i2 + 6) + 24 * (v85 ^ 1);
                id v102 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v405, (long long **)&v405);
                int v104 = (std::__shared_weak_count *)*((void *)v102 + 6);
                if (v104) {
                  atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v368 = v104;
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v415, v103[44], v103[43], v103[41], v103[40]);
                unint64_t v105 = 0;
                std::string::size_type v106 = v415.__r_.__value_.__r.__words[0];
                unint64_t v107 = *(int *)(v415.__r_.__value_.__r.__words[0] + 8);
                while (1)
                {
                  uint64_t v108 = 12;
                  unint64_t v109 = v107;
                  do
                  {
                    v109 *= *(int *)(v106 + v108);
                    v108 += 4;
                  }
                  while (v108 != 24);
                  if (v105 >= v109) {
                    break;
                  }
                  *(_DWORD *)(*(void *)(v106 + 24) + 4 * v105++) = v92;
                }
                *(void *)&long long v405 = *((void *)v378 + 6) + 24 * v85;
                int v110 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v371, (void *)v405, (long long **)&v405);
                if (v110[79] < 0) {
                  std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v110 + 7), *((void *)v110 + 8));
                }
                else {
                  std::string __str = *(std::string *)(v110 + 56);
                }
                id v111 = i4;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v405, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v405 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                  v406.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
                }
                std::string::size_type size = (std::__shared_weak_count *)v415.__r_.__value_.__l.__size_;
                v406.__r_.__value_.__l.__size_ = v106;
                v406.__r_.__value_.__r.__words[2] = v415.__r_.__value_.__l.__size_;
                if (v415.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v415.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                id v113 = v32;
                i2 = v378;
                v404[0] = (long long *)(*((void *)v378 + 6) + 24 * v85);
                int v114 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v371, (void *)v404[0], v404);
                uint64_t v115 = (void **)(v114 + 56);
                if (v114[79] < 0) {
                  operator delete(*v115);
                }
                *(_OWORD *)uint64_t v115 = v405;
                *((void *)v114 + 9) = v406.__r_.__value_.__r.__words[0];
                memset((char *)v406.__r_.__value_.__r.__words + 7, 0, 17);
                LOBYTE(v405) = 0;
                uint64_t v116 = (std::__shared_weak_count *)*((void *)v114 + 11);
                *((_OWORD *)v114 + 5) = *(_OWORD *)&v406.__r_.__value_.__r.__words[1];
                if (v116)
                {
                  nitro::nitro_function::nitro_function(v116);
                  if (v406.__r_.__value_.__r.__words[2]) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v406.__r_.__value_.__r.__words[2]);
                  }
                }
                uint64_t v32 = v113;
                if (v406.__r_.__value_.__s.__data_[7] < 0) {
                  operator delete((void *)v405);
                }
                i4 = v111;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (size) {
                  nitro::nitro_function::nitro_function(size);
                }
                if (v368) {
                  nitro::nitro_function::nitro_function(v368);
                }
              }
              int v96 = 4;
            }
            else
            {
              int v96 = 0;
            }
          }
          else
          {
            int v96 = 6;
          }
          if (v417.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v417.__r_.__value_.__l.__size_);
          }
          if (v96 != 6 && v96) {
            break;
          }
          char v86 = 0;
          uint64_t v85 = 1;
        }
        while ((v87 & 1) != 0);
        if (v366) {
          goto LABEL_453;
        }
        if (*v32 == 22)
        {
          [obj setObject:@"Min" forKeyedSubscript:@"Type"];
        }
        else
        {
          if (*v32 != 23)
          {
LABEL_453:
            std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](&v436);
            goto LABEL_454;
          }
          [obj setObject:@"Max" forKeyedSubscript:@"Type"];
        }
        goto LABEL_451;
      }
      if (v33 != 8)
      {
        if (v33 != 9) {
LABEL_730:
        }
          Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("elementwise operation not supported %d", v33);
        goto LABEL_57;
      }
    }
    else
    {
      if ((int)v33 <= 4)
      {
        if (!v33)
        {
          [obj setObject:@"Add" forKeyedSubscript:@"Type"];
LABEL_451:
          id v63 = v395;
          v395 = @"ElementWise";
LABEL_452:

          goto LABEL_453;
        }
        if (v33 != 1) {
          goto LABEL_730;
        }
LABEL_57:
        std::vector<std::string>::pointer v56 = v391.__begin_;
        uint64_t v57 = HIBYTE(v391.__begin_->__r_.__value_.__r.__words[2]);
        if ((v57 & 0x80u) == 0) {
          std::string::size_type v58 = HIBYTE(v391.__begin_->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v391.__begin_->__r_.__value_.__l.__size_;
        }
        std::string::size_type v59 = HIBYTE(v391.__begin_[1].__r_.__value_.__r.__words[2]);
        int v60 = (char)v59;
        if ((v59 & 0x80u) != 0) {
          std::string::size_type v59 = v391.__begin_[1].__r_.__value_.__l.__size_;
        }
        if (v58 == v59)
        {
          if (v60 >= 0) {
            std::vector<std::string>::pointer data = v391.__begin_ + 1;
          }
          else {
            std::vector<std::string>::pointer data = (std::vector<std::string>::pointer)v391.__begin_[1].__r_.__value_.__l.__data_;
          }
          if ((v57 & 0x80) == 0)
          {
            if (*((unsigned char *)&v391.__begin_->__r_.__value_.__s + 23))
            {
              while (v56->__r_.__value_.__s.__data_[0] == data->__r_.__value_.__s.__data_[0])
              {
                std::vector<std::string>::pointer v56 = (std::vector<std::string>::pointer)((char *)v56 + 1);
                std::vector<std::string>::pointer data = (std::vector<std::string>::pointer)((char *)data + 1);
                if (!--v57) {
                  goto LABEL_208;
                }
              }
              goto LABEL_207;
            }
LABEL_208:
            std::vector<std::string>::pointer v146 = v391.__end_ - 1;
            if (SHIBYTE(v391.__end_[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v146->__r_.__value_.__l.__data_);
            }
            v391.__end_ = v146;
            [obj setObject:@"Square" forKeyedSubscript:@"Type"];
            goto LABEL_451;
          }
          if (!memcmp(v391.__begin_->__r_.__value_.__l.__data_, data, v391.__begin_->__r_.__value_.__l.__size_)) {
            goto LABEL_208;
          }
        }
LABEL_207:
        [obj setObject:@"Mult" forKeyedSubscript:@"Type"];
        goto LABEL_451;
      }
      if (v33 != 5)
      {
        if (v33 != 7) {
          goto LABEL_730;
        }
        goto LABEL_57;
      }
    }
LABEL_71:
    uint64_t v62 = v395;
    v395 = @"GOC";

    id v63 = (id)objc_opt_new();
    [obj setObject:v63 forKeyedSubscript:@"BiasScaleGroupData"];
    v384[0] = v7;
    v384[1] = (uint64_t)v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::ANECompilerEngine::get_constant_input(&v417, v384, *((void *)i2 + 6), 0);
    nitro::nitro_function::nitro_function(v8);
    std::string::size_type v64 = v417.__r_.__value_.__r.__words[0];
    if (v417.__r_.__value_.__r.__words[0])
    {
      *(_OWORD *)&v415.__r_.__value_.__l.__data_ = 0uLL;
      std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__erase_unique<std::string>((uint64_t **)a2 + 34, *((void **)i2 + 6));
      std::vector<std::string>::pointer v65 = v391.__begin_;
      std::vector<std::string>::pointer v66 = v391.__end_;
      std::vector<std::string>::pointer v67 = v391.__begin_ + 1;
      if (&v391.__begin_[1] != v391.__end_)
      {
        do
        {
          if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&v65->__r_.__value_.__l.__data_ = *(_OWORD *)&v65[1].__r_.__value_.__l.__data_;
          v65->__r_.__value_.__r.__words[2] = v65[1].__r_.__value_.__r.__words[2];
          *((unsigned char *)&v65[1].__r_.__value_.__s + 23) = 0;
          long long v68 = v65 + 2;
          v65[1].__r_.__value_.__s.__data_[0] = 0;
          ++v65;
        }
        while (v68 != v66);
        std::vector<std::string>::pointer v67 = v391.__end_;
      }
      for (i2 = v378; v67 != v65; --v67)
      {
        if (SHIBYTE(v67[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67[-1].__r_.__value_.__l.__data_);
        }
      }
      v391.__end_ = v65;
      unint64_t v69 = (std::__shared_weak_count *)v417.__r_.__value_.__l.__size_;
      if (v417.__r_.__value_.__l.__size_) {
LABEL_82:
      }
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      v383[0] = v7;
      v383[1] = (uint64_t)v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      Espresso::ANECompilerEngine::get_constant_input(&v415, v383, *((void *)i2 + 6), 1u);
      nitro::nitro_function::nitro_function(v8);
      std::string::size_type v64 = v415.__r_.__value_.__r.__words[0];
      if (!v415.__r_.__value_.__r.__words[0])
      {
        if (!*((unsigned char *)this + 392)) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("An input is missing to ADD_K / MUL_K");
        }
        unint64_t v69 = 0;
        goto LABEL_217;
      }
      std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__erase_unique<std::string>((uint64_t **)a2 + 34, (void *)(*((void *)i2 + 6) + 24));
      uint64_t v122 = (std::string *)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((long long *)&v391.__begin_[2], (long long *)v391.__end_, (uint64_t)&v391.__begin_[1]);
      for (std::vector<std::string>::pointer i3 = v391.__end_; i3 != v122; --i3)
      {
        if (SHIBYTE(i3[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(i3[-1].__r_.__value_.__l.__data_);
        }
      }
      v391.__end_ = v122;
      unint64_t v69 = (std::__shared_weak_count *)v415.__r_.__value_.__l.__size_;
      if (v415.__r_.__value_.__l.__size_) {
        goto LABEL_82;
      }
    }
    if (!*((unsigned char *)v376 + 392))
    {
      uint64_t v70 = 0;
      char v71 = *(int **)(v64 + 24);
      uint64_t v72 = *(int *)(v64 + 8);
      do
      {
        v72 *= *(int *)(v64 + 12 + v70);
        v70 += 4;
      }
      while (v70 != 12);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v405, 2 * v72, 1, 1, 1);
      uint64_t v73 = v405;
      id v74 = *(const unsigned __int8 **)(v405 + 16);
      if (v72)
      {
        uint64_t v75 = *(_WORD **)(v405 + 16);
        do
        {
          int v76 = *v71++;
          _S0 = v76;
          __asm { FCVT            H0, S0 }
          *v75++ = _S0;
          --v72;
        }
        while (v72);
      }
      uint64_t v78 = (std::__shared_weak_count *)*((void *)&v405 + 1);
      if (*((void *)&v405 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v405 + 1) + 8), 1uLL, memory_order_relaxed);
        id v74 = *(const unsigned __int8 **)(v73 + 16);
      }
      uint64_t v79 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), v74, *(int *)(v73 + 8));
      if (v78) {
        nitro::nitro_function::nitro_function(v78);
      }
      int v80 = *v32;
      if ((int)*v32 > 28)
      {
        if (v80 == 29)
        {
          _S0 = **(_DWORD **)(v64 + 24);
          __asm { FCVT            H0, S0 }
          unint64_t v148 = [NSNumber numberWithShort:(__int16)_S0];
          [obj setObject:v148 forKeyedSubscript:@"BiasScalar"];
        }
        else
        {
          if (v80 != 30) {
            goto LABEL_689;
          }
          _S0 = **(_DWORD **)(v64 + 24);
          __asm { FCVT            H0, S0 }
          unint64_t v148 = [NSNumber numberWithShort:(__int16)_S0];
          [obj setObject:v148 forKeyedSubscript:@"ScaleScalar"];
        }

        [obj removeObjectForKey:@"BiasScaleGroupData"];
      }
      else
      {
        if (v80 == 5)
        {
          std::string v310 = [NSNumber numberWithInt:*((unsigned int *)v373 + 4)];
          [v63 setObject:v310 forKeyedSubscript:@"BiasCount"];

          uint64_t v311 = [NSNumber numberWithInt:v79];
          [v63 setObject:v311 forKeyedSubscript:@"BiasOffset"];

          std::string v312 = NSNumber;
          if (v370) {
            uint64_t weights_file_index = 0;
          }
          else {
          unint64_t v334 = [v312 numberWithUnsignedLong:weights_file_index];
          }
          [v63 setObject:v334 forKeyedSubscript:@"BiasIndex"];
          float v335 = @"BiasType";
        }
        else
        {
          if (v80 != 8) {
            goto LABEL_689;
          }
          id v81 = [NSNumber numberWithInt:*((unsigned int *)v373 + 4)];
          [v63 setObject:v81 forKeyedSubscript:@"ScaleCount"];

          char v82 = [NSNumber numberWithInt:v79];
          [v63 setObject:v82 forKeyedSubscript:@"ScaleOffset"];

          char v83 = NSNumber;
          if (v370) {
            uint64_t v84 = 0;
          }
          else {
          unint64_t v334 = [v83 numberWithUnsignedLong:v84];
          }
          [v63 setObject:v334 forKeyedSubscript:@"ScaleIndex"];
          float v335 = @"ScaleType";
        }

        [v63 setObject:@"Float16" forKeyedSubscript:v335];
      }
LABEL_689:
      if (v78) {
        nitro::nitro_function::nitro_function(v78);
      }
LABEL_691:
      if (v69) {
        nitro::nitro_function::nitro_function(v69);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if (v417.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v417.__r_.__value_.__l.__size_);
      }
      goto LABEL_452;
    }
LABEL_217:
    uint64_t v149 = *((unsigned int *)v376 + 92);
    __str.__r_.__value_.__r.__words[0] = *((void *)i2 + 6);
    uint64_t v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
    Espresso::abstract_blob_container::shape((char *)&v405, *((void *)v150 + 5));
    v404[0] = (long long *)(*((void *)i2 + 6) + 24);
    uint64_t v151 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v404[0], v404);
    Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v151 + 5));
    uint64_t v152 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v405);
    uint64_t v153 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&__str);
    std::vector<std::string>::pointer v154 = v391.__begin_;
    int v155 = v391.__begin_ + 1;
    if (v152 <= v153)
    {
      std::vector<std::string>::pointer v162 = v391.__end_;
      if (v155 != v391.__end_)
      {
        do
        {
          if (SHIBYTE(v154->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v154->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&v154->__r_.__value_.__l.__data_ = *(_OWORD *)&v154[1].__r_.__value_.__l.__data_;
          v154->__r_.__value_.__r.__words[2] = v154[1].__r_.__value_.__r.__words[2];
          *((unsigned char *)&v154[1].__r_.__value_.__s + 23) = 0;
          uint64_t v163 = v154 + 2;
          v154[1].__r_.__value_.__s.__data_[0] = 0;
          ++v154;
        }
        while (v163 != v162);
        int v155 = v391.__end_;
      }
      while (v155 != v154)
      {
        if (SHIBYTE(v155[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155[-1].__r_.__value_.__l.__data_);
        }
        --v155;
      }
      v391.__end_ = v154;
    }
    else
    {
      std::vector<std::string>::pointer v156 = v391.__begin_ + 2;
      std::vector<std::string>::pointer v157 = v391.__end_;
      if (&v391.__begin_[2] != v391.__end_)
      {
        uint64_t v158 = v32;
        uint64_t v159 = (char *)&v391.__begin_[1].__r_.__value_.__r.__words[2] + 7;
        do
        {
          uint64_t v160 = (void **)(v159 - 23);
          if (*v159 < 0) {
            operator delete(*v160);
          }
          *(_OWORD *)uint64_t v160 = *(_OWORD *)(v159 + 1);
          uint64_t v161 = *(void *)(v159 + 17);
          v159[1] = 0;
          *(void *)(v159 - 7) = v161;
          int v155 = (std::string *)(v159 + 1);
          v159[24] = 0;
          v159 += 24;
        }
        while (&v155[1] != v157);
        std::vector<std::string>::pointer v156 = v391.__end_;
        uint64_t v32 = v158;
      }
      for (i4 = v376; v156 != v155; --v156)
      {
        if (SHIBYTE(v156[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v156[-1].__r_.__value_.__l.__data_);
        }
      }
      v391.__end_ = v155;
    }
    if (*v32 == 8)
    {
      uint64_t v168 = [NSNumber numberWithInt:*((unsigned int *)v373 + 4)];
      [v63 setObject:v168 forKeyedSubscript:@"ScaleCount"];

      uint64_t v169 = [NSNumber numberWithInt:v149];
      [v63 setObject:v169 forKeyedSubscript:@"ScaleOffset"];

      float v166 = [NSNumber numberWithUnsignedLong:*((void *)i4 + 47)];
      [v63 setObject:v166 forKeyedSubscript:@"ScaleIndex"];
      char v167 = @"ScaleMutable";
    }
    else
    {
      if (*v32 != 5)
      {
        exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Only ADD_K and MUL_K support dynamic weights.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v164 = [NSNumber numberWithInt:*((unsigned int *)v373 + 4)];
      [v63 setObject:v164 forKeyedSubscript:@"BiasCount"];

      unint64_t v165 = [NSNumber numberWithInt:v149];
      [v63 setObject:v165 forKeyedSubscript:@"BiasOffset"];

      float v166 = [NSNumber numberWithUnsignedLong:*((void *)i4 + 47)];
      [v63 setObject:v166 forKeyedSubscript:@"BiasIndex"];
      char v167 = @"BiasMutable";
    }

    [v63 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v167];
    if (v429)
    {
      v430.__begin_ = (std::vector<std::string>::pointer)v429;
      operator delete(v429);
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    goto LABEL_691;
  }
  uint64_t v34 = *((unsigned int *)this + 70);
  if ((int)v34 <= 12)
  {
    switch((int)v34)
    {
      case 0:
      case 2:
        std::string v35 = v395;
        v395 = @"GOC";

        uint64_t v36 = objc_opt_new();
        [obj setObject:v36 forKeyedSubscript:@"BiasScaleGroupData"];
        std::vector<std::string>::pointer v37 = v391.__begin_;
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v7 + 360), v391.__begin_->__r_.__value_.__r.__words))
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
          unint64_t v38 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 352), v37, (uint64_t)&std::piecewise_construct, (long long **)&__str);
          long long v405 = *(_OWORD *)(v38 + 56);
          memset(&v406, 0, sizeof(v406));
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v406, *((const void **)v38 + 9), *((void *)v38 + 10), (uint64_t)(*((void *)v38 + 10) - *((void *)v38 + 9)) >> 2);
          float v39 = *(float *)&v405;
          if (v406.__r_.__value_.__r.__words[0])
          {
            v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
            operator delete(v406.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          float v39 = 1.0;
        }
        _S0 = v39 * *((float *)v376 + 72);
        __asm { FCVT            H0, S0 }
        int v121 = [NSNumber numberWithShort:SLOWORD(_S0)];
        [obj setObject:v121 forKeyedSubscript:@"BiasScalar"];

        [obj removeObjectForKey:@"BiasScaleGroupData"];
        goto LABEL_454;
      case 1:
      case 3:
        long long v52 = v395;
        v395 = @"GOC";

        long long v53 = objc_opt_new();
        [obj setObject:v53 forKeyedSubscript:@"BiasScaleGroupData"];
        _S0 = *((_DWORD *)this + 72);
        __asm { FCVT            H0, S0 }
        std::string v55 = [NSNumber numberWithShort:(__int16)_S0];
        [obj setObject:v55 forKeyedSubscript:@"ScaleScalar"];

        [obj removeObjectForKey:@"BiasScaleGroupData"];
        goto LABEL_454;
      default:
        goto LABEL_269;
    }
  }
  if ((int)v34 > 116)
  {
    if (v34 == 117)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "experimental.ane.floor");
      std::string::basic_string[abi:ne180100]<0>(&v417, "0");
      Espresso::map_const_get<std::map<std::string,std::string>>(v7 + 472, (uint64_t)&__str, (uint64_t)&v417, (std::string *)&v405);
      if (v406.__r_.__value_.__s.__data_[7] < 0)
      {
        BOOL v119 = *((void *)&v405 + 1) == 1 && *(unsigned char *)v405 == 49;
        operator delete((void *)v405);
      }
      else
      {
        BOOL v119 = v406.__r_.__value_.__s.__data_[7] == 1 && v405 == 49;
      }
      if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v417.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v119)
      {
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v405, (id *)i2);
        uint64_t v170 = v413;
        v413 = @"GOC";

        unint64_t v171 = objc_opt_new();
        id v172 = v414[0];
        v414[0] = v171;

        float v173 = [NSNumber numberWithShort:4294948864];
        [v414[0] setObject:v173 forKeyedSubscript:@"BiasScalar"];

        uint64_t v174 = objc_opt_new();
        [v414[0] setObject:v174 forKeyedSubscript:@"BiasScaleGroupData"];

        unint64_t v175 = v412;
        v412 = @"UInt8";

        if (*((char *)i2 + 23) >= 0) {
          size_t v176 = *((unsigned __int8 *)i2 + 23);
        }
        else {
          size_t v176 = *((void *)i2 + 1);
        }
        std::string v177 = &__str;
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v176 + 5);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v177 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v176)
        {
          if (*((char *)i2 + 23) >= 0) {
            long long v178 = i2;
          }
          else {
            long long v178 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)i2;
          }
          memmove(v177, v178, v176);
        }
        strcpy((char *)v177 + v176, "__@u8");
        if (v406.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v405);
        }
        long long v405 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v406.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
        Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v405);
        if (v406.__r_.__value_.__s.__data_[7] < 0)
        {
          std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v405, *((std::string::size_type *)&v405 + 1));
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v405;
          __str.__r_.__value_.__r.__words[2] = v406.__r_.__value_.__r.__words[0];
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v391, &__str, &v428, 1uLL);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        float32x4_t v243 = v395;
        v395 = @"GOC";

        float32x4_t v244 = objc_opt_new();
        [obj setObject:v244 forKeyedSubscript:@"BiasScaleGroupData"];

        v245 = [NSNumber numberWithShort:0];
        [obj setObject:v245 forKeyedSubscript:@"BiasScalar"];

        if (v411 < 0) {
          operator delete(v410);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v406.__r_.__value_.__l.__size_;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (v406.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v405);
        }
        goto LABEL_454;
      }
      uint64_t v34 = *((unsigned int *)this + 70);
    }
    else if (v34 == 119)
    {
      uint64_t v48 = v395;
      v395 = @"Neuron";

      [obj setObject:@"ClampedReLU" forKeyedSubscript:@"Type"];
      std::vector<std::string>::pointer v49 = v391.__begin_;
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v7 + 360), v391.__begin_->__r_.__value_.__r.__words))
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        uint64_t v50 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 352), v49, (uint64_t)&std::piecewise_construct, (long long **)&__str);
        long long v405 = *(_OWORD *)(v50 + 56);
        memset(&v406, 0, sizeof(v406));
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v406, *((const void **)v50 + 9), *((void *)v50 + 10), (uint64_t)(*((void *)v50 + 10) - *((void *)v50 + 9)) >> 2);
        float v51 = *(float *)&v405;
        if (v406.__r_.__value_.__r.__words[0])
        {
          v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
          operator delete(v406.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        float v51 = 1.0;
      }
      _S0 = v51 * *((float *)this + 72);
      __asm { FCVT            H0, S0 }
      uint64_t v137 = [NSNumber numberWithShort:SLOWORD(_S0)];
      [obj setObject:v137 forKeyedSubscript:@"ReluMin"];

      _S0 = v51 * *((float *)this + 73);
      __asm { FCVT            H0, S0 }
      uint64_t v139 = [NSNumber numberWithShort:SLOWORD(_S0)];
      [obj setObject:v139 forKeyedSubscript:@"ReluMax"];

      goto LABEL_454;
    }
  }
  else
  {
    if (v34 == 13)
    {
      float v117 = *((float *)this + 72);
      if (fabsf(v117 + -2.0) < 0.000001)
      {
        [obj setObject:@"Square" forKeyedSubscript:@"Type"];
        uint64_t v118 = v395;
        v395 = @"ElementWise";

        goto LABEL_454;
      }
      if (fabsf(v117 + -1.0) < 0.000001)
      {
        unint64_t v124 = v395;
        v395 = @"GOC";

        uint64_t v125 = objc_opt_new();
        [obj setObject:v125 forKeyedSubscript:@"BiasScaleGroupData"];
        int v126 = [NSNumber numberWithShort:15360];
        [obj setObject:v126 forKeyedSubscript:@"ScaleScalar"];

        [obj removeObjectForKey:@"BiasScaleGroupData"];
        goto LABEL_454;
      }
      uint64_t v34 = 13;
LABEL_729:
      Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("elementwise operation not supported %d", v34);
    }
    if (v34 == 25)
    {
      BOOL v40 = v395;
      v395 = @"Neuron";

      [obj setObject:@"ClampedReLU" forKeyedSubscript:@"Type"];
      _S0 = *((_DWORD *)this + 72);
      __asm { FCVT            H0, S0 }
      uint64_t v46 = [NSNumber numberWithShort:(__int16)_S0];
      [obj setObject:v46 forKeyedSubscript:@"ReluMin"];

      uint64_t v47 = [NSNumber numberWithShort:31743];
      [obj setObject:v47 forKeyedSubscript:@"ReluMax"];

LABEL_454:
      objc_storeStrong(v396, obj);
LABEL_455:
      unint64_t v249 = v398;
      if ((unint64_t)v398 >= v399)
      {
        unint64_t v251 = 0x8E38E38E38E38E39 * (((uint64_t)v398 - v397) >> 4);
        if (v251 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v252 = 0x1C71C71C71C71C72 * ((uint64_t)(v399 - v397) >> 4);
        if (v252 <= v251 + 1) {
          unint64_t v252 = v251 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v399 - v397) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v253 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v253 = v252;
        }
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)&v399;
        if (v253) {
          unint64_t v253 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v253);
        }
        else {
          uint64_t v254 = 0;
        }
        *(void *)&long long v405 = v253;
        *((void *)&v405 + 1) = v253 + 144 * v251;
        v406.__r_.__value_.__r.__words[0] = *((void *)&v405 + 1);
        v406.__r_.__value_.__l.__size_ = v253 + 144 * v254;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*((std::string **)&v405 + 1), (uint64_t)v388);
        v406.__r_.__value_.__r.__words[0] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v397, &v405);
        std::string v250 = v398;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v405);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v398, (uint64_t)v388);
        std::string v250 = v249 + 6;
      }
      v398 = v250;
      if (*((_DWORD *)i4 + 71)) {
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("elementwise with fused relu not supported");
      }
      uint64_t v255 = v401;
      if (v401) {
        atomic_fetch_add_explicit(&v401->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v379) {
        atomic_fetch_add_explicit(&v379->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v405);
      v414[0] = 0;
      v413 = 0;
      v414[1] = (id)0x100000000;
      std::string::size_type v256 = *((void *)i4 + 50);
      int v257 = (std::__shared_weak_count *)*((void *)i4 + 51);
      if (v257) {
        atomic_fetch_add_explicit(&v257->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v256
        || *(unsigned char *)((*(uint64_t (**)(Espresso::ANECompilerEngine::elementwise_kernel *))(*(void *)i4 + 344))(i4)
                    + 40))
      {
        goto LABEL_564;
      }
      float v258 = v373[28];
      v415.__r_.__value_.__r.__words[0] = v256;
      v415.__r_.__value_.__l.__size_ = (std::string::size_type)v257;
      if (v257) {
        atomic_fetch_add_explicit(&v257->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v259 = *((void *)i4 + 53);
      v404[0] = *((long long **)i4 + 52);
      v404[1] = (long long *)v259;
      if (v259) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v259 + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::ane_style_post_scale_bias((uint64_t)&v415, (uint64_t *)v404, (uint64_t)&v436, v258);
      if (v259) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v259);
      }
      if (v257) {
        nitro::nitro_function::nitro_function(v257);
      }
      uint64_t v260 = *(unsigned int *)(v256 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v402, 2 * v260, 1, 1, 1);
      uint64_t v261 = (int)v260;
      uint64_t v262 = *((void *)i4 + 52);
      int v263 = v260;
      if (v262) {
        int v263 = *(_DWORD *)(v262 + 8);
      }
      if (!*((unsigned char *)a2 + 384))
      {
        Espresso::blob<unsigned char,1>::make(&v417, 4 * v260);
        float v337 = *(int **)(v417.__r_.__value_.__r.__words[0] + 16);
        int v338 = v260 - 1;
        if ((int)v260 >= 1)
        {
          for (uint64_t i5 = 0; i5 != v260; ++i5)
          {
            float v340 = *(float *)(*(void *)(v256 + 16) + i5 * 4);
            *(float *)&int v341 = ldexp(1.0, -DWORD2(v437)) * v340;
            v337[i5] = v341;
          }
        }
        if (v260)
        {
          v342 = *(_WORD **)(v402 + 16);
          do
          {
            int v343 = *v337++;
            _S0 = v343;
            __asm { FCVT            H0, S0 }
            *v342++ = _S0;
            --v261;
          }
          while (v261);
        }
        if (*((void *)v376 + 52))
        {
          Espresso::blob<unsigned char,1>::make(&__str, 4 * v263);
          long long v346 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          Espresso::blob<unsigned char,1>::make(&__str, 2 * v263);
          std::string::size_type v377 = __str.__r_.__value_.__r.__words[0];
          uint64_t v347 = *(int **)(v346 + 16);
          if (v263 >= 1)
          {
            for (uint64_t i6 = 0; i6 != v263; ++i6)
            {
              if (v338 >= (int)i6) {
                int v349 = i6;
              }
              else {
                int v349 = v338;
              }
              *(float *)&int v350 = *(float *)(*(void *)(v436.__r_.__value_.__r.__words[2] + 16) + 4 * i6)
                              * *(float *)(*(void *)(v436.__r_.__value_.__r.__words[0] + 16) + 4 * v349);
              v347[i6] = v350;
              int v351 = DWORD2(v437);
              int v352 = HIDWORD(v437);
              *(float *)&int v353 = ldexp(1.0, HIDWORD(v437) - DWORD2(v437)) * *(float *)&v350;
              v347[i6] = v353;
              float v356 = ldexp(1.0, v351 - v352) * *(float *)&v353;
              if (v356 < -127.0 || v356 > 255.0)
              {
                v358 = Espresso::espresso_os_log_subsystem(v354, v355);
                if (os_log_type_enabled(v358, OS_LOG_TYPE_ERROR))
                {
                  double v359 = *(float *)&v347[i6];
                  LODWORD(__str.__r_.__value_.__l.__data_) = 134218752;
                  *(double *)((char *)__str.__r_.__value_.__r.__words + 4) = v356;
                  WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v437);
                  WORD1(__str.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(__str.__r_.__value_.__r.__words[2]) = DWORD2(v437);
                  LOWORD(v428) = 2048;
                  *(double *)((char *)&v428 + 2) = v359;
                  _os_log_error_impl(&dword_1920CB000, v358, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", (uint8_t *)&__str, 0x22u);
                }
              }
            }
          }
          if (v263)
          {
            uint64_t v361 = v263;
            v362 = *(_WORD **)(v377 + 16);
            do
            {
              int v363 = *v347++;
              _S0 = v363;
              __asm { FCVT            H0, S0 }
              *v362++ = _S0;
              --v361;
            }
            while (v361);
          }
        }
        uint64_t v345 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::not_implemented_error::not_implemented_error(v345);
      }
      unsigned int v365 = HIDWORD(v437);
      uint64_t v264 = v402;
      if (v260)
      {
        uint64_t v265 = *(int **)(v436.__r_.__value_.__r.__words[0] + 16);
        uint64_t v266 = *(_WORD **)(v402 + 16);
        do
        {
          int v267 = *v265++;
          _S0 = v267;
          __asm { FCVT            H0, S0 }
          *v266++ = _S0;
          --v261;
        }
        while (v261);
      }
      if (v262)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__str, 2 * v263, 1, 1, 1);
        unint64_t v372 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        std::string::size_type v367 = __str.__r_.__value_.__r.__words[0];
        if (v263)
        {
          uint64_t v269 = v263;
          uint64_t v270 = *(_WORD **)(__str.__r_.__value_.__r.__words[0] + 16);
          v271 = *(int **)(v436.__r_.__value_.__r.__words[2] + 16);
          do
          {
            int v272 = *v271++;
            _S0 = v272;
            __asm { FCVT            H0, S0 }
            *v270++ = _S0;
            --v269;
          }
          while (v269);
        }
      }
      else
      {
        unint64_t v372 = 0;
        std::string::size_type v367 = 0;
      }
      int v369 = *((unsigned __int8 *)a2 + 552);
      v274 = (Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128);
      uint64_t v275 = v403;
      if (v403) {
        atomic_fetch_add_explicit(&v403->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v276 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v274, *(const unsigned __int8 **)(v264 + 16), *(int *)(v264 + 8));
      if (v275) {
        nitro::nitro_function::nitro_function(v275);
      }
      id v374 = (id)objc_opt_new();
      if (*((unsigned char *)a2 + 121))
      {
        id v277 = *(id *)(v397 + 128);

        id v374 = v277;
      }
      float32x4_t v278 = objc_opt_new();
      uint64_t v279 = [NSNumber numberWithInt:v260];
      [v278 setObject:v279 forKeyedSubscript:@"ScaleCount"];

      unint64_t v280 = [NSNumber numberWithInt:v276];
      [v278 setObject:v280 forKeyedSubscript:@"ScaleOffset"];

      float32x4_t v281 = NSNumber;
      if (v369) {
        uint64_t v282 = 0;
      }
      else {
      uint64_t v283 = [v281 numberWithUnsignedLong:v282];
      }
      [v278 setObject:v283 forKeyedSubscript:@"ScaleIndex"];

      [v278 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
      unint64_t v284 = [NSNumber numberWithInt:DWORD2(v437)];
      [v374 setObject:v284 forKeyedSubscript:@"ScaleShift"];

      if (*((void *)i4 + 52))
      {
        if (v372) {
          atomic_fetch_add_explicit(&v372->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v285 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v274, *(const unsigned __int8 **)(v367 + 16), *(int *)(v367 + 8));
        if (v372) {
          nitro::nitro_function::nitro_function(v372);
        }
        unint64_t v286 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)i4 + 52) + 8)];
        [v278 setObject:v286 forKeyedSubscript:@"BiasCount"];

        float32x4_t v287 = [NSNumber numberWithInt:v285];
        [v278 setObject:v287 forKeyedSubscript:@"BiasOffset"];

        float32x4_t v288 = NSNumber;
        if (v369) {
          uint64_t v289 = 0;
        }
        else {
        v290 = [v288 numberWithUnsignedLong:v289];
        }
        [v278 setObject:v290 forKeyedSubscript:@"BiasIndex"];

        [v278 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
        char v291 = [NSNumber numberWithInt:v365];
        [v374 setObject:v291 forKeyedSubscript:@"BiasShift"];
      }
      [v374 setObject:v278 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)v378);
      std::string v292 = v398;
      if (v398 == (std::string *)v397)
      {
LABEL_538:
        char v303 = v434;
        v434 = @"GOC";

        i4 = v376;
        objc_storeStrong(v435, v374);
        if (!*((unsigned char *)a2 + 121))
        {
          float32x4_t v304 = v398;
          if ((unint64_t)v398 >= v399)
          {
            unint64_t v306 = 0x8E38E38E38E38E39 * (((uint64_t)v398 - v397) >> 4);
            if (v306 + 1 > 0x1C71C71C71C71C7) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v307 = 0x1C71C71C71C71C72 * ((uint64_t)(v399 - v397) >> 4);
            if (v307 <= v306 + 1) {
              unint64_t v307 = v306 + 1;
            }
            if (0x8E38E38E38E38E39 * ((uint64_t)(v399 - v397) >> 4) >= 0xE38E38E38E38E3) {
              unint64_t v308 = 0x1C71C71C71C71C7;
            }
            else {
              unint64_t v308 = v307;
            }
            *((void *)&v418 + 1) = &v399;
            if (v308) {
              unint64_t v308 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v308);
            }
            else {
              uint64_t v309 = 0;
            }
            v417.__r_.__value_.__r.__words[0] = v308;
            v417.__r_.__value_.__l.__size_ = v308 + 144 * v306;
            v417.__r_.__value_.__r.__words[2] = v417.__r_.__value_.__l.__size_;
            *(void *)&long long v418 = v308 + 144 * v309;
            std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v417.__r_.__value_.__l.__size_, (uint64_t)&__str);
            v417.__r_.__value_.__r.__words[2] += 144;
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v397, &v417);
            char v305 = v398;
            std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v417);
          }
          else
          {
            std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v398, (uint64_t)&__str);
            char v305 = v304 + 6;
          }
          v398 = v305;
        }

        if (v432 < 0) {
          operator delete(v431);
        }
        v417.__r_.__value_.__r.__words[0] = (std::string::size_type)&v430;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v417);
        v417.__r_.__value_.__r.__words[0] = (std::string::size_type)&v428;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v417);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }

        if (v372) {
          nitro::nitro_function::nitro_function(v372);
        }
        if (v403) {
          nitro::nitro_function::nitro_function(v403);
        }
        if ((void)v437) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v437);
        }
        if (v436.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v436.__r_.__value_.__l.__size_);
        }
LABEL_564:
        if (v257) {
          nitro::nitro_function::nitro_function(v257);
        }

        if (v411 < 0) {
          operator delete(v410);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v406.__r_.__value_.__l.__size_;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (v406.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v405);
        }
        if (v379) {
          nitro::nitro_function::nitro_function(v379);
        }
        if (v255) {
          nitro::nitro_function::nitro_function(v255);
        }
        (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)i4 + 42) + 32))((uint64_t)i4 + 336, a2, &v397);
        goto LABEL_575;
      }
      std::string v293 = v398 - 6;
      uint64_t v294 = HIBYTE(v398[-6].__r_.__value_.__r.__words[2]);
      char v295 = v294;
      std::string::size_type v296 = v398[-6].__r_.__value_.__l.__size_;
      if ((v294 & 0x80u) == 0) {
        std::string::size_type v297 = HIBYTE(v398[-6].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v297 = v398[-6].__r_.__value_.__l.__size_;
      }
      std::string::size_type v298 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v298 = __str.__r_.__value_.__l.__size_;
      }
      if (v297 != v298) {
        goto LABEL_532;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v299 = &__str;
      }
      else {
        int v299 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((char)v294 < 0)
      {
        std::string v301 = (const std::string::value_type *)v293->__r_.__value_.__r.__words[0];
        if (memcmp(v293->__r_.__value_.__l.__data_, v299, v398[-6].__r_.__value_.__l.__size_)) {
          goto LABEL_535;
        }
      }
      else if ((_BYTE)v294)
      {
        char v300 = v398 - 6;
        while (v300->__r_.__value_.__s.__data_[0] == v299->__r_.__value_.__s.__data_[0])
        {
          char v300 = (std::string *)((char *)v300 + 1);
          int v299 = (std::string *)((char *)v299 + 1);
          if (!--v294) {
            goto LABEL_531;
          }
        }
        goto LABEL_532;
      }
LABEL_531:
      std::string::append(v292 - 6, "__@pre_scale_bias");
      char v295 = HIBYTE(v292[-6].__r_.__value_.__r.__words[2]);
LABEL_532:
      if ((v295 & 0x80) == 0)
      {
        long long v302 = *(_OWORD *)&v293->__r_.__value_.__l.__data_;
        v417.__r_.__value_.__r.__words[2] = v292[-6].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v417.__r_.__value_.__l.__data_ = v302;
        goto LABEL_536;
      }
      std::string v301 = v292[-6].__r_.__value_.__l.__data_;
      std::string::size_type v296 = v292[-6].__r_.__value_.__l.__size_;
LABEL_535:
      std::string::__init_copy_ctor_external(&v417, v301, v296);
LABEL_536:
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v430, &v417, &v418, 1uLL);
      if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v417.__r_.__value_.__l.__data_);
      }
      goto LABEL_538;
    }
  }
LABEL_269:
  if ((int)v34 > 26)
  {
    if (v34 != 27)
    {
      if (v34 == 38)
      {
        std::string v186 = v395;
        v395 = @"NeuronCustom";

        v187 = Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_7732, 0.00001, 1.0, 0.0, 1.0, 0.0, 1.0);

        id obj = v187;
        objc_storeStrong(v396, v187);
        goto LABEL_455;
      }
      if (v34 == 112)
      {
        [obj setObject:@"EqualZero" forKeyedSubscript:@"Type"];
        char v180 = v395;
        v395 = @"ElementWise";

        goto LABEL_454;
      }
      goto LABEL_729;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "experimental.ane.enable_scenenet_optimizations");
    std::string::basic_string[abi:ne180100]<0>(&v417, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v7 + 472, (uint64_t)&__str, (uint64_t)&v417, (std::string *)&v405);
    if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v417.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v417, "allowSoftmaxApproximation");
    std::string::basic_string[abi:ne180100]<0>(&v436, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v7 + 472, (uint64_t)&v417, (uint64_t)&v436, &__str);
    if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v436.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v417.__r_.__value_.__l.__data_);
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v405, "1")
      || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__str, "1"))
    {
      Espresso::ANECompilerEngine::ane_kernel::add_softmax_exp_units((Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this + 336), a2, (id *)i2);
      char v192 = 0;
    }
    else
    {
      float v330 = v395;
      v395 = @"NeuronCustom";
      v332 = ;
      uint64_t v333 = [v332 mutableCopy];

      char v192 = 1;
      id obj = (id)v333;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v406.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v405);
    }
    if (v192) {
      goto LABEL_454;
    }
  }
  else
  {
    switch(v34)
    {
      case 0xA:
        std::string::basic_string[abi:ne180100]<0>(&v405, "experimental.ane.enable_scenenet_optimizations");
        std::string::basic_string[abi:ne180100]<0>(&__str, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>(v7 + 472, (uint64_t)&v405, (uint64_t)&__str, &v417);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v406.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v405);
        }
        std::string::basic_string[abi:ne180100]<0>(&v405, "allowSoftmaxApproximation");
        std::string::basic_string[abi:ne180100]<0>(&__str, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>(v7 + 472, (uint64_t)&v405, (uint64_t)&__str, &v436);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v406.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v405);
        }
        if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v417, "1")
          && std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v436, "1"))
        {
          Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("elementwise operation not supported %d", *((unsigned int *)this + 70));
        }
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v405, (id *)i2);
        if (*((float *)this + 74) != 0.0)
        {
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)i2);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_eps", (const void **)i2, &v415);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v415;
          uint64_t v188 = objc_opt_new();
          long long v189 = v434;
          v434 = @"GOC";

          _S0 = *((_DWORD *)this + 74);
          __asm { FCVT            H0, S0 }
          std::string v191 = [NSNumber numberWithShort:(__int16)_S0];
          [v188 setObject:v191 forKeyedSubscript:@"BiasScalar"];

          objc_storeStrong(v435, v188);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v415, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else {
            std::string v415 = __str;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&__p + 8), &v415, (long long *)&v416, 1uLL);
          if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v415.__r_.__value_.__l.__data_);
          }

          Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);
        }
        if (!*((unsigned char *)v376 + 616)) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("elementwise inverse only supported for softmax on this arch", *((unsigned int *)v376 + 70));
        }
        if (v386 == v385) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        Espresso::ANECompilerEngine::ane_kernel::add_softmax_inverse_units_extended_lut((Espresso::ANECompilerEngine::elementwise_kernel *)((char *)v376 + 336), a2, *((int *)v385 + 2), *((void *)v376 + 78), (id *)&v405);
        Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v405);
        if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v436.__r_.__value_.__l.__data_);
        }
        break;
      case 0xC:
        std::string::basic_string[abi:ne180100]<0>(&v405, "experimental.ane.enable_rsqrt");
        std::string::basic_string[abi:ne180100]<0>(&__str, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>(v7 + 472, (uint64_t)&v405, (uint64_t)&__str, &v417);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v406.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v405);
        }
        if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v417, "1")) {
          Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("elementwise operation not supported %d", *((unsigned int *)this + 70));
        }
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v405, (id *)i2);
        if (*((float *)this + 74) != 0.0)
        {
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)i2);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_eps", (const void **)i2, &v436);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v436;
          uint64_t v182 = objc_opt_new();
          char v183 = v434;
          v434 = @"GOC";

          _S0 = *((_DWORD *)this + 74);
          __asm { FCVT            H0, S0 }
          unint64_t v185 = [NSNumber numberWithShort:(__int16)_S0];
          [v182 setObject:v185 forKeyedSubscript:@"BiasScalar"];

          objc_storeStrong(v435, v182);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v436, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else {
            std::string v436 = __str;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&__p + 8), &v436, &v437, 1uLL);
          if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v436.__r_.__value_.__l.__data_);
          }

          Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);
        }
        if (v386 == v385) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        v181.i32[0] = *((_DWORD *)v376 + 74);
        Espresso::ANECompilerEngine::ane_kernel::add_high_precision_rsqrt_units_extended_lut((Espresso::ANECompilerEngine::elementwise_kernel *)((char *)v376 + 336), a2, (id *)&v405, *((unsigned int *)v385 + 2), v181);
        Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v405);
        break;
      case 0x18:
        [obj setObject:@"Abs" forKeyedSubscript:@"Type"];
        uint64_t v179 = v395;
        v395 = @"ElementWise";

        goto LABEL_454;
      default:
        goto LABEL_729;
    }
    if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v417.__r_.__value_.__l.__data_);
    }
  }
LABEL_575:
  *(void *)&long long v405 = &v385;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);

  if (v393 < 0) {
    operator delete(v392);
  }
  *(void *)&long long v405 = &v391;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
  *(void *)&long long v405 = &v390;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
  if (v389 < 0) {
    operator delete(v388[0]);
  }

  *(void *)&long long v405 = &v397;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
  if (v379) {
    nitro::nitro_function::nitro_function(v379);
  }
  if (v375) {
    nitro::nitro_function::nitro_function(v375);
  }
  if (v401) {
    nitro::nitro_function::nitro_function(v401);
  }
}

void sub_1928385A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  a56 = (uint64_t)&a30;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a33);

  a33 = (uint64_t)&a51;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a55) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a55);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__erase_unique<std::string>(uint64_t **a1, void *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 1);
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v6 = (uint64_t *)(a1 + 1);
    uint64_t v7 = a1[1];
    do
    {
      BOOL v8 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
      char v9 = (uint64_t **)(v7 + 1);
      if (!v8)
      {
        char v9 = (uint64_t **)v7;
        uint64_t v6 = v7;
      }
      uint64_t v7 = *v9;
    }
    while (*v9);
    if (v6 != v3 && !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4))
    {
      uint64_t v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        int v12 = v6;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          int v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,0>((uint64_t)(v6 + 4));
      operator delete(v6);
    }
  }
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>(char *a1, uint64_t a2)
{
}

id anonymous namespace'::h11_exp_lut_params(_anonymous_namespace_ *this)
{
  int v1 = objc_opt_new();
  [v1 setObject:&unk_1EE3AEED8 forKeyedSubscript:@"Version"];
  uint64_t v2 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:33];
  uint64_t v3 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:32];
  for (uint64_t i = 0; i != 33; ++i)
  {
    _S8 = flt_192DD65D4[i];
    __asm { FCVT            H0, S8 }
    uint64_t v11 = [NSNumber numberWithShort:_H0];
    [v2 setObject:v11 atIndexedSubscript:i];

    if (i)
    {
      _S0 = _S8 - flt_192DD65D4[(i - 1)];
      __asm { FCVT            H0, S0 }
      BOOL v13 = [NSNumber numberWithShort:SLOWORD(_S0)];
      [v3 setObject:v13 atIndexedSubscript:(i - 1)];
    }
  }
  unsigned int v14 = (void *)[v2 copy];
  unsigned int v15 = (void *)[v3 copy];
  std::string::size_type v16 = [NSNumber numberWithShort:4294952117];
  [v1 setObject:v16 forKeyedSubscript:@"XLeft"];

  long long v17 = [NSNumber numberWithShort:4294952192];
  [v1 setObject:v17 forKeyedSubscript:@"XSatLeft"];

  std::string::size_type v18 = [NSNumber numberWithShort:7901];
  [v1 setObject:v18 forKeyedSubscript:@"YSatLeft"];

  uint64_t v19 = [NSNumber numberWithShort:8187];
  [v1 setObject:v19 forKeyedSubscript:@"SlopeLeft"];

  unint64_t v20 = [NSNumber numberWithShort:17589];
  [v1 setObject:v20 forKeyedSubscript:@"XRight"];

  uint64_t v21 = [NSNumber numberWithShort:17664];
  [v1 setObject:v21 forKeyedSubscript:@"XSatRight"];

  unint64_t v22 = [NSNumber numberWithShort:22685];
  [v1 setObject:v22 forKeyedSubscript:@"YSatRight"];

  int v23 = [NSNumber numberWithShort:22527];
  [v1 setObject:v23 forKeyedSubscript:@"SlopeRight"];

  [v1 setObject:v14 forKeyedSubscript:@"YIntercept"];
  [v1 setObject:v15 forKeyedSubscript:@"Slope"];
  [v1 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"AntiSymmetric"];

  return v1;
}

void sub_192839300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23)) {
      return 1;
    }
    return memcmp(a1, __s, v4) != 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    a1 = (void *)*a1;
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

float ___ZN8Espresso17ANECompilerEngine18elementwise_kernel7compileEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(float a1)
{
  float v1 = fabsf(a1);
  BOOL v2 = a1 < 0.0;
  float result = 1.0;
  if (v2) {
    float result = -1.0;
  }
  if (v1 < 0.000001) {
    return 0.0;
  }
  return result;
}

uint64_t *std::unordered_map<std::string,unsigned long>::at(void *a1, uint64_t a2)
{
  BOOL v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a1, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 5;
}

{
  uint64_t *v2;

  BOOL v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a1, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 5;
}

void *std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine18elementwise_kernel7compileEPNS0_8compilerERKNS2_18layer_graph_info_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37C2D0;
}

void *std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EE37C2D0;
  return result;
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK8Espresso17ANECompilerEngine18elementwise_kernel19is_valid_for_engineENSt3__110shared_ptrINS_27kernels_validation_status_tEEERKNS_11base_kernel26validate_for_engine_args_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37E428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x18uLL);
  *(void *)BOOL v2 = &unk_1EE37E428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK8Espresso17ANECompilerEngine18elementwise_kernel19is_valid_for_engineENSt3__110shared_ptrINS_27kernels_validation_status_tEEERKNS_11base_kernel26validate_for_engine_args_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, long long *a2)
{
  BOOL v2 = *(int64x2_t ***)(a1 + 8);
  uint64_t v3 = v2[1];
  v8[0] = *v2;
  v8[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->i64[1], 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, a2, *(void *)(a1 + 16), 1);
  Espresso::emit_kernel_validation_warning(v8, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  char v9 = (void **)&v6;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v9);
  char v9 = (void **)&v5;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v3);
  }
}

void sub_192839700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  uint64_t v27 = v24 + 24;
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  *(void *)(v25 - 40) = &a19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  *(void *)(v25 - 40) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37E3D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x18uLL);
  *(void *)BOOL v2 = &unk_1EE37E3D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::~__func()
{
}

void Espresso::ANECompilerEngine::elementwise_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::elementwise_kernel::~elementwise_kernel(Espresso::ANECompilerEngine::elementwise_kernel *this)
{
  *(void *)this = &unk_1EE342CA8;
  BOOL v2 = (Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE342CA8;
  BOOL v2 = (Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_elementwise_kernel::~mix_elementwise_kernel(Espresso::ANECompilerEngine::mix_elementwise_kernel *this)
{
  BOOL v2 = (Espresso::ANECompilerEngine::mix_elementwise_kernel *)((char *)this - 336);
  *((void *)this - 42) = &unk_1EE342CA8;
  *(void *)this = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  uint64_t vars8;

  BOOL v2 = (Espresso::ANECompilerEngine::mix_elementwise_kernel *)((char *)this - 336);
  *((void *)this - 42) = &unk_1EE342CA8;
  *(void *)this = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::mix_elementwise_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
}

void Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::mix_elementwise_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  uint64_t v334 = *MEMORY[0x1E4F143B8];
  size_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v286 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = (void *)*((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!v7[72]) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  BOOL v8 = v7 + 17;
  __str.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0];
  char v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v7 + 17), (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v284 = v9;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v7 + 17), (unsigned __int8 *)a3, (long long **)&__str);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  unint64_t v280 = (float *)*((void *)v10 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float32x4_t v287 = v11;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v7 + 59));
  uint64_t v285 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v285, v12))
  {
    Espresso::ANECompilerEngine::elementwise_kernel::compile(this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
    goto LABEL_522;
  }
  uint64_t v304 = 0;
  char v305 = 0;
  unint64_t v306 = 0;
  id obj = (id)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v294, (id *)&a3->__r_.__value_.__l.__data_);
  if (*((_DWORD *)this + 70) == 1 && *((void *)this + 50))
  {
    Espresso::ANECompilerEngine::elementwise_kernel::compile(this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
    goto LABEL_517;
  }
  Espresso::net::get_producers_of_blobs((Espresso::net *)v7, (uint64_t)v293);
  unsigned int v15 = v297;
  uint64_t v14 = v298;
  uint64_t v283 = this;
  if (v298 - (void)v297 != 48
    || *((_DWORD *)this + 70) != 23
    || (std::string::pointer v16 = a3[2].__r_.__value_.__l.__data_, (std::string::pointer)a3[2].__r_.__value_.__l.__size_ == v16))
  {
LABEL_52:
    if (v14 - (void)v15 == 48 && *((float *)this + 73) != 0.0)
    {
      Espresso::ANECompilerEngine::elementwise_kernel::compile(this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
      goto LABEL_515;
    }
    if (Espresso::ANECompilerEngine::prefer_ne(v285, v13)
      && v298 - (void)v297 == 48
      && *((_DWORD *)this + 70) <= 1u)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v293, (uint64_t)v297))
      {
        uint64_t v32 = std::unordered_map<std::string,unsigned long>::at(v293, (uint64_t)v297);
        uint64_t v33 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)(v7[4] + 16 * *v32) + 40), "load_constant")- 1;
      }
      else
      {
        uint64_t v33 = -1;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v293, (uint64_t)&v297[1])&& (uint64_t v34 = std::unordered_map<std::string,unsigned long>::at(v293, (uint64_t)&v297[1]), std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)(v7[4] + 16 * *v34) + 40), "load_constant")))
      {
        unsigned int v35 = 1;
      }
      else
      {
        if (v33 == -1) {
          goto LABEL_71;
        }
        unsigned int v35 = 0;
      }
      v323.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0] + 24 * v35;
      uint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v7 + 17), (unsigned __int8 *)v323.__r_.__value_.__l.__data_, (long long **)&v323);
      Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v36 + 5));
      if (__str.__r_.__value_.__r.__words[0] == 0x100000001)
      {
        Espresso::ANECompilerEngine::elementwise_kernel::compile(this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
        std::vector<std::string>::pointer v37 = __p;
        if (__p)
        {
          v317.__begin_ = (std::vector<std::string>::pointer)__p;
          goto LABEL_514;
        }
        goto LABEL_515;
      }
      if (__p)
      {
        v317.__begin_ = (std::vector<std::string>::pointer)__p;
        operator delete(__p);
      }
    }
LABEL_71:
    std::string::basic_string[abi:ne180100]<0>(&v292, "");
    if (*((_DWORD *)this + 70) == 102)
    {
      unint64_t v38 = objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
      [v38 setObject:@"Inv" forKeyedSubscript:@"Type"];
      float v39 = v321;
      size_t v321 = @"Neuron";

      if (SHIBYTE(v317.__begin_[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v323, v317.__begin_[1].__r_.__value_.__l.__data_, v317.__begin_[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v323 = v317.__begin_[1];
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v317, &v323, &v324, 1uLL);
      if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v323.__r_.__value_.__l.__data_);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __str.__r_.__value_.__l.__size_;
      }
      uint64_t v42 = &v323;
      std::string::basic_string[abi:ne180100]((uint64_t)&v323, size + 4);
      if ((v323.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v42 = (std::string *)v323.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v42, p_str, size);
      }
      strcpy((char *)v42 + size, "_inv");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v323;
      objc_storeStrong(v322, v38);
      int v44 = v305;
      if ((unint64_t)v305 >= v306)
      {
        unint64_t v46 = 0x8E38E38E38E38E39 * (((uint64_t)v305 - v304) >> 4);
        if (v46 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v47 = 0x1C71C71C71C71C72 * ((uint64_t)(v306 - v304) >> 4);
        if (v47 <= v46 + 1) {
          unint64_t v47 = v46 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v306 - v304) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v48 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v48 = v47;
        }
        *((void *)&v324 + 1) = &v306;
        if (v48) {
          unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v48);
        }
        else {
          uint64_t v49 = 0;
        }
        v323.__r_.__value_.__r.__words[0] = v48;
        v323.__r_.__value_.__l.__size_ = v48 + 144 * v46;
        v323.__r_.__value_.__r.__words[2] = v323.__r_.__value_.__l.__size_;
        *(void *)&long long v324 = v48 + 144 * v49;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v323.__r_.__value_.__l.__size_, (uint64_t)&__str);
        v323.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v304, &v323);
        uint64_t v45 = v305;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v323);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v305, (uint64_t)&__str);
        uint64_t v45 = v44 + 6;
      }
      char v305 = v45;
      uint64_t v50 = std::string::operator=(v297 + 1, &__str);
      std::string::operator=(&v292, v50);
      float v51 = (std::__shared_weak_count *)operator new(0xF0uLL);
      long long v52 = v7 + 2;
      v51->__shared_owners_ = 0;
      v51->__shared_weak_owners_ = 0;
      v51->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384BB0;
      long long v53 = v51 + 1;
      Espresso::ANECompilerEngine::blob_container::blob_container((uint64_t)&v51[1], v52, 1);
      v332.__r_.__value_.__r.__words[0] = (std::string::size_type)v317.__begin_;
      uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v317.__begin_, (long long **)&v332);
      Espresso::abstract_blob_container::shape((char *)&v323, *((void *)v54 + 5));
      uint64_t v290 = 0;
      char v291 = 0;
      ((void (*)(std::__shared_weak_count *, std::string *, uint64_t *))v53->__on_zero_shared)(v53, &v323, &v290);
      if (v291) {
        nitro::nitro_function::nitro_function(v291);
      }
      if (v325)
      {
        v326.__begin_ = (std::vector<std::string>::pointer)v325;
        operator delete(v325);
      }
      v323.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
      std::string v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)&v292, (long long **)&v323);
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      std::vector<std::string>::pointer v56 = (std::__shared_weak_count *)*((void *)v55 + 6);
      *((void *)v55 + 5) = v53;
      *((void *)v55 + 6) = v51;
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      nitro::nitro_function::nitro_function(v51);

      if (v319 < 0) {
        operator delete(v318);
      }
      v323.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
      v323.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }

      uint64_t v40 = -1;
    }
    else
    {
      uint64_t v40 = 0;
    }
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v292.__r_.__value_.__l.__size_)
      {
LABEL_116:
        uint64_t v57 = v304;
        unint64_t v58 = 0x8E38E38E38E38E39 * (((uint64_t)v305 - v304) >> 4);
        if (v58 + v40)
        {
          unint64_t v59 = 0;
          do
          {
            int v60 = (const std::string *)(v57 + 144 * (v58 + ~v59));
            std::vector<std::string>::pointer data = (unsigned __int8 *)v60[2].__r_.__value_.__l.__data_;
            uint64_t v62 = v297;
            uint64_t v63 = data[23];
            if ((v63 & 0x80u) == 0) {
              uint64_t v64 = data[23];
            }
            else {
              uint64_t v64 = *((void *)data + 1);
            }
            std::string::size_type v65 = HIBYTE(v297->__r_.__value_.__r.__words[2]);
            int v66 = (char)v65;
            if ((v65 & 0x80u) != 0) {
              std::string::size_type v65 = v297->__r_.__value_.__l.__size_;
            }
            if (v64 != v65) {
              goto LABEL_133;
            }
            if (v66 >= 0) {
              std::vector<std::string>::pointer v67 = v297;
            }
            else {
              std::vector<std::string>::pointer v67 = (std::string *)v297->__r_.__value_.__r.__words[0];
            }
            if ((v63 & 0x80) != 0)
            {
              if (memcmp(*(const void **)data, v67, *((void *)data + 1))) {
                goto LABEL_133;
              }
            }
            else if (data[23])
            {
              while (*data == v67->__r_.__value_.__s.__data_[0])
              {
                ++data;
                std::vector<std::string>::pointer v67 = (std::string *)((char *)v67 + 1);
                if (!--v63) {
                  goto LABEL_134;
                }
              }
LABEL_133:
              ++v62;
            }
LABEL_134:
            std::string::operator=(v62, v60);
            ++v59;
            uint64_t v57 = v304;
            unint64_t v58 = 0x8E38E38E38E38E39 * (((uint64_t)v305 - v304) >> 4);
          }
          while (v59 < v58 + v40);
        }
        uint64_t v289 = a3;
        unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((v298 - (uint64_t)v297) >> 3);
        if (v68 != 1)
        {
          if (v68 != 2)
          {
            if (v68 == 3 && *((_DWORD *)v283 + 70) == 101)
            {
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v69 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v69 = a3->__r_.__value_.__l.__size_;
              }
              uint64_t v70 = &v323;
              std::string::basic_string[abi:ne180100]((uint64_t)&v323, v69 + 5);
              if ((v323.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v70 = (std::string *)v323.__r_.__value_.__r.__words[0];
              }
              if (v69)
              {
                if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v71 = a3;
                }
                else {
                  char v71 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                memmove(v70, v71, v69);
              }
              strcpy((char *)v70 + v69, "__ne0");
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              uint64_t v72 = v321;
              size_t v321 = @"ElementWise";

              begistd::vector<std::string>::pointer n = v317.__begin_;
              for (std::vector<std::string>::pointer i = v317.__end_; i != begin; --i)
              {
                if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(i[-1].__r_.__value_.__l.__data_);
                }
              }
              v317.__end_ = begin;
              uint64_t v110 = (uint64_t)a3[2].__r_.__value_.__l.__data_;
              if (begin >= v317.__end_cap_.__value_)
              {
                unint64_t v124 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v317, v110);
              }
              else
              {
                if (*(char *)(v110 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(begin, *(const std::string::value_type **)v110, *(void *)(v110 + 8));
                }
                else
                {
                  long long v111 = *(_OWORD *)v110;
                  begin->__r_.__value_.__r.__words[2] = *(void *)(v110 + 16);
                  *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v111;
                }
                unint64_t v124 = begin + 1;
              }
              v317.__end_ = v124;
              std::string::operator=(&__str, &v323);
              uint64_t v138 = objc_opt_new();
              [v138 setObject:@"NotEqualZero" forKeyedSubscript:@"Type"];
              objc_storeStrong(v322, v138);
              Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v319 < 0) {
                operator delete(v318);
              }
              v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
              v332.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v139 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v139 = a3->__r_.__value_.__l.__size_;
              }
              float32x4_t v140 = &v332;
              std::string::basic_string[abi:ne180100]((uint64_t)&v332, v139 + 5);
              if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                float32x4_t v140 = (std::string *)v332.__r_.__value_.__r.__words[0];
              }
              if (v139)
              {
                if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  float32x4_t v141 = a3;
                }
                else {
                  float32x4_t v141 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                memmove(v140, v141, v139);
              }
              strcpy((char *)v140 + v139, "__eq0");
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              float32x4_t v142 = v321;
              size_t v321 = @"ElementWise";

              std::vector<std::string>::pointer v144 = v317.__begin_;
              for (std::vector<std::string>::pointer j = v317.__end_; j != v144; --j)
              {
                if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(j[-1].__r_.__value_.__l.__data_);
                }
              }
              v317.__end_ = v144;
              uint64_t v145 = (uint64_t)a3[2].__r_.__value_.__l.__data_;
              if (v144 >= v317.__end_cap_.__value_)
              {
                uint64_t v147 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v317, v145);
              }
              else
              {
                if (*(char *)(v145 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v144, *(const std::string::value_type **)v145, *(void *)(v145 + 8));
                }
                else
                {
                  long long v146 = *(_OWORD *)v145;
                  v144->__r_.__value_.__r.__words[2] = *(void *)(v145 + 16);
                  *(_OWORD *)&v144->__r_.__value_.__l.__data_ = v146;
                }
                uint64_t v147 = v144 + 1;
              }
              v317.__end_ = v147;
              std::string::operator=(&__str, &v332);
              unint64_t v148 = objc_opt_new();
              [v148 setObject:@"EqualZero" forKeyedSubscript:@"Type"];
              objc_storeStrong(v322, v148);
              Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v319 < 0) {
                operator delete(v318);
              }
              v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);
              v310.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v149 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v149 = a3->__r_.__value_.__l.__size_;
              }
              uint64_t v150 = &v310;
              std::string::basic_string[abi:ne180100]((uint64_t)&v310, v149 + 7);
              if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v150 = (std::string *)v310.__r_.__value_.__r.__words[0];
              }
              if (v149)
              {
                if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v151 = a3;
                }
                else {
                  uint64_t v151 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                memmove(v150, v151, v149);
              }
              strcpy((char *)v150 + v149, "__mul_0");
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              uint64_t v152 = v321;
              size_t v321 = @"ElementWise";

              std::vector<std::string>::pointer v154 = v317.__begin_;
              for (std::vector<std::string>::pointer k = v317.__end_; k != v154; --k)
              {
                if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(k[-1].__r_.__value_.__l.__data_);
                }
              }
              v317.__end_ = v154;
              if (v154 >= v317.__end_cap_.__value_)
              {
                std::vector<std::string>::pointer v156 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v317, (uint64_t)&v323);
              }
              else
              {
                if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v154, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v155 = *(_OWORD *)&v323.__r_.__value_.__l.__data_;
                  v154->__r_.__value_.__r.__words[2] = v323.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v154->__r_.__value_.__l.__data_ = v155;
                }
                std::vector<std::string>::pointer v156 = v154 + 1;
              }
              v317.__end_ = v156;
              std::string::pointer v157 = a3[2].__r_.__value_.__l.__data_;
              uint64_t v158 = (long long *)(v157 + 24);
              if (v156 >= v317.__end_cap_.__value_)
              {
                uint64_t v160 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v317, (uint64_t)v158);
              }
              else
              {
                if (v157[47] < 0)
                {
                  std::string::__init_copy_ctor_external(v156, *((const std::string::value_type **)v157 + 3), *((void *)v157 + 4));
                }
                else
                {
                  long long v159 = *v158;
                  v156->__r_.__value_.__r.__words[2] = *((void *)v157 + 5);
                  *(_OWORD *)&v156->__r_.__value_.__l.__data_ = v159;
                }
                uint64_t v160 = v156 + 1;
              }
              v317.__end_ = v160;
              std::string::operator=(&__str, &v310);
              uint64_t v161 = objc_opt_new();
              [v161 setObject:@"Mult" forKeyedSubscript:@"Type"];
              objc_storeStrong(v322, v161);
              Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v319 < 0) {
                operator delete(v318);
              }
              v288.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
              v288.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v162 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v162 = a3->__r_.__value_.__l.__size_;
              }
              uint64_t v163 = &v288;
              std::string::basic_string[abi:ne180100]((uint64_t)&v288, v162 + 7);
              if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v163 = (std::string *)v288.__r_.__value_.__r.__words[0];
              }
              if (v162)
              {
                if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v164 = a3;
                }
                else {
                  uint64_t v164 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                memmove(v163, v164, v162);
              }
              strcpy((char *)v163 + v162, "__mul_1");
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              unint64_t v165 = v321;
              size_t v321 = @"ElementWise";

              std::vector<std::string>::pointer v167 = v317.__begin_;
              for (std::vector<std::string>::pointer m = v317.__end_; m != v167; --m)
              {
                if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(m[-1].__r_.__value_.__l.__data_);
                }
              }
              v317.__end_ = v167;
              if (v167 >= v317.__end_cap_.__value_)
              {
                uint64_t v169 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v317, (uint64_t)&v332);
              }
              else
              {
                if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v167, v332.__r_.__value_.__l.__data_, v332.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v168 = *(_OWORD *)&v332.__r_.__value_.__l.__data_;
                  v167->__r_.__value_.__r.__words[2] = v332.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
                }
                uint64_t v169 = v167 + 1;
              }
              v317.__end_ = v169;
              std::string::pointer v170 = a3[2].__r_.__value_.__l.__data_;
              unint64_t v171 = (long long *)(v170 + 48);
              if (v169 >= v317.__end_cap_.__value_)
              {
                float v173 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v317, (uint64_t)v171);
              }
              else
              {
                if (v170[71] < 0)
                {
                  std::string::__init_copy_ctor_external(v169, *((const std::string::value_type **)v170 + 6), *((void *)v170 + 7));
                }
                else
                {
                  long long v172 = *v171;
                  v169->__r_.__value_.__r.__words[2] = *((void *)v170 + 8);
                  *(_OWORD *)&v169->__r_.__value_.__l.__data_ = v172;
                }
                float v173 = v169 + 1;
              }
              v317.__end_ = v173;
              std::string::operator=(&__str, &v288);
              uint64_t v174 = objc_opt_new();
              [v174 setObject:@"Mult" forKeyedSubscript:@"Type"];
              objc_storeStrong(v322, v174);
              Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v319 < 0) {
                operator delete(v318);
              }
              v309[0] = (void **)&v317;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v309);
              v309[0] = (void **)v315;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v309);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              unint64_t v175 = v321;
              size_t v321 = @"ElementWise";

              std::vector<std::string>::pointer v177 = v317.__begin_;
              for (std::vector<std::string>::pointer n = v317.__end_; n != v177; --n)
              {
                if (SHIBYTE(n[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(n[-1].__r_.__value_.__l.__data_);
                }
              }
              v317.__end_ = v177;
              if (v177 >= v317.__end_cap_.__value_)
              {
                uint64_t v179 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v317, (uint64_t)&v310);
              }
              else
              {
                if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v177, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v178 = *(_OWORD *)&v310.__r_.__value_.__l.__data_;
                  v177->__r_.__value_.__r.__words[2] = v310.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v177->__r_.__value_.__l.__data_ = v178;
                }
                uint64_t v179 = v177 + 1;
              }
              v317.__end_ = v179;
              if (v179 >= v317.__end_cap_.__value_)
              {
                int32x2_t v181 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v317, (uint64_t)&v288);
              }
              else
              {
                if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v179, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v180 = *(_OWORD *)&v288.__r_.__value_.__l.__data_;
                  v179->__r_.__value_.__r.__words[2] = v288.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v179->__r_.__value_.__l.__data_ = v180;
                }
                int32x2_t v181 = v179 + 1;
              }
              v317.__end_ = v181;
              std::string::operator=(&__str, a3);
              uint64_t v182 = objc_opt_new();
              [v182 setObject:@"Add" forKeyedSubscript:@"Type"];
              objc_storeStrong(v322, v182);
              Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v319 < 0) {
                operator delete(v318);
              }
              v309[0] = (void **)&v317;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v309);
              v309[0] = (void **)v315;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v309);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v288.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v310.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v332.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v323.__r_.__value_.__l.__data_);
              }
              goto LABEL_512;
            }
LABEL_409:
            atomic_fetch_add_explicit(&v286->__shared_owners_, 1uLL, memory_order_relaxed);
            if (v287) {
              atomic_fetch_add_explicit(&v287->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__str);
            v322[0] = 0;
            size_t v321 = 0;
            v322[1] = (id)0x100000000;
            std::string::size_type v191 = *((void *)v283 + 50);
            char v192 = (std::__shared_weak_count *)*((void *)v283 + 51);
            if (v192) {
              atomic_fetch_add_explicit(&v192->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (!v191
              || *(unsigned char *)((*(uint64_t (**)(Espresso::ANECompilerEngine::mix_elementwise_kernel *))(*(void *)v283 + 344))(v283)
                          + 40))
            {
              goto LABEL_503;
            }
            float v193 = v280[28];
            v288.__r_.__value_.__r.__words[0] = v191;
            v288.__r_.__value_.__l.__size_ = (std::string::size_type)v192;
            if (v192) {
              atomic_fetch_add_explicit(&v192->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v194 = (std::__shared_weak_count *)*((void *)v283 + 53);
            v309[0] = *((void ***)v283 + 52);
            v309[1] = (void **)&v194->__vftable;
            if (v194) {
              atomic_fetch_add_explicit(&v194->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::ane_style_post_scale_bias((uint64_t)&v288, (uint64_t *)v309, (uint64_t)&v310, v193);
            if (v194) {
              nitro::nitro_function::nitro_function(v194);
            }
            if (v192) {
              nitro::nitro_function::nitro_function(v192);
            }
            uint64_t v195 = *(unsigned int *)(v191 + 8);
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v307, 2 * v195, 1, 1, 1);
            uint64_t v196 = (int)v195;
            uint64_t v197 = *((void *)v283 + 52);
            int v198 = v195;
            if (v197) {
              int v198 = *(_DWORD *)(v197 + 8);
            }
            if (!*((unsigned char *)a2 + 384))
            {
              Espresso::blob<unsigned char,1>::make(&v332, 4 * v195);
              std::string v250 = *(int **)(v332.__r_.__value_.__r.__words[0] + 16);
              if ((int)v195 >= 1)
              {
                for (istd::vector<std::string>::pointer i = 0; ii != v195; ++ii)
                {
                  float v252 = *(float *)(*(void *)(v191 + 16) + ii * 4);
                  *(float *)&int v253 = ldexp(1.0, -v312) * v252;
                  v250[ii] = v253;
                }
              }
              if (v195)
              {
                uint64_t v254 = *(_WORD **)(v307 + 16);
                do
                {
                  int v255 = *v250++;
                  _S0 = v255;
                  __asm { FCVT            H0, S0 }
                  *v254++ = _S0;
                  --v196;
                }
                while (v196);
              }
              if (*((void *)v283 + 52))
              {
                Espresso::blob<unsigned char,1>::make(&v323, 4 * v198);
                long long v258 = *(_OWORD *)&v323.__r_.__value_.__l.__data_;
                Espresso::blob<unsigned char,1>::make(&v323, 2 * v198);
                std::string::size_type v278 = v323.__r_.__value_.__r.__words[0];
                uint64_t v259 = *(int **)(v258 + 16);
                if (v198 >= 1)
                {
                  for (jstd::vector<std::string>::pointer j = 0; jj != v198; ++jj)
                  {
                    if ((int)v195 - 1 >= (int)jj) {
                      int v261 = jj;
                    }
                    else {
                      int v261 = v195 - 1;
                    }
                    *(float *)&int v262 = *(float *)(*(void *)(v310.__r_.__value_.__r.__words[2] + 16) + 4 * jj)
                                    * *(float *)(*(void *)(v310.__r_.__value_.__r.__words[0] + 16) + 4 * v261);
                    v259[jj] = v262;
                    unsigned int v263 = v313;
                    unsigned int v264 = v312;
                    *(float *)&int v265 = ldexp(1.0, v313 - v312) * *(float *)&v262;
                    v259[jj] = v265;
                    float v268 = ldexp(1.0, v264 - v263) * *(float *)&v265;
                    if (v268 < -127.0 || v268 > 255.0)
                    {
                      uint64_t v270 = Espresso::espresso_os_log_subsystem(v266, v267);
                      if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
                      {
                        double v271 = *(float *)&v259[jj];
                        LODWORD(v323.__r_.__value_.__l.__data_) = 134218752;
                        *(double *)((char *)v323.__r_.__value_.__r.__words + 4) = v268;
                        WORD2(v323.__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&v323.__r_.__value_.__r.__words[1] + 6) = v313;
                        WORD1(v323.__r_.__value_.__r.__words[2]) = 1024;
                        HIDWORD(v323.__r_.__value_.__r.__words[2]) = v312;
                        LOWORD(v324) = 2048;
                        *(double *)((char *)&v324 + 2) = v271;
                        _os_log_error_impl(&dword_1920CB000, v270, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", (uint8_t *)&v323, 0x22u);
                      }
                    }
                  }
                }
                if (v198)
                {
                  uint64_t v272 = v198;
                  v273 = *(_WORD **)(v278 + 16);
                  do
                  {
                    int v274 = *v259++;
                    _S0 = v274;
                    __asm { FCVT            H0, S0 }
                    *v273++ = _S0;
                    --v272;
                  }
                  while (v272);
                }
              }
              exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
              Espresso::not_implemented_error::not_implemented_error(exception);
            }
            unsigned int v199 = v313;
            uint64_t v200 = v307;
            if (v195)
            {
              uint64_t v201 = *(int **)(v310.__r_.__value_.__r.__words[0] + 16);
              size_t v202 = *(_WORD **)(v307 + 16);
              do
              {
                int v203 = *v201++;
                _S0 = v203;
                __asm { FCVT            H0, S0 }
                *v202++ = _S0;
                --v196;
              }
              while (v196);
            }
            unsigned int v276 = v199;
            if (v197)
            {
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v323, 2 * v198, 1, 1, 1);
              uint64_t v279 = (std::__shared_weak_count *)v323.__r_.__value_.__l.__size_;
              std::string::size_type v205 = v323.__r_.__value_.__r.__words[0];
              if (v198)
              {
                uint64_t v206 = v198;
                uint64_t v207 = *(_WORD **)(v323.__r_.__value_.__r.__words[0] + 16);
                uint64_t v208 = *(int **)(v310.__r_.__value_.__r.__words[2] + 16);
                do
                {
                  int v209 = *v208++;
                  _S0 = v209;
                  __asm { FCVT            H0, S0 }
                  *v207++ = _S0;
                  --v206;
                }
                while (v206);
              }
            }
            else
            {
              uint64_t v279 = 0;
              std::string::size_type v205 = 0;
            }
            int v277 = *((unsigned __int8 *)a2 + 552);
            uint64_t v211 = v308;
            if (v308) {
              atomic_fetch_add_explicit(&v308->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v212 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v200 + 16), *(int *)(v200 + 8));
            if (v211) {
              nitro::nitro_function::nitro_function(v211);
            }
            id v281 = (id)objc_opt_new();
            if (*((unsigned char *)a2 + 121))
            {
              id v213 = *(id *)(v304 + 128);

              id v281 = v213;
            }
            unint64_t v214 = objc_opt_new();
            float32x4_t v215 = [NSNumber numberWithInt:v195];
            [v214 setObject:v215 forKeyedSubscript:@"ScaleCount"];

            uint64_t v216 = [NSNumber numberWithInt:v212];
            [v214 setObject:v216 forKeyedSubscript:@"ScaleOffset"];

            float32x4_t v217 = NSNumber;
            if (v277) {
              uint64_t weights_file_index = 0;
            }
            else {
            float32x4_t v219 = [v217 numberWithUnsignedLong:weights_file_index];
            }
            [v214 setObject:v219 forKeyedSubscript:@"ScaleIndex"];

            [v214 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
            uint64_t v220 = [NSNumber numberWithInt:v312];
            [v281 setObject:v220 forKeyedSubscript:@"ScaleShift"];

            if (*((void *)v283 + 52))
            {
              if (v279) {
                atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v221 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v205 + 16), *(int *)(v205 + 8));
              if (v279) {
                nitro::nitro_function::nitro_function(v279);
              }
              unint64_t v222 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)v283 + 52) + 8)];
              [v214 setObject:v222 forKeyedSubscript:@"BiasCount"];

              std::vector<std::string>::pointer v223 = [NSNumber numberWithInt:v221];
              [v214 setObject:v223 forKeyedSubscript:@"BiasOffset"];

              float32x4_t v224 = NSNumber;
              if (v277) {
                uint64_t v225 = 0;
              }
              else {
              size_t v226 = [v224 numberWithUnsignedLong:v225];
              }
              [v214 setObject:v226 forKeyedSubscript:@"BiasIndex"];

              [v214 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
              uint64_t v227 = [NSNumber numberWithInt:v276];
              [v281 setObject:v227 forKeyedSubscript:@"BiasShift"];
            }
            [v281 setObject:v214 forKeyedSubscript:@"BiasScaleGroupData"];
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v323.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
            std::string v228 = v305;
            if (v305 == (std::string *)v304)
            {
LABEL_477:
              std::string v239 = v330;
              float v330 = @"GOC";

              objc_storeStrong(&v331, v281);
              if (!*((unsigned char *)a2 + 121))
              {
                std::vector<std::string>::pointer v240 = v305;
                if ((unint64_t)v305 >= v306)
                {
                  unint64_t v242 = 0x8E38E38E38E38E39 * (((uint64_t)v305 - v304) >> 4);
                  if (v242 + 1 > 0x1C71C71C71C71C7) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v243 = 0x1C71C71C71C71C72 * ((uint64_t)(v306 - v304) >> 4);
                  if (v243 <= v242 + 1) {
                    unint64_t v243 = v242 + 1;
                  }
                  if (0x8E38E38E38E38E39 * ((uint64_t)(v306 - v304) >> 4) >= 0xE38E38E38E38E3) {
                    unint64_t v244 = 0x1C71C71C71C71C7;
                  }
                  else {
                    unint64_t v244 = v243;
                  }
                  *((void *)&v333 + 1) = &v306;
                  if (v244) {
                    unint64_t v244 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v244);
                  }
                  else {
                    uint64_t v245 = 0;
                  }
                  v332.__r_.__value_.__r.__words[0] = v244;
                  v332.__r_.__value_.__l.__size_ = v244 + 144 * v242;
                  v332.__r_.__value_.__r.__words[2] = v332.__r_.__value_.__l.__size_;
                  *(void *)&long long v333 = v244 + 144 * v245;
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v332.__r_.__value_.__l.__size_, (uint64_t)&v323);
                  v332.__r_.__value_.__r.__words[2] += 144;
                  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v304, &v332);
                  float32x4_t v241 = v305;
                  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v332);
                }
                else
                {
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v305, (uint64_t)&v323);
                  float32x4_t v241 = v240 + 6;
                }
                char v305 = v241;
              }

              if (v328 < 0) {
                operator delete(v327);
              }
              v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
              v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v324;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
              if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v323.__r_.__value_.__l.__data_);
              }

              if (v279) {
                nitro::nitro_function::nitro_function(v279);
              }
              if (v308) {
                nitro::nitro_function::nitro_function(v308);
              }
              if (v311) {
                nitro::nitro_function::nitro_function(v311);
              }
              if (v310.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v310.__r_.__value_.__l.__size_);
              }
LABEL_503:
              if (v192) {
                nitro::nitro_function::nitro_function(v192);
              }

              if (v319 < 0) {
                operator delete(v318);
              }
              v323.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
              v323.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (v287) {
                nitro::nitro_function::nitro_function(v287);
              }
              nitro::nitro_function::nitro_function(v286);
              (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)v283 + 42)
                                                                                                  + 24))((uint64_t)v283 + 336, a2, &v304);
LABEL_512:
              if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
              {
                std::vector<std::string>::pointer v37 = (void *)v292.__r_.__value_.__r.__words[0];
LABEL_514:
                operator delete(v37);
              }
              goto LABEL_515;
            }
            uint64_t v229 = v305 - 6;
            uint64_t v230 = HIBYTE(v305[-6].__r_.__value_.__r.__words[2]);
            char v231 = v230;
            std::string::size_type v232 = v305[-6].__r_.__value_.__l.__size_;
            if ((v230 & 0x80u) == 0) {
              std::string::size_type v233 = HIBYTE(v305[-6].__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v233 = v305[-6].__r_.__value_.__l.__size_;
            }
            std::string::size_type v234 = HIBYTE(v323.__r_.__value_.__r.__words[2]);
            if ((v323.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v234 = v323.__r_.__value_.__l.__size_;
            }
            if (v233 != v234) {
              goto LABEL_471;
            }
            if ((v323.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v235 = &v323;
            }
            else {
              size_t v235 = (std::string *)v323.__r_.__value_.__r.__words[0];
            }
            if ((char)v230 < 0)
            {
              float32x4_t v237 = (const std::string::value_type *)v229->__r_.__value_.__r.__words[0];
              if (memcmp(v229->__r_.__value_.__l.__data_, v235, v305[-6].__r_.__value_.__l.__size_)) {
                goto LABEL_474;
              }
            }
            else if ((_BYTE)v230)
            {
              float32x4_t v236 = v305 - 6;
              while (v236->__r_.__value_.__s.__data_[0] == v235->__r_.__value_.__s.__data_[0])
              {
                float32x4_t v236 = (std::string *)((char *)v236 + 1);
                size_t v235 = (std::string *)((char *)v235 + 1);
                if (!--v230) {
                  goto LABEL_470;
                }
              }
              goto LABEL_471;
            }
LABEL_470:
            std::string::append(v228 - 6, "__@pre_scale_bias");
            char v231 = HIBYTE(v228[-6].__r_.__value_.__r.__words[2]);
LABEL_471:
            if ((v231 & 0x80) == 0)
            {
              long long v238 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
              v332.__r_.__value_.__r.__words[2] = v228[-6].__r_.__value_.__r.__words[2];
              *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v238;
              goto LABEL_475;
            }
            float32x4_t v237 = v228[-6].__r_.__value_.__l.__data_;
            std::string::size_type v232 = v228[-6].__r_.__value_.__l.__size_;
LABEL_474:
            std::string::__init_copy_ctor_external(&v332, v237, v232);
LABEL_475:
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v326, &v332, &v333, 1uLL);
            if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v332.__r_.__value_.__l.__data_);
            }
            goto LABEL_477;
          }
          unsigned int v75 = *((_DWORD *)v283 + 70);
          if (v75 <= 0x21)
          {
            if (((1 << v75) & 0xC00002) != 0)
            {
              int v76 = v302;
              long long v302 = @"ScaledElementWise";

              int v77 = *((_DWORD *)v283 + 70);
              switch(v77)
              {
                case 1:
                  uint64_t v78 = @"Mult";
                  break;
                case 22:
                  uint64_t v78 = @"Min";
                  break;
                case 23:
                  uint64_t v78 = @"Max";
                  break;
                default:
LABEL_248:
                  objc_storeStrong(v303, obj);
                  uint64_t v133 = v305;
                  if ((unint64_t)v305 >= v306)
                  {
                    uint64_t v134 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v304, (uint64_t)v294);
                  }
                  else
                  {
                    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v305, (uint64_t)v294);
                    uint64_t v134 = v133 + 6;
                  }
                  char v305 = v134;
                  goto LABEL_252;
              }
              [obj setObject:v78 forKeyedSubscript:@"Type"];
              goto LABEL_248;
            }
            if (((1 << v75) & 0x200000001) != 0)
            {
              uint64_t v112 = (*(uint64_t (**)(Espresso::ANECompilerEngine::mix_elementwise_kernel *))(*(void *)v283 + 344))(v283);
              uint64_t v113 = v112;
              if (*(unsigned char *)(v112 + 53))
              {
                _S0 = *(_DWORD *)(v112 + 56);
                __asm { FCVT            H0, S0 }
                uint64_t v118 = [NSNumber numberWithShort:(__int16)_S0];
                [obj setObject:v118 forKeyedSubscript:@"PreScale"];

                _S0 = *(_DWORD *)(v113 + 60);
                __asm { FCVT            H0, S0 }
                unint64_t v120 = [NSNumber numberWithShort:(__int16)_S0];
                [obj setObject:v120 forKeyedSubscript:@"Scale"];
              }
              int v121 = v302;
              long long v302 = @"ScaledElementWise";

              [obj setObject:@"Add" forKeyedSubscript:@"Type"];
              if (*((_DWORD *)v283 + 70) == 33) {
                [obj setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"NegateSrc2"];
              }
              objc_storeStrong(v303, obj);
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)v294);
              goto LABEL_252;
            }
          }
          if (v75 == 100)
          {
            uint64_t v122 = v302;
            long long v302 = @"ElementWise";
            long long v123 = @"Equal";
            goto LABEL_236;
          }
          if (v75 == 102)
          {
            uint64_t v122 = v302;
            long long v302 = @"ScaledElementWise";
            long long v123 = @"Mult";
LABEL_236:

            [obj setObject:v123 forKeyedSubscript:@"Type"];
            objc_storeStrong(v303, obj);
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)v294);
LABEL_252:
            _S0 = *((float *)v283 + 72);
            if (fabsf(_S0 + -1.0) >= 0.000001)
            {
              __asm { FCVT            H0, S0 }
              uint64_t v137 = [NSNumber numberWithShort:_H0];
              [obj setObject:v137 forKeyedSubscript:@"Scale"];
            }
            if (fabsf(*((float *)v283 + 73)) >= 0.000001) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("beta with elementwise not supported on ANE. Blocked by rdar://58017698");
            }
            goto LABEL_409;
          }
LABEL_234:
          Espresso::ANECompilerEngine::elementwise_kernel::compile(v283, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
          goto LABEL_512;
        }
        int v79 = *((_DWORD *)v283 + 70);
        if (v79 <= 36)
        {
          if (v79 > 25)
          {
            if (v79 == 26)
            {
              char v183 = objc_opt_new();
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              float v184 = *((float *)v283 + 74);
              if (v184 > 0.0)
              {
                Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)&v323, (id **)&v289, v184);
                std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)&v323);
                if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v332, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v332 = v323;
                }
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v317, &v332, &v333, 1uLL);
                if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v332.__r_.__value_.__l.__data_);
                }
                Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v323.__r_.__value_.__l.__data_);
              }
              v247 = v321;
              size_t v321 = @"Neuron";

              [v183 setObject:@"Log2" forKeyedSubscript:@"Type"];
              objc_storeStrong(v322, v183);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_before_scaling", (const void **)&v317.__begin_->__r_.__value_.__l.__data_, &v323);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v323;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)&__str);
              [obj setObject:@"GOC" forKeyedSubscript:@"Type"];
              v248 = [NSNumber numberWithShort:14732];
              [obj setObject:v248 forKeyedSubscript:@"ScaleScalar"];

              std::string::operator=(v297, &__str);
              objc_storeStrong(v303, obj);
              unint64_t v249 = v302;
              long long v302 = @"GOC";

              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)v294);
              Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);

              goto LABEL_409;
            }
            if (v79 == 27)
            {
              unint64_t v185 = objc_opt_new();
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              std::string v186 = v321;
              size_t v321 = @"GOC";

              v187 = [NSNumber numberWithShort:15813];
              [v185 setObject:v187 forKeyedSubscript:@"ScaleScalar"];

              objc_storeStrong(v322, v185);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_prescaled", (const void **)&v317.__begin_->__r_.__value_.__l.__data_, &v323);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v323;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)&__str);
              [obj setObject:@"Exp2" forKeyedSubscript:@"Type"];
              std::string::operator=(v297, &__str);
              objc_storeStrong(v303, obj);
              uint64_t v188 = v302;
              long long v302 = @"Neuron";

              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)v294);
              Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);

              goto LABEL_409;
            }
            if (v79 != 35) {
              goto LABEL_234;
            }
          }
          else if ((v79 - 10) >= 3)
          {
            goto LABEL_234;
          }
        }
        else
        {
          if ((v79 - 114) <= 0xD)
          {
            if (((1 << (v79 - 114)) & 0x1B) != 0) {
              goto LABEL_227;
            }
            if (v79 == 127)
            {
              int v80 = 0;
              memset(&v332, 0, sizeof(v332));
              char v81 = 1;
              float v82 = 2.0;
              do
              {
                char v83 = v81;
                uint64_t v84 = objc_opt_new();
                Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
                std::to_string(&v310, v80);
                uint64_t v85 = std::string::insert(&v310, 0, "__@lutpart");
                long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
                v323.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v86;
                v85->__r_.__value_.__l.__size_ = 0;
                v85->__r_.__value_.__r.__words[2] = 0;
                v85->__r_.__value_.__r.__words[0] = 0;
                if ((v323.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v87 = &v323;
                }
                else {
                  char v87 = (std::string *)v323.__r_.__value_.__r.__words[0];
                }
                if ((v323.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v88 = HIBYTE(v323.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v88 = v323.__r_.__value_.__l.__size_;
                }
                std::string::append(&__str, (const std::string::value_type *)v87, v88);
                if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v323.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v310.__r_.__value_.__l.__data_);
                }
                uint64_t v89 = (_OWORD *)v332.__r_.__value_.__l.__size_;
                if (v332.__r_.__value_.__l.__size_ >= v332.__r_.__value_.__r.__words[2])
                {
                  int v91 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v332.__r_.__value_.__l.__data_, (uint64_t)&__str);
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v332.__r_.__value_.__l.__size_, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v90 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(void *)(v332.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&__str.__r_.__value_.__l + 2);
                    _OWORD *v89 = v90;
                  }
                  int v91 = (std::string *)((char *)v89 + 24);
                }
                v332.__r_.__value_.__l.__size_ = (std::string::size_type)v91;
                int v92 = v321;
                size_t v321 = @"NeuronCustom";

                float v93 = log2f(32.0 / v82);
                float v95 = atanf(v82);
                float v96 = v95;
                uint64_t v97 = Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::__invoke;
                if (v83)
                {
                  float v98 = 1.0;
                  float v99 = 0.0;
                  float v100 = 0.0;
                  float v101 = v96;
                }
                else
                {
                  float v101 = v95 + -1.1071;
                  float v100 = (float)((float)(v95 + -1.1071) + -0.46315) / (float)(v82 + -2000.0);
                  float v98 = 0.0;
                  float v99 = 2.0;
                  uint64_t v97 = Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_2::__invoke;
                  float v82 = 2000.0;
                  float v96 = 0.46315;
                }
                LODWORD(v94) = vcvtms_s32_f32(v93);
                id v102 = Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(v94, 0, 1, 1, (uint64_t)v97, v99, v82, v96, v98, v100, 0.0, v101);

                objc_storeStrong(v322, v102);
                char v103 = v305;
                if ((unint64_t)v305 >= v306)
                {
                  unint64_t v105 = 0x8E38E38E38E38E39 * (((uint64_t)v305 - v304) >> 4);
                  unint64_t v106 = v105 + 1;
                  if (v105 + 1 > 0x1C71C71C71C71C7) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x1C71C71C71C71C72 * ((uint64_t)(v306 - v304) >> 4) > v106) {
                    unint64_t v106 = 0x1C71C71C71C71C72 * ((uint64_t)(v306 - v304) >> 4);
                  }
                  if (0x8E38E38E38E38E39 * ((uint64_t)(v306 - v304) >> 4) >= 0xE38E38E38E38E3) {
                    unint64_t v107 = 0x1C71C71C71C71C7;
                  }
                  else {
                    unint64_t v107 = v106;
                  }
                  *((void *)&v324 + 1) = &v306;
                  if (v107) {
                    unint64_t v107 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v107);
                  }
                  else {
                    uint64_t v108 = 0;
                  }
                  v323.__r_.__value_.__r.__words[0] = v107;
                  v323.__r_.__value_.__l.__size_ = v107 + 144 * v105;
                  v323.__r_.__value_.__r.__words[2] = v323.__r_.__value_.__l.__size_;
                  *(void *)&long long v324 = v107 + 144 * v108;
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v323.__r_.__value_.__l.__size_, (uint64_t)&__str);
                  v323.__r_.__value_.__r.__words[2] += 144;
                  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v304, &v323);
                  int v104 = v305;
                  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v323);
                }
                else
                {
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v305, (uint64_t)&__str);
                  int v104 = v103 + 6;
                }
                char v305 = v104;

                if (v319 < 0) {
                  operator delete(v318);
                }
                v323.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
                v323.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }

                char v81 = 0;
                int v80 = 1;
                float v82 = 64.0;
              }
              while ((v83 & 1) != 0);
              [obj setObject:@"Add" forKeyedSubscript:@"Type"];
              unint64_t v109 = v302;
              long long v302 = @"ElementWise";

              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v297, (std::string *)v332.__r_.__value_.__l.__data_, (std::string *)v332.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v332.__r_.__value_.__l.__size_ - v332.__r_.__value_.__r.__words[0]) >> 3));
              objc_storeStrong(v303, obj);
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)v294);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v332;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_409;
            }
          }
          if (v79 != 37)
          {
            if (v79 == 38)
            {
              uint64_t v125 = v302;
              long long v302 = @"NeuronCustom";
              int v126 = ;

              objc_storeStrong(v303, v126);
              id obj = v126;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)v294);
              goto LABEL_409;
            }
            goto LABEL_234;
          }
        }
LABEL_227:
        char v127 = objc_opt_new();
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
        uint64_t v128 = v321;
        size_t v321 = @"Neuron";

        int v129 = *((_DWORD *)v283 + 70);
        if (v129 > 34)
        {
          switch(v129)
          {
            case 'r':
              uint64_t v131 = @"Cos";
              break;
            case 's':
              uint64_t v131 = @"Sin";
              break;
            case 't':
              goto LABEL_561;
            case 'u':
              uint64_t v131 = @"Floor";
              break;
            case 'v':
              uint64_t v131 = @"Ceil";
              break;
            default:
              if (v129 == 35)
              {
                uint64_t v131 = @"Exp2";
              }
              else
              {
                if (v129 != 37) {
                  goto LABEL_561;
                }
                uint64_t v131 = @"RoundNearest";
              }
              break;
          }
        }
        else
        {
          if (v129 == 10)
          {
            uint64_t v130 = @"Inv";
LABEL_238:
            [v127 setObject:v130 forKeyedSubscript:@"Type"];
            float v132 = *((float *)v283 + 74);
            if (v132 > 0.0)
            {
              Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)&v323, (id **)&v289, v132);
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v304, (uint64_t)&v323);
              if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v332, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
              }
              else {
                std::string v332 = v323;
              }
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v317, &v332, &v333, 1uLL);
              if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v332.__r_.__value_.__l.__data_);
              }
              Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v323.__r_.__value_.__l.__data_);
            }
            goto LABEL_401;
          }
          if (v129 != 11)
          {
            if (v129 == 12)
            {
              uint64_t v130 = @"Rsqrt";
              goto LABEL_238;
            }
LABEL_561:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Espresso : Elementwise op not supported on ANE. ");
          }
          uint64_t v131 = @"Sqrt";
        }
        [v127 setObject:v131 forKeyedSubscript:@"Type"];
LABEL_401:
        objc_storeStrong(v322, v127);
        long long v189 = v305;
        if ((unint64_t)v305 >= v306)
        {
          uint64_t v190 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v304, (uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v305, (uint64_t)&__str);
          uint64_t v190 = v189 + 6;
        }
        char v305 = v190;

        if (v319 < 0) {
          operator delete(v318);
        }
        v323.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
        v323.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }

        goto LABEL_409;
      }
    }
    else if (!*((unsigned char *)&v292.__r_.__value_.__s + 23))
    {
      goto LABEL_116;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>(v8, (unsigned __int8 *)&v292);
    goto LABEL_116;
  }
  unint64_t v17 = 0;
  while (1)
  {
    std::string::size_type v18 = &v16[24 * v17];
    if (v18[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v18, *((void *)v18 + 1));
    }
    else
    {
      long long v19 = *(_OWORD *)v18;
      __str.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v19;
    }
    v323.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    unint64_t v20 = (uint64_t *)(v7[4]
                    + 16
                    * std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v293, (uint64_t)&__str, (uint64_t)&std::piecewise_construct, (long long **)&v323)[5]);
    uint64_t v21 = *v20;
    unint64_t v22 = (std::__shared_weak_count *)v20[1];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v23 = (void *)(v21 + 40);
    int v24 = *(char *)(v21 + 63);
    if (v24 < 0) {
      break;
    }
    if (v24 == 13) {
      goto LABEL_28;
    }
LABEL_46:
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    ++v17;
    std::string::pointer v16 = a3[2].__r_.__value_.__l.__data_;
    if (v17 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[2].__r_.__value_.__l.__size_ - (void)v16) >> 3))
    {
      unsigned int v15 = v297;
      uint64_t v14 = v298;
      this = v283;
      goto LABEL_52;
    }
  }
  if (*(void *)(v21 + 48) != 13) {
    goto LABEL_46;
  }
  int v23 = (void *)*v23;
LABEL_28:
  uint64_t v25 = (void *)*v23;
  uint64_t v26 = *(void *)((char *)v23 + 5);
  if (v25 != (void *)0x6E6F635F64616F6CLL || v26 != 0x746E6174736E6F63) {
    goto LABEL_46;
  }
  long long v28 = *(uint64_t **)(v21 + 64);
  if (v28
  {
    uint64_t v29 = *(std::__shared_weak_count **)(v21 + 72);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v323, v28 + 43);
  uint64_t v30 = 0;
  uint64_t v31 = *(int *)(v323.__r_.__value_.__r.__words[0] + 8);
  do
  {
    v31 *= *(int *)(v323.__r_.__value_.__r.__words[0] + 12 + v30);
    v30 += 4;
  }
  while (v30 != 12);
  if (v31 != 1 || **(float **)(v323.__r_.__value_.__r.__words[0] + 24) != 0.0)
  {
    if (v323.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v323.__r_.__value_.__l.__size_);
    }
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    goto LABEL_46;
  }
  Espresso::ANECompilerEngine::elementwise_kernel::compile(v283, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
  if (v323.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v323.__r_.__value_.__l.__size_);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::vector<std::string>::pointer v37 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_514;
  }
LABEL_515:
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v293[2]);
  v246 = v293[0];
  v293[0] = 0;
  if (v246) {
    operator delete(v246);
  }
LABEL_517:

  if (v300 < 0) {
    operator delete(v299);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v297;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v295 < 0) {
    operator delete(v294[0]);
  }

  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v304;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_522:

  if (v287) {
    nitro::nitro_function::nitro_function(v287);
  }
  if (v284) {
    nitro::nitro_function::nitro_function(v284);
  }
  nitro::nitro_function::nitro_function(v286);
}

void sub_19283C638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  nitro::nitro_function::nitro_function(a19);
  if (a32 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a33);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a38);

  a38 = (uint64_t)&a56;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);

  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >= v5)
  {
    unint64_t v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - *(void *)a1) >> 4);
    if (v9 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(void *)a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0xE38E38E38E38E3) {
      unint64_t v12 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    unsigned int v15 = (std::string *)(v12 + 144 * v9);
    unint64_t v17 = v12 + 144 * v13;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v15, a2);
    std::string::pointer v16 = v15 + 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)a1, &v14);
    unint64_t v8 = *(void *)(a1 + 8);
    uint64_t result = std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    uint64_t result = (uint64_t)std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)(a1 + 8), a2);
    unint64_t v8 = v6 + 144;
    *(void *)(a1 + 8) = v6 + 144;
  }
  *(void *)(a1 + 8) = v8;
  return result;
}

void sub_19283CEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()(uint64_t a1, id **a2, float a3)
{
  _S8 = a3;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)a1, *a2);
  unint64_t v6 = *a2;
  if (*((char *)*a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)*a2 + 23);
  }
  else {
    size_t v7 = (size_t)(*a2)[1];
  }
  unint64_t v8 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v7 + 4);
  if (v20 < 0) {
    unint64_t v8 = (long long *)v19;
  }
  if (v7)
  {
    if (*((char *)v6 + 23) >= 0) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = *v6;
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "_eps");
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = v19;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v20;
  unint64_t v10 = objc_opt_new();
  uint64_t v11 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = @"GOC";

  __asm { FCVT            H0, S8 }
  unint64_t v17 = [NSNumber numberWithShort:_H0];
  [v10 setObject:v17 forKeyedSubscript:@"BiasScalar"];

  uint64_t v18 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v10;
}

void sub_19283D000(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(v1);
  _Unwind_Resume(a1);
}

float Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_2::__invoke(float a1)
{
  return atanf(a1) + -1.1071;
}

float anonymous namespace'::sign_activation_function(_anonymous_namespace_ *this, float a2)
{
  float v2 = fabsf(a2);
  BOOL v3 = a2 < 0.0;
  float result = 1.0;
  if (v3) {
    float result = -1.0;
  }
  if (v2 < 0.000001) {
    return 0.0;
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::ANECompilerEngine::mix_elementwise_kernel::~mix_elementwise_kernel(Espresso::ANECompilerEngine::mix_elementwise_kernel *this)
{
  *(void *)this = &unk_1EE342CA8;
  float v2 = (Espresso::ANECompilerEngine::mix_elementwise_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE342CA8;
  float v2 = (Espresso::ANECompilerEngine::mix_elementwise_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::~stir_spatial_transformer_affine_kernel(Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *this)
{
  float v1 = (Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *)((char *)this - 304);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  float v1 = (Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *)((char *)this - 304);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::compile(Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::compile(Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v126 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  v156[0] = a3[6];
  unint64_t v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v156[0], (long long **)v156)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v124 = v9;
  v156[0] = a3;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (long long **)v156);
  uint64_t v125 = a2;
  uint64_t v12 = *((void *)v10 + 5);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v127 = v11;
  uint64_t v13 = objc_opt_new();
  uint64_t v130 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:2];
  int v129 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:2];
  if (*((unsigned char *)this + 296))
  {
    exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported coordinate mode");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  unint64_t v14 = };
  unsigned int v15 = [v14 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  [v15 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  [v130 setObject:v14 atIndexedSubscript:0];
  std::string::pointer v16 = [v130 setObject:v15 atIndexedSubscript:1];
  unint64_t v17 = [v16 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  [v17 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  [v129 setObject:v16 atIndexedSubscript:0];
  [v129 setObject:v17 atIndexedSubscript:1];

  [v13 setObject:v130 forKeyedSubscript:@"CoordinateInfo"];
  [v13 setObject:v129 forKeyedSubscript:@"OutputCoordinateInfo"];
  long long v123 = objc_opt_new();
  [v123 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  [v123 setObject:@"Linear" forKeyedSubscript:@"SamplingMethod"];
  int v121 = objc_opt_new();
  [v121 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  [v121 setObject:@"Linear" forKeyedSubscript:@"SamplingMethod"];
  v144[0] = v123;
  v144[1] = v121;
  uint64_t v122 = [MEMORY[0x1E4F1C978] arrayWithObjects:v144 count:2];
  objc_msgSend(v13, "setObject:forKeyedSubscript:");
  uint64_t v128 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:2];
  uint64_t v18 = objc_opt_new();
  [v18 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  if (*((_DWORD *)this + 75)) {
    long long v19 = @"Replication";
  }
  else {
    long long v19 = @"Background";
  }
  [v18 setObject:v19 forKeyedSubscript:@"PaddingMode"];
  [v128 setObject:v18 atIndexedSubscript:0];

  uint64_t v20 = objc_opt_new();
  [v20 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  if (*((_DWORD *)this + 75)) {
    uint64_t v21 = @"Replication";
  }
  else {
    uint64_t v21 = @"Background";
  }
  [v20 setObject:v21 forKeyedSubscript:@"PaddingMode"];
  [v128 setObject:v20 atIndexedSubscript:1];

  [v13 setObject:v128 forKeyedSubscript:@"PaddingInfo"];
  unint64_t v22 = [NSNumber numberWithShort:0];
  [v13 setObject:v22 forKeyedSubscript:@"BackgroundValue"];

  int v23 = [NSNumber numberWithInt:*((unsigned int *)this + 71)];
  [v13 setObject:v23 forKeyedSubscript:@"OutputWidth"];

  int v24 = [NSNumber numberWithInt:*((unsigned int *)this + 72)];
  [v13 setObject:v24 forKeyedSubscript:@"OutputHeight"];

  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v156, a3);
  uint64_t v131 = 0;
  float v132 = 0;
  unint64_t v133 = 0;
  *(void *)buf = &v131;
  buf[8] = 0;
  uint64_t v131 = (std::string *)operator new(0x90uLL);
  float v132 = v131;
  unint64_t v133 = (unint64_t)&v131[6];
  float v132 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v133, (uint64_t)v156, (uint64_t)&__str, (uint64_t)v131);

  if (v161 < 0) {
    operator delete(__p);
  }
  *(void *)buf = v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v157 < 0) {
    operator delete(v156[0]);
  }
  std::string::pointer data = v131[5].__r_.__value_.__l.__data_;
  v131[5].__r_.__value_.__r.__words[0] = (std::string::size_type)@"AffineTransform";

  objc_storeStrong((id *)&v131[5].__r_.__value_.__l.__size_, v13);
  atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v127) {
    atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v156);
  id v164 = 0;
  id v163 = 0;
  uint64_t v165 = 0x100000000;
  uint64_t v27 = *((void *)this + 46);
  uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v27 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 38) + 104))() + 40))
  {
    float v28 = *(float *)(v12 + 112);
    v137[0] = v27;
    v137[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 49);
    v136[0] = *((void *)this + 48);
    v136[1] = (uint64_t)v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v137, v136, (uint64_t)&v138, v28);
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    uint64_t v30 = *(unsigned int *)(v27 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v134, 2 * v30, 1, 1, 1);
    uint64_t v31 = (int)v30;
    uint64_t v32 = *((void *)this + 48);
    int v33 = v30;
    if (v32) {
      int v33 = *(_DWORD *)(v32 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      int obja = v33;
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v30);
      char v87 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v88 = v30 - 1;
      if ((int)v30 >= 1)
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          float v90 = *(float *)(*(void *)(v27 + 16) + i * 4);
          *(float *)&int v91 = ldexp(1.0, -v142) * v90;
          v87[i] = v91;
        }
      }
      if (v30)
      {
        int v92 = *(_WORD **)(v134 + 16);
        do
        {
          int v93 = *v87++;
          _S0 = v93;
          __asm { FCVT            H0, S0 }
          *v92++ = _S0;
          --v31;
        }
        while (v31);
      }
      if (*((void *)this + 48))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * obja);
        uint64_t v96 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * obja);
        uint64_t v117 = *(void *)buf;
        uint64_t v97 = *(int **)(v96 + 16);
        if (obja >= 1)
        {
          for (uint64_t j = 0; j != obja; ++j)
          {
            if (v88 >= (int)j) {
              int v99 = j;
            }
            else {
              int v99 = v88;
            }
            *(float *)&int v100 = *(float *)(*(void *)(v140 + 16) + 4 * j)
                            * *(float *)(*(void *)(v138 + 16) + 4 * v99);
            v97[j] = v100;
            unsigned int v102 = v142;
            unsigned int v101 = v143;
            *(float *)&int v103 = ldexp(1.0, v143 - v142) * *(float *)&v100;
            v97[j] = v103;
            float v106 = ldexp(1.0, v102 - v101) * *(float *)&v103;
            if (v106 < -127.0 || v106 > 255.0)
            {
              uint64_t v108 = Espresso::espresso_os_log_subsystem(v104, v105);
              if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
              {
                double v109 = *(float *)&v97[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&uint8_t buf[4] = v106;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v143;
                __int16 v146 = 1024;
                int v147 = v142;
                __int16 v148 = 2048;
                double v149 = v109;
                _os_log_error_impl(&dword_1920CB000, v108, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (obja)
        {
          uint64_t v110 = obja;
          long long v111 = *(_WORD **)(v117 + 16);
          do
          {
            int v112 = *v97++;
            _S0 = v112;
            __asm { FCVT            H0, S0 }
            *v111++ = _S0;
            --v110;
          }
          while (v110);
        }
      }
      float v95 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(v95);
    }
    unsigned int v34 = v143;
    uint64_t v35 = v134;
    if (v30)
    {
      uint64_t v36 = *(int **)(v138 + 16);
      std::vector<std::string>::pointer v37 = *(_WORD **)(v134 + 16);
      do
      {
        int v38 = *v36++;
        _S0 = v38;
        __asm { FCVT            H0, S0 }
        *v37++ = _S0;
        --v31;
      }
      while (v31);
    }
    unsigned int v114 = v34;
    if (v32)
    {
      int v44 = v33;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v33, 1, 1, 1);
      uint64_t v118 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v115 = *(void *)buf;
      if (v44)
      {
        uint64_t v45 = v44;
        unint64_t v46 = *(_WORD **)(*(void *)buf + 16);
        unint64_t v47 = *(int **)(v140 + 16);
        do
        {
          int v48 = *v47++;
          _S0 = v48;
          __asm { FCVT            H0, S0 }
          *v46++ = _S0;
          --v45;
        }
        while (v45);
      }
    }
    else
    {
      uint64_t v118 = 0;
      uint64_t v115 = 0;
    }
    int v116 = *((unsigned __int8 *)a2 + 552);
    uint64_t v50 = (Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128);
    float v51 = v135;
    if (v135) {
      atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v50, *(const unsigned __int8 **)(v35 + 16), *(int *)(v35 + 8));
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    id obj = (id)objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v53 = (id)v131[5].__r_.__value_.__l.__size_;

      id obj = v53;
    }
    uint64_t v54 = objc_opt_new();
    std::string v55 = [NSNumber numberWithInt:v30];
    [v54 setObject:v55 forKeyedSubscript:@"ScaleCount"];

    std::vector<std::string>::pointer v56 = [NSNumber numberWithInt:v52];
    [v54 setObject:v56 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v57 = NSNumber;
    if (v116) {
      uint64_t weights_file_index = 0;
    }
    else {
    unint64_t v59 = [v57 numberWithUnsignedLong:weights_file_index];
    }
    [v54 setObject:v59 forKeyedSubscript:@"ScaleIndex"];

    [v54 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    int v60 = [NSNumber numberWithInt:v142];
    [obj setObject:v60 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 48))
    {
      if (v118) {
        atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v61 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v50, *(const unsigned __int8 **)(v115 + 16), *(int *)(v115 + 8));
      if (v118) {
        nitro::nitro_function::nitro_function(v118);
      }
      uint64_t v62 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 48) + 8)];
      [v54 setObject:v62 forKeyedSubscript:@"BiasCount"];

      uint64_t v63 = [NSNumber numberWithInt:v61];
      [v54 setObject:v63 forKeyedSubscript:@"BiasOffset"];

      uint64_t v64 = NSNumber;
      if (v116) {
        uint64_t v65 = 0;
      }
      else {
      int v66 = [v64 numberWithUnsignedLong:v65];
      }
      [v54 setObject:v66 forKeyedSubscript:@"BiasIndex"];

      [v54 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      std::vector<std::string>::pointer v67 = [NSNumber numberWithInt:v114];
      [obj setObject:v67 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v54 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    unint64_t v68 = v132;
    if (v132 == v131) {
      goto LABEL_88;
    }
    size_t v69 = v132 - 6;
    uint64_t v70 = HIBYTE(v132[-6].__r_.__value_.__r.__words[2]);
    char v71 = v70;
    std::string::size_type size = v132[-6].__r_.__value_.__l.__size_;
    if ((v70 & 0x80u) == 0) {
      std::string::size_type v73 = HIBYTE(v132[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v73 = v132[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v74 = HIBYTE(v147);
    if (v147 < 0) {
      uint64_t v74 = *(void *)&buf[8];
    }
    if (v73 != v74) {
      goto LABEL_82;
    }
    if (v147 >= 0) {
      unsigned int v75 = buf;
    }
    else {
      unsigned int v75 = *(unsigned __int8 **)buf;
    }
    if ((char)v70 < 0)
    {
      int v77 = (const std::string::value_type *)v69->__r_.__value_.__r.__words[0];
      if (memcmp(v69->__r_.__value_.__l.__data_, v75, v132[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_85;
      }
    }
    else if ((_BYTE)v70)
    {
      int v76 = v132 - 6;
      while (v76->__r_.__value_.__s.__data_[0] == *v75)
      {
        int v76 = (std::string *)((char *)v76 + 1);
        ++v75;
        if (!--v70) {
          goto LABEL_81;
        }
      }
      goto LABEL_82;
    }
LABEL_81:
    std::string::append(v68 - 6, "__@pre_scale_bias");
    char v71 = HIBYTE(v68[-6].__r_.__value_.__r.__words[2]);
LABEL_82:
    if ((v71 & 0x80) == 0)
    {
      long long v78 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v68[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v78;
      goto LABEL_86;
    }
    int v77 = v68[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v68[-6].__r_.__value_.__l.__size_;
LABEL_85:
    std::string::__init_copy_ctor_external(&__str, v77, size);
LABEL_86:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v150, &__str, &v167, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_88:
    int v79 = v154;
    std::vector<std::string>::pointer v154 = @"GOC";

    objc_storeStrong(&v155, obj);
    if (!*((unsigned char *)v125 + 121))
    {
      int v80 = v132;
      if ((unint64_t)v132 >= v133)
      {
        unint64_t v82 = 0x8E38E38E38E38E39 * (((char *)v132 - (char *)v131) >> 4);
        if (v82 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v83 = 0x1C71C71C71C71C72 * ((uint64_t)(v133 - (void)v131) >> 4);
        if (v83 <= v82 + 1) {
          unint64_t v83 = v82 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v133 - (void)v131) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v84 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v84 = v83;
        }
        *((void *)&v167 + 1) = &v133;
        if (v84) {
          unint64_t v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v84);
        }
        else {
          uint64_t v85 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v84;
        __str.__r_.__value_.__l.__size_ = v84 + 144 * v82;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v167 = v84 + 144 * v85;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v131, &__str);
        char v81 = v132;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v132, (uint64_t)buf);
        char v81 = v80 + 6;
      }
      float v132 = v81;
    }

    if (v152 < 0) {
      operator delete(v151);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v147) < 0) {
      operator delete(*(void **)buf);
    }

    if (v118) {
      nitro::nitro_function::nitro_function(v118);
    }
    if (v135) {
      nitro::nitro_function::nitro_function(v135);
    }
    if (v141) {
      nitro::nitro_function::nitro_function(v141);
    }
    if (v139) {
      nitro::nitro_function::nitro_function(v139);
    }
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }

  if (v161 < 0) {
    operator delete(__p);
  }
  *(void *)buf = v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v157 < 0) {
    operator delete(v156[0]);
  }
  if (v127) {
    nitro::nitro_function::nitro_function(v127);
  }
  nitro::nitro_function::nitro_function(v126);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 38) + 32))((char *)this + 304, v125, &v131);
  v156[0] = &v131;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v156);

  if (v127) {
    nitro::nitro_function::nitro_function(v127);
  }
  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  nitro::nitro_function::nitro_function(v126);
}

void sub_19283E2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23,void *a24,void *a25,void *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  nitro::nitro_function::nitro_function(a22);
  a43 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a43);

  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  nitro::nitro_function::nitro_function(a22);
  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::anonymous namespace'::CreateAnonymousNormalizedCoordinateInfo()
{
  uint64_t v0 = objc_opt_new();
  [v0 setObject:@"NormalizedReflect" forKeyedSubscript:@"CoordinateMode"];
  [v0 setObject:@"RangeMinusOneToOne" forKeyedSubscript:@"CoordinateRange"];

  return v0;
}

void sub_19283E718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6 = *((void *)a3 + 6);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      unint64_t v9 = *(const Espresso::net **)(v6 + 72);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = 0;
LABEL_6:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  unint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v10, v11))
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    v114[0] = v12;
    v114[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "spatial_transformer_affine_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v65, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v114, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_19:
    if (v76) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v76);
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    BOOL v17 = 0;
    goto LABEL_28;
  }
  unint64_t v14 = *(void **)a3;
  if (*((void *)a3 + 1) - *(void *)a3 != 128 || *((void *)a3 + 3) == *((void *)a3 + 4))
  {
    std::string::pointer v16 = *a2;
    uint64_t v13 = a2[1];
    v113[0] = v16;
    v113[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "spatial_transformer_affine_kernel: has to have 2 bottom tensors");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v65, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v113, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 296))
  {
    unsigned int v15 = *a2;
    uint64_t v13 = a2[1];
    v112[0] = v15;
    v112[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "spatial_transformer_affine_kernel: unnormalized coordinate mode not supported on ANE. This parameter is also ignored on CPU.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v65, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v112, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a1 + 300) >= 2u)
  {
    uint64_t v31 = *a2;
    uint64_t v13 = a2[1];
    v111[0] = v31;
    v111[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "spatial_transformer_affine_kernel: only padding fill modes CONSTANT and CLAMP are supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v65, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v111, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_19;
  }
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v14 = *(void **)a3;
  }
  long long v19 = *((_OWORD *)v14 + 1);
  uint64_t v20 = v14[4];
  v104[0] = *(_OWORD *)v14;
  v104[1] = v19;
  uint64_t v105 = v20;
  float v106 = 0;
  uint64_t v108 = 0;
  unint64_t v107 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v106, (const void *)v14[5], v14[6], (uint64_t)(v14[6] - v14[5]) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v109, v9, (const Espresso::layer_shape *)v104, 1);
  if (v106)
  {
    unint64_t v107 = v106;
    operator delete(v106);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void **)a3;
  long long v22 = *(_OWORD *)(*(void *)a3 + 80);
  v98[0] = *(_OWORD *)(*(void *)a3 + 64);
  v98[1] = v22;
  int v23 = (const void *)v21[13];
  uint64_t v99 = v21[12];
  int v100 = 0;
  uint64_t v102 = 0;
  unsigned int v101 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v100, v23, v21[14], (uint64_t)(v21[14] - (void)v23) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v103, v9, (const Espresso::layer_shape *)v98, 1);
  if (v100)
  {
    unsigned int v101 = v100;
    operator delete(v100);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *((void *)a3 + 3);
  uint64_t v25 = *(void *)(v24 + 32);
  long long v26 = *(_OWORD *)(v24 + 16);
  v92[0] = *(_OWORD *)v24;
  v92[1] = v26;
  uint64_t v93 = v25;
  uint64_t v94 = 0;
  uint64_t v96 = 0;
  float v95 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, *(const void **)(v24 + 40), *(void *)(v24 + 48), (uint64_t)(*(void *)(v24 + 48) - *(void *)(v24 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v97, v9, (const Espresso::layer_shape *)v92, 1);
  if (v94)
  {
    float v95 = v94;
    operator delete(v94);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v27 = (void *)*((void *)a3 + 6);
  uint64_t v28 = *((void *)a3 + 9);
  uint64_t v29 = *(long long **)(*v27 + 224 * v28 + 136);
  if (*((char *)v29 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)v29, *((void *)v29 + 1));
    uint64_t v27 = (void *)*((void *)a3 + 6);
    uint64_t v28 = *((void *)a3 + 9);
  }
  else
  {
    long long v30 = *v29;
    v91.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v30;
  }
  uint64_t v32 = *(void *)(*v27 + 224 * v28 + 136);
  if (*(char *)(v32 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)(v32 + 24), *(void *)(v32 + 32));
  }
  else {
    std::string v90 = *(std::string *)(v32 + 24);
  }
  unsigned int v33 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, 0);
  unsigned int v34 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, (const Espresso::net *)1);
  if (v33 < 8 && ((0x97u >> v33) & 1) != 0)
  {
    if (v34 < 8 && ((0x97u >> v34) & 1) != 0)
    {
      if (!*((unsigned char *)v9 + 1281))
      {
        float v39 = off_1E5747308[v33];
        uint64_t v40 = off_1E5747308[v34];
        Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::supported_by_hw((uint64_t)v84, v10, v109, v103, v97, a1 + 280, v33, v34);
        if (v84[0])
        {
          ANECAffineTransformLayerDescInitialize();
          int v80 = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)@"Width";
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)@"Linear";
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)@"Height";
          v74[0] = @"Linear";
          v74[1] = @"Width";
          v74[2] = @"Background";
          v75[0] = @"Height";
          v75[1] = @"Background";
          v75[2] = @"Width";
          if (*(unsigned char *)(a1 + 296))
          {
            id v41 = @"NonNormalized";
          }
          else
          {
            v75[3] = @"RangeMinusOneToOne";
            long long v78 = @"RangeMinusOneToOne";
            id v41 = @"NormalizedReflect";
          }
          int v76 = v41;
          int v77 = @"Height";
          v44.i64[0] = *(void *)(a1 + 284);
          uint64_t v52 = v110;
          v44.i64[1] = v110;
          int32x4_t v45 = vrev64q_s32(v44);
          v45.i64[0] = v44.i64[0];
          int32x4_t v81 = v45;
          int v79 = v41;
          unint64_t v82 = v39;
          ANECTensorDescInitialize();
          ANECTensorDescInitialize();
          *(void *)&long long v46 = (int)v52;
          *((void *)&v46 + 1) = SHIDWORD(v52);
          long long v67 = v46;
          uint64_t v64 = 0;
          uint64_t v65 = v39;
          uint64_t v68 = v109[2];
          *(void *)&long long v46 = v109[0];
          *((void *)&v46 + 1) = v109[1];
          long long v66 = v46;
          *(void *)&long long v46 = v103[3];
          *((void *)&v46 + 1) = v103[4];
          long long v71 = v46;
          size_t v69 = v40;
          uint64_t v72 = v103[2];
          *(void *)&long long v46 = v103[0];
          *((void *)&v46 + 1) = v103[1];
          long long v70 = v46;
          uint64_t v63 = 0;
          Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v61, (NSString *)(a1 + 304), v10);
          int v47 = ANECValidateAffineTransformLayer();
          BOOL v17 = v47 == 0;
          if (v47)
          {
            int v48 = a2[1];
            v60[0] = *a2;
            v60[1] = v48;
            if (v48) {
              atomic_fetch_add_explicit(&v48->i64[1], 1uLL, memory_order_relaxed);
            }
            std::to_string(&v55, v47);
            uint64_t v49 = std::string::insert(&v55, 0, "spatial_transformer_affine_kernel: ANECValidateAffineTransformLayer failed with status ");
            std::string v54 = *v49;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v56, (long long *)&v54, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v60, (Espresso::base_kernel::validate_for_engine_warning_t *)&v56);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v56);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v54.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v55.__r_.__value_.__l.__data_);
            }
            if (v48) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v48);
            }
            Espresso::ANECompilerEngine::violations_from_alternates<ANECAffineTransformLayerDescAlternate>((uint64_t)&v54, v63, v64);
            uint64_t v50 = (uint64_t **)v54.__r_.__value_.__r.__words[2];
            if (v54.__r_.__value_.__r.__words[2])
            {
              do
              {
                float v51 = a2[1];
                v53[0] = *a2;
                v53[1] = v51;
                if (v51) {
                  atomic_fetch_add_explicit(&v51->i64[1], 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v55, (char *)[v50[2] UTF8String]);
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v56, (long long *)&v55, (uint64_t)a3, 0);
                Espresso::emit_kernel_validation_warning(v53, (Espresso::base_kernel::validate_for_engine_warning_t *)&v56);
                if (v59) {
                  nitro::nitro_function::nitro_function(v59);
                }
                v115[0] = (void **)&v58;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v115);
                v115[0] = (void **)&v57;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v115);
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v56.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v55.__r_.__value_.__l.__data_);
                }
                if (v51) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v51);
                }
                uint64_t v50 = (uint64_t **)*v50;
              }
              while (v50);
            }
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v54);
          }
          if (v62) {
            nitro::nitro_function::nitro_function(v62);
          }
        }
        else
        {
          uint64_t v42 = *a2;
          uint64_t v43 = a2[1];
          v83[0] = v42;
          v83[1] = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->i64[1], 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v85, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          if (v43) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v43);
          }
          BOOL v17 = 0;
        }
        if (v86 < 0) {
          operator delete((void *)v85);
        }
        goto LABEL_74;
      }
      int v38 = *a2;
      uint64_t v36 = a2[1];
      v87[0] = v38;
      v87[1] = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "spatial_transformer_affine_kernel: Unsupported operation with 3d layout conventions");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v65, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v87, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    else
    {
      std::vector<std::string>::pointer v37 = *a2;
      uint64_t v36 = a2[1];
      v88[0] = v37;
      v88[1] = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "spatial_transformer_affine_kernel: unsupported coord compute path for ANE.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v65, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v88, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    uint64_t v35 = *a2;
    uint64_t v36 = a2[1];
    v89[0] = v35;
    v89[1] = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "spatial_transformer_affine_kernel: unsupported input compute path for ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v65, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v89, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v76) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v76);
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  if (v36) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v36);
  }
  BOOL v17 = 0;
LABEL_74:
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
LABEL_28:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v17;
}

void sub_19283F0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38)
{
  if (a38) {
    nitro::nitro_function::nitro_function(a38);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }

  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  _Unwind_Resume(a1);
}

void sub_19283F2FC()
{
  if (!v0) {
    JUMPOUT(0x19283F2F4);
  }
  JUMPOUT(0x19283F2ECLL);
}

void Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  id v15 = a2;
  id v17 = v15;
  if (a7 > 4 || a7 == 3 || a8 > 4 || a8 == 3)
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: Unsupported compute path for ANE.");
  }
  else if (*(_DWORD *)a6 == 1)
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v15))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v17))
      {
        if (a4[2] == 1 && a4[4] == 1 && a4[3] == 1)
        {
          if (a4[1] == 6)
          {
            if (*a4 == *a3 || *a3 == 1)
            {
              if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a5, v17))
              {
                if (*(_DWORD *)(a6 + 12) == 3)
                {
                  std::string::pointer v16 = (void *)(a1 + 8);
                  if (*(unsigned char *)(a6 + 16))
                  {
                    *(unsigned char *)a1 = 0;
                    std::string::basic_string[abi:ne180100]<0>(v16, "spatial_transformer_affine_kernel: Behavior for unnormalized coordinates not clear from CPU implementation, which ignored the parameter.");
                  }
                  else
                  {
                    *(unsigned char *)a1 = 1;
                    std::string::basic_string[abi:ne180100]<0>(v16, "Supported.");
                  }
                }
                else
                {
                  *(unsigned char *)a1 = 0;
                  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: Affine transform only supported with output concatenation along batch dimension.");
                }
              }
              else
              {
                *(unsigned char *)a1 = 0;
                std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: Output blob dimensions exceed ANE limit.");
              }
            }
            else
            {
              *(unsigned char *)a1 = 0;
              std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: Number of batches in coordinate tensor must match batches in input tensor, otherwise input tensor must have a batch dimension of size one.");
            }
          }
          else
          {
            *(unsigned char *)a1 = 0;
            std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: Coordinate tensor must use channels to define exactly 6 affine parameters. Batch index mode with 7 parameters not supported.");
          }
        }
        else
        {
          *(unsigned char *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: Coordinate tensor can only have multiple elements in batch and channels.");
        }
      }
      else
      {
        *(unsigned char *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: Coordinate tensor dimensions exceed ANE limit.");
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: Input tensor dimensions exceed ANE limit.");
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "spatial_transformer_affine_kernel: ANECompiler operation is explicitly for affine transforms.");
  }
}

void sub_19283F538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECAffineTransformLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 728 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        unint64_t v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 91;
    }
    while (v6 != a2);
  }
}

void sub_19283F628(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::~stir_spatial_transformer_affine_kernel(Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *)((char *)this + 304));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *)((char *)this + 304));

  Espresso::base_kernel::~base_kernel(this);
}

__n128 Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::stir_spatial_transformer_affine_kernel(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v5 = a1 + 280;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)uint64_t v5 = xmmword_192DCA5A0;
  *(unsigned char *)(v6 + 296) = 0;
  *(_DWORD *)(v6 + 300) = 0;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(unsigned char *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 4std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(unsigned char *)(v6 + 432) = 0;
  *(_DWORD *)(v6 + 472) = 1065353216;
  *(_WORD *)(v6 + 480) = 0;
  *(unsigned char *)(v6 + 482) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 204) = _D0;
  *(unsigned char *)(v6 + 492) = 0;
  *(void *)(v6 + 496) = 0;
  *(void *)(v6 + 504) = 0;
  *(unsigned char *)(v6 + 512) = v7;
  *(void *)uint64_t v6 = &unk_1EE347ED8;
  *(void *)(v6 + 304) = &unk_1EE348038;
  __n128 result = *a3;
  *(void *)(v6 + 296) = a3[1].n128_u64[0];
  *(__n128 *)uint64_t v5 = result;
  return result;
}

uint64_t ANEPerfHeuristics::get_ne_task_execution_time(ANEPerfHeuristics *this)
{
  return 0x7FFFFFFFLL;
}

uint64_t H12ANEHeuristics::get_l2_wb_bw(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1) << 8;
}

uint64_t H12ANEHeuristics::get_l2_bcast_througput(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1) << 7;
}

unint64_t H12ANEHeuristics::get_l2_system_freq(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 128), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (unint64_t)*((float *)v2 + 5);
}

unint64_t H12ANEHeuristics::get_core_clock_freq(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (unint64_t)*((float *)v2 + 5);
}

uint64_t H12ANEHeuristics::get_macs_per_ne(H12ANEHeuristics *this)
{
  return 256;
}

uint64_t H12ANEHeuristics::get_num_nes(H12ANEHeuristics *this)
{
  return 8;
}

uint64_t H12ANEHeuristics::get_l2_cache_size(H12ANEHeuristics *this)
{
  return 0x200000;
}

float H12ANEHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 48), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

uint64_t H12ANEHeuristics::get_highest_device_pstate(H12ANEHeuristics *this)
{
  return 2;
}

float H12ANEHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 2048.0;
}

float H12ANEHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  double v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 2);
  return v4 + (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2) * 0.0;
}

float H12ANEHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  double v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 2);
  return v4 + (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2) * 0.0;
}

float H12ANEHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 128), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(*((float *)v2 + 5) * 256.0) * 9.3132e-10;
}

float H12ANEHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 128), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float H12ANEHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float H12ANEHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.5;
}

float H12ANEHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.5;
}

void H12ANEHeuristics::~H12ANEHeuristics(H12ANEHeuristics *this)
{
  H12ANEHeuristics::~H12ANEHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE3207F8;
  float v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 128);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

uint64_t newpANEHeuristics::get_l2_wb_bw(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1) << 8;
}

uint64_t newpANEHeuristics::get_l2_bcast_througput(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1) << 7;
}

unint64_t newpANEHeuristics::get_l2_system_freq(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 128), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (unint64_t)*((float *)v2 + 5);
}

unint64_t newpANEHeuristics::get_core_clock_freq(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (unint64_t)*((float *)v2 + 5);
}

uint64_t newpANEHeuristics::get_l2_cache_size(newpANEHeuristics *this)
{
  return 0x200000;
}

float newpANEHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 48), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float newpANEHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  double v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 2);
  return v4 + (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2) * 0.0;
}

float newpANEHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 128), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(*((float *)v2 + 5) * 256.0) * 9.3132e-10;
}

float newpANEHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.5;
}

float newpANEHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  float v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.5;
}

void newpANEHeuristics::~newpANEHeuristics(newpANEHeuristics *this)
{
  newpANEHeuristics::~newpANEHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE321058;
  float v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 128);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

void Espresso::HXEngine::HXCompiler::__forward(uint64_t a1)
{
  void (***v26)(uint64_t *__return_ptr, void);
  uint64_t v27;
  unint64_t v28;
  long long v29;
  uint64_t v30;
  long long v31;
  std::__shared_weak_count *v32;
  long long v33;
  void (***v34)(uint64_t *__return_ptr, void);
  int *v35;
  std::runtime_error *exception;
  std::runtime_error *v37;
  std::string *v38;
  long long v39;
  std::runtime_error *v40;
  std::string *v41;
  long long v42;
  std::runtime_error *v43;
  void v44[5];
  long long v45;
  std::string v46;
  std::string v47;
  void *v48;
  long long v49;
  long long v50;
  __CFString *v51;
  uint64_t v52;
  __CFString *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __CFString *v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 80))
  {
    exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Network not built");
    goto LABEL_56;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 144);
  if (!v2)
  {
    exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HX context not setup");
LABEL_56:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = *(void *)(a1 + 256);
  float v51 = @"OperationsList";
  uint64_t v52 = v3;
  if (*(_DWORD *)(a1 + 84) && *(_DWORD *)(a1 + 60))
  {
    double v4 = *(__CVBuffer **)(a1 + 248);
    if (v4)
    {
      CVPixelBufferRelease(v4);
      *(void *)(a1 + 248) = 0;
    }
  }
  else
  {
    uint64_t v52 = *(void *)(a1 + 248);
    *(_DWORD *)(a1 + 84) = 1;
  }
  uint64_t v5 = *(void *)(a1 + 240);
  id v53 = @"ActionsList";
  std::string v54 = v5;
  uint64_t v6 = getkFigCaptureISPProcessingSessionOutputID_Vision();
  uint64_t v7 = *(void *)(a1 + 112);
  std::string v55 = v6;
  std::string v56 = v7;
  uint64_t v8 = getkFigCaptureISPProcessingSessionOutputID_Vision();
  uint64_t v9 = *(void *)(a1 + 264);
  uint64_t v57 = v8;
  uint64_t v58 = v9;
  uint64_t v10 = getkFigCaptureISPProcessingSessionOutputID_Vision();
  uint64_t v11 = *(void *)(a1 + 120);
  unint64_t v59 = v10;
  int v60 = v11;
  uint64_t v12 = getkFigCaptureISPProcessingSessionOutputID_Vision();
  uint64_t v14 = *(void *)(a1 + 272);
  uint64_t v13 = *(void *)(a1 + 280);
  uint64_t v61 = v12;
  uint64_t v62 = v13;
  uint64_t v63 = @"StatsBuffer";
  uint64_t v64 = v14;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  id v17 = *(uint64_t (**)(uint64_t, void, void, uint64_t, __CFString **, void))(v16 + 16);
  if (!v17)
  {
    *(_DWORD *)(a1 + 236) = -12782;
    uint64_t v35 = (int *)(a1 + 236);
    goto LABEL_58;
  }
  int v18 = v17(v2, 0, 0, 7, &v51, 0);
  *(_DWORD *)(a1 + 236) = v18;
  if (v18)
  {
    uint64_t v35 = (int *)(a1 + 236);
LABEL_58:
    std::vector<std::string>::pointer v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v46, *v35);
    int v38 = std::string::insert(&v46, 0, "FigCaptureISPProcessingSessionProcessBuffer Error: ");
    float v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v37, &v47);
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(void *)(a1 + 184) != *(void *)(a1 + 176))
    {
      uint64_t v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v43, "hx async mode not compatible with context transfer");
      __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_15;
  }
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t))(v20 + 24);
  if (!v21)
  {
    int v22 = -12782;
LABEL_60:
    uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v46, v22);
    id v41 = std::string::insert(&v46, 0, "FigCaptureISPProcessingSessionCompleteBuffers Error : ");
    uint64_t v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v40, &v47);
    __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v22 = v21(v2);
  if (v22) {
    goto LABEL_60;
  }
  uint64_t v23 = *(void *)(a1 + 176);
  if (*(void *)(a1 + 184) != v23)
  {
    uint64_t v24 = *(void *)(*(void *)v23 + 64);
    long long v26 = *(void (****)(uint64_t *__return_ptr, void))(v24 + 8);
    uint64_t v25 = *(std::__shared_weak_count **)(v24 + 16);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = *(void *)(*(void *)(a1 + 200) + 80);
    if (*(void *)(*(void *)(a1 + 200) + 88) != v27)
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *(_OWORD *)(v27 + 16 * v28);
        int32x4_t v45 = v29;
        if (*((void *)&v29 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::sync_copy_to_host(&v46, &v45);
        if (*((void *)&v45 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v45 + 1));
        }
        long long v30 = *(void *)(*(void *)(a1 + 200) + 104);
        uint64_t v31 = *(_OWORD *)(v30 + 16 * v28);
        uint64_t v32 = *(std::__shared_weak_count **)(v30 + 16 * v28 + 8);
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v33 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
        if (v46.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v46.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        unsigned int v34 = *(void (****)(uint64_t *__return_ptr, void))(v31 + 72);
        v47.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
        v47.__r_.__value_.__l.__size_ = 3321888768;
        v47.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_8110;
        int v48 = &__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
        uint64_t v49 = v31;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = v33;
        if (*((void *)&v33 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::abstract_context::compute_batch_sync(v34, &v47);
        if (*((void *)&v50 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v50 + 1));
        }
        if (*((void *)&v49 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v49 + 1));
        }
        if (*((void *)&v33 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v33 + 1));
        }
        if (v32) {
          nitro::nitro_function::nitro_function(v32);
        }
        if (v46.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v46.__r_.__value_.__l.__size_);
        }
        ++v28;
        uint64_t v27 = *(void *)(*(void *)(a1 + 200) + 80);
      }
      while (v28 < (*(void *)(*(void *)(a1 + 200) + 88) - v27) >> 4);
    }
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3221225472;
    v44[2] = ___ZN8Espresso8HXEngine10HXCompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke;
    v44[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v44[4] = a1;
    Espresso::abstract_context::compute_batch_sync(v26, v44);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
  }
LABEL_15:
  if (*(int *)(a1 + 56) >= 1) {
    puts("[HXCompiler __forward]");
  }
}

void sub_19284051C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8Espresso8HXEngine10HXCompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(v2 + 176);
  if (*(void *)(v2 + 184) != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      *(void *)(*(void *)a2 + 48) = v6;
      __n128 result = (*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(v3 + v5) + 8))(*(void *)(v3 + v5), a2, v6++);
      uint64_t v3 = *(void *)(v2 + 176);
      v5 += 16;
    }
    while (v6 < (*(void *)(v2 + 184) - v3) >> 4);
  }
  return result;
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_8110(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, a1 + 48);
}

uint64_t initValkFigCaptureISPProcessingSessionOutputID_Vision(void)
{
  if (CMCaptureLibrary(void)::sOnce != -1) {
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_8116);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionOutputID_Vision");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkFigCaptureISPProcessingSessionOutputID_Visiostd::vector<std::string>::pointer n = result;
  }
  else
  {
    uint64_t result = constantValkFigCaptureISPProcessingSessionOutputID_Vision;
  }
  getkFigCaptureISPProcessingSessionOutputID_Visiostd::vector<std::string>::pointer n = kFigCaptureISPProcessingSessionOutputID_VisionFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionOutputID_VisionFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionOutputID_Vision;
}

void *___ZL16CMCaptureLibraryv_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CMCapture.framework/CMCapture", 2);
  CMCaptureLibrary(void)::sLib = (uint64_t)result;
  return result;
}

void Espresso::HXEngine::HXCompiler::build(Espresso::HXEngine::HXCompiler *this, uint64_t a2, int a3, int a4)
{
  if (*((_DWORD *)this + 20)) {
    return;
  }
  LODWORD(v4) = a4;
  LODWORD(i) = a3;
  if (*((int *)this + 14) >= 1) {
    printf("[HXCompiler::build] %d %d\n", a3, a4);
  }
  Espresso::HXEngine::HXCompiler::reset(this);
  if ((v4 & 0x80000000) != 0) {
    uint64_t v4 = (*(void *)(*((void *)this + 6) + 40) - *(void *)(*((void *)this + 6) + 32)) >> 4;
  }
  *((_DWORD *)this + 23) = i;
  *((_DWORD *)this + 24) = v4;
  *((_DWORD *)this + 25) = 0;
  uint64_t v213 = a2;
  if (*(void *)a2)
  {
    if (v13 && (uint64_t v14 = *(void *)(a2 + 8)) != 0)
    {
      uint64_t v220 = *(std::__shared_weak_count **)(a2 + 8);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v220 = 0;
    }
  }
  else
  {
    uint64_t v220 = 0;
    uint64_t v13 = 0;
  }
  v13[16] = this;
  if ((int)v4 > (int)i)
  {
    uint64_t v15 = (void *)((char *)this + 176);
    for (uint64_t i = (int)i; v4 != i; ++i)
    {
      *((_DWORD *)this + 22) = i;
      if (*((void *)this + 27))
      {
        uint64_t v16 = *(void *)(*((void *)this + 6) + 32);
        id v17 = (_OWORD *)*((void *)this + 23);
        unint64_t v18 = *((void *)this + 24);
        if ((unint64_t)v17 >= v18)
        {
          uint64_t v22 = ((uint64_t)v17 - *v15) >> 4;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v18 - *v15;
          if (v24 >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          uint64_t v225 = (char *)this + 192;
          long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v25);
          uint64_t v27 = &v26[16 * v22];
          v223.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
          v223.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
          float32x4_t v224 = &v26[16 * v28];
          long long v29 = *(_OWORD *)(v16 + 16 * i);
          *(_OWORD *)uint64_t v27 = v29;
          if (*((void *)&v29 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v223.__r_.__value_.__r.__words[2] = (std::string::size_type)(v27 + 16);
          std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer((uint64_t *)this + 22, &v223);
          uint64_t v20 = (_OWORD *)*((void *)this + 23);
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v223);
        }
        else
        {
          long long v19 = *(_OWORD *)(v16 + 16 * i);
          _OWORD *v17 = v19;
          if (*((void *)&v19 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v20 = v17 + 1;
          *((void *)this + 23) = v17 + 1;
        }
        *((void *)this + 23) = v20;
      }
      else
      {
        int v21 = *((_DWORD *)this + 18);
        if (v21 < 1)
        {
          int v21 = 1;
          do
          {
LABEL_33:
            uint64_t v30 = *(void *)(*(void *)(*((void *)this + 6) + 32) + 16 * i);
            v223.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
            v223.__r_.__value_.__l.__size_ = (std::string::size_type)v220;
            if (v220) {
              atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v30 + 8))(v30, &v223, i);
            if (v223.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v223.__r_.__value_.__l.__size_);
            }
            --v21;
          }
          while (v21);
          continue;
        }
        if (*((_DWORD *)this + 17) == i) {
          goto LABEL_33;
        }
      }
    }
  }
  uint64_t v32 = *((void *)this + 16);
  uint64_t v31 = *((void *)this + 17);
  if (v31 != v32)
  {
    uint64_t v33 = 0;
    unint64_t v214 = *(int *)(v31 - 132);
    do
    {
      unint64_t v34 = *(int *)(v32 + 136 * v33 + 4);
      uint64_t v35 = *((void *)this + 6);
      uint64_t v36 = (uint64_t *)(*(void *)(v35 + 32) + 16 * v34);
      uint64_t v37 = *v36;
      int v38 = (std::__shared_weak_count *)v36[1];
      if (v38)
      {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v35 = *((void *)this + 6);
      }
      v223.__r_.__value_.__r.__words[0] = v34;
      float v39 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35 + 96, v34, &v223)[3];
      uint64_t v40 = *((void *)this + 6) + 96;
      v227.__r_.__value_.__r.__words[0] = v214;
      uint64_t v42 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v40, v214, &v227)[3];
      uint64_t v43 = v39[23];
      size_t v44 = *((void *)v39 + 1);
      if ((v43 & 0x80u) == 0) {
        uint64_t v45 = v39[23];
      }
      else {
        uint64_t v45 = *((void *)v39 + 1);
      }
      uint64_t v46 = v42[23];
      int v47 = (char)v46;
      if ((v46 & 0x80u) != 0) {
        uint64_t v46 = *((void *)v42 + 1);
      }
      float32x4_t v215 = v38;
      if (v45 == v46)
      {
        if (v47 >= 0) {
          id v41 = v42;
        }
        else {
          id v41 = *(unsigned __int8 **)v42;
        }
        if ((v43 & 0x80) != 0)
        {
          BOOL v56 = memcmp(*(const void **)v39, v41, v44) == 0;
        }
        else if (v39[23])
        {
          uint64_t v48 = v43 - 1;
          do
          {
            int v50 = *v39++;
            int v49 = v50;
            int v52 = *v41++;
            int v51 = v52;
            BOOL v54 = v48-- != 0;
            BOOL v55 = v49 == v51;
            BOOL v56 = v49 == v51;
          }
          while (v55 && v54);
        }
        else
        {
          BOOL v56 = 1;
        }
      }
      else
      {
        BOOL v56 = 0;
      }
      int v57 = *((_DWORD *)this + 18);
      BOOL v58 = v57 < 1 && v33 == 0;
      BOOL v59 = v57 < 1 && v56;
      if (*((int *)this + 14) > 1)
      {
        int v60 = (const char *)(v37 + 16);
        if (*(char *)(v37 + 39) < 0) {
          int v60 = *(const char **)v60;
        }
        printf("\n[HXCompiler buffer mgmt] iop=%d ilayer=%d layer=%s in=%d out=%d\n", v33, v34, v60, v58, v59);
      }
      uint64_t v216 = v33;
      uint64_t v61 = v32 + 136 * v33;
      uint64_t v62 = *(void **)(v61 + 80);
      uint64_t v63 = (void *)(v61 + 88);
      if (v62 != (void *)(v61 + 88))
      {
        uint64_t v64 = v32 + 136 * v33;
        uint64_t v65 = (CVPixelBufferRef *)(v64 + 120);
        long long v66 = (CVPixelBufferRef *)(v64 + 104);
        float32x4_t v217 = (std::__shared_weak_count **)(v64 + 128);
        float32x4_t v219 = (std::__shared_weak_count **)(v64 + 112);
        do
        {
          int v67 = *((_DWORD *)v62 + 7);
          uint64_t v68 = (*((_DWORD *)v62 + 10) * *((_DWORD *)v62 + 13));
          if ((v67 & 0xFFFFFFFD) != 0)
          {
            if ((v67 - 12) > 2)
            {
              if ((v67 & 0xFFFFFFFE) != 4)
              {
                exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::to_string(&v227, v67);
                long long v180 = std::string::insert(&v227, 0, "Unknown buffer code emitted ");
                long long v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
                v223.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v181;
                v180->__r_.__value_.__l.__size_ = 0;
                v180->__r_.__value_.__r.__words[2] = 0;
                v180->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &v223);
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              int v69 = *((_DWORD *)this + 26);
              *((_DWORD *)v62 + 12) += v69;
              *((_DWORD *)this + 26) = v69 + v68;
              if (*((int *)this + 14) >= 2)
              {
                BOOL v200 = v68;
                printf("\t[HXCompiler] weight: offs=%d size=%d\n");
              }
            }
            else if (v59)
            {
              Espresso::HXEngine::blob_container::force_allocate(*v65, (uint64_t)v41, v44, v8, v9, v10, v11, v12);
              *((void *)this + 15) = *((void *)*v65 + 21);
              if (*((int *)this + 14) >= 2)
              {
                BOOL v200 = v68;
                printf("\t[HXCompiler] output: offs=%d size=%d\n");
              }
            }
            else
            {
              *((_DWORD *)v62 + 8) = 1;
              uint64_t v72 = *v217;
              v221[0] = (unint64_t)*v65;
              v221[1] = (unint64_t)v72;
              if (v72) {
                atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v73 = Espresso::HXEngine::HXCompiler::build(std::shared_ptr<Espresso::abstract_batch> const&,int,int)::$_0::operator()((uint64_t)this, v221);
              if (v72) {
                nitro::nitro_function::nitro_function(v72);
              }
              *((_DWORD *)v62 + 12) += v73;
              if (*((int *)this + 14) >= 2)
              {
                BOOL v200 = v73;
                printf("\t[HXCompiler] intermediate output: offs=%d (%d) size=%d\n");
              }
            }
          }
          else if (v58)
          {
            Espresso::HXEngine::blob_container::force_allocate(*v66, (uint64_t)v41, v44, v8, v9, v10, v11, v12);
            *((void *)this + 14) = *((void *)*v66 + 21);
            if (*((int *)this + 14) >= 2)
            {
              BOOL v200 = v68;
              printf("\t[HXCompiler] input: offs=%d size=%d\n");
            }
          }
          else
          {
            *((_DWORD *)v62 + 8) = 1;
            long long v70 = *v219;
            v222[0] = (unint64_t)*v66;
            v222[1] = (unint64_t)v70;
            if (v70) {
              atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v71 = Espresso::HXEngine::HXCompiler::build(std::shared_ptr<Espresso::abstract_batch> const&,int,int)::$_0::operator()((uint64_t)this, v222);
            if (v70) {
              nitro::nitro_function::nitro_function(v70);
            }
            *((_DWORD *)v62 + 12) += v71;
            if (*((int *)this + 14) >= 2)
            {
              BOOL v200 = v71;
              printf("\t[HXCompiler] intermediate input: offs=%d (%d) size=%d\n");
            }
          }
          uint64_t v74 = (void *)v62[1];
          if (v74)
          {
            do
            {
              unsigned int v75 = v74;
              uint64_t v74 = (void *)*v74;
            }
            while (v74);
          }
          else
          {
            do
            {
              unsigned int v75 = (void *)v62[2];
              BOOL v55 = *v75 == (void)v62;
              uint64_t v62 = v75;
            }
            while (!v55);
          }
          uint64_t v62 = v75;
        }
        while (v75 != v63);
      }
      if (v215) {
        nitro::nitro_function::nitro_function(v215);
      }
      uint64_t v33 = v216 + 1;
      uint64_t v32 = *((void *)this + 16);
    }
    while (0xF0F0F0F0F0F0F0F1 * ((*((void *)this + 17) - v32) >> 3) > v216 + 1);
  }
  if (*((int *)this + 18) > 0)
  {
    *((void *)this + 15) = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)1, 8u, 1, v8, v9, v10, v11, v12, v192[0], v192[1], v200, HIDWORD(v200));
    *((void *)this + 14) = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)1, 8u, 1, v76, v77, v78, v79, v80, v193, v199, v201, v207);
  }
  int v81 = *((_DWORD *)this + 14);
  if (v81 > 1)
  {
    uint64_t v82 = *((void *)this + 16);
    if (*((void *)this + 17) == v82)
    {
LABEL_121:
      printf("[HXCompiler size (MB)] n_buffs=%d intermediate=%.2f weights=%.2f total=%.2f\n", *((void *)this + 21), (float)((float)*((unsigned int *)this + 25) * 0.00000095367), (float)((float)*((unsigned int *)this + 26) * 0.00000095367), (float)((float)(*((_DWORD *)this + 26) + *((_DWORD *)this + 25)) * 0.00000095367));
      goto LABEL_122;
    }
    uint64_t v83 = 0;
    unint64_t v84 = 0;
    do
    {
      uint64_t v85 = v82 + v83;
      char v86 = *(std::__shared_weak_count **)(*(void *)(*((void *)this + 6) + 32) + 16 * *(int *)(v85 + 4) + 8);
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v87 = (uint64_t **)(v85 + 80);
      LODWORD(v223.__r_.__value_.__l.__data_) = 0;
      int v88 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(v85 + 80), 0, &v223)+ 12);
      LODWORD(v223.__r_.__value_.__l.__data_) = 12;
      int v89 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v87, 12, &v223)+ 12);
      LODWORD(v223.__r_.__value_.__l.__data_) = 0;
      int v90 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v87, 0, &v223)+ 10);
      LODWORD(v227.__r_.__value_.__l.__data_) = 0;
      int v91 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v87, 0, &v227)+ 13);
      LODWORD(v223.__r_.__value_.__l.__data_) = 12;
      int v92 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v87, 12, &v223)+ 10);
      LODWORD(v227.__r_.__value_.__l.__data_) = 12;
      uint64_t v93 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v87, 12, &v227);
      printf("[%d, %d, %d, %d, %d],\n", v84, v88, v91 * v90, v89, *((_DWORD *)v93 + 13) * v92);
      if (v86) {
        nitro::nitro_function::nitro_function(v86);
      }
      ++v84;
      uint64_t v82 = *((void *)this + 16);
      v83 += 136;
    }
    while (0xF0F0F0F0F0F0F0F1 * ((*((void *)this + 17) - v82) >> 3) > v84);
    int v81 = *((_DWORD *)this + 14);
  }
  if (v81 >= 1) {
    goto LABEL_121;
  }
LABEL_122:
  uint64_t v94 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)1, 8u, 1, v8, v9, v10, v11, v12, v192[0], v192[1], v200, HIDWORD(v200));
  *((void *)this + 32) = v94;
  if (!v94)
  {
    std::string::basic_string[abi:ne180100]<0>(&v223, "error");
    std::string::basic_string[abi:ne180100]<0>(&v227, "Could not allocate operations buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v223, (uint64_t)&v227);
  }
  CVPixelBufferLockBaseAddress(v94, 0);
  *(_DWORD *)CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 32)) = 0;
  CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 32), 0);
  uint64_t v100 = *((void *)this + 16);
  unint64_t v101 = 0xF0F0F0F0F0F0F0F1 * ((*((void *)this + 17) - v100) >> 3);
  unsigned int v102 = -1010580540 * ((*((void *)this + 17) - v100) >> 3) + 4;
  unsigned int v103 = v102;
  if (v101)
  {
    uint64_t v104 = -252645135 * ((*((void *)this + 17) - v100) >> 3);
    uint64_t v105 = (_DWORD *)(v100 + 16);
    unsigned int v103 = v102;
    do
    {
      v103 += *v105 - *(v105 - 2) + 16;
      v105 += 34;
      --v104;
    }
    while (v104);
  }
  float v106 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)((v103 >> 4) + 1), 8u, 1, v95, v96, v97, v98, v99, v194[0], v194[1], v202, v208);
  *((void *)this + 31) = v106;
  if (!v106)
  {
    std::string::basic_string[abi:ne180100]<0>(&v223, "error");
    std::string::basic_string[abi:ne180100]<0>(&v227, "Could not allocate operations buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v223, (uint64_t)&v227);
  }
  CVPixelBufferLockBaseAddress(v106, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 31));
  if (*((int *)this + 14) >= 2) {
    printf("[HXCompiler::build_operations] n_ops=%d\n", v101);
  }
  _DWORD *BaseAddress = v101;
  if (v101)
  {
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = 0;
    uint64_t v111 = 136 * v101;
    int v112 = BaseAddress + 1;
    do
    {
      if (v109)
      {
        unsigned int v113 = *(v112 - 1) + v110;
        *int v112 = v113;
      }
      else
      {
        BaseAddress[1] = v102;
        unsigned int v113 = v102;
      }
      unsigned int v114 = (_DWORD *)((char *)BaseAddress + v113);
      uint64_t v115 = *((void *)this + 16) + v109;
      int v116 = *(_DWORD *)v115;
      v114[1] = *(_DWORD *)v115;
      uint64_t v117 = *(const void **)(v115 + 8);
      unsigned int v118 = *(void *)(v115 + 16) - v117;
      v114[3] = v118;
      if (*((_DWORD *)this + 15)) {
        int v119 = v108;
      }
      else {
        int v119 = -1;
      }
      *unsigned int v114 = v119;
      if (v118) {
        memcpy(v114 + 4, v117, v118);
      }
      if (v116 != 4)
      {
        uint64_t v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v226, v114[1]);
        char v183 = std::string::insert(&v226, 0, "Id ");
        long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
        v227.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v184;
        v183->__r_.__value_.__l.__size_ = 0;
        v183->__r_.__value_.__r.__words[2] = 0;
        v183->__r_.__value_.__r.__words[0] = 0;
        unint64_t v185 = std::string::append(&v227, " Not supported");
        long long v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
        v223.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v186;
        v185->__r_.__value_.__l.__size_ = 0;
        v185->__r_.__value_.__r.__words[2] = 0;
        v185->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v182, &v223);
        __cxa_throw(v182, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*((int *)this + 14) >= 3)
      {
        printf("************************Operation %d ***************************\n", v108);
        printf("primitiveId = %d\n", *(_DWORD *)(*((void *)this + 16) + v109));
        printf("sizeOfConfig = %d\n", v114[3]);
        printf("offset = %d\n", *v112);
        puts("*****************************************************************");
      }
      unsigned int v110 = v118 + 16;
      v109 += 136;
      ++v108;
      ++v112;
    }
    while (v111 != v109);
  }
  CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 31), 0);
  unint64_t v120 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 3);
  CVPixelBufferRef v126 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)(((-1263225592* ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 3)) >> 4)+ 1), 8u, 1, v121, v122, v123, v124, v125, v195[0], v195[1], v203, v209);
  *((void *)this + 30) = v126;
  if (!v126)
  {
    std::string::basic_string[abi:ne180100]<0>(&v223, "error");
    std::string::basic_string[abi:ne180100]<0>(&v227, "Could not allocate actions buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v223, (uint64_t)&v227);
  }
  CVPixelBufferRef v132 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)0x41, 8u, 1, v127, v128, v129, v130, v131, v196[0], v196[1], v204, v210);
  *((void *)this + 34) = v132;
  if (!v132)
  {
    std::string::basic_string[abi:ne180100]<0>(&v223, "error");
    std::string::basic_string[abi:ne180100]<0>(&v227, "Could not allocate metadata buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v223, (uint64_t)&v227);
  }
  CVPixelBufferRef v138 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)((*((_DWORD *)this + 25) >> 4) + 1), 8u, 1, v133, v134, v135, v136, v137, v197[0], v197[1], v205, v211);
  *((void *)this + 33) = v138;
  if (!v138)
  {
    std::string::basic_string[abi:ne180100]<0>(&v223, "error");
    std::string::basic_string[abi:ne180100]<0>(&v227, "Could not allocate intemediate buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v223, (uint64_t)&v227);
  }
  std::vector<std::string>::pointer v144 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)((*((_DWORD *)this + 26) >> 4) + 1), 8u, 1, v139, v140, v141, v142, v143, v198[0], v198[1], v206, v212);
  *((void *)this + 35) = v144;
  CVPixelBufferLockBaseAddress(v144, 0);
  uint64_t v145 = (char *)CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 35));
  int v218 = v120;
  uint64_t v146 = *((void *)this + 16);
  if (*((void *)this + 17) != v146)
  {
    int v147 = v145;
    unint64_t v148 = 0;
    uint64_t v149 = 40;
    do
    {
      if (*(void *)(v146 + v149) != *(void *)(v146 + v149 - 8))
      {
        LODWORD(v223.__r_.__value_.__l.__data_) = 4;
        std::vector<std::string> v150 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(v146 + v149 + 40), 4, &v223);
        uint64_t v151 = *((unsigned int *)v150 + 12);
        if (*((int *)this + 14) >= 2) {
          printf("[HXCompiler] copying kernel0 %d %d\n", *((_DWORD *)v150 + 12), *(_DWORD *)(*((void *)this + 16) + v149) - *(_DWORD *)(*((void *)this + 16) + v149 - 8));
        }
        memcpy(&v147[v151], *(const void **)(*((void *)this + 16) + v149 - 8), *(void *)(*((void *)this + 16) + v149) - *(void *)(*((void *)this + 16) + v149 - 8));
        uint64_t v146 = *((void *)this + 16);
      }
      if (*(void *)(v146 + v149 + 24) != *(void *)(v146 + v149 + 16))
      {
        LODWORD(v223.__r_.__value_.__l.__data_) = 5;
        char v152 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(v146 + v149 + 40), 5, &v223);
        uint64_t v153 = *((unsigned int *)v152 + 12);
        if (*((int *)this + 14) >= 2) {
          printf("[HXCompiler] copying kernel1 %d %d\n", *((_DWORD *)v152 + 12), *(_DWORD *)(*((void *)this + 16) + v149) - *(_DWORD *)(*((void *)this + 16) + v149 - 8));
        }
        memcpy(&v147[v153], *(const void **)(*((void *)this + 16) + v149 + 16), *(void *)(*((void *)this + 16) + v149 + 24) - *(void *)(*((void *)this + 16) + v149 + 16));
        uint64_t v146 = *((void *)this + 16);
      }
      ++v148;
      v149 += 136;
    }
    while (0xF0F0F0F0F0F0F0F1 * ((*((void *)this + 17) - v146) >> 3) > v148);
  }
  CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 35), 0);
  CVPixelBufferLockBaseAddress(*((CVPixelBufferRef *)this + 30), 0);
  std::vector<std::string>::pointer v154 = CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 30));
  *std::vector<std::string>::pointer v154 = v218;
  if (v218)
  {
    uint64_t v155 = 0;
    int v156 = 0;
    do
    {
      uint64_t v157 = *((void *)this + 16);
      if (v155)
      {
        uint64_t v158 = &v154[v155];
        unsigned int v159 = *v158 + v156;
        v158[1] = v159;
      }
      else
      {
        v154[1] = 4 * v218 + 4;
        unsigned int v159 = v154[1];
      }
      uint64_t v160 = (int *)(v157 + 136 * v155);
      char v161 = (char *)v154 + v159;
      *((void *)v161 + 18) = 0;
      *((_OWORD *)v161 + 7) = 0u;
      *((_OWORD *)v161 + 8) = 0u;
      *((_OWORD *)v161 + 5) = 0u;
      *((_OWORD *)v161 + 6) = 0u;
      *((_OWORD *)v161 + 3) = 0u;
      *((_OWORD *)v161 + 4) = 0u;
      *((_OWORD *)v161 + 1) = 0u;
      *((_OWORD *)v161 + 2) = 0u;
      *(_OWORD *)char v161 = 0u;
      if (*v160 != 4)
      {
        v187 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v226, *v160);
        uint64_t v188 = std::string::insert(&v226, 0, "Id ");
        long long v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
        v227.__r_.__value_.__r.__words[2] = v188->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v189;
        v188->__r_.__value_.__l.__size_ = 0;
        v188->__r_.__value_.__r.__words[2] = 0;
        v188->__r_.__value_.__r.__words[0] = 0;
        uint64_t v190 = std::string::append(&v227, " Not supported");
        long long v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
        v223.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v191;
        v190->__r_.__value_.__l.__size_ = 0;
        v190->__r_.__value_.__r.__words[2] = 0;
        v190->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v187, &v223);
        __cxa_throw(v187, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      *((_DWORD *)v161 + 36) = 15;
      for (uint64_t j = 152; j != 1412; j += 84)
        *(_DWORD *)&v161[j] |= 0x7FFFFFFFu;
      *((_DWORD *)v161 + 37) = 0;
      *(_DWORD *)char v161 = -1;
      *((_DWORD *)v161 + 1) = v155 & 0x7FFFFFFF;
      *((_DWORD *)v161 + 1) = v155 & 0x7FFFFFFF | ((*((_DWORD *)this + 15) == 0) << 31);
      *((_DWORD *)v161 + 3) = 0;
      if (*((int *)this + 14) > 1) {
        printf("[HXCompiler action] #=%d offset=%d, n_buffers=%d\n", v155, v154[v155 + 1], *(void *)(v157 + 136 * v155 + 96));
      }
      uint64_t v163 = v157 + 136 * v155;
      id v164 = *(void **)(v163 + 80);
      uint64_t v165 = (void *)(v163 + 88);
      if (v164 != (void *)(v163 + 88))
      {
        do
        {
          int v166 = *((_DWORD *)v164 + 8);
          int v167 = *((_DWORD *)v164 + 7);
          int v168 = *((_DWORD *)v164 + 9);
          int v169 = *((_DWORD *)v164 + 10);
          int v170 = *((_DWORD *)v164 + 12);
          int v171 = *((_DWORD *)v164 + 13);
          int v172 = *((_DWORD *)v164 + 14);
          float v173 = &v161[84 * v167];
          unsigned int v174 = *((_DWORD *)v173 + 38) & 0x80000000 | v166 & 0x7FFFFFFF;
          *((_WORD *)v173 + 83) = v172;
          *((_WORD *)v173 + 81) = v169;
          *((_WORD *)v173 + 82) = v168;
          *((_WORD *)v173 + 80) = v171;
          *((_DWORD *)v173 + 38) = v174;
          *((_DWORD *)v173 + 39) = v170;
          *((_DWORD *)v173 + 42) = 0;
          if (*((int *)this + 14) >= 2) {
            printf("\tdst=%d buff_id=%d format=%d h=%d w=%d s=%d o=%d\n", v167, v166 & 0x7FFFFFFF, (unsigned __int16)v172, (unsigned __int16)v169, (unsigned __int16)v168, (unsigned __int16)v171, v170);
          }
          unint64_t v175 = (void *)v164[1];
          if (v175)
          {
            do
            {
              size_t v176 = v175;
              unint64_t v175 = (void *)*v175;
            }
            while (v175);
          }
          else
          {
            do
            {
              size_t v176 = (void *)v164[2];
              BOOL v55 = *v176 == (void)v164;
              id v164 = v176;
            }
            while (!v55);
          }
          id v164 = v176;
        }
        while (v176 != v165);
      }
      ++v155;
      int v156 = 1412;
    }
    while (v155 != v218);
  }
  CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 30), 0);
  *((void *)this + 10) = 1;
  uint64_t v177 = *((void *)this + 16);
  for (uint64_t k = *((void *)this + 17);
        k != v177;
        std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100](k))
  {
    k -= 136;
  }
  *((void *)this + 17) = v177;
  (*(void (**)(Espresso::HXEngine::HXCompiler *, uint64_t))(*(void *)this + 24))(this, v213);
  if (v220) {
    nitro::nitro_function::nitro_function(v220);
  }
}

void sub_192841D10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  __cxa_free_exception(v32);
  if (a32 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x192841D80);
}

double Espresso::HXEngine::HXCompiler::reset(Espresso::HXEngine::HXCompiler *this)
{
  long long v2 = 0uLL;
  uint64_t v22 = 0;
  long long v24 = 0u;
  long long v21 = 0u;
  unint64_t v23 = &v24;
  long long v25 = 0u;
  memset(v26, 0, sizeof(v26));
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  uint64_t v3 = *((void *)this + 16);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 17);
    uint64_t v5 = (void *)*((void *)this + 16);
    if (v4 != v3)
    {
      do
      {
        v4 -= 136;
        std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100](v4);
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 16);
    }
    *((void *)this + 17) = v3;
    operator delete(v5);
    long long v2 = v21;
    uint64_t v6 = v22;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v8 = (char *)this + 160;
  uint64_t v7 = (void *)*((void *)this + 20);
  *((_OWORD *)this + 8) = v2;
  *((void *)this + 18) = v6;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(v7);
  uint64_t v9 = v24;
  *((void *)this + 19) = v23;
  *((void *)this + 20) = v9;
  uint64_t v10 = *((void *)&v24 + 1);
  *((void *)this + 21) = *((void *)&v24 + 1);
  if (v10)
  {
    *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v8;
    unint64_t v23 = &v24;
    long long v24 = 0uLL;
  }
  else
  {
    *((void *)this + 19) = v8;
  }
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)this + 22);
  *((_OWORD *)this + 11) = v25;
  *((void *)this + 24) = *(void *)v26;
  memset(v26, 0, 24);
  long long v25 = 0uLL;
  BOOL v11 = (std::__shared_weak_count *)*((void *)this + 26);
  *(_OWORD *)((char *)this + 200) = *(_OWORD *)&v26[8];
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  long long v12 = *(_OWORD *)&v26[24];
  *(void *)&v26[24] = 0;
  *(void *)&v26[32] = 0;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 28);
  *(_OWORD *)((char *)this + 2std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v12;
  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
    if (*(void *)&v26[32]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v26[32]);
    }
  }
  if (*(void *)&v26[16]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v26[16]);
  }
  uint64_t v27 = (void **)&v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v27);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy((void *)v24);
  uint64_t v27 = (void **)&v21;
  std::vector<Espresso::HXEngine::HXCompiler::op_t>::__destroy_vector::operator()[abi:ne180100](&v27);
  uint64_t v14 = (__CVBuffer *)*((void *)this + 30);
  if (v14) {
    CVPixelBufferRelease(v14);
  }
  uint64_t v15 = (__CVBuffer *)*((void *)this + 31);
  if (v15) {
    CVPixelBufferRelease(v15);
  }
  uint64_t v16 = (__CVBuffer *)*((void *)this + 32);
  if (v16) {
    CVPixelBufferRelease(v16);
  }
  id v17 = (__CVBuffer *)*((void *)this + 33);
  if (v17) {
    CVPixelBufferRelease(v17);
  }
  unint64_t v18 = (__CVBuffer *)*((void *)this + 34);
  if (v18) {
    CVPixelBufferRelease(v18);
  }
  long long v19 = (__CVBuffer *)*((void *)this + 35);
  if (v19) {
    CVPixelBufferRelease(v19);
  }
  double result = 0.0;
  *((_OWORD *)this + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  return result;
}

uint64_t Espresso::HXEngine::HXCompiler::build(std::shared_ptr<Espresso::abstract_batch> const&,int,int)::$_0::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  unint64_t v6 = *(void *)(*a2 + 192);
  unint64_t v18 = v4;
  long long v19 = v5;
  unint64_t v7 = v4;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v7 = *a2;
  }
  unsigned int v8 = *(const void **)(v7 + 176);
  if (v8)
  {
    unint64_t v4 = (unint64_t)v9;
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v7 + 184);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v18 = (unint64_t)v9;
    long long v19 = v10;
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
    unint64_t v11 = v6;
    if (*(int *)(a1 + 56) >= 2) {
      printf("\t\t*[HXCompiler] aliasing %d -> %d; (%lld -> %lld)\n", v6, *(void *)(v4 + 192), *a2, v4);
    }
    unint64_t v6 = *(void *)(v4 + 192);
    if (v6 < v11)
    {
      exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected size");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    if (*(int *)(a1 + 56) >= 2) {
      printf("\t\t*[HXCompiler] non-aliasing %d -> %d; (%lld -> %lld)\n", v6, *(void *)(v4 + 192), v7, v4);
    }
    uint64_t v10 = v5;
  }
  for (uint64_t i = *(void **)(a1 + 160); i; uint64_t i = (void *)*i)
  {
    unint64_t v13 = i[4];
    if (v4 >= v13)
    {
      if (v13 >= v4) {
        goto LABEL_24;
      }
      ++i;
    }
  }
  if (*(int *)(a1 + 56) >= 2) {
    printf("\t[HXCompiler alloc intermediate] offs=%d size=%d\n", *(_DWORD *)(a1 + 100), v6);
  }
  int v14 = *(_DWORD *)(a1 + 100);
  *((_DWORD *)std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::HXEngine::blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::HXEngine::blob_container> const&>,std::tuple<>>((uint64_t **)(a1 + 152), v4, &v18)+ 12) = v14;
  *(_DWORD *)(a1 + 100) += v6;
LABEL_24:
  uint64_t v15 = *((unsigned int *)std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::HXEngine::blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::HXEngine::blob_container> const&>,std::tuple<>>((uint64_t **)(a1 + 152), v4, &v18)+ 12);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  return v15;
}

void sub_192842188(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

CVPixelBufferRef Espresso::HXEngine::H10ISPCreateCVBuffer(Espresso::HXEngine *this, unsigned int a2, int a3, unsigned int a4, unsigned int a5, int a6, BOOL a7, unsigned int a8, unsigned int a9, unsigned int a10, BOOL a11, unsigned int a12)
{
  unsigned int v29 = a2;
  unsigned int valuePtr = this;
  CVPixelBufferRef pixelBufferOut = 0;
  if (a3 == 10) {
    OSType v12 = 1278226488;
  }
  else {
    OSType v12 = 2037741171;
  }
  OSType pixelFormatType = v12;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CVPixelBufferRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (result)
  {
    uint64_t v15 = result;
    CFNumberRef v16 = CFNumberCreate(v13, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E4F24E10], v16);
    CFRelease(v16);
    int v26 = 64;
    CFNumberRef v17 = CFNumberCreate(v13, kCFNumberIntType, &v26);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E4F24C98], v17);
    CFRelease(v17);
    CFNumberRef v18 = CFNumberCreate(v13, kCFNumberIntType, &v29);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E4F24D08], v18);
    CFRelease(v18);
    CFNumberRef v19 = CFNumberCreate(v13, kCFNumberIntType, &pixelFormatType);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E4F24D70], v19);
    CFRelease(v19);
    int v25 = 64;
    CFNumberRef v20 = CFNumberCreate(v13, kCFNumberIntType, &v25);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E4F24D78], v20);
    CFRelease(v20);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v22 = Mutable;
      int v24 = 0;
      CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, &v24);
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F2EFE8], v23);
      CFRelease(v23);
      CFDictionaryAddValue(v15, (const void *)*MEMORY[0x1E4F24D20], v22);
      CFRelease(v22);
      CVPixelBufferCreate(v13, valuePtr, v29, pixelFormatType, v15, &pixelBufferOut);
      CFRelease(v15);
      return pixelBufferOut;
    }
    else
    {
      CFRelease(v15);
      return 0;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 7) = *a3;
    void v7[5] = 0;
    v7[6] = 0;
    v7[4] = 0;
    *((_DWORD *)v7 + 14) = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    id *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100](uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 112);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  std::__tree<int>::destroy(*(void **)(a1 + 88));
  unint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(void *)(a1 + 64) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(void *)(a1 + 40) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v6;
    operator delete(v6);
  }
}

void Espresso::HXEngine::HXCompiler::error(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v4 = *(std::string *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v3 = *(std::string *)a2;
  }
  Espresso::HXEngine::context::error((uint64_t)&v4, 0, (uint64_t)&v3);
}

void sub_1928425D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::HXEngine::blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::HXEngine::blob_container> const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, void *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        return v7;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x38uLL);
    uint64_t v10 = v9;
    uint64_t v11 = a3[1];
    v9[4] = *a3;
    v9[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v9 + 12) = 0;
    void *v9 = 0;
    v9[1] = 0;
    v9[2] = v7;
    void *v6 = v9;
    OSType v12 = (uint64_t *)**a1;
    CFAllocatorRef v13 = v9;
    if (v12)
    {
      *a1 = v12;
      CFAllocatorRef v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(a1[1]);
    long long v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      nitro::nitro_function::nitro_function(v2);
    }
    operator delete(a1);
  }
}

void std::vector<Espresso::HXEngine::HXCompiler::op_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::HXEngine::HXCompiler::~HXCompiler(std::__shared_weak_count **this)
{
  Espresso::HXEngine::HXCompiler::~HXCompiler(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void **v6;

  *this = (std::__shared_weak_count *)&unk_1EE36EF00;
  Espresso::HXEngine::HXCompiler::reset((Espresso::HXEngine::HXCompiler *)this);
  long long v2 = this[28];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::string v3 = this[26];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unint64_t v6 = (void **)(this + 22);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(this[20]);
  unint64_t v6 = (void **)(this + 16);
  std::vector<Espresso::HXEngine::HXCompiler::op_t>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = this[5];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  *this = (std::__shared_weak_count *)&unk_1EE32A8C8;
  uint64_t v5 = this[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void Espresso::HXEngine::HXCompiler::add_operation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 88);
  unint64_t v4 = *(void *)(a1 + 136);
  unint64_t v5 = *(void *)(a1 + 144);
  if (v4 < v5)
  {
    uint64_t v6 = Espresso::HXEngine::HXCompiler::op_t::op_t(v4, a2) + 136;
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(a1 + 128);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - v7) >> 3);
  if (v8 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - v7) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= v8 + 1) {
    uint64_t v10 = v8 + 1;
  }
  if (v9 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v11 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11)
  {
    if (v11 > 0x1E1E1E1E1E1E1E1) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    OSType v12 = (char *)operator new(136 * v11);
  }
  else
  {
    OSType v12 = 0;
  }
  CFAllocatorRef v13 = &v12[136 * v11];
  uint64_t v14 = Espresso::HXEngine::HXCompiler::op_t::op_t((uint64_t)&v12[136 * v8], a2);
  uint64_t v6 = v14 + 136;
  CFNumberRef v16 = *(char **)(a1 + 128);
  uint64_t v15 = *(char **)(a1 + 136);
  if (v15 == v16)
  {
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v6;
    *(void *)(a1 + 144) = v13;
    if (!v15) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    v15 -= 136;
    uint64_t v14 = Espresso::HXEngine::HXCompiler::op_t::op_t(v14 - 136, (uint64_t)v15);
  }
  while (v15 != v16);
  CFNumberRef v17 = *(char **)(a1 + 128);
  uint64_t v15 = *(char **)(a1 + 136);
  *(void *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = v6;
  *(void *)(a1 + 144) = v13;
  if (v15 != v17)
  {
    do
    {
      v15 -= 136;
      std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100]((uint64_t)v15);
    }
    while (v15 != v17);
    uint64_t v15 = v17;
  }
  if (v15) {
LABEL_19:
  }
    operator delete(v15);
LABEL_20:
  *(void *)(a1 + 136) = v6;
}

uint64_t Espresso::HXEngine::HXCompiler::op_t::op_t(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v4 = a1 + 88;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(void *)(a1 + 80) = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = (void *)(a1 + 32);
  unint64_t v5 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)(a2 + 32);
  if (v5)
  {
    *(void *)(a1 + 40) = v5;
    operator delete(v5);
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  unint64_t v8 = *(void **)(a1 + 56);
  if (v8)
  {
    *(void *)(a1 + 64) = v8;
    operator delete(v8);
    v6[3] = 0;
    v6[4] = 0;
    v6[5] = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  std::__tree<int>::destroy(*(void **)(a1 + 88));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  unint64_t v9 = (void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v11;
  if (v11)
  {
    *(void *)(v10 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v4;
    *(void *)(a2 + 80) = v9;
    void *v9 = 0;
    *(void *)(a2 + 96) = 0;
  }
  else
  {
    *(void *)(a1 + 80) = v4;
  }
  long long v12 = *(_OWORD *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  CFAllocatorRef v13 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v12;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  long long v14 = *(_OWORD *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v14;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  return a1;
}

void Espresso::SerDes::generic_serdes_object::~generic_serdes_object(Espresso::SerDes::generic_serdes_object *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

const char *Espresso::SerDes::generic_serdes_object::try_serialize_special_float_val(Espresso::SerDes::generic_serdes_object *this, float a2)
{
  long long v2 = "-inf";
  if (a2 != -INFINITY) {
    long long v2 = 0;
  }
  if (a2 == INFINITY) {
    return "inf";
  }
  else {
    return v2;
  }
}

const char *Espresso::SerDes::generic_serdes_object::try_serialize_special_double_val(Espresso::SerDes::generic_serdes_object *this, double a2)
{
  long long v2 = "-inf";
  if (a2 != -INFINITY) {
    long long v2 = 0;
  }
  if (a2 == INFINITY) {
    return "inf";
  }
  else {
    return v2;
  }
}

float Espresso::SerDes::generic_serdes_object::try_parse_special_float_val(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 4)
  {
    if (*(_DWORD *)a2 != 1718511917) {
      goto LABEL_17;
    }
    return -INFINITY;
  }
  else
  {
    if (a3 != 3) {
      goto LABEL_17;
    }
    if (*(_WORD *)a2 == 28265 && *(unsigned char *)(a2 + 2) == 102)
    {
      return INFINITY;
    }
    else
    {
      if (*(_WORD *)a2 != 24942 || *(unsigned char *)(a2 + 2) != 110)
      {
LABEL_17:
        exceptiostd::vector<std::string>::pointer n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v8 = std::string::append(&v10, "\" has unknown string value");
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v11);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      return NAN;
    }
  }
}

void sub_192842DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double Espresso::SerDes::generic_serdes_object::try_parse_special_double_val(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 4)
  {
    if (*(_DWORD *)a2 != 1718511917) {
      goto LABEL_17;
    }
    return -INFINITY;
  }
  else
  {
    if (a3 != 3) {
      goto LABEL_17;
    }
    if (*(_WORD *)a2 == 28265 && *(unsigned char *)(a2 + 2) == 102)
    {
      return INFINITY;
    }
    else
    {
      if (*(_WORD *)a2 != 24942 || *(unsigned char *)(a2 + 2) != 110)
      {
LABEL_17:
        exceptiostd::vector<std::string>::pointer n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v8 = std::string::append(&v10, "\" has unknown string value");
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v11);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      return NAN;
    }
  }
}

void sub_192842F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "compress_sparse");
  uint64_t v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if ((void *)(a1 + 8) == v4) {
    goto LABEL_10;
  }
  unint64_t v5 = (unsigned __int8 *)(v4 + 7);
  int v6 = *((char *)v4 + 79);
  if ((v6 & 0x80000000) == 0)
  {
    if (v6 != 1) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v7 = *v5 == 49;
    goto LABEL_11;
  }
  if (v4[8] == 1)
  {
    unint64_t v5 = *(unsigned __int8 **)v5;
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v7 = 0;
LABEL_11:
  unint64_t v8 = [a2 objectForKeyedSubscript:@"espresso.anecompiler.compress_sparse"];
  long long v9 = v8;
  if (v8) {
    uint64_t v7 = [v8 BOOLValue];
  }

  std::string v10 = getenv("ESPRESSO_ANEC_COMPRESS_SPARSE");
  if (v10)
  {
    __p[0] = 0;
    return strtol(v10, (char **)__p, 10) != 0;
  }
  return v7;
}

void sub_1928430C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(Espresso::ANECompilerEngine::sparsity_options *this, const NSDictionary *a2)
{
  std::string v3 = [(Espresso::ANECompilerEngine::sparsity_options *)this objectForKeyedSubscript:@"espresso.anecompiler.required_sparsity_for_compression"];

  if (v3)
  {
    uint64_t v4 = [(Espresso::ANECompilerEngine::sparsity_options *)this objectForKeyedSubscript:@"espresso.anecompiler.required_sparsity_for_compression"];
    [v4 floatValue];
  }
  unint64_t v5 = getenv("ESPRESSO_ANEC_REQUIRED_SPARSITY_FOR_COMPRESSION");
  if (v5) {
    strtof(v5, 0);
  }
}

void sub_19284317C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(uint64_t a1, Espresso::ANECompilerEngine::sparsity_options *this)
{
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(this, (const NSDictionary *)this);
  float v5 = v4;
  int v6 = [(Espresso::ANECompilerEngine::sparsity_options *)this objectForKeyedSubscript:@"espresso.anecompiler.required_sparsity_for_compression_lut_override"];
  uint64_t v7 = v6;
  if (v6)
  {
    [v6 floatValue];
    float v5 = v8;
  }

  long long v9 = getenv("ESPRESSO_ANEC_REQUIRED_SPARSITY_FOR_COMPRESSION_LUT_OVERRIDE");
  if (v9) {
    float v5 = strtof(v9, 0);
  }
  int v10 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(a1, this);
  std::string v11 = [(Espresso::ANECompilerEngine::sparsity_options *)this objectForKeyedSubscript:@"espresso.anecompiler.compress_sparse_lut_override"];
  long long v12 = v11;
  if (v11) {
    int v10 = [v11 BOOLValue];
  }

  char v13 = getenv("ESPRESSO_ANEC_COMPRESS_SPARSE_LUT_OVERRIDE");
  if (v13)
  {
    __endptr = 0;
    int v10 = strtol(v13, &__endptr, 10) != 0;
  }
  long long v14 = [(Espresso::ANECompilerEngine::sparsity_options *)this objectForKeyedSubscript:@"espresso.anecompiler.ignore_zero_fraction_for_ternary_lut_kernels"];
  uint64_t v15 = v14;
  if (v14) {
    int v16 = [v14 BOOLValue];
  }
  else {
    int v16 = 1;
  }

  CFNumberRef v17 = getenv("ESPRESSO_ANEC_IGNORE_ZERO_FRACTION_FOR_TERNARY_LUT_KERNELS");
  if (v17)
  {
    __endptr = 0;
    int v16 = strtol(v17, &__endptr, 10) != 0;
  }
  float v19 = 0.0;
  if (v5 >= 0.0) {
    float v19 = v5;
  }
  if (v19 <= 1.0) {
    float v20 = v19;
  }
  else {
    float v20 = 1.0;
  }
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(this, v18);
  Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(a1, this);
  uint64_t v21 = 0x100000000;
  uint64_t v22 = 0x10000000000;
  if (!v16) {
    uint64_t v22 = 0;
  }
  if (!v10) {
    uint64_t v21 = 0;
  }
  return v21 | v22 | LODWORD(v20);
}

void sub_192843348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    float v4 = (char *)a1[1];
    float v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1928433B8(_Unwind_Exception *exception_object)
{
  std::string v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::bit_packer::anec_value_accessor_fn(void *this, unsigned int a2)
{
  switch(a2)
  {
    case 1u:
      *this = &unk_1EE377FC8;
      long long v2 = Espresso::bit_packer::anec_bit_at;
      goto LABEL_8;
    case 2u:
      *this = &unk_1EE377FC8;
      long long v2 = Espresso::bit_packer::anec_uint2_at;
      goto LABEL_8;
    case 4u:
      *this = &unk_1EE377FC8;
      long long v2 = Espresso::bit_packer::anec_uint4_at;
      goto LABEL_8;
    case 6u:
      *this = &unk_1EE377FC8;
      long long v2 = Espresso::bit_packer::anec_uint6_at;
      goto LABEL_8;
    case 8u:
      *this = &unk_1EE377FC8;
      long long v2 = Espresso::bit_packer::anec_uint8_at;
LABEL_8:
      this[1] = v2;
      break;
    default:
      *this = &unk_1EE3776D8;
      this[1] = Espresso::bit_packer::anec_value_at;
      this[2] = a2;
      break;
  }
  this[3] = this;
  return this;
}

uint64_t std::function<unsigned char ()(unsigned long,unsigned char const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

uint64_t Espresso::bit_packer::set_pack_starts_from_lsb_val(uint64_t this, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  if ((_BYTE)a4)
  {
    unint64_t v4 = a4 * a3;
    do
    {
      LODWORD(v5) = 8 - (v4 & 7);
      if (v5 >= a4) {
        uint64_t v5 = a4;
      }
      else {
        uint64_t v5 = v5;
      }
      *(unsigned char *)(this + (v4 >> 3)) = *(unsigned char *)(this + (v4 >> 3)) & ~(0xFFu >> (8 - v5) << (v4 & 7)) | (((0xFFu >> (8 - v5)) & a2) << (v4 & 7));
      LOBYTE(a4) = a4 - v5;
      LODWORD(a2) = (a2 >> v5);
      v4 += v5;
    }
    while ((_BYTE)a4);
  }
  return this;
}

void *std::__function::__value_func<unsigned char ()(unsigned long,unsigned char const*)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000192DD71B3)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*(unsigned __int8 *)(a1 + 16), *a2, *a3);
}

__n128 std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3776D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = &unk_1EE3776D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::~__func()
{
}

uint64_t Espresso::bit_packer::anec_value_at(Espresso::bit_packer *this, uint64_t a2, uint64_t a3, const unsigned __int8 *a4)
{
  unint64_t v4 = this * a2;
  unsigned int v5 = 8 - (v4 & 7);
  if (v5 >= this) {
    char v6 = (char)this;
  }
  else {
    char v6 = 8 - (v4 & 7);
  }
  unint64_t v7 = v4 >> 3;
  unsigned int v8 = ((0xFFu >> (8 - v6) << (v4 & 7)) & *(unsigned __int8 *)(a3 + (v4 >> 3))) >> (v4 & 7);
  if (v5 < this) {
    v8 |= ((0xFFu >> (8 - ((_BYTE)this - v6))) & *(unsigned __int8 *)(v7 + a3 + 1)) << v6;
  }
  return v8;
}

uint64_t Espresso::bit_packer::anec_uint8_at(Espresso::bit_packer *this, uint64_t a2, const unsigned __int8 *a3)
{
  return *((unsigned __int8 *)this + a2);
}

uint64_t Espresso::bit_packer::anec_uint6_at(Espresso::bit_packer *this, uint64_t a2, const unsigned __int8 *a3)
{
  unint64_t v3 = (unint64_t)(3 * (void)this) >> 2;
  unsigned int v4 = *(unsigned __int8 *)(a2 + v3);
  if ((this & 3) == 2) {
    return (v4 >> 4) & 0xFFFFFFCF | (16 * (*(unsigned char *)(v3 + a2 + 1) & 3));
  }
  if ((this & 3) == 1) {
    return (v4 >> 6) & 0xFFFFFFC3 | (4 * (*(unsigned char *)(v3 + a2 + 1) & 0xF));
  }
  unsigned int v5 = v4 >> 2;
  unsigned int v6 = v4 & 0x3F;
  if ((this & 3) != 0) {
    return v5;
  }
  else {
    return v6;
  }
}

uint64_t Espresso::bit_packer::anec_uint4_at(unint64_t this, uint64_t a2, const unsigned __int8 *a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + (this >> 1));
  unsigned int v4 = v3 >> 4;
  unsigned int v5 = v3 & 0xF;
  if (this) {
    return v4;
  }
  else {
    return v5;
  }
}

uint64_t Espresso::bit_packer::anec_uint2_at(unint64_t this, uint64_t a2, const unsigned __int8 *a3)
{
  return (*(unsigned __int8 *)(a2 + (this >> 2)) >> (2 * (this & 3))) & 3;
}

void *std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::target_type()
{
}

uint64_t std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000192DD7124)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377FC8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE377FC8;
  result[1] = v3;
  return result;
}

void std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::~__func()
{
}

uint64_t Espresso::bit_packer::anec_bit_at(unint64_t this, uint64_t a2, const unsigned __int8 *a3)
{
  return (*(unsigned __int8 *)(a2 + (this >> 3)) >> (this & 7)) & 1;
}

uint64_t Espresso::ANECompilerEngine::try_write_sparsified_lut_kernel(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, void *a9)
{
  v52[4] = *MEMORY[0x1E4F143B8];
  id v17 = a9;
  CFNumberRef v18 = v17;
  v19.n128_u32[0] = *(_DWORD *)a8;
  if (*(unsigned char *)(a8 + 4)) {
    BOOL v20 = v19.n128_f32[0] < 1.0;
  }
  else {
    BOOL v20 = 0;
  }
  if (v20 && (int v21 = *a7, (v21 & 0x1F) != 0))
  {
    unsigned int v41 = a2;
    if ((~v21 & 0xF) != 0 || (((a5 < 2) ^ ((v21 & 0x10) >> 4)) & 1) == 0)
    {
      id v40 = v17;
      exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Implementation expects all sparse bitwidths if any are supported unless 8 bit doesn't compress.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    MEMORY[0x1F4188790](v19);
    CFNumberRef v23 = (char *)v38 - v22;
    bzero((char *)v38 - v22, a5);
    int v24 = *(const void **)(a4 + 16);
    if (!memcmp(v23, v24, a5))
    {
      id v40 = v18;
      float v26 = *(float *)a8 * (float)a3;
      if ((unint64_t)v26 <= 1) {
        unint64_t v27 = 1;
      }
      else {
        unint64_t v27 = (unint64_t)v26;
      }
      uint64_t v28 = *(void *)(a1 + 16);
      int v29 = *(unsigned __int8 *)(a8 + 5);
      std::vector<unsigned char>::vector(v51, a5);
      Espresso::bit_packer::anec_value_accessor_fn(v52, v41);
      _OWORD v38[2] = v38;
      v38[1] = a6;
      if (a3)
      {
        v38[0] = v24;
        unint64_t v30 = 0;
        uint64_t v31 = 0;
        LOBYTE(v32) = 0;
        do
        {
          unsigned int v33 = std::function<unsigned char ()(unsigned long,unsigned char const*)>::operator()(v52[3], v31, v28);
          if (v32 <= v33) {
            unsigned int v32 = v33;
          }
          else {
            unsigned int v32 = v32;
          }
          if (!v33) {
            ++v30;
          }
          ++v31;
        }
        while (a3 != v31);
        if (v29) {
          BOOL v34 = v32 >= 3;
        }
        else {
          BOOL v34 = 1;
        }
        if (v34) {
          unint64_t v35 = v27;
        }
        else {
          unint64_t v35 = 1;
        }
        if (v30 >= v35 && ((v32 - 1) < 4u || (v32 - 1) < 0x40u || a5 > 1))
        {
          unint64_t v39 = a3 - v30;
          operator new[]();
        }
      }
      else
      {
        unint64_t v30 = 0;
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      unint64_t v39 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      char v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      __int16 v49 = 0;
      unint64_t v50 = v30;
      std::__function::__value_func<unsigned char ()(unsigned long,unsigned char const*)>::~__value_func[abi:ne180100](v52);
      if (v51[0])
      {
        v51[1] = v51[0];
        operator delete(v51[0]);
      }
      uint64_t v25 = 1;
      CFNumberRef v18 = v40;
      if (v42) {
        MEMORY[0x192FF1690](v42, 0x1000C8077774924);
      }
    }
    else
    {
      uint64_t v25 = 1;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }

  return v25;
}

void sub_192844054(_Unwind_Exception *a1)
{
  MEMORY[0x192FF1690](*(void *)(v1 - 224), 0x1000C8077774924);
  std::__function::__value_func<unsigned char ()(unsigned long,unsigned char const*)>::~__value_func[abi:ne180100]((void *)(v1 - 128));
  uint64_t v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(void *)(v1 - 144) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

uint64_t std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    unsigned int v6 = (unsigned char *)a1[1];
    unint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_192844238(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::sparse_palettized_kernel::~sparse_palettized_kernel(Espresso::ANECompilerEngine::sparse_palettized_kernel *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    MEMORY[0x192FF1690](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    MEMORY[0x192FF1690](v3, 0x1000C8077774924);
  }
}

void rule_remove_fused_conv_ip_activation::status_t::~status_t(void **this)
{
  rule_remove_fused_conv_ip_activation::status_t::~status_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *this = &unk_1EE324418;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[11];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[9];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

void rule_bake_batchnorm::status_t::~status_t(void **this)
{
  rule_bake_batchnorm::status_t::~status_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;

  *this = &unk_1EE3243F8;
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

void rule_remove_fused_conv_ip_activation::transform_and_return_skip_layers(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)&long long v82 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2)
  {
    unsigned int v6 = 0;
    goto LABEL_6;
  }
  if (!v6)
  {
LABEL_6:
    unint64_t v7 = 0;
    goto LABEL_7;
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if ((v6[143] & 0x80u) == 0) {
    size_t v8 = v6[143];
  }
  else {
    size_t v8 = *((void *)v6 + 16);
  }
  long long v9 = &v76;
  std::string::basic_string[abi:ne180100]((uint64_t)&v76, v8 + 15);
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v9 = (std::string *)v76.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if ((v6[143] & 0x80u) == 0) {
      int v10 = v6 + 120;
    }
    else {
      int v10 = (const void *)*((void *)v6 + 15);
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_pre_activation");
  uint64_t v11 = *((void *)v6 + 10);
  if (v11)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 384))(v11);
    long long v13 = *(_OWORD *)v12;
    long long v14 = *(_OWORD *)(v12 + 32);
    long long v66 = *(_OWORD *)(v12 + 16);
    long long v67 = v14;
    long long v65 = v13;
    long long v15 = *(_OWORD *)(v12 + 48);
    long long v16 = *(_OWORD *)(v12 + 64);
    long long v17 = *(_OWORD *)(v12 + 96);
    long long v70 = *(_OWORD *)(v12 + 80);
    long long v71 = v17;
    long long v68 = v15;
    long long v69 = v16;
    long long v18 = *(_OWORD *)(v12 + 112);
    long long v19 = *(_OWORD *)(v12 + 128);
    long long v20 = *(_OWORD *)(v12 + 144);
    uint64_t v75 = *(void *)(v12 + 160);
    long long v73 = v19;
    long long v74 = v20;
    long long v72 = v18;
    int v21 = *((_DWORD *)v6 + 42);
    if (v21 != 2)
    {
      if (v21 == 1)
      {
        HIDWORD(v66) = 0;
      }
      else
      {
        if (!v21) {
          goto LABEL_21;
        }
        HIDWORD(v68) = -1;
      }
LABEL_24:
      uint64_t v22 = *a1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
      if ((char)v6[119] < 0) {
        std::string::__init_copy_ctor_external(&v81, *((const std::string::value_type **)v6 + 12), *((void *)v6 + 13));
      }
      else {
        std::string v81 = *(std::string *)(v6 + 4);
      }
      int v57 = 0;
      BOOL v58 = 0;
      BOOL v59 = 0;
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      v79.__r_.__value_.__s.__data_[8] = 0;
      int v57 = (std::string *)operator new(0x18uLL);
      BOOL v58 = v57;
      BOOL v59 = v57 + 1;
      BOOL v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59, (long long *)&v81, &v82, v57);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v79, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      }
      else {
        std::string v79 = v76;
      }
      BOOL v54 = 0;
      BOOL v55 = 0;
      BOOL v56 = 0;
      unsigned int v77 = &v54;
      char v78 = 0;
      BOOL v54 = (std::string *)operator new(0x18uLL);
      BOOL v55 = v54;
      BOOL v56 = v54 + 1;
      BOOL v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, (long long *)&v79, (long long *)&v80, v54);
      Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, v22, (uint64_t)&__p, (uint64_t)(v6 + 144), (uint64_t)&v65, (uint64_t)v57, (uint64_t)v58, (uint64_t *)&v54);
      if (lpsrc)
      {
        if (v23)
        {
          int v24 = v64;
          if (v64) {
            atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_36;
        }
      }
      else
      {
        CFNumberRef v23 = 0;
      }
      int v24 = 0;
LABEL_36:
      if (v64) {
        nitro::nitro_function::nitro_function(v64);
      }
      unsigned int v77 = &v54;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if (v62 < 0) {
        operator delete(__p);
      }
      uint64_t v25 = (std::__shared_weak_count *)*((void *)v6 + 11);
      std::string __p = (void *)*((void *)v6 + 10);
      uint64_t v61 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, void **))(*(void *)v23 + 48))(v23, &__p);
      if (v61) {
        nitro::nitro_function::nitro_function(v61);
      }
      if (v24) {
        nitro::nitro_function::nitro_function(v24);
      }
      goto LABEL_50;
    }
LABEL_21:
    DWORD2(v66) = 0;
    goto LABEL_24;
  }
LABEL_50:
  uint64_t v26 = *((void *)v6 + 8);
  if (!v26) {
    goto LABEL_82;
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 384))(v26);
  long long v65 = *(_OWORD *)v27;
  long long v28 = *(_OWORD *)(v27 + 16);
  long long v29 = *(_OWORD *)(v27 + 32);
  long long v30 = *(_OWORD *)(v27 + 64);
  long long v68 = *(_OWORD *)(v27 + 48);
  long long v69 = v30;
  long long v66 = v28;
  long long v67 = v29;
  long long v31 = *(_OWORD *)(v27 + 80);
  long long v32 = *(_OWORD *)(v27 + 96);
  long long v33 = *(_OWORD *)(v27 + 112);
  LODWORD(v73) = *(_DWORD *)(v27 + 128);
  long long v71 = v32;
  long long v72 = v33;
  long long v70 = v31;
  switch(*((_DWORD *)v6 + 42))
  {
    case 0:
    case 2:
      HIDWORD(v65) = 0;
      break;
    case 1:
      LODWORD(v66) = 0;
      break;
    case 4:
      HIDWORD(v66) = 0;
      break;
    default:
      DWORD1(v68) = -1;
      break;
  }
  BOOL v34 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
  if ((char)v6[119] < 0) {
    std::string::__init_copy_ctor_external(&v81, *((const std::string::value_type **)v6 + 12), *((void *)v6 + 13));
  }
  else {
    std::string v81 = *(std::string *)(v6 + 4);
  }
  int v51 = 0;
  int v52 = 0;
  id v53 = 0;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  v79.__r_.__value_.__s.__data_[8] = 0;
  int v51 = (std::string *)operator new(0x18uLL);
  int v52 = v51;
  id v53 = v51 + 1;
  int v52 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (long long *)&v81, &v82, v51);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v76;
  }
  uint64_t v48 = 0;
  __int16 v49 = 0;
  unint64_t v50 = 0;
  unsigned int v77 = &v48;
  char v78 = 0;
  uint64_t v48 = (std::string *)operator new(0x18uLL);
  __int16 v49 = v48;
  unint64_t v50 = v48 + 1;
  __int16 v49 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v50, (long long *)&v79, (long long *)&v80, v48);
  Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&lpsrc, v34, (uint64_t)&__p, (uint64_t)(v6 + 144), (uint64_t)&v65, (uint64_t)v51, (uint64_t)v52, (uint64_t *)&v48);
  if (lpsrc)
  {
    if (v35)
    {
      uint64_t v36 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_68;
    }
  }
  else
  {
    unint64_t v35 = 0;
  }
  uint64_t v36 = 0;
LABEL_68:
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  unsigned int v77 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (v62 < 0) {
    operator delete(__p);
  }
  uint64_t v37 = (std::__shared_weak_count *)*((void *)v6 + 9);
  std::string __p = (void *)*((void *)v6 + 8);
  uint64_t v61 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, void **))(*(void *)v35 + 48))(v35, &__p);
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
LABEL_82:
  int v38 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v65, "activation");
  if ((v6[167] & 0x80u) == 0) {
    size_t v39 = v6[167];
  }
  else {
    size_t v39 = *((void *)v6 + 19);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 11);
  if (v62 < 0) {
    p_p = __p;
  }
  if (v39)
  {
    if ((v6[167] & 0x80u) == 0) {
      unsigned int v41 = v6 + 144;
    }
    else {
      unsigned int v41 = (const void *)*((void *)v6 + 18);
    }
    memmove(p_p, v41, v39);
  }
  strcpy((char *)p_p + v39, "_activation");
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v81, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v81 = v76;
  }
  uint64_t v45 = 0;
  char v46 = 0;
  uint64_t v47 = 0;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  v79.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v45 = (std::string *)operator new(0x18uLL);
  char v46 = v45;
  uint64_t v47 = v45 + 1;
  char v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, (long long *)&v81, &v82, v45);
  if ((char)v6[143] < 0) {
    std::string::__init_copy_ctor_external(&v79, *((const std::string::value_type **)v6 + 15), *((void *)v6 + 16));
  }
  else {
    std::string v79 = *(std::string *)(v6 + 5);
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unsigned int v77 = &v42;
  char v78 = 0;
  uint64_t v42 = (std::string *)operator new(0x18uLL);
  uint64_t v43 = v42;
  uint64_t v44 = v42 + 1;
  uint64_t v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v44, (long long *)&v79, (long long *)&v80, v42);
  Espresso::sequential_builder::add<Espresso::activation_params>((uint64_t *)&lpsrc, v38, (uint64_t)&v65, (uint64_t)&__p, (uint64_t)(v6 + 168), (uint64_t)v45, (uint64_t)v46, (uint64_t *)&v42);
  unsigned int v77 = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (v62 < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v66) < 0) {
    operator delete((void *)v65);
  }
  std::map<int,BOOL>::map[abi:ne180100](a3, (void *)v6 + 2);
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192844DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  *(void *)(v42 - 144) = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 144));
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 161) < 0) {
    operator delete(*(void **)(v42 - 184));
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  _Unwind_Resume(a1);
}

void sub_192844FDC()
{
  if (!v0) {
    JUMPOUT(0x192844FD4);
  }
  JUMPOUT(0x192844FCCLL);
}

void rule_remove_fused_conv_ip_activation::match_at_layer(rule_remove_fused_conv_ip_activation *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v37 = a2;
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * a2);
  unsigned int v6 = *(std::__shared_weak_count **)(v5 + 64);
  if (!v6)
  {
    long long v14 = 0;
    goto LABEL_7;
  }
  __asm { FMOV            V8.2S, #1.0 }
  if (v8)
  {
    long long v14 = *(std::__shared_weak_count **)(v5 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * a2);
      unsigned int v6 = *(std::__shared_weak_count **)(v5 + 64);
      if (!v6) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    long long v14 = 0;
  }
  if (!v15)
  {
    if (v8)
    {
      unsigned int v6 = 0;
LABEL_16:
      long long v16 = 0;
      goto LABEL_17;
    }
LABEL_7:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_45;
  }
  long long v16 = v15;
  unsigned int v6 = *(std::__shared_weak_count **)(v5 + 72);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8)
  {
LABEL_17:
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v8 + 384))(v8);
    int v19 = *(_DWORD *)(v18 + 24);
    if (v19)
    {
      if (v19 == 2)
      {
        __asm { FMOV            V0.2S, #1.0 }
        LODWORD(_D0) = *(_DWORD *)(v18 + 36);
        uint64_t v33 = _D0;
        int v20 = 2;
        if (!v16) {
          goto LABEL_34;
        }
        goto LABEL_28;
      }
      if (v19 == 1) {
        int v20 = 0;
      }
      else {
        int v20 = -1;
      }
    }
    else
    {
      if (!*(_DWORD *)(v18 + 28))
      {
        int v20 = *(_DWORD *)(v18 + 60);
        uint64_t v22 = *(void *)(v18 + 64);
LABEL_27:
        uint64_t v33 = v22;
        if (!v16) {
          goto LABEL_34;
        }
        goto LABEL_28;
      }
      int v20 = 1;
    }
    uint64_t v22 = _D8;
    goto LABEL_27;
  }
  long long v35 = 0uLL;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v33 = _D0;
  uint64_t v36 = 0;
LABEL_28:
  uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v16 + 384))(v16);
  if (*(_DWORD *)(v23 + 12))
  {
    int v20 = 0;
    goto LABEL_35;
  }
  if (*(_DWORD *)(v23 + 16))
  {
    int v20 = 1;
    goto LABEL_35;
  }
  if (*(_DWORD *)(v23 + 28)) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("unfuse has_prelu is not implemented");
  }
  int v20 = *(_DWORD *)(v23 + 52);
  uint64_t v33 = *(void *)(v23 + 56);
LABEL_34:
  if (v20 != -1)
  {
LABEL_35:
    int v32 = v20;
    int v24 = (char *)operator new(0xE8uLL);
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)int v24 = &unk_1EE3807A8;
    *((_OWORD *)v24 + 2) = 0u;
    *((_OWORD *)v24 + 4) = 0u;
    *((_OWORD *)v24 + 5) = 0u;
    *((_OWORD *)v24 + 6) = 0u;
    *((_OWORD *)v24 + 7) = 0u;
    *((_OWORD *)v24 + 8) = 0u;
    *((_OWORD *)v24 + 9) = 0u;
    *((_OWORD *)v24 + 10) = 0u;
    *((_OWORD *)v24 + 11) = 0u;
    *((_OWORD *)v24 + 12) = 0u;
    *((_OWORD *)v24 + 13) = 0u;
    *((void *)v24 + 28) = 0;
    *((void *)v24 + 6) = 0;
    *((void *)v24 + 5) = v24 + 48;
    *((void *)v24 + 10) = 0;
    *((void *)v24 + 9) = 0;
    *((void *)v24 + 7) = 0;
    *((void *)v24 + 8) = v24 + 72;
    *((void *)v24 + 3) = &unk_1EE324418;
    *(_OWORD *)(v24 + 180) = 0u;
    *(_OWORD *)(v24 + 168) = 0u;
    *(_OWORD *)(v24 + 152) = 0u;
    *(_OWORD *)(v24 + 136) = 0u;
    *(_OWORD *)(v24 + 120) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(void *)(v24 + 196) = _D8;
    *(void *)(v24 + 204) = 0;
    *(void *)(v24 + 212) = 0;
    *(void *)(v24 + 220) = 0;
    int v25 = v37;
    *((_DWORD *)v24 + 8) = v37;
    *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v24 + 5, v25, &v37)+ 32) = 1;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = (std::__shared_weak_count *)*((void *)v24 + 14);
    *((void *)v24 + 13) = v8;
    *((void *)v24 + 14) = v14;
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = (std::__shared_weak_count *)*((void *)v24 + 12);
    *((void *)v24 + 11) = v16;
    *((void *)v24 + 12) = v6;
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
    uint64_t v28 = *((void *)this + 3) + 56;
    uint64_t v34 = v25;
    long long v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28, v25, &v34);
    std::string::operator=((std::string *)v24 + 5, (const std::string *)v29[3]);
    uint64_t v30 = *((void *)this + 3) + 96;
    uint64_t v34 = v25;
    long long v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v30, v25, &v34);
    std::string::operator=((std::string *)v24 + 6, (const std::string *)v31[3]);
    std::string::operator=((std::string *)v24 + 7, (const std::string *)(*(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * v25) + 16));
    *((_DWORD *)v24 + 48) = v32;
    *(void *)(v24 + 196) = v33;
    *(_OWORD *)(v24 + 204) = v35;
    *(void *)(v24 + 220) = v36;
    *a3 = v24 + 24;
    a3[1] = v24;
    if (v6) {
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  *a3 = 0;
  a3[1] = 0;
  if (v6) {
LABEL_44:
  }
    nitro::nitro_function::nitro_function(v6);
LABEL_45:
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
}

void sub_192845478(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3807A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3807A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void rule_remove_fused_conv_ip_activation::~rule_remove_fused_conv_ip_activation(rule_remove_fused_conv_ip_activation *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void rule_bake_batchnorm::transform_and_return_skip_layers(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)&long long v49 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2)
  {
    unsigned int v6 = 0;
    goto LABEL_6;
  }
  if (!v6)
  {
LABEL_6:
    unint64_t v7 = 0;
    goto LABEL_7;
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v8 = *((void *)v6 + 8);
  if (!v8) {
    goto LABEL_40;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8);
  long long v11 = *(_OWORD *)(v9 + 128);
  long long v10 = *(_OWORD *)(v9 + 144);
  uint64_t v12 = *(void *)(v9 + 160);
  long long v40 = *(_OWORD *)(v9 + 112);
  long long v13 = *(_OWORD *)v9;
  long long v14 = *(_OWORD *)(v9 + 32);
  v34[1] = *(_OWORD *)(v9 + 16);
  long long v35 = v14;
  v34[0] = v13;
  long long v15 = *(_OWORD *)(v9 + 48);
  long long v16 = *(_OWORD *)(v9 + 64);
  long long v17 = *(_OWORD *)(v9 + 96);
  long long v38 = *(_OWORD *)(v9 + 80);
  long long v39 = v17;
  long long v36 = v15;
  long long v37 = v16;
  uint64_t v43 = v12;
  long long v41 = v11;
  long long v42 = v10;
  LODWORD(v40) = 0;
  LODWORD(v35) = 1;
  uint64_t v18 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  if (v6[103] < 0) {
    std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)v6 + 10), *((void *)v6 + 11));
  }
  else {
    std::string v48 = *(std::string *)(v6 + 80);
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  v46.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v26 = (std::string *)operator new(0x18uLL);
  uint64_t v27 = v26;
  uint64_t v28 = v26 + 1;
  uint64_t v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (long long *)&v48, &v49, v26);
  if (v6[127] < 0) {
    std::string::__init_copy_ctor_external(&v46, *((const std::string::value_type **)v6 + 13), *((void *)v6 + 14));
  }
  else {
    std::string v46 = *(std::string *)(v6 + 104);
  }
  uint64_t v23 = 0;
  int v24 = 0;
  int v25 = 0;
  uint64_t v44 = &v23;
  char v45 = 0;
  uint64_t v23 = (std::string *)operator new(0x18uLL);
  int v24 = v23;
  int v25 = v23 + 1;
  int v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25, (long long *)&v46, (long long *)&v47, v23);
  Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, v18, (uint64_t)&__p, (uint64_t)(v6 + 128), (uint64_t)v34, (uint64_t)v26, (uint64_t)v27, (uint64_t *)&v23);
  if (!lpsrc)
  {
    int v19 = 0;
    goto LABEL_19;
  }
  if (!v19)
  {
LABEL_19:
    int v20 = 0;
    goto LABEL_20;
  }
  int v20 = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_20:
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  uint64_t v44 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(__p);
  }
  (*(void (**)(void **__return_ptr, void *))(*(void *)v19 + 456))(&__p, v19);
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v19 + 448))(&v48, v19);
  if (!__p)
  {
    exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Can't find CPU weights");
    goto LABEL_45;
  }
  if (!v48.__r_.__value_.__r.__words[0])
  {
    exceptiostd::vector<std::string>::pointer n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Can't find GPU weights");
LABEL_45:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::size_type v21 = *((void *)v6 + 9);
  v46.__r_.__value_.__r.__words[0] = *((void *)v6 + 8);
  v46.__r_.__value_.__l.__size_ = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, std::string *))(*(void *)v19 + 48))(v19, &v46);
  if (v46.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v46.__r_.__value_.__l.__size_);
  }
  if (v48.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v48.__r_.__value_.__l.__size_);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
LABEL_40:
  std::map<int,BOOL>::map[abi:ne180100](a3, (void *)v6 + 2);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192845A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v22 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 128));
  if (*(char *)(v22 - 73) < 0) {
    operator delete(*(void **)(v22 - 96));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(a1);
}

void rule_bake_batchnorm::match_at_layer(rule_bake_batchnorm *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v18 = a2;
  uint64_t v6 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * a2);
  unint64_t v7 = *(const void **)(v6 + 64);
  if (!v7
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v9 = v8;
  long long v10 = *(std::__shared_weak_count **)(v6 + 72);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v8 + 384))(v8) + 112))
  {
    *a3 = 0;
    a3[1] = 0;
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  long long v11 = (char *)operator new(0xB0uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)long long v11 = &unk_1EE380770;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 5) = v11 + 48;
  *((void *)v11 + 4) = 0xFFFFFFFFLL;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 9) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = v11 + 72;
  *((void *)v11 + 3) = &unk_1EE3243F8;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *((void *)v11 + 21) = 0;
  *((_DWORD *)v11 + 8) = a2;
  *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v11 + 5, a2, &v18)+ 32) = 1;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 12);
  *((void *)v11 + 11) = v9;
  *((void *)v11 + 12) = v10;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v13 = *((void *)this + 3) + 56;
  uint64_t v17 = a2;
  long long v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, a2, &v17);
  std::string::operator=((std::string *)(v11 + 104), (const std::string *)v14[3]);
  uint64_t v15 = *((void *)this + 3) + 96;
  uint64_t v17 = a2;
  long long v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, a2, &v17);
  std::string::operator=((std::string *)(v11 + 128), (const std::string *)v16[3]);
  std::string::operator=((std::string *)(v11 + 152), (const std::string *)(*(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * a2) + 16));
  *a3 = v11 + 24;
  a3[1] = v11;
  if (v10) {
LABEL_14:
  }
    nitro::nitro_function::nitro_function(v10);
}

void sub_192845D94(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<rule_bake_batchnorm::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<rule_bake_batchnorm::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380770;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_bake_batchnorm::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void rule_bake_batchnorm::~rule_bake_batchnorm(rule_bake_batchnorm *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::gradient_builder::gradient_builder(uint64_t a1, uint64_t *a2, char *a3)
{
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v6 = *a3;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v6;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 40) = a1 + 48;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  if ((***(unsigned int (****)(void))(*(void *)(*a2 + 16) + 8))() != 80000) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("gradient_builder can be created only for networks on IR platform");
  }
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,std::shared_ptr<Espresso::net> &,void>(&v9, *a2, (std::__shared_weak_count *)a2[1]);
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v9;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return a1;
}

void sub_192845FB0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 - 8, v1[6]);
  uint64_t v5 = (std::__shared_weak_count *)v1[4];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  char v6 = (std::__shared_weak_count *)v1[1];
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::network_optimization_graph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3885E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::network_optimization_graph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3885E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::gradient_builder::preprocess_network(std::__shared_weak_count **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *this;
  uint64_t v5 = (std::__shared_weak_count *)(*this)[1].__vftable;
  v15[0] = (*this)->__shared_weak_owners_;
  v15[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *this;
  }
  int v6 = *(_DWORD *)(*(void *)v4[1].__shared_owners_ + 12);
  unint64_t v7 = this[1];
  v14[0] = v4;
  v14[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::optimize_network(v15, v6, (uint64_t)v14, &__block_literal_global_8345, a2);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v8 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "training");
  long long v16 = __p;
  long long v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v8 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16);
  MEMORY[0x192FF0F50]((char *)v9 + 56, "1");
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  long long v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = this[1];
  *this = (std::__shared_weak_count *)v8;
  this[1] = v10;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_19284618C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(void *)(v15 + 8)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v15 + 8));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso16gradient_builder18preprocess_networkEv_block_invoke(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE380658;
  int v6 = v4 + 3;
  unint64_t v7 = *(void **)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v4[3] = &unk_1EE35AF00;
  v4[4] = v7;
  v4[5] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v4[6] = *v7;
  uint64_t v9 = v7[1];
  v4[7] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    void *v6 = &unk_1EE322508;
    nitro::nitro_function::nitro_function(v8);
  }
  else
  {
    void *v6 = &unk_1EE322508;
  }
  unint64_t v10 = a2[2];
  long long v11 = (void *)a2[1];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = ((uint64_t)v11 - *a2) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v10 - *a2;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    long long v42 = a2 + 2;
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
    *(void *)&long long v18 = v6;
    *((void *)&v18 + 1) = v5;
    int v19 = &v17[16 * v13];
    long long v38 = v17;
    long long v39 = v19;
    long long v41 = &v17[16 * v20];
    *(_OWORD *)int v19 = v18;
    long long v40 = v19 + 16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v38);
    uint64_t v12 = (void *)a2[1];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v38);
  }
  else
  {
    void *v11 = v6;
    v11[1] = v5;
    uint64_t v12 = v11 + 2;
  }
  a2[1] = v12;
  std::string::size_type v21 = operator new(0x40uLL);
  uint64_t v22 = v21;
  v21[1] = 0;
  uint64_t v21[2] = 0;
  *std::string::size_type v21 = &unk_1EE380460;
  uint64_t v23 = v21 + 3;
  int v24 = *(void **)a1;
  int v25 = *(std::__shared_weak_count **)(a1 + 8);
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v21[3] = &unk_1EE35AF00;
  v21[4] = v24;
  v21[5] = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v21[6] = *v24;
  uint64_t v26 = v24[1];
  v21[7] = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  if (v25)
  {
    nitro::nitro_function::nitro_function(v25);
    *uint64_t v23 = &unk_1EE321838;
    nitro::nitro_function::nitro_function(v25);
  }
  else
  {
    *uint64_t v23 = &unk_1EE321838;
  }
  uint64_t v28 = (void *)a2[1];
  unint64_t v27 = a2[2];
  if ((unint64_t)v28 >= v27)
  {
    uint64_t v30 = ((uint64_t)v28 - *a2) >> 4;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = v27 - *a2;
    if (v32 >> 3 > v31) {
      unint64_t v31 = v32 >> 3;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    long long v42 = a2 + 2;
    uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v33);
    *(void *)&long long v35 = v23;
    *((void *)&v35 + 1) = v22;
    long long v36 = &v34[16 * v30];
    long long v38 = v34;
    long long v39 = v36;
    long long v41 = &v34[16 * v37];
    *(_OWORD *)long long v36 = v35;
    long long v40 = v36 + 16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v38);
    long long v29 = (void *)a2[1];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v38);
  }
  else
  {
    *uint64_t v28 = v23;
    v28[1] = v22;
    long long v29 = v28 + 2;
  }
  a2[1] = v29;
}

void sub_192846528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nitro::nitro_function::nitro_function(v6);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<rule_bake_batchnorm>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<rule_bake_batchnorm>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380460;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_bake_batchnorm>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::gradient_builder::net_training_transform@<X0>(const Espresso::net **this@<X0>, uint64_t a2@<X8>)
{
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  uint64_t v4 = *((void *)*this + 4);
  if (*((void *)*this + 5) != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      unint64_t v10 = (unsigned __int8 *)(*(void *)(v4 + v5) + 16);
      std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, v10, (long long **)&v10)[40] = 0;
      ++v6;
      uint64_t v4 = *((void *)*this + 4);
      v5 += 16;
    }
    while (v6 < (*((void *)*this + 5) - v4) >> 4);
  }
  Espresso::gradient_builder::net_training_transform(this, v8, a2);
  return std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)v8);
}

void sub_19284673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::gradient_builder::net_training_transform(const Espresso::net **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v51 = 0;
  *(void *)int v52 = 0;
  uint64_t v53 = 0;
  uint64_t v4 = *((void *)*a1 + 4);
  if (*((void *)*a1 + 5) == v4)
  {
    uint64_t v43 = 0;
    uint64_t v42 = 0;
    goto LABEL_97;
  }
  uint64_t v5 = (uint64_t *)a1;
  unint64_t v6 = 0;
  char v45 = (void *)(a3 + 16);
  do
  {
    uint64_t v7 = *(void *)(v4 + 16 * v6);
    if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a2, (unsigned __int8 *)(v7 + 16)))goto LABEL_85; {
    uint64_t v8 = *v5;
    }
    uint64_t v9 = *(void *)(*(void *)(*v5 + 32) + 16 * v6);
    unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a2, (unsigned __int8 *)(v7 + 16));
    if (!v10) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    Espresso::layer::layer_training_transform(v9, v8, v6, (uint64_t)(v10 + 40), &v48);
    unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100](v7 + 16);
    unint64_t v12 = v11;
    unint64_t v13 = *(void *)(a3 + 8);
    if (v13)
    {
      uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      unint64_t v15 = v14.u32[0];
      if (v14.u32[0] > 1uLL)
      {
        uint64_t v8 = v11;
        if (v11 >= v13) {
          uint64_t v8 = v11 % v13;
        }
      }
      else
      {
        uint64_t v8 = (v13 - 1) & v11;
      }
      unint64_t v16 = *(void ****)(*(void *)a3 + 8 * v8);
      if (v16)
      {
        uint64_t v17 = *v16;
        if (*v16)
        {
          while (1)
          {
            unint64_t v18 = (unint64_t)v17[1];
            if (v18 == v12)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v17 + 16, (unsigned __int8 *)(v7 + 16)))
              {
                uint64_t v5 = (uint64_t *)a1;
                goto LABEL_82;
              }
            }
            else
            {
              if (v15 > 1)
              {
                if (v18 >= v13) {
                  v18 %= v13;
                }
              }
              else
              {
                v18 &= v13 - 1;
              }
              if (v18 != v8)
              {
LABEL_21:
                uint64_t v5 = (uint64_t *)a1;
                goto LABEL_23;
              }
            }
            uint64_t v17 = (void **)*v17;
            if (!v17) {
              goto LABEL_21;
            }
          }
        }
      }
      uint64_t v5 = (uint64_t *)a1;
    }
LABEL_23:
    int v19 = (char *)operator new(0x58uLL);
    v54[0] = (void **)v19;
    v54[1] = (void **)(a3 + 16);
    char v55 = 0;
    *(void *)int v19 = 0;
    *((void *)v19 + 1) = v12;
    uint64_t v20 = (std::string *)(v19 + 16);
    if (*(char *)(v7 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(v7 + 16), *(void *)(v7 + 24));
    }
    else
    {
      long long v21 = *(_OWORD *)(v7 + 16);
      *((void *)v19 + 4) = *(void *)(v7 + 32);
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    }
    *(_OWORD *)(v19 + 72) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    char v55 = 1;
    float v22 = (float)(unint64_t)(*(void *)(a3 + 24) + 1);
    float v23 = *(float *)(a3 + 32);
    if (!v13 || (float)(v23 * (float)v13) < v22)
    {
      BOOL v24 = (v13 & (v13 - 1)) != 0;
      if (v13 < 3) {
        BOOL v24 = 1;
      }
      unint64_t v25 = v24 | (2 * v13);
      unint64_t v26 = vcvtps_u32_f32(v22 / v23);
      if (v25 <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      else {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v13 = *(void *)(a3 + 8);
      if (*(void *)&prime > v13) {
        goto LABEL_38;
      }
      if (*(void *)&prime < v13)
      {
        unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
        if (v13 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
        {
          unint64_t v34 = std::__next_prime(v34);
        }
        else
        {
          uint64_t v36 = 1 << -(char)__clz(v34 - 1);
          if (v34 >= 2) {
            unint64_t v34 = v36;
          }
        }
        if (*(void *)&prime <= v34) {
          int8x8_t prime = (int8x8_t)v34;
        }
        if (*(void *)&prime >= v13)
        {
          unint64_t v13 = *(void *)(a3 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_38:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v28 = operator new(8 * *(void *)&prime);
            long long v29 = *(void **)a3;
            *(void *)a3 = v28;
            if (v29) {
              operator delete(v29);
            }
            uint64_t v30 = 0;
            *(int8x8_t *)(a3 + 8) = prime;
            do
              *(void *)(*(void *)a3 + 8 * v30++) = 0;
            while (*(void *)&prime != v30);
            unint64_t v31 = (void *)*v45;
            if (*v45)
            {
              unint64_t v32 = v31[1];
              uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
              v33.i16[0] = vaddlv_u8(v33);
              if (v33.u32[0] > 1uLL)
              {
                if (v32 >= *(void *)&prime) {
                  v32 %= *(void *)&prime;
                }
              }
              else
              {
                v32 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a3 + 8 * v32) = v45;
              uint64_t v37 = (void *)*v31;
              if (*v31)
              {
                do
                {
                  unint64_t v38 = v37[1];
                  if (v33.u32[0] > 1uLL)
                  {
                    if (v38 >= *(void *)&prime) {
                      v38 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v38 &= *(void *)&prime - 1;
                  }
                  if (v38 != v32)
                  {
                    if (!*(void *)(*(void *)a3 + 8 * v38))
                    {
                      *(void *)(*(void *)a3 + 8 * v38) = v31;
                      goto LABEL_63;
                    }
                    *unint64_t v31 = *v37;
                    *uint64_t v37 = **(void **)(*(void *)a3 + 8 * v38);
                    **(void **)(*(void *)a3 + 8 * v38) = v37;
                    uint64_t v37 = v31;
                  }
                  unint64_t v38 = v32;
LABEL_63:
                  unint64_t v31 = v37;
                  uint64_t v37 = (void *)*v37;
                  unint64_t v32 = v38;
                }
                while (v37);
              }
            }
            unint64_t v13 = (unint64_t)prime;
            goto LABEL_67;
          }
          long long v41 = *(void **)a3;
          *(void *)a3 = 0;
          if (v41) {
            operator delete(v41);
          }
          unint64_t v13 = 0;
          *(void *)(a3 + 8) = 0;
        }
      }
LABEL_67:
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v12 >= v13) {
          uint64_t v8 = v12 % v13;
        }
        else {
          uint64_t v8 = v12;
        }
      }
      else
      {
        uint64_t v8 = (v13 - 1) & v12;
      }
    }
    long long v39 = *(void ***)(*(void *)a3 + 8 * v8);
    uint64_t v17 = v54[0];
    if (v39)
    {
      *v54[0] = *v39;
    }
    else
    {
      *v54[0] = *(void **)(a3 + 16);
      *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v17;
      *(void *)(*(void *)a3 + 8 * v8) = v45;
      if (!*v17) {
        goto LABEL_81;
      }
      unint64_t v40 = *((void *)*v17 + 1);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v40 >= v13) {
          v40 %= v13;
        }
      }
      else
      {
        v40 &= v13 - 1;
      }
      long long v39 = (void **)(*(void *)a3 + 8 * v40);
    }
    *long long v39 = v17;
LABEL_81:
    v54[0] = 0;
    ++*(void *)(a3 + 24);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
LABEL_82:
    if (v17 + 5 != (void **)&v48)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v17 + 5), (std::string *)v48, *((std::string **)&v48 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v48 + 1) - v48) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v17 + 8), v49, v50, 0xAAAAAAAAAAAAAAABLL * (((char *)v50 - (char *)v49) >> 3));
    }
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v51, *(uint64_t *)v52, (std::string *)v48, *((std::string **)&v48 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v48 + 1) - v48) >> 3));
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v51, *(uint64_t *)v52, v49, v50, 0xAAAAAAAAAAAAAAABLL * (((char *)v50 - (char *)v49) >> 3));
    v54[0] = (void **)&v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
    v54[0] = (void **)&v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
LABEL_85:
    ++v6;
    uint64_t v4 = *(void *)(*v5 + 32);
  }
  while (v6 < (*(void *)(*v5 + 40) - v4) >> 4);
  uint64_t v42 = v51;
  uint64_t v43 = *(void *)v52;
LABEL_97:
  memset(v47, 0, sizeof(v47));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v47, v42, v43, 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3));
  Espresso::gradient_builder::transform_parameter_inputs_as_globals(a1, v47);
  *(void *)&long long v48 = v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  *(void *)&long long v48 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
}

void sub_192846D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)&a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table(v22);
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::transform_parameter_inputs_as_globals(const Espresso::net **a1, uint64_t *a2)
{
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v65);
  uint64_t v4 = v65;
  uint64_t v6 = *((void *)*a1 + 2);
  uint64_t v5 = *((void *)*a1 + 3);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 24);
  *(void *)(v4 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v6;
  *(void *)(v4 + 24) = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = v66;
  v55[0] = v4;
  v55[1] = (uint64_t)v66;
  if (v66) {
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a1;
  unint64_t v10 = (std::__shared_weak_count *)*((void *)*a1 + 3);
  v54[0] = *((void *)*a1 + 2);
  v54[1] = (uint64_t)v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *a1;
  }
  int v11 = *(_DWORD *)(**((void **)v9 + 4) + 12);
  v53[0] = 0;
  v53[1] = 0;
  Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)&v56, v55, v54, v11, v53);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  Espresso::net::copy_parameters_from(v60, *a1);
  memset(v51, 0, sizeof(v51));
  int v52 = 1065353216;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  if (*a2 != v13)
  {
    while (1)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v51, v12, v12);
      if (*(char *)(v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v12;
        *(void *)&__str[16] = *(void *)(v12 + 16);
        *(_OWORD *)std::string __str = v14;
      }
      uint64_t v15 = (uint64_t)*a1 + 136;
      uint64_t v44 = (char **)v12;
      unint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)v12, (long long **)&v44);
      uint64_t v18 = *((void *)v16 + 5);
      uint64_t v17 = (std::__shared_weak_count *)*((void *)v16 + 6);
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((void *)*a1 + 17, (unsigned __int8 *)v12);
        uint64_t v47 = v18;
        long long v48 = v17;
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((void *)*a1 + 17, (unsigned __int8 *)v12);
        uint64_t v47 = v18;
        long long v48 = 0;
      }
      if ((__str[23] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
      }
      else {
        std::string v46 = *(std::string *)__str;
      }
      Espresso::sequential_builder::load_global_op((std::string *)__str, &v46, &v56, &v47, (uint64_t)&__p);
      if (v50 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v17) {
        goto LABEL_27;
      }
LABEL_28:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      v12 += 24;
      if (v12 == v13) {
        goto LABEL_34;
      }
    }
    operator delete(v46.__r_.__value_.__l.__data_);
    if (!v17) {
      goto LABEL_28;
    }
LABEL_27:
    nitro::nitro_function::nitro_function(v17);
    nitro::nitro_function::nitro_function(v17);
    goto LABEL_28;
  }
LABEL_34:
  v45[0] = 0;
  v45[1] = 0;
  uint64_t v44 = v45;
  int v19 = (void *)*((void *)*a1 + 29);
  uint64_t v20 = (uint64_t)*a1 + 240;
  if (v19 != (void *)v20)
  {
    do
    {
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v51, (uint64_t)(v19 + 4)))
      {
        uint64_t v21 = (uint64_t)*a1 + 136;
        v37[0] = (const std::string *)(v19 + 4);
        uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (unsigned __int8 *)v19 + 32, (long long **)v37);
        Espresso::abstract_blob_container::shape(__str, *((void *)v22 + 5));
        v37[0] = (const std::string *)(v19 + 4);
        float v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v44, v19 + 4, (long long **)v37);
        long long v24 = *(_OWORD *)&__str[16];
        *(_OWORD *)(v23 + 56) = *(_OWORD *)__str;
        *(_OWORD *)(v23 + 72) = v24;
        *((void *)v23 + 11) = v41;
        unint64_t v25 = (void *)*((void *)v23 + 12);
        if (v25)
        {
          *((void *)v23 + 13) = v25;
          operator delete(v25);
          *((void *)v23 + 12) = 0;
          *((void *)v23 + 13) = 0;
          *((void *)v23 + 14) = 0;
        }
        *((_OWORD *)v23 + 6) = v42;
        *((void *)v23 + 14) = v43;
      }
      unint64_t v26 = (void *)v19[1];
      if (v26)
      {
        do
        {
          unint64_t v27 = v26;
          unint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          unint64_t v27 = (void *)v19[2];
          BOOL v28 = *v27 == (void)v19;
          int v19 = v27;
        }
        while (!v28);
      }
      int v19 = v27;
    }
    while (v27 != (void *)v20);
  }
  *(_OWORD *)&__str[8] = 0uLL;
  *(void *)std::string __str = &__str[8];
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v56, (uint64_t)__str, &v38);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  memset(v37, 0, sizeof(v37));
  long long v29 = (std::__shared_weak_count *)a1[1];
  v36[0] = *a1;
  v36[1] = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::sequential_builder::add_network((uint64_t)&v56, v36, v37);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  v35[0] = 0;
  v35[1] = 0;
  Espresso::net::setup_script((uint64_t)v60, v35, 0);
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v56, (uint64_t)&v44, &v34);
  uint64_t v30 = (const Espresso::net *)v34;
  unint64_t v31 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v34;
  if (v31)
  {
    nitro::nitro_function::nitro_function(v31);
    unint64_t v32 = *a1;
  }
  else
  {
    unint64_t v32 = v30;
  }
  v33[0] = 0;
  v33[1] = 0;
  Espresso::net::setup_script((uint64_t)v32, v33, 0);
  *(void *)&long long v34 = v37;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__str, *(char **)&__str[8]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v44, v45[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v51);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v64);
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v59 < 0) {
    operator delete(v58[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v58, v58[1]);
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
}

void sub_19284727C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,char *a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,char a35,char *a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  a11 = &a18;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a23, a24);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a35, a36);
  char v62 = *(std::__shared_weak_count **)(v60 - 88);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a49);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a60);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::build_gradient(Espresso::gradient_builder *this@<X0>, Espresso::net **a2@<X8>)
{
  uint64_t v2 = this;
  *(void *)&long long v1190 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&v1168[8] = 0uLL;
  *(void *)v1168 = &v1168[8];
  *(void *)&v1168[40] = 0;
  *(void *)&v1168[32] = 0;
  *(void *)&v1168[24] = &v1168[32];
  uint64_t v3 = *(long long **)(*(void *)this + 152);
  if (v3)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)v1163, v3 + 1);
      Espresso::abstract_blob_container::shape((char *)&v1133, *(uint64_t *)&v1163[24]);
      std::string __p = v1163;
      uint64_t v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v1168, v1163, (long long **)&__p);
      long long v6 = v1134;
      *(_OWORD *)(v5 + 56) = v1133;
      *(_OWORD *)(v5 + 72) = v6;
      *((void *)v5 + 11) = v1135;
      uint64_t v7 = (void *)*((void *)v5 + 12);
      if (v7)
      {
        *((void *)v5 + 13) = v7;
        operator delete(v7);
        *((void *)v5 + 12) = 0;
        *((void *)v5 + 13) = 0;
        *((void *)v5 + 14) = 0;
      }
      *((_OWORD *)v5 + 6) = v1136;
      *((void **)v5 + 14) = v1137[0];
      Espresso::abstract_blob_container::shape((char *)&v1133, *(uint64_t *)&v1163[24]);
      if (v1163[23] >= 0) {
        size_t v8 = v1163[23];
      }
      else {
        size_t v8 = *(void *)&v1163[8];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 5);
      if (v1122 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v8)
      {
        if (v1163[23] >= 0) {
          unint64_t v10 = v1163;
        }
        else {
          unint64_t v10 = *(unsigned char **)v1163;
        }
        memmove(p_p, v10, v8);
      }
      strcpy((char *)p_p + v8, "_diff");
      v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      int v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v1168, &__p, v1184);
      uint64_t v12 = (void *)*((void *)v11 + 12);
      long long v13 = v1134;
      *(_OWORD *)((char *)v11 + 56) = v1133;
      *(_OWORD *)((char *)v11 + 72) = v13;
      *((void *)v11 + 11) = v1135;
      if (v12)
      {
        *((void *)v11 + 13) = v12;
        operator delete(v12);
        *((void *)v11 + 12) = 0;
        *((void *)v11 + 13) = 0;
        *((void *)v11 + 14) = 0;
      }
      v11[6] = v1136;
      *((void **)v11 + 14) = v1137[0];
      v1137[0] = 0;
      long long v1136 = 0uLL;
      if (SHIBYTE(v1122) < 0)
      {
        operator delete(__p);
        if ((void)v1136)
        {
          *((void *)&v1136 + 1) = v1136;
          operator delete((void *)v1136);
        }
      }
      if (*(void *)&v1163[32]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1163[32]);
      }
      if ((v1163[23] & 0x80000000) != 0) {
        operator delete(*(void **)v1163);
      }
      uint64_t v3 = *(long long **)v3;
    }
    while (v3);
    long long v14 = *(char **)&v1168[32];
    uint64_t v2 = this;
  }
  else
  {
    long long v14 = 0;
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v1168[24], v14);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v1168, *(char **)&v1168[8]);
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,std::shared_ptr<Espresso::net> &,void>(&v1133, *(void *)v2, *((std::__shared_weak_count **)v2 + 1));
  uint64_t v15 = (std::__shared_weak_count *)*((void *)v2 + 4);
  *(_OWORD *)((char *)v2 + 24) = v1133;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  uint64_t v16 = *(void *)v2;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v2 + 1);
  v1132[0] = *(void *)v2;
  v1132[1] = (uint64_t)v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = *(void *)v2;
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 24);
  v1131[0] = *(void *)(v16 + 16);
  v1131[1] = (uint64_t)v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = *(void *)v2;
  }
  int v19 = *(_DWORD *)(**(void **)(v16 + 32) + 12);
  v1130[1] = 0;
  v1130[0] = 0;
  Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)&v1133, v1132, v1131, v19, v1130);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  uint64_t v20 = *(void *)v2;
  unint64_t v21 = *(void *)(*(void *)v2 + 40) - *(void *)(*(void *)v2 + 32);
  v1127 = &v1127;
  v1128 = &v1127;
  uint64_t v1129 = 0;
  v1126[1] = 0;
  v1126[0] = 0;
  v1125 = (uint64_t *)v1126;
  *(_DWORD *)v1163 = 0;
  v934 = v2;
  if ((int)(v21 >> 4) >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = (v21 >> 4);
    do
    {
      unint64_t v25 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)v2 + 3) + 16), v23, v1163);
      if (v25[6] == v25[5])
      {
        unint64_t v26 = operator new(0x18uLL);
        v26[4] = v23;
        unint64_t v27 = v1127;
        *(void *)unint64_t v26 = v1127;
        *((void *)v26 + 1) = &v1127;
        v27[1] = v26;
        v1127 = v26;
        ++v1129;
        *(void *)v1168 = v22 | v23;
        *((unsigned char *)std::__tree<std::__value_type<std::pair<int,int>,BOOL>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,BOOL>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,BOOL>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v1125, v23, v23, v1168)+ 36) = 1;
      }
      *(_DWORD *)v1163 = ++v23;
      v22 += 0x100000000;
    }
    while (v24 != v23);
    uint64_t v20 = *(void *)v2;
  }
  v1121 = 0;
  std::string __p = &v1121;
  v1124[1] = 0;
  v1124[0] = 0;
  uint64_t v1122 = 0;
  v1123 = v1124;
  for (uint64_t i = *(long long **)(v20 + 152); i; uint64_t i = *(long long **)i)
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)v1163, i + 1);
    Espresso::abstract_blob_container::shape(v1168, *(uint64_t *)&v1163[24]);
    v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1163;
    long long v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, v1163, (long long **)v1184);
    long long v30 = *(_OWORD *)&v1168[16];
    *(_OWORD *)(v29 + 56) = *(_OWORD *)v1168;
    *(_OWORD *)(v29 + 72) = v30;
    *((void *)v29 + 11) = *(void *)&v1168[32];
    unint64_t v31 = (void *)*((void *)v29 + 12);
    if (v31)
    {
      *((void *)v29 + 13) = v31;
      operator delete(v31);
      *((void *)v29 + 12) = 0;
      *((void *)v29 + 13) = 0;
      *((void *)v29 + 14) = 0;
    }
    *((_OWORD *)v29 + 6) = *(_OWORD *)&v1168[40];
    *((void *)v29 + 14) = *(void *)&v1168[56];
    Espresso::abstract_blob_container::shape(v1168, *(uint64_t *)&v1163[24]);
    if (v1163[23] >= 0) {
      size_t v32 = v1163[23];
    }
    else {
      size_t v32 = *(void *)&v1163[8];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v1184, v32 + 5);
    if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint8x8_t v33 = v1184;
    }
    else {
      uint8x8_t v33 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
    }
    if (v32)
    {
      if (v1163[23] >= 0) {
        long long v34 = v1163;
      }
      else {
        long long v34 = *(unsigned char **)v1163;
      }
      memmove(v33, v34, v32);
    }
    strcpy((char *)v33 + v32, "_diff");
    __n[0] = (std::string::size_type)v1184;
    uint8x8_t v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v1184, (_OWORD **)__n);
    uint64_t v36 = (void *)*((void *)v35 + 12);
    long long v37 = *(_OWORD *)&v1168[16];
    *(_OWORD *)((char *)v35 + 56) = *(_OWORD *)v1168;
    *(_OWORD *)((char *)v35 + 72) = v37;
    *((void *)v35 + 11) = *(void *)&v1168[32];
    if (v36)
    {
      *((void *)v35 + 13) = v36;
      operator delete(v36);
      *((void *)v35 + 12) = 0;
      *((void *)v35 + 13) = 0;
      *((void *)v35 + 14) = 0;
    }
    v35[6] = *(_OWORD *)&v1168[40];
    *((void *)v35 + 14) = *(void *)&v1168[56];
    memset(&v1168[40], 0, 24);
    if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1184[0].__r_.__value_.__l.__data_);
      if (*(void *)&v1168[40])
      {
        *(void *)&v1168[48] = *(void *)&v1168[40];
        operator delete(*(void **)&v1168[40]);
      }
    }
    if (*(void *)&v1163[32]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1163[32]);
    }
    if ((v1163[23] & 0x80000000) != 0) {
      operator delete(*(void **)v1163);
    }
  }
  v1119[1] = 0;
  v1119[0] = 0;
  v1118 = (uint64_t *)v1119;
  uint64_t v38 = (std::__shared_weak_count *)*((void *)&v1143 + 1);
  if (*((void *)&v1143 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v917 = v38;
  *(_DWORD *)v1168 = 0;
  Espresso::create_context((int *)v1168, &v1116);
  if (v1129)
  {
    __asm { FMOV            V9.2S, #1.0 }
    while (1)
    {
      int v1115 = *((_DWORD *)v1128 + 4);
      unint64_t v43 = v1115;
      uint64_t v44 = (uint64_t *)(*(void *)(*(void *)v934 + 32) + 16 * v1115);
      uint64_t v45 = *v44;
      std::string v46 = (std::__shared_weak_count *)v44[1];
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v48 = *(const void **)(v45 + 64);
      uint64_t v47 = *(std::__shared_weak_count **)(v45 + 72);
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v931 = v47;
      uint64_t v932 = v45;
      if (*(char *)(v45 + 39) >= 0) {
        size_t v49 = *(unsigned __int8 *)(v45 + 39);
      }
      else {
        size_t v49 = *(void *)(v45 + 24);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v1112, v49 + 5);
      v930 = v46;
      if ((v1114 & 0x80u) == 0) {
        char v50 = &v1112;
      }
      else {
        char v50 = v1112;
      }
      if (v49)
      {
        if (*(char *)(v932 + 39) >= 0) {
          uint64_t v51 = (const void *)(v932 + 16);
        }
        else {
          uint64_t v51 = *(const void **)(v932 + 16);
        }
        memmove(v50, v51, v49);
      }
      strcpy((char *)v50 + v49, "_diff");
      uint64_t v52 = *(void *)v934 + 56;
      *(void *)v1168 = v43;
      uint64_t v53 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v52, v43, v1168)[3];
      if (*((char *)v53 + 23) >= 0) {
        size_t v54 = *((unsigned __int8 *)v53 + 23);
      }
      else {
        size_t v54 = (size_t)v53[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v54 + 5);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v54)
      {
        if (*((char *)v53 + 23) >= 0) {
          uint64_t v56 = v53;
        }
        else {
          uint64_t v56 = *v53;
        }
        memmove(p_str, v56, v54);
      }
      strcpy((char *)p_str + v54, "_diff");
      int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        BOOL v58 = &__str;
      }
      else
      {
        int64_t size = __str.__r_.__value_.__l.__size_;
        BOOL v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (size >= 10)
      {
        char v59 = (std::string *)((char *)v58 + size);
        uint64_t v60 = v58;
        while (1)
        {
          uint64_t v61 = (std::string *)memchr(v60, 95, size - 9);
          if (!v61) {
            goto LABEL_118;
          }
          _ZF = v61->__r_.__value_.__r.__words[0] == 0x70635F78745F5F5FLL
             && LOWORD(v61->__r_.__value_.__r.__words[1]) == 24437;
          if (_ZF) {
            break;
          }
          uint64_t v60 = (std::string *)((char *)&v61->__r_.__value_.__l.__data_ + 1);
          int64_t size = (char *)v59 - (char *)v60;
          if ((char *)v59 - (char *)v60 < 10) {
            goto LABEL_118;
          }
        }
        if (v61 != v59 && v61 == v58)
        {
          std::string::basic_string[abi:ne180100]<0>(v1163, "___tx_cpu_");
          if (v1163[23] >= 0) {
            std::string::size_type v63 = v1163[23];
          }
          else {
            std::string::size_type v63 = *(void *)&v1163[8];
          }
          std::string::basic_string((std::string *)v1168, &__str, v63, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v1184);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = *(std::string *)v1168;
          v1168[23] = 0;
          v1168[0] = 0;
          if ((v1163[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1163);
          }
        }
      }
LABEL_118:
      uint64_t v64 = *(void *)v934 + 96;
      *(void *)v1168 = v43;
      uint64_t v65 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v64, v43, v1168)[3];
      if (*((char *)v65 + 23) >= 0) {
        size_t v66 = *((unsigned __int8 *)v65 + 23);
      }
      else {
        size_t v66 = (size_t)v65[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__s, v66 + 5);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s = &__s;
      }
      else {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v66)
      {
        if (*((char *)v65 + 23) >= 0) {
          long long v68 = v65;
        }
        else {
          long long v68 = *v65;
        }
        memmove(p_s, v68, v66);
      }
      strcpy((char *)p_s + v66, "_diff");
      uint64_t v69 = *(void *)v934 + 56;
      *(void *)v1168 = v43;
      long long v70 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v69, v43, v1168)[3];
      if (*((char *)v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1109, *(const std::string::value_type **)v70, *((void *)v70 + 1));
      }
      else
      {
        long long v71 = *v70;
        v1109.__r_.__value_.__r.__words[2] = *((void *)v70 + 2);
        *(_OWORD *)&v1109.__r_.__value_.__l.__data_ = v71;
      }
      uint64_t v72 = *(void *)v934 + 96;
      *(void *)v1168 = v43;
      long long v73 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v72, v43, v1168)[3];
      if (*((char *)v73 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1108, *(const std::string::value_type **)v73, *((void *)v73 + 1));
      }
      else
      {
        long long v74 = *v73;
        v1108.__r_.__value_.__r.__words[2] = *((void *)v73 + 2);
        *(_OWORD *)&v1108.__r_.__value_.__l.__data_ = v74;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v1107, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v1107 = __str;
      }
      if (v48)
      {
        BOOL v76 = v75 != 0;
        if (v75 && v931)
        {
          BOOL v76 = 1;
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
          nitro::nitro_function::nitro_function(v931);
        }
      }
      else
      {
        BOOL v76 = 0;
      }
      uint64_t v77 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v1119[0], &__str);
      if (!v76 && v77)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v78 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v78 = __str.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v1168, v78 + 1);
        if (v1168[23] >= 0) {
          std::string v79 = v1168;
        }
        else {
          std::string v79 = *(unsigned char **)v1168;
        }
        if (v78)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v80 = &__str;
          }
          else {
            uint64_t v80 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          memmove(v79, v80, v78);
        }
        *(_WORD *)&v79[v78] = 64;
        __n[0] = (std::string::size_type)&__str;
        std::string v81 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v1118, &__str, (long long **)__n);
        std::to_string((std::string *)v1163, *((_DWORD *)v81 + 14) + 1);
        if (v1163[23] >= 0) {
          long long v82 = v1163;
        }
        else {
          long long v82 = *(const std::string::value_type **)v1163;
        }
        if (v1163[23] >= 0) {
          std::string::size_type v83 = v1163[23];
        }
        else {
          std::string::size_type v83 = *(void *)&v1163[8];
        }
        unint64_t v84 = std::string::append((std::string *)v1168, v82, v83);
        std::string::size_type v85 = v84->__r_.__value_.__r.__words[0];
        v1184[0].__r_.__value_.__r.__words[0] = v84->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v1184[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
        char v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[0] = v85;
        __str.__r_.__value_.__l.__size_ = v1184[0].__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1184[0].__r_.__value_.__r.__words + 7);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v86;
        if ((v1163[23] & 0x80000000) != 0) {
          operator delete(*(void **)v1163);
        }
        if ((v1168[23] & 0x80000000) != 0) {
          operator delete(*(void **)v1168);
        }
        uint64_t v87 = *(void *)v934;
        uint64_t v88 = *(void *)v934 + 56;
        v1184[0].__r_.__value_.__r.__words[0] = v43;
        *(void *)v1163 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v88, v43, v1184)[3];
        int v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87 + 136, *(unsigned __int8 **)v1163, (long long **)v1163);
        Espresso::abstract_blob_container::shape(v1168, *((void *)v89 + 5));
        *(void *)v1163 = &__str;
        int v90 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, &__str, (long long **)v1163);
        long long v91 = *(_OWORD *)&v1168[16];
        *(_OWORD *)(v90 + 56) = *(_OWORD *)v1168;
        *(_OWORD *)(v90 + 72) = v91;
        *((void *)v90 + 11) = *(void *)&v1168[32];
        int v92 = (void *)*((void *)v90 + 12);
        if (v92)
        {
          *((void *)v90 + 13) = v92;
          operator delete(v92);
          *((void *)v90 + 12) = 0;
          *((void *)v90 + 13) = 0;
          *((void *)v90 + 14) = 0;
        }
        *((_OWORD *)v90 + 6) = *(_OWORD *)&v1168[40];
        *((void *)v90 + 14) = *(void *)&v1168[56];
      }
      uint64_t v93 = *(void *)(v932 + 64);
      uint64_t v94 = *(std::__shared_weak_count **)(v93 + 16);
      uint64_t v923 = *(void *)(v93 + 8);
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      lpsrc = (void *)v48;
      int v924 = *(_DWORD *)(v932 + 12);
      long long v921 = v1143;
      if (*((void *)&v1143 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unsigned int v95 = (void **)__src_8[0];
      unsigned int v96 = (void **)*((void *)&v1145 + 1);
      uint64_t v97 = (uint64_t)__src_8[0] - *((void *)&v1145 + 1);
      unint64_t v98 = ((uint64_t)__src_8[0] - *((void *)&v1145 + 1)) >> 3;
      int v922 = v1144;
      uint64_t v99 = __src_8[0] == *((void **)&v1145 + 1) ? 0 : 170 * v98 - 1;
      uint64_t v100 = v1148;
      unint64_t v101 = v1148 + v1147;
      if (v99 == v1148 + v1147) {
        break;
      }
LABEL_259:
      unint64_t v179 = (unint64_t)v96[v101 / 0xAA] + 24 * (v101 % 0xAA);
      *(_OWORD *)unint64_t v179 = v921;
      *(_DWORD *)(v179 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v922;
      uint64_t v1148 = v100 + 1;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v180 = (std::__shared_weak_count *)*((void *)&v1143 + 1);
      *(void *)&long long v1143 = v923;
      *((void *)&v1143 + 1) = v94;
      if (v180) {
        nitro::nitro_function::nitro_function(v180);
      }
      int v1144 = v924;
      if (v94) {
        nitro::nitro_function::nitro_function(v94);
      }
      if (!lpsrc)
      {
LABEL_2217:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "not implemented");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v181)
      {
        uint64_t v182 = v181;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v183 = (*(uint64_t (**)(void *))(*(void *)v181 + 384))(v181);
        long long v184 = *(_OWORD *)v183;
        long long v185 = *(_OWORD *)(v183 + 16);
        *(_OWORD *)&v1168[32] = *(_OWORD *)(v183 + 32);
        *(_OWORD *)&v1168[16] = v185;
        *(_OWORD *)v1168 = v184;
        long long v186 = *(_OWORD *)(v183 + 48);
        long long v187 = *(_OWORD *)(v183 + 64);
        long long v188 = *(_OWORD *)(v183 + 80);
        long long v1171 = *(_OWORD *)(v183 + 96);
        long long v1170 = v188;
        long long v1169 = v187;
        *(_OWORD *)&v1168[48] = v186;
        long long v189 = *(_OWORD *)(v183 + 112);
        long long v190 = *(_OWORD *)(v183 + 128);
        long long v191 = *(_OWORD *)(v183 + 144);
        uint64_t v1175 = *(void *)(v183 + 160);
        long long v1174 = v191;
        long long v1173 = v190;
        long long v1172 = v189;
        if (!*(void *)&v1168[24])
        {
LABEL_430:
          if (v1172)
          {
            *(void *)&v1163[4] = 0;
            *(void *)&v1163[12] = 0x3F6666663727C5ACLL;
            *(_WORD *)&v1163[20] = 0;
            *(_OWORD *)&v1163[24] = 0u;
            long long v1164 = 0u;
            uint64_t v1166 = 0;
            uint64_t v1167 = 0x200000000;
            *(_DWORD *)v1163 = *(_DWORD *)&v1168[40];
            int v1165 = 1065353216;
            *(_DWORD *)&v1163[32] = 1;
            if ((v1114 & 0x80u) == 0) {
              size_t v241 = v1114;
            }
            else {
              size_t v241 = v1113;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)__n, v241 + 4);
            if ((SBYTE7(v1179) & 0x80u) == 0) {
              unint64_t v242 = __n;
            }
            else {
              unint64_t v242 = (std::string::size_type *)__n[0];
            }
            if (v241)
            {
              if ((v1114 & 0x80u) == 0) {
                unint64_t v243 = &v1112;
              }
              else {
                unint64_t v243 = v1112;
              }
              memmove(v242, v243, v241);
            }
            strcpy((char *)v242 + v241, "_dbn");
            memset(v1184, 0, 24);
            v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1184;
            v1189.__r_.__value_.__s.__data_[8] = 0;
            v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
            v1184[0].__r_.__value_.__l.__size_ = v1184[0].__r_.__value_.__r.__words[0];
            v1184[0].__r_.__value_.__r.__words[2] = v1184[0].__r_.__value_.__r.__words[0] + 24;
            v1184[0].__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1184[0].__r_.__value_.__r.__words[2], (long long *)__n, (long long *)((char *)&v1179 + 8), (std::string *)v1184[0].__r_.__value_.__l.__data_);
            if (SBYTE7(v1179) < 0) {
              operator delete((void *)__n[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__n, "batchnorm_grad");
            if ((v1114 & 0x80u) == 0) {
              size_t v244 = v1114;
            }
            else {
              size_t v244 = v1113;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v1189, v244 + 3);
            if ((v1189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v245 = &v1189;
            }
            else {
              uint64_t v245 = (std::string *)v1189.__r_.__value_.__r.__words[0];
            }
            if (v244)
            {
              if ((v1114 & 0x80u) == 0) {
                v246 = &v1112;
              }
              else {
                v246 = v1112;
              }
              memmove(v245, v246, v244);
            }
            *(_DWORD *)((char *)&v245->__r_.__value_.__l.__data_ + v244) = 7234143;
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v1187, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v1187 = __s;
            }
            v1089 = 0;
            v1088 = 0;
            v1090 = 0;
            v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1088;
            v1185.__r_.__value_.__s.__data_[8] = 0;
            v1088 = (std::string *)operator new(0x18uLL);
            v1089 = v1088;
            v1090 = v1088 + 1;
            v1089 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1090, (long long *)&v1187, (long long *)&v1188, v1088);
            memset(v1087, 0, sizeof(v1087));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1087, (uint64_t)v1184[0].__r_.__value_.__l.__data_, v1184[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1184[0].__r_.__value_.__l.__size_ - v1184[0].__r_.__value_.__r.__words[0]) >> 3));
            add_with_context_transfers_t<Espresso::generic_batchnorm_grad_kernel,Espresso::batchnorm_params>(&v1154, (uint64_t)&v1133, (uint64_t)__n, (uint64_t)&v1189, (uint64_t)v1163, (uint64_t)v1088, (uint64_t)v1089, v1087);
            v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)v1087;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1185);
            v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1088;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1185);
            if (SHIBYTE(v1187.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1187.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1189.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1189.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v1179) < 0) {
              operator delete((void *)__n[0]);
            }
            (*(void (**)(std::string::size_type *__return_ptr, void *, uint64_t))(*(void *)v182 + 320))(__n, v182, 1);
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>((uint64_t *)(v1154.__r_.__value_.__r.__words[0] + 280), (uint64_t *)__n, (uint64_t *)&v1179, 1uLL);
            if (__n[1]) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)__n[1]);
            }
            std::string::operator=(&__s, (const std::string *)v1184[0].__r_.__value_.__l.__data_);
            if (v1154.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1154.__r_.__value_.__l.__size_);
            }
            __n[0] = (std::string::size_type)v1184;
            int v253 = (std::string *)__n;
          }
          else
          {
            if (!*(_DWORD *)&v1168[32]) {
              goto LABEL_509;
            }
            v1154.__r_.__value_.__s.__data_[4] = 0;
            LODWORD(v1154.__r_.__value_.__l.__data_) = *(_DWORD *)&v1168[40];
            if ((v1114 & 0x80u) == 0) {
              size_t v247 = v1114;
            }
            else {
              size_t v247 = v1113;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v1184, v247 + 6);
            if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v248 = v1184;
            }
            else {
              v248 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
            }
            if (v247)
            {
              if ((v1114 & 0x80u) == 0) {
                unint64_t v249 = &v1112;
              }
              else {
                unint64_t v249 = v1112;
              }
              memmove(v248, v249, v247);
            }
            strcpy((char *)v248 + v247, "_dbias");
            memset(v1163, 0, 24);
            __n[0] = (std::string::size_type)v1163;
            LOBYTE(__n[1]) = 0;
            *(void *)v1163 = operator new(0x18uLL);
            *(void *)&v1163[8] = *(void *)v1163;
            *(void *)&v1163[16] = *(void *)v1163 + 24;
            *(void *)&v1163[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1163[16], (long long *)v1184, (long long *)&v1184[1], *(std::string **)v1163);
            if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1184[0].__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(v1184, "bias_grad");
            if ((v1114 & 0x80u) == 0) {
              size_t v250 = v1114;
            }
            else {
              size_t v250 = v1113;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)__n, v250 + 5);
            if ((SBYTE7(v1179) & 0x80u) == 0) {
              unint64_t v251 = __n;
            }
            else {
              unint64_t v251 = (std::string::size_type *)__n[0];
            }
            if (v250)
            {
              if ((v1114 & 0x80u) == 0) {
                float v252 = &v1112;
              }
              else {
                float v252 = v1112;
              }
              memmove(v251, v252, v250);
            }
            strcpy((char *)v251 + v250, "_bias");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v1189, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v1189 = __s;
            }
            v1085 = 0;
            v1084 = 0;
            v1086 = 0;
            v1187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1084;
            v1187.__r_.__value_.__s.__data_[8] = 0;
            v1084 = (std::string *)operator new(0x18uLL);
            v1085 = v1084;
            v1086 = v1084 + 1;
            v1085 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1086, (long long *)&v1189, &v1190, v1084);
            memset(v1083, 0, sizeof(v1083));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1083, *(uint64_t *)v1163, *(uint64_t *)&v1163[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v1163[8] - *(void *)v1163) >> 3));
            add_with_context_transfers_t<Espresso::generic_bias_grad_kernel,Espresso::bias_params>(&v1185, (uint64_t)&v1133, (uint64_t)v1184, (uint64_t)__n, (uint64_t)&v1154, (uint64_t)v1084, (uint64_t)v1085, v1083);
            v1187.__r_.__value_.__r.__words[0] = (std::string::size_type)v1083;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1187);
            v1187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1084;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1187);
            if (SHIBYTE(v1189.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1189.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v1179) < 0) {
              operator delete((void *)__n[0]);
            }
            if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1184[0].__r_.__value_.__l.__data_);
            }
            (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*(void *)v182 + 320))(v1184, v182, 1);
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>((uint64_t *)(v1185.__r_.__value_.__r.__words[0] + 280), (uint64_t *)v1184, (uint64_t *)&v1184[0].__r_.__value_.__r.__words[2], 1uLL);
            if (v1184[0].__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1184[0].__r_.__value_.__l.__size_);
            }
            if (v1185.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1185.__r_.__value_.__l.__size_);
            }
            v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1163;
            int v253 = v1184;
          }
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v253);
LABEL_509:
          std::string::basic_string[abi:ne180100]<0>(&v1187, "convolution_weights_grad");
          if ((v1114 & 0x80u) == 0) {
            size_t v254 = v1114;
          }
          else {
            size_t v254 = v1113;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1185, v254 + 3);
          if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v255 = &v1185;
          }
          else {
            int v255 = (std::string *)v1185.__r_.__value_.__r.__words[0];
          }
          if (v254)
          {
            if ((v1114 & 0x80u) == 0) {
              std::string::size_type v256 = &v1112;
            }
            else {
              std::string::size_type v256 = v1112;
            }
            memmove(v255, v256, v254);
          }
          *(_DWORD *)((char *)&v255->__r_.__value_.__l.__data_ + v254) = 7824479;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)v1163 = __s;
          }
          if (SHIBYTE(v1109.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v1163[24], v1109.__r_.__value_.__l.__data_, v1109.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v1163[24] = *(_OWORD *)&v1109.__r_.__value_.__l.__data_;
            *(void *)&long long v1164 = *((void *)&v1109.__r_.__value_.__l + 2);
          }
          v1081 = 0;
          v1080 = 0;
          v1082 = 0;
          v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1080;
          v1184[0].__r_.__value_.__s.__data_[8] = 0;
          v1080 = (std::string *)operator new(0x30uLL);
          v1081 = v1080;
          v1082 = v1080 + 2;
          v1081 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1082, (long long *)v1163, (long long *)((char *)&v1164 + 8), v1080);
          uint64_t v1079 = 0;
          uint64_t v1077 = 0;
          uint64_t v1078 = 0;
          memset(v1184, 0, 24);
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1184, (uint64_t)v1080, (uint64_t)v1081, 0xAAAAAAAAAAAAAAABLL * (((char *)v1081 - (char *)v1080) >> 3));
          __n[1] = 0;
          __n[0] = 0;
          *(void *)&long long v1179 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, v1077, v1078, 0xAAAAAAAAAAAAAAABLL * ((v1078 - v1077) >> 3));
          add_with_context_transfers_t<Espresso::convolution_uniforms>((uint64_t *)&v1154, (uint64_t)&v1133, (uint64_t)&v1187, (uint64_t)&v1185, (uint64_t)v1168, (uint64_t *)v1184, (uint64_t *)__n);
          v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
          v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1184;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
          if (!v1154.__r_.__value_.__r.__words[0]
          {
            v911 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::runtime_error::runtime_error(v911, &v1189);
            __cxa_throw(v911, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          long long v258 = v257;
          uint64_t v259 = (std::__shared_weak_count *)v1154.__r_.__value_.__l.__size_;
          if (v1154.__r_.__value_.__l.__size_)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v1154.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            if (v1154.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1154.__r_.__value_.__l.__size_);
            }
          }
          v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1077;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
          v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1080;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
          for (uint64_t j = 0; j != -48; j -= 24)
          {
            if (*((char *)&v1164 + j + 7) < 0) {
              operator delete(*(void **)&v1163[j + 24]);
            }
          }
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v1187.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1187.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v1189, "convolution_grad");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v1187, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v1187 = __s;
          }
          v1075 = 0;
          v1074 = 0;
          v1076 = 0;
          *(void *)v1163 = &v1074;
          v1163[8] = 0;
          v1074 = (std::string *)operator new(0x18uLL);
          v1075 = v1074;
          v1076 = v1074 + 1;
          v1075 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1076, (long long *)&v1187, (long long *)&v1188, v1074);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v1185, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else {
            std::string v1185 = __str;
          }
          v1072 = 0;
          v1071 = 0;
          v1073 = 0;
          *(void *)v1163 = &v1071;
          v1163[8] = 0;
          v1071 = (std::string *)operator new(0x18uLL);
          v1072 = v1071;
          v1073 = v1071 + 1;
          v1072 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1073, (long long *)&v1185, (long long *)&v1186, v1071);
          memset(v1163, 0, 24);
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1163, (uint64_t)v1074, (uint64_t)v1075, 0xAAAAAAAAAAAAAAABLL * (((char *)v1075 - (char *)v1074) >> 3));
          memset(v1184, 0, 24);
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1184, (uint64_t)v1071, (uint64_t)v1072, 0xAAAAAAAAAAAAAAABLL * (((char *)v1072 - (char *)v1071) >> 3));
          add_with_context_transfers_t<Espresso::convolution_uniforms>((uint64_t *)&v1154, (uint64_t)&v1133, (uint64_t)&v1189, (uint64_t)&v1112, (uint64_t)v1168, (uint64_t *)v1163, (uint64_t *)v1184);
          __n[0] = (std::string::size_type)v1184;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
          __n[0] = (std::string::size_type)v1163;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
          if (!v1154.__r_.__value_.__r.__words[0]
          {
            v910 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::runtime_error::runtime_error(v910, (const std::string *)__n);
            __cxa_throw(v910, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v262 = v261;
          unsigned int v263 = (std::__shared_weak_count *)v1154.__r_.__value_.__l.__size_;
          if (v1154.__r_.__value_.__l.__size_)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v1154.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            if (v1154.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1154.__r_.__value_.__l.__size_);
            }
          }
          *(void *)v1163 = &v1071;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          *(void *)v1163 = &v1074;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
          if (SHIBYTE(v1187.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1187.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v1189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1189.__r_.__value_.__l.__data_);
          }
          (*(void (**)(unsigned char *__return_ptr, void *, void))(*(void *)v182 + 320))(v1163, v182, 0);
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v262 + 35, (uint64_t *)v1163, (uint64_t *)&v1163[16], 1uLL);
          if (*(void *)&v1163[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1163[8]);
          }
          (*(void (**)(unsigned char *__return_ptr, void *, void))(*(void *)v182 + 320))(v1163, v182, 0);
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v258 + 35, (uint64_t *)v1163, (uint64_t *)&v1163[16], 1uLL);
          if (*(void *)&v1163[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1163[8]);
          }
          if (v263) {
            nitro::nitro_function::nitro_function(v263);
          }
          if (v259) {
            nitro::nitro_function::nitro_function(v259);
          }
          unsigned int v264 = v931;
          if (!v931) {
            goto LABEL_566;
          }
          goto LABEL_565;
        }
        LODWORD(v1184[0].__r_.__value_.__l.__data_) = 0;
        *(std::string::size_type *)((char *)v1184[0].__r_.__value_.__r.__words + 4) = _D9;
        *(_OWORD *)((char *)&v1184[0].__r_.__value_.__r.__words[2] + 4) = 0uLL;
        *(std::string::size_type *)((char *)&v1184[0].__r_.__value_.__r.__words[1] + 4) = 0;
        if (!*(_DWORD *)&v1168[24]) {
          LODWORD(v1184[0].__r_.__value_.__l.__data_) = *(_DWORD *)&v1168[28] != 0;
        }
        if ((v1114 & 0x80u) == 0) {
          size_t v192 = v1114;
        }
        else {
          size_t v192 = v1113;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__n, v192 + 12);
        if ((SBYTE7(v1179) & 0x80u) == 0) {
          unsigned int v193 = __n;
        }
        else {
          unsigned int v193 = (std::string::size_type *)__n[0];
        }
        if (v192)
        {
          if ((v1114 & 0x80u) == 0) {
            long long v194 = &v1112;
          }
          else {
            long long v194 = v1112;
          }
          memmove(v193, v194, v192);
        }
        strcpy((char *)v193 + v192, "_nonlin_diff");
        if (LODWORD(v1184[0].__r_.__value_.__l.__data_) == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v1189, "activation_grad");
          if ((v1114 & 0x80u) == 0) {
            size_t v223 = v1114;
          }
          else {
            size_t v223 = v1113;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1187, v223 + 7);
          if ((v1187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float32x4_t v224 = &v1187;
          }
          else {
            float32x4_t v224 = (std::string *)v1187.__r_.__value_.__r.__words[0];
          }
          if (v223)
          {
            if ((v1114 & 0x80u) == 0) {
              uint64_t v225 = &v1112;
            }
            else {
              uint64_t v225 = v1112;
            }
            memmove(v224, v225, v223);
          }
          strcpy((char *)v224 + v223, "_nonlin");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)v1163 = __s;
          }
          if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v1163[24], v1108.__r_.__value_.__l.__data_, v1108.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v1163[24] = *(_OWORD *)&v1108.__r_.__value_.__l.__data_;
            *(void *)&long long v1164 = *((void *)&v1108.__r_.__value_.__l + 2);
          }
          v1095 = 0;
          v1094 = 0;
          v1096 = 0;
          v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1094;
          v1185.__r_.__value_.__s.__data_[8] = 0;
          v1094 = (std::string *)operator new(0x30uLL);
          v1095 = v1094;
          v1096 = v1094 + 2;
          v1095 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1096, (long long *)v1163, (long long *)((char *)&v1164 + 8), v1094);
          if (SBYTE7(v1179) < 0)
          {
            std::string::__init_copy_ctor_external(&v1185, (const std::string::value_type *)__n[0], __n[1]);
          }
          else
          {
            *(_OWORD *)&v1185.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
            v1185.__r_.__value_.__r.__words[2] = v1179;
          }
          v1092 = 0;
          v1091 = 0;
          v1093 = 0;
          v1154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1091;
          v1154.__r_.__value_.__s.__data_[8] = 0;
          v1091 = (std::string *)operator new(0x18uLL);
          v1092 = v1091;
          v1093 = v1091 + 1;
          v1092 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1093, (long long *)&v1185, (long long *)&v1186, v1091);
          add_with_context_transfers_t<Espresso::activation_params>(&v1097, (uint64_t)&v1133, (uint64_t)&v1189, (uint64_t)&v1187, (uint64_t)v1184, (uint64_t *)&v1094, (uint64_t *)&v1091);
          if (v1098) {
            nitro::nitro_function::nitro_function(v1098);
          }
          v1154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1091;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1154);
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1094;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1185);
          for (uint64_t k = 0; k != -48; k -= 24)
          {
            if (*((char *)&v1164 + k + 7) < 0) {
              operator delete(*(void **)&v1163[k + 24]);
            }
          }
        }
        else
        {
          if (LODWORD(v1184[0].__r_.__value_.__l.__data_))
          {
LABEL_428:
            std::string::operator=(&__s, (const std::string *)__n);
            if (SBYTE7(v1179) < 0) {
              operator delete((void *)__n[0]);
            }
            goto LABEL_430;
          }
          std::string::basic_string[abi:ne180100]<0>(&v1189, "activation_grad");
          if ((v1114 & 0x80u) == 0) {
            size_t v195 = v1114;
          }
          else {
            size_t v195 = v1113;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1187, v195 + 7);
          if ((v1187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v196 = &v1187;
          }
          else {
            uint64_t v196 = (std::string *)v1187.__r_.__value_.__r.__words[0];
          }
          if (v195)
          {
            if ((v1114 & 0x80u) == 0) {
              uint64_t v197 = &v1112;
            }
            else {
              uint64_t v197 = v1112;
            }
            memmove(v196, v197, v195);
          }
          strcpy((char *)v196 + v195, "_nonlin");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)v1163 = __s;
          }
          if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v1163[24], v1108.__r_.__value_.__l.__data_, v1108.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v1163[24] = *(_OWORD *)&v1108.__r_.__value_.__l.__data_;
            *(void *)&long long v1164 = *((void *)&v1108.__r_.__value_.__l + 2);
          }
          v1103 = 0;
          v1102 = 0;
          v1104 = 0;
          v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1102;
          v1185.__r_.__value_.__s.__data_[8] = 0;
          v1102 = (std::string *)operator new(0x30uLL);
          v1103 = v1102;
          v1104 = v1102 + 2;
          v1103 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1104, (long long *)v1163, (long long *)((char *)&v1164 + 8), v1102);
          if (SBYTE7(v1179) < 0)
          {
            std::string::__init_copy_ctor_external(&v1185, (const std::string::value_type *)__n[0], __n[1]);
          }
          else
          {
            *(_OWORD *)&v1185.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
            v1185.__r_.__value_.__r.__words[2] = v1179;
          }
          v1100 = 0;
          v1099 = 0;
          v1101 = 0;
          v1154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1099;
          v1154.__r_.__value_.__s.__data_[8] = 0;
          v1099 = (std::string *)operator new(0x18uLL);
          v1100 = v1099;
          v1101 = v1099 + 1;
          v1100 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1101, (long long *)&v1185, (long long *)&v1186, v1099);
          add_with_context_transfers_t<Espresso::activation_params>(&v1105, (uint64_t)&v1133, (uint64_t)&v1189, (uint64_t)&v1187, (uint64_t)v1184, (uint64_t *)&v1102, (uint64_t *)&v1099);
          if (v1106) {
            nitro::nitro_function::nitro_function(v1106);
          }
          v1154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1099;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1154);
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1102;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1185);
          for (uint64_t m = 0; m != -48; m -= 24)
          {
            if (*((char *)&v1164 + m + 7) < 0) {
              operator delete(*(void **)&v1163[m + 24]);
            }
          }
        }
        if (SHIBYTE(v1187.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1187.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1189.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1189.__r_.__value_.__l.__data_);
        }
        goto LABEL_428;
      }
      if (v198)
      {
        unsigned int v199 = v198;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v200 = (*(uint64_t (**)(void *))(*(void *)v198 + 384))(v198);
        *(_OWORD *)v1168 = *(_OWORD *)v200;
        long long v201 = *(_OWORD *)(v200 + 16);
        long long v202 = *(_OWORD *)(v200 + 32);
        long long v203 = *(_OWORD *)(v200 + 48);
        long long v1169 = *(_OWORD *)(v200 + 64);
        *(_OWORD *)&v1168[48] = v203;
        *(_OWORD *)&v1168[32] = v202;
        *(_OWORD *)&v1168[16] = v201;
        long long v204 = *(_OWORD *)(v200 + 80);
        long long v205 = *(_OWORD *)(v200 + 96);
        long long v206 = *(_OWORD *)(v200 + 112);
        LODWORD(v1173) = *(_DWORD *)(v200 + 128);
        long long v1172 = v206;
        long long v1171 = v205;
        long long v1170 = v204;
        if (!*(void *)&v1168[12])
        {
LABEL_930:
          if (*(_DWORD *)&v1168[8])
          {
            v1154.__r_.__value_.__s.__data_[4] = 0;
            LODWORD(v1154.__r_.__value_.__l.__data_) = *(_DWORD *)v1168;
            if ((v1114 & 0x80u) == 0) {
              size_t v410 = v1114;
            }
            else {
              size_t v410 = v1113;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v1184, v410 + 6);
            if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v411 = v1184;
            }
            else {
              char v411 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
            }
            if (v410)
            {
              if ((v1114 & 0x80u) == 0) {
                v412 = &v1112;
              }
              else {
                v412 = v1112;
              }
              memmove(v411, v412, v410);
            }
            strcpy((char *)v411 + v410, "_dbias");
            memset(v1163, 0, 24);
            __n[0] = (std::string::size_type)v1163;
            LOBYTE(__n[1]) = 0;
            *(void *)v1163 = operator new(0x18uLL);
            *(void *)&v1163[8] = *(void *)v1163;
            *(void *)&v1163[16] = *(void *)v1163 + 24;
            *(void *)&v1163[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1163[16], (long long *)v1184, (long long *)&v1184[1], *(std::string **)v1163);
            if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1184[0].__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(v1184, "bias_grad");
            if ((v1114 & 0x80u) == 0) {
              size_t v413 = v1114;
            }
            else {
              size_t v413 = v1113;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)__n, v413 + 5);
            if ((SBYTE7(v1179) & 0x80u) == 0) {
              v414 = __n;
            }
            else {
              v414 = (std::string::size_type *)__n[0];
            }
            if (v413)
            {
              if ((v1114 & 0x80u) == 0) {
                std::string v415 = &v1112;
              }
              else {
                std::string v415 = v1112;
              }
              memmove(v414, v415, v413);
            }
            strcpy((char *)v414 + v413, "_bias");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v1189, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v1189 = __s;
            }
            v1053 = 0;
            v1052 = 0;
            v1054 = 0;
            v1187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1052;
            v1187.__r_.__value_.__s.__data_[8] = 0;
            v1052 = (std::string *)operator new(0x18uLL);
            v1053 = v1052;
            v1054 = v1052 + 1;
            v1053 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1054, (long long *)&v1189, &v1190, v1052);
            memset(v1051, 0, sizeof(v1051));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1051, *(uint64_t *)v1163, *(uint64_t *)&v1163[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v1163[8] - *(void *)v1163) >> 3));
            add_with_context_transfers_t<Espresso::generic_bias_grad_kernel,Espresso::bias_params>(&v1185, (uint64_t)&v1133, (uint64_t)v1184, (uint64_t)__n, (uint64_t)&v1154, (uint64_t)v1052, (uint64_t)v1053, v1051);
            v1187.__r_.__value_.__r.__words[0] = (std::string::size_type)v1051;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1187);
            v1187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1052;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1187);
            if (SHIBYTE(v1189.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1189.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v1179) < 0) {
              operator delete((void *)__n[0]);
            }
            if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1184[0].__r_.__value_.__l.__data_);
            }
            (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*(void *)v199 + 320))(v1184, v199, 1);
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>((uint64_t *)(v1185.__r_.__value_.__r.__words[0] + 280), (uint64_t *)v1184, (uint64_t *)&v1184[0].__r_.__value_.__r.__words[2], 1uLL);
            if (v1184[0].__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1184[0].__r_.__value_.__l.__size_);
            }
            if (v1185.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1185.__r_.__value_.__l.__size_);
            }
            v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1163;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
          }
          uint64_t v416 = *(void *)v934;
          unint64_t v417 = *(void *)(*(void *)v934 + 80);
          unint64_t v418 = v1115;
          if (v417 > v1115)
          {
            *(void *)v1163 = v1115;
            v419 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v416 + 56, v1115, v1163);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v419[4] - v419[3]) >> 3) >= 2)
            {
              uint64_t v420 = *(void *)v934 + 56;
              *(void *)v1163 = v418;
              uint64_t v421 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v420, v418, v1163)[3];
              if (*(char *)(v421 + 47) < 0) {
                std::string::__init_copy_ctor_external(&v1187, *(const std::string::value_type **)(v421 + 24), *(void *)(v421 + 32));
              }
              else {
                std::string v1187 = *(std::string *)(v421 + 24);
              }
              if ((v1187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v422 = HIBYTE(v1187.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v422 = v1187.__r_.__value_.__l.__size_;
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&v1185, v422 + 5);
              if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v423 = &v1185;
              }
              else {
                char v423 = (std::string *)v1185.__r_.__value_.__r.__words[0];
              }
              if (v422)
              {
                if ((v1187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  id v424 = &v1187;
                }
                else {
                  id v424 = (std::string *)v1187.__r_.__value_.__r.__words[0];
                }
                memmove(v423, v424, v422);
              }
              strcpy((char *)v423 + v422, "/grad");
              std::string::basic_string[abi:ne180100]<0>(&v1154, "inner_product_weights_grad");
              if ((v1114 & 0x80u) == 0) {
                size_t v425 = v1114;
              }
              else {
                size_t v425 = v1113;
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&v1182, v425 + 3);
              if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                id v426 = &v1182;
              }
              else {
                id v426 = (std::string *)v1182.__r_.__value_.__r.__words[0];
              }
              if (v425)
              {
                if ((v1114 & 0x80u) == 0) {
                  v427 = &v1112;
                }
                else {
                  v427 = v1112;
                }
                memmove(v426, v427, v425);
              }
              *(_DWORD *)((char *)&v426->__r_.__value_.__l.__data_ + v425) = 7824479;
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else {
                *(std::string *)v1163 = __s;
              }
              if (SHIBYTE(v1109.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v1163[24], v1109.__r_.__value_.__l.__data_, v1109.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v1163[24] = *(_OWORD *)&v1109.__r_.__value_.__l.__data_;
                *(void *)&long long v1164 = *((void *)&v1109.__r_.__value_.__l + 2);
              }
              v1049 = 0;
              v1048 = 0;
              v1050 = 0;
              v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1048;
              v1184[0].__r_.__value_.__s.__data_[8] = 0;
              v1048 = (std::string *)operator new(0x30uLL);
              v1049 = v1048;
              v1050 = v1048 + 2;
              v1049 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1050, (long long *)v1163, (long long *)((char *)&v1164 + 8), v1048);
              if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v1180, v1185.__r_.__value_.__l.__data_, v1185.__r_.__value_.__l.__size_);
              }
              else {
                std::string v1180 = v1185;
              }
              v1046 = 0;
              v1045 = 0;
              v1047 = 0;
              v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1045;
              v1184[0].__r_.__value_.__s.__data_[8] = 0;
              v1045 = (std::string *)operator new(0x18uLL);
              v1046 = v1045;
              v1047 = v1045 + 1;
              v1046 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1047, (long long *)&v1180, (long long *)&v1181, v1045);
              memset(v1184, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1184, (uint64_t)v1048, (uint64_t)v1049, 0xAAAAAAAAAAAAAAABLL * (((char *)v1049 - (char *)v1048) >> 3));
              __n[1] = 0;
              __n[0] = 0;
              *(void *)&long long v1179 = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v1045, (uint64_t)v1046, 0xAAAAAAAAAAAAAAABLL * (((char *)v1046 - (char *)v1045) >> 3));
              add_with_context_transfers_t<Espresso::inner_product_uniforms>((uint64_t *)&v1176, (uint64_t)&v1133, (uint64_t)&v1154, (uint64_t)&v1182, (uint64_t)v1168, (uint64_t *)v1184, (uint64_t *)__n);
              v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
              v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1184;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
              if (!(void)v1176
              {
                v913 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                std::runtime_error::runtime_error(v913, &v1189);
                __cxa_throw(v913, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              v429 = v428;
              std::vector<std::string> v430 = (std::__shared_weak_count *)*((void *)&v1176 + 1);
              if (*((void *)&v1176 + 1))
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1176 + 1) + 8), 1uLL, memory_order_relaxed);
                if (*((void *)&v1176 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v1176 + 1));
                }
              }
              v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1045;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
              if (SHIBYTE(v1180.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1180.__r_.__value_.__l.__data_);
              }
              v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1048;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
              for (uint64_t n = 0; n != -48; n -= 24)
              {
                if (*((char *)&v1164 + n + 7) < 0) {
                  operator delete(*(void **)&v1163[n + 24]);
                }
              }
              if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1182.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1154.__r_.__value_.__l.__data_);
              }
              (*(void (**)(unsigned char *__return_ptr, void *, void))(*(void *)v199 + 320))(v1163, v199, 0);
              std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v429 + 35, (uint64_t *)v1163, (uint64_t *)&v1163[16], 1uLL);
              if (*(void *)&v1163[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1163[8]);
              }
              std::string::basic_string[abi:ne180100]<0>(&v1154, "inner_product_grad");
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else {
                *(std::string *)v1163 = __s;
              }
              if (SHIBYTE(v1187.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v1163[24], v1187.__r_.__value_.__l.__data_, v1187.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v1163[24] = *(_OWORD *)&v1187.__r_.__value_.__l.__data_;
                *(void *)&long long v1164 = *((void *)&v1187.__r_.__value_.__l + 2);
              }
              v1043 = 0;
              v1042 = 0;
              v1044 = 0;
              v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1042;
              v1184[0].__r_.__value_.__s.__data_[8] = 0;
              v1042 = (std::string *)operator new(0x30uLL);
              v1043 = v1042;
              v1044 = v1042 + 2;
              v1043 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1044, (long long *)v1163, (long long *)((char *)&v1164 + 8), v1042);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v1182, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
              }
              else {
                std::string v1182 = __str;
              }
              v1040 = 0;
              v1039 = 0;
              v1041 = 0;
              v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1039;
              v1184[0].__r_.__value_.__s.__data_[8] = 0;
              v1039 = (std::string *)operator new(0x18uLL);
              v1040 = v1039;
              v1041 = v1039 + 1;
              v1040 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1041, (long long *)&v1182, (long long *)&v1183, v1039);
              memset(v1184, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1184, (uint64_t)v1042, (uint64_t)v1043, 0xAAAAAAAAAAAAAAABLL * (((char *)v1043 - (char *)v1042) >> 3));
              __n[1] = 0;
              __n[0] = 0;
              *(void *)&long long v1179 = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v1039, (uint64_t)v1040, 0xAAAAAAAAAAAAAAABLL * (((char *)v1040 - (char *)v1039) >> 3));
              add_with_context_transfers_t<Espresso::inner_product_uniforms>((uint64_t *)&v1180, (uint64_t)&v1133, (uint64_t)&v1154, (uint64_t)&v1112, (uint64_t)v1168, (uint64_t *)v1184, (uint64_t *)__n);
              v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
              v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1184;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
              if (!v1180.__r_.__value_.__r.__words[0]
              {
                v914 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                std::runtime_error::runtime_error(v914, &v1189);
                __cxa_throw(v914, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              id v433 = v432;
              v434 = (std::__shared_weak_count *)v1180.__r_.__value_.__l.__size_;
              if (v1180.__r_.__value_.__l.__size_)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v1180.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                if (v1180.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1180.__r_.__value_.__l.__size_);
                }
              }
              v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1039;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
              if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1182.__r_.__value_.__l.__data_);
              }
              v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1042;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
              for (iuint64_t i = 0; ii != -48; ii -= 24)
              {
                if (*((char *)&v1164 + ii + 7) < 0) {
                  operator delete(*(void **)&v1163[ii + 24]);
                }
              }
              if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1154.__r_.__value_.__l.__data_);
              }
              (*(void (**)(unsigned char *__return_ptr, void *, void))(*(void *)v199 + 320))(v1163, v199, 0);
              std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v433 + 35, (uint64_t *)v1163, (uint64_t *)&v1163[16], 1uLL);
              if (*(void *)&v1163[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1163[8]);
              }
              if (v434) {
                nitro::nitro_function::nitro_function(v434);
              }
              if (v430) {
                nitro::nitro_function::nitro_function(v430);
              }
              if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1185.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v1187.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string v436 = (void *)v1187.__r_.__value_.__r.__words[0];
                goto LABEL_1435;
              }
              goto LABEL_1436;
            }
            uint64_t v416 = *(void *)v934;
            unint64_t v417 = *(void *)(*(void *)v934 + 80);
          }
          *(void *)v1163 = v418;
          v915 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v416 + 56, v418, v1163);
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long,int &,unsigned long>(v417, v1115, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v915[4] - v915[3]) >> 3));
        }
        LODWORD(v1184[0].__r_.__value_.__l.__data_) = 0;
        *(std::string::size_type *)((char *)v1184[0].__r_.__value_.__r.__words + 4) = _D9;
        *(std::string::size_type *)((char *)&v1184[0].__r_.__value_.__r.__words[2] + 4) = 0;
        *(std::string::size_type *)((char *)v1184[1].__r_.__value_.__r.__words + 4) = 0;
        *(std::string::size_type *)((char *)&v1184[0].__r_.__value_.__r.__words[1] + 4) = 0;
        if (!*(_DWORD *)&v1168[12] && *(_DWORD *)&v1168[16])
        {
          LODWORD(v1184[0].__r_.__value_.__l.__data_) = 1;
          *(std::string::size_type *)((char *)v1184[0].__r_.__value_.__r.__words + 4) = *(void *)&v1168[20];
        }
        if ((v1114 & 0x80u) == 0) {
          size_t v207 = v1114;
        }
        else {
          size_t v207 = v1113;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__n, v207 + 12);
        if ((SBYTE7(v1179) & 0x80u) == 0) {
          unsigned int v208 = __n;
        }
        else {
          unsigned int v208 = (std::string::size_type *)__n[0];
        }
        if (v207)
        {
          if ((v1114 & 0x80u) == 0) {
            unsigned int v209 = &v1112;
          }
          else {
            unsigned int v209 = v1112;
          }
          memmove(v208, v209, v207);
        }
        strcpy((char *)v208 + v207, "_nonlin_diff");
        if (LODWORD(v1184[0].__r_.__value_.__l.__data_) == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v1189, "activation_grad");
          if ((v1114 & 0x80u) == 0) {
            size_t v236 = v1114;
          }
          else {
            size_t v236 = v1113;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1187, v236 + 7);
          if ((v1187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float32x4_t v237 = &v1187;
          }
          else {
            float32x4_t v237 = (std::string *)v1187.__r_.__value_.__r.__words[0];
          }
          if (v236)
          {
            if ((v1114 & 0x80u) == 0) {
              long long v238 = &v1112;
            }
            else {
              long long v238 = v1112;
            }
            memmove(v237, v238, v236);
          }
          strcpy((char *)v237 + v236, "_nonlin");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)v1163 = __s;
          }
          if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v1163[24], v1108.__r_.__value_.__l.__data_, v1108.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v1163[24] = *(_OWORD *)&v1108.__r_.__value_.__l.__data_;
            *(void *)&long long v1164 = *((void *)&v1108.__r_.__value_.__l + 2);
          }
          v1059 = 0;
          v1058 = 0;
          v1060 = 0;
          v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1058;
          v1185.__r_.__value_.__s.__data_[8] = 0;
          v1058 = (std::string *)operator new(0x30uLL);
          v1059 = v1058;
          v1060 = v1058 + 2;
          v1059 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1060, (long long *)v1163, (long long *)((char *)&v1164 + 8), v1058);
          if (SBYTE7(v1179) < 0)
          {
            std::string::__init_copy_ctor_external(&v1185, (const std::string::value_type *)__n[0], __n[1]);
          }
          else
          {
            *(_OWORD *)&v1185.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
            v1185.__r_.__value_.__r.__words[2] = v1179;
          }
          v1056 = 0;
          v1055 = 0;
          v1057 = 0;
          v1154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1055;
          v1154.__r_.__value_.__s.__data_[8] = 0;
          v1055 = (std::string *)operator new(0x18uLL);
          v1056 = v1055;
          v1057 = v1055 + 1;
          v1056 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1057, (long long *)&v1185, (long long *)&v1186, v1055);
          add_with_context_transfers_t<Espresso::activation_params>(&v1061, (uint64_t)&v1133, (uint64_t)&v1189, (uint64_t)&v1187, (uint64_t)v1184, (uint64_t *)&v1058, (uint64_t *)&v1055);
          if (v1062) {
            nitro::nitro_function::nitro_function(v1062);
          }
          v1154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1055;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1154);
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1058;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1185);
          for (juint64_t j = 0; jj != -48; jj -= 24)
          {
            if (*((char *)&v1164 + jj + 7) < 0) {
              operator delete(*(void **)&v1163[jj + 24]);
            }
          }
        }
        else
        {
          if (LODWORD(v1184[0].__r_.__value_.__l.__data_))
          {
LABEL_928:
            std::string::operator=(&__s, (const std::string *)__n);
            if (SBYTE7(v1179) < 0) {
              operator delete((void *)__n[0]);
            }
            goto LABEL_930;
          }
          std::string::basic_string[abi:ne180100]<0>(&v1189, "activation_grad");
          if ((v1114 & 0x80u) == 0) {
            size_t v210 = v1114;
          }
          else {
            size_t v210 = v1113;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1187, v210 + 7);
          if ((v1187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v211 = &v1187;
          }
          else {
            unsigned int v211 = (std::string *)v1187.__r_.__value_.__r.__words[0];
          }
          if (v210)
          {
            if ((v1114 & 0x80u) == 0) {
              unsigned int v212 = &v1112;
            }
            else {
              unsigned int v212 = v1112;
            }
            memmove(v211, v212, v210);
          }
          strcpy((char *)v211 + v210, "_nonlin");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)v1163 = __s;
          }
          if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v1163[24], v1108.__r_.__value_.__l.__data_, v1108.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v1163[24] = *(_OWORD *)&v1108.__r_.__value_.__l.__data_;
            *(void *)&long long v1164 = *((void *)&v1108.__r_.__value_.__l + 2);
          }
          v1067 = 0;
          v1066 = 0;
          v1068 = 0;
          v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1066;
          v1185.__r_.__value_.__s.__data_[8] = 0;
          v1066 = (std::string *)operator new(0x30uLL);
          v1067 = v1066;
          v1068 = v1066 + 2;
          v1067 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1068, (long long *)v1163, (long long *)((char *)&v1164 + 8), v1066);
          if (SBYTE7(v1179) < 0)
          {
            std::string::__init_copy_ctor_external(&v1185, (const std::string::value_type *)__n[0], __n[1]);
          }
          else
          {
            *(_OWORD *)&v1185.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
            v1185.__r_.__value_.__r.__words[2] = v1179;
          }
          v1064 = 0;
          v1063 = 0;
          v1065 = 0;
          v1154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1063;
          v1154.__r_.__value_.__s.__data_[8] = 0;
          v1063 = (std::string *)operator new(0x18uLL);
          v1064 = v1063;
          v1065 = v1063 + 1;
          v1064 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1065, (long long *)&v1185, (long long *)&v1186, v1063);
          add_with_context_transfers_t<Espresso::activation_params>(&v1069, (uint64_t)&v1133, (uint64_t)&v1189, (uint64_t)&v1187, (uint64_t)v1184, (uint64_t *)&v1066, (uint64_t *)&v1063);
          if (v1070) {
            nitro::nitro_function::nitro_function(v1070);
          }
          v1154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1063;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1154);
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1066;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1185);
          for (kuint64_t k = 0; kk != -48; kk -= 24)
          {
            if (*((char *)&v1164 + kk + 7) < 0) {
              operator delete(*(void **)&v1163[kk + 24]);
            }
          }
        }
        if (SHIBYTE(v1187.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1187.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1189.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1189.__r_.__value_.__l.__data_);
        }
        goto LABEL_928;
      }
      if (v213)
      {
        unint64_t v214 = v213;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v213 + 384))(v213))
        {
          float32x4_t v215 = *(unsigned int (****)(void))(*(void *)(*(void *)v934 + 16) + 8);
          if ((**v215)(v215))
          {
            uint64_t v216 = *(void *)v934 + 96;
            unint64_t v217 = v1115;
            *(void *)v1168 = v1115;
            int v218 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v216, v1115, v1168)[3];
            if (*((char *)v218 + 23) >= 0) {
              size_t v219 = *((unsigned __int8 *)v218 + 23);
            }
            else {
              size_t v219 = (size_t)v218[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v1163, v219 + 9);
            if (v1163[23] >= 0) {
              uint64_t v220 = v1163;
            }
            else {
              uint64_t v220 = *(unsigned char **)v1163;
            }
            if (v219)
            {
              if (*((char *)v218 + 23) >= 0) {
                uint64_t v221 = v218;
              }
              else {
                uint64_t v221 = *v218;
              }
              memmove(v220, v221, v219);
            }
            strcpy(&v220[v219], "_mask_i32");
            std::string::basic_string[abi:ne180100]<0>(v1184, "pool_grad");
            uint64_t v222 = (*(uint64_t (**)(void *))(*(void *)v214 + 384))(v214);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external((std::string *)v1168, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              *(std::string *)v1168 = __s;
            }
            if ((v1163[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v1168[24], *(const std::string::value_type **)v1163, *(std::string::size_type *)&v1163[8]);
            }
            else
            {
              *(_OWORD *)&v1168[24] = *(_OWORD *)v1163;
              *(void *)&v1168[40] = *(void *)&v1163[16];
            }
            v1019 = 0;
            v1018 = 0;
            v1020 = 0;
            __n[0] = (std::string::size_type)&v1018;
            LOBYTE(__n[1]) = 0;
            v1018 = (std::string *)operator new(0x30uLL);
            v1019 = v1018;
            v1020 = v1018 + 2;
            v1019 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1020, (long long *)v1168, (long long *)&v1168[48], v1018);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__n, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)__uint64_t n = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              *(void *)&long long v1179 = *((void *)&__str.__r_.__value_.__l + 2);
            }
            v1016 = 0;
            v1015 = 0;
            v1017 = 0;
            v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1015;
            v1189.__r_.__value_.__s.__data_[8] = 0;
            v1015 = (std::string *)operator new(0x18uLL);
            v1016 = v1015;
            v1017 = v1015 + 1;
            v1016 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1017, (long long *)__n, (long long *)((char *)&v1179 + 8), v1015);
            add_with_context_transfers_t<Espresso::pool_params>(&v1021, (uint64_t)&v1133, (uint64_t)v1184, (uint64_t)&v1112, v222, (uint64_t *)&v1018, (uint64_t *)&v1015);
            if (v1022) {
              nitro::nitro_function::nitro_function(v1022);
            }
            v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1015;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
            if (SBYTE7(v1179) < 0) {
              operator delete((void *)__n[0]);
            }
            __n[0] = (std::string::size_type)&v1018;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
            for (muint64_t m = 0; mm != -48; mm -= 24)
            {
              if ((char)v1168[mm + 47] < 0) {
                operator delete(*(void **)&v1168[mm + 24]);
              }
            }
            if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1184[0].__r_.__value_.__l.__data_);
            }
            uint64_t v438 = *(void *)v934 + 96;
            *(void *)v1168 = v217;
            v439 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v438, v217, v1168);
            if (v439[4] - v439[3] == 24)
            {
              uint64_t v440 = *(void *)v934 + 96;
              *(void *)v1168 = v217;
              v441 = (char **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v440, v217, v1168);
              v442 = v441;
              v443 = v441[4];
              if (v443 >= v441[5])
              {
                v554 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v441 + 3, (uint64_t)v1163);
              }
              else
              {
                if ((v1163[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v441[4], *(const std::string::value_type **)v1163, *(std::string::size_type *)&v1163[8]);
                }
                else
                {
                  long long v444 = *(_OWORD *)v1163;
                  *((void *)v443 + 2) = *(void *)&v1163[16];
                  *(_OWORD *)v443 = v444;
                }
                v554 = (std::string *)(v443 + 24);
                v442[4] = v443 + 24;
              }
              v442[4] = (char *)v554;
              uint64_t v577 = *(void *)v934 + 96;
              v1184[0].__r_.__value_.__r.__words[0] = v217;
              *(void *)v1168 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v577, v217, v1184)[3];
              v578 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, *(void **)v1168, (long long **)v1168);
              *(void *)v1168 = v1163;
              v579 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, v1163, (long long **)v1168);
              long long v580 = *(_OWORD *)(v578 + 56);
              long long v581 = *(_OWORD *)(v578 + 72);
              *((void *)v579 + 11) = *((void *)v578 + 11);
              *(_OWORD *)(v579 + 72) = v581;
              *(_OWORD *)(v579 + 56) = v580;
              if (v579 != v578) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v579 + 96, *((char **)v578 + 12), *((void *)v578 + 13), (uint64_t)(*((void *)v578 + 13) - *((void *)v578 + 12)) >> 2);
              }
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v1163, "pool_grad");
            uint64_t v401 = (*(uint64_t (**)(void *))(*(void *)v214 + 384))(v214);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external((std::string *)v1168, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              *(std::string *)v1168 = __s;
            }
            if (SHIBYTE(v1109.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external((std::string *)&v1168[24], v1109.__r_.__value_.__l.__data_, v1109.__r_.__value_.__l.__size_);
            }
            else {
              *(std::string *)&v1168[24] = v1109;
            }
            v1027 = 0;
            v1026 = 0;
            v1028 = 0;
            v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1026;
            v1184[0].__r_.__value_.__s.__data_[8] = 0;
            v1026 = (std::string *)operator new(0x30uLL);
            v1027 = v1026;
            v1028 = v1026 + 2;
            v1027 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1028, (long long *)v1168, (long long *)&v1168[48], v1026);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(v1184, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              v1184[0] = __str;
            }
            v1024 = 0;
            v1023 = 0;
            v1025 = 0;
            __n[0] = (std::string::size_type)&v1023;
            LOBYTE(__n[1]) = 0;
            v1023 = (std::string *)operator new(0x18uLL);
            v1024 = v1023;
            v1025 = v1023 + 1;
            v1024 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1025, (long long *)v1184, (long long *)&v1184[1], v1023);
            add_with_context_transfers_t<Espresso::pool_params>(&v1029, (uint64_t)&v1133, (uint64_t)v1163, (uint64_t)&v1112, v401, (uint64_t *)&v1026, (uint64_t *)&v1023);
            if (v1030) {
              nitro::nitro_function::nitro_function(v1030);
            }
            __n[0] = (std::string::size_type)&v1023;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
            if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1184[0].__r_.__value_.__l.__data_);
            }
            v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1026;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
            for (nuint64_t n = 0; nn != -48; nn -= 24)
            {
              if ((char)v1168[nn + 47] < 0) {
                operator delete(*(void **)&v1168[nn + 24]);
              }
            }
          }
          goto LABEL_1433;
        }
        std::string::basic_string[abi:ne180100]<0>(v1168, "pool_grad");
        uint64_t v400 = (*(uint64_t (**)(void *))(*(void *)v214 + 384))(v214);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)v1163 = __s;
        }
        v1035 = 0;
        v1034 = 0;
        v1036 = 0;
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1034;
        v1184[0].__r_.__value_.__s.__data_[8] = 0;
        v1034 = (std::string *)operator new(0x18uLL);
        v1035 = v1034;
        v1036 = v1034 + 1;
        v1035 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1036, (long long *)v1163, (long long *)&v1163[24], v1034);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(v1184, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          v1184[0] = __str;
        }
        v1032 = 0;
        v1031 = 0;
        v1033 = 0;
        __n[0] = (std::string::size_type)&v1031;
        LOBYTE(__n[1]) = 0;
        v1031 = (std::string *)operator new(0x18uLL);
        v1032 = v1031;
        v1033 = v1031 + 1;
        v1032 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1033, (long long *)v1184, (long long *)&v1184[1], v1031);
        add_with_context_transfers_t<Espresso::pool_params>(&v1037, (uint64_t)&v1133, (uint64_t)v1168, (uint64_t)&v1112, v400, (uint64_t *)&v1034, (uint64_t *)&v1031);
        if (v1038) {
          nitro::nitro_function::nitro_function(v1038);
        }
        __n[0] = (std::string::size_type)&v1031;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
        if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1184[0].__r_.__value_.__l.__data_);
        }
        v445 = (uint64_t *)&v1034;
LABEL_1087:
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v445;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
        if ((v1163[23] & 0x80000000) != 0) {
          operator delete(*(void **)v1163);
        }
        if ((v1168[23] & 0x80000000) != 0)
        {
          std::string v436 = *(void **)v1168;
          goto LABEL_1435;
        }
        goto LABEL_1436;
      }
      if (v226)
      {
        std::string v227 = v226;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(&v1150, 0, sizeof(v1150));
        uint64_t v228 = *(void *)v934 + 96;
        unint64_t v229 = v1115;
        *(void *)v1168 = v1115;
        uint64_t v230 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v228, v1115, v1168);
        if (v230[4] - v230[3] == 24)
        {
          uint64_t v231 = *(void *)v934 + 96;
          *(void *)v1163 = v229;
          std::string::size_type v232 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v231, v229, v1163)[3];
          if (*((char *)v232 + 23) >= 0) {
            size_t v233 = *((unsigned __int8 *)v232 + 23);
          }
          else {
            size_t v233 = (size_t)v232[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v1168, v233 + 9);
          if (v1168[23] >= 0) {
            std::string::size_type v234 = v1168;
          }
          else {
            std::string::size_type v234 = *(unsigned char **)v1168;
          }
          if (v233)
          {
            if (*((char *)v232 + 23) >= 0) {
              size_t v235 = v232;
            }
            else {
              size_t v235 = *v232;
            }
            memmove(v234, v235, v233);
          }
          strcpy(&v234[v233], "_mask_f32");
          if (SHIBYTE(v1150.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1150.__r_.__value_.__l.__data_);
          }
          std::string v1150 = *(std::string *)v1168;
        }
        else
        {
          uint64_t v405 = *(void *)v934 + 96;
          *(void *)v1168 = v229;
          std::string v406 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v405, v229, v1168);
          std::string::operator=(&v1150, (const std::string *)(v406[3] + 24));
        }
        std::string::basic_string[abi:ne180100]<0>(&v1161, "dropout_grad");
        uint64_t v407 = (*(uint64_t (**)(void *))(*(void *)v227 + 320))(v227);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v1168, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)v1168 = __s;
        }
        lpsrca = (void *)v407;
        if (SHIBYTE(v1150.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)&v1168[24], v1150.__r_.__value_.__l.__data_, v1150.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)&v1168[24] = v1150;
        }
        v1012 = 0;
        v1011 = 0;
        v1013 = 0;
        *(void *)v1163 = &v1011;
        v1163[8] = 0;
        v1011 = (std::string *)operator new(0x30uLL);
        v1012 = v1011;
        v1013 = v1011 + 2;
        v1012 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1013, (long long *)v1168, (long long *)&v1168[48], v1011);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v1159, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string v1159 = __str;
        }
        v1009 = 0;
        v1008 = 0;
        v1010 = 0;
        *(void *)v1163 = &v1008;
        v1163[8] = 0;
        v1008 = (std::string *)operator new(0x18uLL);
        v1009 = v1008;
        v1010 = v1008 + 1;
        v1009 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1010, (long long *)&v1159, (long long *)&v1160, v1008);
        *(_OWORD *)&v1187.__r_.__value_.__r.__words[1] = 0uLL;
        v1187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1187.__r_.__value_.__l.__size_;
        LODWORD(v1156) = 0;
        v446 = v1011;
        v941 = v1012;
        if (v1011 == v1012)
        {
          v469 = v1011;
          goto LABEL_1140;
        }
        int v447 = 0;
        do
        {
          if (SHIBYTE(v446->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v1163, v446->__r_.__value_.__l.__data_, v446->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v448 = *(_OWORD *)&v446->__r_.__value_.__l.__data_;
            *(void *)&v1163[16] = *((void *)&v446->__r_.__value_.__l + 2);
            *(_OWORD *)v1163 = v448;
          }
          uint64_t v449 = v1139;
          uint64_t v450 = *(void *)(v1139 + 32);
          if (*(void *)(v1139 + 40) != v450)
          {
            unint64_t v451 = 0;
            while (1)
            {
              uint64_t v452 = *(void *)(*(void *)(v450 + 16 * v451) + 64);
              std::string::size_type v454 = *(void *)(v452 + 8);
              std::string::size_type v453 = *(void *)(v452 + 16);
              __n[0] = v454;
              __n[1] = v453;
              if (v453)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v453 + 8), 1uLL, memory_order_relaxed);
                uint64_t v449 = v1139;
              }
              v1184[0].__r_.__value_.__r.__words[0] = v451;
              v455 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v449 + 96, v451, v1184);
              v456 = (long long *)v455[3];
              v457 = (long long *)v455[4];
              if (v456 != v457) {
                break;
              }
LABEL_1131:
              if (__n[1]) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)__n[1]);
              }
              ++v451;
              uint64_t v449 = v1139;
              uint64_t v450 = *(void *)(v1139 + 32);
              if (v451 >= (*(void *)(v1139 + 40) - v450) >> 4)
              {
                int v447 = (int)v1156;
                goto LABEL_1135;
              }
            }
            unint64_t v458 = __n[0];
            int v459 = (int)v1156;
            while (1)
            {
              if (*((char *)v456 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v1184, *(const std::string::value_type **)v456, *((void *)v456 + 1));
              }
              else
              {
                long long v460 = *v456;
                v1184[0].__r_.__value_.__r.__words[2] = *((void *)v456 + 2);
                *(_OWORD *)&v1184[0].__r_.__value_.__l.__data_ = v460;
              }
              uint64_t v461 = HIBYTE(v1184[0].__r_.__value_.__r.__words[2]);
              char v462 = HIBYTE(v1184[0].__r_.__value_.__r.__words[2]);
              if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v463 = HIBYTE(v1184[0].__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v463 = v1184[0].__r_.__value_.__l.__size_;
              }
              uint64_t v464 = v1163[23];
              if (v1163[23] < 0) {
                uint64_t v464 = *(void *)&v1163[8];
              }
              if (v463 == v464)
              {
                if (v1163[23] >= 0) {
                  v465 = v1163;
                }
                else {
                  v465 = *(unsigned __int8 **)v1163;
                }
                if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0)
                {
                  v467 = (void *)v1184[0].__r_.__value_.__r.__words[0];
                  if (memcmp(v1184[0].__r_.__value_.__l.__data_, v465, v1184[0].__r_.__value_.__l.__size_)) {
                    goto LABEL_1129;
                  }
LABEL_1125:
                  if (v458 != (void)v1143)
                  {
                    v468 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)&v1187, v458, (uint64_t *)__n);
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v468 + 6, v459, (unsigned int *)&v1156)+ 8) = 1;
                    char v462 = HIBYTE(v1184[0].__r_.__value_.__r.__words[2]);
                  }
                  goto LABEL_1127;
                }
                if (!*((unsigned char *)&v1184[0].__r_.__value_.__s + 23)) {
                  goto LABEL_1125;
                }
                v466 = v1184;
                while (v466->__r_.__value_.__s.__data_[0] == *v465)
                {
                  v466 = (std::string *)((char *)v466 + 1);
                  ++v465;
                  if (!--v461) {
                    goto LABEL_1125;
                  }
                }
              }
LABEL_1127:
              if (v462 < 0)
              {
                v467 = (void *)v1184[0].__r_.__value_.__r.__words[0];
LABEL_1129:
                operator delete(v467);
              }
              v456 = (long long *)((char *)v456 + 24);
              if (v456 == v457) {
                goto LABEL_1131;
              }
            }
          }
LABEL_1135:
          LODWORD(v1156) = ++v447;
          if ((v1163[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1163);
          }
          ++v446;
        }
        while (v446 != v941);
        v469 = v1011;
        v446 = v1012;
LABEL_1140:
        memset(&v1185, 0, sizeof(v1185));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1185, (uint64_t)v469, (uint64_t)v446, 0xAAAAAAAAAAAAAAABLL * (((char *)v446 - (char *)v469) >> 3));
        v470 = (std::string::__raw *)v1187.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v1187.__r_.__value_.__l.__data_ == &v1187.__r_.__value_.__r.__words[1]) {
          goto LABEL_1296;
        }
LABEL_1141:
        std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1163, &v470[1].__words[1]);
        long long v471 = *(_OWORD *)v1163;
        if (*(void *)&v1163[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v1163[8] + 8), 1uLL, memory_order_relaxed);
        }
        __n[1] = 0;
        __n[0] = 0;
        *(void *)&long long v1179 = 0;
        memset(&v1189, 0, sizeof(v1189));
        std::string::basic_string[abi:ne180100]<0>(&v1154, "");
        v472 = *(unsigned char **)&v1163[16];
        if (*(unsigned char **)&v1163[16] == &v1163[24]) {
          goto LABEL_1244;
        }
LABEL_1144:
        int v473 = *((_DWORD *)v472 + 7);
        v474 = &v1011[v473];
        if (SHIBYTE(v474->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v1184, v474->__r_.__value_.__l.__data_, v474->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v475 = *(_OWORD *)&v474->__r_.__value_.__l.__data_;
          v1184[0].__r_.__value_.__r.__words[2] = v474->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v1184[0].__r_.__value_.__l.__data_ = v475;
        }
        if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v476 = HIBYTE(v1184[0].__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t v476 = v1184[0].__r_.__value_.__l.__size_;
        }
        if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v477 = v1184;
        }
        else {
          v477 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
        }
        if (v476 < 4) {
          goto LABEL_1162;
        }
        v478 = (std::string *)((char *)v477 + v476);
        int64_t v479 = v476;
        v480 = v477;
        while (1)
        {
          v481 = (std::string *)memchr(v480, 99, v479 - 3);
          if (!v481) {
            goto LABEL_1162;
          }
          if (LODWORD(v481->__r_.__value_.__l.__data_) == 1601532003) {
            break;
          }
          v480 = (std::string *)((char *)&v481->__r_.__value_.__l.__data_ + 1);
          int64_t v479 = (char *)v478 - (char *)v480;
          if ((char *)v478 - (char *)v480 < 4) {
            goto LABEL_1162;
          }
        }
        if (v481 == v478 || v481 != v477)
        {
LABEL_1162:
          std::string::basic_string[abi:ne180100]((uint64_t)&v1182, v476 + 3);
          if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v482 = &v1182;
          }
          else {
            v482 = (std::string *)v1182.__r_.__value_.__r.__words[0];
          }
          if (v476)
          {
            if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v483 = v1184;
            }
            else {
              v483 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
            }
            memmove(v482, v483, v476);
          }
          *(_DWORD *)((char *)&v482->__r_.__value_.__l.__data_ + v476) = 7894111;
        }
        else
        {
          std::string::basic_string(&v1182, v1184, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1180);
        }
        std::string::size_type v484 = v1185.__r_.__value_.__r.__words[0] + 24 * v473;
        if (*(char *)(v484 + 23) < 0) {
          operator delete(*(void **)v484);
        }
        long long v485 = *(_OWORD *)&v1182.__r_.__value_.__l.__data_;
        *(void *)(v484 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v1182.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v484 = v485;
        uint64_t v486 = v1139;
        if (*(void *)(v1139 + 40) == *(void *)(v1139 + 32))
        {
LABEL_1203:
          v501 = &v1011[v473];
          v502 = (_OWORD *)__n[1];
          if (__n[1] >= (unint64_t)v1179)
          {
            v504 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)__n, (uint64_t)v501);
          }
          else
          {
            if (SHIBYTE(v501->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__n[1], v501->__r_.__value_.__l.__data_, v501->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v503 = *(_OWORD *)&v501->__r_.__value_.__l.__data_;
              *(void *)(__n[1] + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v501->__r_.__value_.__l + 2);
              _OWORD *v502 = v503;
            }
            v504 = (std::string *)((char *)v502 + 24);
          }
          __n[1] = (std::string::size_type)v504;
          uint64_t v505 = v1185.__r_.__value_.__r.__words[0] + 24 * v473;
          v506 = (_OWORD *)v1189.__r_.__value_.__l.__size_;
          if (v1189.__r_.__value_.__l.__size_ >= v1189.__r_.__value_.__r.__words[2])
          {
            v508 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1189.__r_.__value_.__l.__data_, v505);
          }
          else
          {
            if (*(char *)(v505 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1189.__r_.__value_.__l.__size_, *(const std::string::value_type **)v505, *(void *)(v505 + 8));
            }
            else
            {
              long long v507 = *(_OWORD *)v505;
              *(void *)(v1189.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *(void *)(v505 + 16);
              _OWORD *v506 = v507;
            }
            v508 = (std::string *)((char *)v506 + 24);
          }
          v1189.__r_.__value_.__l.__size_ = (std::string::size_type)v508;
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v509 = HIBYTE(v1154.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v509 = v1154.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1182, v509 + 1);
          if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v510 = &v1182;
          }
          else {
            v510 = (std::string *)v1182.__r_.__value_.__r.__words[0];
          }
          if (v509)
          {
            if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v511 = &v1154;
            }
            else {
              v511 = (std::string *)v1154.__r_.__value_.__r.__words[0];
            }
            memmove(v510, v511, v509);
          }
          *(_WORD *)((char *)&v510->__r_.__value_.__l.__data_ + v509) = 95;
          v512 = &v1011[v473];
          int v513 = SHIBYTE(v512->__r_.__value_.__r.__words[2]);
          if (v513 >= 0) {
            v514 = &v1011[v473];
          }
          else {
            v514 = (std::string *)v512->__r_.__value_.__r.__words[0];
          }
          if (v513 >= 0) {
            std::string::size_type v515 = HIBYTE(v512->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v515 = v512->__r_.__value_.__l.__size_;
          }
          v516 = std::string::append(&v1182, (const std::string::value_type *)v514, v515);
          std::string::size_type v517 = v516->__r_.__value_.__r.__words[0];
          v1180.__r_.__value_.__r.__words[0] = v516->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v1180.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v516->__r_.__value_.__r.__words[1] + 7);
          char v518 = HIBYTE(v516->__r_.__value_.__r.__words[2]);
          v516->__r_.__value_.__l.__size_ = 0;
          v516->__r_.__value_.__r.__words[2] = 0;
          v516->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1154.__r_.__value_.__l.__data_);
          }
          v1154.__r_.__value_.__r.__words[0] = v517;
          v1154.__r_.__value_.__l.__size_ = v1180.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v1154.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1180.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v1154.__r_.__value_.__s + 23) = v518;
          if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1182.__r_.__value_.__l.__data_);
          }
          goto LABEL_1236;
        }
        unint64_t v487 = 0;
        char v488 = 0;
LABEL_1175:
        v1182.__r_.__value_.__r.__words[0] = v487;
        v489 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v486 + 96, v487, &v1182);
        v490 = (long long *)v489[3];
        v491 = (long long *)v489[4];
        while (1)
        {
          if (v490 == v491)
          {
            ++v487;
            uint64_t v486 = v1139;
            if (v487 >= (uint64_t)(*(void *)(v1139 + 40) - *(void *)(v1139 + 32)) >> 4)
            {
              if ((v488 & 1) == 0) {
                goto LABEL_1203;
              }
LABEL_1236:
              if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1184[0].__r_.__value_.__l.__data_);
              }
              v519 = (void *)*((void *)v472 + 1);
              if (v519)
              {
                do
                {
                  v520 = v519;
                  v519 = (void *)*v519;
                }
                while (v519);
              }
              else
              {
                do
                {
                  v520 = (unsigned char *)*((void *)v472 + 2);
                  _ZF = *(void *)v520 == (void)v472;
                  v472 = v520;
                }
                while (!_ZF);
              }
              v472 = v520;
              if (v520 == &v1163[24])
              {
LABEL_1244:
                if (v1189.__r_.__value_.__l.__size_ == v1189.__r_.__value_.__r.__words[0]) {
                  goto LABEL_1284;
                }
                memset(v1184, 0, 32);
                std::string::basic_string[abi:ne180100]<0>(&v1182, "context_transfer");
                if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v521 = HIBYTE(v1154.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v521 = v1154.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v1180, v521 + 3);
                if ((v1180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v522 = &v1180;
                }
                else {
                  v522 = (std::string *)v1180.__r_.__value_.__r.__words[0];
                }
                if (v521)
                {
                  if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v523 = &v1154;
                  }
                  else {
                    v523 = (std::string *)v1154.__r_.__value_.__r.__words[0];
                  }
                  memmove(v522, v523, v521);
                }
                *(_DWORD *)((char *)&v522->__r_.__value_.__l.__data_ + v521) = 7894111;
                long long v1176 = 0uLL;
                uint64_t v1177 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1176, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
                memset(&v1151, 0, sizeof(v1151));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1151, (uint64_t)v1189.__r_.__value_.__l.__data_, v1189.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1189.__r_.__value_.__l.__size_ - v1189.__r_.__value_.__r.__words[0]) >> 3));
                Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1157, (uint64_t *)&v1133, (uint64_t)&v1182, (uint64_t)&v1180, (uint64_t)v1184, v1176, *((uint64_t *)&v1176 + 1), (uint64_t *)&v1151);
                v1152 = &v1151;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1152);
                v1152 = &v1176;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1152);
                if (SHIBYTE(v1180.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1180.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1182.__r_.__value_.__l.__data_);
                }
                if (!v1157.__r_.__value_.__r.__words[0])
                {
                  v524 = 0;
LABEL_1265:
                  v525 = 0;
                  goto LABEL_1266;
                }
                if (!v524) {
                  goto LABEL_1265;
                }
                v525 = (std::__shared_weak_count *)v1157.__r_.__value_.__l.__size_;
                if (v1157.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v1157.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
LABEL_1266:
                LODWORD(v1180.__r_.__value_.__l.__data_) = 0;
                Espresso::create_context((int *)&v1180, &v1182);
                long long v526 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v527 = (std::__shared_weak_count *)*((void *)v524 + 40);
                *(_OWORD *)(v524 + 312) = v526;
                if (v527) {
                  nitro::nitro_function::nitro_function(v527);
                }
                if (*((void *)&v471 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v471 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v528 = (std::__shared_weak_count *)*((void *)v524 + 42);
                *(_OWORD *)(v524 + 328) = v471;
                if (v528) {
                  nitro::nitro_function::nitro_function(v528);
                }
                long long v529 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v530 = (std::__shared_weak_count *)*((void *)v524 + 2);
                *(_OWORD *)(v524 + 8) = v529;
                if (v530) {
                  nitro::nitro_function::nitro_function(v530);
                }
                int v531 = (***(uint64_t (****)(void))(*((void *)v524 + 39) + 8))(*(void *)(*((void *)v524 + 39) + 8));
                *(_DWORD *)(*(void *)(*(void *)(v1139 + 40) - 16) + 8) = v531;
                if (v1182.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1182.__r_.__value_.__l.__size_);
                }
                if (v525) {
                  nitro::nitro_function::nitro_function(v525);
                }
                if (v1157.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1157.__r_.__value_.__l.__size_);
                }
LABEL_1284:
                if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1154.__r_.__value_.__l.__data_);
                }
                v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1189;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                if (*((void *)&v471 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v471 + 1));
                }
                std::__tree<int>::destroy(*(void **)&v1163[24]);
                if (*(void *)&v1163[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1163[8]);
                }
                v532 = (std::string *)v470->__words[1];
                if (v532)
                {
                  do
                  {
                    v533 = v532;
                    v532 = (std::string *)v532->__r_.__value_.__r.__words[0];
                  }
                  while (v532);
                }
                else
                {
                  do
                  {
                    v533 = (std::string *)v470->__words[2];
                    _ZF = v533->__r_.__value_.__r.__words[0] == (void)v470;
                    v470 = (std::string::__raw *)v533;
                  }
                  while (!_ZF);
                }
                v470 = (std::string::__raw *)v533;
                if (v533 == (std::string *)&v1187.__r_.__value_.__r.__words[1])
                {
LABEL_1296:
                  char v1149 = 1;
                  memset(&v1154, 0, sizeof(v1154));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1154, (uint64_t)v1185.__r_.__value_.__l.__data_, v1185.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1185.__r_.__value_.__l.__size_ - v1185.__r_.__value_.__r.__words[0]) >> 3));
                  memset(&v1182, 0, sizeof(v1182));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1182, (uint64_t)v1008, (uint64_t)v1009, 0xAAAAAAAAAAAAAAABLL * (((char *)v1009 - (char *)v1008) >> 3));
                  *(void *)&long long v1179 = 0;
                  __n[0] = 0;
                  __n[1] = 0;
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v1154.__r_.__value_.__l.__data_, v1154.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1154.__r_.__value_.__l.__size_ - v1154.__r_.__value_.__r.__words[0]) >> 3));
                  memset(&v1189, 0, sizeof(v1189));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1189, (uint64_t)v1182.__r_.__value_.__l.__data_, v1182.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1182.__r_.__value_.__l.__size_ - v1182.__r_.__value_.__r.__words[0]) >> 3));
                  uint64_t v534 = v1141;
                  *(_DWORD *)v1163 = (***(uint64_t (****)(void))(v1143 + 8))(*(void *)(v1143 + 8));
                  Espresso::abstract_engine_factory::make_kernel_priv(v534, (uint64_t)&v1143, (uint64_t)&v1161, (uint64_t)lpsrca, (int *)v1163);
                  v535 = (std::__shared_weak_count *)*((void *)&v1014 + 1);
                  *(_OWORD *)&v1180.__r_.__value_.__l.__data_ = v1014;
                  if (*((void *)&v1014 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1014 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  memset(v1163, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1163, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
                  memset(v1184, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1184, (uint64_t)v1189.__r_.__value_.__l.__data_, v1189.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1189.__r_.__value_.__l.__size_ - v1189.__r_.__value_.__r.__words[0]) >> 3));
                  Espresso::sequential_builder::add_kernel_dbg((uint64_t)&v1133, &v1180, (uint64_t)&v1161, (uint64_t)&v1112, (uint64_t)v1137, (std::string **)v1163, (std::string **)v1184);
                  v1157.__r_.__value_.__r.__words[0] = (std::string::size_type)v1184;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1157);
                  v1157.__r_.__value_.__r.__words[0] = (std::string::size_type)v1163;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1157);
                  if (v535) {
                    nitro::nitro_function::nitro_function(v535);
                  }
                  if ((void)v1133) {
                    Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)&v1133, v1014, (long long **)__n, (uint64_t *)&v1189);
                  }
                  *(void *)v1163 = &v1189;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                  *(void *)v1163 = __n;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                  *(void *)v1163 = &v1182;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                  *(void *)v1163 = &v1154;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                  *(void *)v1163 = &v1185;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((void *)v1187.__r_.__value_.__l.__size_);
                  if (*((void *)&v1014 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v1014 + 1));
                  }
                  *(void *)v1163 = &v1008;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                  if (SHIBYTE(v1159.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1159.__r_.__value_.__l.__data_);
                  }
                  *(void *)v1163 = &v1011;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                  for (uint64_t i1 = 0; i1 != -48; i1 -= 24)
                  {
                    if ((char)v1168[i1 + 47] < 0) {
                      operator delete(*(void **)&v1168[i1 + 24]);
                    }
                  }
                  if (SHIBYTE(v1161.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1161.__r_.__value_.__l.__data_);
                  }
                  uint64_t v537 = *(void *)v934 + 96;
                  unint64_t v538 = v1115;
                  *(void *)v1168 = v1115;
                  v539 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v537, v1115, v1168);
                  if (v539[4] - v539[3] == 24)
                  {
                    uint64_t v540 = *(void *)v934 + 96;
                    *(void *)v1168 = v538;
                    v541 = (char **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v540, v538, v1168);
                    v542 = v541;
                    v543 = v541[4];
                    if (v543 >= v541[5])
                    {
                      v556 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v541 + 3, (uint64_t)&v1150);
                    }
                    else
                    {
                      if (SHIBYTE(v1150.__r_.__value_.__r.__words[2]) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)v541[4], v1150.__r_.__value_.__l.__data_, v1150.__r_.__value_.__l.__size_);
                      }
                      else
                      {
                        long long v544 = *(_OWORD *)&v1150.__r_.__value_.__l.__data_;
                        *((void *)v543 + 2) = *((void *)&v1150.__r_.__value_.__l + 2);
                        *(_OWORD *)v543 = v544;
                      }
                      v556 = (std::string *)(v543 + 24);
                      v542[4] = v543 + 24;
                    }
                    v542[4] = (char *)v556;
                    uint64_t v583 = *(void *)v934 + 96;
                    *(void *)v1163 = v538;
                    *(void *)v1168 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v583, v538, v1163)[3];
                    v584 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, *(void **)v1168, (long long **)v1168);
                    *(void *)v1168 = &v1150;
                    v585 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, &v1150, (long long **)v1168);
                    long long v586 = *(_OWORD *)(v584 + 56);
                    long long v587 = *(_OWORD *)(v584 + 72);
                    *((void *)v585 + 11) = *((void *)v584 + 11);
                    *(_OWORD *)(v585 + 72) = v587;
                    *(_OWORD *)(v585 + 56) = v586;
                    if (v585 != v584) {
                      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v585 + 96, *((char **)v584 + 12), *((void *)v584 + 13), (uint64_t)(*((void *)v584 + 13) - *((void *)v584 + 12)) >> 2);
                    }
                  }
                  if (SHIBYTE(v1150.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string v436 = (void *)v1150.__r_.__value_.__r.__words[0];
                    goto LABEL_1435;
                  }
LABEL_1436:
                  unsigned int v264 = v931;
                  if (!v931)
                  {
LABEL_566:
                    *(void *)v1168 = &__str;
                    int v265 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v1118, &__str, (long long **)v1168);
                    ++*((_DWORD *)v265 + 14);
                    goto LABEL_567;
                  }
LABEL_565:
                  nitro::nitro_function::nitro_function(v264);
                  goto LABEL_566;
                }
                goto LABEL_1141;
              }
              goto LABEL_1144;
            }
            goto LABEL_1175;
          }
          if (*((char *)v490 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v1182, *(const std::string::value_type **)v490, *((void *)v490 + 1));
          }
          else
          {
            long long v492 = *v490;
            v1182.__r_.__value_.__r.__words[2] = *((void *)v490 + 2);
            *(_OWORD *)&v1182.__r_.__value_.__l.__data_ = v492;
          }
          std::string::size_type v493 = v1185.__r_.__value_.__r.__words[0] + 24 * v473;
          if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v494 = HIBYTE(v1182.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v494 = v1182.__r_.__value_.__l.__size_;
          }
          uint64_t v495 = *(unsigned __int8 *)(v493 + 23);
          int v496 = (char)v495;
          if ((v495 & 0x80u) != 0) {
            uint64_t v495 = *(void *)(v493 + 8);
          }
          if (v494 != v495) {
            goto LABEL_1195;
          }
          v497 = v496 >= 0
               ? (unsigned __int8 *)(v1185.__r_.__value_.__r.__words[0] + 24 * v473)
               : *(unsigned __int8 **)v493;
          if ((*((unsigned char *)&v1182.__r_.__value_.__s + 23) & 0x80) != 0) {
            break;
          }
          if (*((unsigned char *)&v1182.__r_.__value_.__s + 23))
          {
            v498 = &v1182;
            uint64_t v499 = HIBYTE(v1182.__r_.__value_.__r.__words[2]);
            do
            {
              if (v498->__r_.__value_.__s.__data_[0] != *v497) {
                goto LABEL_1195;
              }
              v498 = (std::string *)((char *)v498 + 1);
              ++v497;
              --v499;
            }
            while (v499);
            char v488 = 1;
LABEL_1195:
            if ((*((unsigned char *)&v1182.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_1200;
            }
            v500 = (void *)v1182.__r_.__value_.__r.__words[0];
LABEL_1198:
            operator delete(v500);
            goto LABEL_1200;
          }
          char v488 = 1;
LABEL_1200:
          v490 = (long long *)((char *)v490 + 24);
        }
        v500 = (void *)v1182.__r_.__value_.__r.__words[0];
        v488 |= memcmp(v1182.__r_.__value_.__l.__data_, v497, v1182.__r_.__value_.__l.__size_) == 0;
        goto LABEL_1198;
      }
      if (v402)
      {
        v403 = v402;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v402 + 384))(v402))
        {
          std::string::basic_string[abi:ne180100]<0>(v1163, "activation_grad");
          uint64_t v404 = (*(uint64_t (**)(void *))(*(void *)v403 + 384))(v403);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)v1168, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)v1168 = __s;
          }
          if (SHIBYTE(v1109.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)&v1168[24], v1109.__r_.__value_.__l.__data_, v1109.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)&v1168[24] = v1109;
          }
          if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v1168[48], v1108.__r_.__value_.__l.__data_, v1108.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v1168[48] = *(_OWORD *)&v1108.__r_.__value_.__l.__data_;
            *(void *)&long long v1169 = *((void *)&v1108.__r_.__value_.__l + 2);
          }
          v996 = 0;
          v995 = 0;
          v997 = 0;
          v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v995;
          v1184[0].__r_.__value_.__s.__data_[8] = 0;
          v995 = (std::string *)operator new(0x48uLL);
          v996 = v995;
          v997 = v995 + 3;
          v996 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v997, (long long *)v1168, (long long *)((char *)&v1169 + 8), v995);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(v1184, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else {
            v1184[0] = __str;
          }
          v993 = 0;
          v992 = 0;
          v994 = 0;
          __n[0] = (std::string::size_type)&v992;
          LOBYTE(__n[1]) = 0;
          v992 = (std::string *)operator new(0x18uLL);
          v993 = v992;
          v994 = v992 + 1;
          v993 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v994, (long long *)v1184, (long long *)&v1184[1], v992);
          add_with_context_transfers_t<Espresso::activation_params>(&v998, (uint64_t)&v1133, (uint64_t)v1163, (uint64_t)&v1112, v404, (uint64_t *)&v995, (uint64_t *)&v992);
          if (v999) {
            nitro::nitro_function::nitro_function(v999);
          }
          __n[0] = (std::string::size_type)&v992;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
          if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1184[0].__r_.__value_.__l.__data_);
          }
          v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v995;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
          for (uint64_t i2 = 0; i2 != -72; i2 -= 24)
          {
            if (*((char *)&v1169 + i2 + 7) < 0) {
              operator delete(*(void **)&v1168[i2 + 48]);
            }
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v1163, "activation_grad");
          uint64_t v576 = (*(uint64_t (**)(void *))(*(void *)v403 + 384))(v403);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)v1168, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)v1168 = __s;
          }
          if (SHIBYTE(v1109.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)&v1168[24], v1109.__r_.__value_.__l.__data_, v1109.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)&v1168[24] = v1109;
          }
          v1004 = 0;
          v1003 = 0;
          v1005 = 0;
          v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1003;
          v1184[0].__r_.__value_.__s.__data_[8] = 0;
          v1003 = (std::string *)operator new(0x30uLL);
          v1004 = v1003;
          v1005 = v1003 + 2;
          v1004 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1005, (long long *)v1168, (long long *)&v1168[48], v1003);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(v1184, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else {
            v1184[0] = __str;
          }
          v1001 = 0;
          v1000 = 0;
          v1002 = 0;
          __n[0] = (std::string::size_type)&v1000;
          LOBYTE(__n[1]) = 0;
          v1000 = (std::string *)operator new(0x18uLL);
          v1001 = v1000;
          v1002 = v1000 + 1;
          v1001 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1002, (long long *)v1184, (long long *)&v1184[1], v1000);
          add_with_context_transfers_t<Espresso::activation_params>(&v1006, (uint64_t)&v1133, (uint64_t)v1163, (uint64_t)&v1112, v576, (uint64_t *)&v1003, (uint64_t *)&v1000);
          if (v1007) {
            nitro::nitro_function::nitro_function(v1007);
          }
          __n[0] = (std::string::size_type)&v1000;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
          if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1184[0].__r_.__value_.__l.__data_);
          }
          v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1003;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
          for (uint64_t i3 = 0; i3 != -48; i3 -= 24)
          {
            if ((char)v1168[i3 + 47] < 0) {
              operator delete(*(void **)&v1168[i3 + 24]);
            }
          }
        }
LABEL_1433:
        if ((v1163[23] & 0x80000000) != 0)
        {
          std::string v436 = *(void **)v1163;
LABEL_1435:
          operator delete(v436);
        }
        goto LABEL_1436;
      }
      if (v557)
      {
        v558 = v557;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(&v1151, 0, sizeof(v1151));
        uint64_t v559 = *(void *)v934 + 56;
        *(void *)v1168 = v1115;
        v560 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v559, v1115, v1168);
        v561 = (long long *)v560[3];
        v562 = (long long *)v560[4];
        while (v561 != v562)
        {
          if (*((char *)v561 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v1163, *(const std::string::value_type **)v561, *((void *)v561 + 1));
          }
          else
          {
            long long v563 = *v561;
            *(void *)&v1163[16] = *((void *)v561 + 2);
            *(_OWORD *)v1163 = v563;
          }
          if (v1163[23] >= 0) {
            size_t v564 = v1163[23];
          }
          else {
            size_t v564 = *(void *)&v1163[8];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v1184, v564 + 5);
          if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v565 = v1184;
          }
          else {
            v565 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
          }
          if (v564)
          {
            if (v1163[23] >= 0) {
              v566 = v1163;
            }
            else {
              v566 = *(unsigned char **)v1163;
            }
            memmove(v565, v566, v564);
          }
          strcpy((char *)v565 + v564, "_diff");
          std::vector<std::string>::pointer end = v1151.__end_;
          if (v1151.__end_ >= v1151.__end_cap_.__value_)
          {
            unint64_t v569 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1151.__end_ - (char *)v1151.__begin_) >> 3);
            unint64_t v570 = v569 + 1;
            if (v569 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v1151.__end_cap_.__value_ - (char *)v1151.__begin_) >> 3) > v570) {
              unint64_t v570 = 0x5555555555555556 * (((char *)v1151.__end_cap_.__value_ - (char *)v1151.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v1151.__end_cap_.__value_ - (char *)v1151.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v571 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v571 = v570;
            }
            *(void *)&v1168[32] = &v1151.__end_cap_;
            if (v571) {
              unint64_t v571 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v571);
            }
            else {
              uint64_t v572 = 0;
            }
            unint64_t v573 = v571 + 24 * v569;
            *(void *)v1168 = v571;
            *(void *)&v1168[8] = v573;
            *(void *)&v1168[24] = v571 + 24 * v572;
            long long v574 = *(_OWORD *)&v1184[0].__r_.__value_.__l.__data_;
            *(void *)(v573 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v1184[0].__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v573 = v574;
            memset(v1184, 0, 24);
            *(void *)&v1168[16] = v573 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v1151, (std::__split_buffer<std::string> *)v1168);
            v575 = v1151.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v1168);
            v1151.__end_ = v575;
            if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1184[0].__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v568 = *(_OWORD *)&v1184[0].__r_.__value_.__l.__data_;
            v1151.__end_->__r_.__value_.__r.__words[2] = v1184[0].__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v568;
            v1151.__end_ = end + 1;
          }
          if ((v1163[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1163);
          }
          v561 = (long long *)((char *)v561 + 24);
        }
        std::string::basic_string[abi:ne180100]<0>(&v1150, "concat_grad");
        lpsrcb = (void *)(*(uint64_t (**)(void *))(*(void *)v558 + 320))(v558);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v1161, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v1161 = __s;
        }
        v988 = 0;
        v987 = 0;
        v989 = 0;
        *(void *)v1168 = &v987;
        v1168[8] = 0;
        v987 = (std::string *)operator new(0x18uLL);
        v988 = v987;
        v989 = v987 + 1;
        v988 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v989, (long long *)&v1161, (long long *)&v1162, v987);
        uint64_t v986 = 0;
        uint64_t v984 = 0;
        uint64_t v985 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v984, (uint64_t)v1151.__begin_, (uint64_t)v1151.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v1151.__end_ - (char *)v1151.__begin_) >> 3));
        *(_OWORD *)&v1184[0].__r_.__value_.__r.__words[1] = 0uLL;
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1184[0].__r_.__value_.__l.__size_;
        LODWORD(v1152) = 0;
        v596 = v987;
        v942 = v988;
        if (v987 == v988)
        {
          v619 = v987;
          goto LABEL_1484;
        }
        int v597 = 0;
        do
        {
          if (SHIBYTE(v596->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v1168, v596->__r_.__value_.__l.__data_, v596->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v598 = *(_OWORD *)&v596->__r_.__value_.__l.__data_;
            *(void *)&v1168[16] = *((void *)&v596->__r_.__value_.__l + 2);
            *(_OWORD *)v1168 = v598;
          }
          uint64_t v599 = v1139;
          uint64_t v600 = *(void *)(v1139 + 32);
          if (*(void *)(v1139 + 40) != v600)
          {
            unint64_t v601 = 0;
            while (1)
            {
              uint64_t v602 = *(void *)(*(void *)(v600 + 16 * v601) + 64);
              std::string::size_type v604 = *(void *)(v602 + 8);
              std::string::size_type v603 = *(void *)(v602 + 16);
              __n[0] = v604;
              __n[1] = v603;
              if (v603)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v603 + 8), 1uLL, memory_order_relaxed);
                uint64_t v599 = v1139;
              }
              *(void *)v1163 = v601;
              v605 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v599 + 96, v601, v1163);
              v606 = (long long *)v605[3];
              v607 = (long long *)v605[4];
              if (v606 != v607) {
                break;
              }
LABEL_1475:
              if (__n[1]) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)__n[1]);
              }
              ++v601;
              uint64_t v599 = v1139;
              uint64_t v600 = *(void *)(v1139 + 32);
              if (v601 >= (*(void *)(v1139 + 40) - v600) >> 4)
              {
                int v597 = (int)v1152;
                goto LABEL_1479;
              }
            }
            unint64_t v608 = __n[0];
            int v609 = (int)v1152;
            while (1)
            {
              if (*((char *)v606 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1163, *(const std::string::value_type **)v606, *((void *)v606 + 1));
              }
              else
              {
                long long v610 = *v606;
                *(void *)&v1163[16] = *((void *)v606 + 2);
                *(_OWORD *)v1163 = v610;
              }
              uint64_t v611 = v1163[23];
              char v612 = v1163[23];
              if (v1163[23] >= 0) {
                uint64_t v613 = v1163[23];
              }
              else {
                uint64_t v613 = *(void *)&v1163[8];
              }
              uint64_t v614 = v1168[23];
              if (v1168[23] < 0) {
                uint64_t v614 = *(void *)&v1168[8];
              }
              if (v613 == v614)
              {
                if (v1168[23] >= 0) {
                  v615 = v1168;
                }
                else {
                  v615 = *(unsigned __int8 **)v1168;
                }
                if ((v1163[23] & 0x80000000) != 0)
                {
                  v617 = *(void **)v1163;
                  if (memcmp(*(const void **)v1163, v615, *(size_t *)&v1163[8])) {
                    goto LABEL_1473;
                  }
LABEL_1469:
                  if (v608 != (void)v1143)
                  {
                    v618 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)v1184, v608, (uint64_t *)__n);
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v618 + 6, v609, (unsigned int *)&v1152)+ 8) = 1;
                    char v612 = v1163[23];
                  }
                  goto LABEL_1471;
                }
                if (!v1163[23]) {
                  goto LABEL_1469;
                }
                v616 = v1163;
                while (*v616 == *v615)
                {
                  ++v616;
                  ++v615;
                  if (!--v611) {
                    goto LABEL_1469;
                  }
                }
              }
LABEL_1471:
              if (v612 < 0)
              {
                v617 = *(void **)v1163;
LABEL_1473:
                operator delete(v617);
              }
              v606 = (long long *)((char *)v606 + 24);
              if (v606 == v607) {
                goto LABEL_1475;
              }
            }
          }
LABEL_1479:
          LODWORD(v1152) = ++v597;
          if ((v1168[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1168);
          }
          ++v596;
        }
        while (v596 != v942);
        v619 = v987;
        v596 = v988;
LABEL_1484:
        __n[1] = 0;
        __n[0] = 0;
        *(void *)&long long v1179 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v619, (uint64_t)v596, 0xAAAAAAAAAAAAAAABLL * (((char *)v596 - (char *)v619) >> 3));
        v620 = (std::string::__raw *)v1184[0].__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v1184[0].__r_.__value_.__l.__data_ == &v1184[0].__r_.__value_.__r.__words[1]) {
          goto LABEL_1640;
        }
LABEL_1485:
        std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1168, &v620[1].__words[1]);
        long long v621 = *(_OWORD *)v1168;
        if (*(void *)&v1168[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v1168[8] + 8), 1uLL, memory_order_relaxed);
        }
        memset(&v1189, 0, sizeof(v1189));
        memset(&v1187, 0, sizeof(v1187));
        std::string::basic_string[abi:ne180100]<0>(&v1185, "");
        v622 = *(unsigned char **)&v1168[16];
        if (*(unsigned char **)&v1168[16] == &v1168[24]) {
          goto LABEL_1588;
        }
LABEL_1488:
        int v623 = *((_DWORD *)v622 + 7);
        v624 = &v987[v623];
        if (SHIBYTE(v624->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v1163, v624->__r_.__value_.__l.__data_, v624->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v625 = *(_OWORD *)&v624->__r_.__value_.__l.__data_;
          *(void *)&v1163[16] = *((void *)&v624->__r_.__value_.__l + 2);
          *(_OWORD *)v1163 = v625;
        }
        if (v1163[23] >= 0) {
          int64_t v626 = v1163[23];
        }
        else {
          int64_t v626 = *(void *)&v1163[8];
        }
        if (v1163[23] >= 0) {
          v627 = v1163;
        }
        else {
          v627 = *(char **)v1163;
        }
        if (v626 < 4) {
          goto LABEL_1506;
        }
        v628 = &v627[v626];
        int64_t v629 = v626;
        v630 = v627;
        while (1)
        {
          v631 = (char *)memchr(v630, 99, v629 - 3);
          if (!v631) {
            goto LABEL_1506;
          }
          if (*(_DWORD *)v631 == 1601532003) {
            break;
          }
          v630 = v631 + 1;
          int64_t v629 = v628 - v630;
          if (v628 - v630 < 4) {
            goto LABEL_1506;
          }
        }
        if (v631 == v628 || v631 != v627)
        {
LABEL_1506:
          std::string::basic_string[abi:ne180100]((uint64_t)&v1154, v626 + 3);
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v632 = &v1154;
          }
          else {
            v632 = (std::string *)v1154.__r_.__value_.__r.__words[0];
          }
          if (v626)
          {
            if (v1163[23] >= 0) {
              v633 = v1163;
            }
            else {
              v633 = *(unsigned char **)v1163;
            }
            memmove(v632, v633, v626);
          }
          *(_DWORD *)((char *)&v632->__r_.__value_.__l.__data_ + v626) = 7894111;
        }
        else
        {
          std::string::basic_string(&v1154, (const std::string *)v1163, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1182);
        }
        std::string::size_type v634 = __n[0] + 24 * v623;
        if (*(char *)(v634 + 23) < 0) {
          operator delete(*(void **)v634);
        }
        long long v635 = *(_OWORD *)&v1154.__r_.__value_.__l.__data_;
        *(void *)(v634 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v1154.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v634 = v635;
        uint64_t v636 = v1139;
        if (*(void *)(v1139 + 40) == *(void *)(v1139 + 32))
        {
LABEL_1547:
          v651 = &v987[v623];
          v652 = (_OWORD *)v1189.__r_.__value_.__l.__size_;
          if (v1189.__r_.__value_.__l.__size_ >= v1189.__r_.__value_.__r.__words[2])
          {
            v654 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1189.__r_.__value_.__l.__data_, (uint64_t)v651);
          }
          else
          {
            if (SHIBYTE(v651->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1189.__r_.__value_.__l.__size_, v651->__r_.__value_.__l.__data_, v651->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v653 = *(_OWORD *)&v651->__r_.__value_.__l.__data_;
              *(void *)(v1189.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v651->__r_.__value_.__l + 2);
              _OWORD *v652 = v653;
            }
            v654 = (std::string *)((char *)v652 + 24);
          }
          v1189.__r_.__value_.__l.__size_ = (std::string::size_type)v654;
          uint64_t v655 = __n[0] + 24 * v623;
          v656 = (_OWORD *)v1187.__r_.__value_.__l.__size_;
          if (v1187.__r_.__value_.__l.__size_ >= v1187.__r_.__value_.__r.__words[2])
          {
            v658 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1187.__r_.__value_.__l.__data_, v655);
          }
          else
          {
            if (*(char *)(v655 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1187.__r_.__value_.__l.__size_, *(const std::string::value_type **)v655, *(void *)(v655 + 8));
            }
            else
            {
              long long v657 = *(_OWORD *)v655;
              *(void *)(v1187.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *(void *)(v655 + 16);
              _OWORD *v656 = v657;
            }
            v658 = (std::string *)((char *)v656 + 24);
          }
          v1187.__r_.__value_.__l.__size_ = (std::string::size_type)v658;
          if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v659 = HIBYTE(v1185.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v659 = v1185.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1154, v659 + 1);
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v660 = &v1154;
          }
          else {
            v660 = (std::string *)v1154.__r_.__value_.__r.__words[0];
          }
          if (v659)
          {
            if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v661 = &v1185;
            }
            else {
              v661 = (std::string *)v1185.__r_.__value_.__r.__words[0];
            }
            memmove(v660, v661, v659);
          }
          *(_WORD *)((char *)&v660->__r_.__value_.__l.__data_ + v659) = 95;
          v662 = &v987[v623];
          int v663 = SHIBYTE(v662->__r_.__value_.__r.__words[2]);
          if (v663 >= 0) {
            v664 = &v987[v623];
          }
          else {
            v664 = (std::string *)v662->__r_.__value_.__r.__words[0];
          }
          if (v663 >= 0) {
            std::string::size_type v665 = HIBYTE(v662->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v665 = v662->__r_.__value_.__l.__size_;
          }
          v666 = std::string::append(&v1154, (const std::string::value_type *)v664, v665);
          std::string::size_type v667 = v666->__r_.__value_.__r.__words[0];
          v1182.__r_.__value_.__r.__words[0] = v666->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v1182.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v666->__r_.__value_.__r.__words[1] + 7);
          char v668 = HIBYTE(v666->__r_.__value_.__r.__words[2]);
          v666->__r_.__value_.__l.__size_ = 0;
          v666->__r_.__value_.__r.__words[2] = 0;
          v666->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          v1185.__r_.__value_.__r.__words[0] = v667;
          v1185.__r_.__value_.__l.__size_ = v1182.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v1185.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1182.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v1185.__r_.__value_.__s + 23) = v668;
          if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1154.__r_.__value_.__l.__data_);
          }
          goto LABEL_1580;
        }
        unint64_t v637 = 0;
        char v638 = 0;
LABEL_1519:
        v1154.__r_.__value_.__r.__words[0] = v637;
        v639 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v636 + 96, v637, &v1154);
        v640 = (long long *)v639[3];
        v641 = (long long *)v639[4];
        while (1)
        {
          if (v640 == v641)
          {
            ++v637;
            uint64_t v636 = v1139;
            if (v637 >= (uint64_t)(*(void *)(v1139 + 40) - *(void *)(v1139 + 32)) >> 4)
            {
              if ((v638 & 1) == 0) {
                goto LABEL_1547;
              }
LABEL_1580:
              if ((v1163[23] & 0x80000000) != 0) {
                operator delete(*(void **)v1163);
              }
              v669 = (void *)*((void *)v622 + 1);
              if (v669)
              {
                do
                {
                  v670 = v669;
                  v669 = (void *)*v669;
                }
                while (v669);
              }
              else
              {
                do
                {
                  v670 = (unsigned char *)*((void *)v622 + 2);
                  _ZF = *(void *)v670 == (void)v622;
                  v622 = v670;
                }
                while (!_ZF);
              }
              v622 = v670;
              if (v670 == &v1168[24])
              {
LABEL_1588:
                if (v1187.__r_.__value_.__l.__size_ == v1187.__r_.__value_.__r.__words[0]) {
                  goto LABEL_1628;
                }
                memset(v1163, 0, 32);
                std::string::basic_string[abi:ne180100]<0>(&v1154, "context_transfer");
                if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v671 = HIBYTE(v1185.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v671 = v1185.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v1182, v671 + 3);
                if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v672 = &v1182;
                }
                else {
                  v672 = (std::string *)v1182.__r_.__value_.__r.__words[0];
                }
                if (v671)
                {
                  if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v673 = &v1185;
                  }
                  else {
                    v673 = (std::string *)v1185.__r_.__value_.__r.__words[0];
                  }
                  memmove(v672, v673, v671);
                }
                *(_DWORD *)((char *)&v672->__r_.__value_.__l.__data_ + v671) = 7894111;
                memset(&v1180, 0, sizeof(v1180));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1180, (uint64_t)v1189.__r_.__value_.__l.__data_, v1189.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1189.__r_.__value_.__l.__size_ - v1189.__r_.__value_.__r.__words[0]) >> 3));
                long long v1176 = 0uLL;
                uint64_t v1177 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1176, (uint64_t)v1187.__r_.__value_.__l.__data_, v1187.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1187.__r_.__value_.__l.__size_ - v1187.__r_.__value_.__r.__words[0]) >> 3));
                Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1159, (uint64_t *)&v1133, (uint64_t)&v1154, (uint64_t)&v1182, (uint64_t)v1163, (uint64_t)v1180.__r_.__value_.__l.__data_, v1180.__r_.__value_.__l.__size_, (uint64_t *)&v1176);
                v1157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1176;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1157);
                v1157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1180;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1157);
                if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1182.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1154.__r_.__value_.__l.__data_);
                }
                if (!v1159.__r_.__value_.__r.__words[0])
                {
                  v674 = 0;
LABEL_1609:
                  v675 = 0;
                  goto LABEL_1610;
                }
                if (!v674) {
                  goto LABEL_1609;
                }
                v675 = (std::__shared_weak_count *)v1159.__r_.__value_.__l.__size_;
                if (v1159.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v1159.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
LABEL_1610:
                LODWORD(v1182.__r_.__value_.__l.__data_) = 0;
                Espresso::create_context((int *)&v1182, &v1154);
                long long v676 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v677 = (std::__shared_weak_count *)*((void *)v674 + 40);
                *(_OWORD *)(v674 + 312) = v676;
                if (v677) {
                  nitro::nitro_function::nitro_function(v677);
                }
                if (*((void *)&v621 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v621 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v678 = (std::__shared_weak_count *)*((void *)v674 + 42);
                *(_OWORD *)(v674 + 328) = v621;
                if (v678) {
                  nitro::nitro_function::nitro_function(v678);
                }
                long long v679 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v680 = (std::__shared_weak_count *)*((void *)v674 + 2);
                *(_OWORD *)(v674 + 8) = v679;
                if (v680) {
                  nitro::nitro_function::nitro_function(v680);
                }
                int v681 = (***(uint64_t (****)(void))(*((void *)v674 + 39) + 8))(*(void *)(*((void *)v674 + 39) + 8));
                *(_DWORD *)(*(void *)(*(void *)(v1139 + 40) - 16) + 8) = v681;
                if (v1154.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1154.__r_.__value_.__l.__size_);
                }
                if (v675) {
                  nitro::nitro_function::nitro_function(v675);
                }
                if (v1159.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1159.__r_.__value_.__l.__size_);
                }
LABEL_1628:
                if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1185.__r_.__value_.__l.__data_);
                }
                *(void *)v1163 = &v1187;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                *(void *)v1163 = &v1189;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                if (*((void *)&v621 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v621 + 1));
                }
                std::__tree<int>::destroy(*(void **)&v1168[24]);
                if (*(void *)&v1168[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1168[8]);
                }
                v682 = (std::string *)v620->__words[1];
                if (v682)
                {
                  do
                  {
                    v683 = v682;
                    v682 = (std::string *)v682->__r_.__value_.__r.__words[0];
                  }
                  while (v682);
                }
                else
                {
                  do
                  {
                    v683 = (std::string *)v620->__words[2];
                    _ZF = v683->__r_.__value_.__r.__words[0] == (void)v620;
                    v620 = (std::string::__raw *)v683;
                  }
                  while (!_ZF);
                }
                v620 = (std::string::__raw *)v683;
                if (v683 == (std::string *)&v1184[0].__r_.__value_.__r.__words[1])
                {
LABEL_1640:
                  char v1149 = 1;
                  memset(v1168, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1168, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
                  memset(v1163, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1163, v984, v985, 0xAAAAAAAAAAAAAAABLL * ((v985 - v984) >> 3));
                  Espresso::sequential_builder::add<Espresso::concat_params>(&v990, (uint64_t *)&v1133, (uint64_t)&v1150, (uint64_t)&v1112, (uint64_t)lpsrcb, *(uint64_t *)v1168, *(uint64_t *)&v1168[8], (uint64_t *)v1163);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1163;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1168;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((void *)v1184[0].__r_.__value_.__l.__size_);
                  if (v991) {
                    nitro::nitro_function::nitro_function(v991);
                  }
                  *(void *)v1168 = &v984;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1168);
                  v684 = &v987;
                  goto LABEL_1643;
                }
                goto LABEL_1485;
              }
              goto LABEL_1488;
            }
            goto LABEL_1519;
          }
          if (*((char *)v640 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v1154, *(const std::string::value_type **)v640, *((void *)v640 + 1));
          }
          else
          {
            long long v642 = *v640;
            v1154.__r_.__value_.__r.__words[2] = *((void *)v640 + 2);
            *(_OWORD *)&v1154.__r_.__value_.__l.__data_ = v642;
          }
          std::string::size_type v643 = __n[0] + 24 * v623;
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v644 = HIBYTE(v1154.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v644 = v1154.__r_.__value_.__l.__size_;
          }
          uint64_t v645 = *(unsigned __int8 *)(v643 + 23);
          int v646 = (char)v645;
          if ((v645 & 0x80u) != 0) {
            uint64_t v645 = *(void *)(v643 + 8);
          }
          if (v644 != v645) {
            goto LABEL_1539;
          }
          v647 = v646 >= 0 ? (unsigned __int8 *)(__n[0] + 24 * v623) : *(unsigned __int8 **)v643;
          if ((*((unsigned char *)&v1154.__r_.__value_.__s + 23) & 0x80) != 0) {
            break;
          }
          if (*((unsigned char *)&v1154.__r_.__value_.__s + 23))
          {
            v648 = &v1154;
            uint64_t v649 = HIBYTE(v1154.__r_.__value_.__r.__words[2]);
            do
            {
              if (v648->__r_.__value_.__s.__data_[0] != *v647) {
                goto LABEL_1539;
              }
              v648 = (std::string *)((char *)v648 + 1);
              ++v647;
              --v649;
            }
            while (v649);
            char v638 = 1;
LABEL_1539:
            if ((*((unsigned char *)&v1154.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_1544;
            }
            v650 = (void *)v1154.__r_.__value_.__r.__words[0];
LABEL_1542:
            operator delete(v650);
            goto LABEL_1544;
          }
          char v638 = 1;
LABEL_1544:
          v640 = (long long *)((char *)v640 + 24);
        }
        v650 = (void *)v1154.__r_.__value_.__r.__words[0];
        v638 |= memcmp(v1154.__r_.__value_.__l.__data_, v647, v1154.__r_.__value_.__l.__size_) == 0;
        goto LABEL_1542;
      }
      if (v588)
      {
        v589 = v588;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(void *)(v932 + 88) - *(void *)(v932 + 80) < 0x11uLL) {
          goto LABEL_1436;
        }
        memset(&v1151, 0, sizeof(v1151));
        uint64_t v590 = *(void *)v934 + 96;
        unint64_t v591 = v1115;
        *(void *)v1168 = v1115;
        uint64_t v592 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v590, v1115, v1168)[3];
        std::vector<std::string>::pointer v593 = v1151.__end_;
        if (v1151.__end_ >= v1151.__end_cap_.__value_)
        {
          v704 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v1151, v592);
        }
        else
        {
          if (*(char *)(v592 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v1151.__end_, *(const std::string::value_type **)v592, *(void *)(v592 + 8));
          }
          else
          {
            long long v594 = *(_OWORD *)v592;
            v1151.__end_->__r_.__value_.__r.__words[2] = *(void *)(v592 + 16);
            *(_OWORD *)&v593->__r_.__value_.__l.__data_ = v594;
          }
          v704 = v593 + 1;
        }
        v1151.__end_ = v704;
        uint64_t v799 = *(void *)v934 + 56;
        *(void *)v1168 = v591;
        uint64_t v800 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v799, v591, v1168)[3];
        v801 = (long long *)(v800 + 24);
        std::vector<std::string>::pointer v802 = v1151.__end_;
        if (v1151.__end_ >= v1151.__end_cap_.__value_)
        {
          v804 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v1151, (uint64_t)v801);
        }
        else
        {
          if (*(char *)(v800 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v1151.__end_, *(const std::string::value_type **)(v800 + 24), *(void *)(v800 + 32));
          }
          else
          {
            long long v803 = *v801;
            v1151.__end_->__r_.__value_.__r.__words[2] = *(void *)(v800 + 40);
            *(_OWORD *)&v802->__r_.__value_.__l.__data_ = v803;
          }
          v804 = v802 + 1;
        }
        v1151.__end_ = v804;
        std::string::basic_string[abi:ne180100]<0>(&v1150, "softmax_loss_grad");
        uint64_t v805 = (*(uint64_t (**)(void *))(*(void *)v589 + 320))(v589);
        uint64_t v980 = 0;
        uint64_t v979 = 0;
        uint64_t v981 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v979, (uint64_t)v1151.__begin_, (uint64_t)v1151.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v1151.__end_ - (char *)v1151.__begin_) >> 3));
        lpsrcd = (void *)v805;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v1161, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string v1161 = __str;
        }
        v977 = 0;
        v976 = 0;
        v978 = 0;
        *(void *)v1168 = &v976;
        v1168[8] = 0;
        v976 = (std::string *)operator new(0x18uLL);
        v977 = v976;
        v978 = v976 + 1;
        v977 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v978, (long long *)&v1161, (long long *)&v1162, v976);
        *(_OWORD *)&v1184[0].__r_.__value_.__r.__words[1] = 0uLL;
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1184[0].__r_.__value_.__l.__size_;
        LODWORD(v1152) = 0;
        uint64_t v806 = v979;
        uint64_t v944 = v980;
        if (v979 == v980)
        {
          uint64_t v829 = v979;
          goto LABEL_1962;
        }
        int v807 = 0;
        do
        {
          if (*(char *)(v806 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v1168, *(const std::string::value_type **)v806, *(void *)(v806 + 8));
          }
          else
          {
            long long v808 = *(_OWORD *)v806;
            *(void *)&v1168[16] = *(void *)(v806 + 16);
            *(_OWORD *)v1168 = v808;
          }
          uint64_t v809 = v1139;
          uint64_t v810 = *(void *)(v1139 + 32);
          if (*(void *)(v1139 + 40) != v810)
          {
            unint64_t v811 = 0;
            while (1)
            {
              uint64_t v812 = *(void *)(*(void *)(v810 + 16 * v811) + 64);
              std::string::size_type v814 = *(void *)(v812 + 8);
              std::string::size_type v813 = *(void *)(v812 + 16);
              __n[0] = v814;
              __n[1] = v813;
              if (v813)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v813 + 8), 1uLL, memory_order_relaxed);
                uint64_t v809 = v1139;
              }
              *(void *)v1163 = v811;
              v815 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v809 + 96, v811, v1163);
              v816 = (long long *)v815[3];
              v817 = (long long *)v815[4];
              if (v816 != v817) {
                break;
              }
LABEL_1953:
              if (__n[1]) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)__n[1]);
              }
              ++v811;
              uint64_t v809 = v1139;
              uint64_t v810 = *(void *)(v1139 + 32);
              if (v811 >= (*(void *)(v1139 + 40) - v810) >> 4)
              {
                int v807 = (int)v1152;
                goto LABEL_1957;
              }
            }
            unint64_t v818 = __n[0];
            int v819 = (int)v1152;
            while (1)
            {
              if (*((char *)v816 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1163, *(const std::string::value_type **)v816, *((void *)v816 + 1));
              }
              else
              {
                long long v820 = *v816;
                *(void *)&v1163[16] = *((void *)v816 + 2);
                *(_OWORD *)v1163 = v820;
              }
              uint64_t v821 = v1163[23];
              char v822 = v1163[23];
              if (v1163[23] >= 0) {
                uint64_t v823 = v1163[23];
              }
              else {
                uint64_t v823 = *(void *)&v1163[8];
              }
              uint64_t v824 = v1168[23];
              if (v1168[23] < 0) {
                uint64_t v824 = *(void *)&v1168[8];
              }
              if (v823 == v824)
              {
                if (v1168[23] >= 0) {
                  v825 = v1168;
                }
                else {
                  v825 = *(unsigned __int8 **)v1168;
                }
                if ((v1163[23] & 0x80000000) != 0)
                {
                  v827 = *(void **)v1163;
                  if (memcmp(*(const void **)v1163, v825, *(size_t *)&v1163[8])) {
                    goto LABEL_1951;
                  }
LABEL_1947:
                  if (v818 != (void)v1143)
                  {
                    v828 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)v1184, v818, (uint64_t *)__n);
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v828 + 6, v819, (unsigned int *)&v1152)+ 8) = 1;
                    char v822 = v1163[23];
                  }
                  goto LABEL_1949;
                }
                if (!v1163[23]) {
                  goto LABEL_1947;
                }
                v826 = v1163;
                while (*v826 == *v825)
                {
                  ++v826;
                  ++v825;
                  if (!--v821) {
                    goto LABEL_1947;
                  }
                }
              }
LABEL_1949:
              if (v822 < 0)
              {
                v827 = *(void **)v1163;
LABEL_1951:
                operator delete(v827);
              }
              v816 = (long long *)((char *)v816 + 24);
              if (v816 == v817) {
                goto LABEL_1953;
              }
            }
          }
LABEL_1957:
          LODWORD(v1152) = ++v807;
          if ((v1168[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1168);
          }
          v806 += 24;
        }
        while (v806 != v944);
        uint64_t v829 = v979;
        uint64_t v806 = v980;
LABEL_1962:
        __n[1] = 0;
        __n[0] = 0;
        *(void *)&long long v1179 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, v829, v806, 0xAAAAAAAAAAAAAAABLL * ((v806 - v829) >> 3));
        v830 = (std::string::__raw *)v1184[0].__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v1184[0].__r_.__value_.__l.__data_ == &v1184[0].__r_.__value_.__r.__words[1]) {
          goto LABEL_2118;
        }
LABEL_1963:
        std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1168, &v830[1].__words[1]);
        long long v831 = *(_OWORD *)v1168;
        if (*(void *)&v1168[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v1168[8] + 8), 1uLL, memory_order_relaxed);
        }
        memset(&v1189, 0, sizeof(v1189));
        memset(&v1187, 0, sizeof(v1187));
        std::string::basic_string[abi:ne180100]<0>(&v1185, "");
        v832 = *(unsigned char **)&v1168[16];
        if (*(unsigned char **)&v1168[16] == &v1168[24]) {
          goto LABEL_2066;
        }
LABEL_1966:
        int v833 = *((_DWORD *)v832 + 7);
        uint64_t v834 = v979 + 24 * v833;
        if (*(char *)(v834 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v1163, *(const std::string::value_type **)v834, *(void *)(v834 + 8));
        }
        else
        {
          long long v835 = *(_OWORD *)v834;
          *(void *)&v1163[16] = *(void *)(v834 + 16);
          *(_OWORD *)v1163 = v835;
        }
        if (v1163[23] >= 0) {
          int64_t v836 = v1163[23];
        }
        else {
          int64_t v836 = *(void *)&v1163[8];
        }
        if (v1163[23] >= 0) {
          v837 = v1163;
        }
        else {
          v837 = *(char **)v1163;
        }
        if (v836 < 4) {
          goto LABEL_1984;
        }
        v838 = &v837[v836];
        int64_t v839 = v836;
        v840 = v837;
        while (1)
        {
          v841 = (char *)memchr(v840, 99, v839 - 3);
          if (!v841) {
            goto LABEL_1984;
          }
          if (*(_DWORD *)v841 == 1601532003) {
            break;
          }
          v840 = v841 + 1;
          int64_t v839 = v838 - v840;
          if (v838 - v840 < 4) {
            goto LABEL_1984;
          }
        }
        if (v841 == v838 || v841 != v837)
        {
LABEL_1984:
          std::string::basic_string[abi:ne180100]((uint64_t)&v1154, v836 + 3);
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v842 = &v1154;
          }
          else {
            v842 = (std::string *)v1154.__r_.__value_.__r.__words[0];
          }
          if (v836)
          {
            if (v1163[23] >= 0) {
              v843 = v1163;
            }
            else {
              v843 = *(unsigned char **)v1163;
            }
            memmove(v842, v843, v836);
          }
          *(_DWORD *)((char *)&v842->__r_.__value_.__l.__data_ + v836) = 7894111;
        }
        else
        {
          std::string::basic_string(&v1154, (const std::string *)v1163, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1182);
        }
        std::string::size_type v844 = __n[0] + 24 * v833;
        if (*(char *)(v844 + 23) < 0) {
          operator delete(*(void **)v844);
        }
        long long v845 = *(_OWORD *)&v1154.__r_.__value_.__l.__data_;
        *(void *)(v844 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v1154.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v844 = v845;
        uint64_t v846 = v1139;
        if (*(void *)(v1139 + 40) == *(void *)(v1139 + 32))
        {
LABEL_2025:
          uint64_t v861 = v979 + 24 * v833;
          v862 = (_OWORD *)v1189.__r_.__value_.__l.__size_;
          if (v1189.__r_.__value_.__l.__size_ >= v1189.__r_.__value_.__r.__words[2])
          {
            v864 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1189.__r_.__value_.__l.__data_, v861);
          }
          else
          {
            if (*(char *)(v861 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1189.__r_.__value_.__l.__size_, *(const std::string::value_type **)v861, *(void *)(v861 + 8));
            }
            else
            {
              long long v863 = *(_OWORD *)v861;
              *(void *)(v1189.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *(void *)(v861 + 16);
              _OWORD *v862 = v863;
            }
            v864 = (std::string *)((char *)v862 + 24);
          }
          v1189.__r_.__value_.__l.__size_ = (std::string::size_type)v864;
          uint64_t v865 = __n[0] + 24 * v833;
          v866 = (_OWORD *)v1187.__r_.__value_.__l.__size_;
          if (v1187.__r_.__value_.__l.__size_ >= v1187.__r_.__value_.__r.__words[2])
          {
            v868 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1187.__r_.__value_.__l.__data_, v865);
          }
          else
          {
            if (*(char *)(v865 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1187.__r_.__value_.__l.__size_, *(const std::string::value_type **)v865, *(void *)(v865 + 8));
            }
            else
            {
              long long v867 = *(_OWORD *)v865;
              *(void *)(v1187.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *(void *)(v865 + 16);
              _OWORD *v866 = v867;
            }
            v868 = (std::string *)((char *)v866 + 24);
          }
          v1187.__r_.__value_.__l.__size_ = (std::string::size_type)v868;
          if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v869 = HIBYTE(v1185.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v869 = v1185.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1154, v869 + 1);
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v870 = &v1154;
          }
          else {
            v870 = (std::string *)v1154.__r_.__value_.__r.__words[0];
          }
          if (v869)
          {
            if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v871 = &v1185;
            }
            else {
              v871 = (std::string *)v1185.__r_.__value_.__r.__words[0];
            }
            memmove(v870, v871, v869);
          }
          *(_WORD *)((char *)&v870->__r_.__value_.__l.__data_ + v869) = 95;
          uint64_t v872 = v979 + 24 * v833;
          int v873 = *(char *)(v872 + 23);
          if (v873 >= 0) {
            v874 = (const std::string::value_type *)(v979 + 24 * v833);
          }
          else {
            v874 = *(const std::string::value_type **)v872;
          }
          if (v873 >= 0) {
            std::string::size_type v875 = *(unsigned __int8 *)(v872 + 23);
          }
          else {
            std::string::size_type v875 = *(void *)(v872 + 8);
          }
          v876 = std::string::append(&v1154, v874, v875);
          std::string::size_type v877 = v876->__r_.__value_.__r.__words[0];
          v1182.__r_.__value_.__r.__words[0] = v876->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v1182.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v876->__r_.__value_.__r.__words[1] + 7);
          char v878 = HIBYTE(v876->__r_.__value_.__r.__words[2]);
          v876->__r_.__value_.__l.__size_ = 0;
          v876->__r_.__value_.__r.__words[2] = 0;
          v876->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          v1185.__r_.__value_.__r.__words[0] = v877;
          v1185.__r_.__value_.__l.__size_ = v1182.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v1185.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1182.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v1185.__r_.__value_.__s + 23) = v878;
          if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1154.__r_.__value_.__l.__data_);
          }
          goto LABEL_2058;
        }
        unint64_t v847 = 0;
        char v848 = 0;
LABEL_1997:
        v1154.__r_.__value_.__r.__words[0] = v847;
        v849 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v846 + 96, v847, &v1154);
        v850 = (long long *)v849[3];
        v851 = (long long *)v849[4];
        while (1)
        {
          if (v850 == v851)
          {
            ++v847;
            uint64_t v846 = v1139;
            if (v847 >= (uint64_t)(*(void *)(v1139 + 40) - *(void *)(v1139 + 32)) >> 4)
            {
              if ((v848 & 1) == 0) {
                goto LABEL_2025;
              }
LABEL_2058:
              if ((v1163[23] & 0x80000000) != 0) {
                operator delete(*(void **)v1163);
              }
              v879 = (void *)*((void *)v832 + 1);
              if (v879)
              {
                do
                {
                  v880 = v879;
                  v879 = (void *)*v879;
                }
                while (v879);
              }
              else
              {
                do
                {
                  v880 = (unsigned char *)*((void *)v832 + 2);
                  _ZF = *(void *)v880 == (void)v832;
                  v832 = v880;
                }
                while (!_ZF);
              }
              v832 = v880;
              if (v880 == &v1168[24])
              {
LABEL_2066:
                if (v1187.__r_.__value_.__l.__size_ == v1187.__r_.__value_.__r.__words[0]) {
                  goto LABEL_2106;
                }
                memset(v1163, 0, 32);
                std::string::basic_string[abi:ne180100]<0>(&v1154, "context_transfer");
                if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v881 = HIBYTE(v1185.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v881 = v1185.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v1182, v881 + 3);
                if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v882 = &v1182;
                }
                else {
                  v882 = (std::string *)v1182.__r_.__value_.__r.__words[0];
                }
                if (v881)
                {
                  if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v883 = &v1185;
                  }
                  else {
                    v883 = (std::string *)v1185.__r_.__value_.__r.__words[0];
                  }
                  memmove(v882, v883, v881);
                }
                *(_DWORD *)((char *)&v882->__r_.__value_.__l.__data_ + v881) = 7894111;
                memset(&v1180, 0, sizeof(v1180));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1180, (uint64_t)v1189.__r_.__value_.__l.__data_, v1189.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1189.__r_.__value_.__l.__size_ - v1189.__r_.__value_.__r.__words[0]) >> 3));
                long long v1176 = 0uLL;
                uint64_t v1177 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1176, (uint64_t)v1187.__r_.__value_.__l.__data_, v1187.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1187.__r_.__value_.__l.__size_ - v1187.__r_.__value_.__r.__words[0]) >> 3));
                Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1159, (uint64_t *)&v1133, (uint64_t)&v1154, (uint64_t)&v1182, (uint64_t)v1163, (uint64_t)v1180.__r_.__value_.__l.__data_, v1180.__r_.__value_.__l.__size_, (uint64_t *)&v1176);
                v1157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1176;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1157);
                v1157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1180;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1157);
                if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1182.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1154.__r_.__value_.__l.__data_);
                }
                if (!v1159.__r_.__value_.__r.__words[0])
                {
                  v884 = 0;
LABEL_2087:
                  v885 = 0;
                  goto LABEL_2088;
                }
                if (!v884) {
                  goto LABEL_2087;
                }
                v885 = (std::__shared_weak_count *)v1159.__r_.__value_.__l.__size_;
                if (v1159.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v1159.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
LABEL_2088:
                LODWORD(v1182.__r_.__value_.__l.__data_) = 0;
                Espresso::create_context((int *)&v1182, &v1154);
                long long v886 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v887 = (std::__shared_weak_count *)*((void *)v884 + 40);
                *(_OWORD *)(v884 + 312) = v886;
                if (v887) {
                  nitro::nitro_function::nitro_function(v887);
                }
                if (*((void *)&v831 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v831 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v888 = (std::__shared_weak_count *)*((void *)v884 + 42);
                *(_OWORD *)(v884 + 328) = v831;
                if (v888) {
                  nitro::nitro_function::nitro_function(v888);
                }
                long long v889 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v890 = (std::__shared_weak_count *)*((void *)v884 + 2);
                *(_OWORD *)(v884 + 8) = v889;
                if (v890) {
                  nitro::nitro_function::nitro_function(v890);
                }
                int v891 = (***(uint64_t (****)(void))(*((void *)v884 + 39) + 8))(*(void *)(*((void *)v884 + 39) + 8));
                *(_DWORD *)(*(void *)(*(void *)(v1139 + 40) - 16) + 8) = v891;
                if (v1154.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1154.__r_.__value_.__l.__size_);
                }
                if (v885) {
                  nitro::nitro_function::nitro_function(v885);
                }
                if (v1159.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1159.__r_.__value_.__l.__size_);
                }
LABEL_2106:
                if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1185.__r_.__value_.__l.__data_);
                }
                *(void *)v1163 = &v1187;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                *(void *)v1163 = &v1189;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                if (*((void *)&v831 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v831 + 1));
                }
                std::__tree<int>::destroy(*(void **)&v1168[24]);
                if (*(void *)&v1168[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1168[8]);
                }
                v892 = (std::string *)v830->__words[1];
                if (v892)
                {
                  do
                  {
                    v893 = v892;
                    v892 = (std::string *)v892->__r_.__value_.__r.__words[0];
                  }
                  while (v892);
                }
                else
                {
                  do
                  {
                    v893 = (std::string *)v830->__words[2];
                    _ZF = v893->__r_.__value_.__r.__words[0] == (void)v830;
                    v830 = (std::string::__raw *)v893;
                  }
                  while (!_ZF);
                }
                v830 = (std::string::__raw *)v893;
                if (v893 == (std::string *)&v1184[0].__r_.__value_.__r.__words[1])
                {
LABEL_2118:
                  char v1149 = 1;
                  memset(v1168, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1168, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
                  memset(v1163, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1163, (uint64_t)v976, (uint64_t)v977, 0xAAAAAAAAAAAAAAABLL * (((char *)v977 - (char *)v976) >> 3));
                  Espresso::sequential_builder::add<Espresso::softmax_params>(&v982, (uint64_t *)&v1133, (uint64_t)&v1150, (uint64_t)&v1112, (uint64_t)lpsrcd, *(uint64_t *)v1168, *(uint64_t *)&v1168[8], (uint64_t *)v1163);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1163;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1168;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((void *)v1184[0].__r_.__value_.__l.__size_);
                  if (v983) {
                    nitro::nitro_function::nitro_function(v983);
                  }
                  *(void *)v1168 = &v976;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1168);
                  if (SHIBYTE(v1161.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1161.__r_.__value_.__l.__data_);
                  }
                  *(void *)v1168 = &v979;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1168);
                  goto LABEL_2123;
                }
                goto LABEL_1963;
              }
              goto LABEL_1966;
            }
            goto LABEL_1997;
          }
          if (*((char *)v850 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v1154, *(const std::string::value_type **)v850, *((void *)v850 + 1));
          }
          else
          {
            long long v852 = *v850;
            v1154.__r_.__value_.__r.__words[2] = *((void *)v850 + 2);
            *(_OWORD *)&v1154.__r_.__value_.__l.__data_ = v852;
          }
          std::string::size_type v853 = __n[0] + 24 * v833;
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v854 = HIBYTE(v1154.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v854 = v1154.__r_.__value_.__l.__size_;
          }
          uint64_t v855 = *(unsigned __int8 *)(v853 + 23);
          int v856 = (char)v855;
          if ((v855 & 0x80u) != 0) {
            uint64_t v855 = *(void *)(v853 + 8);
          }
          if (v854 != v855) {
            goto LABEL_2017;
          }
          v857 = v856 >= 0 ? (unsigned __int8 *)(__n[0] + 24 * v833) : *(unsigned __int8 **)v853;
          if ((*((unsigned char *)&v1154.__r_.__value_.__s + 23) & 0x80) != 0) {
            break;
          }
          if (*((unsigned char *)&v1154.__r_.__value_.__s + 23))
          {
            v858 = &v1154;
            uint64_t v859 = HIBYTE(v1154.__r_.__value_.__r.__words[2]);
            do
            {
              if (v858->__r_.__value_.__s.__data_[0] != *v857) {
                goto LABEL_2017;
              }
              v858 = (std::string *)((char *)v858 + 1);
              ++v857;
              --v859;
            }
            while (v859);
            char v848 = 1;
LABEL_2017:
            if ((*((unsigned char *)&v1154.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_2022;
            }
            v860 = (void *)v1154.__r_.__value_.__r.__words[0];
LABEL_2020:
            operator delete(v860);
            goto LABEL_2022;
          }
          char v848 = 1;
LABEL_2022:
          v850 = (long long *)((char *)v850 + 24);
        }
        v860 = (void *)v1154.__r_.__value_.__r.__words[0];
        v848 |= memcmp(v1154.__r_.__value_.__l.__data_, v857, v1154.__r_.__value_.__l.__size_) == 0;
        goto LABEL_2020;
      }
      if (v685)
      {
        v686 = v685;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(&v1151, 0, sizeof(v1151));
        uint64_t v687 = *(void *)v934 + 56;
        *(void *)v1168 = v1115;
        v688 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v687, v1115, v1168);
        v689 = (long long *)v688[3];
        v690 = (long long *)v688[4];
        while (v689 != v690)
        {
          if (*((char *)v689 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v1163, *(const std::string::value_type **)v689, *((void *)v689 + 1));
          }
          else
          {
            long long v691 = *v689;
            *(void *)&v1163[16] = *((void *)v689 + 2);
            *(_OWORD *)v1163 = v691;
          }
          if (v1163[23] >= 0) {
            size_t v692 = v1163[23];
          }
          else {
            size_t v692 = *(void *)&v1163[8];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v1184, v692 + 5);
          if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v693 = v1184;
          }
          else {
            v693 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
          }
          if (v692)
          {
            if (v1163[23] >= 0) {
              v694 = v1163;
            }
            else {
              v694 = *(unsigned char **)v1163;
            }
            memmove(v693, v694, v692);
          }
          strcpy((char *)v693 + v692, "_diff");
          std::vector<std::string>::pointer v695 = v1151.__end_;
          if (v1151.__end_ >= v1151.__end_cap_.__value_)
          {
            unint64_t v697 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1151.__end_ - (char *)v1151.__begin_) >> 3);
            unint64_t v698 = v697 + 1;
            if (v697 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v1151.__end_cap_.__value_ - (char *)v1151.__begin_) >> 3) > v698) {
              unint64_t v698 = 0x5555555555555556 * (((char *)v1151.__end_cap_.__value_ - (char *)v1151.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v1151.__end_cap_.__value_ - (char *)v1151.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v699 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v699 = v698;
            }
            *(void *)&v1168[32] = &v1151.__end_cap_;
            if (v699) {
              unint64_t v699 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v699);
            }
            else {
              uint64_t v700 = 0;
            }
            unint64_t v701 = v699 + 24 * v697;
            *(void *)v1168 = v699;
            *(void *)&v1168[8] = v701;
            *(void *)&v1168[24] = v699 + 24 * v700;
            long long v702 = *(_OWORD *)&v1184[0].__r_.__value_.__l.__data_;
            *(void *)(v701 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v1184[0].__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v701 = v702;
            memset(v1184, 0, 24);
            *(void *)&v1168[16] = v701 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v1151, (std::__split_buffer<std::string> *)v1168);
            v703 = v1151.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v1168);
            v1151.__end_ = v703;
            if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1184[0].__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v696 = *(_OWORD *)&v1184[0].__r_.__value_.__l.__data_;
            v1151.__end_->__r_.__value_.__r.__words[2] = v1184[0].__r_.__value_.__r.__words[2];
            *(_OWORD *)&v695->__r_.__value_.__l.__data_ = v696;
            v1151.__end_ = v695 + 1;
          }
          if ((v1163[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1163);
          }
          v689 = (long long *)((char *)v689 + 24);
        }
        std::string::basic_string[abi:ne180100]<0>(&v1150, "elementwise_grad");
        lpsrcc = (void *)(*(uint64_t (**)(void *))(*(void *)v686 + 320))(v686);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v1161, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v1161 = __s;
        }
        v972 = 0;
        v971 = 0;
        v973 = 0;
        *(void *)v1168 = &v971;
        v1168[8] = 0;
        v971 = (std::string *)operator new(0x18uLL);
        v972 = v971;
        v973 = v971 + 1;
        v972 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v973, (long long *)&v1161, (long long *)&v1162, v971);
        uint64_t v970 = 0;
        uint64_t v968 = 0;
        uint64_t v969 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v968, (uint64_t)v1151.__begin_, (uint64_t)v1151.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v1151.__end_ - (char *)v1151.__begin_) >> 3));
        *(_OWORD *)&v1184[0].__r_.__value_.__r.__words[1] = 0uLL;
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1184[0].__r_.__value_.__l.__size_;
        LODWORD(v1152) = 0;
        v711 = v971;
        v943 = v972;
        if (v971 == v972)
        {
          v734 = v971;
          goto LABEL_1747;
        }
        int v712 = 0;
        do
        {
          if (SHIBYTE(v711->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v1168, v711->__r_.__value_.__l.__data_, v711->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v713 = *(_OWORD *)&v711->__r_.__value_.__l.__data_;
            *(void *)&v1168[16] = *((void *)&v711->__r_.__value_.__l + 2);
            *(_OWORD *)v1168 = v713;
          }
          uint64_t v714 = v1139;
          uint64_t v715 = *(void *)(v1139 + 32);
          if (*(void *)(v1139 + 40) != v715)
          {
            unint64_t v716 = 0;
            while (1)
            {
              uint64_t v717 = *(void *)(*(void *)(v715 + 16 * v716) + 64);
              std::string::size_type v719 = *(void *)(v717 + 8);
              std::string::size_type v718 = *(void *)(v717 + 16);
              __n[0] = v719;
              __n[1] = v718;
              if (v718)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v718 + 8), 1uLL, memory_order_relaxed);
                uint64_t v714 = v1139;
              }
              *(void *)v1163 = v716;
              v720 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v714 + 96, v716, v1163);
              v721 = (long long *)v720[3];
              v722 = (long long *)v720[4];
              if (v721 != v722) {
                break;
              }
LABEL_1738:
              if (__n[1]) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)__n[1]);
              }
              ++v716;
              uint64_t v714 = v1139;
              uint64_t v715 = *(void *)(v1139 + 32);
              if (v716 >= (*(void *)(v1139 + 40) - v715) >> 4)
              {
                int v712 = (int)v1152;
                goto LABEL_1742;
              }
            }
            unint64_t v723 = __n[0];
            int v724 = (int)v1152;
            while (1)
            {
              if (*((char *)v721 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1163, *(const std::string::value_type **)v721, *((void *)v721 + 1));
              }
              else
              {
                long long v725 = *v721;
                *(void *)&v1163[16] = *((void *)v721 + 2);
                *(_OWORD *)v1163 = v725;
              }
              uint64_t v726 = v1163[23];
              char v727 = v1163[23];
              if (v1163[23] >= 0) {
                uint64_t v728 = v1163[23];
              }
              else {
                uint64_t v728 = *(void *)&v1163[8];
              }
              uint64_t v729 = v1168[23];
              if (v1168[23] < 0) {
                uint64_t v729 = *(void *)&v1168[8];
              }
              if (v728 == v729)
              {
                if (v1168[23] >= 0) {
                  v730 = v1168;
                }
                else {
                  v730 = *(unsigned __int8 **)v1168;
                }
                if ((v1163[23] & 0x80000000) != 0)
                {
                  v732 = *(void **)v1163;
                  if (memcmp(*(const void **)v1163, v730, *(size_t *)&v1163[8])) {
                    goto LABEL_1736;
                  }
LABEL_1732:
                  if (v723 != (void)v1143)
                  {
                    v733 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)v1184, v723, (uint64_t *)__n);
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v733 + 6, v724, (unsigned int *)&v1152)+ 8) = 1;
                    char v727 = v1163[23];
                  }
                  goto LABEL_1734;
                }
                if (!v1163[23]) {
                  goto LABEL_1732;
                }
                v731 = v1163;
                while (*v731 == *v730)
                {
                  ++v731;
                  ++v730;
                  if (!--v726) {
                    goto LABEL_1732;
                  }
                }
              }
LABEL_1734:
              if (v727 < 0)
              {
                v732 = *(void **)v1163;
LABEL_1736:
                operator delete(v732);
              }
              v721 = (long long *)((char *)v721 + 24);
              if (v721 == v722) {
                goto LABEL_1738;
              }
            }
          }
LABEL_1742:
          LODWORD(v1152) = ++v712;
          if ((v1168[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1168);
          }
          ++v711;
        }
        while (v711 != v943);
        v734 = v971;
        v711 = v972;
LABEL_1747:
        __n[1] = 0;
        __n[0] = 0;
        *(void *)&long long v1179 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v734, (uint64_t)v711, 0xAAAAAAAAAAAAAAABLL * (((char *)v711 - (char *)v734) >> 3));
        v735 = (std::string::__raw *)v1184[0].__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v1184[0].__r_.__value_.__l.__data_ == &v1184[0].__r_.__value_.__r.__words[1]) {
          goto LABEL_1903;
        }
LABEL_1748:
        std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1168, &v735[1].__words[1]);
        long long v736 = *(_OWORD *)v1168;
        if (*(void *)&v1168[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v1168[8] + 8), 1uLL, memory_order_relaxed);
        }
        memset(&v1189, 0, sizeof(v1189));
        memset(&v1187, 0, sizeof(v1187));
        std::string::basic_string[abi:ne180100]<0>(&v1185, "");
        v737 = *(unsigned char **)&v1168[16];
        if (*(unsigned char **)&v1168[16] == &v1168[24]) {
          goto LABEL_1851;
        }
LABEL_1751:
        int v738 = *((_DWORD *)v737 + 7);
        v739 = &v971[v738];
        if (SHIBYTE(v739->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v1163, v739->__r_.__value_.__l.__data_, v739->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v740 = *(_OWORD *)&v739->__r_.__value_.__l.__data_;
          *(void *)&v1163[16] = *((void *)&v739->__r_.__value_.__l + 2);
          *(_OWORD *)v1163 = v740;
        }
        if (v1163[23] >= 0) {
          int64_t v741 = v1163[23];
        }
        else {
          int64_t v741 = *(void *)&v1163[8];
        }
        if (v1163[23] >= 0) {
          v742 = v1163;
        }
        else {
          v742 = *(char **)v1163;
        }
        if (v741 < 4) {
          goto LABEL_1769;
        }
        v743 = &v742[v741];
        int64_t v744 = v741;
        v745 = v742;
        while (1)
        {
          v746 = (char *)memchr(v745, 99, v744 - 3);
          if (!v746) {
            goto LABEL_1769;
          }
          if (*(_DWORD *)v746 == 1601532003) {
            break;
          }
          v745 = v746 + 1;
          int64_t v744 = v743 - v745;
          if (v743 - v745 < 4) {
            goto LABEL_1769;
          }
        }
        if (v746 == v743 || v746 != v742)
        {
LABEL_1769:
          std::string::basic_string[abi:ne180100]((uint64_t)&v1154, v741 + 3);
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v747 = &v1154;
          }
          else {
            v747 = (std::string *)v1154.__r_.__value_.__r.__words[0];
          }
          if (v741)
          {
            if (v1163[23] >= 0) {
              v748 = v1163;
            }
            else {
              v748 = *(unsigned char **)v1163;
            }
            memmove(v747, v748, v741);
          }
          *(_DWORD *)((char *)&v747->__r_.__value_.__l.__data_ + v741) = 7894111;
        }
        else
        {
          std::string::basic_string(&v1154, (const std::string *)v1163, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1182);
        }
        std::string::size_type v749 = __n[0] + 24 * v738;
        if (*(char *)(v749 + 23) < 0) {
          operator delete(*(void **)v749);
        }
        long long v750 = *(_OWORD *)&v1154.__r_.__value_.__l.__data_;
        *(void *)(v749 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v1154.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v749 = v750;
        uint64_t v751 = v1139;
        if (*(void *)(v1139 + 40) == *(void *)(v1139 + 32))
        {
LABEL_1810:
          v766 = &v971[v738];
          v767 = (_OWORD *)v1189.__r_.__value_.__l.__size_;
          if (v1189.__r_.__value_.__l.__size_ >= v1189.__r_.__value_.__r.__words[2])
          {
            v769 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1189.__r_.__value_.__l.__data_, (uint64_t)v766);
          }
          else
          {
            if (SHIBYTE(v766->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1189.__r_.__value_.__l.__size_, v766->__r_.__value_.__l.__data_, v766->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v768 = *(_OWORD *)&v766->__r_.__value_.__l.__data_;
              *(void *)(v1189.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v766->__r_.__value_.__l + 2);
              _OWORD *v767 = v768;
            }
            v769 = (std::string *)((char *)v767 + 24);
          }
          v1189.__r_.__value_.__l.__size_ = (std::string::size_type)v769;
          uint64_t v770 = __n[0] + 24 * v738;
          v771 = (_OWORD *)v1187.__r_.__value_.__l.__size_;
          if (v1187.__r_.__value_.__l.__size_ >= v1187.__r_.__value_.__r.__words[2])
          {
            v773 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1187.__r_.__value_.__l.__data_, v770);
          }
          else
          {
            if (*(char *)(v770 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1187.__r_.__value_.__l.__size_, *(const std::string::value_type **)v770, *(void *)(v770 + 8));
            }
            else
            {
              long long v772 = *(_OWORD *)v770;
              *(void *)(v1187.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *(void *)(v770 + 16);
              _OWORD *v771 = v772;
            }
            v773 = (std::string *)((char *)v771 + 24);
          }
          v1187.__r_.__value_.__l.__size_ = (std::string::size_type)v773;
          if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v774 = HIBYTE(v1185.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v774 = v1185.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1154, v774 + 1);
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v775 = &v1154;
          }
          else {
            v775 = (std::string *)v1154.__r_.__value_.__r.__words[0];
          }
          if (v774)
          {
            if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v776 = &v1185;
            }
            else {
              v776 = (std::string *)v1185.__r_.__value_.__r.__words[0];
            }
            memmove(v775, v776, v774);
          }
          *(_WORD *)((char *)&v775->__r_.__value_.__l.__data_ + v774) = 95;
          v777 = &v971[v738];
          int v778 = SHIBYTE(v777->__r_.__value_.__r.__words[2]);
          if (v778 >= 0) {
            v779 = &v971[v738];
          }
          else {
            v779 = (std::string *)v777->__r_.__value_.__r.__words[0];
          }
          if (v778 >= 0) {
            std::string::size_type v780 = HIBYTE(v777->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v780 = v777->__r_.__value_.__l.__size_;
          }
          v781 = std::string::append(&v1154, (const std::string::value_type *)v779, v780);
          std::string::size_type v782 = v781->__r_.__value_.__r.__words[0];
          v1182.__r_.__value_.__r.__words[0] = v781->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v1182.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v781->__r_.__value_.__r.__words[1] + 7);
          char v783 = HIBYTE(v781->__r_.__value_.__r.__words[2]);
          v781->__r_.__value_.__l.__size_ = 0;
          v781->__r_.__value_.__r.__words[2] = 0;
          v781->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1185.__r_.__value_.__l.__data_);
          }
          v1185.__r_.__value_.__r.__words[0] = v782;
          v1185.__r_.__value_.__l.__size_ = v1182.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v1185.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1182.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v1185.__r_.__value_.__s + 23) = v783;
          if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1154.__r_.__value_.__l.__data_);
          }
          goto LABEL_1843;
        }
        unint64_t v752 = 0;
        char v753 = 0;
LABEL_1782:
        v1154.__r_.__value_.__r.__words[0] = v752;
        v754 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v751 + 96, v752, &v1154);
        v755 = (long long *)v754[3];
        v756 = (long long *)v754[4];
        while (1)
        {
          if (v755 == v756)
          {
            ++v752;
            uint64_t v751 = v1139;
            if (v752 >= (uint64_t)(*(void *)(v1139 + 40) - *(void *)(v1139 + 32)) >> 4)
            {
              if ((v753 & 1) == 0) {
                goto LABEL_1810;
              }
LABEL_1843:
              if ((v1163[23] & 0x80000000) != 0) {
                operator delete(*(void **)v1163);
              }
              v784 = (void *)*((void *)v737 + 1);
              if (v784)
              {
                do
                {
                  v785 = v784;
                  v784 = (void *)*v784;
                }
                while (v784);
              }
              else
              {
                do
                {
                  v785 = (unsigned char *)*((void *)v737 + 2);
                  _ZF = *(void *)v785 == (void)v737;
                  v737 = v785;
                }
                while (!_ZF);
              }
              v737 = v785;
              if (v785 == &v1168[24])
              {
LABEL_1851:
                if (v1187.__r_.__value_.__l.__size_ == v1187.__r_.__value_.__r.__words[0]) {
                  goto LABEL_1891;
                }
                memset(v1163, 0, 32);
                std::string::basic_string[abi:ne180100]<0>(&v1154, "context_transfer");
                if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v786 = HIBYTE(v1185.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v786 = v1185.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v1182, v786 + 3);
                if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v787 = &v1182;
                }
                else {
                  v787 = (std::string *)v1182.__r_.__value_.__r.__words[0];
                }
                if (v786)
                {
                  if ((v1185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v788 = &v1185;
                  }
                  else {
                    v788 = (std::string *)v1185.__r_.__value_.__r.__words[0];
                  }
                  memmove(v787, v788, v786);
                }
                *(_DWORD *)((char *)&v787->__r_.__value_.__l.__data_ + v786) = 7894111;
                memset(&v1180, 0, sizeof(v1180));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1180, (uint64_t)v1189.__r_.__value_.__l.__data_, v1189.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1189.__r_.__value_.__l.__size_ - v1189.__r_.__value_.__r.__words[0]) >> 3));
                long long v1176 = 0uLL;
                uint64_t v1177 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1176, (uint64_t)v1187.__r_.__value_.__l.__data_, v1187.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1187.__r_.__value_.__l.__size_ - v1187.__r_.__value_.__r.__words[0]) >> 3));
                Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1159, (uint64_t *)&v1133, (uint64_t)&v1154, (uint64_t)&v1182, (uint64_t)v1163, (uint64_t)v1180.__r_.__value_.__l.__data_, v1180.__r_.__value_.__l.__size_, (uint64_t *)&v1176);
                v1157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1176;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1157);
                v1157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1180;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1157);
                if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1182.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v1154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1154.__r_.__value_.__l.__data_);
                }
                if (!v1159.__r_.__value_.__r.__words[0])
                {
                  v789 = 0;
LABEL_1872:
                  v790 = 0;
                  goto LABEL_1873;
                }
                if (!v789) {
                  goto LABEL_1872;
                }
                v790 = (std::__shared_weak_count *)v1159.__r_.__value_.__l.__size_;
                if (v1159.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v1159.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
LABEL_1873:
                LODWORD(v1182.__r_.__value_.__l.__data_) = 0;
                Espresso::create_context((int *)&v1182, &v1154);
                long long v791 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v792 = (std::__shared_weak_count *)*((void *)v789 + 40);
                *(_OWORD *)(v789 + 312) = v791;
                if (v792) {
                  nitro::nitro_function::nitro_function(v792);
                }
                if (*((void *)&v736 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v736 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v793 = (std::__shared_weak_count *)*((void *)v789 + 42);
                *(_OWORD *)(v789 + 328) = v736;
                if (v793) {
                  nitro::nitro_function::nitro_function(v793);
                }
                long long v794 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v795 = (std::__shared_weak_count *)*((void *)v789 + 2);
                *(_OWORD *)(v789 + 8) = v794;
                if (v795) {
                  nitro::nitro_function::nitro_function(v795);
                }
                int v796 = (***(uint64_t (****)(void))(*((void *)v789 + 39) + 8))(*(void *)(*((void *)v789 + 39) + 8));
                *(_DWORD *)(*(void *)(*(void *)(v1139 + 40) - 16) + 8) = v796;
                if (v1154.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1154.__r_.__value_.__l.__size_);
                }
                if (v790) {
                  nitro::nitro_function::nitro_function(v790);
                }
                if (v1159.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1159.__r_.__value_.__l.__size_);
                }
LABEL_1891:
                if (SHIBYTE(v1185.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1185.__r_.__value_.__l.__data_);
                }
                *(void *)v1163 = &v1187;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                *(void *)v1163 = &v1189;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1163);
                if (*((void *)&v736 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v736 + 1));
                }
                std::__tree<int>::destroy(*(void **)&v1168[24]);
                if (*(void *)&v1168[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1168[8]);
                }
                v797 = (std::string *)v735->__words[1];
                if (v797)
                {
                  do
                  {
                    v798 = v797;
                    v797 = (std::string *)v797->__r_.__value_.__r.__words[0];
                  }
                  while (v797);
                }
                else
                {
                  do
                  {
                    v798 = (std::string *)v735->__words[2];
                    _ZF = v798->__r_.__value_.__r.__words[0] == (void)v735;
                    v735 = (std::string::__raw *)v798;
                  }
                  while (!_ZF);
                }
                v735 = (std::string::__raw *)v798;
                if (v798 == (std::string *)&v1184[0].__r_.__value_.__r.__words[1])
                {
LABEL_1903:
                  char v1149 = 1;
                  memset(v1168, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1168, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
                  memset(v1163, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1163, v968, v969, 0xAAAAAAAAAAAAAAABLL * ((v969 - v968) >> 3));
                  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v974, (uint64_t *)&v1133, (uint64_t)&v1150, (uint64_t)&v1112, (uint64_t)lpsrcc, *(uint64_t *)v1168, *(uint64_t *)&v1168[8], (uint64_t *)v1163);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1163;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)v1168;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
                  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((void *)v1184[0].__r_.__value_.__l.__size_);
                  if (v975) {
                    nitro::nitro_function::nitro_function(v975);
                  }
                  *(void *)v1168 = &v968;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1168);
                  v684 = &v971;
LABEL_1643:
                  *(void *)v1168 = v684;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1168);
                  if (SHIBYTE(v1161.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1161.__r_.__value_.__l.__data_);
                  }
LABEL_2123:
                  if (SHIBYTE(v1150.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1150.__r_.__value_.__l.__data_);
                  }
                  *(void *)v1168 = &v1151;
                  v894 = (void ***)v1168;
LABEL_2126:
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v894);
                  goto LABEL_1436;
                }
                goto LABEL_1748;
              }
              goto LABEL_1751;
            }
            goto LABEL_1782;
          }
          if (*((char *)v755 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v1154, *(const std::string::value_type **)v755, *((void *)v755 + 1));
          }
          else
          {
            long long v757 = *v755;
            v1154.__r_.__value_.__r.__words[2] = *((void *)v755 + 2);
            *(_OWORD *)&v1154.__r_.__value_.__l.__data_ = v757;
          }
          std::string::size_type v758 = __n[0] + 24 * v738;
          if ((v1154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v759 = HIBYTE(v1154.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v759 = v1154.__r_.__value_.__l.__size_;
          }
          uint64_t v760 = *(unsigned __int8 *)(v758 + 23);
          int v761 = (char)v760;
          if ((v760 & 0x80u) != 0) {
            uint64_t v760 = *(void *)(v758 + 8);
          }
          if (v759 != v760) {
            goto LABEL_1802;
          }
          v762 = v761 >= 0 ? (unsigned __int8 *)(__n[0] + 24 * v738) : *(unsigned __int8 **)v758;
          if ((*((unsigned char *)&v1154.__r_.__value_.__s + 23) & 0x80) != 0) {
            break;
          }
          if (*((unsigned char *)&v1154.__r_.__value_.__s + 23))
          {
            v763 = &v1154;
            uint64_t v764 = HIBYTE(v1154.__r_.__value_.__r.__words[2]);
            do
            {
              if (v763->__r_.__value_.__s.__data_[0] != *v762) {
                goto LABEL_1802;
              }
              v763 = (std::string *)((char *)v763 + 1);
              ++v762;
              --v764;
            }
            while (v764);
            char v753 = 1;
LABEL_1802:
            if ((*((unsigned char *)&v1154.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_1807;
            }
            v765 = (void *)v1154.__r_.__value_.__r.__words[0];
LABEL_1805:
            operator delete(v765);
            goto LABEL_1807;
          }
          char v753 = 1;
LABEL_1807:
          v755 = (long long *)((char *)v755 + 24);
        }
        v765 = (void *)v1154.__r_.__value_.__r.__words[0];
        v753 |= memcmp(v1154.__r_.__value_.__l.__data_, v762, v1154.__r_.__value_.__l.__size_) == 0;
        goto LABEL_1805;
      }
      if (v705)
      {
        v706 = v705;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((v1114 & 0x80u) == 0) {
          size_t v707 = v1114;
        }
        else {
          size_t v707 = v1113;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v1163, v707 + 6);
        if (v1163[23] >= 0) {
          v708 = v1163;
        }
        else {
          v708 = *(unsigned char **)v1163;
        }
        if (v707)
        {
          if ((v1114 & 0x80u) == 0) {
            v709 = &v1112;
          }
          else {
            v709 = v1112;
          }
          memmove(v708, v709, v707);
        }
        strcpy(&v708[v707], "_dbias");
        memset(v1168, 0, 24);
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1168;
        v1184[0].__r_.__value_.__s.__data_[8] = 0;
        *(void *)v1168 = operator new(0x18uLL);
        *(void *)&v1168[8] = *(void *)v1168;
        *(void *)&v1168[16] = *(void *)v1168 + 24;
        *(void *)&v1168[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1168[16], (long long *)v1163, (long long *)&v1163[24], *(std::string **)v1168);
        if ((v1163[23] & 0x80000000) != 0) {
          operator delete(*(void **)v1163);
        }
        std::string::basic_string[abi:ne180100]<0>(v1163, "bias_grad");
        uint64_t v710 = (*(uint64_t (**)(void *))(*(void *)v706 + 384))(v706);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(v1184, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          v1184[0] = __s;
        }
        v966 = 0;
        v965 = 0;
        v967 = 0;
        __n[0] = (std::string::size_type)&v965;
        LOBYTE(__n[1]) = 0;
        v965 = (std::string *)operator new(0x18uLL);
        v966 = v965;
        v967 = v965 + 1;
        v966 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v967, (long long *)v1184, (long long *)&v1184[1], v965);
        if ((v1114 & 0x80u) == 0) {
          size_t v898 = v1114;
        }
        else {
          size_t v898 = v1113;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__n, v898 + 6);
        if ((SBYTE7(v1179) & 0x80u) == 0) {
          v899 = __n;
        }
        else {
          v899 = (std::string::size_type *)__n[0];
        }
        if (v898)
        {
          if ((v1114 & 0x80u) == 0) {
            v900 = &v1112;
          }
          else {
            v900 = v1112;
          }
          memmove(v899, v900, v898);
        }
        strcpy((char *)v899 + v898, "_dbias");
        v963 = 0;
        v962 = 0;
        v964 = 0;
        v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v962;
        v1189.__r_.__value_.__s.__data_[8] = 0;
        v962 = (std::string *)operator new(0x18uLL);
        v963 = v962;
        v964 = v962 + 1;
        v963 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v964, (long long *)__n, (long long *)((char *)&v1179 + 8), v962);
        add_with_context_transfers_t<Espresso::generic_bias_grad_kernel,Espresso::bias_params>(&v1187, (uint64_t)&v1133, (uint64_t)v1163, (uint64_t)&v1112, v710, (uint64_t)v965, (uint64_t)v966, (uint64_t *)&v962);
        v1189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v962;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1189);
        if (SBYTE7(v1179) < 0) {
          operator delete((void *)__n[0]);
        }
        __n[0] = (std::string::size_type)&v965;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
        if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1184[0].__r_.__value_.__l.__data_);
        }
        if ((v1163[23] & 0x80000000) != 0) {
          operator delete(*(void **)v1163);
        }
        (*(void (**)(unsigned char *__return_ptr, void *, void))(*(void *)v706 + 320))(v1163, v706, 0);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>((uint64_t *)(v1187.__r_.__value_.__r.__words[0] + 280), (uint64_t *)v1163, (uint64_t *)&v1163[16], 1uLL);
        if (*(void *)&v1163[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1163[8]);
        }
        if (v1187.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1187.__r_.__value_.__l.__size_);
        }
        *(void *)v1163 = v1168;
        v894 = (void ***)v1163;
        goto LABEL_2126;
      }
      if (v895)
      {
        v896 = v895;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v1168, "batchnorm_grad");
        uint64_t v897 = (*(uint64_t (**)(void *))(*(void *)v896 + 384))(v896);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)v1163 = __s;
        }
        v960 = 0;
        v959 = 0;
        v961 = 0;
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v959;
        v1184[0].__r_.__value_.__s.__data_[8] = 0;
        v959 = (std::string *)operator new(0x18uLL);
        v960 = v959;
        v961 = v959 + 1;
        v960 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v961, (long long *)v1163, (long long *)&v1163[24], v959);
        if ((v1114 & 0x80u) == 0) {
          size_t v904 = v1114;
        }
        else {
          size_t v904 = v1113;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v1184, v904 + 4);
        if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v905 = v1184;
        }
        else {
          v905 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
        }
        if (v904)
        {
          if ((v1114 & 0x80u) == 0) {
            v906 = &v1112;
          }
          else {
            v906 = v1112;
          }
          memmove(v905, v906, v904);
        }
        strcpy((char *)v905 + v904, "_dbn");
        v957 = 0;
        v956 = 0;
        v958 = 0;
        __n[0] = (std::string::size_type)&v956;
        LOBYTE(__n[1]) = 0;
        v956 = (std::string *)operator new(0x18uLL);
        v957 = v956;
        v958 = v956 + 1;
        v957 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v958, (long long *)v1184, (long long *)&v1184[1], v956);
        add_with_context_transfers_t<Espresso::generic_batchnorm_grad_kernel,Espresso::batchnorm_params>(&v1189, (uint64_t)&v1133, (uint64_t)v1168, (uint64_t)&v1112, v897, (uint64_t)v959, (uint64_t)v960, (uint64_t *)&v956);
        __n[0] = (std::string::size_type)&v956;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
        if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1184[0].__r_.__value_.__l.__data_);
        }
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v959;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
        if ((v1163[23] & 0x80000000) != 0) {
          operator delete(*(void **)v1163);
        }
        if ((v1168[23] & 0x80000000) != 0) {
          operator delete(*(void **)v1168);
        }
        (*(void (**)(unsigned char *__return_ptr, void *, void))(*(void *)v896 + 320))(v1168, v896, 0);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>((uint64_t *)(v1189.__r_.__value_.__r.__words[0] + 280), (uint64_t *)v1168, (uint64_t *)&v1168[16], 1uLL);
        if (*(void *)&v1168[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v1168[8]);
        }
        if (v1189.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1189.__r_.__value_.__l.__size_);
        }
        goto LABEL_1436;
      }
      if (v901)
      {
        v902 = v901;
        if (v931) {
          atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v1168, "l2_normalize_grad");
        uint64_t v903 = (*(uint64_t (**)(void *))(*(void *)v902 + 320))(v902);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v1163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)v1163 = __s;
        }
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v953, (long long *)v1163, 1uLL);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(v1184, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          v1184[0] = __str;
        }
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v952, (long long *)v1184, 1uLL);
        add_with_context_transfers_t<Espresso::l2_norm_params>(&v954, (uint64_t)&v1133, (uint64_t)v1168, (uint64_t)&v1112, v903, v953, v952);
        if (v955) {
          nitro::nitro_function::nitro_function(v955);
        }
        __n[0] = (std::string::size_type)v952;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
        if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1184[0].__r_.__value_.__l.__data_);
        }
        v445 = v953;
        goto LABEL_1087;
      }
      if (v907) {
        v908 = v931;
      }
      else {
        v908 = 0;
      }
      if (v907 && v931)
      {
        atomic_fetch_add_explicit(&v931->__shared_owners_, 1uLL, memory_order_relaxed);
        v908 = v931;
      }
      else
      {
        if (!v907) {
          goto LABEL_2217;
        }
        if (!v908) {
          goto LABEL_567;
        }
      }
      nitro::nitro_function::nitro_function(v908);
LABEL_567:
      uint64_t v266 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v267 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v267 = __str.__r_.__value_.__l.__size_;
      }
      std::string::size_type v268 = HIBYTE(v1107.__r_.__value_.__r.__words[2]);
      if ((v1107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v268 = v1107.__r_.__value_.__l.__size_;
      }
      if (v267 != v268) {
        goto LABEL_583;
      }
      if ((v1107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v269 = &v1107;
      }
      else {
        uint64_t v269 = (std::string *)v1107.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__str.__r_.__value_.__l.__data_, v269, __str.__r_.__value_.__l.__size_)) {
          goto LABEL_583;
        }
      }
      else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
      {
        uint64_t v270 = &__str;
        while (v270->__r_.__value_.__s.__data_[0] == v269->__r_.__value_.__s.__data_[0])
        {
          uint64_t v270 = (std::string *)((char *)v270 + 1);
          uint64_t v269 = (std::string *)((char *)v269 + 1);
          if (!--v266) {
            goto LABEL_822;
          }
        }
LABEL_583:
        memset(&v1168[8], 0, 44);
        *(void *)v1168 = _D9;
        std::string::basic_string[abi:ne180100]<0>(&v1161, "axpby");
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v271 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v271 = __str.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v1159, v271 + 6);
        if ((v1159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v272 = &v1159;
        }
        else {
          uint64_t v272 = (std::string *)v1159.__r_.__value_.__r.__words[0];
        }
        if (v271)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v273 = &__str;
          }
          else {
            v273 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          memmove(v272, v273, v271);
        }
        strcpy((char *)v272 + v271, "_split");
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v1163, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)v1163 = __str;
        }
        if (SHIBYTE(v1107.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v1163[24], v1107.__r_.__value_.__l.__data_, v1107.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v1163[24] = *(_OWORD *)&v1107.__r_.__value_.__l.__data_;
          *(void *)&long long v1164 = *((void *)&v1107.__r_.__value_.__l + 2);
        }
        v949 = 0;
        v948 = 0;
        v950 = 0;
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v948;
        v1184[0].__r_.__value_.__s.__data_[8] = 0;
        v948 = (std::string *)operator new(0x30uLL);
        v949 = v948;
        v950 = v948 + 2;
        v949 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v950, (long long *)v1163, (long long *)((char *)&v1164 + 8), v948);
        if (SHIBYTE(v1107.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v1157, v1107.__r_.__value_.__l.__data_, v1107.__r_.__value_.__l.__size_);
        }
        else {
          std::string v1157 = v1107;
        }
        v946 = 0;
        v945 = 0;
        v947 = 0;
        v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v945;
        v1184[0].__r_.__value_.__s.__data_[8] = 0;
        v945 = (std::string *)operator new(0x18uLL);
        v946 = v945;
        v947 = v945 + 1;
        v946 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v947, (long long *)&v1157, (long long *)&v1158, v945);
        *(_OWORD *)&v1185.__r_.__value_.__r.__words[1] = 0uLL;
        v1185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1185.__r_.__value_.__l.__size_;
        unsigned int v1155 = 0;
        int v274 = v948;
        v939 = v949;
        if (v948 == v949)
        {
          std::string::size_type v297 = v948;
          goto LABEL_648;
        }
        unsigned int v275 = 0;
        do
        {
          if (SHIBYTE(v274->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v1184, v274->__r_.__value_.__l.__data_, v274->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v276 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
            v1184[0].__r_.__value_.__r.__words[2] = v274->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1184[0].__r_.__value_.__l.__data_ = v276;
          }
          uint64_t v277 = v1139;
          uint64_t v278 = *(void *)(v1139 + 32);
          if (*(void *)(v1139 + 40) != v278)
          {
            unint64_t v279 = 0;
            while (1)
            {
              uint64_t v280 = *(void *)(*(void *)(v278 + 16 * v279) + 64);
              std::string::size_type v282 = *(void *)(v280 + 8);
              std::string::size_type v281 = *(void *)(v280 + 16);
              v1189.__r_.__value_.__r.__words[0] = v282;
              v1189.__r_.__value_.__l.__size_ = v281;
              if (v281)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v281 + 8), 1uLL, memory_order_relaxed);
                uint64_t v277 = v1139;
              }
              __n[0] = v279;
              uint64_t v283 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v277 + 96, v279, __n);
              unint64_t v284 = (long long *)v283[3];
              uint64_t v285 = (long long *)v283[4];
              if (v284 != v285) {
                break;
              }
LABEL_639:
              if (v1189.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1189.__r_.__value_.__l.__size_);
              }
              ++v279;
              uint64_t v277 = v1139;
              uint64_t v278 = *(void *)(v1139 + 32);
              if (v279 >= (*(void *)(v1139 + 40) - v278) >> 4)
              {
                unsigned int v275 = v1155;
                goto LABEL_643;
              }
            }
            unint64_t v286 = v1189.__r_.__value_.__r.__words[0];
            int v287 = v1155;
            while (1)
            {
              if (*((char *)v284 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__n, *(const std::string::value_type **)v284, *((void *)v284 + 1));
              }
              else
              {
                long long v288 = *v284;
                *(void *)&long long v1179 = *((void *)v284 + 2);
                *(_OWORD *)__uint64_t n = v288;
              }
              uint64_t v289 = BYTE7(v1179);
              char v290 = BYTE7(v1179);
              if ((SBYTE7(v1179) & 0x80u) == 0) {
                std::string::size_type v291 = BYTE7(v1179);
              }
              else {
                std::string::size_type v291 = __n[1];
              }
              std::string::size_type v292 = HIBYTE(v1184[0].__r_.__value_.__r.__words[2]);
              if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v292 = v1184[0].__r_.__value_.__l.__size_;
              }
              if (v291 == v292)
              {
                if ((v1184[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string v293 = v1184;
                }
                else {
                  std::string v293 = (std::string *)v1184[0].__r_.__value_.__r.__words[0];
                }
                if (SBYTE7(v1179) < 0)
                {
                  char v295 = (void *)__n[0];
                  if (memcmp((const void *)__n[0], v293, __n[1])) {
                    goto LABEL_637;
                  }
LABEL_633:
                  if (v286 != (void)v1143)
                  {
                    uint64_t v296 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)&v1185, v286, (uint64_t *)&v1189);
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v296 + 6, v287, &v1155)+ 8) = 1;
                    char v290 = BYTE7(v1179);
                  }
                  goto LABEL_635;
                }
                if (!BYTE7(v1179)) {
                  goto LABEL_633;
                }
                uint64_t v294 = __n;
                while (*(unsigned __int8 *)v294 == v293->__r_.__value_.__s.__data_[0])
                {
                  uint64_t v294 = (std::string::size_type *)((char *)v294 + 1);
                  std::string v293 = (std::string *)((char *)v293 + 1);
                  if (!--v289) {
                    goto LABEL_633;
                  }
                }
              }
LABEL_635:
              if (v290 < 0)
              {
                char v295 = (void *)__n[0];
LABEL_637:
                operator delete(v295);
              }
              unint64_t v284 = (long long *)((char *)v284 + 24);
              if (v284 == v285) {
                goto LABEL_639;
              }
            }
          }
LABEL_643:
          unsigned int v1155 = ++v275;
          if (SHIBYTE(v1184[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1184[0].__r_.__value_.__l.__data_);
          }
          ++v274;
        }
        while (v274 != v939);
        std::string::size_type v297 = v948;
        int v274 = v949;
LABEL_648:
        memset(&v1154, 0, sizeof(v1154));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1154, (uint64_t)v297, (uint64_t)v274, 0xAAAAAAAAAAAAAAABLL * (((char *)v274 - (char *)v297) >> 3));
        uint64_t v298 = (std::string::__raw *)v1185.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v1185.__r_.__value_.__l.__data_ == &v1185.__r_.__value_.__r.__words[1]) {
          goto LABEL_804;
        }
LABEL_649:
        std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1184, &v298[1].__words[1]);
        std::string::size_type v299 = v1184[0].__r_.__value_.__l.__size_;
        std::string::size_type v933 = v1184[0].__r_.__value_.__r.__words[0];
        if (v1184[0].__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v1184[0].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        v940 = (std::__shared_weak_count *)v299;
        memset(&v1189, 0, sizeof(v1189));
        memset(&v1187, 0, sizeof(v1187));
        std::string::basic_string[abi:ne180100]<0>(&v1182, "");
        char v300 = (std::string *)v1184[0].__r_.__value_.__r.__words[2];
        if ((std::string *)v1184[0].__r_.__value_.__r.__words[2] == &v1184[1]) {
          goto LABEL_752;
        }
LABEL_652:
        int v301 = HIDWORD(v300[1].__r_.__value_.__r.__words[0]);
        long long v302 = &v948[v301];
        if (SHIBYTE(v302->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__n, v302->__r_.__value_.__l.__data_, v302->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v303 = *(_OWORD *)&v302->__r_.__value_.__l.__data_;
          *(void *)&long long v1179 = *((void *)&v302->__r_.__value_.__l + 2);
          *(_OWORD *)__uint64_t n = v303;
        }
        if ((SBYTE7(v1179) & 0x80u) == 0) {
          int64_t v304 = BYTE7(v1179);
        }
        else {
          int64_t v304 = __n[1];
        }
        if ((SBYTE7(v1179) & 0x80u) == 0) {
          char v305 = __n;
        }
        else {
          char v305 = (std::string::size_type *)__n[0];
        }
        if (v304 < 4) {
          goto LABEL_670;
        }
        unint64_t v306 = (char *)v305 + v304;
        int64_t v307 = v304;
        unint64_t v308 = v305;
        while (1)
        {
          uint64_t v309 = (std::string::size_type *)memchr(v308, 99, v307 - 3);
          if (!v309) {
            goto LABEL_670;
          }
          if (*(_DWORD *)v309 == 1601532003) {
            break;
          }
          unint64_t v308 = (std::string::size_type *)((char *)v309 + 1);
          int64_t v307 = v306 - (char *)v308;
          if (v306 - (char *)v308 < 4) {
            goto LABEL_670;
          }
        }
        if (v309 == (std::string::size_type *)v306 || v309 != v305)
        {
LABEL_670:
          std::string::basic_string[abi:ne180100]((uint64_t)&v1180, v304 + 3);
          if ((v1180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v310 = &v1180;
          }
          else {
            std::string v310 = (std::string *)v1180.__r_.__value_.__r.__words[0];
          }
          if (v304)
          {
            if ((SBYTE7(v1179) & 0x80u) == 0) {
              uint64_t v311 = __n;
            }
            else {
              uint64_t v311 = (std::string::size_type *)__n[0];
            }
            memmove(v310, v311, v304);
          }
          *(_DWORD *)((char *)&v310->__r_.__value_.__l.__data_ + v304) = 7894111;
        }
        else
        {
          std::string::basic_string(&v1180, (const std::string *)__n, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1176);
        }
        std::string::size_type v312 = v1154.__r_.__value_.__r.__words[0] + 24 * v301;
        if (*(char *)(v312 + 23) < 0) {
          operator delete(*(void **)v312);
        }
        long long v313 = *(_OWORD *)&v1180.__r_.__value_.__l.__data_;
        *(void *)(v312 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v1180.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v312 = v313;
        uint64_t v314 = v1139;
        if (*(void *)(v1139 + 40) == *(void *)(v1139 + 32))
        {
LABEL_711:
          id v329 = &v948[v301];
          float v330 = (_OWORD *)v1189.__r_.__value_.__l.__size_;
          if (v1189.__r_.__value_.__l.__size_ >= v1189.__r_.__value_.__r.__words[2])
          {
            std::string v332 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1189.__r_.__value_.__l.__data_, (uint64_t)v329);
          }
          else
          {
            if (SHIBYTE(v329->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1189.__r_.__value_.__l.__size_, v329->__r_.__value_.__l.__data_, v329->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v331 = *(_OWORD *)&v329->__r_.__value_.__l.__data_;
              *(void *)(v1189.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v329->__r_.__value_.__l + 2);
              *float v330 = v331;
            }
            std::string v332 = (std::string *)((char *)v330 + 24);
          }
          v1189.__r_.__value_.__l.__size_ = (std::string::size_type)v332;
          uint64_t v333 = v1154.__r_.__value_.__r.__words[0] + 24 * v301;
          uint64_t v334 = (_OWORD *)v1187.__r_.__value_.__l.__size_;
          if (v1187.__r_.__value_.__l.__size_ >= v1187.__r_.__value_.__r.__words[2])
          {
            float v336 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1187.__r_.__value_.__l.__data_, v333);
          }
          else
          {
            if (*(char *)(v333 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1187.__r_.__value_.__l.__size_, *(const std::string::value_type **)v333, *(void *)(v333 + 8));
            }
            else
            {
              long long v335 = *(_OWORD *)v333;
              *(void *)(v1187.__r_.__value_.__l.__size_ + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *(void *)(v333 + 16);
              *uint64_t v334 = v335;
            }
            float v336 = (std::string *)((char *)v334 + 24);
          }
          v1187.__r_.__value_.__l.__size_ = (std::string::size_type)v336;
          if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v337 = HIBYTE(v1182.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v337 = v1182.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1180, v337 + 1);
          if ((v1180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v338 = &v1180;
          }
          else {
            int v338 = (std::string *)v1180.__r_.__value_.__r.__words[0];
          }
          if (v337)
          {
            if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v339 = &v1182;
            }
            else {
              v339 = (std::string *)v1182.__r_.__value_.__r.__words[0];
            }
            memmove(v338, v339, v337);
          }
          *(_WORD *)((char *)&v338->__r_.__value_.__l.__data_ + v337) = 95;
          float v340 = &v948[v301];
          int v341 = SHIBYTE(v340->__r_.__value_.__r.__words[2]);
          if (v341 >= 0) {
            v342 = &v948[v301];
          }
          else {
            v342 = (std::string *)v340->__r_.__value_.__r.__words[0];
          }
          if (v341 >= 0) {
            std::string::size_type v343 = HIBYTE(v340->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v343 = v340->__r_.__value_.__l.__size_;
          }
          v344 = std::string::append(&v1180, (const std::string::value_type *)v342, v343);
          std::string::size_type v345 = v344->__r_.__value_.__r.__words[0];
          *(void *)&long long v1176 = v344->__r_.__value_.__l.__size_;
          *(void *)((char *)&v1176 + 7) = *(std::string::size_type *)((char *)&v344->__r_.__value_.__r.__words[1] + 7);
          char v346 = HIBYTE(v344->__r_.__value_.__r.__words[2]);
          v344->__r_.__value_.__l.__size_ = 0;
          v344->__r_.__value_.__r.__words[2] = 0;
          v344->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1182.__r_.__value_.__l.__data_);
          }
          v1182.__r_.__value_.__r.__words[0] = v345;
          v1182.__r_.__value_.__l.__size_ = v1176;
          *(std::string::size_type *)((char *)&v1182.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v1176 + 7);
          *((unsigned char *)&v1182.__r_.__value_.__s + 23) = v346;
          if (SHIBYTE(v1180.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1180.__r_.__value_.__l.__data_);
          }
          goto LABEL_744;
        }
        unint64_t v315 = 0;
        char v316 = 0;
LABEL_683:
        v1180.__r_.__value_.__r.__words[0] = v315;
        std::vector<std::string> v317 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v314 + 96, v315, &v1180);
        char v319 = (long long *)v317[3];
        uint64_t v318 = (long long *)v317[4];
        while (1)
        {
          if (v319 == v318)
          {
            ++v315;
            uint64_t v314 = v1139;
            if (v315 >= (uint64_t)(*(void *)(v1139 + 40) - *(void *)(v1139 + 32)) >> 4)
            {
              if ((v316 & 1) == 0) {
                goto LABEL_711;
              }
LABEL_744:
              if (SBYTE7(v1179) < 0) {
                operator delete((void *)__n[0]);
              }
              uint64_t v347 = (std::string *)v300->__r_.__value_.__l.__size_;
              if (v347)
              {
                do
                {
                  v348 = v347;
                  uint64_t v347 = (std::string *)v347->__r_.__value_.__r.__words[0];
                }
                while (v347);
              }
              else
              {
                do
                {
                  v348 = (std::string *)v300->__r_.__value_.__r.__words[2];
                  _ZF = v348->__r_.__value_.__r.__words[0] == (void)v300;
                  char v300 = v348;
                }
                while (!_ZF);
              }
              char v300 = v348;
              if (v348 == &v1184[1])
              {
LABEL_752:
                if (v1187.__r_.__value_.__l.__size_ == v1187.__r_.__value_.__r.__words[0]) {
                  goto LABEL_792;
                }
                long long v1179 = 0u;
                *(_OWORD *)__uint64_t n = 0u;
                std::string::basic_string[abi:ne180100]<0>(&v1180, "context_transfer");
                if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v349 = HIBYTE(v1182.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v349 = v1182.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v1176, v349 + 3);
                if (v1177 >= 0) {
                  int v350 = &v1176;
                }
                else {
                  int v350 = (long long *)v1176;
                }
                if (v349)
                {
                  if ((v1182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    int v351 = &v1182;
                  }
                  else {
                    int v351 = (std::string *)v1182.__r_.__value_.__r.__words[0];
                  }
                  memmove(v350, v351, v349);
                }
                *(_DWORD *)((char *)v350 + v349) = 7894111;
                memset(&v1151, 0, sizeof(v1151));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1151, (uint64_t)v1189.__r_.__value_.__l.__data_, v1189.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1189.__r_.__value_.__l.__size_ - v1189.__r_.__value_.__r.__words[0]) >> 3));
                memset(&v1150, 0, sizeof(v1150));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1150, (uint64_t)v1187.__r_.__value_.__l.__data_, v1187.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1187.__r_.__value_.__l.__size_ - v1187.__r_.__value_.__r.__words[0]) >> 3));
                Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1152, (uint64_t *)&v1133, (uint64_t)&v1180, (uint64_t)&v1176, (uint64_t)__n, (uint64_t)v1151.__begin_, (uint64_t)v1151.__end_, (uint64_t *)&v1150);
                v1156 = (void **)&v1150;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1156);
                v1156 = (void **)&v1151;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1156);
                if (SHIBYTE(v1177) < 0) {
                  operator delete((void *)v1176);
                }
                if (SHIBYTE(v1180.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1180.__r_.__value_.__l.__data_);
                }
                if (!v1152)
                {
                  int v352 = 0;
LABEL_773:
                  int v353 = 0;
                  goto LABEL_774;
                }
                if (!v352) {
                  goto LABEL_773;
                }
                int v353 = v1153;
                if (v1153) {
                  atomic_fetch_add_explicit(&v1153->__shared_owners_, 1uLL, memory_order_relaxed);
                }
LABEL_774:
                LODWORD(v1176) = 0;
                Espresso::create_context((int *)&v1176, &v1180);
                long long v354 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v355 = (std::__shared_weak_count *)*((void *)v352 + 40);
                *(_OWORD *)(v352 + 312) = v354;
                if (v355) {
                  nitro::nitro_function::nitro_function(v355);
                }
                if (v940) {
                  atomic_fetch_add_explicit(&v940->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                float v356 = (std::__shared_weak_count *)*((void *)v352 + 42);
                *((void *)v352 + 41) = v933;
                *((void *)v352 + 42) = v940;
                if (v356) {
                  nitro::nitro_function::nitro_function(v356);
                }
                long long v357 = v1143;
                if (*((void *)&v1143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                v358 = (std::__shared_weak_count *)*((void *)v352 + 2);
                *(_OWORD *)(v352 + 8) = v357;
                if (v358) {
                  nitro::nitro_function::nitro_function(v358);
                }
                int v359 = (***(uint64_t (****)(void))(*((void *)v352 + 39) + 8))(*(void *)(*((void *)v352 + 39) + 8));
                *(_DWORD *)(*(void *)(*(void *)(v1139 + 40) - 16) + 8) = v359;
                if (v1180.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1180.__r_.__value_.__l.__size_);
                }
                if (v353) {
                  nitro::nitro_function::nitro_function(v353);
                }
                if (v1153) {
                  nitro::nitro_function::nitro_function(v1153);
                }
LABEL_792:
                if (SHIBYTE(v1182.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1182.__r_.__value_.__l.__data_);
                }
                __n[0] = (std::string::size_type)&v1187;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
                __n[0] = (std::string::size_type)&v1189;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
                if (v940) {
                  nitro::nitro_function::nitro_function(v940);
                }
                std::__tree<int>::destroy((void *)v1184[1].__r_.__value_.__l.__data_);
                if (v1184[0].__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v1184[0].__r_.__value_.__l.__size_);
                }
                uint64_t v360 = (std::string *)v298->__words[1];
                if (v360)
                {
                  do
                  {
                    uint64_t v361 = v360;
                    uint64_t v360 = (std::string *)v360->__r_.__value_.__r.__words[0];
                  }
                  while (v360);
                }
                else
                {
                  do
                  {
                    uint64_t v361 = (std::string *)v298->__words[2];
                    _ZF = v361->__r_.__value_.__r.__words[0] == (void)v298;
                    uint64_t v298 = (std::string::__raw *)v361;
                  }
                  while (!_ZF);
                }
                uint64_t v298 = (std::string::__raw *)v361;
                if (v361 == (std::string *)&v1185.__r_.__value_.__r.__words[1])
                {
LABEL_804:
                  char v1149 = 1;
                  memset(&v1182, 0, sizeof(v1182));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1182, (uint64_t)v1154.__r_.__value_.__l.__data_, v1154.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1154.__r_.__value_.__l.__size_ - v1154.__r_.__value_.__r.__words[0]) >> 3));
                  memset(&v1180, 0, sizeof(v1180));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1180, (uint64_t)v945, (uint64_t)v946, 0xAAAAAAAAAAAAAAABLL * (((char *)v946 - (char *)v945) >> 3));
                  memset(&v1189, 0, sizeof(v1189));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1189, (uint64_t)v1182.__r_.__value_.__l.__data_, v1182.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1182.__r_.__value_.__l.__size_ - v1182.__r_.__value_.__r.__words[0]) >> 3));
                  memset(&v1187, 0, sizeof(v1187));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1187, (uint64_t)v1180.__r_.__value_.__l.__data_, v1180.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1180.__r_.__value_.__l.__size_ - v1180.__r_.__value_.__r.__words[0]) >> 3));
                  uint64_t v362 = v1141;
                  LODWORD(v1184[0].__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v1143 + 8))(*(void *)(v1143 + 8));
                  Espresso::abstract_engine_factory::make_kernel_priv(v362, (uint64_t)&v1143, (uint64_t)&v1161, (uint64_t)v1168, (int *)v1184);
                  int v363 = (std::__shared_weak_count *)*((void *)&v951 + 1);
                  long long v1176 = v951;
                  if (*((void *)&v951 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v951 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  memset(v1184, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1184, (uint64_t)v1189.__r_.__value_.__l.__data_, v1189.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1189.__r_.__value_.__l.__size_ - v1189.__r_.__value_.__r.__words[0]) >> 3));
                  __n[1] = 0;
                  __n[0] = 0;
                  *(void *)&long long v1179 = 0;
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v1187.__r_.__value_.__l.__data_, v1187.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1187.__r_.__value_.__l.__size_ - v1187.__r_.__value_.__r.__words[0]) >> 3));
                  Espresso::sequential_builder::add_kernel_dbg((uint64_t)&v1133, &v1176, (uint64_t)&v1161, (uint64_t)&v1159, (uint64_t)v1137, (std::string **)v1184, (std::string **)__n);
                  v1152 = __n;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1152);
                  v1152 = v1184;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1152);
                  if (v363) {
                    nitro::nitro_function::nitro_function(v363);
                  }
                  if ((void)v1133) {
                    Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)&v1133, v951, (long long **)&v1189, (uint64_t *)&v1187);
                  }
                  v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1187;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                  v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1189;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                  v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1180;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                  v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1182;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                  v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1154;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((void *)v1185.__r_.__value_.__l.__size_);
                  if (*((void *)&v951 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v951 + 1));
                  }
                  v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v945;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                  if (SHIBYTE(v1157.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1157.__r_.__value_.__l.__data_);
                  }
                  v1184[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v948;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1184);
                  for (uint64_t i4 = 0; i4 != -48; i4 -= 24)
                  {
                    if (*((char *)&v1164 + i4 + 7) < 0) {
                      operator delete(*(void **)&v1163[i4 + 24]);
                    }
                  }
                  if (SHIBYTE(v1159.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1159.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v1161.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1161.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_822;
                }
                goto LABEL_649;
              }
              goto LABEL_652;
            }
            goto LABEL_683;
          }
          if (*((char *)v319 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v1180, *(const std::string::value_type **)v319, *((void *)v319 + 1));
          }
          else
          {
            long long v320 = *v319;
            v1180.__r_.__value_.__r.__words[2] = *((void *)v319 + 2);
            *(_OWORD *)&v1180.__r_.__value_.__l.__data_ = v320;
          }
          std::string::size_type v321 = v1154.__r_.__value_.__r.__words[0] + 24 * v301;
          if ((v1180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v322 = HIBYTE(v1180.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v322 = v1180.__r_.__value_.__l.__size_;
          }
          uint64_t v323 = *(unsigned __int8 *)(v321 + 23);
          int v324 = (char)v323;
          if ((v323 & 0x80u) != 0) {
            uint64_t v323 = *(void *)(v321 + 8);
          }
          if (v322 != v323) {
            goto LABEL_703;
          }
          uint64_t v325 = v324 >= 0
               ? (unsigned __int8 *)(v1154.__r_.__value_.__r.__words[0] + 24 * v301)
               : *(unsigned __int8 **)v321;
          if ((*((unsigned char *)&v1180.__r_.__value_.__s + 23) & 0x80) != 0) {
            break;
          }
          if (*((unsigned char *)&v1180.__r_.__value_.__s + 23))
          {
            std::vector<std::string> v326 = &v1180;
            uint64_t v327 = HIBYTE(v1180.__r_.__value_.__r.__words[2]);
            do
            {
              if (v326->__r_.__value_.__s.__data_[0] != *v325) {
                goto LABEL_703;
              }
              std::vector<std::string> v326 = (std::string *)((char *)v326 + 1);
              ++v325;
              --v327;
            }
            while (v327);
            char v316 = 1;
LABEL_703:
            if ((*((unsigned char *)&v1180.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_708;
            }
            char v328 = (void *)v1180.__r_.__value_.__r.__words[0];
LABEL_706:
            operator delete(v328);
            goto LABEL_708;
          }
          char v316 = 1;
LABEL_708:
          char v319 = (long long *)((char *)v319 + 24);
        }
        char v328 = (void *)v1180.__r_.__value_.__r.__words[0];
        v316 |= memcmp(v1180.__r_.__value_.__l.__data_, v325, v1180.__r_.__value_.__l.__size_) == 0;
        goto LABEL_706;
      }
LABEL_822:
      unsigned int v365 = (void **)v1128;
      uint64_t v366 = *(void *)v1128;
      *(void *)(v366 + 8) = *((void *)v1128 + 1);
      *v365[1] = v366;
      --v1129;
      operator delete(v365);
      std::string::size_type v367 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)v934 + 3) + 40), v1115, &v1115);
      v368 = v367[5];
      int v369 = v367[6];
      if (v368 == v369) {
        goto LABEL_846;
      }
      do
      {
        uint64_t v370 = *(unsigned int *)v368;
        *(_DWORD *)v1163 = *(_DWORD *)v368;
        v371 = v1126[0];
        if (v1126[0])
        {
          while (1)
          {
            int v372 = *((_DWORD *)v371 + 7);
            if ((int)v370 >= v372)
            {
              if (v372 < (int)v370) {
                goto LABEL_828;
              }
              int v373 = *((_DWORD *)v371 + 8);
              if ((int)v370 >= v373) {
                break;
              }
            }
LABEL_829:
            v371 = (void *)*v371;
            if (!v371) {
              goto LABEL_830;
            }
          }
          if (v373 >= (int)v370) {
            goto LABEL_845;
          }
LABEL_828:
          ++v371;
          goto LABEL_829;
        }
LABEL_830:
        id v374 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)v934 + 3) + 16), v370, v1163);
        v375 = (unsigned int *)v374[5];
        v376 = (unsigned int *)v374[6];
        if (v375 == v376) {
          goto LABEL_844;
        }
        LOBYTE(v377) = 1;
        do
        {
          v378 = v1126[0];
          if (!v1126[0]) {
            goto LABEL_845;
          }
          uint64_t v379 = *v375;
          while (1)
          {
            int v380 = *((_DWORD *)v378 + 7);
            if ((int)v379 >= v380)
            {
              if (v380 < (int)v379) {
                goto LABEL_838;
              }
              int v381 = *((_DWORD *)v378 + 8);
              if ((int)v379 >= v381) {
                break;
              }
            }
LABEL_839:
            v378 = (void *)*v378;
            if (!v378) {
              goto LABEL_845;
            }
          }
          if (v381 < (int)v379)
          {
LABEL_838:
            ++v378;
            goto LABEL_839;
          }
          *(void *)v1168 = v379 | (v379 << 32);
          v382 = std::__tree<std::__value_type<std::pair<int,int>,BOOL>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,BOOL>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,BOOL>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v1125, v379, v379, v1168);
          int v377 = (*((unsigned char *)v382 + 36) != 0) & v377;
          if (!*((unsigned char *)v382 + 36)) {
            break;
          }
          ++v375;
        }
        while (v375 != v376);
        if (v377)
        {
LABEL_844:
          v383 = operator new(0x18uLL);
          v383[4] = v370;
          v384 = v1127;
          *(void *)v383 = v1127;
          *((void *)v383 + 1) = &v1127;
          v384[1] = v383;
          v1127 = v383;
          ++v1129;
          *(void *)v1168 = v370 | (v370 << 32);
          *((unsigned char *)std::__tree<std::__value_type<std::pair<int,int>,BOOL>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,BOOL>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,BOOL>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v1125, v370, v370, v1168)+ 36) = 1;
        }
LABEL_845:
        v368 = (uint64_t *)((char *)v368 + 4);
      }
      while (v368 != v369);
LABEL_846:
      if (v1148)
      {
        unint64_t v385 = v1148 + v1147 - 1;
        uint64_t v386 = *(void *)(*((void *)&v1145 + 1) + 8 * (v385 / 0xAA));
        unint64_t v387 = v385 % 0xAA;
        v388 = (uint64_t *)(v386 + 24 * (v385 % 0xAA));
        uint64_t v389 = *v388;
        uint64_t v390 = (std::__shared_weak_count *)v388[1];
        if (v390)
        {
          atomic_fetch_add_explicit(&v390->__shared_owners_, 1uLL, memory_order_relaxed);
          int v391 = *(_DWORD *)(v386 + 24 * v387 + 16);
          atomic_fetch_add_explicit(&v390->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          int v391 = *(_DWORD *)(v386 + 24 * v387 + 16);
        }
        v392 = (std::__shared_weak_count *)*((void *)&v1143 + 1);
        *(void *)&long long v1143 = v389;
        *((void *)&v1143 + 1) = v390;
        if (v392) {
          nitro::nitro_function::nitro_function(v392);
        }
        int v1144 = v391;
        uint64_t v393 = v1148 - 1;
        uint64_t v394 = *((void *)&v1145 + 1);
        unint64_t v395 = v1148 - 1 + v1147;
        v396 = *(std::__shared_weak_count **)(*(void *)(*((void *)&v1145 + 1) + 8 * (v395 / 0xAA))
                                            + 24 * (v395 % 0xAA)
                                            + 8);
        if (v396)
        {
          nitro::nitro_function::nitro_function(v396);
          uint64_t v393 = v1148 - 1;
          uint64_t v394 = *((void *)&v1145 + 1);
          unint64_t v395 = v1148 - 1 + v1147;
        }
        uint64_t v397 = (uint64_t)__src_8[0] - v394;
        _ZF = v397 == 0;
        uint64_t v398 = 170 * (v397 >> 3) - 1;
        uint64_t v1148 = v393;
        if (_ZF) {
          uint64_t v399 = 0;
        }
        else {
          uint64_t v399 = v398;
        }
        if (v399 - v395 >= 0x154)
        {
          operator delete(*((void **)__src_8[0] - 1));
          __src_8[0] = (char *)__src_8[0] - 8;
        }
      }
      else
      {
        uint64_t v390 = (std::__shared_weak_count *)*((void *)&v1143 + 1);
        long long v1143 = 0uLL;
      }
      if (v390) {
        nitro::nitro_function::nitro_function(v390);
      }
      if (SHIBYTE(v1107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1107.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1108.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1109.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1109.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if ((char)v1114 < 0) {
        operator delete(v1112);
      }
      if (v931) {
        nitro::nitro_function::nitro_function(v931);
      }
      if (v930) {
        nitro::nitro_function::nitro_function(v930);
      }
      if (!v1129) {
        goto LABEL_2200;
      }
    }
    if (v1147 < 0xAA)
    {
      int v112 = (void **)v1145;
      uint64_t v113 = (uint64_t)__src_8[1] - v1145;
      if (v98 >= (uint64_t)((uint64_t)__src_8[1] - v1145) >> 3)
      {
        if (__src_8[1] == (void *)v1145) {
          unint64_t v114 = 1;
        }
        else {
          unint64_t v114 = v113 >> 2;
        }
        uint64_t v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114);
        uint64_t v117 = v116;
        unsigned int v118 = &v115[8 * v98];
        *(void *)&long long v119 = v115;
        *((void *)&v119 + 1) = v118;
        long long v935 = v119;
        unint64_t v120 = operator new(0xFF0uLL);
        *(void *)&long long v121 = v118;
        *((void *)&v121 + 1) = &v115[8 * v117];
        if (v98 == v117)
        {
          uint64_t v122 = 8 * v98;
          *(void *)&long long v123 = v935;
          if (v97 < 1)
          {
            uint64_t v155 = v120;
            uint64_t v156 = v122 >> 2;
            if (v95 == v96) {
              unint64_t v157 = 1;
            }
            else {
              unint64_t v157 = v156;
            }
            uint64_t v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v157);
            unsigned int v118 = &v158[8 * (v157 >> 2)];
            *(void *)&long long v123 = v158;
            *((void *)&v123 + 1) = v118;
            *(void *)&long long v121 = v118;
            *((void *)&v121 + 1) = &v158[8 * v159];
            if (v115)
            {
              long long v936 = v123;
              long long v918 = v121;
              operator delete(v115);
              long long v121 = v918;
              long long v123 = v936;
            }
            unint64_t v120 = v155;
          }
          else
          {
            uint64_t v124 = v122 >> 3;
            if (v124 >= -1) {
              unint64_t v125 = v124 + 1;
            }
            else {
              unint64_t v125 = v124 + 2;
            }
            v118 -= 8 * (v125 >> 1);
            *(void *)&long long v121 = v118;
            *((void *)&v123 + 1) = v118;
          }
        }
        else
        {
          long long v123 = v935;
        }
        *(void *)unsigned int v118 = v120;
        *(void *)&long long v121 = v121 + 8;
        for (uint64_t i5 = (char *)__src_8[0]; i5 != *((char **)&v1145 + 1); i5 -= 8)
        {
          char v161 = (void *)*((void *)&v123 + 1);
          if (*((void *)&v123 + 1) == (void)v123)
          {
            uint64_t v163 = (unsigned char *)v121;
            if ((unint64_t)v121 >= *((void *)&v121 + 1))
            {
              if (*((void *)&v121 + 1) == *((void *)&v123 + 1)) {
                unint64_t v168 = 1;
              }
              else {
                unint64_t v168 = (uint64_t)(*((void *)&v121 + 1) - *((void *)&v123 + 1)) >> 2;
              }
              int v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v168);
              id v162 = &v169[(2 * v168 + 6) & 0xFFFFFFFFFFFFFFF8];
              int v171 = v162;
              uint64_t v172 = v163 - (unsigned char *)v161;
              if (v163 != (unsigned char *)v161)
              {
                int v171 = &v162[v172 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v173 = 8 * (v172 >> 3);
                unsigned int v174 = &v169[(2 * v168 + 6) & 0xFFFFFFFFFFFFFFF8];
                unint64_t v175 = v161;
                do
                {
                  uint64_t v176 = *v175++;
                  *(void *)unsigned int v174 = v176;
                  v174 += 8;
                  v173 -= 8;
                }
                while (v173);
              }
              *(void *)&long long v123 = v169;
              *((void *)&v123 + 1) = &v169[(2 * v168 + 6) & 0xFFFFFFFFFFFFFFF8];
              *(void *)&long long v121 = v171;
              *((void *)&v121 + 1) = &v169[8 * v170];
              if (v161)
              {
                long long v938 = v123;
                long long v919 = v121;
                operator delete(v161);
                long long v121 = v919;
                long long v123 = v938;
              }
            }
            else
            {
              uint64_t v164 = (uint64_t)(*((void *)&v121 + 1) - v121) >> 3;
              if (v164 >= -1) {
                uint64_t v165 = v164 + 1;
              }
              else {
                uint64_t v165 = v164 + 2;
              }
              uint64_t v166 = v165 >> 1;
              uint64_t v167 = v121 + 8 * (v165 >> 1);
              id v162 = (char *)(v167 - (v121 - *((void *)&v123 + 1)));
              if ((void)v121 == *((void *)&v123 + 1))
              {
                uint64_t v163 = (unsigned char *)*((void *)&v123 + 1);
              }
              else
              {
                uint64_t v937 = v123;
                uint64_t v920 = *((void *)&v121 + 1);
                memmove((void *)(v167 - (v121 - *((void *)&v123 + 1))), *((const void **)&v123 + 1), v121 - *((void *)&v123 + 1));
                *((void *)&v121 + 1) = v920;
                *(void *)&long long v123 = v937;
              }
              *((void *)&v123 + 1) = v162;
              *(void *)&long long v121 = &v163[8 * v166];
            }
          }
          else
          {
            id v162 = (char *)*((void *)&v123 + 1);
          }
          uint64_t v177 = *((void *)i5 - 1);
          *((void *)v162 - 1) = v177;
          *((void *)&v123 + 1) -= 8;
        }
        long long v178 = (void *)v1145;
        long long v1145 = v123;
        *(_OWORD *)__src_8 = v121;
        if (v178) {
          operator delete(v178);
        }
        goto LABEL_258;
      }
      if (__src_8[1] == __src_8[0])
      {
        int v135 = operator new(0xFF0uLL);
        if (v112 == v96)
        {
          if (v95 == v96) {
            unint64_t v136 = 1;
          }
          else {
            unint64_t v136 = v113 >> 2;
          }
          unsigned int v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v136);
          unsigned int v96 = (void **)&v137[(2 * v136 + 6) & 0xFFFFFFFFFFFFFFF8];
          unsigned int v139 = (uint64_t *)*((void *)&v1145 + 1);
          unsigned int v140 = v96;
          uint64_t v141 = (uint64_t)__src_8[0] - *((void *)&v1145 + 1);
          if (__src_8[0] != *((void **)&v1145 + 1))
          {
            unsigned int v140 = (void **)((char *)v96 + (v141 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v142 = 8 * (v141 >> 3);
            unsigned int v143 = &v137[(2 * v136 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v144 = *v139++;
              *(void *)unsigned int v143 = v144;
              v143 += 8;
              v142 -= 8;
            }
            while (v142);
          }
          uint64_t v145 = (void *)v1145;
          *(void *)&long long v1145 = v137;
          *((void *)&v1145 + 1) = &v137[(2 * v136 + 6) & 0xFFFFFFFFFFFFFFF8];
          __src_8[0] = v140;
          __src_8[1] = &v137[8 * v138];
          if (v145)
          {
            operator delete(v145);
            unsigned int v96 = (void **)*((void *)&v1145 + 1);
          }
        }
        *(v96 - 1) = v135;
        uint64_t v146 = (char *)*((void *)&v1145 + 1);
        int v147 = (char *)__src_8[0];
        *((void *)&v1145 + 1) -= 8;
        uint64_t v148 = **((void **)&v1145 + 1);
        *((void *)&v1145 + 1) = v146;
        if (__src_8[0] == __src_8[1])
        {
          uint64_t v149 = (uint64_t)&v146[-v1145];
          if ((unint64_t)v146 <= (unint64_t)v1145)
          {
            if (__src_8[0] == (void *)v1145) {
              unint64_t v545 = 1;
            }
            else {
              unint64_t v545 = (uint64_t)((uint64_t)__src_8[0] - v1145) >> 2;
            }
            v546 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v545);
            v548 = (uint64_t *)*((void *)&v1145 + 1);
            int v147 = &v546[8 * (v545 >> 2)];
            uint64_t v549 = (uint64_t)__src_8[0] - *((void *)&v1145 + 1);
            if (__src_8[0] != *((void **)&v1145 + 1))
            {
              int v147 = &v546[8 * (v545 >> 2) + (v549 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v550 = 8 * (v549 >> 3);
              v551 = &v546[8 * (v545 >> 2)];
              do
              {
                uint64_t v552 = *v548++;
                *(void *)v551 = v552;
                v551 += 8;
                v550 -= 8;
              }
              while (v550);
            }
            v553 = (void *)v1145;
            *(void *)&long long v1145 = v546;
            *((void *)&v1145 + 1) = &v546[8 * (v545 >> 2)];
            __src_8[0] = v147;
            __src_8[1] = &v546[8 * v547];
            if (v553)
            {
              operator delete(v553);
              int v147 = (char *)__src_8[0];
            }
          }
          else
          {
            uint64_t v150 = v149 >> 3;
            BOOL v106 = v149 >> 3 < -1;
            uint64_t v151 = (v149 >> 3) + 2;
            if (v106) {
              uint64_t v152 = v151;
            }
            else {
              uint64_t v152 = v150 + 1;
            }
            uint64_t v153 = &v146[-8 * (v152 >> 1)];
            int64_t v154 = (char *)__src_8[0] - (char *)v146;
            if (__src_8[0] != v146)
            {
              memmove(&v146[-8 * (v152 >> 1)], v146, (char *)__src_8[0] - (char *)v146);
              uint64_t v146 = (char *)*((void *)&v1145 + 1);
            }
            int v147 = &v153[v154];
            __src_8[0] = &v153[v154];
            *((void *)&v1145 + 1) = &v146[-8 * (v152 >> 1)];
          }
        }
        *(void *)int v147 = v148;
      }
      else
      {
        void *v95 = operator new(0xFF0uLL);
      }
    }
    else
    {
      v1147 -= 170;
      unsigned int v102 = (char *)(*((void *)&v1145 + 1) + 8);
      unsigned int v103 = (void *)**((void **)&v1145 + 1);
      *((void *)&v1145 + 1) += 8;
      if (__src_8[1] == __src_8[0])
      {
        uint64_t v104 = (uint64_t)&v102[-v1145];
        if ((unint64_t)v102 <= (unint64_t)v1145)
        {
          if (__src_8[0] == (void *)v1145) {
            unint64_t v126 = 1;
          }
          else {
            unint64_t v126 = (uint64_t)((uint64_t)__src_8[0] - v1145) >> 2;
          }
          unsigned int v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v126);
          int v129 = (uint64_t *)*((void *)&v1145 + 1);
          unsigned int v95 = (void **)&v127[8 * (v126 >> 2)];
          uint64_t v130 = (uint64_t)__src_8[0] - *((void *)&v1145 + 1);
          if (__src_8[0] != *((void **)&v1145 + 1))
          {
            unsigned int v95 = (void **)&v127[8 * (v126 >> 2) + (v130 & 0xFFFFFFFFFFFFFFF8)];
            uint64_t v131 = 8 * (v130 >> 3);
            CVPixelBufferRef v132 = &v127[8 * (v126 >> 2)];
            do
            {
              uint64_t v133 = *v129++;
              *(void *)CVPixelBufferRef v132 = v133;
              v132 += 8;
              v131 -= 8;
            }
            while (v131);
          }
          unsigned int v134 = (void *)v1145;
          *(void *)&long long v1145 = v127;
          *((void *)&v1145 + 1) = &v127[8 * (v126 >> 2)];
          __src_8[0] = v95;
          __src_8[1] = &v127[8 * v128];
          if (v134)
          {
            operator delete(v134);
            unsigned int v95 = (void **)__src_8[0];
          }
        }
        else
        {
          uint64_t v105 = v104 >> 3;
          BOOL v106 = v104 >> 3 < -1;
          uint64_t v107 = (v104 >> 3) + 2;
          if (v106) {
            uint64_t v108 = v107;
          }
          else {
            uint64_t v108 = v105 + 1;
          }
          uint64_t v109 = &v102[-8 * (v108 >> 1)];
          int64_t v110 = (char *)__src_8[0] - (char *)v102;
          if (__src_8[0] == v102)
          {
            uint64_t v111 = (char *)__src_8[0];
          }
          else
          {
            memmove(&v102[-8 * (v108 >> 1)], v102, (char *)__src_8[0] - (char *)v102);
            uint64_t v111 = (char *)*((void *)&v1145 + 1);
          }
          unsigned int v95 = (void **)&v109[v110];
          __src_8[0] = &v109[v110];
          *((void *)&v1145 + 1) = &v111[-8 * (v108 >> 1)];
        }
      }
      void *v95 = v103;
    }
    __src_8[0] = (char *)__src_8[0] + 8;
LABEL_258:
    unsigned int v96 = (void **)*((void *)&v1145 + 1);
    uint64_t v100 = v1148;
    unint64_t v101 = v1148 + v1147;
    goto LABEL_259;
  }
LABEL_2200:
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v1133, (uint64_t)&__p, 1, a2);
  v909 = *a2;
  Espresso::net::_allocate_temporary_buffer(*a2);
  Espresso::net::_tag_inputs_and_outputs(v909);
  Espresso::net::_assign_streams(v909);
  if (v1117) {
    nitro::nitro_function::nitro_function(v1117);
  }
  if (v917) {
    nitro::nitro_function::nitro_function(v917);
  }
  std::__tree<std::string>::destroy((uint64_t)&v1118, (char *)v1119[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v1123, v1124[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, v1121);
  std::__tree<int>::destroy(v1126[0]);
  std::__list_imp<int>::clear(&v1127);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v1145);
  if (*((void *)&v1143 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v1143 + 1));
  }
  if (v1142) {
    nitro::nitro_function::nitro_function(v1142);
  }
  if (v1140) {
    nitro::nitro_function::nitro_function(v1140);
  }
  if (v1138 < 0) {
    operator delete(v1137[0]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v1134, *((void **)&v1134 + 1));
  if (*((void *)&v1133 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v1133 + 1));
  }
}

void sub_192850ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48)
{
  if (SLOBYTE(STACK[0xB77]) < 0) {
    operator delete((void *)STACK[0xB60]);
  }
  if (SLOBYTE(STACK[0xBC7]) < 0) {
    operator delete((void *)STACK[0xBB0]);
  }
  if (STACK[0x2A0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2A0]);
  }
  else {
    STACK[0x2A0] = 0;
  }
  size_t v49 = (std::__shared_weak_count *)STACK[0x288];
  if (SLOBYTE(STACK[0x877]) < 0) {
    operator delete((void *)STACK[0x860]);
  }
  if (SLOBYTE(STACK[0x897]) < 0) {
    operator delete((void *)STACK[0x880]);
  }
  if (SLOBYTE(STACK[0x8B7]) < 0) {
    operator delete((void *)STACK[0x8A0]);
  }
  if (SLOBYTE(STACK[0x8CF]) < 0) {
    operator delete((void *)STACK[0x8B8]);
  }
  if (SLOBYTE(STACK[0x8E7]) < 0) {
    operator delete((void *)STACK[0x8D0]);
  }
  if (SLOBYTE(STACK[0x8FF]) < 0) {
    operator delete((void *)STACK[0x8E8]);
  }
  if (STACK[0x2A0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2A0]);
  }
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (STACK[0x910]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x910]);
  }
  if (a47) {
    nitro::nitro_function::nitro_function(a47);
  }
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x918], (char *)STACK[0x920]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a48, (char *)STACK[0x950]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x930], (char *)STACK[0x938]);
  std::__tree<int>::destroy((void *)STACK[0x968]);
  std::__list_imp<int>::clear(&STACK[0x978]);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&STACK[0xA48]);
  if (STACK[0xA38]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0xA38]);
  }
  if (STACK[0xA28]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0xA28]);
  }
  if (STACK[0xA18]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0xA18]);
  }
  if (SLOBYTE(STACK[0xA0F]) < 0) {
    operator delete((void *)STACK[0x9F8]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x9D0], (void *)STACK[0x9D8]);
  if (STACK[0x9C8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x9C8]);
  }
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::pair<int,int>,BOOL>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,BOOL>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,BOOL>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(uint64_t **a1, int a2, int a3, void *a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v6;
        int v8 = *((_DWORD *)v6 + 7);
        if (v8 <= a2) {
          break;
        }
LABEL_3:
        long long v6 = (uint64_t *)*v7;
        uint64_t v9 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_11;
        }
      }
      if (v8 >= a2)
      {
        int v10 = *((_DWORD *)v7 + 8);
        if (v10 > a3) {
          goto LABEL_3;
        }
        if (v10 >= a3) {
          return v7;
        }
      }
      uint64_t v9 = (uint64_t **)(v7 + 1);
      long long v6 = (uint64_t *)v7[1];
      if (!v6) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v9 = a1 + 1;
LABEL_11:
  int v11 = v7;
  uint64_t v7 = operator new(0x28uLL);
  *(void *)((char *)v7 + 28) = *a4;
  *((unsigned char *)v7 + 36) = 0;
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = v11;
  const Espresso::net *v9 = v7;
  uint64_t v12 = (uint64_t *)**a1;
  long long v13 = v7;
  if (v12)
  {
    *a1 = v12;
    long long v13 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

void add_with_context_transfers_t<Espresso::activation_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  v136[0] = 0;
  v136[1] = 0;
  int v135 = (uint64_t *)v136;
  unsigned int v134 = 0;
  uint64_t v8 = *a6;
  uint64_t v105 = a6[1];
  if (*a6 == v105)
  {
    uint64_t v31 = *a6;
    goto LABEL_46;
  }
  unsigned int v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v8;
      v129.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v11 = *(void *)(a2 + 80);
    uint64_t v12 = *(void *)(v11 + 32);
    if (*(void *)(v11 + 40) != v12)
    {
      uint64_t v106 = v8;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)(*(void *)(v12 + 16 * v13) + 64);
        uint64_t v16 = *(void *)(v14 + 8);
        uint64_t v15 = *(std::__shared_weak_count **)(v14 + 16);
        uint64_t v131 = v16;
        CVPixelBufferRef v132 = v15;
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = *(void *)(a2 + 80);
        }
        *(void *)std::string __str = v13;
        uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        int v19 = (long long *)v17[3];
        uint64_t v18 = (long long *)v17[4];
        if (v19 != v18) {
          break;
        }
LABEL_37:
        if (v132) {
          nitro::nitro_function::nitro_function(v132);
        }
        ++v13;
        uint64_t v11 = *(void *)(a2 + 80);
        uint64_t v12 = *(void *)(v11 + 32);
        if (v13 >= (*(void *)(v11 + 40) - v12) >> 4)
        {
          unsigned int v9 = v134;
          uint64_t v8 = v106;
          goto LABEL_41;
        }
      }
      unint64_t v20 = v131;
      int v21 = v134;
      while (1)
      {
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v19, *((void *)v19 + 1));
        }
        else
        {
          long long v22 = *v19;
          *(void *)&__str[16] = *((void *)v19 + 2);
          *(_OWORD *)std::string __str = v22;
        }
        uint64_t v23 = __str[23];
        char v24 = __str[23];
        if (__str[23] >= 0) {
          uint64_t v25 = __str[23];
        }
        else {
          uint64_t v25 = *(void *)&__str[8];
        }
        std::string::size_type size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v129.__r_.__value_.__l.__size_;
        }
        if (v25 == size)
        {
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v27 = &v129;
          }
          else {
            unint64_t v27 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((__str[23] & 0x80000000) != 0)
          {
            long long v29 = *(void **)__str;
            if (memcmp(*(const void **)__str, v27, *(size_t *)&__str[8])) {
              goto LABEL_35;
            }
LABEL_31:
            if (v20 != *(void *)(a2 + 112))
            {
              long long v30 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v135, v20, &v131);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v30 + 6, v21, &v134)+ 8) = 1;
              char v24 = __str[23];
            }
            goto LABEL_33;
          }
          if (!__str[23]) {
            goto LABEL_31;
          }
          BOOL v28 = __str;
          while (*v28 == v27->__r_.__value_.__s.__data_[0])
          {
            ++v28;
            unint64_t v27 = (std::string *)((char *)v27 + 1);
            if (!--v23) {
              goto LABEL_31;
            }
          }
        }
LABEL_33:
        if (v24 < 0)
        {
          long long v29 = *(void **)__str;
LABEL_35:
          operator delete(v29);
        }
        int v19 = (long long *)((char *)v19 + 24);
        if (v19 == v18) {
          goto LABEL_37;
        }
      }
    }
LABEL_41:
    unsigned int v134 = ++v9;
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v8 += 24;
  }
  while (v8 != v105);
  uint64_t v31 = *a6;
  uint64_t v8 = a6[1];
LABEL_46:
  uint64_t v131 = 0;
  CVPixelBufferRef v132 = 0;
  uint64_t v133 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v31, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v31) >> 3));
  size_t v32 = v135;
  if (v135 == (uint64_t *)v136) {
    goto LABEL_202;
  }
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v129, v32 + 4);
    std::string::size_type v33 = v129.__r_.__value_.__l.__size_;
    std::string::size_type v103 = v129.__r_.__value_.__r.__words[0];
    if (v129.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v129.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v104 = (std::__shared_weak_count *)v33;
    unint64_t v126 = 0;
    unsigned int v127 = 0;
    unint64_t v128 = 0;
    long long v123 = 0;
    uint64_t v124 = 0;
    unint64_t v125 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    long long v34 = (void **)v129.__r_.__value_.__r.__words[2];
    if ((void **)v129.__r_.__value_.__r.__words[2] == v130) {
      goto LABEL_150;
    }
    while (2)
    {
      int v35 = *((_DWORD *)v34 + 7);
      uint64_t v36 = *a6 + 24 * v35;
      if (*(char *)(v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v36, *(void *)(v36 + 8));
      }
      else
      {
        long long v37 = *(_OWORD *)v36;
        *(void *)&__str[16] = *(void *)(v36 + 16);
        *(_OWORD *)std::string __str = v37;
      }
      if (__str[23] >= 0) {
        int64_t v38 = __str[23];
      }
      else {
        int64_t v38 = *(void *)&__str[8];
      }
      if (__str[23] >= 0) {
        long long v39 = __str;
      }
      else {
        long long v39 = *(char **)__str;
      }
      if (v38 >= 4)
      {
        unint64_t v40 = &v39[v38];
        int64_t v41 = v38;
        long long v42 = v39;
        do
        {
          unint64_t v43 = (char *)memchr(v42, 99, v41 - 3);
          if (!v43) {
            break;
          }
          if (*(_DWORD *)v43 == 1601532003)
          {
            if (v43 != v40 && v43 == v39)
            {
              std::string::basic_string(&v119, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v138);
              goto LABEL_77;
            }
            break;
          }
          long long v42 = v43 + 1;
          int64_t v41 = v40 - v42;
        }
        while (v40 - v42 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v119, v38 + 3);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v119;
      }
      else {
        uint64_t v44 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      if (v38)
      {
        if (__str[23] >= 0) {
          uint64_t v45 = __str;
        }
        else {
          uint64_t v45 = *(unsigned char **)__str;
        }
        memmove(v44, v45, v38);
      }
      *(_DWORD *)((char *)&v44->__r_.__value_.__l.__data_ + v38) = 7894111;
LABEL_77:
      uint64_t v46 = v131 + 24 * v35;
      if (*(char *)(v46 + 23) < 0) {
        operator delete(*(void **)v46);
      }
      long long v47 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      *(void *)(v46 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v119.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v46 = v47;
      uint64_t v48 = *(void *)(a2 + 80);
      if (*(void *)(v48 + 40) == *(void *)(v48 + 32))
      {
LABEL_109:
        uint64_t v63 = *a6 + 24 * v35;
        uint64_t v64 = v127;
        if ((unint64_t)v127 >= v128)
        {
          size_t v66 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v126, v63);
        }
        else
        {
          if (*(char *)(v63 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
          }
          else
          {
            long long v65 = *(_OWORD *)v63;
            v127->__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
            *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
          }
          size_t v66 = v64 + 1;
        }
        unsigned int v127 = v66;
        uint64_t v67 = v131 + 24 * v35;
        long long v68 = v124;
        if ((unint64_t)v124 >= v125)
        {
          long long v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v123, v67);
        }
        else
        {
          if (*(char *)(v67 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v124, *(const std::string::value_type **)v67, *(void *)(v67 + 8));
          }
          else
          {
            long long v69 = *(_OWORD *)v67;
            v124->__r_.__value_.__r.__words[2] = *(void *)(v67 + 16);
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
          }
          long long v70 = v68 + 1;
        }
        uint64_t v124 = v70;
        if ((v122 & 0x80u) == 0) {
          size_t v71 = v122;
        }
        else {
          size_t v71 = *(void *)v121;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v119, v71 + 1);
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v72 = &v119;
        }
        else {
          uint64_t v72 = (std::string *)v119.__r_.__value_.__r.__words[0];
        }
        if (v71)
        {
          if ((v122 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v72, p_p, v71);
        }
        *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v71) = 95;
        uint64_t v74 = *a6 + 24 * v35;
        int v75 = *(char *)(v74 + 23);
        if (v75 >= 0) {
          BOOL v76 = (const std::string::value_type *)(*a6 + 24 * v35);
        }
        else {
          BOOL v76 = *(const std::string::value_type **)v74;
        }
        if (v75 >= 0) {
          std::string::size_type v77 = *(unsigned __int8 *)(v74 + 23);
        }
        else {
          std::string::size_type v77 = *(void *)(v74 + 8);
        }
        size_t v78 = std::string::append(&v119, v76, v77);
        std::string v79 = (void *)v78->__r_.__value_.__r.__words[0];
        *(void *)uint64_t v138 = v78->__r_.__value_.__l.__size_;
        *(void *)&v138[7] = *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v80 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        if ((char)v122 < 0) {
          operator delete(__p);
        }
        std::string __p = v79;
        *(void *)long long v121 = *(void *)v138;
        *(void *)&v121[7] = *(void *)&v138[7];
        unsigned __int8 v122 = v80;
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        goto LABEL_142;
      }
      unint64_t v49 = 0;
      char v50 = 0;
      while (2)
      {
        v119.__r_.__value_.__r.__words[0] = v49;
        uint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v48 + 96, v49, &v119);
        uint64_t v52 = (long long *)v51[3];
        uint64_t v53 = (long long *)v51[4];
        while (2)
        {
          if (v52 != v53)
          {
            if (*((char *)v52 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v52, *((void *)v52 + 1));
            }
            else
            {
              long long v54 = *v52;
              v119.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v54;
            }
            char v55 = (unsigned __int8 **)(v131 + 24 * v35);
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v56 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v56 = v119.__r_.__value_.__l.__size_;
            }
            int v57 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
            int v58 = (char)v57;
            if ((char)v57 < 0) {
              int v57 = v55[1];
            }
            if ((unsigned __int8 *)v56 != v57) {
              goto LABEL_101;
            }
            if (v58 >= 0) {
              char v59 = (unsigned __int8 *)(v131 + 24 * v35);
            }
            else {
              char v59 = *v55;
            }
            if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              char v62 = (void *)v119.__r_.__value_.__r.__words[0];
              v50 |= memcmp(v119.__r_.__value_.__l.__data_, v59, v119.__r_.__value_.__l.__size_) == 0;
LABEL_104:
              operator delete(v62);
            }
            else if (*((unsigned char *)&v119.__r_.__value_.__s + 23))
            {
              uint64_t v60 = &v119;
              uint64_t v61 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              while (v60->__r_.__value_.__s.__data_[0] == *v59)
              {
                uint64_t v60 = (std::string *)((char *)v60 + 1);
                ++v59;
                if (!--v61)
                {
                  char v50 = 1;
                  break;
                }
              }
LABEL_101:
              if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                char v62 = (void *)v119.__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
            }
            else
            {
              char v50 = 1;
            }
            uint64_t v52 = (long long *)((char *)v52 + 24);
            continue;
          }
          break;
        }
        ++v49;
        uint64_t v48 = *(void *)(a2 + 80);
        if (v49 < (uint64_t)(*(void *)(v48 + 40) - *(void *)(v48 + 32)) >> 4) {
          continue;
        }
        break;
      }
      if ((v50 & 1) == 0) {
        goto LABEL_109;
      }
LABEL_142:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      std::string v81 = v34[1];
      if (v81)
      {
        do
        {
          long long v82 = (void **)v81;
          std::string v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          long long v82 = (void **)v34[2];
          BOOL v83 = *v82 == v34;
          long long v34 = v82;
        }
        while (!v83);
      }
      long long v34 = v82;
      if (v82 != v130) {
        continue;
      }
      break;
    }
LABEL_150:
    if (v124 == v123) {
      goto LABEL_190;
    }
    memset(__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(&v119, "context_transfer");
    if ((v122 & 0x80u) == 0) {
      size_t v84 = v122;
    }
    else {
      size_t v84 = *(void *)v121;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v138, v84 + 3);
    if (v139 >= 0) {
      std::string::size_type v85 = v138;
    }
    else {
      std::string::size_type v85 = *(unsigned char **)v138;
    }
    if (v84)
    {
      if ((v122 & 0x80u) == 0) {
        char v86 = &__p;
      }
      else {
        char v86 = __p;
      }
      memmove(v85, v86, v84);
    }
    *(_DWORD *)&v85[v84] = 7894111;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v113, (uint64_t)v126, (uint64_t)v127, 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - v126) >> 3));
    memset(v112, 0, sizeof(v112));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v112, (uint64_t)v123, (uint64_t)v124, 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3));
    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v119, (uint64_t)v138, (uint64_t)__str, v113, v114, v112);
    unsigned int v137 = (void **)v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    unsigned int v137 = (void **)&v113;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    if (v139 < 0) {
      operator delete(*(void **)v138);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (!lpsrc)
    {
      uint64_t v87 = 0;
LABEL_171:
      uint64_t v88 = 0;
      goto LABEL_172;
    }
    if (!v87) {
      goto LABEL_171;
    }
    uint64_t v88 = v117;
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_172:
    *(_DWORD *)uint64_t v138 = 0;
    Espresso::create_context((int *)v138, &v119);
    uint64_t v90 = *(void *)(a2 + 112);
    uint64_t v89 = *(void *)(a2 + 120);
    if (v89) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
    }
    long long v91 = (std::__shared_weak_count *)v87[40];
    v87[39] = v90;
    v87[40] = v89;
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v92 = (std::__shared_weak_count *)v87[42];
    v87[41] = v103;
    v87[42] = v104;
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
    uint64_t v94 = *(void *)(a2 + 112);
    uint64_t v93 = *(void *)(a2 + 120);
    if (v93) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v95 = (std::__shared_weak_count *)v87[2];
    v87[1] = v94;
    v87[2] = v93;
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(void))(v87[39] + 8))(*(void *)(v87[39] + 8));
    if (v119.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v119.__r_.__value_.__l.__size_);
    }
    if (v88) {
      nitro::nitro_function::nitro_function(v88);
    }
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
LABEL_190:
    if ((char)v122 < 0) {
      operator delete(__p);
    }
    *(void *)std::string __str = &v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(void *)std::string __str = &v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
    std::__tree<int>::destroy(v130[0]);
    if (v129.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v129.__r_.__value_.__l.__size_);
    }
    unsigned int v96 = (uint64_t *)v32[1];
    if (v96)
    {
      do
      {
        uint64_t v97 = v96;
        unsigned int v96 = (uint64_t *)*v96;
      }
      while (v96);
    }
    else
    {
      do
      {
        uint64_t v97 = (uint64_t *)v32[2];
        BOOL v83 = *v97 == (void)v32;
        size_t v32 = v97;
      }
      while (!v83);
    }
    size_t v32 = v97;
    if (v97 != (uint64_t *)v136) {
      continue;
    }
    break;
  }
LABEL_202:
  *(unsigned char *)(a2 + 184) = 1;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v109, v131, (uint64_t)v132, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 3));
  memset(v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v108, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::activation_params>(a1, (uint64_t *)a2, a3, a4, a5, v109, v110, v108);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v136[0]);
}

void sub_192853D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  *(void *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(void **)(v59 - 152));
  _Unwind_Resume(a1);
}

void add_with_context_transfers_t<Espresso::generic_batchnorm_grad_kernel,Espresso::batchnorm_params>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  uint64_t v114 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v111, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v143[0] = 0;
  v143[1] = 0;
  uint64_t v142 = (uint64_t *)v143;
  unsigned int v141 = 0;
  uint64_t v10 = v114;
  uint64_t v109 = v115;
  if (v114 == v115)
  {
    uint64_t v33 = v114;
    goto LABEL_46;
  }
  unsigned int v11 = 0;
  do
  {
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v10;
      v136.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v12;
    }
    uint64_t v13 = *(void *)(a2 + 80);
    uint64_t v14 = *(void *)(v13 + 32);
    if (*(void *)(v13 + 40) != v14)
    {
      uint64_t v110 = v10;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(*(void *)(v14 + 16 * v15) + 64);
        uint64_t v18 = *(void *)(v16 + 8);
        uint64_t v17 = *(std::__shared_weak_count **)(v16 + 16);
        uint64_t v138 = v18;
        char v139 = v17;
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = *(void *)(a2 + 80);
        }
        *(void *)std::string __str = v15;
        int v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13 + 96, v15, __str);
        int v21 = (long long *)v19[3];
        unint64_t v20 = (long long *)v19[4];
        if (v21 != v20) {
          break;
        }
LABEL_37:
        if (v139) {
          nitro::nitro_function::nitro_function(v139);
        }
        ++v15;
        uint64_t v13 = *(void *)(a2 + 80);
        uint64_t v14 = *(void *)(v13 + 32);
        if (v15 >= (*(void *)(v13 + 40) - v14) >> 4)
        {
          unsigned int v11 = v141;
          uint64_t v10 = v110;
          goto LABEL_41;
        }
      }
      unint64_t v22 = v138;
      int v23 = v141;
      while (1)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v21, *((void *)v21 + 1));
        }
        else
        {
          long long v24 = *v21;
          *(void *)&__str[16] = *((void *)v21 + 2);
          *(_OWORD *)std::string __str = v24;
        }
        uint64_t v25 = __str[23];
        char v26 = __str[23];
        if (__str[23] >= 0) {
          uint64_t v27 = __str[23];
        }
        else {
          uint64_t v27 = *(void *)&__str[8];
        }
        std::string::size_type size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v136.__r_.__value_.__l.__size_;
        }
        if (v27 == size)
        {
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v29 = &v136;
          }
          else {
            long long v29 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((__str[23] & 0x80000000) != 0)
          {
            uint64_t v31 = *(void **)__str;
            if (memcmp(*(const void **)__str, v29, *(size_t *)&__str[8])) {
              goto LABEL_35;
            }
LABEL_31:
            if (v22 != *(void *)(a2 + 112))
            {
              size_t v32 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v142, v22, &v138);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v32 + 6, v23, &v141)+ 8) = 1;
              char v26 = __str[23];
            }
            goto LABEL_33;
          }
          if (!__str[23]) {
            goto LABEL_31;
          }
          long long v30 = __str;
          while (*v30 == v29->__r_.__value_.__s.__data_[0])
          {
            ++v30;
            long long v29 = (std::string *)((char *)v29 + 1);
            if (!--v25) {
              goto LABEL_31;
            }
          }
        }
LABEL_33:
        if (v26 < 0)
        {
          uint64_t v31 = *(void **)__str;
LABEL_35:
          operator delete(v31);
        }
        int v21 = (long long *)((char *)v21 + 24);
        if (v21 == v20) {
          goto LABEL_37;
        }
      }
    }
LABEL_41:
    unsigned int v141 = ++v11;
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    v10 += 24;
  }
  while (v10 != v109);
  uint64_t v33 = v114;
  uint64_t v10 = v115;
LABEL_46:
  uint64_t v138 = 0;
  char v139 = 0;
  uint64_t v140 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v138, v33, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v33) >> 3));
  long long v34 = v142;
  if (v142 == (uint64_t *)v143) {
    goto LABEL_202;
  }
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v136, v34 + 4);
    std::string::size_type v35 = v136.__r_.__value_.__l.__size_;
    std::string::size_type v107 = v136.__r_.__value_.__r.__words[0];
    if (v136.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v136.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v108 = (std::__shared_weak_count *)v35;
    uint64_t v133 = 0;
    unsigned int v134 = 0;
    unint64_t v135 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    unint64_t v132 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v36 = (void **)v136.__r_.__value_.__r.__words[2];
    if ((void **)v136.__r_.__value_.__r.__words[2] == v137) {
      goto LABEL_150;
    }
    while (2)
    {
      int v37 = *((_DWORD *)v36 + 7);
      uint64_t v38 = v114 + 24 * v37;
      if (*(char *)(v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
      }
      else
      {
        long long v39 = *(_OWORD *)v38;
        *(void *)&__str[16] = *(void *)(v38 + 16);
        *(_OWORD *)std::string __str = v39;
      }
      if (__str[23] >= 0) {
        int64_t v40 = __str[23];
      }
      else {
        int64_t v40 = *(void *)&__str[8];
      }
      if (__str[23] >= 0) {
        int64_t v41 = __str;
      }
      else {
        int64_t v41 = *(char **)__str;
      }
      if (v40 >= 4)
      {
        long long v42 = &v41[v40];
        int64_t v43 = v40;
        uint64_t v44 = v41;
        do
        {
          uint64_t v45 = (char *)memchr(v44, 99, v43 - 3);
          if (!v45) {
            break;
          }
          if (*(_DWORD *)v45 == 1601532003)
          {
            if (v45 != v42 && v45 == v41)
            {
              std::string::basic_string(&v126, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v145);
              goto LABEL_77;
            }
            break;
          }
          uint64_t v44 = v45 + 1;
          int64_t v43 = v42 - v44;
        }
        while (v42 - v44 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v126, v40 + 3);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v46 = &v126;
      }
      else {
        uint64_t v46 = (std::string *)v126.__r_.__value_.__r.__words[0];
      }
      if (v40)
      {
        if (__str[23] >= 0) {
          long long v47 = __str;
        }
        else {
          long long v47 = *(unsigned char **)__str;
        }
        memmove(v46, v47, v40);
      }
      *(_DWORD *)((char *)&v46->__r_.__value_.__l.__data_ + v40) = 7894111;
LABEL_77:
      uint64_t v48 = v138 + 24 * v37;
      if (*(char *)(v48 + 23) < 0) {
        operator delete(*(void **)v48);
      }
      long long v49 = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
      *(void *)(v48 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v126.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v48 = v49;
      uint64_t v50 = *(void *)(a2 + 80);
      if (*(void *)(v50 + 40) == *(void *)(v50 + 32))
      {
LABEL_109:
        uint64_t v65 = v114 + 24 * v37;
        size_t v66 = v134;
        if ((unint64_t)v134 >= v135)
        {
          long long v68 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v133, v65);
        }
        else
        {
          if (*(char *)(v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v134, *(const std::string::value_type **)v65, *(void *)(v65 + 8));
          }
          else
          {
            long long v67 = *(_OWORD *)v65;
            v134->__r_.__value_.__r.__words[2] = *(void *)(v65 + 16);
            *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
          }
          long long v68 = v66 + 1;
        }
        unsigned int v134 = v68;
        uint64_t v69 = v138 + 24 * v37;
        long long v70 = v131;
        if ((unint64_t)v131 >= v132)
        {
          uint64_t v72 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v130, v69);
        }
        else
        {
          if (*(char *)(v69 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v131, *(const std::string::value_type **)v69, *(void *)(v69 + 8));
          }
          else
          {
            long long v71 = *(_OWORD *)v69;
            v131->__r_.__value_.__r.__words[2] = *(void *)(v69 + 16);
            *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
          }
          uint64_t v72 = v70 + 1;
        }
        uint64_t v131 = v72;
        if ((v129 & 0x80u) == 0) {
          size_t v73 = v129;
        }
        else {
          size_t v73 = *(void *)v128;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v126, v73 + 1);
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v74 = &v126;
        }
        else {
          uint64_t v74 = (std::string *)v126.__r_.__value_.__r.__words[0];
        }
        if (v73)
        {
          if ((v129 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v74, p_p, v73);
        }
        *(_WORD *)((char *)&v74->__r_.__value_.__l.__data_ + v73) = 95;
        uint64_t v76 = v114 + 24 * v37;
        int v77 = *(char *)(v76 + 23);
        if (v77 >= 0) {
          size_t v78 = (const std::string::value_type *)(v114 + 24 * v37);
        }
        else {
          size_t v78 = *(const std::string::value_type **)v76;
        }
        if (v77 >= 0) {
          std::string::size_type v79 = *(unsigned __int8 *)(v76 + 23);
        }
        else {
          std::string::size_type v79 = *(void *)(v76 + 8);
        }
        unsigned __int8 v80 = std::string::append(&v126, v78, v79);
        std::string v81 = (void *)v80->__r_.__value_.__r.__words[0];
        *(void *)uint64_t v145 = v80->__r_.__value_.__l.__size_;
        *(void *)&v145[7] = *(std::string::size_type *)((char *)&v80->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v82 = HIBYTE(v80->__r_.__value_.__r.__words[2]);
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        if ((char)v129 < 0) {
          operator delete(__p);
        }
        std::string __p = v81;
        *(void *)unint64_t v128 = *(void *)v145;
        *(void *)&v128[7] = *(void *)&v145[7];
        unsigned __int8 v129 = v82;
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v126.__r_.__value_.__l.__data_);
        }
        goto LABEL_142;
      }
      unint64_t v51 = 0;
      char v52 = 0;
      while (2)
      {
        v126.__r_.__value_.__r.__words[0] = v51;
        uint64_t v53 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v50 + 96, v51, &v126);
        char v55 = (long long *)v53[3];
        long long v54 = (long long *)v53[4];
        while (2)
        {
          if (v55 != v54)
          {
            if (*((char *)v55 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)v55, *((void *)v55 + 1));
            }
            else
            {
              long long v56 = *v55;
              v126.__r_.__value_.__r.__words[2] = *((void *)v55 + 2);
              *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v56;
            }
            int v57 = (unsigned __int8 **)(v138 + 24 * v37);
            if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v58 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v58 = v126.__r_.__value_.__l.__size_;
            }
            uint64_t v59 = (unsigned __int8 *)*((unsigned __int8 *)v57 + 23);
            int v60 = (char)v59;
            if ((char)v59 < 0) {
              uint64_t v59 = v57[1];
            }
            if ((unsigned __int8 *)v58 != v59) {
              goto LABEL_101;
            }
            if (v60 >= 0) {
              uint64_t v61 = (unsigned __int8 *)(v138 + 24 * v37);
            }
            else {
              uint64_t v61 = *v57;
            }
            if ((*((unsigned char *)&v126.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              uint64_t v64 = (void *)v126.__r_.__value_.__r.__words[0];
              v52 |= memcmp(v126.__r_.__value_.__l.__data_, v61, v126.__r_.__value_.__l.__size_) == 0;
LABEL_104:
              operator delete(v64);
            }
            else if (*((unsigned char *)&v126.__r_.__value_.__s + 23))
            {
              char v62 = &v126;
              uint64_t v63 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
              while (v62->__r_.__value_.__s.__data_[0] == *v61)
              {
                char v62 = (std::string *)((char *)v62 + 1);
                ++v61;
                if (!--v63)
                {
                  char v52 = 1;
                  break;
                }
              }
LABEL_101:
              if ((*((unsigned char *)&v126.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                uint64_t v64 = (void *)v126.__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
            }
            else
            {
              char v52 = 1;
            }
            char v55 = (long long *)((char *)v55 + 24);
            continue;
          }
          break;
        }
        ++v51;
        uint64_t v50 = *(void *)(a2 + 80);
        if (v51 < (uint64_t)(*(void *)(v50 + 40) - *(void *)(v50 + 32)) >> 4) {
          continue;
        }
        break;
      }
      if ((v52 & 1) == 0) {
        goto LABEL_109;
      }
LABEL_142:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      BOOL v83 = v36[1];
      if (v83)
      {
        do
        {
          size_t v84 = (void **)v83;
          BOOL v83 = (void *)*v83;
        }
        while (v83);
      }
      else
      {
        do
        {
          size_t v84 = (void **)v36[2];
          BOOL v85 = *v84 == v36;
          uint64_t v36 = v84;
        }
        while (!v85);
      }
      uint64_t v36 = v84;
      if (v84 != v137) {
        continue;
      }
      break;
    }
LABEL_150:
    if (v131 == v130) {
      goto LABEL_190;
    }
    memset(__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(&v126, "context_transfer");
    if ((v129 & 0x80u) == 0) {
      size_t v86 = v129;
    }
    else {
      size_t v86 = *(void *)v128;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v145, v86 + 3);
    if (v146 >= 0) {
      uint64_t v87 = v145;
    }
    else {
      uint64_t v87 = *(unsigned char **)v145;
    }
    if (v86)
    {
      if ((v129 & 0x80u) == 0) {
        uint64_t v88 = &__p;
      }
      else {
        uint64_t v88 = __p;
      }
      memmove(v87, v88, v86);
    }
    *(_DWORD *)&v87[v86] = 7894111;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v120, (uint64_t)v133, (uint64_t)v134, 0xAAAAAAAAAAAAAAABLL * (((char *)v134 - (char *)v133) >> 3));
    memset(v119, 0, sizeof(v119));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v119, (uint64_t)v130, (uint64_t)v131, 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)v130) >> 3));
    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v126, (uint64_t)v145, (uint64_t)__str, v120, v121, v119);
    uint64_t v144 = (void **)v119;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v144);
    uint64_t v144 = (void **)&v120;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v144);
    if (v146 < 0) {
      operator delete(*(void **)v145);
    }
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v126.__r_.__value_.__l.__data_);
    }
    if (!lpsrc)
    {
      uint64_t v89 = 0;
LABEL_171:
      uint64_t v90 = 0;
      goto LABEL_172;
    }
    if (!v89) {
      goto LABEL_171;
    }
    uint64_t v90 = v124;
    if (v124) {
      atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_172:
    *(_DWORD *)uint64_t v145 = 0;
    Espresso::create_context((int *)v145, &v126);
    uint64_t v92 = *(void *)(a2 + 112);
    uint64_t v91 = *(void *)(a2 + 120);
    if (v91) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v93 = (std::__shared_weak_count *)v89[40];
    v89[39] = v92;
    v89[40] = v91;
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
    if (v108) {
      atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v94 = (std::__shared_weak_count *)v89[42];
    v89[41] = v107;
    v89[42] = v108;
    if (v94) {
      nitro::nitro_function::nitro_function(v94);
    }
    uint64_t v96 = *(void *)(a2 + 112);
    uint64_t v95 = *(void *)(a2 + 120);
    if (v95) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v95 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v97 = (std::__shared_weak_count *)v89[2];
    v89[1] = v96;
    v89[2] = v95;
    if (v97) {
      nitro::nitro_function::nitro_function(v97);
    }
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(void))(v89[39] + 8))(*(void *)(v89[39] + 8));
    if (v126.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v126.__r_.__value_.__l.__size_);
    }
    if (v90) {
      nitro::nitro_function::nitro_function(v90);
    }
    if (v124) {
      nitro::nitro_function::nitro_function(v124);
    }
LABEL_190:
    if ((char)v129 < 0) {
      operator delete(__p);
    }
    *(void *)std::string __str = &v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(void *)std::string __str = &v133;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v108) {
      nitro::nitro_function::nitro_function(v108);
    }
    std::__tree<int>::destroy(v137[0]);
    if (v136.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v136.__r_.__value_.__l.__size_);
    }
    unint64_t v98 = (uint64_t *)v34[1];
    if (v98)
    {
      do
      {
        uint64_t v99 = v98;
        unint64_t v98 = (uint64_t *)*v98;
      }
      while (v98);
    }
    else
    {
      do
      {
        uint64_t v99 = (uint64_t *)v34[2];
        BOOL v85 = *v99 == (void)v34;
        long long v34 = v99;
      }
      while (!v85);
    }
    long long v34 = v99;
    if (v99 != (uint64_t *)v143) {
      continue;
    }
    break;
  }
LABEL_202:
  *(unsigned char *)(a2 + 184) = 1;
  memset(&v136, 0, sizeof(v136));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v136, v138, (uint64_t)v139, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v139 - v138) >> 3));
  memset(__str, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__str, v111, v112, 0xAAAAAAAAAAAAAAABLL * ((v112 - v111) >> 3));
  Espresso::sequential_builder::add<Espresso::batchnorm_params>((uint64_t *)&v117, (uint64_t *)a2, a3, a4, a5, (uint64_t)v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_, (uint64_t *)__str);
  uint64_t v133 = (std::string *)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  uint64_t v133 = &v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  uint64_t v133 = (std::string *)&v138;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v143[0]);
  v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  if (!v117
  {
    *a1 = 0;
    a1[1] = 0;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v136);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v101 = v118;
  *a1 = v100;
  a1[1] = v101;
  if (v101)
  {
    atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v118) {
      nitro::nitro_function::nitro_function(v118);
    }
  }
}

void sub_192854BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (*(char *)(v60 - 217) < 0)
  {
    operator delete(*(void **)(v60 - 240));
    if ((v59 & 1) == 0)
    {
LABEL_6:
      if (a26) {
        nitro::nitro_function::nitro_function(a26);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v58);
  goto LABEL_6;
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 2;
  unsigned int v9 = (void *)*a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate(a1);
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    unint64_t v15 = a2;
    goto LABEL_10;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v9) >> 4;
  if (v16 < a4)
  {
    uint64_t v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(a2, v17, v9);
    uint64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    unint64_t v15 = v17;
LABEL_10:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v14, v15, a3, v13);
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(a2, a3, v9);
  for (uint64_t i = (void *)a1[1]; i != v18; i -= 2)
  {
    unint64_t v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void add_with_context_transfers_t<Espresso::generic_bias_grad_kernel,Espresso::bias_params>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  uint64_t v114 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v111, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v143[0] = 0;
  v143[1] = 0;
  uint64_t v142 = (uint64_t *)v143;
  unsigned int v141 = 0;
  uint64_t v10 = v114;
  uint64_t v109 = v115;
  if (v114 == v115)
  {
    uint64_t v33 = v114;
    goto LABEL_46;
  }
  unsigned int v11 = 0;
  do
  {
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v10;
      v136.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v12;
    }
    uint64_t v13 = *(void *)(a2 + 80);
    uint64_t v14 = *(void *)(v13 + 32);
    if (*(void *)(v13 + 40) != v14)
    {
      uint64_t v110 = v10;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(*(void *)(v14 + 16 * v15) + 64);
        uint64_t v18 = *(void *)(v16 + 8);
        uint64_t v17 = *(std::__shared_weak_count **)(v16 + 16);
        uint64_t v138 = v18;
        char v139 = v17;
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = *(void *)(a2 + 80);
        }
        *(void *)std::string __str = v15;
        int v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13 + 96, v15, __str);
        int v21 = (long long *)v19[3];
        unint64_t v20 = (long long *)v19[4];
        if (v21 != v20) {
          break;
        }
LABEL_37:
        if (v139) {
          nitro::nitro_function::nitro_function(v139);
        }
        ++v15;
        uint64_t v13 = *(void *)(a2 + 80);
        uint64_t v14 = *(void *)(v13 + 32);
        if (v15 >= (*(void *)(v13 + 40) - v14) >> 4)
        {
          unsigned int v11 = v141;
          uint64_t v10 = v110;
          goto LABEL_41;
        }
      }
      unint64_t v22 = v138;
      int v23 = v141;
      while (1)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v21, *((void *)v21 + 1));
        }
        else
        {
          long long v24 = *v21;
          *(void *)&__str[16] = *((void *)v21 + 2);
          *(_OWORD *)std::string __str = v24;
        }
        uint64_t v25 = __str[23];
        char v26 = __str[23];
        if (__str[23] >= 0) {
          uint64_t v27 = __str[23];
        }
        else {
          uint64_t v27 = *(void *)&__str[8];
        }
        std::string::size_type size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v136.__r_.__value_.__l.__size_;
        }
        if (v27 == size)
        {
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v29 = &v136;
          }
          else {
            long long v29 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((__str[23] & 0x80000000) != 0)
          {
            uint64_t v31 = *(void **)__str;
            if (memcmp(*(const void **)__str, v29, *(size_t *)&__str[8])) {
              goto LABEL_35;
            }
LABEL_31:
            if (v22 != *(void *)(a2 + 112))
            {
              size_t v32 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v142, v22, &v138);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v32 + 6, v23, &v141)+ 8) = 1;
              char v26 = __str[23];
            }
            goto LABEL_33;
          }
          if (!__str[23]) {
            goto LABEL_31;
          }
          long long v30 = __str;
          while (*v30 == v29->__r_.__value_.__s.__data_[0])
          {
            ++v30;
            long long v29 = (std::string *)((char *)v29 + 1);
            if (!--v25) {
              goto LABEL_31;
            }
          }
        }
LABEL_33:
        if (v26 < 0)
        {
          uint64_t v31 = *(void **)__str;
LABEL_35:
          operator delete(v31);
        }
        int v21 = (long long *)((char *)v21 + 24);
        if (v21 == v20) {
          goto LABEL_37;
        }
      }
    }
LABEL_41:
    unsigned int v141 = ++v11;
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    v10 += 24;
  }
  while (v10 != v109);
  uint64_t v33 = v114;
  uint64_t v10 = v115;
LABEL_46:
  uint64_t v138 = 0;
  char v139 = 0;
  uint64_t v140 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v138, v33, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v33) >> 3));
  long long v34 = v142;
  if (v142 == (uint64_t *)v143) {
    goto LABEL_202;
  }
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v136, v34 + 4);
    std::string::size_type v35 = v136.__r_.__value_.__l.__size_;
    std::string::size_type v107 = v136.__r_.__value_.__r.__words[0];
    if (v136.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v136.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v108 = (std::__shared_weak_count *)v35;
    uint64_t v133 = 0;
    unsigned int v134 = 0;
    unint64_t v135 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    unint64_t v132 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v36 = (void **)v136.__r_.__value_.__r.__words[2];
    if ((void **)v136.__r_.__value_.__r.__words[2] == v137) {
      goto LABEL_150;
    }
    while (2)
    {
      int v37 = *((_DWORD *)v36 + 7);
      uint64_t v38 = v114 + 24 * v37;
      if (*(char *)(v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
      }
      else
      {
        long long v39 = *(_OWORD *)v38;
        *(void *)&__str[16] = *(void *)(v38 + 16);
        *(_OWORD *)std::string __str = v39;
      }
      if (__str[23] >= 0) {
        int64_t v40 = __str[23];
      }
      else {
        int64_t v40 = *(void *)&__str[8];
      }
      if (__str[23] >= 0) {
        int64_t v41 = __str;
      }
      else {
        int64_t v41 = *(char **)__str;
      }
      if (v40 >= 4)
      {
        long long v42 = &v41[v40];
        int64_t v43 = v40;
        uint64_t v44 = v41;
        do
        {
          uint64_t v45 = (char *)memchr(v44, 99, v43 - 3);
          if (!v45) {
            break;
          }
          if (*(_DWORD *)v45 == 1601532003)
          {
            if (v45 != v42 && v45 == v41)
            {
              std::string::basic_string(&v126, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v145);
              goto LABEL_77;
            }
            break;
          }
          uint64_t v44 = v45 + 1;
          int64_t v43 = v42 - v44;
        }
        while (v42 - v44 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v126, v40 + 3);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v46 = &v126;
      }
      else {
        uint64_t v46 = (std::string *)v126.__r_.__value_.__r.__words[0];
      }
      if (v40)
      {
        if (__str[23] >= 0) {
          long long v47 = __str;
        }
        else {
          long long v47 = *(unsigned char **)__str;
        }
        memmove(v46, v47, v40);
      }
      *(_DWORD *)((char *)&v46->__r_.__value_.__l.__data_ + v40) = 7894111;
LABEL_77:
      uint64_t v48 = v138 + 24 * v37;
      if (*(char *)(v48 + 23) < 0) {
        operator delete(*(void **)v48);
      }
      long long v49 = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
      *(void *)(v48 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v126.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v48 = v49;
      uint64_t v50 = *(void *)(a2 + 80);
      if (*(void *)(v50 + 40) == *(void *)(v50 + 32))
      {
LABEL_109:
        uint64_t v65 = v114 + 24 * v37;
        size_t v66 = v134;
        if ((unint64_t)v134 >= v135)
        {
          long long v68 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v133, v65);
        }
        else
        {
          if (*(char *)(v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v134, *(const std::string::value_type **)v65, *(void *)(v65 + 8));
          }
          else
          {
            long long v67 = *(_OWORD *)v65;
            v134->__r_.__value_.__r.__words[2] = *(void *)(v65 + 16);
            *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
          }
          long long v68 = v66 + 1;
        }
        unsigned int v134 = v68;
        uint64_t v69 = v138 + 24 * v37;
        long long v70 = v131;
        if ((unint64_t)v131 >= v132)
        {
          uint64_t v72 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v130, v69);
        }
        else
        {
          if (*(char *)(v69 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v131, *(const std::string::value_type **)v69, *(void *)(v69 + 8));
          }
          else
          {
            long long v71 = *(_OWORD *)v69;
            v131->__r_.__value_.__r.__words[2] = *(void *)(v69 + 16);
            *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
          }
          uint64_t v72 = v70 + 1;
        }
        uint64_t v131 = v72;
        if ((v129 & 0x80u) == 0) {
          size_t v73 = v129;
        }
        else {
          size_t v73 = *(void *)v128;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v126, v73 + 1);
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v74 = &v126;
        }
        else {
          uint64_t v74 = (std::string *)v126.__r_.__value_.__r.__words[0];
        }
        if (v73)
        {
          if ((v129 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v74, p_p, v73);
        }
        *(_WORD *)((char *)&v74->__r_.__value_.__l.__data_ + v73) = 95;
        uint64_t v76 = v114 + 24 * v37;
        int v77 = *(char *)(v76 + 23);
        if (v77 >= 0) {
          size_t v78 = (const std::string::value_type *)(v114 + 24 * v37);
        }
        else {
          size_t v78 = *(const std::string::value_type **)v76;
        }
        if (v77 >= 0) {
          std::string::size_type v79 = *(unsigned __int8 *)(v76 + 23);
        }
        else {
          std::string::size_type v79 = *(void *)(v76 + 8);
        }
        unsigned __int8 v80 = std::string::append(&v126, v78, v79);
        std::string v81 = (void *)v80->__r_.__value_.__r.__words[0];
        *(void *)uint64_t v145 = v80->__r_.__value_.__l.__size_;
        *(void *)&v145[7] = *(std::string::size_type *)((char *)&v80->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v82 = HIBYTE(v80->__r_.__value_.__r.__words[2]);
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        if ((char)v129 < 0) {
          operator delete(__p);
        }
        std::string __p = v81;
        *(void *)unint64_t v128 = *(void *)v145;
        *(void *)&v128[7] = *(void *)&v145[7];
        unsigned __int8 v129 = v82;
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v126.__r_.__value_.__l.__data_);
        }
        goto LABEL_142;
      }
      unint64_t v51 = 0;
      char v52 = 0;
      while (2)
      {
        v126.__r_.__value_.__r.__words[0] = v51;
        uint64_t v53 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v50 + 96, v51, &v126);
        char v55 = (long long *)v53[3];
        long long v54 = (long long *)v53[4];
        while (2)
        {
          if (v55 != v54)
          {
            if (*((char *)v55 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)v55, *((void *)v55 + 1));
            }
            else
            {
              long long v56 = *v55;
              v126.__r_.__value_.__r.__words[2] = *((void *)v55 + 2);
              *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v56;
            }
            int v57 = (unsigned __int8 **)(v138 + 24 * v37);
            if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v58 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v58 = v126.__r_.__value_.__l.__size_;
            }
            int v59 = (unsigned __int8 *)*((unsigned __int8 *)v57 + 23);
            int v60 = (char)v59;
            if ((char)v59 < 0) {
              int v59 = v57[1];
            }
            if ((unsigned __int8 *)v58 != v59) {
              goto LABEL_101;
            }
            if (v60 >= 0) {
              uint64_t v61 = (unsigned __int8 *)(v138 + 24 * v37);
            }
            else {
              uint64_t v61 = *v57;
            }
            if ((*((unsigned char *)&v126.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              uint64_t v64 = (void *)v126.__r_.__value_.__r.__words[0];
              v52 |= memcmp(v126.__r_.__value_.__l.__data_, v61, v126.__r_.__value_.__l.__size_) == 0;
LABEL_104:
              operator delete(v64);
            }
            else if (*((unsigned char *)&v126.__r_.__value_.__s + 23))
            {
              char v62 = &v126;
              uint64_t v63 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
              while (v62->__r_.__value_.__s.__data_[0] == *v61)
              {
                char v62 = (std::string *)((char *)v62 + 1);
                ++v61;
                if (!--v63)
                {
                  char v52 = 1;
                  break;
                }
              }
LABEL_101:
              if ((*((unsigned char *)&v126.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                uint64_t v64 = (void *)v126.__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
            }
            else
            {
              char v52 = 1;
            }
            char v55 = (long long *)((char *)v55 + 24);
            continue;
          }
          break;
        }
        ++v51;
        uint64_t v50 = *(void *)(a2 + 80);
        if (v51 < (uint64_t)(*(void *)(v50 + 40) - *(void *)(v50 + 32)) >> 4) {
          continue;
        }
        break;
      }
      if ((v52 & 1) == 0) {
        goto LABEL_109;
      }
LABEL_142:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      BOOL v83 = v36[1];
      if (v83)
      {
        do
        {
          size_t v84 = (void **)v83;
          BOOL v83 = (void *)*v83;
        }
        while (v83);
      }
      else
      {
        do
        {
          size_t v84 = (void **)v36[2];
          BOOL v85 = *v84 == v36;
          uint64_t v36 = v84;
        }
        while (!v85);
      }
      uint64_t v36 = v84;
      if (v84 != v137) {
        continue;
      }
      break;
    }
LABEL_150:
    if (v131 == v130) {
      goto LABEL_190;
    }
    memset(__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(&v126, "context_transfer");
    if ((v129 & 0x80u) == 0) {
      size_t v86 = v129;
    }
    else {
      size_t v86 = *(void *)v128;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v145, v86 + 3);
    if (v146 >= 0) {
      uint64_t v87 = v145;
    }
    else {
      uint64_t v87 = *(unsigned char **)v145;
    }
    if (v86)
    {
      if ((v129 & 0x80u) == 0) {
        uint64_t v88 = &__p;
      }
      else {
        uint64_t v88 = __p;
      }
      memmove(v87, v88, v86);
    }
    *(_DWORD *)&v87[v86] = 7894111;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v120, (uint64_t)v133, (uint64_t)v134, 0xAAAAAAAAAAAAAAABLL * (((char *)v134 - (char *)v133) >> 3));
    memset(v119, 0, sizeof(v119));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v119, (uint64_t)v130, (uint64_t)v131, 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)v130) >> 3));
    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v126, (uint64_t)v145, (uint64_t)__str, v120, v121, v119);
    uint64_t v144 = (void **)v119;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v144);
    uint64_t v144 = (void **)&v120;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v144);
    if (v146 < 0) {
      operator delete(*(void **)v145);
    }
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v126.__r_.__value_.__l.__data_);
    }
    if (!lpsrc)
    {
      uint64_t v89 = 0;
LABEL_171:
      uint64_t v90 = 0;
      goto LABEL_172;
    }
    if (!v89) {
      goto LABEL_171;
    }
    uint64_t v90 = v124;
    if (v124) {
      atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_172:
    *(_DWORD *)uint64_t v145 = 0;
    Espresso::create_context((int *)v145, &v126);
    uint64_t v92 = *(void *)(a2 + 112);
    uint64_t v91 = *(void *)(a2 + 120);
    if (v91) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v93 = (std::__shared_weak_count *)v89[40];
    v89[39] = v92;
    v89[40] = v91;
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
    if (v108) {
      atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v94 = (std::__shared_weak_count *)v89[42];
    v89[41] = v107;
    v89[42] = v108;
    if (v94) {
      nitro::nitro_function::nitro_function(v94);
    }
    uint64_t v96 = *(void *)(a2 + 112);
    uint64_t v95 = *(void *)(a2 + 120);
    if (v95) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v95 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v97 = (std::__shared_weak_count *)v89[2];
    v89[1] = v96;
    v89[2] = v95;
    if (v97) {
      nitro::nitro_function::nitro_function(v97);
    }
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(void))(v89[39] + 8))(*(void *)(v89[39] + 8));
    if (v126.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v126.__r_.__value_.__l.__size_);
    }
    if (v90) {
      nitro::nitro_function::nitro_function(v90);
    }
    if (v124) {
      nitro::nitro_function::nitro_function(v124);
    }
LABEL_190:
    if ((char)v129 < 0) {
      operator delete(__p);
    }
    *(void *)std::string __str = &v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(void *)std::string __str = &v133;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v108) {
      nitro::nitro_function::nitro_function(v108);
    }
    std::__tree<int>::destroy(v137[0]);
    if (v136.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v136.__r_.__value_.__l.__size_);
    }
    unint64_t v98 = (uint64_t *)v34[1];
    if (v98)
    {
      do
      {
        uint64_t v99 = v98;
        unint64_t v98 = (uint64_t *)*v98;
      }
      while (v98);
    }
    else
    {
      do
      {
        uint64_t v99 = (uint64_t *)v34[2];
        BOOL v85 = *v99 == (void)v34;
        long long v34 = v99;
      }
      while (!v85);
    }
    long long v34 = v99;
    if (v99 != (uint64_t *)v143) {
      continue;
    }
    break;
  }
LABEL_202:
  *(unsigned char *)(a2 + 184) = 1;
  memset(&v136, 0, sizeof(v136));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v136, v138, (uint64_t)v139, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v139 - v138) >> 3));
  memset(__str, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__str, v111, v112, 0xAAAAAAAAAAAAAAABLL * ((v112 - v111) >> 3));
  Espresso::sequential_builder::add<Espresso::bias_params>((uint64_t *)&v117, (uint64_t *)a2, a3, a4, a5, (uint64_t)v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_, (uint64_t *)__str);
  uint64_t v133 = (std::string *)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  uint64_t v133 = &v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  uint64_t v133 = (std::string *)&v138;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v143[0]);
  v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  if (!v117
  {
    *a1 = 0;
    a1[1] = 0;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v136);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v101 = v118;
  *a1 = v100;
  a1[1] = v101;
  if (v101)
  {
    atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v118) {
      nitro::nitro_function::nitro_function(v118);
    }
  }
}

void sub_192855BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (*(char *)(v60 - 217) < 0)
  {
    operator delete(*(void **)(v60 - 240));
    if ((v59 & 1) == 0)
    {
LABEL_6:
      if (a26) {
        nitro::nitro_function::nitro_function(a26);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v58);
  goto LABEL_6;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long,int &,unsigned long>(uint64_t a1, int a2, uint64_t a3)
{
}

void add_with_context_transfers_t<Espresso::pool_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  v136[0] = 0;
  v136[1] = 0;
  unint64_t v135 = (uint64_t *)v136;
  unsigned int v134 = 0;
  uint64_t v8 = *a6;
  uint64_t v105 = a6[1];
  if (*a6 == v105)
  {
    uint64_t v31 = *a6;
    goto LABEL_46;
  }
  unsigned int v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v8;
      v129.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v11 = *(void *)(a2 + 80);
    uint64_t v12 = *(void *)(v11 + 32);
    if (*(void *)(v11 + 40) != v12)
    {
      uint64_t v106 = v8;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)(*(void *)(v12 + 16 * v13) + 64);
        uint64_t v16 = *(void *)(v14 + 8);
        unint64_t v15 = *(std::__shared_weak_count **)(v14 + 16);
        uint64_t v131 = v16;
        unint64_t v132 = v15;
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = *(void *)(a2 + 80);
        }
        *(void *)std::string __str = v13;
        uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        int v19 = (long long *)v17[3];
        uint64_t v18 = (long long *)v17[4];
        if (v19 != v18) {
          break;
        }
LABEL_37:
        if (v132) {
          nitro::nitro_function::nitro_function(v132);
        }
        ++v13;
        uint64_t v11 = *(void *)(a2 + 80);
        uint64_t v12 = *(void *)(v11 + 32);
        if (v13 >= (*(void *)(v11 + 40) - v12) >> 4)
        {
          unsigned int v9 = v134;
          uint64_t v8 = v106;
          goto LABEL_41;
        }
      }
      unint64_t v20 = v131;
      int v21 = v134;
      while (1)
      {
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v19, *((void *)v19 + 1));
        }
        else
        {
          long long v22 = *v19;
          *(void *)&__str[16] = *((void *)v19 + 2);
          *(_OWORD *)std::string __str = v22;
        }
        uint64_t v23 = __str[23];
        char v24 = __str[23];
        if (__str[23] >= 0) {
          uint64_t v25 = __str[23];
        }
        else {
          uint64_t v25 = *(void *)&__str[8];
        }
        std::string::size_type size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v129.__r_.__value_.__l.__size_;
        }
        if (v25 == size)
        {
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &v129;
          }
          else {
            uint64_t v27 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((__str[23] & 0x80000000) != 0)
          {
            long long v29 = *(void **)__str;
            if (memcmp(*(const void **)__str, v27, *(size_t *)&__str[8])) {
              goto LABEL_35;
            }
LABEL_31:
            if (v20 != *(void *)(a2 + 112))
            {
              long long v30 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v135, v20, &v131);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v30 + 6, v21, &v134)+ 8) = 1;
              char v24 = __str[23];
            }
            goto LABEL_33;
          }
          if (!__str[23]) {
            goto LABEL_31;
          }
          BOOL v28 = __str;
          while (*v28 == v27->__r_.__value_.__s.__data_[0])
          {
            ++v28;
            uint64_t v27 = (std::string *)((char *)v27 + 1);
            if (!--v23) {
              goto LABEL_31;
            }
          }
        }
LABEL_33:
        if (v24 < 0)
        {
          long long v29 = *(void **)__str;
LABEL_35:
          operator delete(v29);
        }
        int v19 = (long long *)((char *)v19 + 24);
        if (v19 == v18) {
          goto LABEL_37;
        }
      }
    }
LABEL_41:
    unsigned int v134 = ++v9;
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v8 += 24;
  }
  while (v8 != v105);
  uint64_t v31 = *a6;
  uint64_t v8 = a6[1];
LABEL_46:
  uint64_t v131 = 0;
  unint64_t v132 = 0;
  uint64_t v133 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v31, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v31) >> 3));
  size_t v32 = v135;
  if (v135 == (uint64_t *)v136) {
    goto LABEL_202;
  }
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v129, v32 + 4);
    std::string::size_type v33 = v129.__r_.__value_.__l.__size_;
    std::string::size_type v103 = v129.__r_.__value_.__r.__words[0];
    if (v129.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v129.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v104 = (std::__shared_weak_count *)v33;
    std::string v126 = 0;
    unsigned int v127 = 0;
    unint64_t v128 = 0;
    long long v123 = 0;
    uint64_t v124 = 0;
    unint64_t v125 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    long long v34 = (void **)v129.__r_.__value_.__r.__words[2];
    if ((void **)v129.__r_.__value_.__r.__words[2] == v130) {
      goto LABEL_150;
    }
    while (2)
    {
      int v35 = *((_DWORD *)v34 + 7);
      uint64_t v36 = *a6 + 24 * v35;
      if (*(char *)(v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v36, *(void *)(v36 + 8));
      }
      else
      {
        long long v37 = *(_OWORD *)v36;
        *(void *)&__str[16] = *(void *)(v36 + 16);
        *(_OWORD *)std::string __str = v37;
      }
      if (__str[23] >= 0) {
        int64_t v38 = __str[23];
      }
      else {
        int64_t v38 = *(void *)&__str[8];
      }
      if (__str[23] >= 0) {
        long long v39 = __str;
      }
      else {
        long long v39 = *(char **)__str;
      }
      if (v38 >= 4)
      {
        int64_t v40 = &v39[v38];
        int64_t v41 = v38;
        long long v42 = v39;
        do
        {
          int64_t v43 = (char *)memchr(v42, 99, v41 - 3);
          if (!v43) {
            break;
          }
          if (*(_DWORD *)v43 == 1601532003)
          {
            if (v43 != v40 && v43 == v39)
            {
              std::string::basic_string(&v119, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v138);
              goto LABEL_77;
            }
            break;
          }
          long long v42 = v43 + 1;
          int64_t v41 = v40 - v42;
        }
        while (v40 - v42 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v119, v38 + 3);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v119;
      }
      else {
        uint64_t v44 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      if (v38)
      {
        if (__str[23] >= 0) {
          uint64_t v45 = __str;
        }
        else {
          uint64_t v45 = *(unsigned char **)__str;
        }
        memmove(v44, v45, v38);
      }
      *(_DWORD *)((char *)&v44->__r_.__value_.__l.__data_ + v38) = 7894111;
LABEL_77:
      uint64_t v46 = v131 + 24 * v35;
      if (*(char *)(v46 + 23) < 0) {
        operator delete(*(void **)v46);
      }
      long long v47 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      *(void *)(v46 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v119.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v46 = v47;
      uint64_t v48 = *(void *)(a2 + 80);
      if (*(void *)(v48 + 40) == *(void *)(v48 + 32))
      {
LABEL_109:
        uint64_t v63 = *a6 + 24 * v35;
        uint64_t v64 = v127;
        if ((unint64_t)v127 >= v128)
        {
          size_t v66 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v126, v63);
        }
        else
        {
          if (*(char *)(v63 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
          }
          else
          {
            long long v65 = *(_OWORD *)v63;
            v127->__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
            *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
          }
          size_t v66 = v64 + 1;
        }
        unsigned int v127 = v66;
        uint64_t v67 = v131 + 24 * v35;
        long long v68 = v124;
        if ((unint64_t)v124 >= v125)
        {
          long long v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v123, v67);
        }
        else
        {
          if (*(char *)(v67 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v124, *(const std::string::value_type **)v67, *(void *)(v67 + 8));
          }
          else
          {
            long long v69 = *(_OWORD *)v67;
            v124->__r_.__value_.__r.__words[2] = *(void *)(v67 + 16);
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
          }
          long long v70 = v68 + 1;
        }
        uint64_t v124 = v70;
        if ((v122 & 0x80u) == 0) {
          size_t v71 = v122;
        }
        else {
          size_t v71 = *(void *)v121;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v119, v71 + 1);
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v72 = &v119;
        }
        else {
          uint64_t v72 = (std::string *)v119.__r_.__value_.__r.__words[0];
        }
        if (v71)
        {
          if ((v122 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v72, p_p, v71);
        }
        *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v71) = 95;
        uint64_t v74 = *a6 + 24 * v35;
        int v75 = *(char *)(v74 + 23);
        if (v75 >= 0) {
          uint64_t v76 = (const std::string::value_type *)(*a6 + 24 * v35);
        }
        else {
          uint64_t v76 = *(const std::string::value_type **)v74;
        }
        if (v75 >= 0) {
          std::string::size_type v77 = *(unsigned __int8 *)(v74 + 23);
        }
        else {
          std::string::size_type v77 = *(void *)(v74 + 8);
        }
        size_t v78 = std::string::append(&v119, v76, v77);
        std::string::size_type v79 = (void *)v78->__r_.__value_.__r.__words[0];
        *(void *)uint64_t v138 = v78->__r_.__value_.__l.__size_;
        *(void *)&v138[7] = *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v80 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        if ((char)v122 < 0) {
          operator delete(__p);
        }
        std::string __p = v79;
        *(void *)uint64_t v121 = *(void *)v138;
        *(void *)&v121[7] = *(void *)&v138[7];
        unsigned __int8 v122 = v80;
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        goto LABEL_142;
      }
      unint64_t v49 = 0;
      char v50 = 0;
      while (2)
      {
        v119.__r_.__value_.__r.__words[0] = v49;
        unint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v48 + 96, v49, &v119);
        char v52 = (long long *)v51[3];
        uint64_t v53 = (long long *)v51[4];
        while (2)
        {
          if (v52 != v53)
          {
            if (*((char *)v52 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v52, *((void *)v52 + 1));
            }
            else
            {
              long long v54 = *v52;
              v119.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v54;
            }
            char v55 = (unsigned __int8 **)(v131 + 24 * v35);
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v56 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v56 = v119.__r_.__value_.__l.__size_;
            }
            int v57 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
            int v58 = (char)v57;
            if ((char)v57 < 0) {
              int v57 = v55[1];
            }
            if ((unsigned __int8 *)v56 != v57) {
              goto LABEL_101;
            }
            if (v58 >= 0) {
              int v59 = (unsigned __int8 *)(v131 + 24 * v35);
            }
            else {
              int v59 = *v55;
            }
            if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              char v62 = (void *)v119.__r_.__value_.__r.__words[0];
              v50 |= memcmp(v119.__r_.__value_.__l.__data_, v59, v119.__r_.__value_.__l.__size_) == 0;
LABEL_104:
              operator delete(v62);
            }
            else if (*((unsigned char *)&v119.__r_.__value_.__s + 23))
            {
              uint64_t v60 = &v119;
              uint64_t v61 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              while (v60->__r_.__value_.__s.__data_[0] == *v59)
              {
                uint64_t v60 = (std::string *)((char *)v60 + 1);
                ++v59;
                if (!--v61)
                {
                  char v50 = 1;
                  break;
                }
              }
LABEL_101:
              if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                char v62 = (void *)v119.__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
            }
            else
            {
              char v50 = 1;
            }
            char v52 = (long long *)((char *)v52 + 24);
            continue;
          }
          break;
        }
        ++v49;
        uint64_t v48 = *(void *)(a2 + 80);
        if (v49 < (uint64_t)(*(void *)(v48 + 40) - *(void *)(v48 + 32)) >> 4) {
          continue;
        }
        break;
      }
      if ((v50 & 1) == 0) {
        goto LABEL_109;
      }
LABEL_142:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      std::string v81 = v34[1];
      if (v81)
      {
        do
        {
          unsigned __int8 v82 = (void **)v81;
          std::string v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          unsigned __int8 v82 = (void **)v34[2];
          BOOL v83 = *v82 == v34;
          long long v34 = v82;
        }
        while (!v83);
      }
      long long v34 = v82;
      if (v82 != v130) {
        continue;
      }
      break;
    }
LABEL_150:
    if (v124 == v123) {
      goto LABEL_190;
    }
    memset(__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(&v119, "context_transfer");
    if ((v122 & 0x80u) == 0) {
      size_t v84 = v122;
    }
    else {
      size_t v84 = *(void *)v121;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v138, v84 + 3);
    if (v139 >= 0) {
      BOOL v85 = v138;
    }
    else {
      BOOL v85 = *(unsigned char **)v138;
    }
    if (v84)
    {
      if ((v122 & 0x80u) == 0) {
        size_t v86 = &__p;
      }
      else {
        size_t v86 = __p;
      }
      memmove(v85, v86, v84);
    }
    *(_DWORD *)&v85[v84] = 7894111;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v113, (uint64_t)v126, (uint64_t)v127, 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - v126) >> 3));
    memset(v112, 0, sizeof(v112));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v112, (uint64_t)v123, (uint64_t)v124, 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3));
    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v119, (uint64_t)v138, (uint64_t)__str, v113, v114, v112);
    unsigned int v137 = (void **)v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    unsigned int v137 = (void **)&v113;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    if (v139 < 0) {
      operator delete(*(void **)v138);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (!lpsrc)
    {
      uint64_t v87 = 0;
LABEL_171:
      uint64_t v88 = 0;
      goto LABEL_172;
    }
    if (!v87) {
      goto LABEL_171;
    }
    uint64_t v88 = v117;
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_172:
    *(_DWORD *)uint64_t v138 = 0;
    Espresso::create_context((int *)v138, &v119);
    uint64_t v90 = *(void *)(a2 + 112);
    uint64_t v89 = *(void *)(a2 + 120);
    if (v89) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v91 = (std::__shared_weak_count *)v87[40];
    v87[39] = v90;
    v87[40] = v89;
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v92 = (std::__shared_weak_count *)v87[42];
    v87[41] = v103;
    v87[42] = v104;
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
    uint64_t v94 = *(void *)(a2 + 112);
    uint64_t v93 = *(void *)(a2 + 120);
    if (v93) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v95 = (std::__shared_weak_count *)v87[2];
    v87[1] = v94;
    v87[2] = v93;
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(void))(v87[39] + 8))(*(void *)(v87[39] + 8));
    if (v119.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v119.__r_.__value_.__l.__size_);
    }
    if (v88) {
      nitro::nitro_function::nitro_function(v88);
    }
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
LABEL_190:
    if ((char)v122 < 0) {
      operator delete(__p);
    }
    *(void *)std::string __str = &v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(void *)std::string __str = &v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
    std::__tree<int>::destroy(v130[0]);
    if (v129.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v129.__r_.__value_.__l.__size_);
    }
    uint64_t v96 = (uint64_t *)v32[1];
    if (v96)
    {
      do
      {
        uint64_t v97 = v96;
        uint64_t v96 = (uint64_t *)*v96;
      }
      while (v96);
    }
    else
    {
      do
      {
        uint64_t v97 = (uint64_t *)v32[2];
        BOOL v83 = *v97 == (void)v32;
        size_t v32 = v97;
      }
      while (!v83);
    }
    size_t v32 = v97;
    if (v97 != (uint64_t *)v136) {
      continue;
    }
    break;
  }
LABEL_202:
  *(unsigned char *)(a2 + 184) = 1;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v109, v131, (uint64_t)v132, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 3));
  memset(v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v108, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::pool_params>(a1, (uint64_t *)a2, a3, a4, a5, v109, v110, v108);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v136[0]);
}

void sub_192856990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  *(void *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(void **)(v59 - 152));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        return (uint64_t *)v7;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unsigned int v9 = (uint64_t *)operator new(0x48uLL);
    long long v10 = v9;
    uint64_t v11 = a3[1];
    v9[4] = *a3;
    v9[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    v9[8] = 0;
    v9[7] = 0;
    v9[6] = (uint64_t)(v9 + 7);
    uint64_t *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    uint64_t *v6 = v9;
    uint64_t v12 = (uint64_t *)**a1;
    unint64_t v13 = v9;
    if (v12)
    {
      *a1 = v12;
      unint64_t v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void *std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[3] = 0;
  uint64_t v4 = (uint64_t **)(a1 + 3);
  a1[2] = a1 + 3;
  uint64_t v5 = (uint64_t ***)(a1 + 2);
  a1[4] = 0;
  long long v6 = (void *)a2[2];
  uint64_t v7 = a2 + 3;
  if (v6 != a2 + 3)
  {
    do
    {
      unint64_t v8 = *v4;
      unsigned int v9 = a1 + 3;
      if (*v5 == v4) {
        goto LABEL_10;
      }
      long long v10 = *v4;
      uint64_t v11 = a1 + 3;
      if (v8)
      {
        do
        {
          unsigned int v9 = v10;
          long long v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          unsigned int v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      int v13 = *((_DWORD *)v6 + 7);
      if (*((_DWORD *)v9 + 7) < v13)
      {
LABEL_10:
        if (v8) {
          uint64_t v14 = (uint64_t **)v9;
        }
        else {
          uint64_t v14 = (uint64_t **)(a1 + 3);
        }
        if (v8) {
          unint64_t v15 = (uint64_t **)(v9 + 1);
        }
        else {
          unint64_t v15 = (uint64_t **)(a1 + 3);
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)(a1 + 3);
        unint64_t v15 = (uint64_t **)(a1 + 3);
        if (v8)
        {
          unint64_t v15 = (uint64_t **)(a1 + 3);
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v8;
              int v19 = *((_DWORD *)v8 + 7);
              if (v13 >= v19) {
                break;
              }
              unint64_t v8 = *v14;
              unint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_17;
              }
            }
            if (v19 >= v13) {
              break;
            }
            unint64_t v15 = v14 + 1;
            unint64_t v8 = v14[1];
            if (!v8) {
              goto LABEL_17;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_17:
        uint64_t v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)((char *)v6 + 28);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1 + 2, (uint64_t)v14, v15, v16);
      }
      uint64_t v17 = (void *)v6[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v6[2];
          BOOL v12 = *v18 == (void)v6;
          long long v6 = v18;
        }
        while (!v12);
      }
      long long v6 = v18;
    }
    while (v18 != v7);
  }
  return a1;
}

void sub_192856DFC(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(*(void **)(v1 + 24));
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void add_with_context_transfers_t<Espresso::l2_norm_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  v136[0] = 0;
  v136[1] = 0;
  unint64_t v135 = (uint64_t *)v136;
  unsigned int v134 = 0;
  uint64_t v8 = *a6;
  uint64_t v105 = a6[1];
  if (*a6 == v105)
  {
    uint64_t v31 = *a6;
    goto LABEL_46;
  }
  unsigned int v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v8;
      v129.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v11 = *(void *)(a2 + 80);
    uint64_t v12 = *(void *)(v11 + 32);
    if (*(void *)(v11 + 40) != v12)
    {
      uint64_t v106 = v8;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)(*(void *)(v12 + 16 * v13) + 64);
        uint64_t v16 = *(void *)(v14 + 8);
        unint64_t v15 = *(std::__shared_weak_count **)(v14 + 16);
        uint64_t v131 = v16;
        unint64_t v132 = v15;
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = *(void *)(a2 + 80);
        }
        *(void *)std::string __str = v13;
        uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        int v19 = (long long *)v17[3];
        uint64_t v18 = (long long *)v17[4];
        if (v19 != v18) {
          break;
        }
LABEL_37:
        if (v132) {
          nitro::nitro_function::nitro_function(v132);
        }
        ++v13;
        uint64_t v11 = *(void *)(a2 + 80);
        uint64_t v12 = *(void *)(v11 + 32);
        if (v13 >= (*(void *)(v11 + 40) - v12) >> 4)
        {
          unsigned int v9 = v134;
          uint64_t v8 = v106;
          goto LABEL_41;
        }
      }
      unint64_t v20 = v131;
      int v21 = v134;
      while (1)
      {
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v19, *((void *)v19 + 1));
        }
        else
        {
          long long v22 = *v19;
          *(void *)&__str[16] = *((void *)v19 + 2);
          *(_OWORD *)std::string __str = v22;
        }
        uint64_t v23 = __str[23];
        char v24 = __str[23];
        if (__str[23] >= 0) {
          uint64_t v25 = __str[23];
        }
        else {
          uint64_t v25 = *(void *)&__str[8];
        }
        std::string::size_type size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v129.__r_.__value_.__l.__size_;
        }
        if (v25 == size)
        {
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &v129;
          }
          else {
            uint64_t v27 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((__str[23] & 0x80000000) != 0)
          {
            long long v29 = *(void **)__str;
            if (memcmp(*(const void **)__str, v27, *(size_t *)&__str[8])) {
              goto LABEL_35;
            }
LABEL_31:
            if (v20 != *(void *)(a2 + 112))
            {
              long long v30 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v135, v20, &v131);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v30 + 6, v21, &v134)+ 8) = 1;
              char v24 = __str[23];
            }
            goto LABEL_33;
          }
          if (!__str[23]) {
            goto LABEL_31;
          }
          BOOL v28 = __str;
          while (*v28 == v27->__r_.__value_.__s.__data_[0])
          {
            ++v28;
            uint64_t v27 = (std::string *)((char *)v27 + 1);
            if (!--v23) {
              goto LABEL_31;
            }
          }
        }
LABEL_33:
        if (v24 < 0)
        {
          long long v29 = *(void **)__str;
LABEL_35:
          operator delete(v29);
        }
        int v19 = (long long *)((char *)v19 + 24);
        if (v19 == v18) {
          goto LABEL_37;
        }
      }
    }
LABEL_41:
    unsigned int v134 = ++v9;
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v8 += 24;
  }
  while (v8 != v105);
  uint64_t v31 = *a6;
  uint64_t v8 = a6[1];
LABEL_46:
  uint64_t v131 = 0;
  unint64_t v132 = 0;
  uint64_t v133 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v31, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v31) >> 3));
  size_t v32 = v135;
  if (v135 == (uint64_t *)v136) {
    goto LABEL_202;
  }
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v129, v32 + 4);
    std::string::size_type v33 = v129.__r_.__value_.__l.__size_;
    std::string::size_type v103 = v129.__r_.__value_.__r.__words[0];
    if (v129.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v129.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v104 = (std::__shared_weak_count *)v33;
    std::string v126 = 0;
    unsigned int v127 = 0;
    unint64_t v128 = 0;
    long long v123 = 0;
    uint64_t v124 = 0;
    unint64_t v125 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    long long v34 = (void **)v129.__r_.__value_.__r.__words[2];
    if ((void **)v129.__r_.__value_.__r.__words[2] == v130) {
      goto LABEL_150;
    }
    while (2)
    {
      int v35 = *((_DWORD *)v34 + 7);
      uint64_t v36 = *a6 + 24 * v35;
      if (*(char *)(v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v36, *(void *)(v36 + 8));
      }
      else
      {
        long long v37 = *(_OWORD *)v36;
        *(void *)&__str[16] = *(void *)(v36 + 16);
        *(_OWORD *)std::string __str = v37;
      }
      if (__str[23] >= 0) {
        int64_t v38 = __str[23];
      }
      else {
        int64_t v38 = *(void *)&__str[8];
      }
      if (__str[23] >= 0) {
        long long v39 = __str;
      }
      else {
        long long v39 = *(char **)__str;
      }
      if (v38 >= 4)
      {
        int64_t v40 = &v39[v38];
        int64_t v41 = v38;
        long long v42 = v39;
        do
        {
          int64_t v43 = (char *)memchr(v42, 99, v41 - 3);
          if (!v43) {
            break;
          }
          if (*(_DWORD *)v43 == 1601532003)
          {
            if (v43 != v40 && v43 == v39)
            {
              std::string::basic_string(&v119, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v138);
              goto LABEL_77;
            }
            break;
          }
          long long v42 = v43 + 1;
          int64_t v41 = v40 - v42;
        }
        while (v40 - v42 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v119, v38 + 3);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v119;
      }
      else {
        uint64_t v44 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      if (v38)
      {
        if (__str[23] >= 0) {
          uint64_t v45 = __str;
        }
        else {
          uint64_t v45 = *(unsigned char **)__str;
        }
        memmove(v44, v45, v38);
      }
      *(_DWORD *)((char *)&v44->__r_.__value_.__l.__data_ + v38) = 7894111;
LABEL_77:
      uint64_t v46 = v131 + 24 * v35;
      if (*(char *)(v46 + 23) < 0) {
        operator delete(*(void **)v46);
      }
      long long v47 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      *(void *)(v46 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v119.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v46 = v47;
      uint64_t v48 = *(void *)(a2 + 80);
      if (*(void *)(v48 + 40) == *(void *)(v48 + 32))
      {
LABEL_109:
        uint64_t v63 = *a6 + 24 * v35;
        uint64_t v64 = v127;
        if ((unint64_t)v127 >= v128)
        {
          size_t v66 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v126, v63);
        }
        else
        {
          if (*(char *)(v63 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
          }
          else
          {
            long long v65 = *(_OWORD *)v63;
            v127->__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
            *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
          }
          size_t v66 = v64 + 1;
        }
        unsigned int v127 = v66;
        uint64_t v67 = v131 + 24 * v35;
        long long v68 = v124;
        if ((unint64_t)v124 >= v125)
        {
          long long v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v123, v67);
        }
        else
        {
          if (*(char *)(v67 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v124, *(const std::string::value_type **)v67, *(void *)(v67 + 8));
          }
          else
          {
            long long v69 = *(_OWORD *)v67;
            v124->__r_.__value_.__r.__words[2] = *(void *)(v67 + 16);
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
          }
          long long v70 = v68 + 1;
        }
        uint64_t v124 = v70;
        if ((v122 & 0x80u) == 0) {
          size_t v71 = v122;
        }
        else {
          size_t v71 = *(void *)v121;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v119, v71 + 1);
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v72 = &v119;
        }
        else {
          uint64_t v72 = (std::string *)v119.__r_.__value_.__r.__words[0];
        }
        if (v71)
        {
          if ((v122 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v72, p_p, v71);
        }
        *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v71) = 95;
        uint64_t v74 = *a6 + 24 * v35;
        int v75 = *(char *)(v74 + 23);
        if (v75 >= 0) {
          uint64_t v76 = (const std::string::value_type *)(*a6 + 24 * v35);
        }
        else {
          uint64_t v76 = *(const std::string::value_type **)v74;
        }
        if (v75 >= 0) {
          std::string::size_type v77 = *(unsigned __int8 *)(v74 + 23);
        }
        else {
          std::string::size_type v77 = *(void *)(v74 + 8);
        }
        size_t v78 = std::string::append(&v119, v76, v77);
        std::string::size_type v79 = (void *)v78->__r_.__value_.__r.__words[0];
        *(void *)uint64_t v138 = v78->__r_.__value_.__l.__size_;
        *(void *)&v138[7] = *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v80 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        if ((char)v122 < 0) {
          operator delete(__p);
        }
        std::string __p = v79;
        *(void *)uint64_t v121 = *(void *)v138;
        *(void *)&v121[7] = *(void *)&v138[7];
        unsigned __int8 v122 = v80;
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        goto LABEL_142;
      }
      unint64_t v49 = 0;
      char v50 = 0;
      while (2)
      {
        v119.__r_.__value_.__r.__words[0] = v49;
        unint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v48 + 96, v49, &v119);
        char v52 = (long long *)v51[3];
        uint64_t v53 = (long long *)v51[4];
        while (2)
        {
          if (v52 != v53)
          {
            if (*((char *)v52 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v52, *((void *)v52 + 1));
            }
            else
            {
              long long v54 = *v52;
              v119.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v54;
            }
            char v55 = (unsigned __int8 **)(v131 + 24 * v35);
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v56 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v56 = v119.__r_.__value_.__l.__size_;
            }
            int v57 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
            int v58 = (char)v57;
            if ((char)v57 < 0) {
              int v57 = v55[1];
            }
            if ((unsigned __int8 *)v56 != v57) {
              goto LABEL_101;
            }
            if (v58 >= 0) {
              uint64_t v59 = (unsigned __int8 *)(v131 + 24 * v35);
            }
            else {
              uint64_t v59 = *v55;
            }
            if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              char v62 = (void *)v119.__r_.__value_.__r.__words[0];
              v50 |= memcmp(v119.__r_.__value_.__l.__data_, v59, v119.__r_.__value_.__l.__size_) == 0;
LABEL_104:
              operator delete(v62);
            }
            else if (*((unsigned char *)&v119.__r_.__value_.__s + 23))
            {
              uint64_t v60 = &v119;
              uint64_t v61 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              while (v60->__r_.__value_.__s.__data_[0] == *v59)
              {
                uint64_t v60 = (std::string *)((char *)v60 + 1);
                ++v59;
                if (!--v61)
                {
                  char v50 = 1;
                  break;
                }
              }
LABEL_101:
              if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                char v62 = (void *)v119.__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
            }
            else
            {
              char v50 = 1;
            }
            char v52 = (long long *)((char *)v52 + 24);
            continue;
          }
          break;
        }
        ++v49;
        uint64_t v48 = *(void *)(a2 + 80);
        if (v49 < (uint64_t)(*(void *)(v48 + 40) - *(void *)(v48 + 32)) >> 4) {
          continue;
        }
        break;
      }
      if ((v50 & 1) == 0) {
        goto LABEL_109;
      }
LABEL_142:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      std::string v81 = v34[1];
      if (v81)
      {
        do
        {
          unsigned __int8 v82 = (void **)v81;
          std::string v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          unsigned __int8 v82 = (void **)v34[2];
          BOOL v83 = *v82 == v34;
          long long v34 = v82;
        }
        while (!v83);
      }
      long long v34 = v82;
      if (v82 != v130) {
        continue;
      }
      break;
    }
LABEL_150:
    if (v124 == v123) {
      goto LABEL_190;
    }
    memset(__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(&v119, "context_transfer");
    if ((v122 & 0x80u) == 0) {
      size_t v84 = v122;
    }
    else {
      size_t v84 = *(void *)v121;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v138, v84 + 3);
    if (v139 >= 0) {
      BOOL v85 = v138;
    }
    else {
      BOOL v85 = *(unsigned char **)v138;
    }
    if (v84)
    {
      if ((v122 & 0x80u) == 0) {
        size_t v86 = &__p;
      }
      else {
        size_t v86 = __p;
      }
      memmove(v85, v86, v84);
    }
    *(_DWORD *)&v85[v84] = 7894111;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v113, (uint64_t)v126, (uint64_t)v127, 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - v126) >> 3));
    memset(v112, 0, sizeof(v112));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v112, (uint64_t)v123, (uint64_t)v124, 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3));
    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v119, (uint64_t)v138, (uint64_t)__str, v113, v114, v112);
    unsigned int v137 = (void **)v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    unsigned int v137 = (void **)&v113;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    if (v139 < 0) {
      operator delete(*(void **)v138);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (!lpsrc)
    {
      uint64_t v87 = 0;
LABEL_171:
      uint64_t v88 = 0;
      goto LABEL_172;
    }
    if (!v87) {
      goto LABEL_171;
    }
    uint64_t v88 = v117;
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_172:
    *(_DWORD *)uint64_t v138 = 0;
    Espresso::create_context((int *)v138, &v119);
    uint64_t v90 = *(void *)(a2 + 112);
    uint64_t v89 = *(void *)(a2 + 120);
    if (v89) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v91 = (std::__shared_weak_count *)v87[40];
    v87[39] = v90;
    v87[40] = v89;
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v92 = (std::__shared_weak_count *)v87[42];
    v87[41] = v103;
    v87[42] = v104;
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
    uint64_t v94 = *(void *)(a2 + 112);
    uint64_t v93 = *(void *)(a2 + 120);
    if (v93) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v95 = (std::__shared_weak_count *)v87[2];
    v87[1] = v94;
    v87[2] = v93;
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(void))(v87[39] + 8))(*(void *)(v87[39] + 8));
    if (v119.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v119.__r_.__value_.__l.__size_);
    }
    if (v88) {
      nitro::nitro_function::nitro_function(v88);
    }
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
LABEL_190:
    if ((char)v122 < 0) {
      operator delete(__p);
    }
    *(void *)std::string __str = &v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(void *)std::string __str = &v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
    std::__tree<int>::destroy(v130[0]);
    if (v129.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v129.__r_.__value_.__l.__size_);
    }
    uint64_t v96 = (uint64_t *)v32[1];
    if (v96)
    {
      do
      {
        uint64_t v97 = v96;
        uint64_t v96 = (uint64_t *)*v96;
      }
      while (v96);
    }
    else
    {
      do
      {
        uint64_t v97 = (uint64_t *)v32[2];
        BOOL v83 = *v97 == (void)v32;
        size_t v32 = v97;
      }
      while (!v83);
    }
    size_t v32 = v97;
    if (v97 != (uint64_t *)v136) {
      continue;
    }
    break;
  }
LABEL_202:
  *(unsigned char *)(a2 + 184) = 1;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v109, v131, (uint64_t)v132, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 3));
  memset(v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v108, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::l2_norm_params>(a1, (uint64_t *)a2, a3, a4, a5, v109, v110, v108);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v136[0]);
}

void sub_1928579C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  *(void *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(void **)(v59 - 152));
  _Unwind_Resume(a1);
}

void *std::__list_imp<int>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        __n128 result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void Espresso::sequential_builder::add<Espresso::l2_norm_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192857DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>,0>(uint64_t a1)
{
  std::__tree<int>::destroy(*(void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::sequential_builder::add<Espresso::pool_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1928580A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void add_with_context_transfers_t<Espresso::inner_product_uniforms>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  v136[0] = 0;
  v136[1] = 0;
  unint64_t v135 = (uint64_t *)v136;
  unsigned int v134 = 0;
  uint64_t v8 = *a6;
  uint64_t v105 = a6[1];
  if (*a6 == v105)
  {
    uint64_t v31 = *a6;
    goto LABEL_46;
  }
  unsigned int v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v8;
      v129.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v11 = *(void *)(a2 + 80);
    uint64_t v12 = *(void *)(v11 + 32);
    if (*(void *)(v11 + 40) != v12)
    {
      uint64_t v106 = v8;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)(*(void *)(v12 + 16 * v13) + 64);
        uint64_t v16 = *(void *)(v14 + 8);
        unint64_t v15 = *(std::__shared_weak_count **)(v14 + 16);
        uint64_t v131 = v16;
        unint64_t v132 = v15;
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = *(void *)(a2 + 80);
        }
        *(void *)std::string __str = v13;
        uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        int v19 = (long long *)v17[3];
        uint64_t v18 = (long long *)v17[4];
        if (v19 != v18) {
          break;
        }
LABEL_37:
        if (v132) {
          nitro::nitro_function::nitro_function(v132);
        }
        ++v13;
        uint64_t v11 = *(void *)(a2 + 80);
        uint64_t v12 = *(void *)(v11 + 32);
        if (v13 >= (*(void *)(v11 + 40) - v12) >> 4)
        {
          unsigned int v9 = v134;
          uint64_t v8 = v106;
          goto LABEL_41;
        }
      }
      unint64_t v20 = v131;
      int v21 = v134;
      while (1)
      {
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v19, *((void *)v19 + 1));
        }
        else
        {
          long long v22 = *v19;
          *(void *)&__str[16] = *((void *)v19 + 2);
          *(_OWORD *)std::string __str = v22;
        }
        uint64_t v23 = __str[23];
        char v24 = __str[23];
        if (__str[23] >= 0) {
          uint64_t v25 = __str[23];
        }
        else {
          uint64_t v25 = *(void *)&__str[8];
        }
        std::string::size_type size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v129.__r_.__value_.__l.__size_;
        }
        if (v25 == size)
        {
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &v129;
          }
          else {
            uint64_t v27 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((__str[23] & 0x80000000) != 0)
          {
            long long v29 = *(void **)__str;
            if (memcmp(*(const void **)__str, v27, *(size_t *)&__str[8])) {
              goto LABEL_35;
            }
LABEL_31:
            if (v20 != *(void *)(a2 + 112))
            {
              long long v30 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v135, v20, &v131);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v30 + 6, v21, &v134)+ 8) = 1;
              char v24 = __str[23];
            }
            goto LABEL_33;
          }
          if (!__str[23]) {
            goto LABEL_31;
          }
          BOOL v28 = __str;
          while (*v28 == v27->__r_.__value_.__s.__data_[0])
          {
            ++v28;
            uint64_t v27 = (std::string *)((char *)v27 + 1);
            if (!--v23) {
              goto LABEL_31;
            }
          }
        }
LABEL_33:
        if (v24 < 0)
        {
          long long v29 = *(void **)__str;
LABEL_35:
          operator delete(v29);
        }
        int v19 = (long long *)((char *)v19 + 24);
        if (v19 == v18) {
          goto LABEL_37;
        }
      }
    }
LABEL_41:
    unsigned int v134 = ++v9;
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v8 += 24;
  }
  while (v8 != v105);
  uint64_t v31 = *a6;
  uint64_t v8 = a6[1];
LABEL_46:
  uint64_t v131 = 0;
  unint64_t v132 = 0;
  uint64_t v133 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v31, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v31) >> 3));
  size_t v32 = v135;
  if (v135 == (uint64_t *)v136) {
    goto LABEL_202;
  }
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v129, v32 + 4);
    std::string::size_type v33 = v129.__r_.__value_.__l.__size_;
    std::string::size_type v103 = v129.__r_.__value_.__r.__words[0];
    if (v129.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v129.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v104 = (std::__shared_weak_count *)v33;
    std::string v126 = 0;
    unsigned int v127 = 0;
    unint64_t v128 = 0;
    long long v123 = 0;
    uint64_t v124 = 0;
    unint64_t v125 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    long long v34 = (void **)v129.__r_.__value_.__r.__words[2];
    if ((void **)v129.__r_.__value_.__r.__words[2] == v130) {
      goto LABEL_150;
    }
    while (2)
    {
      int v35 = *((_DWORD *)v34 + 7);
      uint64_t v36 = *a6 + 24 * v35;
      if (*(char *)(v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v36, *(void *)(v36 + 8));
      }
      else
      {
        long long v37 = *(_OWORD *)v36;
        *(void *)&__str[16] = *(void *)(v36 + 16);
        *(_OWORD *)std::string __str = v37;
      }
      if (__str[23] >= 0) {
        int64_t v38 = __str[23];
      }
      else {
        int64_t v38 = *(void *)&__str[8];
      }
      if (__str[23] >= 0) {
        long long v39 = __str;
      }
      else {
        long long v39 = *(char **)__str;
      }
      if (v38 >= 4)
      {
        int64_t v40 = &v39[v38];
        int64_t v41 = v38;
        long long v42 = v39;
        do
        {
          int64_t v43 = (char *)memchr(v42, 99, v41 - 3);
          if (!v43) {
            break;
          }
          if (*(_DWORD *)v43 == 1601532003)
          {
            if (v43 != v40 && v43 == v39)
            {
              std::string::basic_string(&v119, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v138);
              goto LABEL_77;
            }
            break;
          }
          long long v42 = v43 + 1;
          int64_t v41 = v40 - v42;
        }
        while (v40 - v42 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v119, v38 + 3);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v119;
      }
      else {
        uint64_t v44 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      if (v38)
      {
        if (__str[23] >= 0) {
          uint64_t v45 = __str;
        }
        else {
          uint64_t v45 = *(unsigned char **)__str;
        }
        memmove(v44, v45, v38);
      }
      *(_DWORD *)((char *)&v44->__r_.__value_.__l.__data_ + v38) = 7894111;
LABEL_77:
      uint64_t v46 = v131 + 24 * v35;
      if (*(char *)(v46 + 23) < 0) {
        operator delete(*(void **)v46);
      }
      long long v47 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      *(void *)(v46 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v119.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v46 = v47;
      uint64_t v48 = *(void *)(a2 + 80);
      if (*(void *)(v48 + 40) == *(void *)(v48 + 32))
      {
LABEL_109:
        uint64_t v63 = *a6 + 24 * v35;
        uint64_t v64 = v127;
        if ((unint64_t)v127 >= v128)
        {
          size_t v66 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v126, v63);
        }
        else
        {
          if (*(char *)(v63 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
          }
          else
          {
            long long v65 = *(_OWORD *)v63;
            v127->__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
            *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
          }
          size_t v66 = v64 + 1;
        }
        unsigned int v127 = v66;
        uint64_t v67 = v131 + 24 * v35;
        long long v68 = v124;
        if ((unint64_t)v124 >= v125)
        {
          long long v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v123, v67);
        }
        else
        {
          if (*(char *)(v67 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v124, *(const std::string::value_type **)v67, *(void *)(v67 + 8));
          }
          else
          {
            long long v69 = *(_OWORD *)v67;
            v124->__r_.__value_.__r.__words[2] = *(void *)(v67 + 16);
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
          }
          long long v70 = v68 + 1;
        }
        uint64_t v124 = v70;
        if ((v122 & 0x80u) == 0) {
          size_t v71 = v122;
        }
        else {
          size_t v71 = *(void *)v121;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v119, v71 + 1);
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v72 = &v119;
        }
        else {
          uint64_t v72 = (std::string *)v119.__r_.__value_.__r.__words[0];
        }
        if (v71)
        {
          if ((v122 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v72, p_p, v71);
        }
        *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v71) = 95;
        uint64_t v74 = *a6 + 24 * v35;
        int v75 = *(char *)(v74 + 23);
        if (v75 >= 0) {
          uint64_t v76 = (const std::string::value_type *)(*a6 + 24 * v35);
        }
        else {
          uint64_t v76 = *(const std::string::value_type **)v74;
        }
        if (v75 >= 0) {
          std::string::size_type v77 = *(unsigned __int8 *)(v74 + 23);
        }
        else {
          std::string::size_type v77 = *(void *)(v74 + 8);
        }
        size_t v78 = std::string::append(&v119, v76, v77);
        std::string::size_type v79 = (void *)v78->__r_.__value_.__r.__words[0];
        *(void *)uint64_t v138 = v78->__r_.__value_.__l.__size_;
        *(void *)&v138[7] = *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v80 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        if ((char)v122 < 0) {
          operator delete(__p);
        }
        std::string __p = v79;
        *(void *)uint64_t v121 = *(void *)v138;
        *(void *)&v121[7] = *(void *)&v138[7];
        unsigned __int8 v122 = v80;
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        goto LABEL_142;
      }
      unint64_t v49 = 0;
      char v50 = 0;
      while (2)
      {
        v119.__r_.__value_.__r.__words[0] = v49;
        unint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v48 + 96, v49, &v119);
        char v52 = (long long *)v51[3];
        uint64_t v53 = (long long *)v51[4];
        while (2)
        {
          if (v52 != v53)
          {
            if (*((char *)v52 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v52, *((void *)v52 + 1));
            }
            else
            {
              long long v54 = *v52;
              v119.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v54;
            }
            char v55 = (unsigned __int8 **)(v131 + 24 * v35);
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v56 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v56 = v119.__r_.__value_.__l.__size_;
            }
            int v57 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
            int v58 = (char)v57;
            if ((char)v57 < 0) {
              int v57 = v55[1];
            }
            if ((unsigned __int8 *)v56 != v57) {
              goto LABEL_101;
            }
            if (v58 >= 0) {
              uint64_t v59 = (unsigned __int8 *)(v131 + 24 * v35);
            }
            else {
              uint64_t v59 = *v55;
            }
            if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              char v62 = (void *)v119.__r_.__value_.__r.__words[0];
              v50 |= memcmp(v119.__r_.__value_.__l.__data_, v59, v119.__r_.__value_.__l.__size_) == 0;
LABEL_104:
              operator delete(v62);
            }
            else if (*((unsigned char *)&v119.__r_.__value_.__s + 23))
            {
              uint64_t v60 = &v119;
              uint64_t v61 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              while (v60->__r_.__value_.__s.__data_[0] == *v59)
              {
                uint64_t v60 = (std::string *)((char *)v60 + 1);
                ++v59;
                if (!--v61)
                {
                  char v50 = 1;
                  break;
                }
              }
LABEL_101:
              if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                char v62 = (void *)v119.__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
            }
            else
            {
              char v50 = 1;
            }
            char v52 = (long long *)((char *)v52 + 24);
            continue;
          }
          break;
        }
        ++v49;
        uint64_t v48 = *(void *)(a2 + 80);
        if (v49 < (uint64_t)(*(void *)(v48 + 40) - *(void *)(v48 + 32)) >> 4) {
          continue;
        }
        break;
      }
      if ((v50 & 1) == 0) {
        goto LABEL_109;
      }
LABEL_142:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      std::string v81 = v34[1];
      if (v81)
      {
        do
        {
          unsigned __int8 v82 = (void **)v81;
          std::string v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          unsigned __int8 v82 = (void **)v34[2];
          BOOL v83 = *v82 == v34;
          long long v34 = v82;
        }
        while (!v83);
      }
      long long v34 = v82;
      if (v82 != v130) {
        continue;
      }
      break;
    }
LABEL_150:
    if (v124 == v123) {
      goto LABEL_190;
    }
    memset(__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(&v119, "context_transfer");
    if ((v122 & 0x80u) == 0) {
      size_t v84 = v122;
    }
    else {
      size_t v84 = *(void *)v121;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v138, v84 + 3);
    if (v139 >= 0) {
      BOOL v85 = v138;
    }
    else {
      BOOL v85 = *(unsigned char **)v138;
    }
    if (v84)
    {
      if ((v122 & 0x80u) == 0) {
        size_t v86 = &__p;
      }
      else {
        size_t v86 = __p;
      }
      memmove(v85, v86, v84);
    }
    *(_DWORD *)&v85[v84] = 7894111;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v113, (uint64_t)v126, (uint64_t)v127, 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - v126) >> 3));
    memset(v112, 0, sizeof(v112));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v112, (uint64_t)v123, (uint64_t)v124, 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3));
    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v119, (uint64_t)v138, (uint64_t)__str, v113, v114, v112);
    unsigned int v137 = (void **)v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    unsigned int v137 = (void **)&v113;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    if (v139 < 0) {
      operator delete(*(void **)v138);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (!lpsrc)
    {
      uint64_t v87 = 0;
LABEL_171:
      uint64_t v88 = 0;
      goto LABEL_172;
    }
    if (!v87) {
      goto LABEL_171;
    }
    uint64_t v88 = v117;
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_172:
    *(_DWORD *)uint64_t v138 = 0;
    Espresso::create_context((int *)v138, &v119);
    uint64_t v90 = *(void *)(a2 + 112);
    uint64_t v89 = *(void *)(a2 + 120);
    if (v89) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v91 = (std::__shared_weak_count *)v87[40];
    v87[39] = v90;
    v87[40] = v89;
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v92 = (std::__shared_weak_count *)v87[42];
    v87[41] = v103;
    v87[42] = v104;
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
    uint64_t v94 = *(void *)(a2 + 112);
    uint64_t v93 = *(void *)(a2 + 120);
    if (v93) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v95 = (std::__shared_weak_count *)v87[2];
    v87[1] = v94;
    v87[2] = v93;
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(void))(v87[39] + 8))(*(void *)(v87[39] + 8));
    if (v119.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v119.__r_.__value_.__l.__size_);
    }
    if (v88) {
      nitro::nitro_function::nitro_function(v88);
    }
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
LABEL_190:
    if ((char)v122 < 0) {
      operator delete(__p);
    }
    *(void *)std::string __str = &v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(void *)std::string __str = &v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
    std::__tree<int>::destroy(v130[0]);
    if (v129.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v129.__r_.__value_.__l.__size_);
    }
    uint64_t v96 = (uint64_t *)v32[1];
    if (v96)
    {
      do
      {
        uint64_t v97 = v96;
        uint64_t v96 = (uint64_t *)*v96;
      }
      while (v96);
    }
    else
    {
      do
      {
        uint64_t v97 = (uint64_t *)v32[2];
        BOOL v83 = *v97 == (void)v32;
        size_t v32 = v97;
      }
      while (!v83);
    }
    size_t v32 = v97;
    if (v97 != (uint64_t *)v136) {
      continue;
    }
    break;
  }
LABEL_202:
  *(unsigned char *)(a2 + 184) = 1;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v109, v131, (uint64_t)v132, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 3));
  memset(v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v108, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(a1, (uint64_t *)a2, a3, a4, a5, v109, v110, v108);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v136[0]);
}

void sub_192858C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  *(void *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(void **)(v59 - 152));
  _Unwind_Resume(a1);
}

void add_with_context_transfers_t<Espresso::convolution_uniforms>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  v136[0] = 0;
  v136[1] = 0;
  unint64_t v135 = (uint64_t *)v136;
  unsigned int v134 = 0;
  uint64_t v8 = *a6;
  uint64_t v105 = a6[1];
  if (*a6 == v105)
  {
    uint64_t v31 = *a6;
    goto LABEL_46;
  }
  unsigned int v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v8;
      v129.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v11 = *(void *)(a2 + 80);
    uint64_t v12 = *(void *)(v11 + 32);
    if (*(void *)(v11 + 40) != v12)
    {
      uint64_t v106 = v8;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)(*(void *)(v12 + 16 * v13) + 64);
        uint64_t v16 = *(void *)(v14 + 8);
        unint64_t v15 = *(std::__shared_weak_count **)(v14 + 16);
        uint64_t v131 = v16;
        unint64_t v132 = v15;
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = *(void *)(a2 + 80);
        }
        *(void *)std::string __str = v13;
        uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        int v19 = (long long *)v17[3];
        uint64_t v18 = (long long *)v17[4];
        if (v19 != v18) {
          break;
        }
LABEL_37:
        if (v132) {
          nitro::nitro_function::nitro_function(v132);
        }
        ++v13;
        uint64_t v11 = *(void *)(a2 + 80);
        uint64_t v12 = *(void *)(v11 + 32);
        if (v13 >= (*(void *)(v11 + 40) - v12) >> 4)
        {
          unsigned int v9 = v134;
          uint64_t v8 = v106;
          goto LABEL_41;
        }
      }
      unint64_t v20 = v131;
      int v21 = v134;
      while (1)
      {
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v19, *((void *)v19 + 1));
        }
        else
        {
          long long v22 = *v19;
          *(void *)&__str[16] = *((void *)v19 + 2);
          *(_OWORD *)std::string __str = v22;
        }
        uint64_t v23 = __str[23];
        char v24 = __str[23];
        if (__str[23] >= 0) {
          uint64_t v25 = __str[23];
        }
        else {
          uint64_t v25 = *(void *)&__str[8];
        }
        std::string::size_type size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v129.__r_.__value_.__l.__size_;
        }
        if (v25 == size)
        {
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &v129;
          }
          else {
            uint64_t v27 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((__str[23] & 0x80000000) != 0)
          {
            long long v29 = *(void **)__str;
            if (memcmp(*(const void **)__str, v27, *(size_t *)&__str[8])) {
              goto LABEL_35;
            }
LABEL_31:
            if (v20 != *(void *)(a2 + 112))
            {
              long long v30 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v135, v20, &v131);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v30 + 6, v21, &v134)+ 8) = 1;
              char v24 = __str[23];
            }
            goto LABEL_33;
          }
          if (!__str[23]) {
            goto LABEL_31;
          }
          BOOL v28 = __str;
          while (*v28 == v27->__r_.__value_.__s.__data_[0])
          {
            ++v28;
            uint64_t v27 = (std::string *)((char *)v27 + 1);
            if (!--v23) {
              goto LABEL_31;
            }
          }
        }
LABEL_33:
        if (v24 < 0)
        {
          long long v29 = *(void **)__str;
LABEL_35:
          operator delete(v29);
        }
        int v19 = (long long *)((char *)v19 + 24);
        if (v19 == v18) {
          goto LABEL_37;
        }
      }
    }
LABEL_41:
    unsigned int v134 = ++v9;
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v8 += 24;
  }
  while (v8 != v105);
  uint64_t v31 = *a6;
  uint64_t v8 = a6[1];
LABEL_46:
  uint64_t v131 = 0;
  unint64_t v132 = 0;
  uint64_t v133 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v31, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v31) >> 3));
  size_t v32 = v135;
  if (v135 == (uint64_t *)v136) {
    goto LABEL_202;
  }
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v129, v32 + 4);
    std::string::size_type v33 = v129.__r_.__value_.__l.__size_;
    std::string::size_type v103 = v129.__r_.__value_.__r.__words[0];
    if (v129.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v129.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v104 = (std::__shared_weak_count *)v33;
    std::string v126 = 0;
    unsigned int v127 = 0;
    unint64_t v128 = 0;
    long long v123 = 0;
    uint64_t v124 = 0;
    unint64_t v125 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    long long v34 = (void **)v129.__r_.__value_.__r.__words[2];
    if ((void **)v129.__r_.__value_.__r.__words[2] == v130) {
      goto LABEL_150;
    }
    while (2)
    {
      int v35 = *((_DWORD *)v34 + 7);
      uint64_t v36 = *a6 + 24 * v35;
      if (*(char *)(v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v36, *(void *)(v36 + 8));
      }
      else
      {
        long long v37 = *(_OWORD *)v36;
        *(void *)&__str[16] = *(void *)(v36 + 16);
        *(_OWORD *)std::string __str = v37;
      }
      if (__str[23] >= 0) {
        int64_t v38 = __str[23];
      }
      else {
        int64_t v38 = *(void *)&__str[8];
      }
      if (__str[23] >= 0) {
        long long v39 = __str;
      }
      else {
        long long v39 = *(char **)__str;
      }
      if (v38 >= 4)
      {
        int64_t v40 = &v39[v38];
        int64_t v41 = v38;
        long long v42 = v39;
        do
        {
          int64_t v43 = (char *)memchr(v42, 99, v41 - 3);
          if (!v43) {
            break;
          }
          if (*(_DWORD *)v43 == 1601532003)
          {
            if (v43 != v40 && v43 == v39)
            {
              std::string::basic_string(&v119, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v138);
              goto LABEL_77;
            }
            break;
          }
          long long v42 = v43 + 1;
          int64_t v41 = v40 - v42;
        }
        while (v40 - v42 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v119, v38 + 3);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v119;
      }
      else {
        uint64_t v44 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      if (v38)
      {
        if (__str[23] >= 0) {
          uint64_t v45 = __str;
        }
        else {
          uint64_t v45 = *(unsigned char **)__str;
        }
        memmove(v44, v45, v38);
      }
      *(_DWORD *)((char *)&v44->__r_.__value_.__l.__data_ + v38) = 7894111;
LABEL_77:
      uint64_t v46 = v131 + 24 * v35;
      if (*(char *)(v46 + 23) < 0) {
        operator delete(*(void **)v46);
      }
      long long v47 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      *(void *)(v46 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((void *)&v119.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v46 = v47;
      uint64_t v48 = *(void *)(a2 + 80);
      if (*(void *)(v48 + 40) == *(void *)(v48 + 32))
      {
LABEL_109:
        uint64_t v63 = *a6 + 24 * v35;
        uint64_t v64 = v127;
        if ((unint64_t)v127 >= v128)
        {
          size_t v66 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v126, v63);
        }
        else
        {
          if (*(char *)(v63 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
          }
          else
          {
            long long v65 = *(_OWORD *)v63;
            v127->__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
            *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
          }
          size_t v66 = v64 + 1;
        }
        unsigned int v127 = v66;
        uint64_t v67 = v131 + 24 * v35;
        long long v68 = v124;
        if ((unint64_t)v124 >= v125)
        {
          long long v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v123, v67);
        }
        else
        {
          if (*(char *)(v67 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v124, *(const std::string::value_type **)v67, *(void *)(v67 + 8));
          }
          else
          {
            long long v69 = *(_OWORD *)v67;
            v124->__r_.__value_.__r.__words[2] = *(void *)(v67 + 16);
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
          }
          long long v70 = v68 + 1;
        }
        uint64_t v124 = v70;
        if ((v122 & 0x80u) == 0) {
          size_t v71 = v122;
        }
        else {
          size_t v71 = *(void *)v121;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v119, v71 + 1);
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v72 = &v119;
        }
        else {
          uint64_t v72 = (std::string *)v119.__r_.__value_.__r.__words[0];
        }
        if (v71)
        {
          if ((v122 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v72, p_p, v71);
        }
        *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v71) = 95;
        uint64_t v74 = *a6 + 24 * v35;
        int v75 = *(char *)(v74 + 23);
        if (v75 >= 0) {
          uint64_t v76 = (const std::string::value_type *)(*a6 + 24 * v35);
        }
        else {
          uint64_t v76 = *(const std::string::value_type **)v74;
        }
        if (v75 >= 0) {
          std::string::size_type v77 = *(unsigned __int8 *)(v74 + 23);
        }
        else {
          std::string::size_type v77 = *(void *)(v74 + 8);
        }
        size_t v78 = std::string::append(&v119, v76, v77);
        std::string::size_type v79 = (void *)v78->__r_.__value_.__r.__words[0];
        *(void *)uint64_t v138 = v78->__r_.__value_.__l.__size_;
        *(void *)&v138[7] = *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v80 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        if ((char)v122 < 0) {
          operator delete(__p);
        }
        std::string __p = v79;
        *(void *)uint64_t v121 = *(void *)v138;
        *(void *)&v121[7] = *(void *)&v138[7];
        unsigned __int8 v122 = v80;
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        goto LABEL_142;
      }
      unint64_t v49 = 0;
      char v50 = 0;
      while (2)
      {
        v119.__r_.__value_.__r.__words[0] = v49;
        unint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v48 + 96, v49, &v119);
        char v52 = (long long *)v51[3];
        uint64_t v53 = (long long *)v51[4];
        while (2)
        {
          if (v52 != v53)
          {
            if (*((char *)v52 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v52, *((void *)v52 + 1));
            }
            else
            {
              long long v54 = *v52;
              v119.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v54;
            }
            char v55 = (unsigned __int8 **)(v131 + 24 * v35);
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v56 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v56 = v119.__r_.__value_.__l.__size_;
            }
            int v57 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
            int v58 = (char)v57;
            if ((char)v57 < 0) {
              int v57 = v55[1];
            }
            if ((unsigned __int8 *)v56 != v57) {
              goto LABEL_101;
            }
            if (v58 >= 0) {
              uint64_t v59 = (unsigned __int8 *)(v131 + 24 * v35);
            }
            else {
              uint64_t v59 = *v55;
            }
            if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              char v62 = (void *)v119.__r_.__value_.__r.__words[0];
              v50 |= memcmp(v119.__r_.__value_.__l.__data_, v59, v119.__r_.__value_.__l.__size_) == 0;
LABEL_104:
              operator delete(v62);
            }
            else if (*((unsigned char *)&v119.__r_.__value_.__s + 23))
            {
              uint64_t v60 = &v119;
              uint64_t v61 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              while (v60->__r_.__value_.__s.__data_[0] == *v59)
              {
                uint64_t v60 = (std::string *)((char *)v60 + 1);
                ++v59;
                if (!--v61)
                {
                  char v50 = 1;
                  break;
                }
              }
LABEL_101:
              if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                char v62 = (void *)v119.__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
            }
            else
            {
              char v50 = 1;
            }
            char v52 = (long long *)((char *)v52 + 24);
            continue;
          }
          break;
        }
        ++v49;
        uint64_t v48 = *(void *)(a2 + 80);
        if (v49 < (uint64_t)(*(void *)(v48 + 40) - *(void *)(v48 + 32)) >> 4) {
          continue;
        }
        break;
      }
      if ((v50 & 1) == 0) {
        goto LABEL_109;
      }
LABEL_142:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      std::string v81 = v34[1];
      if (v81)
      {
        do
        {
          unsigned __int8 v82 = (void **)v81;
          std::string v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          unsigned __int8 v82 = (void **)v34[2];
          BOOL v83 = *v82 == v34;
          long long v34 = v82;
        }
        while (!v83);
      }
      long long v34 = v82;
      if (v82 != v130) {
        continue;
      }
      break;
    }
LABEL_150:
    if (v124 == v123) {
      goto LABEL_190;
    }
    memset(__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(&v119, "context_transfer");
    if ((v122 & 0x80u) == 0) {
      size_t v84 = v122;
    }
    else {
      size_t v84 = *(void *)v121;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v138, v84 + 3);
    if (v139 >= 0) {
      BOOL v85 = v138;
    }
    else {
      BOOL v85 = *(unsigned char **)v138;
    }
    if (v84)
    {
      if ((v122 & 0x80u) == 0) {
        size_t v86 = &__p;
      }
      else {
        size_t v86 = __p;
      }
      memmove(v85, v86, v84);
    }
    *(_DWORD *)&v85[v84] = 7894111;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v113, (uint64_t)v126, (uint64_t)v127, 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - v126) >> 3));
    memset(v112, 0, sizeof(v112));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v112, (uint64_t)v123, (uint64_t)v124, 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3));
    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v119, (uint64_t)v138, (uint64_t)__str, v113, v114, v112);
    unsigned int v137 = (void **)v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    unsigned int v137 = (void **)&v113;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
    if (v139 < 0) {
      operator delete(*(void **)v138);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (!lpsrc)
    {
      uint64_t v87 = 0;
LABEL_171:
      uint64_t v88 = 0;
      goto LABEL_172;
    }
    if (!v87) {
      goto LABEL_171;
    }
    uint64_t v88 = v117;
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_172:
    *(_DWORD *)uint64_t v138 = 0;
    Espresso::create_context((int *)v138, &v119);
    uint64_t v90 = *(void *)(a2 + 112);
    uint64_t v89 = *(void *)(a2 + 120);
    if (v89) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v91 = (std::__shared_weak_count *)v87[40];
    v87[39] = v90;
    v87[40] = v89;
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v92 = (std::__shared_weak_count *)v87[42];
    v87[41] = v103;
    v87[42] = v104;
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
    uint64_t v94 = *(void *)(a2 + 112);
    uint64_t v93 = *(void *)(a2 + 120);
    if (v93) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v95 = (std::__shared_weak_count *)v87[2];
    v87[1] = v94;
    v87[2] = v93;
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(void))(v87[39] + 8))(*(void *)(v87[39] + 8));
    if (v119.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v119.__r_.__value_.__l.__size_);
    }
    if (v88) {
      nitro::nitro_function::nitro_function(v88);
    }
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
LABEL_190:
    if ((char)v122 < 0) {
      operator delete(__p);
    }
    *(void *)std::string __str = &v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(void *)std::string __str = &v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
    std::__tree<int>::destroy(v130[0]);
    if (v129.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v129.__r_.__value_.__l.__size_);
    }
    uint64_t v96 = (uint64_t *)v32[1];
    if (v96)
    {
      do
      {
        uint64_t v97 = v96;
        uint64_t v96 = (uint64_t *)*v96;
      }
      while (v96);
    }
    else
    {
      do
      {
        uint64_t v97 = (uint64_t *)v32[2];
        BOOL v83 = *v97 == (void)v32;
        size_t v32 = v97;
      }
      while (!v83);
    }
    size_t v32 = v97;
    if (v97 != (uint64_t *)v136) {
      continue;
    }
    break;
  }
LABEL_202:
  *(unsigned char *)(a2 + 184) = 1;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v109, v131, (uint64_t)v132, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 3));
  memset(v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v108, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::convolution_uniforms>(a1, (uint64_t *)a2, a3, a4, a5, v109, v110, v108);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v136[0]);
}

void sub_1928599C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  *(void *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(void *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(void **)(v59 - 152));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::bias_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192859D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::batchnorm_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192859FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::build_gradient(uint64_t a1@<X0>, long long *a2@<X1>, std::string::size_type *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)a1;
  unsigned int v9 = *(std::__shared_weak_count **)(a1 + 8);
  v22[0] = *(void *)a1;
  v22[1] = (uint64_t)v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void *)a1;
  }
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  v21[0] = *(void *)(v8 + 16);
  v21[1] = (uint64_t)v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void *)a1;
  }
  int v11 = *(_DWORD *)(**(void **)(v8 + 32) + 12);
  v20[0] = 0;
  v20[1] = 0;
  Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)v23, v22, v21, v11, v20);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "gradient_start");
  std::string::basic_string[abi:ne180100]<0>(v15, "gradient_start");
  Espresso::sequential_builder::constant_like((Espresso::sequential_builder *)v23, a2, (uint64_t)v15, (uint64_t)&__p, 1.0);
  if (v18 < 0) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  uint64_t v31 = a2;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v13, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v31);
  std::string::operator=((std::string *)(v12 + 5), &__str);
  Espresso::gradient_builder::build_gradient((unsigned __int8 *)a1, (uint64_t)v13, a3, (uint64_t)v23, a4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v30);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v26 < 0) {
    operator delete(v25[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v25, v25[1]);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
}

void sub_19285A260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a36);
  _Unwind_Resume(a1);
}

unsigned __int8 *Espresso::gradient_builder::build_gradient@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, std::string::size_type *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = result;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  std::string::size_type v9 = *a3;
  std::string::size_type v10 = a3[1];
  while (v9 != v10)
  {
    __n128 result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(*(void *)v7 + 136), (unsigned __int8 *)v9);
    if (!result)
    {
      if (*(char *)(v9 + 23) < 0) {
        std::string::size_type v9 = *(void *)v9;
      }
      __str.__r_.__value_.__r.__words[0] = v9;
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("input name %s doesn't exist in the network", &__str);
    }
    v9 += 24;
  }
  if (*(void *)(*(void *)v7 + 32) != *(void *)(*(void *)v7 + 40))
  {
    v28[0] = 0;
    v28[1] = 0;
    unint64_t v26 = 0;
    uint64_t v27 = v28;
    char v24 = 0;
    uint64_t v25 = 0;
    for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    {
      uint64_t v12 = v25;
      if ((unint64_t)v25 >= v26)
      {
        int v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v24, (uint64_t)(i + 2));
      }
      else
      {
        if (*((char *)i + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)i[2], i[3]);
        }
        else
        {
          long long v13 = *((_OWORD *)i + 1);
          v25->__r_.__value_.__r.__words[2] = i[4];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        int v14 = v12 + 1;
      }
      uint64_t v25 = v14;
      if (*((char *)i + 63) < 0) {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)i[5], i[6]);
      }
      else {
        std::string __str = *(std::string *)(i + 5);
      }
      uint64_t v20 = (long long *)(i + 2);
      unint64_t v15 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v27, (const void **)i + 2, (uint64_t)&std::piecewise_construct, &v20);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v15 + 7), &__str, &v30, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    char v16 = *(Espresso::net **)(a4 + 80);
    long long v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = &unk_1EE364D80;
    uint64_t v17 = (std::__shared_weak_count *)operator new(0x38uLL);
    v17->__shared_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389488;
    unsigned __int8 v18 = v7[16];
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36A208;
    v17[1].__shared_owners_ = a2;
    v17[1].__shared_weak_owners_ = (uint64_t)a3;
    LOBYTE(v17[2].__vftable) = v18;
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v22 = v17 + 1;
    uint64_t v23 = v17;
    nitro::nitro_function::nitro_function(v17);
    Espresso::pass_prepare_gradient_builder::run_on_network((Espresso::pass_prepare_gradient_builder *)&v21, v16);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  return result;
}

void sub_19285ACF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void **a31,uint64_t a32,std::__shared_weak_count *a33,char a34,uint64_t a35,uint64_t a36,char a37,char *a38)
{
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  nitro::nitro_function::nitro_function(v39);
  Espresso::pass_stack_blobs::~pass_stack_blobs((Espresso::pass_stack_blobs *)(v40 - 176));
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  nitro::nitro_function::nitro_function(a10);
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a30) {
    nitro::nitro_function::nitro_function(a30);
  }
  nitro::nitro_function::nitro_function(a14);
  a31 = (void **)&unk_1EE3719B0;
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }
  a31 = (void **)&a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a31);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&a37, a38);
  _Unwind_Resume(a1);
}

void sub_19285AEC8()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  JUMPOUT(0x19285AEA4);
}

void Espresso::gradient_builder::build_gradient_segment(uint64_t **a1, unint64_t a2, unint64_t a3, uint64_t **a4, uint64_t *a5)
{
  unint64_t v6 = a3;
  uint64_t v390 = *MEMORY[0x1E4F143B8];
  v372[0] = a2;
  unint64_t v371 = a3;
  uint64_t v8 = (void *)(a5[10] + 1120);
  std::string::size_type v9 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>(v8, (uint64_t)&__str);
  std::string::size_type v10 = v9;
  if (!v9) {
    goto LABEL_614;
  }
  int v11 = (const void *)v9[3];
  uint64_t v12 = (std::__shared_weak_count *)v10[4];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11)
  {
LABEL_614:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v304, "Analysis missing: ");
    size_t v241 = std::string::append(&v304, (const std::string::value_type *)((unint64_t)"N8Espresso33analysis_prepare_gradient_builderE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v242;
    v241->__r_.__value_.__l.__size_ = 0;
    v241->__r_.__value_.__r.__words[2] = 0;
    v241->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v13 = a1;
  if (!v248)
  {
    unint64_t v243 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v304, "Analysis mismatch: ");
    size_t v244 = std::string::append(&v304, (const std::string::value_type *)((unint64_t)"N8Espresso33analysis_prepare_gradient_builderE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v245;
    v244->__r_.__value_.__l.__size_ = 0;
    v244->__r_.__value_.__r.__words[2] = 0;
    v244->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v243, &__str);
    __cxa_throw(v243, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v12);
    nitro::nitro_function::nitro_function(v12);
  }
  if (a2 > v6) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&>("start_layer_idx > end_layer_idx: %lu vs %lu", v372, &v371);
  }
  if (a2 == v6) {
    return;
  }
  for (uint64_t i = (void *)v248[18]; i; uint64_t i = (void *)*i)
  {
    unint64_t v15 = i[4];
    unint64_t v16 = i[2] + 1;
    if (v15 > a2 || v16 < v6)
    {
      BOOL v18 = v15 < a2 || v16 > v6;
      BOOL v19 = !v18 || v15 >= v6;
      if (!v19 && v16 > a2) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&,unsigned long const&,unsigned long>(a2, v6, v15, v16);
      }
    }
  }
  uint64_t v21 = (void *)v248[33];
  uint64_t v246 = v248[19];
  uint64_t v259 = a1 + 8;
  std::string::size_type v256 = v248 + 6;
  int v257 = a4 + 1;
  long long v22 = a5;
  do
  {
    unint64_t v23 = v6 - 1;
    unint64_t v370 = v23;
    char v24 = (uint64_t *)(*(void *)(v22[10] + 32) + 16 * v23);
    uint64_t v26 = *v24;
    uint64_t v25 = (std::__shared_weak_count *)v24[1];
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v250 = v25;
    uint64_t v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v248 + 16, v23);
    if (!v27)
    {
      uint64_t v47 = *(void *)((*v13)[4] + 16 * v23);
      if (*(char *)(v47 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)(v47 + 16), *(void *)(v47 + 24));
      }
      else {
        std::string v260 = *(std::string *)(v47 + 16);
      }
      uint64_t v48 = a1 + 5;
      get_layer_grad_name((uint64_t)&v304, (const void **)&v260.__r_.__value_.__l.__data_);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v260.__r_.__value_.__l.__data_);
      }
      memset(&v378, 0, sizeof(v378));
      uint64_t v50 = (uint64_t)(*v13 + 12);
      v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v370;
      unint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v50, &v370, (uint64_t)&std::piecewise_construct, (uint64_t **)&v388);
      uint64_t v53 = (const void **)v51[3];
      char v52 = (const void **)v51[4];
      while (1)
      {
        if (v53 == v52)
        {
          uint64_t v70 = (uint64_t)(*a1 + 7);
          v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v370;
          size_t v71 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v70, &v370, (uint64_t)&std::piecewise_construct, (uint64_t **)&v388);
          uint64_t v73 = v71[3];
          uint64_t v72 = v71[4];
          if (v73 == v72)
          {
            BOOL v75 = 0;
          }
          else
          {
            do
            {
              uint64_t v74 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v256, v73);
              BOOL v75 = v74 != 0;
              if (v74) {
                break;
              }
              v73 += 24;
            }
            while (v73 != v72);
          }
          uint64_t v76 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v248 + 11, v370);
          BOOL v77 = v378.__r_.__value_.__r.__words[0] != v378.__r_.__value_.__l.__size_ && v75;
          long long v13 = a1;
          if (v77 || v76)
          {
            uint64_t v78 = (uint64_t)(*a1 + 7);
            v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v370;
            std::string::size_type v79 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v78, &v370, (uint64_t)&std::piecewise_construct, (uint64_t **)&v388);
            uint64_t v80 = (uint64_t)(*a1 + 12);
            v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v370;
            std::string v81 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v80, &v370, (uint64_t)&std::piecewise_construct, (uint64_t **)&v388);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v304;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v378;
            __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v79 + 3);
            *(void *)&long long v376 = v81 + 3;
            *((void *)&v376 + 1) = a4;
            *(void *)&long long v377 = v248 + 6;
            *((void *)&v377 + 1) = v370;
            uint64_t v82 = (uint64_t)(*a1 + 7);
            v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v370;
            BOOL v83 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v82, &v370, (uint64_t)&std::piecewise_construct, (uint64_t **)&v388);
            size_t v84 = (long long *)v83[3];
            BOOL v85 = (long long *)v83[4];
            while (v84 != v85)
            {
              if (*((char *)v84 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v388, *(const std::string::value_type **)v84, *((void *)v84 + 1));
              }
              else
              {
                long long v86 = *v84;
                v388.__r_.__value_.__r.__words[2] = *((void *)v84 + 2);
                *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v86;
              }
              if (v257 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, &v388))
              {
                *(void *)v382 = &v388;
                uint64_t v87 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)&v388.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)v382);
                sum_grad_contribs((std::string *)v386, a5, v87 + 7, (const void **)&v388.__r_.__value_.__l.__data_);
                *(void *)v382 = &v388;
                uint64_t v88 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)&v388.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)v382);
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v88 + 7), (std::string *)v386, (long long *)&v386[24], 1uLL);
                if ((v386[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v386);
                }
              }
              if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v388.__r_.__value_.__l.__data_);
              }
              size_t v84 = (long long *)((char *)v84 + 24);
            }
            uint64_t v89 = a5[10];
            uint64_t v90 = *(void *)(*(void *)(v89 + 32) + 16 * v370);
            uint64_t v91 = (void *)(v90 + 40);
            int v92 = *(char *)(v90 + 63);
            if (v92 < 0)
            {
              if (*(void *)(v90 + 48) == 11)
              {
                uint64_t v91 = (void *)*v91;
                goto LABEL_445;
              }
LABEL_449:
              uint64_t v194 = *(void *)(*(void *)((*a1)[4] + 16 * v370) + 64);
              (*(void (**)(uint64_t, uint64_t *, std::string *))(*(void *)v194 + 256))(v194, a5, &__str);
              if (v246)
              {
                uint64_t v195 = (uint64_t)(*a1 + 7);
                v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v370;
                uint64_t v196 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v195, &v370, (uint64_t)&std::piecewise_construct, (uint64_t **)&v388);
                int v198 = (const void **)v196[3];
                uint64_t v197 = (const void **)v196[4];
                while (v198 != v197)
                {
                  if (v257 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, v198))
                  {
                    v388.__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
                    unsigned int v199 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v198, (uint64_t)&std::piecewise_construct, (long long **)&v388);
                    if (0xAAAAAAAAAAAAAAABLL * (v199[8] - v199[7]) >= 2)
                    {
                      sum_grad_contribs(&v388, a5, v199 + 7, v198);
                      *(void *)uint64_t v386 = v198;
                      uint64_t v200 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v198, (uint64_t)&std::piecewise_construct, (long long **)v386);
                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v200 + 7), &v388, &v389, 1uLL);
                      if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v388.__r_.__value_.__l.__data_);
                      }
                    }
                  }
                  v198 += 3;
                }
              }
            }
            else
            {
              if (v92 != 11) {
                goto LABEL_449;
              }
LABEL_445:
              long long v191 = (void *)*v91;
              uint64_t v192 = *(void *)((char *)v91 + 3);
              if (v191 != (void *)0x747269765F696870 || v192 != 0x6C6175747269765FLL) {
                goto LABEL_449;
              }
              *(void *)uint64_t v386 = &v370;
              size_t v219 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v89 + 96, &v370, (uint64_t)&std::piecewise_construct, (uint64_t **)v386)[3];
              if (*((char *)v219 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v388, *(const std::string::value_type **)v219, *((void *)v219 + 1));
              }
              else
              {
                long long v220 = *v219;
                v388.__r_.__value_.__r.__words[2] = *((void *)v219 + 2);
                *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v220;
              }
              *(void *)v382 = &v388;
              unint64_t v229 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 5, &v388, (uint64_t)&std::piecewise_construct, (long long **)v382);
              if (*((char *)v229 + 79) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v386, (const std::string::value_type *)v229[7], v229[8]);
              }
              else
              {
                *(_OWORD *)uint64_t v386 = *(_OWORD *)(v229 + 7);
                *(void *)&v386[16] = v229[9];
              }
              uint64_t v230 = a5[10] + 56;
              *(void *)v382 = &v370;
              uint64_t v231 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v230, &v370, (uint64_t)&std::piecewise_construct, (uint64_t **)v382);
              uint64_t v233 = v231[3];
              uint64_t v232 = v231[4];
              while (v233 != v232)
              {
                if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v259, v233))
                {
                  if (*(char *)(v233 + 23) < 0) {
                    uint64_t v233 = *(void *)v233;
                  }
                  *(void *)v382 = v233;
                  Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("blob %s is consumed by multiple phi_virtuals", v382);
                }
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v256, v233))
                {
                  *(void *)v382 = v233;
                  std::string::size_type v234 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v259, v233, (uint64_t)&std::piecewise_construct, (long long **)v382);
                  std::string::operator=((std::string *)(v234 + 5), (const std::string *)v386);
                }
                v233 += 24;
              }
              if ((v386[23] & 0x80000000) != 0) {
                operator delete(*(void **)v386);
              }
              long long v13 = a1;
              if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v388.__r_.__value_.__l.__data_);
              }
            }
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v378;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v304.__r_.__value_.__l.__data_);
          }
          long long v22 = a5;
          goto LABEL_592;
        }
        if (v257 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, v53)|| (v388.__r_.__value_.__r.__words[0] = (std::string::size_type)v53, long long v54 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v53, (uint64_t)&std::piecewise_construct, (long long **)&v388), v54[7] == v54[8]))
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v259, (uint64_t)v53))goto LABEL_89; {
          v388.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          }
          uint64_t v59 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v259, (uint64_t)v53, (uint64_t)&std::piecewise_construct, (long long **)&v388);
          v388.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          uint64_t v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v53, (uint64_t)&std::piecewise_construct, (long long **)&v388);
          std::string::operator=((std::string *)(v60 + 7), (const std::string *)(v59 + 5));
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v259, (uint64_t)v53);
          v388.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          uint64_t v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v53, (uint64_t)&std::piecewise_construct, (long long **)&v388);
          uint64_t v62 = (uint64_t)(v61 + 7);
          std::string::size_type size = v378.__r_.__value_.__l.__size_;
          if (v378.__r_.__value_.__l.__size_ < v378.__r_.__value_.__r.__words[2])
          {
            if (*((char *)v61 + 79) < 0)
            {
LABEL_86:
              std::string::__init_copy_ctor_external((std::string *)v378.__r_.__value_.__l.__size_, (const std::string::value_type *)v61[7], v61[8]);
              goto LABEL_87;
            }
LABEL_84:
            long long v68 = *(_OWORD *)v62;
            *(void *)(size + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *(void *)(v62 + 16);
            *(_OWORD *)std::string::size_type size = v68;
LABEL_87:
            long long v69 = (std::string *)(size + 24);
            uint64_t v48 = a1 + 5;
            goto LABEL_88;
          }
        }
        else
        {
          v388.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          char v55 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v53, (uint64_t)&std::piecewise_construct, (long long **)&v388);
          sum_grad_contribs(&__str, a5, v55 + 7, v53);
          v388.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          std::string::size_type v56 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v53, (uint64_t)&std::piecewise_construct, (long long **)&v388);
          int v57 = (void **)(v56 + 7);
          if (*((char *)v56 + 79) < 0) {
            operator delete(*v57);
          }
          *(std::string *)int v57 = __str;
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v259, (uint64_t)v53))
          {
            *(void *)v382 = v53;
            uint64_t v58 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v259, (uint64_t)v53, (uint64_t)&std::piecewise_construct, (long long **)v382);
            if (*((char *)v58 + 63) < 0) {
              std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v58[5], v58[6]);
            }
            else {
              std::string __str = *(std::string *)(v58 + 5);
            }
            *(void *)v382 = v53;
            uint64_t v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v53, (uint64_t)&std::piecewise_construct, (long long **)v382);
            if (*((char *)v64 + 79) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v376, (const std::string::value_type *)v64[7], v64[8]);
            }
            else
            {
              long long v376 = *(_OWORD *)(v64 + 7);
              *(void *)&long long v377 = v64[9];
            }
            memset(v386, 0, 24);
            *(void *)v382 = v386;
            v382[8] = 0;
            *(void *)uint64_t v386 = operator new(0x30uLL);
            *(void *)&v386[8] = *(void *)v386;
            *(void *)&v386[16] = *(void *)v386 + 48;
            *(void *)&v386[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v386[16], (long long *)&__str, (long long *)((char *)&v377 + 8), *(std::string **)v386);
            merge_grads_with_phi((uint64_t)&v388, a5, (uint64_t *)v386, v53, 0);
            float v336 = v53;
            long long v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v53, (uint64_t)&std::piecewise_construct, (long long **)&v336);
            size_t v66 = (void **)(v65 + 7);
            if (*((char *)v65 + 79) < 0) {
              operator delete(*v66);
            }
            *(std::string *)size_t v66 = v388;
            *((unsigned char *)&v388.__r_.__value_.__s + 23) = 0;
            v388.__r_.__value_.__s.__data_[0] = 0;
            *(void *)v382 = v386;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
            for (uint64_t j = 0; j != -48; j -= 24)
            {
              if (*((char *)&v377 + j + 7) < 0) {
                operator delete(*(void **)((char *)&__str + j + 24));
              }
            }
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v259, (uint64_t)v53);
          }
          v388.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          uint64_t v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v53, (uint64_t)&std::piecewise_construct, (long long **)&v388);
          uint64_t v62 = (uint64_t)(v61 + 7);
          std::string::size_type size = v378.__r_.__value_.__l.__size_;
          if (v378.__r_.__value_.__l.__size_ < v378.__r_.__value_.__r.__words[2])
          {
            if (*((char *)v61 + 79) < 0) {
              goto LABEL_86;
            }
            goto LABEL_84;
          }
        }
        long long v69 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v378.__r_.__value_.__l.__data_, v62);
        uint64_t v48 = a1 + 5;
LABEL_88:
        v378.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
LABEL_89:
        v53 += 3;
      }
    }
    int v28 = *((_DWORD *)v27 + 6);
    if (v28 != 1)
    {
      if (v28) {
        goto LABEL_574;
      }
      uint64_t v29 = v22[10];
      unint64_t v249 = v27;
      uint64_t v31 = v27 + 4;
      uint64_t v30 = v27[4];
      uint64_t v32 = *(void *)(v29 + 32);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 4);
      std::string::size_type v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v29 + 56, v27 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
      long long v34 = (uint64_t *)(v32 + 16 * v30);
      uint64_t v35 = *v34;
      uint64_t v36 = *(const void **)(*v34 + 64);
      if (!v36 {
        || (long long v37 = (long long *)v33[3],
      }
      {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expecting a cf_if kernel");
      }
      long long v39 = *(std::__shared_weak_count **)(v35 + 72);
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v40 = (const void **)(v38 + 296);
      unint64_t v251 = v39;
      int v253 = (unsigned __int8 **)(v26 + 16);
      uint64_t v41 = v38[319];
      if ((v41 & 0x80u) == 0) {
        uint64_t v42 = v38[319];
      }
      else {
        uint64_t v42 = *((void *)v38 + 38);
      }
      uint64_t v43 = *(unsigned __int8 *)(v26 + 39);
      int v44 = (char)v43;
      if ((v43 & 0x80u) != 0) {
        uint64_t v43 = *(void *)(v26 + 24);
      }
      if (v42 != v43) {
        goto LABEL_458;
      }
      if (v44 >= 0) {
        uint64_t v45 = (unsigned __int8 *)(v26 + 16);
      }
      else {
        uint64_t v45 = *v253;
      }
      if ((v41 & 0x80) != 0)
      {
        if (memcmp(*v40, v45, *((void *)v38 + 38)))
        {
LABEL_458:
          uint64_t v201 = a5[10] + 928;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
          uint64_t v247 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v201, (uint64_t)v40, (uint64_t)&std::piecewise_construct, (long long **)&__str)[5];
          uint64_t v202 = *(void *)(*(void *)(a5[10] + 32) + 16 * (v247 - 1));
          segment_input_blob_indices(&v378.__r_.__value_.__l.__data_, v21, v256, *v31 + 1, v370);
          std::unordered_set<std::string>::unordered_set((uint64_t)v356, (uint64_t)v256);
          fill_and_extract_grads_for_inputs((uint64_t)&v304, (uint64_t)v21, (int *)v378.__r_.__value_.__l.__data_, (int *)v378.__r_.__value_.__l.__size_, a5, a4, v259, v356);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v356);
          std::string::basic_string[abi:ne180100]<0>(&__str, "cf_if");
          uint64_t v203 = *v34;
          if (*(char *)(*v34 + 39) < 0) {
            std::string::__init_copy_ctor_external(&v353, *(const std::string::value_type **)(v203 + 16), *(void *)(v203 + 24));
          }
          else {
            std::string v353 = *(std::string *)(v203 + 16);
          }
          get_layer_grad_name((uint64_t)&v388, (const void **)&v353.__r_.__value_.__l.__data_);
          if (*((char *)v37 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v386, *(const std::string::value_type **)v37, *((void *)v37 + 1));
          }
          else
          {
            long long v205 = *v37;
            *(void *)&v386[16] = *((void *)v37 + 2);
            *(_OWORD *)uint64_t v386 = v205;
          }
          int v351 = 0;
          int v350 = 0;
          int v352 = 0;
          *(void *)v382 = &v350;
          v382[8] = 0;
          int v350 = (std::string *)operator new(0x18uLL);
          int v351 = v350;
          int v352 = v350 + 1;
          int v351 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v352, (long long *)v386, (long long *)&v386[24], v350);
          memset(v349, 0, sizeof(v349));
          Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v354, a5, (uint64_t)&__str, (uint64_t)&v388, (uint64_t)&v336, (uint64_t)v350, (uint64_t)v351, v349);
          if (v355) {
            nitro::nitro_function::nitro_function(v355);
          }
          *(void *)v382 = v349;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
          *(void *)v382 = &v350;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
          if ((v386[23] & 0x80000000) != 0) {
            operator delete(*(void **)v386);
          }
          if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v388.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v353.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          Espresso::gradient_builder::build_gradient_segment(a1, *v31 + 1, v247 - 1, a4, a5);
          std::string::basic_string[abi:ne180100]<0>(&__str, "cf_else");
          if (*(char *)(v202 + 39) < 0) {
            std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)(v202 + 16), *(void *)(v202 + 24));
          }
          else {
            std::string v346 = *(std::string *)(v202 + 16);
          }
          get_layer_grad_name((uint64_t)&v388, (const void **)&v346.__r_.__value_.__l.__data_);
          memset(v345, 0, sizeof(v345));
          memset(v344, 0, sizeof(v344));
          Espresso::sequential_builder::add<Espresso::cf_else_params_t>(&v347, a5, (uint64_t)&__str, (uint64_t)&v388, (uint64_t)v382, 0, 0, v344);
          if (v348) {
            nitro::nitro_function::nitro_function(v348);
          }
          *(void *)uint64_t v386 = v344;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
          *(void *)uint64_t v386 = v345;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
          if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v388.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v346.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          long long v206 = (const void **)v304.__r_.__value_.__r.__words[2];
          if (v304.__r_.__value_.__r.__words[2])
          {
            do
            {
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v206 + 2);
              size_t v207 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v206 + 2, (uint64_t)&std::piecewise_construct, (long long **)&__str);
              if ((char *)v207[8] - (char *)v207[7] != 24)
              {
                size_t v236 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
                Espresso::invalid_state_error::invalid_state_error(v236);
              }
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v206 + 2);
              unsigned int v208 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v304, (uint64_t)(v206 + 2), (uint64_t)&std::piecewise_construct, (long long **)&__str);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v206 + 2);
              unsigned int v209 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v206 + 2, (uint64_t)&std::piecewise_construct, (long long **)&__str)[7];
              uint64_t v210 = v208[7];
              long long v211 = *(_OWORD *)(v208 + 5);
              uint64_t v212 = v209[2];
              *(_OWORD *)(v208 + 5) = *(_OWORD *)v209;
              v208[7] = v212;
              *(_OWORD *)unsigned int v209 = v211;
              v209[2] = v210;
              long long v206 = (const void **)*v206;
            }
            while (v206);
          }
          long long v13 = a1;
          Espresso::gradient_builder::build_gradient_segment(a1, v247, v370, a4, a5);
          std::string::basic_string[abi:ne180100]<0>(&__str, "cf_end");
          if (*(char *)(v26 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)(v26 + 16), *(void *)(v26 + 24));
          }
          else
          {
            *(_OWORD *)&v341.__r_.__value_.__l.__data_ = *(_OWORD *)v253;
            v341.__r_.__value_.__r.__words[2] = *(void *)(v26 + 32);
          }
          get_layer_grad_name((uint64_t)&v388, (const void **)&v341.__r_.__value_.__l.__data_);
          memset(v340, 0, sizeof(v340));
          memset(v339, 0, sizeof(v339));
          Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v342, a5, (uint64_t)&__str, (uint64_t)&v388, (uint64_t)v382, 0, 0, v339);
          if (v343) {
            nitro::nitro_function::nitro_function(v343);
          }
          *(void *)uint64_t v386 = v339;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
          *(void *)uint64_t v386 = v340;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
          if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v388.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v341.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v213 = (uint64_t *)v304.__r_.__value_.__r.__words[2];
          if (v304.__r_.__value_.__r.__words[2])
          {
            do
            {
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v213 + 2);
              unint64_t v214 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v213 + 2, (uint64_t)&std::piecewise_construct, (long long **)&__str);
              if ((char *)v214[8] - (char *)v214[7] != 24)
              {
                float32x4_t v237 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
                Espresso::invalid_state_error::invalid_state_error(v237);
              }
              if (*((char *)v213 + 63) < 0) {
                std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v213[5], v213[6]);
              }
              else {
                std::string __str = *(std::string *)(v213 + 5);
              }
              *(void *)v382 = v213 + 2;
              float32x4_t v215 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v213 + 2, (uint64_t)&std::piecewise_construct, (long long **)v382)[7];
              if (*((char *)v215 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v376, (const std::string::value_type *)*v215, v215[1]);
              }
              else
              {
                long long v216 = *(_OWORD *)v215;
                *(void *)&long long v377 = v215[2];
                long long v376 = v216;
              }
              memset(v386, 0, 24);
              *(void *)v382 = v386;
              v382[8] = 0;
              *(void *)uint64_t v386 = operator new(0x30uLL);
              *(void *)&v386[8] = *(void *)v386;
              *(void *)&v386[16] = *(void *)v386 + 48;
              *(void *)&v386[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v386[16], (long long *)&__str, (long long *)((char *)&v377 + 8), *(std::string **)v386);
              merge_grads_with_phi((uint64_t)&v388, a5, (uint64_t *)v386, (const void **)v213 + 2, 1);
              *(void *)v382 = v386;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
              for (uint64_t k = 0; k != -48; k -= 24)
              {
                if (*((char *)&v377 + k + 7) < 0) {
                  operator delete(*(void **)((char *)&__str + k + 24));
                }
              }
              if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&__str, v388.__r_.__value_.__l.__data_, v388.__r_.__value_.__l.__size_);
              }
              else {
                std::string __str = v388;
              }
              *(void *)uint64_t v386 = v213 + 2;
              int v218 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v213 + 2, (uint64_t)&std::piecewise_construct, (long long **)v386);
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v218 + 7), &__str, &v376, 1uLL);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v388.__r_.__value_.__l.__data_);
              }
              uint64_t v213 = (uint64_t *)*v213;
            }
            while (v213);
          }
LABEL_569:
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v304);
          if (v378.__r_.__value_.__r.__words[0])
          {
            v378.__r_.__value_.__l.__size_ = v378.__r_.__value_.__r.__words[0];
            operator delete(v378.__r_.__value_.__l.__data_);
          }
          long long v22 = a5;
          uint64_t v27 = v249;
          if (v251)
          {
            nitro::nitro_function::nitro_function(v251);
            goto LABEL_573;
          }
          goto LABEL_574;
        }
      }
      else if (v38[319])
      {
        uint64_t v46 = (unsigned __int8 *)(v38 + 296);
        while (*v46 == *v45)
        {
          ++v46;
          ++v45;
          if (!--v41) {
            goto LABEL_460;
          }
        }
        goto LABEL_458;
      }
LABEL_460:
      segment_input_blob_indices(&v378.__r_.__value_.__l.__data_, v21, v256, *v31 + 1, v370);
      std::unordered_set<std::string>::unordered_set((uint64_t)v369, (uint64_t)v256);
      fill_and_extract_grads_for_inputs((uint64_t)&v304, (uint64_t)v21, (int *)v378.__r_.__value_.__l.__data_, (int *)v378.__r_.__value_.__l.__size_, a5, a4, v259, v369);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v369);
      std::string::basic_string[abi:ne180100]<0>(&__str, "cf_if");
      uint64_t v204 = *v34;
      if (*(char *)(*v34 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v366, *(const std::string::value_type **)(v204 + 16), *(void *)(v204 + 24));
      }
      else {
        std::string v366 = *(std::string *)(v204 + 16);
      }
      get_layer_grad_name((uint64_t)&v388, (const void **)&v366.__r_.__value_.__l.__data_);
      if (*((char *)v37 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v386, *(const std::string::value_type **)v37, *((void *)v37 + 1));
      }
      else
      {
        long long v221 = *v37;
        *(void *)&v386[16] = *((void *)v37 + 2);
        *(_OWORD *)uint64_t v386 = v221;
      }
      v364 = 0;
      int v363 = 0;
      unsigned int v365 = 0;
      *(void *)v382 = &v363;
      v382[8] = 0;
      int v363 = (std::string *)operator new(0x18uLL);
      v364 = v363;
      unsigned int v365 = v363 + 1;
      v364 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v365, (long long *)v386, (long long *)&v386[24], v363);
      memset(v362, 0, sizeof(v362));
      Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v367, a5, (uint64_t)&__str, (uint64_t)&v388, (uint64_t)&v336, (uint64_t)v363, (uint64_t)v364, v362);
      if (v368) {
        nitro::nitro_function::nitro_function(v368);
      }
      *(void *)v382 = v362;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
      *(void *)v382 = &v363;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
      if ((v386[23] & 0x80000000) != 0) {
        operator delete(*(void **)v386);
      }
      if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v388.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v366.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v222 = *v31 + 1;
      long long v13 = a1;
      Espresso::gradient_builder::build_gradient_segment(a1, v222, v370, a4, a5);
      std::string::basic_string[abi:ne180100]<0>(&__str, "cf_end");
      if (*(char *)(v26 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v359, *(const std::string::value_type **)(v26 + 16), *(void *)(v26 + 24));
      }
      else
      {
        *(_OWORD *)&v359.__r_.__value_.__l.__data_ = *(_OWORD *)v253;
        v359.__r_.__value_.__r.__words[2] = *(void *)(v26 + 32);
      }
      get_layer_grad_name((uint64_t)&v388, (const void **)&v359.__r_.__value_.__l.__data_);
      memset(v358, 0, sizeof(v358));
      memset(v357, 0, sizeof(v357));
      Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v360, a5, (uint64_t)&__str, (uint64_t)&v388, (uint64_t)v382, 0, 0, v357);
      if (v361) {
        nitro::nitro_function::nitro_function(v361);
      }
      *(void *)uint64_t v386 = v357;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
      *(void *)uint64_t v386 = v358;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
      if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v388.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v359.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      size_t v223 = (uint64_t *)v304.__r_.__value_.__r.__words[2];
      if (v304.__r_.__value_.__r.__words[2])
      {
        do
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v223 + 2);
          float32x4_t v224 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v223 + 2, (uint64_t)&std::piecewise_construct, (long long **)&__str);
          if ((char *)v224[8] - (char *)v224[7] != 24)
          {
            std::string v239 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
            Espresso::invalid_state_error::invalid_state_error(v239);
          }
          if (*((char *)v223 + 63) < 0) {
            std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v223[5], v223[6]);
          }
          else {
            std::string __str = *(std::string *)(v223 + 5);
          }
          *(void *)v382 = v223 + 2;
          uint64_t v225 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v223 + 2, (uint64_t)&std::piecewise_construct, (long long **)v382)[7];
          if (*((char *)v225 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v376, (const std::string::value_type *)*v225, v225[1]);
          }
          else
          {
            long long v226 = *(_OWORD *)v225;
            *(void *)&long long v377 = v225[2];
            long long v376 = v226;
          }
          memset(v386, 0, 24);
          *(void *)v382 = v386;
          v382[8] = 0;
          *(void *)uint64_t v386 = operator new(0x30uLL);
          *(void *)&v386[8] = *(void *)v386;
          *(void *)&v386[16] = *(void *)v386 + 48;
          *(void *)&v386[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v386[16], (long long *)&__str, (long long *)((char *)&v377 + 8), *(std::string **)v386);
          merge_grads_with_phi((uint64_t)&v388, a5, (uint64_t *)v386, (const void **)v223 + 2, 1);
          *(void *)v382 = v386;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
          for (uint64_t m = 0; m != -48; m -= 24)
          {
            if (*((char *)&v377 + m + 7) < 0) {
              operator delete(*(void **)((char *)&__str + m + 24));
            }
          }
          if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, v388.__r_.__value_.__l.__data_, v388.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = v388;
          }
          *(void *)uint64_t v386 = v223 + 2;
          uint64_t v228 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v223 + 2, (uint64_t)&std::piecewise_construct, (long long **)v386);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v228 + 7), &__str, &v376, 1uLL);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v388.__r_.__value_.__l.__data_);
          }
          size_t v223 = (uint64_t *)*v223;
        }
        while (v223);
      }
      goto LABEL_569;
    }
    unint64_t v249 = v27;
    uint64_t v49 = *(void *)(*(void *)(v22[10] + 32) + 16 * v27[4]);
    if (*(char *)(v49 + 39) < 0) {
      std::string::__init_copy_ctor_external(&v335, *(const std::string::value_type **)(v49 + 16), *(void *)(v49 + 24));
    }
    else {
      std::string v335 = *(std::string *)(v49 + 16);
    }
    layer_grad_name = (Espresso *)get_layer_grad_name((uint64_t)&v336, (const void **)&v335.__r_.__value_.__l.__data_);
    if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v335.__r_.__value_.__l.__data_);
    }
    int8x8_t v95 = (int8x8_t)v248[22];
    if (!*(void *)&v95) {
      goto LABEL_596;
    }
    unint64_t v96 = v249[4];
    uint8x8_t v97 = (uint8x8_t)vcnt_s8(v95);
    v97.i16[0] = vaddlv_u8(v97);
    if (v97.u32[0] > 1uLL)
    {
      unint64_t v98 = v249[4];
      if (v96 >= *(void *)&v95) {
        unint64_t v98 = v96 % *(void *)&v95;
      }
    }
    else
    {
      unint64_t v98 = (*(void *)&v95 - 1) & v96;
    }
    uint64_t v99 = *(void **)(v248[21] + 8 * v98);
    if (!v99 || (uint64_t v100 = (void *)*v99) == 0) {
LABEL_596:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    while (1)
    {
      unint64_t v101 = v100[1];
      if (v96 == v101) {
        break;
      }
      if (v97.u32[0] > 1uLL)
      {
        if (v101 >= *(void *)&v95) {
          v101 %= *(void *)&v95;
        }
      }
      else
      {
        v101 &= *(void *)&v95 - 1;
      }
      if (v101 != v98) {
        goto LABEL_596;
      }
LABEL_132:
      uint64_t v100 = (void *)*v100;
      if (!v100) {
        goto LABEL_596;
      }
    }
    if (v100[2] != v96) {
      goto LABEL_132;
    }
    std::string::size_type v252 = v100[3];
    unint64_t v254 = v100[4];
    unsigned int v102 = Espresso::espresso_os_log_subsystem(layer_grad_name, v94);
    if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
    {
      LODWORD(__str.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v252;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v254;
      _os_log_impl(&dword_1920CB000, v102, OS_LOG_TYPE_INFO, "loop body boundary: [%lu, %lu]\n", (uint8_t *)&__str, 0x16u);
    }

    segment_input_blob_indices((char **)&__p, v21, v256, v252 + 1, v254);
    std::unordered_set<std::string>::unordered_set((uint64_t)v332, (uint64_t)v256);
    fill_and_extract_grads_for_inputs((uint64_t)&v388, (uint64_t)v21, (int *)__p, v334, a5, a4, v259, v332);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v332);
    memset(v386, 0, sizeof(v386));
    int v387 = 1065353216;
    uint64_t v104 = (int *)__p;
    uint64_t v105 = v334;
    while (v104 != v105)
    {
      LODWORD(v378.__r_.__value_.__l.__data_) = *v104;
      int data = (int)v378.__r_.__value_.__l.__data_;
      uint64_t v107 = v21[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v21[8] - v107) >> 3) <= SLODWORD(v378.__r_.__value_.__l.__data_)) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v108 = v107 + 24 * SLODWORD(v378.__r_.__value_.__l.__data_);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v256, v108))
      {
        if (*(char *)(v108 + 23) >= 0) {
          size_t v109 = *(unsigned __int8 *)(v108 + 23);
        }
        else {
          size_t v109 = *(void *)(v108 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v304, v109 + 6);
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v110 = &v304;
        }
        else {
          uint64_t v110 = (std::string *)v304.__r_.__value_.__r.__words[0];
        }
        if (v109)
        {
          if (*(char *)(v108 + 23) >= 0) {
            uint64_t v111 = (const void *)v108;
          }
          else {
            uint64_t v111 = *(const void **)v108;
          }
          memmove(v110, v111, v109);
        }
        strcpy((char *)v110 + v109, "_grad_");
        if ((v338 & 0x80u) == 0) {
          uint64_t v112 = (const std::string::value_type *)&v336;
        }
        else {
          uint64_t v112 = (const std::string::value_type *)v336;
        }
        if ((v338 & 0x80u) == 0) {
          std::string::size_type v113 = v338;
        }
        else {
          std::string::size_type v113 = v337;
        }
        uint64_t v114 = std::string::append(&v304, v112, v113);
        long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v304.__r_.__value_.__l.__data_);
        }
        uint64_t v116 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v386, data, &v378);
        std::string::operator=(v116 + 1, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      ++v104;
    }
    int8x8_t v117 = (int8x8_t)v248[27];
    unsigned int v118 = a1;
    if (!*(void *)&v117) {
      goto LABEL_597;
    }
    unint64_t v119 = v249[4];
    uint8x8_t v120 = (uint8x8_t)vcnt_s8(v117);
    v120.i16[0] = vaddlv_u8(v120);
    if (v120.u32[0] > 1uLL)
    {
      unint64_t v121 = v249[4];
      if (v119 >= *(void *)&v117) {
        unint64_t v121 = v119 % *(void *)&v117;
      }
    }
    else
    {
      unint64_t v121 = (*(void *)&v117 - 1) & v119;
    }
    unsigned __int8 v122 = *(const std::string ***)(v248[26] + 8 * v121);
    if (!v122 || (long long v123 = *v122) == 0) {
LABEL_597:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    while (2)
    {
      std::string::size_type v124 = v123->__r_.__value_.__l.__size_;
      if (v119 != v124)
      {
        if (v120.u32[0] > 1uLL)
        {
          if (v124 >= *(void *)&v117) {
            v124 %= *(void *)&v117;
          }
        }
        else
        {
          v124 &= *(void *)&v117 - 1;
        }
        if (v124 != v121) {
          goto LABEL_597;
        }
LABEL_177:
        long long v123 = (const std::string *)v123->__r_.__value_.__r.__words[0];
        if (!v123) {
          goto LABEL_597;
        }
        continue;
      }
      break;
    }
    if (v123->__r_.__value_.__r.__words[2] != v119) {
      goto LABEL_177;
    }
    if ((v338 & 0x80u) == 0) {
      size_t v125 = v338;
    }
    else {
      size_t v125 = v337;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v125 + 6);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v125)
    {
      if ((v338 & 0x80u) == 0) {
        unsigned int v127 = &v336;
      }
      else {
        unsigned int v127 = v336;
      }
      memmove(p_s, v127, v125);
    }
    strcpy((char *)p_s + v125, "_count");
    __str.__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      *(void *)&long long v376 = *((void *)&__s.__r_.__value_.__l + 2);
    }
    *((void *)&v376 + 1) = 1;
    Espresso::ssa_blob_name::repr(&v330, (uint64_t)&__str);
    if (SBYTE7(v376) < 0) {
      operator delete((void *)__str.__r_.__value_.__l.__size_);
    }
    __str.__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      *(void *)&long long v376 = *((void *)&__s.__r_.__value_.__l + 2);
    }
    *((void *)&v376 + 1) = 2;
    Espresso::ssa_blob_name::repr(&v329, (uint64_t)&__str);
    if (SBYTE7(v376) < 0) {
      operator delete((void *)__str.__r_.__value_.__l.__size_);
    }
    Espresso::pop_stack(a5, v123 + 1, (uint64_t)&__s, 0);
    std::string::basic_string[abi:ne180100]<0>(&v304, "phi_virtual");
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = __s;
    }
    if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v376, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v376 = *(_OWORD *)&v329.__r_.__value_.__l.__data_;
      *(void *)&long long v377 = *((void *)&v329.__r_.__value_.__l + 2);
    }
    uint64_t v325 = 0;
    int v324 = 0;
    std::vector<std::string> v326 = 0;
    v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v324;
    v378.__r_.__value_.__s.__data_[8] = 0;
    int v324 = (std::string *)operator new(0x30uLL);
    uint64_t v325 = v324;
    std::vector<std::string> v326 = v324 + 2;
    uint64_t v325 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v326, (long long *)&__str, (long long *)((char *)&v377 + 8), v324);
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v378, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
    }
    else {
      std::string v378 = v330;
    }
    std::string::size_type v322 = 0;
    std::string::size_type v321 = 0;
    uint64_t v323 = 0;
    *(void *)v382 = &v321;
    v382[8] = 0;
    std::string::size_type v321 = (std::string *)operator new(0x18uLL);
    std::string::size_type v322 = v321;
    uint64_t v323 = v321 + 1;
    std::string::size_type v322 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v323, (long long *)&v378, (long long *)&v379, v321);
    Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>(&v327, a5, (uint64_t)&v304, (uint64_t)&v330, (uint64_t)&v308, (uint64_t)v324, (uint64_t)v325, (uint64_t *)&v321);
    if (v328) {
      nitro::nitro_function::nitro_function(v328);
    }
    *(void *)v382 = &v321;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
    if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v324;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v378);
    for (uint64_t n = 0; n != -48; n -= 24)
    {
      if (*((char *)&v377 + n + 7) < 0) {
        operator delete(*(void **)((char *)&__str + n + 24));
      }
    }
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v304.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "cf_loop");
    LODWORD(v378.__r_.__value_.__l.__data_) = 0;
    memset(v318, 0, sizeof(v318));
    memset(v317, 0, sizeof(v317));
    Espresso::sequential_builder::add<Espresso::cf_loop_params_t>(&v319, a5, (uint64_t)&__str, (uint64_t)&v336, (uint64_t)&v378, 0, 0, v317);
    if (v320) {
      nitro::nitro_function::nitro_function(v320);
    }
    v304.__r_.__value_.__r.__words[0] = (std::string::size_type)v317;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
    v304.__r_.__value_.__r.__words[0] = (std::string::size_type)v318;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[2] = 897988541;
    LOBYTE(v376) = 0;
    *(void *)((char *)&v377 + 4) = 0;
    __str.__r_.__value_.__r.__words[0] = 0;
    __str.__r_.__value_.__l.__size_ = 3212836864;
    std::string::basic_string[abi:ne180100]<0>(&v304, "elementwise");
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v378, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
    }
    else {
      std::string v378 = v330;
    }
    long long v313 = 0;
    std::string::size_type v312 = 0;
    uint64_t v314 = 0;
    *(void *)v382 = &v312;
    v382[8] = 0;
    std::string::size_type v312 = (std::string *)operator new(0x18uLL);
    long long v313 = v312;
    uint64_t v314 = v312 + 1;
    long long v313 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v314, (long long *)&v378, (long long *)&v379, v312);
    if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v382, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)v382 = v329;
    }
    std::string v310 = 0;
    uint64_t v309 = 0;
    uint64_t v311 = 0;
    v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
    v308.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v309 = (std::string *)operator new(0x18uLL);
    std::string v310 = v309;
    uint64_t v311 = v309 + 1;
    std::string v310 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v311, (long long *)v382, (long long *)&v382[24], v309);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v315, a5, (uint64_t)&v304, (uint64_t)&v330, (uint64_t)&__str, (uint64_t)v312, (uint64_t)v313, (uint64_t *)&v309);
    if (v316) {
      nitro::nitro_function::nitro_function(v316);
    }
    v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
    if ((v382[23] & 0x80000000) != 0) {
      operator delete(*(void **)v382);
    }
    *(void *)v382 = &v312;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v382);
    if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v304.__r_.__value_.__l.__data_);
    }
    if ((v338 & 0x80u) == 0) {
      size_t v129 = v338;
    }
    else {
      size_t v129 = v337;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v308, v129 + 5);
    if ((v308.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v130 = &v308;
    }
    else {
      uint64_t v130 = (std::string *)v308.__r_.__value_.__r.__words[0];
    }
    if (v129)
    {
      if ((v338 & 0x80u) == 0) {
        uint64_t v131 = &v336;
      }
      else {
        uint64_t v131 = v336;
      }
      memmove(v130, v131, v129);
    }
    strcpy((char *)v130 + v129, "_cond");
    v304.__r_.__value_.__r.__words[2] = 897988541;
    char v305 = 0;
    int v307 = 0;
    int v306 = 0;
    *(_OWORD *)&v304.__r_.__value_.__l.__data_ = 0x6AuLL;
    std::string::basic_string[abi:ne180100]<0>(&v378, "elementwise");
    if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v382, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)v382 = v329;
    }
    char v300 = 0;
    std::string::size_type v299 = 0;
    int v301 = 0;
    v384.__r_.__value_.__r.__words[0] = (std::string::size_type)&v299;
    v384.__r_.__value_.__s.__data_[8] = 0;
    std::string::size_type v299 = (std::string *)operator new(0x18uLL);
    char v300 = v299;
    int v301 = v299 + 1;
    char v300 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v301, (long long *)v382, (long long *)&v382[24], v299);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v384, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
    }
    else {
      std::string v384 = v308;
    }
    std::string::size_type v297 = 0;
    uint64_t v296 = 0;
    uint64_t v298 = 0;
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
    v380.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v296 = (std::string *)operator new(0x18uLL);
    std::string::size_type v297 = v296;
    uint64_t v298 = v296 + 1;
    std::string::size_type v297 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v298, (long long *)&v384, (long long *)&v385, v296);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v302, a5, (uint64_t)&v378, (uint64_t)&v308, (uint64_t)&v304, (uint64_t)v299, (uint64_t)v300, (uint64_t *)&v296);
    if (v303) {
      nitro::nitro_function::nitro_function(v303);
    }
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v384.__r_.__value_.__l.__data_);
    }
    v384.__r_.__value_.__r.__words[0] = (std::string::size_type)&v299;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v384);
    if ((v382[23] & 0x80000000) != 0) {
      operator delete(*(void **)v382);
    }
    if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v378, "cf_if");
    if ((v338 & 0x80u) == 0) {
      size_t v132 = v338;
    }
    else {
      size_t v132 = v337;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v382, v132 + 8);
    if (v382[23] >= 0) {
      uint64_t v133 = v382;
    }
    else {
      uint64_t v133 = *(unsigned char **)v382;
    }
    if (v132)
    {
      if ((v338 & 0x80u) == 0) {
        unsigned int v134 = &v336;
      }
      else {
        unsigned int v134 = v336;
      }
      memmove(v133, v134, v132);
    }
    strcpy(&v133[v132], "_body_if");
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v384, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
    }
    else {
      std::string v384 = v308;
    }
    std::string::size_type v292 = 0;
    std::string::size_type v291 = 0;
    std::string v293 = 0;
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
    v380.__r_.__value_.__s.__data_[8] = 0;
    std::string::size_type v291 = (std::string *)operator new(0x18uLL);
    std::string::size_type v292 = v291;
    std::string v293 = v291 + 1;
    std::string::size_type v292 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v293, (long long *)&v384, (long long *)&v385, v291);
    memset(v290, 0, sizeof(v290));
    Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v294, a5, (uint64_t)&v378, (uint64_t)v382, (uint64_t)&v373, (uint64_t)v291, (uint64_t)v292, v290);
    if (v295) {
      nitro::nitro_function::nitro_function(v295);
    }
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v290;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v384.__r_.__value_.__l.__data_);
    }
    if ((v382[23] & 0x80000000) != 0) {
      operator delete(*(void **)v382);
    }
    if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    memset(v382, 0, sizeof(v382));
    int v383 = 1065353216;
    unint64_t v135 = (int *)__p;
    std::string v136 = v334;
    while (2)
    {
      if (v135 != v136)
      {
        unint64_t v137 = *v135;
        uint64_t v138 = v21[7];
        if (0xAAAAAAAAAAAAAAABLL * ((v21[8] - v138) >> 3) <= v137) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        char v139 = std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v386, *v135, v135);
        unint64_t v140 = *v135;
        uint64_t v141 = v21[19];
        if (v140 >= (v21[20] - v141) >> 3) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v142 = v139;
        unsigned int v143 = (const void **)(v138 + 24 * (int)v137);
        std::string::size_type v144 = *(void *)(v141 + 8 * v140);
        uint64_t v145 = (long long *)(v139 + 3);
        if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v259, (uint64_t)v143))
        {
          if (v144 >= v252 && v144 < v254)
          {
            uint64_t v152 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, v143);
            unsigned int v118 = a1;
            if (v257 != v152) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("blob with gradient from phi has inflow gradient");
            }
            v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
            uint64_t v153 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v259, (uint64_t)v143, (uint64_t)&std::piecewise_construct, (long long **)&v378);
            if (*((char *)v153 + 63) < 0) {
              std::string::__init_copy_ctor_external(&v378, (const std::string::value_type *)v153[5], v153[6]);
            }
            else {
              std::string v378 = *(std::string *)(v153 + 5);
            }
            if (*((char *)v142 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v379, (const std::string::value_type *)v142[3], v142[4]);
            }
            else
            {
              long long v157 = *v145;
              v379.__r_.__value_.__r.__words[2] = v142[5];
              *(_OWORD *)&v379.__r_.__value_.__l.__data_ = v157;
            }
            memset(&v380, 0, sizeof(v380));
            int v373 = (std::string **)&v380;
            char v374 = 0;
            v380.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
            v380.__r_.__value_.__l.__size_ = v380.__r_.__value_.__r.__words[0];
            v380.__r_.__value_.__r.__words[2] = v380.__r_.__value_.__r.__words[0] + 48;
            v380.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v380.__r_.__value_.__r.__words[2], (long long *)&v378, (long long *)&v380, (std::string *)v380.__r_.__value_.__l.__data_);
            merge_grads_with_phi((uint64_t)&v384, a5, (uint64_t *)&v380, v143, 0);
            int v373 = (std::string **)&v380;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v373);
            for (iuint64_t i = 0; ii != -6; ii -= 3)
            {
              if (SHIBYTE(v379.__r_.__value_.__r.__words[ii + 2]) < 0) {
                operator delete(*(void **)((char *)&v378 + ii * 8 + 24));
              }
            }
            v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
            uint64_t v159 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v259, (uint64_t)v143, (uint64_t)&std::piecewise_construct, (long long **)&v378);
            std::string::operator=((std::string *)(v159 + 5), &v384);
            goto LABEL_319;
          }
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
          unsigned int v118 = a1;
          uint64_t v147 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v259, (uint64_t)v143, (uint64_t)&std::piecewise_construct, (long long **)&v378);
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
          uint64_t v148 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v382, (uint64_t)v143, (uint64_t)&std::piecewise_construct, (long long **)&v378);
          std::string::operator=((std::string *)(v148 + 5), (const std::string *)(v147 + 5));
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v259, (uint64_t)v143);
        }
        else
        {
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
          uint64_t v149 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v143, (uint64_t)&std::piecewise_construct, (long long **)&v378);
          unsigned int v118 = a1;
          if ((char *)v149[8] - (char *)v149[7] != 24)
          {
            long long v238 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
            Espresso::invalid_state_error::invalid_state_error(v238);
          }
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
          uint64_t v150 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v143, (uint64_t)&std::piecewise_construct, (long long **)&v378)[7];
          if (*((char *)v150 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v378, (const std::string::value_type *)*v150, v150[1]);
          }
          else
          {
            long long v151 = *(_OWORD *)v150;
            v378.__r_.__value_.__r.__words[2] = v150[2];
            *(_OWORD *)&v378.__r_.__value_.__l.__data_ = v151;
          }
          if (*((char *)v142 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v379, (const std::string::value_type *)v142[3], v142[4]);
          }
          else
          {
            long long v154 = *v145;
            v379.__r_.__value_.__r.__words[2] = v142[5];
            *(_OWORD *)&v379.__r_.__value_.__l.__data_ = v154;
          }
          memset(&v380, 0, sizeof(v380));
          int v373 = (std::string **)&v380;
          char v374 = 0;
          v380.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          v380.__r_.__value_.__l.__size_ = v380.__r_.__value_.__r.__words[0];
          v380.__r_.__value_.__r.__words[2] = v380.__r_.__value_.__r.__words[0] + 48;
          v380.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v380.__r_.__value_.__r.__words[2], (long long *)&v378, (long long *)&v380, (std::string *)v380.__r_.__value_.__l.__data_);
          merge_grads_with_phi((uint64_t)&v384, a5, (uint64_t *)&v380, v143, 0);
          int v373 = (std::string **)&v380;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v373);
          for (juint64_t j = 0; jj != -6; jj -= 3)
          {
            if (SHIBYTE(v379.__r_.__value_.__r.__words[jj + 2]) < 0) {
              operator delete(*(void **)((char *)&v378 + jj * 8 + 24));
            }
          }
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
          uint64_t v156 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v143, (uint64_t)&std::piecewise_construct, (long long **)&v378);
          std::string::operator=((std::string *)v156[7], &v384);
LABEL_319:
          if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v384.__r_.__value_.__l.__data_);
          }
        }
        ++v135;
        continue;
      }
      break;
    }
    Espresso::gradient_builder::build_gradient_segment(v118, v252 + 1, v254 - 1, a4, a5);
    uint64_t v160 = (int *)__p;
    char v161 = v334;
    while (v160 != v161)
    {
      unint64_t v162 = *v160;
      uint64_t v163 = v21[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v21[8] - v163) >> 3) <= v162) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v164 = std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v386, *v160, v160);
      uint64_t v165 = (const void **)(v163 + 24 * (int)v162);
      uint64_t v166 = v164 + 3;
      if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v259, (uint64_t)v165))
      {
        std::string::basic_string[abi:ne180100]<0>(&v378, "copy");
        int v287 = 0;
        v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
        uint64_t v167 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v259, (uint64_t)v165, (uint64_t)&std::piecewise_construct, (long long **)&v380);
        if (*((char *)v167 + 63) < 0) {
          std::string::__init_copy_ctor_external(&v384, (const std::string::value_type *)v167[5], v167[6]);
        }
        else {
          std::string v384 = *(std::string *)(v167 + 5);
        }
        uint64_t v285 = 0;
        unint64_t v284 = 0;
        unint64_t v286 = 0;
        v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
        v380.__r_.__value_.__s.__data_[8] = 0;
        unint64_t v284 = (std::string *)operator new(0x18uLL);
        uint64_t v285 = v284;
        unint64_t v286 = v284 + 1;
        uint64_t v285 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v286, (long long *)&v384, (long long *)&v385, v284);
        if (*((char *)v164 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v380, (const std::string::value_type *)v164[3], v164[4]);
        }
        else
        {
          *(_OWORD *)&v380.__r_.__value_.__l.__data_ = *v166;
          v380.__r_.__value_.__r.__words[2] = v164[5];
        }
        std::string::size_type v282 = 0;
        std::string::size_type v281 = 0;
        uint64_t v283 = 0;
        int v373 = &v281;
        char v374 = 0;
        std::string::size_type v281 = (std::string *)operator new(0x18uLL);
        std::string::size_type v282 = v281;
        uint64_t v283 = v281 + 1;
        std::string::size_type v282 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v283, (long long *)&v380, (long long *)&v381, v281);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v288, a5, (uint64_t)&v378, (uint64_t)(v164 + 3), (uint64_t)&v287, (uint64_t)v284, (uint64_t)v285, (uint64_t *)&v281);
        if (v289) {
          nitro::nitro_function::nitro_function(v289);
        }
        int v373 = &v281;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v373);
        if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v380.__r_.__value_.__l.__data_);
        }
        v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
        if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v384.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v378.__r_.__value_.__l.__data_);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v259, (uint64_t)v165);
      }
      else
      {
        if (v257 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, v165)|| (v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v165, unint64_t v168 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v165, (uint64_t)&std::piecewise_construct, (long long **)&v378), (char *)v168[8] - (char *)v168[7] != 24))
        {
          size_t v235 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
          Espresso::invalid_state_error::invalid_state_error(v235);
        }
        std::string::basic_string[abi:ne180100]<0>(&v378, "copy");
        int v287 = 0;
        v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
        int v169 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v165, (uint64_t)&std::piecewise_construct, (long long **)&v380)[7];
        if (*((char *)v169 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v384, (const std::string::value_type *)*v169, v169[1]);
        }
        else
        {
          long long v170 = *(_OWORD *)v169;
          v384.__r_.__value_.__r.__words[2] = v169[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v170;
        }
        uint64_t v277 = 0;
        long long v276 = 0;
        uint64_t v278 = 0;
        v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
        v380.__r_.__value_.__s.__data_[8] = 0;
        long long v276 = (std::string *)operator new(0x18uLL);
        uint64_t v277 = v276;
        uint64_t v278 = v276 + 1;
        uint64_t v277 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v278, (long long *)&v384, (long long *)&v385, v276);
        if (*((char *)v164 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v380, (const std::string::value_type *)v164[3], v164[4]);
        }
        else
        {
          *(_OWORD *)&v380.__r_.__value_.__l.__data_ = *v166;
          v380.__r_.__value_.__r.__words[2] = v164[5];
        }
        int v274 = 0;
        v273 = 0;
        unsigned int v275 = 0;
        int v373 = &v273;
        char v374 = 0;
        v273 = (std::string *)operator new(0x18uLL);
        int v274 = v273;
        unsigned int v275 = v273 + 1;
        int v274 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v275, (long long *)&v380, (long long *)&v381, v273);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v279, a5, (uint64_t)&v378, (uint64_t)(v164 + 3), (uint64_t)&v287, (uint64_t)v276, (uint64_t)v277, (uint64_t *)&v273);
        if (v280) {
          nitro::nitro_function::nitro_function(v280);
        }
        int v373 = &v273;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v373);
        if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v380.__r_.__value_.__l.__data_);
        }
        v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
        if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v384.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v378.__r_.__value_.__l.__data_);
        }
      }
      if (*((char *)v164 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v378, (const std::string::value_type *)v164[3], v164[4]);
      }
      else
      {
        *(_OWORD *)&v378.__r_.__value_.__l.__data_ = *v166;
        v378.__r_.__value_.__r.__words[2] = v164[5];
      }
      v384.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
      int v171 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v165, (uint64_t)&std::piecewise_construct, (long long **)&v384);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v171 + 7), &v378, (long long *)&v379, 1uLL);
      if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v378.__r_.__value_.__l.__data_);
      }
      ++v160;
    }
    int v287 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v378, "cf_jump");
    if ((v338 & 0x80u) == 0) {
      size_t v172 = v338;
    }
    else {
      size_t v172 = v337;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v384, v172 + 5);
    long long v13 = a1;
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v173 = &v384;
    }
    else {
      uint64_t v173 = (std::string *)v384.__r_.__value_.__r.__words[0];
    }
    if (v172)
    {
      if ((v338 & 0x80u) == 0) {
        unsigned int v174 = &v336;
      }
      else {
        unsigned int v174 = v336;
      }
      memmove(v173, v174, v172);
    }
    strcpy((char *)v173 + v172, "_jump");
    memset(v270, 0, sizeof(v270));
    memset(v269, 0, sizeof(v269));
    Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v271, a5, (uint64_t)&v378, (uint64_t)&v384, (uint64_t)&v287, 0, 0, v269);
    if (v272) {
      nitro::nitro_function::nitro_function(v272);
    }
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v269;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v270;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v384.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v378, "cf_end");
    if ((v338 & 0x80u) == 0) {
      size_t v175 = v338;
    }
    else {
      size_t v175 = v337;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v384, v175 + 9);
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v176 = &v384;
    }
    else {
      uint64_t v176 = (std::string *)v384.__r_.__value_.__r.__words[0];
    }
    if (v175)
    {
      if ((v338 & 0x80u) == 0) {
        uint64_t v177 = &v336;
      }
      else {
        uint64_t v177 = v336;
      }
      memmove(v176, v177, v175);
    }
    strcpy((char *)v176 + v175, "_body_end");
    memset(v266, 0, sizeof(v266));
    memset(v265, 0, sizeof(v265));
    Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v267, a5, (uint64_t)&v378, (uint64_t)&v384, (uint64_t)&v373, 0, 0, v265);
    if (v268) {
      nitro::nitro_function::nitro_function(v268);
    }
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v266;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v384.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v378, "cf_end");
    if ((v338 & 0x80u) == 0) {
      size_t v178 = v338;
    }
    else {
      size_t v178 = v337;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v384, v178 + 4);
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v179 = &v384;
    }
    else {
      unint64_t v179 = (std::string *)v384.__r_.__value_.__r.__words[0];
    }
    if (v178)
    {
      if ((v338 & 0x80u) == 0) {
        long long v180 = &v336;
      }
      else {
        long long v180 = v336;
      }
      memmove(v179, v180, v178);
    }
    strcpy((char *)v179 + v178, "_end");
    memset(v262, 0, sizeof(v262));
    memset(v261, 0, sizeof(v261));
    Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v263, a5, (uint64_t)&v378, (uint64_t)&v384, (uint64_t)&v373, 0, 0, v261);
    if (v264) {
      nitro::nitro_function::nitro_function(v264);
    }
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v261;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v380);
    if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v384.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    long long v181 = (int *)__p;
    uint64_t v182 = v334;
    if (__p != v334)
    {
      do
      {
        unint64_t v183 = *v181;
        uint64_t v184 = v21[7];
        if (0xAAAAAAAAAAAAAAABLL * ((v21[8] - v184) >> 3) <= v183) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        long long v185 = (const void **)(v184 + 24 * (int)v183);
        if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v382, (uint64_t)v185))
        {
          long long v186 = std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v386, *v181, v181);
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
          long long v187 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v185, (uint64_t)&std::piecewise_construct, (long long **)&v378)[7];
          if (*((char *)v186 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v378, (const std::string::value_type *)v186[3], v186[4]);
          }
          else {
            std::string v378 = *(std::string *)((unsigned char *)v186 + 1);
          }
          if (*((char *)v187 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v379, (const std::string::value_type *)*v187, v187[1]);
          }
          else
          {
            long long v188 = *(_OWORD *)v187;
            v379.__r_.__value_.__r.__words[2] = v187[2];
            *(_OWORD *)&v379.__r_.__value_.__l.__data_ = v188;
          }
          memset(&v380, 0, sizeof(v380));
          int v373 = (std::string **)&v380;
          char v374 = 0;
          v380.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          v380.__r_.__value_.__l.__size_ = v380.__r_.__value_.__r.__words[0];
          v380.__r_.__value_.__r.__words[2] = v380.__r_.__value_.__r.__words[0] + 48;
          v380.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v380.__r_.__value_.__r.__words[2], (long long *)&v378, (long long *)&v380, (std::string *)v380.__r_.__value_.__l.__data_);
          merge_grads_with_phi((uint64_t)&v384, a5, (uint64_t *)&v380, v185, 0);
          if (*((char *)v187 + 23) < 0) {
            operator delete((void *)*v187);
          }
          long long v189 = *(_OWORD *)&v384.__r_.__value_.__l.__data_;
          void v187[2] = v384.__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v187 = v189;
          *((unsigned char *)&v384.__r_.__value_.__s + 23) = 0;
          v384.__r_.__value_.__s.__data_[0] = 0;
          int v373 = (std::string **)&v380;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v373);
          for (kuint64_t k = 0; kk != -6; kk -= 3)
          {
            if (SHIBYTE(v379.__r_.__value_.__r.__words[kk + 2]) < 0) {
              operator delete(*(void **)((char *)&v378 + kk * 8 + 24));
            }
          }
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v382, (uint64_t)v185);
        }
        ++v181;
        long long v13 = a1;
      }
      while (v181 != v182);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v382);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v308.__r_.__value_.__l.__data_);
    }
    long long v22 = a5;
    if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v329.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v330.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)v386);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v388);
    if (__p)
    {
      uint64_t v334 = (int *)__p;
      operator delete(__p);
    }
    if ((char)v338 < 0) {
      operator delete(v336);
    }
LABEL_573:
    uint64_t v27 = v249;
LABEL_574:
    unint64_t v370 = v27[4];
LABEL_592:
    if (v250) {
      nitro::nitro_function::nitro_function(v250);
    }
    unint64_t v6 = v370;
  }
  while (v370 > v372[0]);
}

void sub_19285E53C()
{
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    operator delete((void *)STACK[0x790]);
  }
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (v2) {
    __cxa_free_exception(v1);
  }
  if (v0) {
    JUMPOUT(0x19285F1C4);
  }
  JUMPOUT(0x19285F1C8);
}

void sub_19285E6B0()
{
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(v0 - 208);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v0 - 160);
  uint64_t v1 = (void *)STACK[0x4D8];
  if (STACK[0x4D8])
  {
    STACK[0x4E0] = (unint64_t)v1;
    operator delete(v1);
  }
  if (SLOBYTE(STACK[0x51F]) < 0) {
    JUMPOUT(0x19285F1B8);
  }
  JUMPOUT(0x19285F1BCLL);
}

void sub_19285E6B8()
{
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    operator delete((void *)STACK[0x790]);
  }
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  JUMPOUT(0x19285F160);
}

void sub_19285E6CC()
{
  if (SLOBYTE(STACK[0x36F]) < 0) {
    JUMPOUT(0x19285F0F0);
  }
  JUMPOUT(0x19285F0F4);
}

void sub_19285E6F0()
{
  STACK[0x7D0] = (unint64_t)&STACK[0x440];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x7D0]);
  uint64_t v0 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x790] + v0 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x790] + v0 + 24));
    }
    v0 -= 24;
    if (v0 == -48) {
      JUMPOUT(0x19285EB50);
    }
  }
}

void sub_19285E6FC()
{
}

void sub_19285E710()
{
  *(void *)(v0 - 208) = &STACK[0x520];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  *(void *)(v0 - 208) = &STACK[0x538];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  if (SLOBYTE(STACK[0x567]) < 0) {
    JUMPOUT(0x19285E844);
  }
  JUMPOUT(0x19285F00CLL);
}

void sub_19285E760()
{
  STACK[0x600] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x820]);
  if (*(char *)(v1 - 185) < 0) {
    operator delete(*(void **)(v1 - 208));
  }
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (SLOBYTE(STACK[0x627]) < 0) {
    operator delete((void *)STACK[0x610]);
  }
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    operator delete((void *)STACK[0x790]);
  }
  JUMPOUT(0x19285F12CLL);
}

void sub_19285E770()
{
}

void sub_19285E778()
{
  if ((SLOBYTE(STACK[0x5C7]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x7A7]) < 0) {
      JUMPOUT(0x19285F0B0);
    }
    JUMPOUT(0x19285F12CLL);
  }
  JUMPOUT(0x19285E844);
}

void sub_19285E780()
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x820]);
  if (*(char *)(v0 - 185) < 0) {
    operator delete(*(void **)(v0 - 208));
  }
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  if (SLOBYTE(STACK[0x627]) < 0) {
    operator delete((void *)STACK[0x610]);
  }
  JUMPOUT(0x19285F00CLL);
}

void sub_19285E788()
{
}

void sub_19285E7A8()
{
  *(void *)(v0 - 208) = &STACK[0x580];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  *(void *)(v0 - 208) = &STACK[0x598];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  if (SLOBYTE(STACK[0x5C7]) < 0) {
    JUMPOUT(0x19285E844);
  }
  JUMPOUT(0x19285F00CLL);
}

void sub_19285E7EC()
{
}

void sub_19285E7F4()
{
  STACK[0x820] = (unint64_t)&STACK[0x5E0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x820]);
  STACK[0x820] = (unint64_t)&STACK[0x5F8];
  JUMPOUT(0x19285E810);
}

void sub_19285E8B4()
{
}

void sub_19285E8D0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x19285F1C8);
}

void sub_19285E8EC()
{
  STACK[0x800] = (unint64_t)&STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x800]);
  STACK[0x800] = (unint64_t)&STACK[0x228];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x800]);
  if (*(char *)(v0 - 217) < 0) {
    operator delete(*(void **)(v0 - 240));
  }
  JUMPOUT(0x19285F0CCLL);
}

void sub_19285E918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x800] = (unint64_t)&a67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x800]);
  STACK[0x800] = (unint64_t)&a70;
  JUMPOUT(0x19285EF48);
}

void sub_19285E934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  STACK[0x800] = (unint64_t)&a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x800]);
  STACK[0x800] = (unint64_t)&a62;
  JUMPOUT(0x19285EF48);
}

void sub_19285E954()
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x800]);
  if (*(char *)(v0 - 217) < 0) {
    operator delete(*(void **)(v0 - 240));
  }
  JUMPOUT(0x19285EB8CLL);
}

void sub_19285E95C()
{
  STACK[0x820] = (unint64_t)&STACK[0x428];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x820]);
  if (SLOBYTE(STACK[0x7E7]) < 0) {
    operator delete((void *)STACK[0x7D0]);
  }
  STACK[0x7D0] = (unint64_t)&STACK[0x440];
  JUMPOUT(0x19285EB20);
}

void sub_19285E96C()
{
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    JUMPOUT(0x19285F0F0);
  }
  JUMPOUT(0x19285F0F4);
}

void sub_19285E9F4()
{
  STACK[0x800] = (unint64_t)&STACK[0x2D8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x800]);
  STACK[0x800] = (unint64_t)&STACK[0x2F0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x800]);
  if (*(char *)(v0 - 217) < 0) {
    operator delete(*(void **)(v0 - 240));
  }
  JUMPOUT(0x19285EB8CLL);
}

void sub_19285EA14()
{
  STACK[0x338] = v0;
  JUMPOUT(0x19285EB84);
}

void sub_19285EA20()
{
}

void sub_19285EA2C()
{
}

void sub_19285EA34()
{
  STACK[0x390] = (unint64_t)&STACK[0x3A8];
  JUMPOUT(0x19285EA40);
}

void sub_19285EA7C()
{
  STACK[0x448] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x7D0]);
  uint64_t v1 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x790] + v1 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x790] + v1 + 24));
    }
    v1 -= 24;
    if (v1 == -48) {
      JUMPOUT(0x19285EB50);
    }
  }
}

void sub_19285EA88()
{
}

void sub_19285EA90()
{
  STACK[0x358] = (unint64_t)&STACK[0x3E8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  STACK[0x358] = (unint64_t)&STACK[0x400];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    operator delete((void *)STACK[0x790]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  JUMPOUT(0x19285F114);
}

void sub_19285EAC4()
{
  if (SLOBYTE(STACK[0x7E7]) < 0) {
    operator delete((void *)STACK[0x7D0]);
  }
  JUMPOUT(0x19285EB10);
}

void sub_19285EACC()
{
  STACK[0x2F8] = v0;
  JUMPOUT(0x19285EAD4);
}

void sub_19285EAF0()
{
  STACK[0x430] = v0;
  JUMPOUT(0x19285EAF8);
}

void sub_19285EBB0()
{
}

void sub_19285EBC0()
{
}

void sub_19285EBCC()
{
  if (SLOBYTE(STACK[0x507]) < 0) {
    JUMPOUT(0x19285F1B8);
  }
  JUMPOUT(0x19285F1BCLL);
}

void sub_19285EBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    JUMPOUT(0x19285F1B8);
  }
  JUMPOUT(0x19285F1BCLL);
}

void sub_19285EC08()
{
}

void sub_19285EC10()
{
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x19285F0B0);
  }
  JUMPOUT(0x19285F12CLL);
}

void sub_19285EC7C()
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x820]);
  uint64_t v0 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x790] + v0 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x790] + v0 + 24));
    }
    v0 -= 24;
    if (v0 == -48) {
      JUMPOUT(0x19285F12CLL);
    }
  }
}

void sub_19285ECDC()
{
  STACK[0x780] = (unint64_t)&STACK[0x800];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x780]);
  uint64_t v0 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7D0] + v0 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x7D0] + v0 + 24));
    }
    v0 -= 24;
    if (v0 == -48) {
      JUMPOUT(0x19285F0DCLL);
    }
  }
}

void sub_19285ED40()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x19285F12CLL);
}

void sub_19285ED70()
{
  STACK[0x780] = (unint64_t)&STACK[0x250];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x780]);
  if (SLOBYTE(STACK[0x817]) < 0) {
    operator delete((void *)STACK[0x800]);
  }
  JUMPOUT(0x19285EF38);
}

void sub_19285EDB4()
{
  STACK[0x270] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x800]);
  if (*(char *)(v1 - 217) < 0) {
    operator delete(*(void **)(v1 - 240));
  }
  JUMPOUT(0x19285F0CCLL);
}

void sub_19285EDC0()
{
  STACK[0x780] = (unint64_t)&STACK[0x800];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x780]);
  uint64_t v0 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7D0] + v0 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x7D0] + v0 + 24));
    }
    v0 -= 24;
    if (v0 == -48) {
      JUMPOUT(0x19285F0DCLL);
    }
  }
}

void sub_19285EE1C()
{
  STACK[0x820] = v0 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x820]);
  uint64_t v1 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x790] + v1 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x790] + v1 + 24));
    }
    v1 -= 24;
    if (v1 == -48) {
      JUMPOUT(0x19285F19CLL);
    }
  }
}

void sub_19285EE9C()
{
  if (SLOBYTE(STACK[0x817]) < 0) {
    operator delete((void *)STACK[0x800]);
  }
  JUMPOUT(0x19285EF38);
}

void sub_19285EF6C()
{
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(v0 - 208);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v0 - 160);
    uint64_t v1 = (void *)STACK[0x4D8];
    if (STACK[0x4D8])
    {
      STACK[0x4E0] = (unint64_t)v1;
      operator delete(v1);
    }
    if (SLOBYTE(STACK[0x51F]) < 0) {
      JUMPOUT(0x19285F1B8);
    }
    JUMPOUT(0x19285F1BCLL);
  }
  JUMPOUT(0x19285F120);
}

void sub_19285EF84()
{
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    JUMPOUT(0x19285F068);
  }
  JUMPOUT(0x19285F19CLL);
}

void sub_19285EF9C()
{
  *(void *)(v1 - 200) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x820]);
  uint64_t v2 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x790] + v2 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x790] + v2 + 24));
    }
    v2 -= 24;
    if (v2 == -48) {
      JUMPOUT(0x19285F12CLL);
    }
  }
}

void sub_19285EFF0()
{
  if (*(char *)(v0 - 217) < 0) {
    JUMPOUT(0x19285F0D8);
  }
  JUMPOUT(0x19285F0DCLL);
}

void sub_19285F040()
{
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  JUMPOUT(0x19285F19CLL);
}

void sub_19285F078()
{
  if ((SLOBYTE(STACK[0x7A7]) & 0x80000000) == 0)
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(v0 - 208);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v0 - 160);
    uint64_t v1 = (void *)STACK[0x4D8];
    if (STACK[0x4D8])
    {
      STACK[0x4E0] = (unint64_t)v1;
      operator delete(v1);
    }
    if (SLOBYTE(STACK[0x51F]) < 0) {
      JUMPOUT(0x19285F1B8);
    }
    JUMPOUT(0x19285F1BCLL);
  }
  JUMPOUT(0x19285F120);
}

void sub_19285F090()
{
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    operator delete((void *)STACK[0x790]);
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x19285F0B0);
  }
  JUMPOUT(0x19285F12CLL);
}

void sub_19285F0C0()
{
}

void sub_19285F0C8()
{
  if (SLOBYTE(STACK[0x7E7]) < 0) {
    operator delete((void *)STACK[0x7D0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x820]);
  JUMPOUT(0x19285F0E4);
}

void sub_19285F128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x358]);
  long long v39 = (void *)STACK[0x7D0];
  if (STACK[0x7D0])
  {
    STACK[0x7D8] = (unint64_t)v39;
    operator delete(v39);
  }
  if (a39) {
    nitro::nitro_function::nitro_function(a39);
  }
  JUMPOUT(0x19285F1BCLL);
}

void sub_19285F154()
{
}

void sub_19285F190()
{
}

void sub_19285F198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  STACK[0x790] = (unint64_t)&STACK[0x7D0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x790]);
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (a35) {
    nitro::nitro_function::nitro_function(a35);
  }
  _Unwind_Resume(a1);
}

void sum_grad_contribs(std::string *this, uint64_t *a2, void *a3, const void **a4)
{
  uint64_t v8 = (long long *)*a3;
  if (*(char *)(*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    this->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a4 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = v25;
  std::string::basic_string[abi:ne180100]((uint64_t)v25, v10 + 12);
  if ((v26 & 0x80u) != 0) {
    int v11 = (void **)v25[0];
  }
  if (v10)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v12 = a4;
    }
    else {
      uint64_t v12 = *a4;
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/grad_accum@");
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) >= 2)
  {
    unint64_t v13 = 1;
    uint64_t v14 = 24;
    do
    {
      std::to_string(&v23, (uint64_t)(*(void *)(a2[10] + 40) - *(void *)(a2[10] + 32)) >> 4);
      if ((v26 & 0x80u) == 0) {
        unint64_t v15 = v25;
      }
      else {
        unint64_t v15 = (void **)v25[0];
      }
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v16 = v26;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v25[1];
      }
      uint64_t v17 = std::string::insert(&v23, 0, (const std::string::value_type *)v15, v16);
      BOOL v18 = (std::string::value_type *)v17->__r_.__value_.__r.__words[0];
      std::string::size_type size = v17->__r_.__value_.__l.__size_;
      v24[0] = v17->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + 3);
      int v20 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      uint64_t v21 = (long long *)*a3;
      if (v20 < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v18, size);
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        __p.__r_.__value_.__l.__size_ = size;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v24[0];
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v24 + 3);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v20;
      }
      Espresso::sequential_builder::elementwise_op(0, a2, (uint64_t)this, (uint64_t)v21 + v14, (uint64_t)&__p, (uint64_t)&v23);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(this->__r_.__value_.__l.__data_);
      }
      *this = v23;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v20 < 0) {
LABEL_34:
        }
          operator delete(v18);
      }
      else if (v20 < 0)
      {
        goto LABEL_34;
      }
      ++v13;
      v14 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3));
  }
  if ((char)v26 < 0) {
    operator delete(v25[0]);
  }
}

void sub_19285F438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 + 23) < 0) {
    operator delete(*(void **)v27);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_stack_blobs::~pass_stack_blobs(Espresso::pass_stack_blobs *this)
{
  *(void *)this = &unk_1EE33DE58;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 24);
  *(void *)this = &unk_1EE3719B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE33DE58;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 24);
  *(void *)this = &unk_1EE3719B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_stack_blobs>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_params_stack_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_params_stack_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_rename_phi_io>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_params_rename_phi_io>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388378;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_params_rename_phi_io>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&>(char *a1, void *a2, void *a3)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&,unsigned long const&,unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void segment_input_blob_indices(char **a1, void *a2, void *a3, unint64_t a4, unint64_t a5)
{
  if (a4 > a5) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("start_layer_idx = %d > end_layer_idx = %d", a4, a5);
  }
  uint64_t v5 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a5 > a4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    long long v9 = 0;
    unint64_t v10 = a4;
    do
    {
      uint64_t v11 = a2[13];
      if (0xAAAAAAAAAAAAAAABLL * ((a2[14] - v11) >> 3) <= v10) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v12 = (int **)(v11 + 24 * v10);
      unint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      while (v13 != v14)
      {
        int v15 = *v13;
        uint64_t v16 = a2[7];
        if (0xAAAAAAAAAAAAAAABLL * ((a2[8] - v16) >> 3) <= *v13) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, v16 + 24 * v15))
        {
          uint64_t v17 = a2[19];
          if (v15 >= (unint64_t)((a2[20] - v17) >> 3)) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v18 = *(void *)(v17 + 8 * v15);
          if (v18 > v10 || v18 < a4)
          {
            if ((unint64_t)v9 >= v8)
            {
              uint64_t v21 = (v9 - v7) >> 2;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v8 - (void)v7) >> 1 > v22) {
                unint64_t v22 = (uint64_t)(v8 - (void)v7) >> 1;
              }
              if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v22;
              }
              if (v23) {
                unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
              }
              else {
                uint64_t v24 = 0;
              }
              uint64_t v25 = (char *)(v23 + 4 * v21);
              *(_DWORD *)uint64_t v25 = v15;
              int v20 = v25 + 4;
              while (v9 != v7)
              {
                int v26 = *((_DWORD *)v9 - 1);
                v9 -= 4;
                *((_DWORD *)v25 - 1) = v26;
                v25 -= 4;
              }
              unint64_t v8 = v23 + 4 * v24;
              *a1 = v25;
              a1[1] = v20;
              a1[2] = (char *)v8;
              if (v7) {
                operator delete(v7);
              }
              uint64_t v7 = v25;
              uint64_t v5 = a1;
            }
            else
            {
              *(_DWORD *)long long v9 = v15;
              int v20 = v9 + 4;
            }
            v5[1] = v20;
            long long v9 = v20;
          }
        }
        ++v13;
      }
      ++v10;
    }
    while (v10 != a5);
  }
}

void sub_19285F8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v13 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void fill_and_extract_grads_for_inputs(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t *a5, uint64_t **a6, void *a7, void *a8)
{
  *(void *)&long long v59 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3 != a4)
  {
    uint64_t v12 = a3;
    uint64_t v14 = a6 + 1;
    long long v37 = "contributions from phi and from actual backpropagator exist at same time";
    do
    {
      unint64_t v15 = *v12;
      uint64_t v16 = *(void *)(a2 + 56);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 64) - v16) >> 3) <= v15) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v17 = v16 + 24 * (int)v15;
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a8, v17))
      {
        unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a7, v17);
        BOOL v19 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a6, (void *)v17);
        if (v18)
        {
          if (v14 != v19)
          {
            *(void *)char v52 = v17;
            int v20 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (long long **)v52);
            if (v20[8] != v20[7]) {
              goto LABEL_56;
            }
          }
        }
        else
        {
          if (v14 == v19)
          {
            *(void *)char v52 = v17;
            uint64_t v21 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (long long **)v52);
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v21 + 7), 0, 0, 0);
          }
          *(void *)char v52 = v17;
          unint64_t v22 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (long long **)v52);
          if (v22[8] == v22[7])
          {
            *(void *)&v52[5] = 0xFFFFFFFF00000001;
            v52[7] = 0;
            memset(v52, 0, 20);
            char v53 = 0;
            if (*(char *)(v17 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
            }
            else
            {
              long long v26 = *(_OWORD *)v17;
              v50.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
              *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
            }
            if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = v50.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 15);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_str = &__str;
            }
            else {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if (size)
            {
              if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v29 = &v50;
              }
              else {
                uint64_t v29 = (std::string *)v50.__r_.__value_.__r.__words[0];
              }
              memmove(p_str, v29, size);
            }
            strcpy((char *)p_str + size, "/grad_container");
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v50.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "fill");
            if (*(char *)(v17 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
            }
            else
            {
              long long v30 = *(_OWORD *)v17;
              v58.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
              *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v30;
            }
            uint64_t v43 = 0;
            int v44 = 0;
            uint64_t v45 = 0;
            v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
            v56.__r_.__value_.__s.__data_[8] = 0;
            uint64_t v43 = (std::string *)operator new(0x18uLL);
            int v44 = v43;
            uint64_t v45 = v43 + 1;
            int v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (long long *)&v58, &v59, v43);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v56, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              std::string v56 = __str;
            }
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            long long v54 = &v40;
            char v55 = 0;
            uint64_t v40 = (std::string *)operator new(0x18uLL);
            uint64_t v41 = v40;
            uint64_t v42 = v40 + 1;
            uint64_t v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (long long *)&v56, (long long *)&v57, v40);
            Espresso::sequential_builder::add<Espresso::fill_params_t>(&v48, a5, (uint64_t)__p, (uint64_t)&__str, (uint64_t)v52, (uint64_t)v43, (uint64_t)v44, (uint64_t *)&v40);
            if (v49) {
              nitro::nitro_function::nitro_function(v49);
            }
            long long v54 = &v40;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            if (v47 < 0) {
              operator delete(__p[0]);
            }
            __p[0] = (void *)v17;
            uint64_t v31 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (long long **)__p);
            uint64_t v32 = v31;
            std::string::size_type v33 = v31[8];
            if (v33 >= v31[9])
            {
              uint64_t v35 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v31 + 7, (uint64_t)&__str);
            }
            else
            {
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v31[8], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v34 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                uint64_t v33[2] = __str.__r_.__value_.__r.__words[2];
                *(_OWORD *)std::string::size_type v33 = v34;
              }
              uint64_t v35 = (std::string *)(v33 + 3);
              v32[8] = v33 + 3;
            }
            v32[8] = (uint64_t *)v35;
            __p[0] = (void *)v17;
            uint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v17, (uint64_t)&std::piecewise_construct, (long long **)__p);
            std::string::operator=((std::string *)(v36 + 5), &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            *(void *)char v52 = v17;
            unint64_t v23 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (long long **)v52);
            if ((char *)v23[8] - (char *)v23[7] != 24)
            {
              long long v37 = "More than one gradient contribution exists";
LABEL_56:
              Espresso::throw_exception_selector<Espresso::invalid_state_error>(v37);
            }
            *(void *)char v52 = v17;
            uint64_t v24 = (const std::string *)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (long long **)v52)[7];
            *(void *)char v52 = v17;
            uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v17, (uint64_t)&std::piecewise_construct, (long long **)v52);
            std::string::operator=((std::string *)(v25 + 5), v24);
          }
        }
      }
      ++v12;
    }
    while (v12 != a4);
  }
}

void sub_19285FE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  *(void *)(v45 + 64) = v44;
  if (a44 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a17);
  _Unwind_Resume(a1);
}

uint64_t get_layer_grad_name(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v3 + 5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v5 = (void *)result;
  }
  else {
    uint64_t v5 = *(void **)result;
  }
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "/grad");
  return result;
}

void merge_grads_with_phi(uint64_t a1, uint64_t *a2, uint64_t *a3, const void **a4, int a5)
{
  *(void *)&long long v47 = *MEMORY[0x1E4F143B8];
  if (*((char *)a4 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  uint64_t v11 = &v29;
  std::string::basic_string[abi:ne180100]((uint64_t)&v29, v10 + 10);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v12 = a4;
    }
    else {
      uint64_t v12 = *a4;
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/grad_phi@");
  std::to_string(&v46, (uint64_t)(*(void *)(a2[10] + 40) - *(void *)(a2[10] + 32)) >> 4);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v13 = &v46;
  }
  else {
    unint64_t v13 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  unint64_t v15 = std::string::append(&v29, (const std::string::value_type *)v13, size);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "phi_virtual");
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v46 = __p;
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::string::size_type v33 = 0;
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  v44.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v31 = (std::string *)operator new(0x18uLL);
  uint64_t v32 = v31;
  std::string::size_type v33 = v31 + 1;
  uint64_t v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (long long *)&v46, &v47, v31);
  Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>(&v37, a2, (uint64_t)&v29, (uint64_t)&__p, (uint64_t)&v42, v34, v35, (uint64_t *)&v31);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (a5) {
      goto LABEL_30;
    }
LABEL_41:
    *(std::string *)a1 = __p;
    return;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (!a5) {
    goto LABEL_41;
  }
LABEL_30:
  Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v29, (uint64_t)&__p);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  if (v29.__r_.__value_.__s.__data_[0])
  {
    if ((v30 & 0x80u) == 0) {
      size_t v17 = v30;
    }
    else {
      size_t v17 = v29.__r_.__value_.__r.__words[2];
    }
    unint64_t v18 = &v46;
    std::string::basic_string[abi:ne180100]((uint64_t)&v46, v17 + 3);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v18 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if (!v17) {
      goto LABEL_52;
    }
    if ((v30 & 0x80u) == 0) {
      p_p = (std::string *)&v29.__r_.__value_.__r.__words[1];
    }
    else {
      p_p = (std::string *)v29.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v17 = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v18 = &v46;
    std::string::basic_string[abi:ne180100]((uint64_t)&v46, v17 + 3);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v18 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if (!v17) {
      goto LABEL_52;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
  }
  memmove(v18, p_p, v17);
LABEL_52:
  *(_DWORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 7365471;
  *(std::string *)a1 = v46;
  std::string::basic_string[abi:ne180100]<0>(&v46, "copy");
  int v26 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v44 = __p;
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  v42.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v23 = (std::string *)operator new(0x18uLL);
  uint64_t v24 = v23;
  uint64_t v25 = v23 + 1;
  uint64_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25, (long long *)&v44, (long long *)&v45, v23);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v42 = *(std::string *)a1;
  }
  int v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v40 = &v20;
  char v41 = 0;
  int v20 = (std::string *)operator new(0x18uLL);
  uint64_t v21 = v20;
  unint64_t v22 = v20 + 1;
  uint64_t v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, (long long *)&v42, (long long *)&v43, v20);
  Espresso::sequential_builder::add<Espresso::copy_params_t>(&v27, a2, (uint64_t)&v46, a1, (uint64_t)&v26, (uint64_t)v23, (uint64_t)v24, (uint64_t *)&v20);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  uint64_t v40 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((char)v30 < 0) {
    operator delete((void *)v29.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19286050C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  *(void *)(v43 - 160) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 160));
  if (*(char *)(v43 - 105) < 0) {
    operator delete(*(void **)(v43 - 128));
  }
  if (*(char *)(v43 - 73) < 0) {
    operator delete(*(void **)(v43 - 96));
  }
  if (*(char *)(v42 + 23) < 0) {
    operator delete(*(void **)v42);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

void sub_192860650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 73) < 0) {
    operator delete(*(void **)(v23 - 96));
  }
  if (a23 < 0) {
    JUMPOUT(0x192860644);
  }
  JUMPOUT(0x192860648);
}

void sub_19286067C()
{
}

void Espresso::sequential_builder::add<Espresso::cf_else_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  BOOL v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192860864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  BOOL v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192860ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::fill_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  BOOL v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192860D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_prepare_gradient_builder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_params_prepare_gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389488;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_params_prepare_gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

CFDictionaryRef MRLModelCreate(const __CFDictionary *a1)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  if (a1)
  {
    if (CFDictionaryContainsKey(a1, @"LayerParametersEspresso"))
    {
      uint64_t valuePtr = 0;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"LayerParametersEspressoSize");
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      uint64_t v8 = 0;
      CFNumberRef v3 = (const __CFNumber *)CFDictionaryGetValue(a1, @"LayerParametersEspresso");
      CFNumberGetValue(v3, kCFNumberLongLongType, &v8);
      operator new();
    }
    if (CFDictionaryContainsKey(a1, @"fileLocation"))
    {
      CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(a1, @"fileLocation");
      CFIndex Length = CFStringGetLength(v4);
      CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      operator new[]();
    }
    a1 = 0;
  }
  std::mutex::unlock(&globalMutex(void)::mutex);
  return a1;
}

void sub_1928617BC(_Unwind_Exception *a1)
{
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::const_reference __x)
{
  std::vector<int>::const_reference v3 = __x;
  uint64_t v5 = this;
  std::vector<std::string>::pointer end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begiuint64_t n = this->__begin_;
    unint64_t v14 = end - this->__begin_ + 1;
    if (v14 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)__position.__i_ - (char *)begin;
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18)
    {
      uint64_t v20 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = &v20[v16];
    __v.__first_ = v20;
    __v.__begin_ = v21;
    __v.__end_cap_.__value_ = &v20[v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (begin == __position.__i_) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v15 >> 1;
        }
        uint64_t v24 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
        uint64_t v21 = (int *)((char *)v24 + (v23 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v24;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v24[v25];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v22 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v22 = v16 + 1;
        }
        v21 -= v22 >> 1;
        __v.__begin_ = v21;
      }
    }
    *uint64_t v21 = *v3;
    __v.__end_ = v21 + 1;
    std::vector<int>::__swap_out_circular_buffer(v5, &__v, (std::vector<int>::pointer)__position.__i_);
    this = (std::vector<int> *)__v.__first_;
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const int *>::iterator_type v9 = __position.__i_ + 1;
    size_t v10 = end - 1;
    std::vector<int>::pointer v11 = this->__end_;
    while (v10 < end)
    {
      int v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9) {
      this = (std::vector<int> *)memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    }
    if (__position.__i_ <= v3) {
      v3 += v5->__end_ > v3;
    }
    *__position.__i_ = *v3;
  }
  return (std::vector<int>::iterator)this;
}

void sub_1928619A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<int>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void MRLModelRecognizeVectors(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sequence MRLModelRecognizeVectors");
  if (!a1) {
    exitFramework(992);
  }
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  if (!a4)
  {
    int v30 = 991;
    goto LABEL_29;
  }
  if (!a2)
  {
    int v30 = 99;
LABEL_29:
    exitFramework(v30);
  }
  if (*(unsigned char *)(a1 + 216))
  {
    MRLModelWrapper::optionalResizeRealloc((MRLModelWrapper *)a1, (const char *)*(unsigned int *)(a1 + 220));
    uint64_t v8 = *(void *)(a1 + 176);
    MRLModelWrapper::clearState(*(void *)(a1 + 120), v8);
    if (*(_DWORD *)(a1 + 220) - 1 >= (int)a3) {
      int v9 = a3;
    }
    else {
      int v9 = *(_DWORD *)(a1 + 220) - 1;
    }
    MRLModelWrapper::restoreState(*(void *)(a1 + 120), v8);
    (*(void (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 184))(*(void *)(*(void *)(a1 + 120) + 40));
    MRLModelWrapper::optionalResizeRealloc((MRLModelWrapper *)a1, (const char *)*(unsigned int *)(a1 + 220));
    size_t v10 = *(uint64_t **)(a1 + 128);
    if ((uint64_t)(*(void *)(*v10 + 8) - *(void *)*v10) >> 3 < (unint64_t)(int)a3) {
      MRLModelWrapper::resizeXs((MRLModelWrapper *)a1, a3);
    }
    memset(v36, 0, sizeof(v36));
    int v11 = (*(uint64_t (**)(void))(***(void ***)(*(void *)(a1 + 120) + 104) + 264))();
    if ((int)a3 >= 1)
    {
      uint64_t v12 = 0;
      size_t v13 = 4 * v11;
      do
      {
        bzero(*(void **)(*(void *)*v10 + v12), v13);
        memcpy(*(void **)(*(void *)*v10 + v12), *(const void **)(a2 + v12), v13);
        v12 += 8;
      }
      while (8 * a3 != v12);
    }
    int v14 = *(unsigned __int8 *)(a1 + 152);
    uint64_t v35 = 0;
    int v34 = 0;
    {
      MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummyCsUnUsedInRecognize = 0;
      unk_1E93070A0 = 0;
      qword_1E93070A8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<VVector<float>>::~vector[abi:ne180100], &MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummyCsUnUsedInRecognize, &dword_1920CB000);
    }
    {
      MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummy = 0;
      unk_1E93070C0 = 0;
      qword_1E93070C8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummy, &dword_1920CB000);
    }
    SentenceRecognizer::recognizeSequence(*(void *)(a1 + 120), *v10, (uint64_t)v36, &MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummyCsUnUsedInRecognize, (uint64_t)&v35, (float *)&v35 + 1, a3, v14 == 0, 0, (uint64_t)&v34, (uint64_t)&MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummy);
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
    uint64_t v16 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
    memset(v33, 0, sizeof(v33));
    std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v33, *v16, v16[1], v16[1] - *v16);
    uint64_t v17 = *(void **)(a1 + 168);
    uint64_t v18 = (a3 << 32) - 0x100000000;
    uint64_t v19 = v33[0];
    uint64_t v20 = *(void **)((char *)v33[0] + (v18 >> 29));
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
    int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 272))(v21);
    memcpy(v17, v20, 4 * v22);
    maxFeatureVectors = 2;
    (*(void (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 192))(*(void *)(*(void *)(a1 + 120) + 40));
    operator delete(v19);
    v33[0] = (void **)v36;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v33);
    int v23 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a1 + 120) + 112) - 8) + 272))();
    uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
    if (v9 >= 1)
    {
      int v26 = (void *)v25;
      uint64_t v27 = 0;
      size_t v28 = 4 * v23;
      do
      {
        memcpy(a4, *(const void **)(*v26 + v27), v28);
        v27 += 8;
        a4 += v28;
      }
      while (8 * v9 != v27);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a1 + 200);
    if (v29 && !*(_DWORD *)(v29 + 8)) {
      recognizeSequenceOneByOneInternal((MRLModelWrapper *)a1, a2, a3, a4, 0, 1);
    }
    else {
      recognizeSequenceOneByOneInternal((MRLModelWrapper *)a1, a2, a3, a4, 0, 0);
    }
  }
  if (v32 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_192861EF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x192861E14);
}

void sub_192861F80(_Unwind_Exception *a1)
{
}

void recognizeSequenceOneByOneInternal(MRLModelWrapper *this, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6)
{
  maxFeatureVectors = *((_DWORD *)this + 56);
  uint64_t v7 = *((void *)this + 25);
  if (v7 && *(int *)(v7 + 28) <= 0) {
    exitFramework(1764);
  }
  if (!*((unsigned char *)this + 188)) {
    MRLModelWrapper::allocAllBuffers((uint64_t)this);
  }
  uint64_t v8 = *((void *)this + 22);
  std::vector<int>::value_type __x = 1;
  MRLModelWrapper::clearState(*((void *)this + 15), v8);
  if (a3 < 1) {
    return;
  }
  uint64_t v9 = 0;
  uint64_t v95 = v8;
  do
  {
    __src = *(void **)(a2 + 8 * v9);
    uint64_t v10 = *((unsigned int *)this + 8);
    if ((int)v10 >= 1)
    {
      int v11 = (_DWORD *)***((void ***)this + 26);
      uint64_t v12 = *(int **)(a2 + 8 * v9);
      do
      {
        int v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
    }
    std::vector<int>::vector(&v105, 1uLL);
    v14.__i_ = v105.__begin_;
    *v105.__begin_ = 0;
    std::vector<int>::insert(&v105, v14, &__x);
    uint64_t v15 = *((void *)this + 15);
    if (v9 || !a5) {
      MRLModelWrapper::restoreState(v15, v8);
    }
    else {
      MRLModelWrapper::restoreState(v15, a5);
    }
    {
      recognizeSequenceOneByOneInternal(void *,float const**,long,int,float *,std::string const&,void *,BOOL)::dummy = 0;
      unk_1E9306FE0 = 0;
      qword_1E9306FE8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &recognizeSequenceOneByOneInternal(void *,float const**,long,int,float *,std::string const&,void *,BOOL)::dummy, &dword_1920CB000);
    }
    uint64_t v16 = a4;
    if (a6) {
      uint64_t v16 = &a4[4 * *((_DWORD *)this + 9) * (int)v9];
    }
    __dst = v16;
    (***((void (****)(void))this + 1))(*((void *)this + 1));
    uint64_t v104 = (uint64_t *)*((void *)this + 16);
    unint64_t v17 = (unint64_t)((char *)v105.__end_ - (char *)v105.__begin_) >> 2;
    if (maxFeatureVectors >= (int)v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = maxFeatureVectors;
    }
    std::vector<std::vector<int>>::vector(&v108, (int)v18);
    uint64_t v101 = v9;
    if ((int)v18 < 1) {
      goto LABEL_115;
    }
    for (uint64_t i = 0; i != v18; ++i)
    {
      begiuint64_t n = v105.__begin_;
      int v21 = (*(uint64_t (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
      int v22 = begin[i];
      if (v21 == 1)
      {
        uint64_t v23 = **(void **)(*((void *)this + 15) + 104);
        if (v22 < (*(int (**)(uint64_t))(*(void *)v23 + 264))(v23) && (begin[i] & 0x80000000) == 0) {
          continue;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        continue;
      }
      int v24 = *((_DWORD *)this + 46);
      if (v24 != 3)
      {
        if (v24 == 1)
        {
          begin[i] = 3;
          continue;
        }
LABEL_46:
        begin[i] = 1;
        continue;
      }
      uint64_t v25 = (void *)*((void *)this + 18);
      if (!v25) {
        goto LABEL_46;
      }
      std::map<std::string,int>::map[abi:ne180100]((uint64_t)&v112, v25);
      std::string::basic_string[abi:ne180100]<0>(v110, "UNK");
      int v26 = v113;
      if (!v113) {
        goto LABEL_41;
      }
      uint64_t v27 = &v113;
      do
      {
        size_t v28 = v27;
        uint64_t v29 = v26 + 32;
        BOOL v30 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v26 + 4, v110);
        uint64_t v31 = v26 + 8;
        if (!v30)
        {
          uint64_t v31 = v26;
          uint64_t v27 = (char **)v26;
        }
        int v26 = *(char **)v31;
      }
      while (*(void *)v31);
      if (v27 == &v113
        || (!v30 ? (char v32 = v29) : (char v32 = (char *)(v28 + 4)),
            std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v110, v32)))
      {
LABEL_41:
        uint64_t v27 = &v113;
      }
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if (&v113 == v27) {
        int v33 = 1;
      }
      else {
        int v33 = *((_DWORD *)v27 + 14);
      }
      begin[i] = v33;
      std::__tree<std::string>::destroy((uint64_t)&v112, v113);
    }
    for (uint64_t j = 0; j != v18; ++j)
    {
      uint64_t v35 = *(void *)*v104;
      uint64_t v36 = **(void **)(*((void *)this + 15) + 104);
      int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 264))(v36);
      bzero(*(void **)(v35 + 8 * j), 4 * v37);
      (*(void (**)(void, void, uint64_t))(**((void **)this + 1) + 8))(*((void *)this + 1), v105.__begin_[j], *(void *)*v104 + 8 * j);
      if ((*(unsigned int (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1)) == 5)
      {
        int64_t v38 = 0;
        uint64_t v112 = 0;
        std::string::size_type v113 = 0;
        int v39 = -2;
        unint64_t v114 = 0;
        do
        {
          uint64_t v40 = ((int)v18 + (int)j + v39) % (int)v18;
          std::vector<int>::pointer v41 = v105.__begin_;
          if ((unint64_t)v38 >= v114)
          {
            uint64_t v43 = v112;
            uint64_t v44 = (v38 - (char *)v112) >> 2;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v46 = v114 - (void)v112;
            if ((uint64_t)(v114 - (void)v112) >> 1 > v45) {
              unint64_t v45 = v46 >> 1;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v47 = v45;
            }
            if (v47)
            {
              unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v47);
              uint64_t v43 = v112;
              int64_t v38 = v113;
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v49 = (void **)(v47 + 4 * v44);
            *(_DWORD *)uint64_t v49 = v41[v40];
            uint64_t v42 = (char *)v49 + 4;
            while (v38 != (char *)v43)
            {
              int v50 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *((_DWORD *)v49 - 1) = v50;
              uint64_t v49 = (void **)((char *)v49 - 4);
            }
            uint64_t v112 = v49;
            std::string::size_type v113 = v42;
            unint64_t v114 = v47 + 4 * v48;
            if (v43) {
              operator delete(v43);
            }
          }
          else
          {
            *(_DWORD *)int64_t v38 = v105.__begin_[v40];
            uint64_t v42 = v38 + 4;
          }
          std::string::size_type v113 = v42;
          ++v39;
          int64_t v38 = v42;
        }
        while (v39 != 3);
        if (!v51) {
          __cxa_bad_cast();
        }
        (*(void (**)(void *, void ***, uint64_t))(*(void *)v51 + 56))(v51, &v112, *(void *)*v104 + 8 * j);
        if (v112)
        {
          std::string::size_type v113 = (char *)v112;
          operator delete(v112);
        }
      }
      else if ((*(unsigned int (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1)) == 6)
      {
        if (!__src) {
          exitFramework(7345);
        }
        if (j)
        {
          char v52 = *(void **)(*(void *)*v104 + 8 * j);
          uint64_t v53 = **(void **)(*((void *)this + 15) + 104);
          int v54 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 264))(v53);
          memcpy(v52, __src, 4 * v54);
        }
      }
      else
      {
        (*(void (**)(void, void, uint64_t))(**((void **)this + 1) + 8))(*((void *)this + 1), v105.__begin_[j], *(void *)*v104 + 8 * j);
      }
      if ((*(unsigned int (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1)) == 1)
      {
        uint64_t v55 = v108 + 24 * j;
        std::vector<int>::pointer v56 = v105.__begin_;
        std::string v58 = (_DWORD **)(v55 + 8);
        uint64_t v57 = *(_DWORD **)(v55 + 8);
        unint64_t v59 = *(void *)(v55 + 16);
        if ((unint64_t)v57 >= v59)
        {
          uint64_t v61 = *(_DWORD **)v55;
          uint64_t v62 = ((uint64_t)v57 - *(void *)v55) >> 2;
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 62) {
            goto LABEL_134;
          }
          uint64_t v64 = v59 - (void)v61;
          if (v64 >> 1 > v63) {
            unint64_t v63 = v64 >> 1;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65)
          {
            unint64_t v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v65);
            uint64_t v57 = *v58;
            uint64_t v61 = *(_DWORD **)v55;
          }
          else
          {
            uint64_t v66 = 0;
          }
          uint64_t v67 = (_DWORD *)(v65 + 4 * v62);
          *uint64_t v67 = v56[j];
          uint64_t v60 = v67 + 1;
          while (v57 != v61)
          {
            int v68 = *--v57;
            *--uint64_t v67 = v68;
          }
          *(void *)uint64_t v55 = v67;
          *std::string v58 = v60;
          *(void *)(v55 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v65 + 4 * v66;
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          _DWORD *v57 = v105.__begin_[j];
          uint64_t v60 = v57 + 1;
        }
        *std::string v58 = v60;
      }
      if ((*(unsigned int (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1)) == 4)
      {
        uint64_t v69 = v108 + 24 * j;
        std::vector<int>::pointer v70 = v105.__begin_;
        uint64_t v72 = (_DWORD **)(v69 + 8);
        size_t v71 = *(_DWORD **)(v69 + 8);
        unint64_t v73 = *(void *)(v69 + 16);
        if ((unint64_t)v71 >= v73)
        {
          BOOL v75 = *(_DWORD **)v69;
          uint64_t v76 = ((uint64_t)v71 - *(void *)v69) >> 2;
          unint64_t v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 62) {
LABEL_134:
          }
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          uint64_t v78 = v73 - (void)v75;
          if (v78 >> 1 > v77) {
            unint64_t v77 = v78 >> 1;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v77;
          }
          if (v79)
          {
            unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v79);
            size_t v71 = *v72;
            BOOL v75 = *(_DWORD **)v69;
          }
          else
          {
            uint64_t v80 = 0;
          }
          std::string v81 = (_DWORD *)(v79 + 4 * v76);
          _DWORD *v81 = v70[j];
          uint64_t v74 = v81 + 1;
          while (v71 != v75)
          {
            int v82 = *--v71;
            *--std::string v81 = v82;
          }
          *(void *)uint64_t v69 = v81;
          std::string *v72 = v74;
          *(void *)(v69 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v79 + 4 * v80;
          if (v75) {
            operator delete(v75);
          }
        }
        else
        {
          *size_t v71 = v105.__begin_[j];
          uint64_t v74 = v71 + 1;
        }
        std::string *v72 = v74;
      }
    }
LABEL_115:
    uint64_t v8 = v95;
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1)) != 1)
    {
      uint64_t v84 = v108;
      uint64_t v83 = v109;
      if (v109 != v108)
      {
        uint64_t v85 = v109;
        do
        {
          uint64_t v87 = *(void **)(v85 - 24);
          v85 -= 24;
          long long v86 = v87;
          if (v87)
          {
            *(void *)(v83 - std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v86;
            operator delete(v86);
          }
          uint64_t v83 = v85;
        }
        while (v85 != v84);
      }
      uint64_t v109 = v84;
    }
    int v88 = *((unsigned __int8 *)this + 152);
    LODWORD(v110[0]) = 0;
    uint64_t v107 = 0;
    {
      MRLModelWrapper::MRLModelRecognizeUnthreaded(std::vector<int> &,float *,std::vector<std::pair<int,VVector<float> *>> *,int,float const*,std::vector<int> const&)::dummyCsUnUsedInRecognize = 0;
      unk_1E9307080 = 0;
      qword_1E9307088 = 0;
      __cxa_atexit((void (*)(void *))std::vector<VVector<float>>::~vector[abi:ne180100], &MRLModelWrapper::MRLModelRecognizeUnthreaded(std::vector<int> &,float *,std::vector<std::pair<int,VVector<float> *>> *,int,float const*,std::vector<int> const&)::dummyCsUnUsedInRecognize, &dword_1920CB000);
    }
    if ((int)v18 >= 16777217) {
      exitFramework(34);
    }
    SentenceRecognizer::recognizeSequence(*((void *)this + 15), *v104, (uint64_t)&v108, &MRLModelWrapper::MRLModelRecognizeUnthreaded(std::vector<int> &,float *,std::vector<std::pair<int,VVector<float> *>> *,int,float const*,std::vector<int> const&)::dummyCsUnUsedInRecognize, (uint64_t)&v107 + 4, (float *)v110, v18 | 0x1000000, v88 == 0, v95, (uint64_t)&v107, (uint64_t)&recognizeSequenceOneByOneInternal(void *,float const**,long,int,float *,std::string const&,void *,BOOL)::dummy);
    uint64_t v89 = *(void *)(*(void *)(*((void *)this + 15) + 112) - 8);
    uint64_t v90 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v89 + 32))(v89);
    uint64_t v112 = 0;
    std::string::size_type v113 = 0;
    unint64_t v114 = 0;
    std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(&v112, *v90, v90[1], v90[1] - *v90);
    uint64_t v91 = v112;
    int v92 = v112[(int)v18 - 1];
    uint64_t v93 = *(void *)(*(void *)(*((void *)this + 15) + 112) - 8);
    int v94 = (*(uint64_t (**)(uint64_t))(*(void *)v93 + 272))(v93);
    memcpy(__dst, v92, 4 * v94);
    operator delete(v91);
    uint64_t v112 = (void **)&v108;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v112);
    MRLModelWrapper::saveState(*((void *)this + 15), v95);
    if (v105.__begin_)
    {
      v105.__end_ = v105.__begin_;
      operator delete(v105.__begin_);
    }
    uint64_t v9 = v101 + 1;
  }
  while (v101 + 1 != a3);
}

void sub_192862A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  *(void *)(v29 - 136) = &a29;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 136));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MRLModelRecognizeVectorsIncremental(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sequence MRLModelRecognizeVectorsIncremental");
  if (!a1) {
    exitFramework(992);
  }
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  if (*(unsigned char *)(a1 + 216))
  {
    int v8 = 456;
    goto LABEL_12;
  }
  if (!a4)
  {
    int v8 = 991;
    goto LABEL_12;
  }
  if (!a3)
  {
    int v8 = 99;
LABEL_12:
    exitFramework(v8);
  }
  recognizeSequenceOneByOneInternal((MRLModelWrapper *)a1, a3, 1, a4, a2, 0);
  if (v10 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_192862C34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x192862BECLL);
}

void sub_192862C80(_Unwind_Exception *a1)
{
}

void MRLModelStateCreate(uint64_t a1)
{
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  MRLModelWrapper::allocInitialState(*(MRLModelWrapper **)(a1 + 120));
}

void sub_192862CEC(void *a1)
{
}

void sub_192862D10(_Unwind_Exception *a1)
{
}

void MRLModelStateSave(uint64_t a1, uint64_t a2)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  if (!*(unsigned char *)(a1 + 188)) {
    MRLModelWrapper::allocAllBuffers(a1);
  }
  if (!a2) {
    exitFramework(40);
  }
  MRLModelWrapper::saveState(*(void *)(a1 + 120), a2);

  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_192862DA8(void *a1)
{
}

void sub_192862DC8(_Unwind_Exception *a1)
{
}

void MRLModelStateRestore(uint64_t a1, uint64_t a2)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  if (!*(unsigned char *)(a1 + 188)) {
    MRLModelWrapper::allocAllBuffers(a1);
  }
  if (!a2) {
    exitFramework(41);
  }
  MRLModelWrapper::restoreState(*(void *)(a1 + 120), a2);

  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_192862E60(void *a1)
{
}

void sub_192862E80(_Unwind_Exception *a1)
{
}

void MRLModelStateRelease(uint64_t a1, char **a2)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  MRLModelWrapper::freeState(*(void *)(a1 + 120), a2);

  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_192862EEC(void *a1)
{
}

void sub_192862F0C(_Unwind_Exception *a1)
{
}

uint64_t MRLModelStatePieceSize(void *a1, int a2)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  if (!a1 || ((v4 = (a1[1] - *a1) >> 4, (int)v4 >= 1) ? (BOOL v5 = (int)v4 <= a2) : (BOOL v5 = 1), v5)) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v6 = *(unsigned int *)(*a1 + 16 * a2);
  }
  std::mutex::unlock(&globalMutex(void)::mutex);
  return v6;
}

uint64_t MRLModelStatePieceData(void *a1, int a2)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  if (!a1 || ((v4 = (a1[1] - *a1) >> 4, (int)v4 >= 1) ? (BOOL v5 = (int)v4 <= a2) : (BOOL v5 = 1), v5)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = **(void **)(*a1 + 16 * a2 + 8);
  }
  std::mutex::unlock(&globalMutex(void)::mutex);
  return v6;
}

void MRLModelRelease(uint64_t a1)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  MRLModelWrapper::cleanupAllBuffers((MRLModelWrapper *)a1);
  *(unsigned char *)(a1 + 188) = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1EE318440;
    *(void *)(v3 + 24) = *(void *)(v3 + 16);
    uint64_t v4 = *(unsigned int *)(v3 + 8);
    if ((int)v4 >= 1)
    {
      BOOL v5 = (void *)(*(void *)(v3 + 120) + 8);
      do
      {
        void *v5 = *(v5 - 1);
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(v3 + 120));
    if (!*(void *)(v3 + 64))
    {
      std::__tree<int>::destroy(*(void **)(v3 + 48));
      *(void *)(v3 + 40) = v3 + 48;
      *(void *)(v3 + 48) = 0;
      *(void *)(v3 + 56) = 0;
    }
    *(void *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 72) = 0;
    if (!*(void *)(v3 + 104))
    {
      std::__tree<int>::destroy(*(void **)(v3 + 88));
      *(void *)(v3 + 80) = v3 + 88;
      *(void *)(v3 + 88) = 0;
      *(void *)(v3 + 96) = 0;
    }
    *(void *)(v3 + 104) = 0;
    *(_DWORD *)(v3 + 112) = 0;
    __p[0] = (void *)(v3 + 120);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__tree<int>::destroy(*(void **)(v3 + 88));
    std::__tree<int>::destroy(*(void **)(v3 + 48));
    uint64_t v6 = *(void **)(v3 + 16);
    if (v6)
    {
      *(void *)(v3 + 24) = v6;
      operator delete(v6);
    }
    MEMORY[0x192FF16B0](v3, 0x10B1C40DD9087A7);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *(void **)(a1 + 120);
  if (v7)
  {
    uint64_t v8 = v7[5];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 368))(v8);
    }
    uint64_t v9 = v7[12];
    if (!v9) {
      goto LABEL_59;
    }
    char v10 = *(const void **)v9;
    if (!*(void *)v9) {
      goto LABEL_54;
    }
    if (!*(unsigned char *)(v9 + 68))
    {
      if (*(_DWORD *)(v9 + 64) != 2) {
        goto LABEL_44;
      }
      uint64_t v23 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        uint64_t v23 = *(const char **)v23;
      }
      int v24 = open(v23, 2);
      int v25 = v24;
      char v10 = *(const void **)v9;
      if ((v24 & 0x80000000) == 0)
      {
        write(v24, v10, *(void *)(v9 + 8));
        close(v25);
        char v10 = *(const void **)v9;
      }
      if (v10) {
LABEL_44:
      }
        MEMORY[0x192FF1690](v10, 0x1000C8077774924);
      goto LABEL_54;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "do-not-us-this-path,from-raw-buffer");
    uint64_t v11 = *(unsigned __int8 *)(v9 + 39);
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = (void *)*(unsigned __int8 *)(v9 + 39);
    }
    else {
      uint64_t v12 = *(void **)(v9 + 24);
    }
    unint64_t v13 = v31;
    int v14 = (char)v31;
    if ((v31 & 0x80u) != 0) {
      unint64_t v13 = (unint64_t)__p[1];
    }
    if (v12 == (void *)v13)
    {
      uint64_t v15 = (const void **)(v9 + 16);
      if ((v31 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v11 & 0x80) != 0)
      {
        BOOL v21 = memcmp(*v15, v16, *(void *)(v9 + 24)) != 0;
      }
      else
      {
        if (!*(unsigned char *)(v9 + 39))
        {
          BOOL v21 = 0;
          if (((char)v31 & 0x80000000) == 0)
          {
LABEL_49:
            if (!v21) {
              goto LABEL_54;
            }
            goto LABEL_53;
          }
          goto LABEL_52;
        }
        uint64_t v17 = v11 - 1;
        do
        {
          int v19 = *(unsigned __int8 *)v15;
          uint64_t v15 = (const void **)((char *)v15 + 1);
          int v18 = v19;
          int v20 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v21 = v18 != v20;
        }
        while (v18 == v20 && v17-- != 0);
      }
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_49;
      }
    }
    else
    {
      BOOL v21 = 1;
      if (((char)v31 & 0x80000000) == 0) {
        goto LABEL_49;
      }
    }
LABEL_52:
    operator delete(__p[0]);
    if (v21) {
LABEL_53:
    }
      munmap(*(void **)v9, *(void *)(v9 + 8));
LABEL_54:
    if (*(char *)(v9 + 63) < 0) {
      operator delete(*(void **)(v9 + 40));
    }
    if (*(char *)(v9 + 39) < 0) {
      operator delete(*(void **)(v9 + 16));
    }
    MEMORY[0x192FF16B0](v9, 0x1012C40FBC6EF0BLL);
LABEL_59:
    int v26 = (void *)v7[13];
    if (v26)
    {
      v7[14] = v26;
      operator delete(v26);
    }
    MEMORY[0x192FF16B0](v7, 0x10A0C40156CC92FLL);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v27 = *(void *)(a1 + 144);
  if (!v27) {
    goto LABEL_69;
  }
  int v28 = *(_DWORD *)(a1 + 184);
  if (v28 == 3)
  {
    std::__tree<int>::destroy(*(void **)(v27 + 80));
    std::__tree<int>::destroy(*(void **)(v27 + 56));
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v27 + 24, *(char **)(v27 + 32));
    std::__tree<std::string>::destroy(v27, *(char **)(v27 + 8));
    goto LABEL_67;
  }
  if (v28 == 2)
  {
    std::__tree<int>::destroy(*(void **)(v27 + 80));
    std::__tree<int>::destroy(*(void **)(v27 + 56));
    std::__tree<int>::destroy(*(void **)(v27 + 32));
    std::__tree<int>::destroy(*(void **)(v27 + 8));
LABEL_67:
    MEMORY[0x192FF16B0](v27, 0x1020C40AAB8513ELL);
  }
  *(void *)(a1 + 144) = 0;
LABEL_69:
  uint64_t v29 = *(void *)(a1 + 208);
  if (v29)
  {
    __p[0] = *(void **)(a1 + 208);
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    MEMORY[0x192FF16B0](v29, 0x20C40960023A9);
  }
  maxFeatureVectors = 2;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  MEMORY[0x192FF16B0](a1, 0x10F2C40224BF6E9);

  std::mutex::unlock(&globalMutex(void)::mutex);
}

uint64_t Espresso::ANECompilerEngine::compiler::create_ir(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, 0, 0, a2, a3, a4);
}

void Espresso::ANECompilerEngine::compiler::create_ir_for_segment(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6)
{
  void (***v18)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  void *v30;
  void *v31;
  std::string *p_str;
  std::runtime_error *v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  void v51[5];
  std::__shared_weak_count *v52;
  void v53[6];
  std::__shared_weak_count *v54;
  std::string __str;
  unsigned char v56[128];
  uint8_t v57[128];
  uint8_t buf[16];
  uint64_t v59;
  uint64_t v60;

  uint64_t v60 = *MEMORY[0x1E4F143B8];
  int v39 = a2;
  if (!*(unsigned char *)(a1 + 552))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Call this function only when executing in-memory model flow");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11
    || (v12 = std::__shared_weak_count::lock(v11), (uint64_t v40 = v12) == 0)
    || (v37 = a5, v38 = a4, uint64_t v36 = a6, (v14 = *(void *)(a1 + 8)) == 0))
  {
    int v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Inconsistent state");
    __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v15 = (void **)(v14 + 728);
  if (*(char *)(v14 + 751) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v14 + 728), *(void *)(v14 + 736));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
    __str.__r_.__value_.__r.__words[2] = *(void *)(v14 + 744);
  }
  uint64_t v16 = Espresso::espresso_os_log_subsystem((Espresso *)v12, v13);
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
  if (v39)
  {
    if (v17)
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v39;
      _os_log_debug_impl(&dword_1920CB000, v16, OS_LOG_TYPE_DEBUG, "Creating ANEC IR plist and weights files in memory for the ANE segment(s) identified by key \"%@\"", buf, 0xCu);
    }

    std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v39 UTF8String]);
    if (*(char *)(v14 + 751) < 0) {
      operator delete(*v15);
    }
    *(_OWORD *)uint64_t v15 = *(_OWORD *)buf;
    *(void *)(v14 + 744) = v59;
  }
  else
  {
    if (v17)
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = p_str;
      _os_log_debug_impl(&dword_1920CB000, v16, OS_LOG_TYPE_DEBUG, "Creating ANEC IR plist and weights files in memory for the ANE segment(s) identified by key \"%s\"", buf, 0xCu);
    }
  }
  int v18 = *(void (****)(uint64_t *__return_ptr, void))(a1 + 104);
  if (!a3)
  {
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 3321888768;
    _OWORD v51[2] = ___ZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7__block_invoke_205;
    v51[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
    v51[4] = v14;
    char v52 = v40;
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::abstract_context::compute_batch_sync(v18, v51);
    int v19 = v52;
    if (!v52) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 3321888768;
  uint64_t v53[2] = ___ZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7__block_invoke;
  v53[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v53[4] = a1;
  v53[5] = v14;
  int v54 = v40;
  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_context::compute_batch_sync(v18, v53);
  int v19 = v54;
  if (v54) {
LABEL_20:
  }
    nitro::nitro_function::nitro_function(v19);
LABEL_21:
  if (!*(unsigned char *)(a1 + 224))
  {
    uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Network not built");
    __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v49 = 0u;
    int v50 = 0u;
    unint64_t v47 = 0u;
    uint64_t v48 = 0u;
    int v20 = [*(id *)(a1 + 128) objectForKeyedSubscript:@"NetworkList"];
    BOOL v21 = [v20 countByEnumeratingWithState:&v47 objects:v57 count:16];
    if (v21)
    {
      int v22 = *(void *)v48;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v48 != v22) {
            objc_enumerationMutation(v20);
          }
          int v24 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          int v25 = Espresso::ANECompilerEngine::compiler::create_ir_for_segment(NSString *,BOOL,NSDictionary * {__autoreleasing}*,NSDictionary* {__autoreleasing}*<NSNumber *,NSDictionary*<NSString *,NSData *>>,NSDictionary * {__autoreleasing}*)::$_0::operator()(*(void **)(a1 + 216));
          [v24 setObject:v25 forKeyedSubscript:@"Weights"];
        }
        BOOL v21 = [v20 countByEnumeratingWithState:&v47 objects:v57 count:16];
      }
      while (v21);
    }
  }
  else
  {
    unint64_t v45 = 0u;
    uint64_t v46 = 0u;
    uint64_t v43 = 0u;
    uint64_t v44 = 0u;
    int v20 = [*(id *)(a1 + 128) objectForKeyedSubscript:@"Networks"];
    int v26 = [v20 countByEnumeratingWithState:&v43 objects:v56 count:16];
    if (v26)
    {
      uint64_t v27 = *(void *)v44;
      do
      {
        for (uint64_t j = 0; j != v26; ++j)
        {
          if (*(void *)v44 != v27) {
            objc_enumerationMutation(v20);
          }
          uint64_t v29 = [*(id *)(a1 + 128) objectForKeyedSubscript:*(void *)(*((void *)&v43 + 1) + 8 * j)];
          BOOL v30 = Espresso::ANECompilerEngine::compiler::create_ir_for_segment(NSString *,BOOL,NSDictionary * {__autoreleasing}*,NSDictionary* {__autoreleasing}*<NSNumber *,NSDictionary*<NSString *,NSData *>>,NSDictionary * {__autoreleasing}*)::$_0::operator()(*(void **)(a1 + 216));
          [v29 setObject:v30 forKeyedSubscript:@"Weights"];
        }
        int v26 = [v20 countByEnumeratingWithState:&v43 objects:v56 count:16];
      }
      while (v26);
    }
  }

  std::vector<int>::pointer v41 = v14;
  uint64_t v42 = v40;
  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned __int8 v31 = Espresso::ANECompilerEngine::compiler::get_anec_debug_info_dict(&v41);
  [*(id *)(a1 + 128) setObject:v31 forKeyedSubscript:@"ModelDebugInformation"];

  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  *int64_t v38 = *(id *)(a1 + 128);
  *int v37 = *(id *)(a1 + 216);
  Espresso::ANECompilerEngine::compiler::compiler_options_dict((Espresso::ANECompilerEngine::compiler *)a1);
  *uint64_t v36 = (id)objc_claimAutoreleasedReturnValue();
  std::string::operator=((std::string *)(v14 + 728), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  nitro::nitro_function::nitro_function(v40);
}

void sub_192863A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7__block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, 0, (*(void *)(*(void *)(a1 + 40) + 40) - *(void *)(*(void *)(a1 + 40) + 32)) >> 4);
}

void ___ZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7__block_invoke_205(uint64_t a1, uint64_t a2)
{
}

id Espresso::ANECompilerEngine::compiler::create_ir_for_segment(NSString *,BOOL,NSDictionary * {__autoreleasing}*,NSDictionary* {__autoreleasing}*<NSNumber *,NSDictionary*<NSString *,NSData *>>,NSDictionary * {__autoreleasing}*)::$_0::operator()(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CBF0] mutableCopy];
  uint64_t v3 = [v1 allKeys];
  uint64_t v4 = [v3 sortedArrayUsingComparator:&__block_literal_global_575];

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = objc_msgSend(v1, "objectForKeyedSubscript:", *(void *)(*((void *)&v13 + 1) + 8 * i), (void)v13);
        char v10 = [v9 allKeys];
        uint64_t v11 = [v10 firstObject];

        [v2 addObject:v11];
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  return v2;
}

void sub_192863D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::compiler::get_anec_debug_info_dict(uint64_t *a1)
{
  unint64_t v2 = 0x1E4F1C000uLL;
  uint64_t v3 = objc_opt_new();
  unint64_t v51 = objc_opt_new();
  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(*a1, &v52);
  uint64_t v49 = v3;
  if (!v52.__r_.__value_.__r.__words[0])
  {
    uint64_t v12 = 0;
    goto LABEL_74;
  }
  Espresso::model_metadata_t::model_metadata_t(&v53, (const Espresso::model_metadata_t *)(v52.__r_.__value_.__r.__words[0] + 8));
  uint64_t v4 = objc_opt_new();
  int v50 = objc_opt_new();
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v5 = &v53;
  }
  else {
    id v5 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  uint64_t v6 = [NSString stringWithUTF8String:v5];
  [v50 setObject:v6 forKeyedSubscript:@"ModelBundleName"];

  if ((v55 & 0x80u) == 0) {
    uint64_t v7 = v54;
  }
  else {
    uint64_t v7 = (void **)v54[0];
  }
  uint64_t v8 = [NSString stringWithUTF8String:v7];
  [v50 setObject:v8 forKeyedSubscript:@"ModelName"];

  if (v57 >= 0) {
    uint64_t v9 = &v56;
  }
  else {
    uint64_t v9 = v56;
  }
  char v10 = [NSString stringWithUTF8String:v9];
  [v50 setObject:v10 forKeyedSubscript:@"ModelPath"];

  [v4 setObject:v50 forKeyedSubscript:@"ModelSourceInformation"];
  [v4 setObject:@"Precompiled" forKeyedSubscript:@"ModelCompilationMethod"];
  if (v59 < 0)
  {
    if (!v58[1]) {
      goto LABEL_18;
    }
    uint64_t v11 = (void **)v58[0];
  }
  else
  {
    if (!v59) {
      goto LABEL_18;
    }
    uint64_t v11 = v58;
  }
  long long v13 = [NSString stringWithUTF8String:v11];
  [v4 setObject:v13 forKeyedSubscript:@"version"];

LABEL_18:
  if (v61 < 0)
  {
    if (!v60[1]) {
      goto LABEL_24;
    }
    long long v14 = (void **)v60[0];
  }
  else
  {
    if (!v61) {
      goto LABEL_24;
    }
    long long v14 = v60;
  }
  long long v15 = [NSString stringWithUTF8String:v14];
  [v4 setObject:v15 forKeyedSubscript:@"product"];

LABEL_24:
  if (v63 < 0)
  {
    if (v62[1])
    {
      long long v16 = (void **)v62[0];
      goto LABEL_29;
    }
  }
  else if (v63)
  {
    long long v16 = v62;
LABEL_29:
    BOOL v17 = [NSString stringWithUTF8String:v16];
    [v4 setObject:v17 forKeyedSubscript:@"usecase"];
  }
  [v3 setObject:v4 forKeyedSubscript:@"ModelInformation"];
  uint64_t v48 = a1;
  uint64_t v18 = *(uint64_t **)(v52.__r_.__value_.__r.__words[0] + 192);
  if (v18)
  {
    uint64_t v12 = 0;
    while (1)
    {
      unint64_t v19 = v2;
      int v20 = objc_opt_new();
      BOOL v21 = v18 + 2;
      int v22 = v18 + 2;
      if (*((char *)v18 + 39) < 0) {
        int v22 = (void *)*v21;
      }
      uint64_t v23 = objc_msgSend(NSString, "stringWithUTF8String:", v22, v48);
      [v20 setObject:v23 forKeyedSubscript:@"ModuleBundleName"];

      int v24 = *((char *)v18 + 39);
      if (v24 < 0)
      {
        if (v18[3] == 27)
        {
          BOOL v21 = (void *)*v21;
LABEL_39:
          BOOL v25 = *v21 == 0x6C7070612E6D6F63 && v21[1] == 0x7365727073452E65;
          if (v25 && v21[2] == 0x77656D6172466F73 && *(void *)((char *)v21 + 19) == 0x6B726F77656D6172)
          {
            id v28 = v20;

            uint64_t v12 = v28;
          }
        }
      }
      else if (v24 == 27)
      {
        goto LABEL_39;
      }
      for (uint64_t i = (uint64_t *)v18[7]; i; uint64_t i = (uint64_t *)*i)
      {
        BOOL v30 = i + 5;
        if (*((char *)i + 63) < 0) {
          BOOL v30 = (void *)*v30;
        }
        unsigned __int8 v31 = [NSString stringWithUTF8String:v30];
        char v32 = i + 2;
        if (*((char *)i + 39) < 0) {
          char v32 = (void *)*v32;
        }
        int v33 = [NSString stringWithUTF8String:v32];
        [v20 setObject:v31 forKeyedSubscript:v33];
      }
      [v51 addObject:v20];

      uint64_t v18 = (uint64_t *)*v18;
      unint64_t v2 = v19;
      if (!v18) {
        goto LABEL_60;
      }
    }
  }
  uint64_t v12 = 0;
LABEL_60:

  if (v65 < 0) {
    operator delete(__p);
  }
  a1 = v48;
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (v57 < 0) {
    operator delete(v56);
  }
  if ((char)v55 < 0) {
    operator delete(v54[0]);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
LABEL_74:
  if (v52.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v52.__r_.__value_.__l.__size_);
  }
  if (!v12)
  {
    uint64_t v12 = objc_opt_new();
    [v51 addObject:v12];
  }
  objc_msgSend(v12, "setObject:forKeyedSubscript:", @"com.apple.EspressoFramework", @"ModuleBundleName", v48);
  int v34 = [NSString stringWithUTF8String:"3402.5.1"];
  [v12 setObject:v34 forKeyedSubscript:@"ModuleVersion"];

  if (*(unsigned char *)(*(void *)(*a1 + 16) + 127)) {
    uint64_t v35 = @"AOT";
  }
  else {
    uint64_t v35 = @"V1";
  }
  [v12 setObject:v35 forKeyedSubscript:@"CompilationMethod"];
  std::string::basic_string[abi:ne180100]<0>(&v52, "");
  uint64_t v36 = *(long long **)(*a1 + 472);
  uint64_t v37 = *a1 + 480;
  if (v36 != (long long *)v37)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v53, v36 + 2);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v38 = &v53;
      }
      else {
        int64_t v38 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v53.__r_.__value_.__l.__size_;
      }
      std::string::append(&v52, (const std::string::value_type *)v38, size);
      std::string::append(&v52, ":");
      if ((v55 & 0x80u) == 0) {
        uint64_t v40 = v54;
      }
      else {
        uint64_t v40 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v41 = v55;
      }
      else {
        std::string::size_type v41 = (std::string::size_type)v54[1];
      }
      std::string::append(&v52, (const std::string::value_type *)v40, v41);
      std::string::append(&v52, ",");
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      uint64_t v42 = (long long *)*((void *)v36 + 1);
      if (v42)
      {
        do
        {
          uint64_t v43 = v42;
          uint64_t v42 = *(long long **)v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          uint64_t v43 = (long long *)*((void *)v36 + 2);
          BOOL v25 = *(void *)v43 == (void)v36;
          uint64_t v36 = v43;
        }
        while (!v25);
      }
      uint64_t v36 = v43;
    }
    while (v43 != (long long *)v37);
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v44 = &v52;
  }
  else {
    uint64_t v44 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  unint64_t v45 = [NSString stringWithUTF8String:v44];
  [v12 setObject:v45 forKeyedSubscript:@"ModuleCompilationFlags"];

  [v49 setObject:v51 forKeyedSubscript:@"ModuleInformation"];
  id v46 = v49;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }

  return v46;
}

void sub_1928644AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, void *a20)
{
  Espresso::model_metadata_t::~model_metadata_t(&a20);
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }

  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::compiler::compiler_options_dict(Espresso::ANECompilerEngine::compiler *this)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  std::vector<int>::pointer v56 = objc_opt_new();
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2 && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v48 = v3;
    uint64_t v4 = *((void *)this + 1);
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t v4 = 0;
  }
  id v5 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithObjects:", @"M9", @"M10", @"H11", @"H12", 0);
  [v5 addObject:@"H13"];
  [v5 addObject:@"H13G"];
  [v5 addObject:@"H14"];
  [v5 addObject:@"H14G"];
  [v5 addObject:@"H15"];
  [v5 addObject:@"H14G.N301"];
  [v5 addObject:@"H15G"];
  [v5 addObject:@"H16"];
  [v5 addObject:@"H17"];
  if (*((char *)this + 479) < 0) {
    std::string::__init_copy_ctor_external(&v82, *((const std::string::value_type **)this + 57), *((void *)this + 58));
  }
  else {
    std::string v82 = *(std::string *)((unsigned char *)this + 19);
  }
  std::string::basic_string[abi:ne180100]<0>(&v80, "anec_flags");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v54 = v4 + 472;
  Espresso::map_const_get<std::map<std::string,std::string>>(v4 + 472, (uint64_t)&v80, (uint64_t)__p, &v81);
  if (SHIBYTE(v79) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  id obj = v5;
  uint64_t v55 = [obj countByEnumeratingWithState:&v74 objects:v84 count:16];
  if (v55)
  {
    uint64_t v53 = *(void *)v75;
    do
    {
      for (uint64_t i = 0; i != v55; ++i)
      {
        if (*(void *)v75 != v53) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v74 + 1) + 8 * i);
        uint64_t v7 = objc_opt_new();
        id v8 = v6;
        std::string::basic_string[abi:ne180100]<0>(&v73, (char *)[v8 UTF8String]);
        uint64_t v9 = std::string::insert(&v73, 0, "anec_flags_");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v79 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v71, "");
        Espresso::map_const_get<std::map<std::string,std::string>>(v54, (uint64_t)__p, (uint64_t)v71, &v80);
        if (v72 < 0) {
          operator delete(v71[0]);
        }
        if (SHIBYTE(v79) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v82.__r_.__value_.__l.__size_;
        }
        if (size) {
          goto LABEL_32;
        }
        std::string::size_type v12 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v12 = v81.__r_.__value_.__l.__size_;
        }
        if (v12) {
          goto LABEL_32;
        }
        std::string::size_type v13 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        char v14 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = v80.__r_.__value_.__l.__size_;
        }
        if (v13)
        {
LABEL_32:
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v15 = &v82;
          }
          else {
            long long v15 = (std::string *)v82.__r_.__value_.__r.__words[0];
          }
          long long v16 = [NSString stringWithUTF8String:v15];
          char v57 = [v16 componentsSeparatedByString:@","];

          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v17 = &v81;
          }
          else {
            BOOL v17 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          uint64_t v18 = [NSString stringWithUTF8String:v17];
          std::string v58 = [v18 componentsSeparatedByString:@","];

          if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v19 = &v80;
          }
          else {
            unint64_t v19 = (std::string *)v80.__r_.__value_.__r.__words[0];
          }
          int v20 = [NSString stringWithUTF8String:v19];
          char v59 = [v20 componentsSeparatedByString:@","];

          BOOL v21 = [v58 arrayByAddingObjectsFromArray:v59];
          int v22 = [v57 arrayByAddingObjectsFromArray:v21];

          NSLog(&cfstr_ResolvedCompil.isa, v22);
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          id v23 = v22;
          uint64_t v24 = [v23 countByEnumeratingWithState:&v67 objects:v83 count:16];
          if (v24)
          {
            uint64_t v25 = *(void *)v68;
            do
            {
              uint64_t v26 = 0;
              do
              {
                if (*(void *)v68 != v25) {
                  objc_enumerationMutation(v23);
                }
                id v27 = *(id *)(*((void *)&v67 + 1) + 8 * v26);
                if ([v27 isEqualToString:@"SpatialSplitDisabled"])
                {
                  id v28 = @"Disabled";
LABEL_54:
                  uint64_t v29 = @"SpatialSplitMode";
LABEL_55:
                  [v7 setObject:v28 forKeyedSubscript:v29];
                  goto LABEL_56;
                }
                if ([v27 isEqualToString:@"SpatialSplitAuto"])
                {
                  id v28 = @"Auto";
                  goto LABEL_54;
                }
                if ([v27 isEqualToString:@"SpatialSplitMemory"])
                {
                  id v28 = @"Memory";
                  goto LABEL_54;
                }
                if ([v27 isEqualToString:@"SpatialSplitGenericDAG"])
                {
                  id v28 = @"GenericDAG";
                  goto LABEL_54;
                }
                if ([v27 isEqualToString:@"KernelRewind"])
                {
                  id v28 = (__CFString *)MEMORY[0x1E4F1CC38];
                  uint64_t v29 = @"KernelRewind";
                  goto LABEL_55;
                }
                if ([v27 isEqualToString:@"EnableSingleChannelEWOpCopyRemoval"])
                {
                  id v28 = (__CFString *)MEMORY[0x1E4F1CC38];
                  uint64_t v29 = @"EnableSingleChannelEWOpCopyRemoval";
                  goto LABEL_55;
                }
                if ([v27 isEqualToString:@"EnableAggressiveTensorCaching"])
                {
                  id v28 = (__CFString *)MEMORY[0x1E4F1CC38];
                  uint64_t v29 = @"EnableAggressiveTensorCaching";
                  goto LABEL_55;
                }
                if ([v27 isEqualToString:@"ScanWeightsForCompression"])
                {
                  id v28 = (__CFString *)MEMORY[0x1E4F1CC38];
                  uint64_t v29 = @"ScanWeightsForCompression";
                  goto LABEL_55;
                }
                if ([v27 isEqualToString:@"DisableInputCoalescing"])
                {
                  id v28 = (__CFString *)MEMORY[0x1E4F1CC38];
                  uint64_t v29 = @"DisableInputsSectionsCoalesce";
                  goto LABEL_55;
                }
                if ([v27 isEqualToString:@"OptimizeReductionPerf"])
                {
                  id v28 = @"ReductionPerf";
                  uint64_t v29 = @"Optimize";
                  goto LABEL_55;
                }
                if ([v27 containsString:@"="])
                {
                  char v65 = [v27 componentsSeparatedByString:@"="];
                  if ([v65 count] != 2)
                  {
                    __p[0] = (void *)[v27 UTF8String];
                    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Unsupported anec_flags entry %s", __p);
                  }
                  char v63 = [v65 objectAtIndex:0];
                  BOOL v30 = [v65 objectAtIndex:1];
                  char v31 = [v30 isEqualToString:@"true"];
                  uint64_t v32 = MEMORY[0x1E4F1CC38];
                  if ((v31 & 1) != 0
                    || (v33 = [v30 isEqualToString:@"false"], uint64_t v32 = MEMORY[0x1E4F1CC28], v33))
                  {
                    [v7 setObject:v32 forKeyedSubscript:v63];
                  }
                  else
                  {
                    if ([v30 hasPrefix:@"int:"])
                    {
                      uint64_t v49 = NSNumber;
                      char v61 = [v30 substringFromIndex:4];
                      int v50 = objc_msgSend(v49, "numberWithInt:", objc_msgSend(v61, "intValue"));
                      [v7 setObject:v50 forKeyedSubscript:v63];
                    }
                    else
                    {
                      if (![v30 hasPrefix:@"float:"])
                      {
                        [v7 setObject:v30 forKeyedSubscript:v63];
                        goto LABEL_75;
                      }
                      unint64_t v51 = NSNumber;
                      char v61 = [v30 substringFromIndex:6];
                      [v61 floatValue];
                      int v50 = objc_msgSend(v51, "numberWithFloat:");
                      [v7 setObject:v50 forKeyedSubscript:v63];
                    }
                  }
LABEL_75:
                }
LABEL_56:

                ++v26;
              }
              while (v24 != v26);
              uint64_t v34 = [v23 countByEnumeratingWithState:&v67 objects:v83 count:16];
              uint64_t v24 = v34;
            }
            while (v34);
          }

          uint64_t v66 = objc_opt_new();
          uint64_t v35 = [*((id *)this + 16) objectForKeyedSubscript:@"ProcedureList"];
          unint64_t v36 = [v35 count];

          if (v36 <= 1) {
            uint64_t v37 = 1;
          }
          else {
            uint64_t v37 = v36;
          }
          uint64_t v64 = v37;
          uint64_t v62 = [v8 lowercaseString];
          if (v36 < 2)
          {
            [v56 setObject:v7 forKeyedSubscript:v62];
          }
          else
          {
            for (uint64_t j = 0; j != v64; ++j)
            {
              int v39 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v7];
              uint64_t v40 = [*((id *)this + 16) objectForKeyedSubscript:@"ProcedureList"];
              std::string::size_type v41 = [v40 objectAtIndexedSubscript:j];
              uint64_t v42 = [v41 objectForKeyedSubscript:@"Name"];
              [v39 setObject:v42 forKeyedSubscript:@"Name"];

              [v66 addObject:v39];
            }
            uint64_t v43 = objc_opt_new();
            [v56 setObject:v43 forKeyedSubscript:v62];

            uint64_t v44 = [v56 objectForKeyedSubscript:v62];
            [v44 setObject:v66 forKeyedSubscript:@"ProcedureParams"];
          }
          unint64_t v45 = [v56 objectForKeyedSubscript:v62];
          [v45 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"UndefinedSymbolsBehaviorUseFVMLibs"];

          char v14 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        }
        if (v14 < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v55 = [obj countByEnumeratingWithState:&v74 objects:v84 count:16];
    }
    while (v55);
  }

  if ([v56 count]) {
    id v46 = v56;
  }
  else {
    id v46 = 0;
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }

  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }

  return v46;
}

void sub_192865074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7_ENK3__0clEv_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

void Espresso::ANECompilerEngine::compiler::dump_in_memory_ir_for_debugging(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v37 = a3;
  id v38 = a4;
  id v42 = a5;
  id v36 = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "net");
  uint64_t v32 = objc_msgSend(NSString, "stringWithFormat:", @"segment_%d", a2);
  long long v10 = objc_msgSend(v37, "stringByAppendingPathComponent:");
  [MEMORY[0x1E4F28CB8] defaultManager];
  int v39 = v56 = 0;
  if ([v39 fileExistsAtPath:v10 isDirectory:&v56])
  {
    id v54 = 0;
    [v39 removeItemAtPath:v10 error:&v54];
    id v11 = v54;
    id v53 = v11;
    [v39 createDirectoryAtPath:v10 withIntermediateDirectories:1 attributes:0 error:&v53];
    std::string::size_type v12 = (Espresso *)v53;

    int v33 = v12;
  }
  else
  {
    id v55 = 0;
    [v39 createDirectoryAtPath:v10 withIntermediateDirectories:1 attributes:0 error:&v55];
    std::string::size_type v13 = (Espresso *)v55;
    int v33 = v13;
  }
  long long v15 = Espresso::espresso_os_log_subsystem(v13, v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)uint64_t v62 = a2;
    *(_WORD *)&v62[4] = 2112;
    *(void *)&v62[6] = v10;
    _os_log_debug_impl(&dword_1920CB000, v15, OS_LOG_TYPE_DEBUG, "[Espresso::ANECompilerEngine::dump_in_memory_ir_for_debugging] save ANEC IR plist, weights, and compiler options of segment %d to %@", buf, 0x12u);
  }

  long long v16 = __p;
  if (v58 < 0) {
    long long v16 = (void **)__p[0];
  }
  uint64_t v34 = objc_msgSend(NSString, "stringWithFormat:", @"%s.plist", v16);
  uint64_t v35 = objc_msgSend(v10, "stringByAppendingPathComponent:");
  BOOL v17 = (Espresso *)objc_msgSend(v38, "writeToFile:atomically:");
  if ((v17 & 1) == 0)
  {
    unint64_t v19 = Espresso::espresso_os_log_subsystem(v17, v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v62 = v35;
      _os_log_error_impl(&dword_1920CB000, v19, OS_LOG_TYPE_ERROR, "[Espresso::ANECompilerEngine::dump_in_memory_ir_for_debugging] failed to save ANEC IR plist to %@", buf, 0xCu);
    }
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = [v42 allKeys];
  uint64_t v43 = [obj countByEnumeratingWithState:&v49 objects:v60 count:16];
  if (v43)
  {
    uint64_t v41 = *(void *)v50;
    do
    {
      for (uint64_t i = 0; i != v43; ++i)
      {
        if (*(void *)v50 != v41) {
          objc_enumerationMutation(obj);
        }
        int v20 = [v42 objectForKeyedSubscript:*(void *)(*((void *)&v49 + 1) + 8 * i)];
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        BOOL v21 = [v20 allKeys];
        uint64_t v22 = [v21 countByEnumeratingWithState:&v45 objects:v59 count:16];
        if (v22)
        {
          uint64_t v23 = *(void *)v46;
          do
          {
            for (uint64_t j = 0; j != v22; ++j)
            {
              if (*(void *)v46 != v23) {
                objc_enumerationMutation(v21);
              }
              uint64_t v25 = *(void *)(*((void *)&v45 + 1) + 8 * j);
              uint64_t v26 = [v10 stringByAppendingPathComponent:v25];
              id v27 = [v20 objectForKeyedSubscript:v25];
              char v28 = [v27 writeToFile:v26 atomically:1];

              if ((v28 & 1) == 0)
              {
                char v31 = Espresso::espresso_os_log_subsystem(v29, v30);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  *(void *)uint64_t v62 = v26;
                  _os_log_error_impl(&dword_1920CB000, v31, OS_LOG_TYPE_ERROR, "[Espresso::ANECompilerEngine::dump_in_memory_ir_for_debugging] failed to save weights to %@", buf, 0xCu);
                }
              }
            }
            uint64_t v22 = [v21 countByEnumeratingWithState:&v45 objects:v59 count:16];
          }
          while (v22);
        }
      }
      uint64_t v43 = [obj countByEnumeratingWithState:&v49 objects:v60 count:16];
    }
    while (v43);
  }

  if (v58 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192865824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::write_compilation_options_file(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (uint64_t *)*a2;
  }
  id v8 = objc_msgSend(NSString, "stringWithFormat:", @"%s_options.plist", v7);
  uint64_t v9 = [v6 stringByAppendingPathComponent:v8];
  if (v5)
  {
    long long v10 = [MEMORY[0x1E4F28CB8] defaultManager];
    [v10 removeItemAtPath:v9 error:0];

    std::string::size_type v13 = Espresso::espresso_os_log_subsystem(v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_debug_impl(&dword_1920CB000, v13, OS_LOG_TYPE_DEBUG, "Dumping compiler options to %@", buf, 0xCu);
    }

    if (([v5 writeToFile:v9 atomically:1] & 1) == 0)
    {
      *(void *)buf = [v9 UTF8String];
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Failed writing compiler options %s", buf);
    }
  }
}

void sub_192865AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::compiler::build_segment(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  uint64_t v684 = *MEMORY[0x1E4F143B8];
  long long v606 = *a4;
  std::unordered_set<std::string>::unordered_set((uint64_t)v607, (uint64_t)(a4 + 1));
  std::unordered_set<std::string>::unordered_set((uint64_t)v609, (uint64_t)a4 + 56);
  char v612 = 0;
  uint64_t v611 = 0;
  uint64_t v613 = 0;
  std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(&v611, *((const void **)a4 + 12), *((void *)a4 + 13), (uint64_t)(*((void *)a4 + 13) - *((void *)a4 + 12)) >> 2);
  uint64_t v5 = a1;
  v605 = 0;
  uint64_t v604 = 0;
  id v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6 || (v605 = std::__shared_weak_count::lock(v6)) == 0 || (uint64_t v7 = *(void *)(a1 + 8), (v604 = v7) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v594[0] = 1;
  uint64_t v596 = a3;
  uint64_t v597 = v7;
  uint64_t v598 = 0;
  uint64_t v599 = 0;
  uint64_t v600 = 0;
  uint64_t v601 = v7;
  uint64_t v603 = 0;
  uint64_t v602 = 0;
  int v595 = 723714112;
  kdebug_trace();
  Espresso::four_cc_mapping_helper::four_cc_mapping_helper((uint64_t)v591, &v604, (uint64_t)&v606);
  BOOL is_network_multihead_multiprocedure = Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(&v604);
  BOOL v8 = is_network_multihead_multiprocedure;
  if (a3) {
    BOOL v8 = 0;
  }
  if (v8) {
    Espresso::run_pass_on_network<Espresso::pass_ane_multi_head>(v7);
  }
  uint64_t v9 = (void *)(v7 + 728);
  if (*(char *)(v7 + 751) < 0)
  {
    if (!*(void *)(v7 + 736)) {
      goto LABEL_44;
    }
    uint64_t v9 = (void *)*v9;
  }
  else if (!*(unsigned char *)(v7 + 751))
  {
    goto LABEL_44;
  }
  objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v9);
  v528 = uint64_t v590 = 0;
  long long v10 = objc_msgSend(MEMORY[0x1E4F28D90], "JSONObjectWithData:options:error:");
  id v11 = (Espresso *)0;
  std::string::size_type v13 = v11;
  if (v10)
  {
    char v14 = [v10 objectForKeyedSubscript:@"isegment"];
    BOOL v15 = v14 == 0;

    if (v15)
    {
      long long v584 = 0u;
      long long v585 = 0u;
      long long v582 = 0u;
      long long v583 = 0u;
      int v20 = [v10 objectForKeyedSubscript:@"all_outputs"];
      uint64_t v18 = [v20 objectAtIndexedSubscript:a3];

      uint64_t v21 = [v18 countByEnumeratingWithState:&v582 objects:v648 count:16];
      if (v21)
      {
        uint64_t v22 = *(void *)v583;
        do
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v583 != v22) {
              objc_enumerationMutation(v18);
            }
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)[*(id *)(*((void *)&v582 + 1) + 8 * i) UTF8String]);
            if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v609, (uint64_t)buf))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v609, (uint64_t)buf, (uint64_t)buf); {
            if ((v674[7] & 0x80000000) != 0)
            }
              operator delete(*(void **)buf);
          }
          uint64_t v21 = [v18 countByEnumeratingWithState:&v582 objects:v648 count:16];
        }
        while (v21);
      }
    }
    else
    {
      long long v16 = [v10 objectForKeyedSubscript:@"isegment"];
      int v17 = [v16 intValue];

      if (v17 != a3 && (v17 & 0x80000000) == 0)
      {

        goto LABEL_957;
      }
      long long v588 = 0u;
      long long v589 = 0u;
      long long v586 = 0u;
      long long v587 = 0u;
      uint64_t v18 = [v10 objectForKeyedSubscript:@"outputs"];
      uint64_t v24 = [v18 countByEnumeratingWithState:&v586 objects:v649 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v587;
        do
        {
          for (uint64_t j = 0; j != v24; ++j)
          {
            if (*(void *)v587 != v25) {
              objc_enumerationMutation(v18);
            }
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)[*(id *)(*((void *)&v586 + 1) + 8 * j) UTF8String]);
            if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v609, (uint64_t)buf))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v609, (uint64_t)buf, (uint64_t)buf); {
            if ((v674[7] & 0x80000000) != 0)
            }
              operator delete(*(void **)buf);
          }
          uint64_t v24 = [v18 countByEnumeratingWithState:&v586 objects:v649 count:16];
        }
        while (v24);
      }
    }
  }
  else
  {
    uint64_t v18 = Espresso::espresso_os_log_subsystem(v11, v12);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      unint64_t v19 = [(Espresso *)v13 description];
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_error_impl(&dword_1920CB000, v18, OS_LOG_TYPE_ERROR, "Error parsing compilation key: %@", buf, 0xCu);
    }
  }

  uint64_t v5 = a1;
LABEL_44:
  if (*(unsigned char *)(v5 + 385))
  {
    *(unsigned char *)(v5 + 385) = 1;
LABEL_47:
    if (!objc_msgSend(*(id *)(v5 + 128), "count", v9))
    {
      uint64_t v28 = objc_opt_new();
      uint64_t v29 = *(void **)(v5 + 128);
      *(void *)(v5 + 128) = v28;

      uint64_t v5 = a1;
    }
    uint64_t v30 = objc_opt_new();
    char v31 = *(void **)(v5 + 200);
    *(void *)(v5 + 200) = v30;

    uint64_t v32 = objc_opt_new();
    int v33 = *(void **)(a1 + 176);
    *(void *)(a1 + 176) = v32;
    int v527 = 1;
    BOOL v530 = 1;
    goto LABEL_50;
  }
  unint64_t v27 = v593;
  *(unsigned char *)(v5 + 385) = v593 > 1;
  BOOL v530 = *(void *)(v604 + 792) != 0;
  if (v27 >= 2) {
    goto LABEL_47;
  }
  if (Espresso::use_multiple_procedure_for_segments(&v604))
  {
    int v527 = 0;
    BOOL v530 = 1;
    goto LABEL_51;
  }
  uint64_t v504 = objc_opt_new();
  uint64_t v505 = *(void **)(v5 + 200);
  *(void *)(v5 + 200) = v504;

  uint64_t v506 = objc_opt_new();
  long long v507 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v506;

  uint64_t v508 = objc_opt_new();
  int v527 = 0;
  int v33 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v508;
LABEL_50:

  uint64_t v5 = a1;
LABEL_51:
  uint64_t v534 = (id *)(v5 + 128);
  uint64_t v34 = [*(id *)(v5 + 128) objectForKey:@"Networks"];
  BOOL v35 = v34 == 0;

  if (v35)
  {
    id v36 = objc_opt_new();
    [*v534 setObject:v36 forKeyedSubscript:@"Networks"];
  }
  uint64_t v37 = objc_opt_new();
  id v38 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v37;

  uint64_t v39 = objc_opt_new();
  uint64_t v40 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v39;

  uint64_t v41 = objc_opt_new();
  id v42 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v41;

  uint64_t v43 = objc_opt_new();
  uint64_t v44 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v43;

  uint64_t v45 = objc_opt_new();
  long long v46 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v45;

  uint64_t v47 = a1;
  std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(*(void **)(a1 + 280));
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v540 = (void *)(a1 + 280);
  *(void *)(a1 + 272) = a1 + 280;
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v48 = objc_opt_new();
    long long v49 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = v48;

    uint64_t v50 = objc_opt_new();
    long long v51 = *(void **)(a1 + 192);
    *(void *)(a1 + 192) = v50;

    uint64_t v47 = a1;
    [*(id *)(a1 + 128) setObject:*(void *)(a1 + 184) forKeyedSubscript:@"NetworkList"];
  }
  *(unsigned char *)(v47 + 384) = 1;
  [*(id *)(v47 + 128) setObject:@"1.0.9" forKeyedSubscript:@"Version"];
  long long v52 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v528 = [v52 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v53 = v604;
  std::string::basic_string[abi:ne180100]<0>(buf, "anec_binary_point");
  id v54 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v53 + 472, buf);
  if ((v674[7] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ((void *)(v53 + 480) != v54)
  {
    id v55 = (const char *)(v54 + 7);
    if (*((char *)v54 + 79) < 0) {
      id v55 = *(const char **)v55;
    }
    char v56 = [NSNumber numberWithInt:atoi(v55)];
    [*v534 setObject:v56 forKeyedSubscript:@"BinaryPoint"];
  }
  char v57 = [v528 objectForKeyedSubscript:@"com.espresso.anecompiler.binary_point"];
  BOOL v58 = v57 == 0;

  if (!v58)
  {
    char v59 = [v528 objectForKeyedSubscript:@"com.espresso.anecompiler.binary_point"];
    [*v534 setObject:v59 forKeyedSubscript:@"BinaryPoint"];
  }
  std::string::size_type v60 = v606;
  __sz.__r_.__value_.__r.__words[0] = v606;
  uint64_t v61 = a1;
  while (v60 < *((void *)&v606 + 1))
  {
    uint64_t v62 = v604;
    uint64_t v63 = *(void *)(v604 + 32);
    long long v64 = *(_OWORD *)(v63 + 16 * v60);
    char v65 = *(std::__shared_weak_count **)(v63 + 16 * v60 + 8);
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v66 = (void *)(v64 + 40);
    uint64_t v550 = v65;
    long long v563 = (Espresso::ANECompilerEngine *)v64;
    char v67 = 0;
    if (*(char *)(v64 + 63) < 0)
    {
      uint64_t v70 = *(void *)(v64 + 48);
      if (v70 > 7)
      {
        if (v70 == 8)
        {
          long long v151 = (void *)*v66;
          if (*v151 != 0x646E5F74696C7073 && *v151 != 0x77725F656E616C70) {
            goto LABEL_267;
          }
          goto LABEL_268;
        }
        if (v70 == 23)
        {
          uint64_t v66 = (void *)*v66;
LABEL_88:
          long long v75 = (void *)*v66;
          uint64_t v76 = v66[1];
          uint64_t v77 = *(void *)((char *)v66 + 15);
          _ZF = v75 == (void *)0x6978616D5F6E6F6ELL && v76 == 0x707075735F6D756DLL && v77 == 0x6E6F697373657270;
LABEL_98:
          char v67 = _ZF;
        }
      }
      else
      {
        if (v70 == 4)
        {
          uint64_t v66 = (void *)*v66;
LABEL_97:
          _ZF = *(_DWORD *)v66 == 1802530676;
          goto LABEL_98;
        }
        if (v70 == 5)
        {
          size_t v71 = (void *)*v66;
          int v72 = *(_DWORD *)v71;
          int v73 = *((unsigned __int8 *)v71 + 4);
          if (v72 != 1768714355 || v73 != 116)
          {
LABEL_267:
            char v67 = 0;
            goto LABEL_101;
          }
          goto LABEL_268;
        }
      }
    }
    else
    {
      unsigned int v68 = *(unsigned __int8 *)(v64 + 63);
      if (v68 > 7)
      {
        if (v68 == 8)
        {
          if (*v66 != 0x646E5F74696C7073)
          {
            _ZF = *v66 == 0x77725F656E616C70;
            goto LABEL_98;
          }
LABEL_268:
          char v67 = 1;
          goto LABEL_101;
        }
        if (v68 == 23) {
          goto LABEL_88;
        }
      }
      else
      {
        if (v68 == 4) {
          goto LABEL_97;
        }
        if (v68 == 5)
        {
          _ZF = *(_DWORD *)v66 == 1768714355 && *(unsigned char *)(v64 + 44) == 116;
          goto LABEL_98;
        }
      }
    }
LABEL_101:
    *(void *)buf = &__sz;
    std::string::size_type v79 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v62 + 96, (unint64_t *)&__sz, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (v79[4] - v79[3] == 24) {
      char v80 = 1;
    }
    else {
      char v80 = v67;
    }
    if (v80) {
      goto LABEL_123;
    }
    uint64_t v81 = *(void *)(*(void *)(v62 + 32) + 16 * __sz.__r_.__value_.__r.__words[0]);
    std::string v82 = (uint64_t *)(v81 + 40);
    if (*(char *)(v81 + 63) < 0)
    {
      uint64_t v83 = *(void *)(v81 + 48);
      if (v83 != 6)
      {
        if (v83 != 16) {
          goto LABEL_975;
        }
        std::string v82 = (uint64_t *)*v82;
LABEL_112:
        uint64_t v85 = (uint64_t *)*v82;
        uint64_t v84 = v82[1];
        if (v85 != (uint64_t *)0x5F747865746E6F63 || v84 != 0x726566736E617274) {
          goto LABEL_975;
        }
        goto LABEL_123;
      }
      std::string v82 = (uint64_t *)*v82;
    }
    else if (*(unsigned char *)(v81 + 63) != 6)
    {
      if (*(unsigned char *)(v81 + 63) != 16) {
        goto LABEL_975;
      }
      goto LABEL_112;
    }
    int v87 = *(_DWORD *)v82;
    int v88 = *((unsigned __int16 *)v82 + 2);
    if (v87 != 1700750947 || v88 != 25710)
    {
LABEL_975:
      v516 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string((std::string *)&v663, __sz.__r_.__value_.__r.__words[0]);
      std::string::size_type v517 = std::string::insert((std::string *)&v663, 0, "No output blobs for layer: ");
      long long v518 = *(_OWORD *)&v517->__r_.__value_.__l.__data_;
      *(void *)v674 = *((void *)&v517->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v518;
      v517->__r_.__value_.__l.__size_ = 0;
      v517->__r_.__value_.__r.__words[2] = 0;
      v517->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v516, (const std::string *)buf);
      __cxa_throw(v516, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_123:
    *(void *)buf = &__sz;
    uint64_t v90 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v62 + 96, (unint64_t *)&__sz, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (v90[3] == v90[4]) {
      goto LABEL_259;
    }
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)&v663, (std::string *)((char *)v563 + 16));
    uint64_t v545 = v604;
    uint64_t v91 = v604 + 96;
    *(void *)buf = &__sz;
    int v92 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v604 + 96, (unint64_t *)&__sz, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    std::string::operator=((std::string *)&v663, (const std::string *)v92[3]);
    *(void *)buf = &__sz;
    uint64_t v93 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v91, (unint64_t *)&__sz, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93[4] - v93[3]) >> 3) >= 2)
    {
      *(void *)std::string __str = &__sz;
      uint64_t v94 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v91, (unint64_t *)&__sz, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[3];
      *(void *)std::string __str = &__sz;
      uint64_t v95 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v91, (unint64_t *)&__sz, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[4];
      *(void *)v674 = 0;
      memset(buf, 0, sizeof(buf));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)buf, (long long *)(v94 + 24), v95, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v95 - v94 - 24) >> 3));
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v664.__r_.__value_.__r.__words[1]);
      *(_OWORD *)&v664.__r_.__value_.__r.__words[1] = *(_OWORD *)buf;
      std::string::size_type v665 = *(void **)v674;
      *(void *)v674 = 0;
      memset(buf, 0, sizeof(buf));
      *(void *)std::string __str = buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    }
    *(void *)buf = &__sz;
    unint64_t v96 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v545 + 56, (unint64_t *)&__sz, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (&v666 != v96 + 3) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v666, (std::string *)v96[3], (std::string *)v96[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96[4] - v96[3]) >> 3));
    }
    int v668 = a3;
    uint8x8_t v97 = (void *)(v545 + 136);
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v545 + 136), (unsigned __int8 *)&v663))
    {
      *(void *)buf = &v663;
      unint64_t v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v97, (unsigned __int8 *)&v663, (long long **)buf);
      uint64_t v100 = *((void *)v98 + 5);
      uint64_t v99 = (std::__shared_weak_count *)*((void *)v98 + 6);
      if (v99) {
        atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v100)
      {
LABEL_263:
        int v554 = 1;
        if (!v99) {
          goto LABEL_139;
        }
LABEL_138:
        nitro::nitro_function::nitro_function(v99);
        goto LABEL_139;
      }
      int v671 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 32))(v100);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v100 + 32))(v100) == 4)
      {
        int v554 = 4;
        uint64_t v101 = @"UInt8";
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v100 + 32))(v100) != 2) {
          goto LABEL_263;
        }
        int v554 = 2;
        uint64_t v101 = @"Int8";
      }
      unsigned int v102 = v672;
      v672 = v101;

      if (v99) {
        goto LABEL_138;
      }
    }
    else
    {
      int v554 = 1;
    }
LABEL_139:
    std::string::size_type v103 = v605;
    if (v605) {
      atomic_fetch_add_explicit(&v605->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v550) {
      atomic_fetch_add_explicit(&v550->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v538 = v103;
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(v545 + 472);
    v542 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    uint64_t v104 = *((void *)v563 + 8);
    std::string::size_type size = *(std::__shared_weak_count **)(v104 + 16);
    v652.__r_.__value_.__r.__words[0] = *(void *)(v104 + 8);
    v652.__r_.__value_.__l.__size_ = (std::string::size_type)size;
    if (size) {
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&v645, 0, sizeof(v645));
    v623[0] = 0;
    v623[1] = (void *)1065353216;
    *(void *)&long long v624 = 897988541;
    BYTE8(v624) = 0;
    *(void **)((char *)v626 + 4) = 0;
    uint64_t v106 = v666;
    if (v667 != v666)
    {
      uint64_t v107 = 0;
      unint64_t v108 = 0;
      BOOL v110 = v554 == 2 || v554 == 4;
      BOOL v532 = v110;
      while (1)
      {
        char v111 = &v106[v107];
        if (v111[23] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v628, *(const std::string::value_type **)v111, *((void *)v111 + 1));
        }
        else
        {
          long long v112 = *(_OWORD *)v111;
          *(void *)&v628[16] = *((void *)v111 + 2);
          *(_OWORD *)v628 = v112;
        }
        *(void *)std::string __str = v628;
        std::string::size_type v113 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v97, v628, (long long **)__str);
        long long v115 = (float *)*((void *)v113 + 5);
        unint64_t v114 = (std::__shared_weak_count *)*((void *)v113 + 6);
        if (v114) {
          atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)buf);
        if (v628[23] >= 0) {
          size_t v116 = v628[23];
        }
        else {
          size_t v116 = *(void *)&v628[8];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__str, v116 + 8);
        if (__str[23] >= 0) {
          int8x8_t v117 = __str;
        }
        else {
          int8x8_t v117 = *(unsigned char **)__str;
        }
        if (v116)
        {
          if (v628[23] >= 0) {
            unsigned int v118 = v628;
          }
          else {
            unsigned int v118 = *(unsigned char **)v628;
          }
          memmove(v117, v118, v116);
        }
        strcpy(&v117[v116], "__@quant");
        if ((v674[7] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        *(_OWORD *)buf = *(_OWORD *)__str;
        *(void *)v674 = *(void *)&__str[16];
        if ((v628[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v628, *(std::string::size_type *)&v628[8]);
        }
        else
        {
          *(_OWORD *)std::string __str = *(_OWORD *)v628;
          *(void *)&__str[16] = *(void *)&v628[16];
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v675, (std::string *)__str, (long long *)&__str[24], 1uLL);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        int v676 = a3;
        int v679 = 1;
        LODWORD(v623[0]) = 3;
        int v119 = (*(uint64_t (**)(float *))(*(void *)v115 + 32))(v115);
        int v120 = v119;
        BOOL v121 = v119 == 2 || v119 == 4;
        BOOL v122 = v121;
        long long v123 = (const void *)*((void *)v563 + 8);
        if (v123)
        {
          if (v124) {
            break;
          }
        }
LABEL_192:

        if (v678 < 0) {
          operator delete(__p);
        }
        *(void *)std::string __str = &v675;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        *(void *)std::string __str = &v674[8];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        if ((v674[7] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if (!v114) {
            goto LABEL_197;
          }
LABEL_196:
          nitro::nitro_function::nitro_function(v114);
          goto LABEL_197;
        }
        if (v114) {
          goto LABEL_196;
        }
LABEL_197:
        if ((v628[23] & 0x80000000) != 0) {
          operator delete(*(void **)v628);
        }
        ++v108;
        uint64_t v106 = v666;
        v107 += 24;
        if (v108 >= 0xAAAAAAAAAAAAAAABLL * ((v667 - v666) >> 3))
        {
          std::string::size_type size = (std::__shared_weak_count *)v652.__r_.__value_.__l.__size_;
          goto LABEL_243;
        }
      }
      size_t v125 = (std::__shared_weak_count *)*((void *)v563 + 9);
      if (v125) {
        atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v126 = (*(uint64_t (**)(void *))(*(void *)v124 + 104))(v124);
      std::unordered_set<std::string>::unordered_set((uint64_t)v636, v126);
      uint64_t v127 = *(void *)(v126 + 40);
      *(void *)((char *)v638 + 13) = *(void *)(v126 + 45);
      *((void *)&v638[0] + 1) = v127;
      std::unordered_set<std::string>::unordered_set((uint64_t)&v632, (uint64_t)v636);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v632, (uint64_t)v628))
      {
LABEL_187:
        size_t v129 = 0;
LABEL_188:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v632);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v636);
        if (v125) {
          nitro::nitro_function::nitro_function(v125);
        }
        if (v129) {
          nitro::nitro_function::nitro_function(v129);
        }
        goto LABEL_192;
      }
      BOOL v130 = fabsf(v115[28] + -1.0) < 0.00000011921
          && std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v545 + 240), v628) == 0;
      char v131 = v130 & ~Espresso::ANECompilerEngine::is_mix(v542, v128);
      if (v120 == 2 || v120 == 4)
      {
        if (v554 == 2 || v554 == 4 || (v131 & 1) != 0)
        {
          size_t v129 = 0;
          goto LABEL_188;
        }
        float v132 = 1.0 / v115[28];
        *(float *)&v623[1] = v132;
        unsigned int v134 = v680;
        v680 = @"Float16";

        std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,Espresso::elementwise_params &,void>(__str, (uint64_t *)&v652, (uint64_t)v623);
      }
      else
      {
        if (v554 != 4 && v554 != 2 || (v131 & 1) != 0) {
          goto LABEL_187;
        }
        float v132 = v115[28];
        *(float *)&v623[1] = v132;
        uint64_t v133 = v680;
        v680 = @"Float16";

        std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,Espresso::elementwise_params &,void>(__str, (uint64_t *)&v652, (uint64_t)v623);
      }
      size_t v129 = *(std::__shared_weak_count **)&__str[8];
      uint64_t v535 = *(void *)__str;
      if (*(void *)__str)
      {
        std::string::operator=((std::string *)&v666[v107], (const std::string *)buf);
        if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v97, buf))
        {
          unint64_t v135 = (std::__shared_weak_count *)operator new(0xF0uLL);
          v135->__shared_owners_ = 0;
          v135->__shared_weak_owners_ = 0;
          v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384BB0;
          Espresso::ANECompilerEngine::blob_container::blob_container((uint64_t)&v135[1], &v652, v120);
          *(void *)std::string __str = buf;
          std::string v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v97, buf, (long long **)__str);
          atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v137 = (std::__shared_weak_count *)*((void *)v136 + 6);
          *((void *)v136 + 5) = v135 + 1;
          *((void *)v136 + 6) = v135;
          if (v137) {
            nitro::nitro_function::nitro_function(v137);
          }
          *(void *)std::string __str = buf;
          uint64_t v138 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v97, buf, (long long **)__str)+ 5);
          *(void *)v650 = v628;
          char v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v97, v628, (long long **)v650);
          Espresso::abstract_blob_container::shape(__str, *((void *)v139 + 5));
          std::string::size_type v643 = 0;
          long long v642 = 0;
          (*(void (**)(uint64_t, unsigned char *, void **))(*(void *)v138 + 16))(v138, __str, &v642);
          if (v643) {
            nitro::nitro_function::nitro_function(v643);
          }
          if (*((void *)&v682 + 1))
          {
            *(void *)&long long v683 = *((void *)&v682 + 1);
            operator delete(*((void **)&v682 + 1));
          }
          if (v140)
          {
            atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v141 = v135;
          }
          else
          {
            uint64_t v141 = 0;
          }
          if (v538) {
            atomic_fetch_add_explicit(&v538->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v140, (const Espresso::net *)v545, v538);
          if (v538) {
            nitro::nitro_function::nitro_function(v538);
          }
          std::string::size_type v144 = Espresso::espresso_os_log_subsystem(v142, v143);
          if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
          {
            if (v674[7] >= 0) {
              uint64_t v145 = buf;
            }
            else {
              uint64_t v145 = *(uint8_t **)buf;
            }
            char v146 = *(unsigned char **)v628;
            if (v628[23] >= 0) {
              char v146 = v628;
            }
            v525 = v146;
            long long v526 = v145;
            v639 = v628;
            uint64_t v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v97, v628, (long long **)&v639);
            Espresso::abstract_blob_container::shape(__str, *((void *)v147 + 5));
            *(_DWORD *)v650 = 136316418;
            *(void *)&v650[4] = v526;
            *(_WORD *)&v650[12] = 2080;
            *(void *)&v650[14] = v525;
            *(_WORD *)&v650[22] = 1024;
            *(_DWORD *)&v650[24] = *(_DWORD *)__str;
            *(_WORD *)&v650[28] = 1024;
            *(_DWORD *)&v650[30] = v122;
            *(_WORD *)&v650[34] = 1024;
            *(_DWORD *)&v650[36] = v532;
            LOWORD(v651[0]) = 2048;
            *(double *)((char *)v651 + 2) = v132;
            _os_log_debug_impl(&dword_1920CB000, v144, OS_LOG_TYPE_DEBUG, "add_quantization_preprocessing: adding blob '%s' remapping '%s' w=%d is_input_quantized %d-> is_output_quantized %d alpha=%.3f", v650, 0x32u);
            if (*((void *)&v682 + 1))
            {
              *(void *)&long long v683 = *((void *)&v682 + 1);
              operator delete(*((void **)&v682 + 1));
            }
          }

          (**(void (***)(uint64_t, uint64_t, uint8_t *))(v535 + 336))(v535 + 336, a1, buf);
          if (v141) {
            nitro::nitro_function::nitro_function(v141);
          }
          nitro::nitro_function::nitro_function(v135);
        }
      }
      goto LABEL_188;
    }
LABEL_243:
    *(void *)buf = &v645;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (size) {
      nitro::nitro_function::nitro_function(size);
    }

    if (v550) {
      nitro::nitro_function::nitro_function(v550);
    }
    if (v538) {
      nitro::nitro_function::nitro_function(v538);
    }
    uint64_t v148 = (const void *)*((void *)v563 + 8);
    if (v148)
    {
      if (v149)
      {
        uint64_t v150 = (std::__shared_weak_count *)*((void *)v563 + 9);
        if (v150) {
          atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (**v149)(v149, a1, &v663);
        if (v150) {
          nitro::nitro_function::nitro_function(v150);
        }
      }
    }

    if (v670 < 0) {
      operator delete(v669);
    }
    *(void *)buf = &v666;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)buf = &v664.__r_.__value_.__l.__size_;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    uint64_t v61 = a1;
    if (v664.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v663);
    }
LABEL_259:
    if (v550) {
      nitro::nitro_function::nitro_function(v550);
    }
    std::string::size_type v60 = __sz.__r_.__value_.__r.__words[0] + 1;
    __sz.__r_.__value_.__r.__words[0] = v60;
  }
  if (!v530)
  {
    Espresso::ANECompilerEngine::compiler::get_consumers_of_blob((Espresso::ANECompilerEngine::compiler *)buf, *(void **)(v61 + 136));
    uint64_t v152 = v608;
    if (v608)
    {
      while (1)
      {
        uint64_t v153 = v152 + 2;
        *(void *)&long long v663 = v152 + 2;
        long long v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v604 + 136, (unsigned __int8 *)v152 + 16, (long long **)&v663);
        uint64_t v155 = (const void *)*((void *)v154 + 5);
        if (!v155
        {
          if (*((char *)v152 + 39) < 0) {
            uint64_t v153 = (void *)*v153;
          }
          *(void *)&long long v663 = v153;
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid blob type for: %s", &v663);
        }
        long long v157 = v156;
        uint64_t v158 = (std::__shared_weak_count *)*((void *)v154 + 6);
        if (v158) {
          atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::ane_name_translator::ane_name(a1 + 336, (char *)v152 + 16, (std::string *)v623);
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(buf, (unsigned __int8 *)v623))
        {
          uint64_t v159 = v604;
          uint64_t v160 = v605;
          if (v605) {
            atomic_fetch_add_explicit(&v605->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v158) {
            atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((SBYTE7(v624) & 0x80u) == 0) {
            char v161 = v623;
          }
          else {
            char v161 = (void **)v623[0];
          }
          unint64_t v162 = [NSString stringWithUTF8String:v161];
          uint64_t v163 = v159 + 472;
          uint64_t v164 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v163);
          std::string::basic_string[abi:ne180100]<0>(__str, "experimental.ane.enable_int16_resample");
          std::string::basic_string[abi:ne180100]<0>(v636, "0");
          Espresso::map_const_get<std::map<std::string,std::string>>(v163, (uint64_t)__str, (uint64_t)v636, (std::string *)&v663);
          if (v664.__r_.__value_.__s.__data_[7] < 0)
          {
            unsigned __int8 v165 = *((void *)&v663 + 1) == 1 && *(unsigned char *)v663 == 49;
            operator delete((void *)v663);
          }
          else
          {
            unsigned __int8 v165 = v664.__r_.__value_.__s.__data_[7] == 1 && v663 == 49;
          }
          if (SBYTE7(v637) < 0) {
            operator delete(v636[0]);
          }
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          *(void *)&long long v663 = v157;
          *((void *)&v663 + 1) = v158;
          if (v158) {
            atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v166 = input_unit((unsigned int **)&v663, v157 + 40, v164, 0, v165);
          [*(id *)(a1 + 136) setObject:v166 forKeyedSubscript:v162];

          if (*((void *)&v663 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v663 + 1));
          }
          [*(id *)(a1 + 152) addObject:v162];

          if (v158) {
            nitro::nitro_function::nitro_function(v158);
          }
          if (v160) {
            nitro::nitro_function::nitro_function(v160);
          }
        }
        if (SBYTE7(v624) < 0) {
          break;
        }
        if (v158) {
          goto LABEL_305;
        }
LABEL_306:
        uint64_t v152 = (uint64_t *)*v152;
        if (!v152) {
          goto LABEL_310;
        }
      }
      operator delete(v623[0]);
      if (!v158) {
        goto LABEL_306;
      }
LABEL_305:
      nitro::nitro_function::nitro_function(v158);
      goto LABEL_306;
    }
LABEL_310:
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)buf);
    uint64_t v61 = a1;
  }
  uint64_t v167 = *(void **)(v61 + 272);
  if (v167 != v540)
  {
    uint64_t v556 = v61 + 336;
    while (1)
    {
      if (*((char *)v167 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v167[4], v167[5]);
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v167 + 2);
        *(void *)v674 = v167[6];
      }
      if (*((char *)v167 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v674[8], (const std::string::value_type *)v167[7], v167[8]);
      }
      else
      {
        *(_OWORD *)&v674[8] = *(_OWORD *)(v167 + 7);
        *(void *)&v674[24] = v167[9];
      }
      unint64_t v168 = (std::string *)v167[11];
      v675.__begin_ = (std::vector<std::string>::pointer)v167[10];
      v675.__end_ = v168;
      if (v168) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v168->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      int v169 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v604 + 472);
      begiuint64_t n = v675.__begin_;
      std::vector<std::string>::pointer end = v675.__end_;
      if (v675.__end_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v675.__end_->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      v561 = (std::__shared_weak_count *)end;
      size_t v564 = v169;
      if (!begin)
      {
        std::string::size_type v515 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_argument_error::invalid_argument_error(v515);
      }
      uint64_t v172 = HIDWORD(begin->__r_.__value_.__r.__words[1]);
      uint64_t v173 = SLODWORD(begin->__r_.__value_.__r.__words[1]);
      int v174 = 2 * v173 * v172;
      uint64_t v175 = (HIDWORD(begin->__r_.__value_.__r.__words[2]) * LODWORD(begin->__r_.__value_.__r.__words[2]));
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(v636, v175 * v174, 1, 1, 1);
      uint64_t v176 = v174;
      uint64_t v177 = (int *)v636[0];
      if ((int)v175 >= 1)
      {
        int v178 = 0;
        uint64_t v179 = 0;
        for (uint64_t k = 0; k != v175; ++k)
        {
          if ((int)v172 >= 1)
          {
            uint64_t v181 = 0;
            uint64_t v182 = (_WORD *)(*((void *)v177 + 2) + v179);
            uint64_t v183 = begin[1].__r_.__value_.__r.__words[0] + 4 * v178;
            do
            {
              if (v173)
              {
                uint64_t v184 = (int *)v183;
                long long v185 = v182;
                uint64_t v186 = v173;
                do
                {
                  int v187 = *v184++;
                  _S0 = v187;
                  __asm { FCVT            H0, S0 }
                  *v185++ = _S0;
                  --v186;
                }
                while (v186);
              }
              ++v181;
              v182 += v173;
              v183 += 4 * v173;
            }
            while (v181 != v172);
          }
          v179 += v174;
          v178 += v172 * v173;
        }
      }
      uint64_t v192 = (std::__shared_weak_count *)v636[1];
      if (v636[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v636[1] + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v193 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)v534, *((const unsigned __int8 **)v177 + 2), v177[2]);
      if (v192) {
        nitro::nitro_function::nitro_function(v192);
      }
      uint64_t v194 = NSString;
      Espresso::ANECompilerEngine::ane_name_translator::ane_name(v556, (char *)buf, (std::string *)&v663);
      if (v664.__r_.__value_.__s.__data_[7] >= 0) {
        uint64_t v195 = &v663;
      }
      else {
        uint64_t v195 = (long long *)v663;
      }
      long long v568 = [v194 stringWithUTF8String:v195];
      v558 = v192;
      if (v664.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v663);
      }
      uint64_t v196 = objc_opt_new();
      [v196 setObject:v568 forKeyedSubscript:@"ConstantName"];
      uint64_t v197 = NSNumber;
      if (*(unsigned char *)(a1 + 552)) {
        uint64_t weights_file_index = 0;
      }
      else {
      unsigned int v199 = [v197 numberWithUnsignedLong:weights_file_index];
      }
      [v196 setObject:v199 forKeyedSubscript:@"ConstantIndex"];

      [v196 setObject:@"Float16" forKeyedSubscript:@"ConstantType"];
      uint64_t v200 = [NSNumber numberWithInt:v172];
      [v196 setObject:v200 forKeyedSubscript:@"ConstantHeight"];

      uint64_t v201 = [NSNumber numberWithInt:v173];
      [v196 setObject:v201 forKeyedSubscript:@"ConstantWidth"];

      uint64_t v202 = [NSNumber numberWithInt:v175];
      [v196 setObject:v202 forKeyedSubscript:@"ConstantChannels"];

      [v196 setObject:&unk_1EE3AEEF0 forKeyedSubscript:@"ConstantInterleave"];
      uint64_t v203 = [NSNumber numberWithInt:2 * v173];
      [v196 setObject:v203 forKeyedSubscript:@"ConstantRowStride"];

      uint64_t v204 = [NSNumber numberWithUnsignedLong:v176];
      [v196 setObject:v204 forKeyedSubscript:@"ConstantPlaneStride"];

      long long v205 = [NSNumber numberWithInt:v193];
      [v196 setObject:v205 forKeyedSubscript:@"ConstantByteOffset"];

      [*(id *)(a1 + 136) setObject:v196 forKeyedSubscript:v568];
      if (Espresso::ANECompilerEngine::is_mix(v564, v206)) {
        goto LABEL_371;
      }
      uint64_t v207 = a1;
      if (SHIDWORD(begin->__r_.__value_.__r.__words[2]) >= 2) {
        break;
      }
LABEL_372:
      [*(id *)(v207 + 168) addObject:v568];

      if (v558) {
        nitro::nitro_function::nitro_function(v558);
      }

      if (v561) {
        nitro::nitro_function::nitro_function(v561);
      }

      if (v675.__end_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v675.__end_);
      }
      if ((v674[31] & 0x80000000) != 0) {
        operator delete(*(void **)&v674[8]);
      }
      if ((v674[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      size_t v223 = (void *)v167[1];
      if (v223)
      {
        do
        {
          float32x4_t v224 = v223;
          size_t v223 = (void *)*v223;
        }
        while (v223);
      }
      else
      {
        do
        {
          float32x4_t v224 = (void *)v167[2];
          _ZF = *v224 == (void)v167;
          uint64_t v167 = v224;
        }
        while (!_ZF);
      }
      uint64_t v167 = v224;
      if (v224 == v540) {
        goto LABEL_388;
      }
    }
    unsigned int v208 = NSString;
    if (v674[7] >= 0) {
      size_t v209 = v674[7];
    }
    else {
      size_t v209 = *(void *)&buf[8];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__str, v209 + 13);
    if (__str[23] >= 0) {
      uint64_t v210 = __str;
    }
    else {
      uint64_t v210 = *(unsigned char **)__str;
    }
    if (v209)
    {
      if (v674[7] >= 0) {
        long long v211 = buf;
      }
      else {
        long long v211 = *(uint8_t **)buf;
      }
      memmove(v210, v211, v209);
    }
    strcpy(&v210[v209], "__@prereshape");
    Espresso::ANECompilerEngine::ane_name_translator::ane_name(v556, __str, (std::string *)&v663);
    if (v664.__r_.__value_.__s.__data_[7] >= 0) {
      uint64_t v212 = &v663;
    }
    else {
      uint64_t v212 = (long long *)v663;
    }
    uint64_t v213 = [v208 stringWithUTF8String:v212];

    if (v664.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v663);
    }
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    [*(id *)(a1 + 136) setObject:v196 forKeyedSubscript:v213];
    [v196 setObject:v213 forKeyedSubscript:@"ConstantName"];
    unint64_t v214 = NSString;
    Espresso::ANECompilerEngine::ane_name_translator::ane_name(v556, (char *)buf, (std::string *)&v663);
    if (v664.__r_.__value_.__s.__data_[7] >= 0) {
      float32x4_t v215 = &v663;
    }
    else {
      float32x4_t v215 = (long long *)v663;
    }
    long long v216 = [v214 stringWithUTF8String:v215];
    if (v664.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v663);
    }
    unint64_t v217 = objc_opt_new();
    [v217 setObject:v213 forKeyedSubscript:@"Bottom"];
    [v217 setObject:v216 forKeyedSubscript:@"Name"];
    [v217 setObject:@"Reshape" forKeyedSubscript:@"Type"];
    [v217 setObject:@"Float16" forKeyedSubscript:@"OutputType"];
    int v218 = objc_opt_new();
    size_t v219 = [NSNumber numberWithInt:LODWORD(begin->__r_.__value_.__r.__words[1])];
    [v218 setObject:v219 forKeyedSubscript:@"ReshapedWidth"];

    long long v220 = [NSNumber numberWithInt:HIDWORD(begin->__r_.__value_.__r.__words[1])];
    [v218 setObject:v220 forKeyedSubscript:@"ReshapedHeight"];

    [v218 setObject:&unk_1EE3AEEF0 forKeyedSubscript:@"ReshapedDepth"];
    long long v221 = [NSNumber numberWithInt:LODWORD(begin->__r_.__value_.__r.__words[2])];
    [v218 setObject:v221 forKeyedSubscript:@"ReshapedChannel"];

    uint64_t v222 = [NSNumber numberWithInt:HIDWORD(begin->__r_.__value_.__r.__words[2])];
    [v218 setObject:v222 forKeyedSubscript:@"ReshapedBatch"];

    [v217 setObject:v218 forKeyedSubscript:@"Params"];
    [*(id *)(a1 + 136) setObject:v217 forKeyedSubscript:v216];
    [*(id *)(a1 + 144) addObject:v216];

    long long v568 = (void *)v213;
LABEL_371:
    uint64_t v207 = a1;
    goto LABEL_372;
  }
LABEL_388:
  if (v530) {
    goto LABEL_439;
  }
  uint64_t v225 = [v528 objectForKeyedSubscript:@"espresso.ane.dump_all_blobs"];
  int v226 = [v225 BOOLValue];

  if (!v226)
  {
    for (uint64_t m = v610; m; uint64_t m = *(unsigned __int8 **)m)
    {
      *(void *)buf = m + 16;
      size_t v241 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v604 + 136, m + 16, (long long **)buf);
      long long v242 = (const void *)*((void *)v241 + 5);
      if (!v242
      {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob type");
      }
      uint64_t v244 = (uint64_t)v243;
      long long v245 = (std::__shared_weak_count *)*((void *)v241 + 6);
      if (v245) {
        atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v578 = v604;
      v579 = v605;
      if (v605) {
        atomic_fetch_add_explicit(&v605->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::ane_name_translator::ane_name(a1 + 336, (char *)m + 16, (std::string *)buf);
      v577[0] = v244;
      v577[1] = (uint64_t)v245;
      if (v245) {
        atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::compiler::add_anec_subnet_output(a1, &v578, (const void **)buf, v577);
      if (v245) {
        nitro::nitro_function::nitro_function(v245);
      }
      if ((v674[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v579) {
        nitro::nitro_function::nitro_function(v579);
      }
      if (v245) {
        nitro::nitro_function::nitro_function(v245);
      }
    }
    goto LABEL_439;
  }
  std::string v227 = 0;
  *(void *)v674 = 0;
  *(void *)&buf[8] = 0;
  *(void *)buf = &buf[8];
  v636[0] = (void *)v606;
  if ((unint64_t)v606 >= *((void *)&v606 + 1)) {
    goto LABEL_420;
  }
  uint64_t v228 = v604;
  unint64_t v229 = v605;
  uint64_t v569 = v604 + 96;
  uint64_t v230 = v604 + 136;
  do
  {
    *(void *)&long long v663 = v636;
    uint64_t v231 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v569, (unint64_t *)v636, (uint64_t)&std::piecewise_construct, (uint64_t **)&v663);
    uint64_t v232 = (long long *)v231[3];
    uint64_t v233 = (long long *)v231[4];
    while (v232 != v233)
    {
      if (*((char *)v232 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v663, *(const std::string::value_type **)v232, *((void *)v232 + 1));
      }
      else
      {
        long long v234 = *v232;
        v664.__r_.__value_.__r.__words[0] = *((void *)v232 + 2);
        long long v663 = v234;
      }
      *(void *)std::string __str = &v663;
      if (std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)buf, &v663, (long long **)__str)[56])goto LABEL_413; {
      *(void *)std::string __str = &v663;
      }
      std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)buf, &v663, (long long **)__str)[56] = 1;
      *(void *)std::string __str = &v663;
      size_t v235 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v230, (unsigned __int8 *)&v663, (long long **)__str);
      size_t v236 = (const void *)*((void *)v235 + 5);
      if (!v236
      {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob type");
      }
      uint64_t v238 = (uint64_t)v237;
      std::string v239 = (std::__shared_weak_count *)*((void *)v235 + 6);
      if (v239) {
        atomic_fetch_add_explicit(&v239->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v581[0] = v228;
      v581[1] = v229;
      if (v229) {
        atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::ane_name_translator::ane_name(a1 + 336, (char *)&v663, (std::string *)__str);
      v580[0] = v238;
      v580[1] = (uint64_t)v239;
      if (v239) {
        atomic_fetch_add_explicit(&v239->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::compiler::add_anec_subnet_output(a1, v581, (const void **)__str, v580);
      if (v239) {
        nitro::nitro_function::nitro_function(v239);
      }
      if ((__str[23] & 0x80000000) == 0)
      {
        if (!v229) {
          goto LABEL_411;
        }
LABEL_410:
        nitro::nitro_function::nitro_function(v229);
        goto LABEL_411;
      }
      operator delete(*(void **)__str);
      if (v229) {
        goto LABEL_410;
      }
LABEL_411:
      if (v239) {
        nitro::nitro_function::nitro_function(v239);
      }
LABEL_413:
      if (v664.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v663);
      }
      uint64_t v232 = (long long *)((char *)v232 + 24);
    }
    ++v636[0];
  }
  while (v636[0] < (void *)*((void *)&v606 + 1));
  std::string v227 = *(char **)&buf[8];
LABEL_420:
  std::__tree<std::string>::destroy((uint64_t)buf, v227);
LABEL_439:
  std::string::basic_string[abi:ne180100]<0>(&v576, "net");
  if (v527)
  {
    if (*(char *)(v604 + 447) < 0)
    {
      if (!*(void *)(v604 + 432)) {
        goto LABEL_447;
      }
    }
    else if (!*(unsigned char *)(v604 + 447))
    {
      goto LABEL_447;
    }
    std::string::operator=(&v576, (const std::string *)(v604 + 424));
  }
LABEL_447:
  if (a3 >= 1)
  {
    std::to_string((std::string *)&v663, a3);
    uint64_t v246 = std::string::insert((std::string *)&v663, 0, "_");
    long long v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
    *(void *)v674 = *((void *)&v246->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v247;
    v246->__r_.__value_.__l.__size_ = 0;
    v246->__r_.__value_.__r.__words[2] = 0;
    v246->__r_.__value_.__r.__words[0] = 0;
    if (v674[7] >= 0) {
      v248 = buf;
    }
    else {
      v248 = *(uint8_t **)buf;
    }
    if (v674[7] >= 0) {
      std::string::size_type v249 = v674[7];
    }
    else {
      std::string::size_type v249 = *(void *)&buf[8];
    }
    std::string::append(&v576, (const std::string::value_type *)v248, v249);
    if ((v674[7] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v664.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v663);
    }
  }
  [*(id *)(a1 + 136) setObject:*(void *)(a1 + 144) forKeyedSubscript:@"Units"];
  [*(id *)(a1 + 136) setObject:*(void *)(a1 + 152) forKeyedSubscript:@"Inputs"];
  if ([*(id *)(a1 + 160) count]) {
    [*(id *)(a1 + 136) setObject:*(void *)(a1 + 160) forKeyedSubscript:@"Outputs"];
  }
  if ([*(id *)(a1 + 168) count]) {
    [*(id *)(a1 + 136) setObject:*(void *)(a1 + 168) forKeyedSubscript:@"Constants"];
  }
  unint64_t v250 = *(void *)(a1 + 200);
  if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v251 = &v576;
  }
  else {
    unint64_t v251 = (std::string *)v576.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v252 = [NSString stringWithUTF8String:v251];
  [(id)v250 addObject:v252];

  if (*(unsigned char *)(a1 + 120))
  {
    [*(id *)(a1 + 136) setObject:*(void *)(a1 + 192) forKeyedSubscript:@"UnitList"];
    if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v253 = &v576;
    }
    else {
      int v253 = (std::string *)v576.__r_.__value_.__r.__words[0];
    }
    unint64_t v254 = [NSString stringWithUTF8String:v253];
    [*(id *)(a1 + 136) setObject:v254 forKeyedSubscript:@"Name"];

    uint64_t v255 = a1;
    [*(id *)(a1 + 184) addObject:*(void *)(a1 + 136)];
  }
  else
  {
    std::string::size_type v256 = *(void **)(a1 + 128);
    unint64_t v250 = *(void *)(a1 + 136);
    if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v257 = &v576;
    }
    else {
      int v257 = (std::string *)v576.__r_.__value_.__r.__words[0];
    }
    long long v258 = [NSString stringWithUTF8String:v257];
    [v256 setObject:v250 forKeyedSubscript:v258];

    uint64_t v255 = a1;
  }
  uint64_t v259 = *(void **)(v255 + 208);
  if (!v259)
  {
    uint64_t v260 = objc_opt_new();
    int v261 = *(void **)(v255 + 208);
    *(void *)(v255 + 208) = v260;

    uint64_t v259 = *(void **)(v255 + 208);
    uint64_t v255 = a1;
  }
  [v259 addObject:*(void *)(v255 + 136)];
  if ((v527 & 1) != 0 || v530 && !is_network_multihead_multiprocedure)
  {
    *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v404 = *(std::__shared_weak_count **)(v255 + 16);
    if (!v404
      || (std::string::size_type v405 = (std::string::size_type)std::__shared_weak_count::lock(v404),
          (__sz.__r_.__value_.__l.__size_ = v405) == 0)
      || (std::string::size_type v406 = *(void *)(v255 + 8), (__sz.__r_.__value_.__r.__words[0] = v406) == 0))
    {
      v520 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v520, "Inconsistent state");
      __cxa_throw(v520, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v537 = (std::vector<std::string> *)v593;
    if (!*(void *)(v406 + 792)
      && (Espresso::use_multiple_procedure_for_segments((uint64_t *)&__sz) & 1) == 0
      && !*(unsigned char *)(v255 + 385))
    {
      if ((unint64_t)v537 >= 2) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Legacy code wants to exit here, which is wrong in case of multiple 4CC configs");
      }
      goto LABEL_950;
    }
    Espresso::ANECompilerEngine::compiler::get_consumers_of_blob((Espresso::ANECompilerEngine::compiler *)v623, *(void **)(v255 + 136));
    uint64_t v407 = (const std::string::value_type **)(v255 + 392);
    if (*(char *)(v255 + 415) < 0)
    {
      std::string::size_type v408 = *(void *)(v255 + 400);
      if (v408)
      {
        std::string::__init_copy_ctor_external((std::string *)v650, *v407, v408);
        goto LABEL_773;
      }
    }
    else if (*(unsigned char *)(v255 + 415))
    {
      *(_OWORD *)v650 = *(_OWORD *)v407;
      *(void *)&v650[16] = *(void *)(v255 + 408);
LABEL_773:
      std::map<std::string,Espresso::net_configuration>::map[abi:ne180100]((uint64_t)&v632, (void *)(v406 + 776));
      *(void *)buf = v650;
      unint64_t v409 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v632, v650, (long long **)buf);
      if (v409 + 7 != (uint64_t *)(v406 + 800))
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v409 + 7), *(std::string **)(v406 + 800), *(std::string **)(v406 + 808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v406 + 808) - *(void *)(v406 + 800)) >> 3));
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v409 + 10, *(long long **)(v406 + 824), (long long *)(v406 + 832));
      }
      unint64_t v410 = v593;
      if (!v593) {
        goto LABEL_944;
      }
      unint64_t v555 = 0;
      v567 = (Espresso::ANECompilerEngine *)(a1 + 336);
      while (1)
      {
        long long v544 = (Espresso::ANECompilerEngine *)v632;
        if (v632 == v633) {
          goto LABEL_943;
        }
        do
        {
          uint64_t v547 = objc_opt_new();
          v658 = @"0";
          uint64_t v655 = @"OperationName";
          v656 = @"NetworkName";
          if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v411 = &v576;
          }
          else {
            char v411 = (std::string *)v576.__r_.__value_.__r.__words[0];
          }
          v412 = [NSString stringWithUTF8String:v411];
          size_t v659 = v412;
          size_t v413 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v658 forKeys:&v655 count:2];
          [v547 addObject:v413];

          std::string::size_type v414 = __sz.__r_.__value_.__r.__words[0];
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v636, (long long **)(__sz.__r_.__value_.__r.__words[0] + 184));
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v637 + 8, (long long **)(v414 + 208));
          std::string v415 = (const void **)((char *)v544 + 32);
          uint64_t v416 = *((unsigned __int8 *)v544 + 55);
          if ((v416 & 0x80u) == 0) {
            uint64_t v417 = *((unsigned __int8 *)v544 + 55);
          }
          else {
            uint64_t v417 = *((void *)v544 + 5);
          }
          uint64_t v418 = v650[23];
          if (v650[23] < 0) {
            uint64_t v418 = *(void *)&v650[8];
          }
          if (v417 == v418)
          {
            if (v650[23] >= 0) {
              v419 = v650;
            }
            else {
              v419 = *(unsigned __int8 **)v650;
            }
            if ((v416 & 0x80) != 0)
            {
              if (!memcmp(*v415, v419, *((void *)v544 + 5)))
              {
LABEL_799:
                if (*(unsigned char *)(a1 + 385)) {
                  BOOL v421 = (unint64_t)v537 > 1;
                }
                else {
                  BOOL v421 = 1;
                }
                if (v421) {
                  goto LABEL_823;
                }
                goto LABEL_803;
              }
            }
            else
            {
              if (!*((unsigned char *)v544 + 55)) {
                goto LABEL_799;
              }
              uint64_t v420 = (unsigned __int8 *)v544 + 32;
              while (*v420 == *v419)
              {
                ++v420;
                ++v419;
                if (!--v416) {
                  goto LABEL_799;
                }
              }
            }
          }
          if ((unint64_t)v537 > 1) {
            goto LABEL_823;
          }
LABEL_803:
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v645, (long long **)(v414 + 824));
          size_t v422 = (char *)*((void *)v544 + 10);
          if (v422 != (char *)v544 + 88)
          {
            do
            {
              *(void *)buf = v422 + 32;
              char v423 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v645, (void *)v422 + 4, (long long **)buf);
              long long v424 = *(_OWORD *)(v422 + 56);
              long long v425 = *(_OWORD *)(v422 + 72);
              *((void *)v423 + 11) = *((void *)v422 + 11);
              *(_OWORD *)(v423 + 72) = v425;
              *(_OWORD *)(v423 + 56) = v424;
              if (v422 != v423) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v423 + 96, *((char **)v422 + 12), *((void *)v422 + 13), (uint64_t)(*((void *)v422 + 13) - *((void *)v422 + 12)) >> 2);
              }
              id v426 = (char *)*((void *)v422 + 1);
              if (v426)
              {
                do
                {
                  v427 = v426;
                  id v426 = *(char **)v426;
                }
                while (v426);
              }
              else
              {
                do
                {
                  v427 = (char *)*((void *)v422 + 2);
                  _ZF = *(void *)v427 == (void)v422;
                  size_t v422 = v427;
                }
                while (!_ZF);
              }
              size_t v422 = v427;
            }
            while (v427 != (char *)v544 + 88);
          }
          long long v428 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
          v622.__r_.__value_.__r.__words[0] = v414;
          v622.__r_.__value_.__l.__size_ = __sz.__r_.__value_.__l.__size_;
          if (__sz.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(__sz.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v622, (uint64_t)&v645, (uint64_t)buf);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v636, (char *)v636[1]);
          v636[0] = *(void **)buf;
          v636[1] = *(void **)&buf[8];
          *(void *)&long long v637 = *(void *)v674;
          if (*(void *)v674)
          {
            *(void *)(*(void *)&buf[8] + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = &v636[1];
            *(void *)buf = &buf[8];
            *(void *)&buf[8] = 0;
            *(void *)v674 = 0;
          }
          else
          {
            v636[0] = &v636[1];
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v637 + 8, *(char **)&v638[0]);
          v429 = *(char **)&v674[16];
          *((void *)&v637 + 1) = *(void *)&v674[8];
          v638[0] = *(_OWORD *)&v674[16];
          if (*(void *)&v674[24])
          {
            *(void *)(*(void *)&v674[16] + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v638;
            v429 = 0;
            *(void *)&v674[8] = &v674[16];
            *(_OWORD *)&v674[16] = 0uLL;
          }
          else
          {
            *((void *)&v637 + 1) = v638;
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v674[8], v429);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
          if (v428) {
            nitro::nitro_function::nitro_function(v428);
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v645, (char *)v645.__r_.__value_.__l.__size_);
LABEL_823:
          Espresso::ANECompilerEngine::compiler::procedure_name_with_four_cc_configuration(&v645, (uint64_t)v415, v555);
          v560 = objc_opt_new();
          std::vector<std::string> v430 = v608;
          if (!v608) {
            goto LABEL_894;
          }
          do
          {
            v431 = v430 + 2;
            *(void *)buf = v430 + 2;
            char v432 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(__sz.__r_.__value_.__r.__words[0] + 136, (unsigned __int8 *)v430 + 16, (long long **)buf);
            id v433 = (const void *)*((void *)v432 + 5);
            if (!v433
            {
              if (*((char *)v430 + 39) < 0) {
                v431 = (void *)*v431;
              }
              *(void *)buf = v431;
              Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid blob type for: %s", buf);
            }
            v435 = v434;
            std::string v436 = (std::__shared_weak_count *)*((void *)v432 + 6);
            if (v436) {
              atomic_fetch_add_explicit(&v436->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v567, (char *)v430 + 16, (std::string *)v628);
            *(void *)buf = v628;
            long long v437 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v623, v628, (uint64_t)&std::piecewise_construct, (long long **)buf);
            v439 = (uint64_t *)*((void *)v437 + 5);
            uint64_t v438 = (uint64_t *)*((void *)v437 + 6);
            *(void *)v562 = v438;
            while (v439 != v438)
            {
              if (v435[50])
              {
                *(void *)buf = v430 + 2;
                uint64_t v440 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v636, v430 + 2, (long long **)buf);
                *(_OWORD *)&v621.__r_.__value_.__l.__data_ = 0uLL;
                (*(void (**)(_DWORD *, char *, std::string *))(*(void *)v435 + 16))(v435, v440 + 56, &v621);
                if (v621.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v621.__r_.__value_.__l.__size_);
                }
              }
              *(void *)buf = v430 + 2;
              v441 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v636, v430 + 2, (long long **)buf);
              Espresso::abstract_blob_container::shape((char *)buf, (uint64_t)v435);
              uint64_t v442 = (uint64_t)(v441 + 56);
              BOOL v443 = Espresso::layer_shape::operator==(v442, (uint64_t)buf);
              if (*(void *)&v674[24])
              {
                v675.__begin_ = *(std::vector<std::string>::pointer *)&v674[24];
                operator delete(*(void **)&v674[24]);
              }
              if (!v443)
              {
                v619 = 0;
                v618 = 0;
                (*(void (**)(_DWORD *, uint64_t, void **))(*(void *)v435 + 16))(v435, v442, &v618);
                if (v619) {
                  nitro::nitro_function::nitro_function(v619);
                }
              }
              long long v444 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
              if (__sz.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(__sz.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
              }
              v652.__r_.__value_.__r.__words[0] = (std::string::size_type)(v430 + 2);
              v445 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v636, v430 + 2, (long long **)&v652);
              long long v446 = *(_OWORD *)(v445 + 72);
              long long v663 = *(_OWORD *)(v445 + 56);
              *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v446;
              int v447 = (const void *)*((void *)v445 + 12);
              v664.__r_.__value_.__r.__words[2] = *((void *)v445 + 11);
              std::string::size_type v665 = 0;
              v666 = 0;
              std::string::size_type v667 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v665, v447, *((void *)v445 + 13), (uint64_t)(*((void *)v445 + 13) - (void)v447) >> 2);
              Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)buf, (const Espresso::net *)v444, (const Espresso::layer_shape *)&v663, v435[51]);
              if (v665)
              {
                v666 = (char *)v665;
                operator delete(v665);
              }
              if (*((void *)&v444 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v444 + 1));
              }
              long long v448 = v592[0];
              if (v592[0])
              {
                uint64_t v449 = v592;
                do
                {
                  uint64_t v450 = v449;
                  unint64_t v451 = v448 + 32;
                  BOOL v452 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v448 + 4, v430 + 2);
                  std::string::size_type v453 = v448 + 8;
                  if (!v452)
                  {
                    std::string::size_type v453 = v448;
                    uint64_t v449 = (char **)v448;
                  }
                  long long v448 = *(char **)v453;
                }
                while (*(void *)v453);
                if (v449 != v592)
                {
                  std::string::size_type v454 = v452 ? v450 + 4 : (char **)v451;
                  BOOL v455 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v430 + 2, v454);
                  if (!v455)
                  {
                    unint64_t v457 = (unint64_t)v449[8];
                    if (v457)
                    {
                      unint64_t v458 = (unint64_t)v449[7];
                      if (v458)
                      {
                        unint64_t v459 = v555 / v457 % v458;
                        goto LABEL_861;
                      }
                    }
                    long long v460 = Espresso::espresso_os_log_subsystem((Espresso *)v455, v456);
                    if (os_log_type_enabled(v460, OS_LOG_TYPE_ERROR))
                    {
                      std::string::size_type v472 = (std::string::size_type)v449[7];
                      std::string::size_type v471 = (std::string::size_type)v449[8];
                      LODWORD(v652.__r_.__value_.__l.__data_) = 134218240;
                      *(std::string::size_type *)((char *)v652.__r_.__value_.__r.__words + 4) = v471;
                      WORD2(v652.__r_.__value_.__r.__words[1]) = 2048;
                      *(std::string::size_type *)((char *)&v652.__r_.__value_.__r.__words[1] + 6) = v472;
                      _os_log_error_impl(&dword_1920CB000, v460, OS_LOG_TYPE_ERROR, "Incorrect 4CC data: %zd %zd", (uint8_t *)&v652, 0x16u);
                    }
                  }
                }
              }
              unint64_t v459 = 0;
LABEL_861:
              uint64_t v461 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v444 + 472);
              std::string::basic_string[abi:ne180100]<0>(&v642, "experimental.ane.enable_int16_resample");
              std::string::basic_string[abi:ne180100]<0>(&v639, "0");
              Espresso::map_const_get<std::map<std::string,std::string>>(v444 + 472, (uint64_t)&v642, (uint64_t)&v639, &v652);
              if (SHIBYTE(v652.__r_.__value_.__r.__words[2]) < 0)
              {
                unsigned __int8 v462 = v652.__r_.__value_.__l.__size_ == 1 && *v652.__r_.__value_.__l.__data_ == 49;
                operator delete(v652.__r_.__value_.__l.__data_);
              }
              else
              {
                unsigned __int8 v462 = SHIBYTE(v652.__r_.__value_.__r.__words[2]) == 1 && v652.__r_.__value_.__s.__data_[0] == 49;
              }
              if (v641 < 0) {
                operator delete(v639);
              }
              if ((char)v644 < 0) {
                operator delete(v642);
              }
              unint64_t v571 = v435;
              uint64_t v572 = v436;
              if (v436) {
                atomic_fetch_add_explicit(&v436->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::size_type v463 = input_unit((unsigned int **)&v571, (unsigned int *)buf, v461, v459, v462);
              if (v572) {
                nitro::nitro_function::nitro_function(v572);
              }
              [v463 setObject:@"0" forKeyedSubscript:@"OperationName"];
              uint64_t v464 = v439;
              if (*((char *)v439 + 23) < 0) {
                uint64_t v464 = (uint64_t *)*v439;
              }
              v465 = [NSString stringWithUTF8String:v464];
              [v463 setObject:v465 forKeyedSubscript:@"Name"];

              v466 = NSString;
              Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v567, v628, &v652);
              if ((v652.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v467 = &v652;
              }
              else {
                v467 = (std::string *)v652.__r_.__value_.__r.__words[0];
              }
              v468 = [v466 stringWithUTF8String:v467];
              [v463 setObject:v468 forKeyedSubscript:@"InputName"];

              if (SHIBYTE(v652.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v652.__r_.__value_.__l.__data_);
              }
              v469 = v430 + 2;
              if (*((char *)v430 + 39) < 0) {
                v469 = (void *)*v431;
              }
              v470 = [NSString stringWithUTF8String:v469];
              [v463 setObject:v470 forKeyedSubscript:@"InputNameUnescaped"];

              [v560 addObject:v463];
              v439 += 3;
              uint64_t v438 = *(uint64_t **)v562;
            }
            if ((v628[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v628);
              if (v436) {
LABEL_889:
              }
                nitro::nitro_function::nitro_function(v436);
            }
            else if (v436)
            {
              goto LABEL_889;
            }
            std::vector<std::string> v430 = (uint64_t *)*v430;
          }
          while (v430);
LABEL_894:
          int v473 = objc_opt_new();
          for (uint64_t n = v610; n; uint64_t n = *(unsigned __int8 **)n)
          {
            long long v475 = n + 16;
            *(void *)buf = n + 16;
            int64_t v476 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(__sz.__r_.__value_.__r.__words[0] + 136, n + 16, (long long **)buf);
            v477 = (const void *)*((void *)v476 + 5);
            if (!v477
            {
              if ((char)n[39] < 0) {
                long long v475 = (void *)*v475;
              }
              *(void *)buf = v475;
              Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid blob type: %s", buf);
            }
            int64_t v479 = v478;
            v480 = (std::__shared_weak_count *)*((void *)v476 + 6);
            if (v480) {
              atomic_fetch_add_explicit(&v480->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v478[50])
            {
              *(void *)buf = n + 16;
              v481 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v636, (void *)n + 2, (long long **)buf);
              v647 = 0;
              int v646 = 0;
              (*(void (**)(int *, char *, long long ***))(*(void *)v479 + 16))(v479, v481 + 56, &v646);
              if (v647) {
                nitro::nitro_function::nitro_function(v647);
              }
            }
            long long v482 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            if (__sz.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(__sz.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)v628 = n + 16;
            v483 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v636, (void *)n + 2, (long long **)v628);
            long long v484 = *(_OWORD *)(v483 + 72);
            *(_OWORD *)std::string __str = *(_OWORD *)(v483 + 56);
            *(_OWORD *)&__str[16] = v484;
            long long v485 = (const void *)*((void *)v483 + 12);
            long long v682 = *((unint64_t *)v483 + 11);
            long long v683 = 0uLL;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)&v682 + 1, v485, *((void *)v483 + 13), (uint64_t)(*((void *)v483 + 13) - (void)v485) >> 2);
            Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)buf, (const Espresso::net *)v482, (const Espresso::layer_shape *)__str, v479[51]);
            if (*((void *)&v682 + 1))
            {
              *(void *)&long long v683 = *((void *)&v682 + 1);
              operator delete(*((void **)&v682 + 1));
            }
            if (*((void *)&v482 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v482 + 1));
            }
            uint64_t v486 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v482 + 472);
            uint64_t v630 = (uint64_t)v479;
            v631 = v480;
            if (v480) {
              atomic_fetch_add_explicit(&v480->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v487 = output_unit((uint64_t *)n + 2, &v630, (int *)buf, v486);
            if (v631) {
              nitro::nitro_function::nitro_function(v631);
            }
            char v488 = NSString;
            Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v567, (char *)n + 16, &v652);
            v489 = std::string::append(&v652, "@output");
            long long v490 = *(_OWORD *)&v489->__r_.__value_.__l.__data_;
            *(void *)&v628[16] = *((void *)&v489->__r_.__value_.__l + 2);
            *(_OWORD *)v628 = v490;
            v489->__r_.__value_.__l.__size_ = 0;
            v489->__r_.__value_.__r.__words[2] = 0;
            v489->__r_.__value_.__r.__words[0] = 0;
            if (v628[23] >= 0) {
              v491 = v628;
            }
            else {
              v491 = *(unsigned char **)v628;
            }
            long long v492 = [v488 stringWithUTF8String:v491];
            if ((v628[23] & 0x80000000) != 0) {
              operator delete(*(void **)v628);
            }
            if (SHIBYTE(v652.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v652.__r_.__value_.__l.__data_);
            }
            [v487 setObject:@"0" forKeyedSubscript:@"OperationName"];
            std::string::size_type v493 = NSString;
            Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v567, (char *)n + 16, (std::string *)v628);
            if (v628[23] >= 0) {
              std::string::size_type v494 = v628;
            }
            else {
              std::string::size_type v494 = *(unsigned char **)v628;
            }
            uint64_t v495 = [v493 stringWithUTF8String:v494];
            [v487 setObject:v495 forKeyedSubscript:@"Name"];

            if ((v628[23] & 0x80000000) != 0) {
              operator delete(*(void **)v628);
            }
            [v487 setObject:v492 forKeyedSubscript:@"OutputName"];
            if ((char)n[39] < 0) {
              long long v475 = (void *)*v475;
            }
            int v496 = [NSString stringWithUTF8String:v475];
            [v487 setObject:v496 forKeyedSubscript:@"OutputNameUnescaped"];

            [v487 removeObjectForKey:@"Bottom"];
            [v473 addObject:v487];

            if (v480) {
              nitro::nitro_function::nitro_function(v480);
            }
          }
          v497 = objc_opt_new();
          v498 = NSString;
          Espresso::ANECompilerEngine::compiler::procedure_name_for_segment_and_configuration((std::string *)buf, a3, (uint64_t)&v645);
          if (v674[7] >= 0) {
            uint64_t v499 = buf;
          }
          else {
            uint64_t v499 = *(uint8_t **)buf;
          }
          v500 = [v498 stringWithUTF8String:v499];
          [v497 setObject:v500 forKeyedSubscript:@"Name"];

          if ((v674[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          [v497 setObject:v547 forKeyedSubscript:@"OperationList"];
          [v497 setObject:v560 forKeyedSubscript:@"InputList"];
          [v497 setObject:v473 forKeyedSubscript:@"OutputList"];
          [*(id *)(a1 + 176) addObject:v497];

          if (SHIBYTE(v645.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v645.__r_.__value_.__l.__data_);
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v637 + 8, *(char **)&v638[0]);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v636, (char *)v636[1]);

          v501 = (char *)v544;
          v502 = (char *)*((void *)v544 + 1);
          if (v502)
          {
            do
            {
              long long v503 = (char **)v502;
              v502 = *(char **)v502;
            }
            while (v502);
          }
          else
          {
            do
            {
              long long v503 = (char **)*((void *)v501 + 2);
              _ZF = *v503 == v501;
              v501 = (char *)v503;
            }
            while (!_ZF);
          }
          long long v544 = (Espresso::ANECompilerEngine *)v503;
        }
        while (v503 != v633);
        unint64_t v410 = v593;
LABEL_943:
        if (++v555 >= v410)
        {
LABEL_944:
          std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)&v632, v633[0]);
          if ((v650[23] & 0x80000000) != 0) {
            operator delete(*(void **)v650);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v623);
          std::string::size_type v405 = __sz.__r_.__value_.__l.__size_;
          if (!__sz.__r_.__value_.__l.__size_)
          {
LABEL_952:
            size_t v509 = [*v534 objectForKey:@"ProcedureList"];
            BOOL v510 = v509 == 0;

            if (v510)
            {
              v511 = objc_opt_new();
              [*v534 setObject:v511 forKeyedSubscript:@"ProcedureList"];
            }
            v512 = [*v534 objectForKeyedSubscript:@"ProcedureList"];
            [v512 addObjectsFromArray:*(void *)(a1 + 176)];

            uint64_t v255 = a1;
            goto LABEL_955;
          }
LABEL_950:
          v403 = (std::__shared_weak_count *)v405;
LABEL_951:
          nitro::nitro_function::nitro_function(v403);
          goto LABEL_952;
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v650, "default");
    goto LABEL_773;
  }
  if (v530)
  {
    BOOL v262 = is_network_multihead_multiprocedure;
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(v255 + 40) - *(void *)(v255 + 32)) >> 3) - 1 != a3) {
      BOOL v262 = 0;
    }
    if (v262)
    {
      Espresso::net::get_analysis_if_existing<Espresso::analysis_ane_multi_head>(&v574, v604);
      uint64_t v263 = *(void **)(v574 + 8);
      v522 = (void *)(v574 + 16);
      if (v263 == (void *)(v574 + 16))
      {
LABEL_759:
        v403 = v575;
        if (!v575) {
          goto LABEL_952;
        }
        goto LABEL_951;
      }
      uint64_t v570 = v255 + 336;
      while (1)
      {
        v523 = v263 + 9;
        v524 = v263;
        v557 = (void *)v263[8];
        if (v557 != v263 + 9) {
          break;
        }
LABEL_753:
        uint64_t v401 = (void *)v263[1];
        if (v401)
        {
          do
          {
            uint64_t v402 = v401;
            uint64_t v401 = (void *)*v401;
          }
          while (v401);
        }
        else
        {
          do
          {
            uint64_t v402 = (void *)v263[2];
            _ZF = *v402 == (void)v263;
            uint64_t v263 = v402;
          }
          while (!_ZF);
        }
        uint64_t v263 = v402;
        if (v402 == v522) {
          goto LABEL_759;
        }
      }
      while (2)
      {
        std::string::basic_string[abi:ne180100]<0>(&v571, "net");
        v647 = 0;
        int v646 = 0;
        unsigned int v264 = *(std::__shared_weak_count **)(v255 + 16);
        if (!v264
          || (int v265 = std::__shared_weak_count::lock(v264), (v647 = v265) == 0)
          || (uint64_t v266 = *(void *)(v255 + 8), (v646 = (long long **)v266) == 0))
        {
          size_t v521 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v521, "Inconsistent state");
          __cxa_throw(v521, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (!*(void *)(v266 + 792) && !Espresso::use_multiple_procedure_for_segments((uint64_t *)&v646)
          || v557[5] == v557[6])
        {
          goto LABEL_744;
        }
        Espresso::ANECompilerEngine::compiler::get_consumers_of_blob((Espresso::ANECompilerEngine::compiler *)&v645, *(void **)(v255 + 136));
        std::string::basic_string[abi:ne180100]<0>(&v642, "default");
        std::map<std::string,Espresso::net_configuration>::map[abi:ne180100]((uint64_t)&v639, (void *)(v266 + 776));
        *(void *)buf = &v642;
        uint64_t v267 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v639, &v642, (long long **)buf);
        if (v267 + 7 != (uint64_t *)(v266 + 800))
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v267 + 7), *(std::string **)(v266 + 800), *(std::string **)(v266 + 808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v266 + 808) - *(void *)(v266 + 800)) >> 3));
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v267 + 10, *(long long **)(v266 + 824), (long long *)(v266 + 832));
        }
        std::string::size_type v268 = (char *)v639;
        if (v639 != &v640)
        {
          do
          {
            v533 = v268;
            uint64_t v269 = (const void **)(v268 + 32);
            uint64_t v270 = NSString;
            Espresso::ANECompilerEngine::compiler::procedure_name_for_combo_and_configuration((std::string *)buf, (int *)v557[5], (int *)v557[6], (uint64_t)(v268 + 32));
            if (v674[7] >= 0) {
              uint64_t v271 = buf;
            }
            else {
              uint64_t v271 = *(uint8_t **)buf;
            }
            uint64_t v559 = [v270 stringWithUTF8String:v271];
            if ((v674[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            *(_OWORD *)uint64_t v636 = 0u;
            long long v637 = 0u;
            memset(v638, 0, sizeof(v638));
            id v272 = *(id *)(v255 + 176);
            uint64_t v273 = [v272 countByEnumeratingWithState:v636 objects:&v663 count:16];
            if (v273)
            {
              LODWORD(v250) = 0;
              uint64_t v274 = *(void *)v637;
              do
              {
                for (iuint64_t i = 0; ii != v273; ++ii)
                {
                  if (*(void *)v637 != v274) {
                    objc_enumerationMutation(v272);
                  }
                  long long v276 = [*((id *)v636[1] + ii) objectForKeyedSubscript:@"Name"];
                  int v277 = [v276 isEqualToString:v559];

                  unint64_t v250 = v277 | v250;
                }
                uint64_t v273 = [v272 countByEnumeratingWithState:v636 objects:&v663 count:16];
              }
              while (v273);

              if (v250) {
                goto LABEL_735;
              }
            }
            else
            {
            }
            uint64_t v278 = (uint64_t)v646;
            std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v632, v646 + 23);
            std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v634, (long long **)(v278 + 208));
            uint64_t v279 = v533[55];
            if ((v279 & 0x80u) == 0) {
              unint64_t v280 = v533[55];
            }
            else {
              unint64_t v280 = *((void *)v533 + 5);
            }
            unint64_t v281 = v644;
            if ((v644 & 0x80u) != 0) {
              unint64_t v281 = (unint64_t)v643;
            }
            if (v280 == v281)
            {
              if ((v644 & 0x80u) == 0) {
                std::string::size_type v282 = (unsigned __int8 *)&v642;
              }
              else {
                std::string::size_type v282 = (unsigned __int8 *)v642;
              }
              if ((v279 & 0x80) != 0)
              {
                if (!memcmp(*v269, v282, *((void *)v533 + 5))) {
                  goto LABEL_544;
                }
              }
              else
              {
                if (!v533[55]) {
                  goto LABEL_544;
                }
                while (*(unsigned __int8 *)v269 == *v282)
                {
                  uint64_t v269 = (const void **)((char *)v269 + 1);
                  ++v282;
                  if (!--v279) {
                    goto LABEL_544;
                  }
                }
              }
            }
            std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)__str, (long long **)(v278 + 824));
            uint64_t v283 = (char *)*((void *)v533 + 10);
            unint64_t v250 = (unint64_t)(v533 + 88);
            if (v283 != v533 + 88)
            {
              do
              {
                *(void *)buf = v283 + 32;
                unint64_t v284 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__str, (void *)v283 + 4, (long long **)buf);
                long long v285 = *(_OWORD *)(v283 + 56);
                long long v286 = *(_OWORD *)(v283 + 72);
                *((void *)v284 + 11) = *((void *)v283 + 11);
                *(_OWORD *)(v284 + 72) = v286;
                *(_OWORD *)(v284 + 56) = v285;
                if (v283 != v284) {
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v284 + 96, *((char **)v283 + 12), *((void *)v283 + 13), (uint64_t)(*((void *)v283 + 13) - *((void *)v283 + 12)) >> 2);
                }
                int v287 = (char *)*((void *)v283 + 1);
                if (v287)
                {
                  do
                  {
                    uint64_t v288 = v287;
                    int v287 = *(char **)v287;
                  }
                  while (v287);
                }
                else
                {
                  do
                  {
                    uint64_t v288 = (char *)*((void *)v283 + 2);
                    _ZF = *(void *)v288 == (void)v283;
                    uint64_t v283 = v288;
                  }
                  while (!_ZF);
                }
                uint64_t v283 = v288;
              }
              while (v288 != (char *)v250);
            }
            uint64_t v289 = v647;
            uint64_t v630 = v278;
            v631 = v647;
            if (v647) {
              atomic_fetch_add_explicit(&v647->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::compute_network_shape_starting_from_data_shapes(&v630, (uint64_t)__str, (uint64_t)buf);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v632, v633[0]);
            v632 = *(char ***)buf;
            v633[0] = *(char **)&buf[8];
            v633[1] = *(char **)v674;
            if (*(void *)v674)
            {
              *(void *)(*(void *)&buf[8] + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v633;
              *(void *)buf = &buf[8];
              *(void *)&buf[8] = 0;
              *(void *)v674 = 0;
            }
            else
            {
              v632 = v633;
            }
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v634, (char *)v635);
            char v290 = *(char **)&v674[16];
            std::string::size_type v634 = *(long long **)&v674[8];
            long long v635 = *(_OWORD *)&v674[16];
            if (*(void *)&v674[24])
            {
              *(void *)(*(void *)&v674[16] + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = &v635;
              char v290 = 0;
              *(void *)&v674[8] = &v674[16];
              *(_OWORD *)&v674[16] = 0uLL;
            }
            else
            {
              std::string::size_type v634 = &v635;
            }
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v674[8], v290);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
            if (v289) {
              nitro::nitro_function::nitro_function(v289);
            }
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__str, *(char **)&__str[8]);
LABEL_544:
            memset(v628, 0, sizeof(v628));
            float v629 = 1.0;
            memset(__str, 0, sizeof(__str));
            long long v682 = 0u;
            long long v683 = 0u;
            id v291 = *(id *)(a1 + 208);
            uint64_t v292 = [v291 countByEnumeratingWithState:__str objects:buf count:16];
            if (v292)
            {
              int v293 = 0;
              unint64_t v250 = **(void **)&__str[16];
              do
              {
                for (juint64_t j = 0; jj != v292; ++jj)
                {
                  if (**(void **)&__str[16] != v250) {
                    objc_enumerationMutation(v291);
                  }
                  Espresso::ANECompilerEngine::compiler::add_consumers_of_blob(*(void **)(*(void *)&__str[8] + 8 * jj), v293 + jj, (uint64_t)v628);
                }
                uint64_t v292 = [v291 countByEnumeratingWithState:__str objects:buf count:16];
                v293 += jj;
              }
              while (v292);
            }

            *(_OWORD *)v674 = 0u;
            *(_OWORD *)buf = 0u;
            *(_DWORD *)&v674[16] = 1065353216;
            __vala = objc_opt_new();
            uint64_t v295 = v557[5];
            uint64_t v296 = a1;
            if (v557[6] != v295)
            {
              uint64_t v297 = 0;
              do
              {
                uint64_t v551 = v297;
                uint64_t v298 = (Espresso::ANECompilerEngine *)*(int *)(v295 + 4 * v297);
                uint64_t v299 = *(void *)(v296 + 32);
                memset(__str, 0, sizeof(__str));
                LODWORD(v682) = 1065353216;
                v565 = v298;
                char v300 = *(char **)(v299 + 120 * (int)v298 + 72);
                if (!v300) {
                  goto LABEL_590;
                }
                do
                {
                  Espresso::ANECompilerEngine::ane_name_translator::ane_name(v570, v300 + 16, &v652);
                  unint64_t v301 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v652);
                  unint64_t v302 = *(void *)&v628[8];
                  if (!*(void *)&v628[8]) {
                    goto LABEL_570;
                  }
                  unint64_t v303 = v301;
                  uint8x8_t v304 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v628[8]);
                  v304.i16[0] = vaddlv_u8(v304);
                  unint64_t v250 = v304.u32[0];
                  if (v304.u32[0] > 1uLL)
                  {
                    unint64_t v305 = v301;
                    if (v301 >= *(void *)&v628[8]) {
                      unint64_t v305 = v301 % *(void *)&v628[8];
                    }
                  }
                  else
                  {
                    unint64_t v305 = (*(void *)&v628[8] - 1) & v301;
                  }
                  int v306 = *(unsigned __int8 ***)(*(void *)v628 + 8 * v305);
                  if (!v306) {
                    goto LABEL_570;
                  }
                  int v307 = *v306;
                  if (!*v306) {
                    goto LABEL_570;
                  }
                  while (1)
                  {
                    unint64_t v308 = *((void *)v307 + 1);
                    if (v308 == v303) {
                      break;
                    }
                    if (v250 > 1)
                    {
                      if (v308 >= v302) {
                        v308 %= v302;
                      }
                    }
                    else
                    {
                      v308 &= v302 - 1;
                    }
                    if (v308 != v305) {
                      goto LABEL_570;
                    }
LABEL_569:
                    int v307 = *(unsigned __int8 **)v307;
                    if (!v307) {
                      goto LABEL_570;
                    }
                  }
                  if (!std::equal_to<std::string>::operator()[abi:ne180100](v307 + 16, (unsigned __int8 *)&v652)) {
                    goto LABEL_569;
                  }
                  unint64_t v250 = *((void *)v307 + 5);
                  uint64_t v309 = *((void *)v307 + 6);
                  while (v250 != v309)
                  {
                    if (*(_DWORD *)v250 != v565)
                    {
                      uint64_t v311 = (_DWORD *)v557[5];
                      std::string v310 = (_DWORD *)v557[6];
                      if (v311 != v310)
                      {
                        while (*v311 != *(_DWORD *)v250)
                        {
                          if (++v311 == v310)
                          {
                            uint64_t v311 = (_DWORD *)v557[6];
                            break;
                          }
                        }
                      }
                      if (v311 != v310)
                      {
                        std::string::size_type v312 = NSString;
                        Espresso::ANECompilerEngine::ane_name_translator::ane_name(v570, v300 + 16, &__sz);
                        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          p_sz = &__sz;
                        }
                        else {
                          p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
                        }
                        uint64_t v314 = [v312 stringWithUTF8String:p_sz];
                        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__sz.__r_.__value_.__l.__data_);
                        }
                        uint64_t v315 = objc_opt_new();
                        v661[0] = @"OperationName";
                        char v316 = objc_msgSend(NSString, "stringWithFormat:", @"S%d", v565);
                        v661[1] = @"Name";
                        v662[0] = v316;
                        v662[1] = v314;
                        std::vector<std::string> v317 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v662 forKeys:v661 count:2];
                        [v315 setObject:v317 forKeyedSubscript:@"BindingBottom"];

                        uint64_t v655 = @"OperationName";
                        objc_msgSend(NSString, "stringWithFormat:", @"S%d", *(unsigned int *)v250);
                        uint64_t v318 = (__CFString *)objc_claimAutoreleasedReturnValue();
                        v658 = v318;
                        v656 = @"Name";
                        uint64_t v319 = (void *)(v250 + 8);
                        if (*(char *)(v250 + 31) < 0) {
                          uint64_t v319 = (void *)*v319;
                        }
                        long long v320 = [NSString stringWithUTF8String:v319];
                        long long v657 = @"Bottom";
                        size_t v659 = v320;
                        v660 = v314;
                        std::string::size_type v321 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v658 forKeys:&v655 count:3];
                        [v315 setObject:v321 forKeyedSubscript:@"BindingTop"];

                        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)buf, (uint64_t)(v300 + 16), (uint64_t)(v300 + 16));
                        [__vala addObject:v315];

                        uint64_t v296 = a1;
                      }
                    }
                    v250 += 32;
                  }
LABEL_570:
                  if (SHIBYTE(v652.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v652.__r_.__value_.__l.__data_);
                  }
                  char v300 = *(char **)v300;
                }
                while (v300);
LABEL_590:
                std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__str);
                uint64_t v297 = v551 + 1;
                uint64_t v295 = v557[5];
              }
              while (v551 + 1 < (unint64_t)((v557[6] - v295) >> 2));
            }
            int v531 = objc_opt_new();
            v566 = (Espresso::ANECompilerEngine *)objc_opt_new();
            v539 = objc_opt_new();
            v536 = (std::vector<std::string> *)objc_opt_new();
            memset(__str, 0, sizeof(__str));
            LODWORD(v682) = 1065353216;
            uint64_t v322 = v557[5];
            if (v557[6] != v322)
            {
              uint64_t v323 = 0;
              while (1)
              {
                uint64_t v541 = v323;
                uint64_t v324 = *(unsigned int *)(v322 + 4 * v323);
                v543 = *(Espresso::ANECompilerEngine **)(v296 + 32);
                uint64_t v325 = v573 >= 0 ? &v571 : (void **)v571;
                if (v324) {
                  objc_msgSend(NSString, "stringWithFormat:", @"%s_%d", v325, v324);
                }
                else {
                id v546 = [NSString stringWithUTF8String:v325];
                }

                v653[0] = @"OperationName";
                std::vector<std::string> v326 = objc_msgSend(NSString, "stringWithFormat:", @"S%d", v324);
                v653[1] = @"NetworkName";
                v654[0] = v326;
                v654[1] = v546;
                uint64_t v327 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v654 forKeys:v653 count:2];
                unk_1EE3BE0B8(v536, "addObject:", v327);

                char v328 = (uint64_t *)*((void *)v543 + 15 * (int)v324 + 4);
                if (v328) {
                  break;
                }
LABEL_696:
                for (kuint64_t k = (unsigned __int8 *)*((void *)v543 + 15 * (int)v324 + 9); kk; kuint64_t k = *(unsigned __int8 **)kk)
                {
                  v652.__r_.__value_.__r.__words[0] = (std::string::size_type)(kk + 16);
                  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__str, kk + 16, (uint64_t)&std::piecewise_construct, (long long **)&v652)+ 10) = v324;
                }

                uint64_t v323 = v541 + 1;
                uint64_t v322 = v557[5];
                uint64_t v296 = a1;
                if (v541 + 1 >= (unint64_t)((v557[6] - v322) >> 2)) {
                  goto LABEL_699;
                }
              }
              while (2)
              {
                if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(buf, (uint64_t)(v328 + 2)))
                {
                  v652.__r_.__value_.__r.__words[0] = (std::string::size_type)(v328 + 2);
                  std::string v329 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v646 + 17), (unsigned __int8 *)v328 + 16, (long long **)&v652);
                  std::string v330 = (const void *)*((void *)v329 + 5);
                  if (!v330
                  {
                    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob type");
                  }
                  std::string v332 = v331;
                  uint64_t v333 = (std::__shared_weak_count *)*((void *)v329 + 6);
                  if (v333) {
                    atomic_fetch_add_explicit(&v333->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  Espresso::ANECompilerEngine::ane_name_translator::ane_name(v570, (char *)v328 + 16, &__sz);
                  unint64_t v334 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__sz);
                  unint64_t v335 = v334;
                  unint64_t v336 = *(void *)&v628[8];
                  if (*(void *)&v628[8])
                  {
                    uint8x8_t v337 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v628[8]);
                    v337.i16[0] = vaddlv_u8(v337);
                    unint64_t v338 = v337.u32[0];
                    if (v337.u32[0] > 1uLL)
                    {
                      unint64_t v250 = v334;
                      if (v334 >= *(void *)&v628[8]) {
                        unint64_t v250 = v334 % *(void *)&v628[8];
                      }
                    }
                    else
                    {
                      unint64_t v250 = (*(void *)&v628[8] - 1) & v334;
                    }
                    v339 = *(void ***)(*(void *)v628 + 8 * v250);
                    if (v339)
                    {
                      float v340 = (char *)*v339;
                      if (*v339)
                      {
                        uint64_t v552 = *(void *)&v628[8] - 1;
                        do
                        {
                          unint64_t v341 = *((void *)v340 + 1);
                          if (v341 == v335)
                          {
                            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v340 + 16, (unsigned __int8 *)&__sz))
                            {
                              goto LABEL_647;
                            }
                          }
                          else
                          {
                            if (v338 > 1)
                            {
                              if (v341 >= v336) {
                                v341 %= v336;
                              }
                            }
                            else
                            {
                              v341 &= v552;
                            }
                            if (v341 != v250) {
                              break;
                            }
                          }
                          float v340 = *(char **)v340;
                        }
                        while (v340);
                      }
                    }
                  }
                  float v340 = (char *)operator new(0x40uLL);
                  v652.__r_.__value_.__r.__words[0] = (std::string::size_type)v340;
                  v652.__r_.__value_.__l.__size_ = (std::string::size_type)&v628[16];
                  v652.__r_.__value_.__s.__data_[16] = 0;
                  *(void *)float v340 = 0;
                  *((void *)v340 + 1) = v335;
                  uint64_t v342 = (std::string *)(v340 + 16);
                  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v342, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)&v342->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
                    *((void *)v340 + 4) = *((void *)&__sz.__r_.__value_.__l + 2);
                  }
                  *((void *)v340 + 5) = 0;
                  *((void *)v340 + 6) = 0;
                  *((void *)v340 + 7) = 0;
                  v652.__r_.__value_.__s.__data_[16] = 1;
                  float v343 = (float)(unint64_t)(*(void *)&v628[24] + 1);
                  if (!v336 || (float)(v629 * (float)v336) < v343)
                  {
                    BOOL v344 = (v336 & (v336 - 1)) != 0;
                    if (v336 < 3) {
                      BOOL v344 = 1;
                    }
                    unint64_t v345 = v344 | (2 * v336);
                    unint64_t v346 = vcvtps_u32_f32(v343 / v629);
                    if (v345 <= v346) {
                      size_t v347 = v346;
                    }
                    else {
                      size_t v347 = v345;
                    }
                    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)v628, v347);
                    unint64_t v336 = *(void *)&v628[8];
                    if ((*(void *)&v628[8] & (*(void *)&v628[8] - 1)) != 0)
                    {
                      if (v335 >= *(void *)&v628[8]) {
                        unint64_t v250 = v335 % *(void *)&v628[8];
                      }
                      else {
                        unint64_t v250 = v335;
                      }
                    }
                    else
                    {
                      unint64_t v250 = (*(void *)&v628[8] - 1) & v335;
                    }
                  }
                  uint64_t v348 = *(void *)v628;
                  size_t v349 = *(void **)(*(void *)v628 + 8 * v250);
                  if (v349)
                  {
                    *(void *)float v340 = *v349;
                    goto LABEL_645;
                  }
                  *(void *)float v340 = *(void *)&v628[16];
                  *(void *)&v628[16] = v340;
                  *(void *)(v348 + 8 * v250) = &v628[16];
                  if (*(void *)v340)
                  {
                    unint64_t v350 = *(void *)(*(void *)v340 + 8);
                    if ((v336 & (v336 - 1)) != 0)
                    {
                      if (v350 >= v336) {
                        v350 %= v336;
                      }
                    }
                    else
                    {
                      v350 &= v336 - 1;
                    }
                    size_t v349 = (void *)(*(void *)v628 + 8 * v350);
LABEL_645:
                    *size_t v349 = v340;
                  }
                  v652.__r_.__value_.__r.__words[0] = 0;
                  ++*(void *)&v628[24];
                  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v652);
LABEL_647:
                  uint64_t v351 = *((void *)v340 + 5);
                  unint64_t v250 = *((void *)v340 + 6);
                  while (v351 != v250)
                  {
                    if (*(_DWORD *)v351 == v324)
                    {
                      int v352 = (const Espresso::net *)v646;
                      std::string v353 = v647;
                      if (v647) {
                        atomic_fetch_add_explicit(&v647->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v622.__r_.__value_.__r.__words[0] = (std::string::size_type)(v328 + 2);
                      uint64_t v354 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v632, v328 + 2, (long long **)&v622);
                      long long v355 = *(_OWORD *)(v354 + 72);
                      *(_OWORD *)int v623 = *(_OWORD *)(v354 + 56);
                      long long v624 = v355;
                      float v356 = (const void *)*((void *)v354 + 12);
                      uint64_t v625 = *((void *)v354 + 11);
                      memset(v626, 0, sizeof(v626));
                      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v626, v356, *((void *)v354 + 13), (uint64_t)(*((void *)v354 + 13) - (void)v356) >> 2);
                      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v652, v352, (const Espresso::layer_shape *)v623, v332[51]);
                      if (v626[0])
                      {
                        v626[1] = v626[0];
                        operator delete(v626[0]);
                      }
                      if (v353) {
                        nitro::nitro_function::nitro_function(v353);
                      }
                      uint64_t v357 = (uint64_t)v352 + 472;
                      v358 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v352 + 472);
                      std::string::basic_string[abi:ne180100]<0>(&v621, "experimental.ane.enable_int16_resample");
                      std::string::basic_string[abi:ne180100]<0>(&v618, "0");
                      Espresso::map_const_get<std::map<std::string,std::string>>(v357, (uint64_t)&v621, (uint64_t)&v618, &v622);
                      if (SHIBYTE(v622.__r_.__value_.__r.__words[2]) < 0)
                      {
                        unsigned __int8 v359 = v622.__r_.__value_.__l.__size_ == 1 && *v622.__r_.__value_.__l.__data_ == 49;
                        operator delete(v622.__r_.__value_.__l.__data_);
                      }
                      else
                      {
                        unsigned __int8 v359 = SHIBYTE(v622.__r_.__value_.__r.__words[2]) == 1
                            && v622.__r_.__value_.__s.__data_[0] == 49;
                      }
                      if (v620 < 0) {
                        operator delete(v618);
                      }
                      if (SHIBYTE(v621.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v621.__r_.__value_.__l.__data_);
                      }
                      v616 = v332;
                      v617 = v333;
                      if (v333) {
                        atomic_fetch_add_explicit(&v333->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      uint64_t v360 = input_unit(&v616, (unsigned int *)&v652, v358, 0, v359);
                      if (v617) {
                        nitro::nitro_function::nitro_function(v617);
                      }
                      uint64_t v361 = objc_msgSend(NSString, "stringWithFormat:", @"S%d", v324);
                      [v360 setObject:v361 forKeyedSubscript:@"OperationName"];

                      if (*((char *)v328 + 39) < 0) {
                        std::string::__init_copy_ctor_external(&v622, (const std::string::value_type *)v328[2], v328[3]);
                      }
                      else {
                        std::string v622 = *(std::string *)(v328 + 2);
                      }
                      Espresso::ANECompilerEngine::ane_name_translator::ane_name(v570, (char *)&v622, &v621);
                      uint64_t v362 = (void *)(v351 + 8);
                      if (*(char *)(v351 + 31) < 0) {
                        uint64_t v362 = (void *)*v362;
                      }
                      int v363 = [NSString stringWithUTF8String:v362];
                      [v360 setObject:v363 forKeyedSubscript:@"Name"];

                      if ((v621.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        v364 = &v621;
                      }
                      else {
                        v364 = (std::string *)v621.__r_.__value_.__r.__words[0];
                      }
                      unsigned int v365 = [NSString stringWithUTF8String:v364];
                      [v360 setObject:v365 forKeyedSubscript:@"InputName"];

                      if ((v622.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string v366 = &v622;
                      }
                      else {
                        std::string v366 = (std::string *)v622.__r_.__value_.__r.__words[0];
                      }
                      uint64_t v367 = [NSString stringWithUTF8String:v366];
                      [v360 setObject:v367 forKeyedSubscript:@"InputNameUnescaped"];

                      [(Espresso::ANECompilerEngine *)v566 addObject:v360];
                      if (SHIBYTE(v621.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v621.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v622.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v622.__r_.__value_.__l.__data_);
                      }
                    }
                    v351 += 32;
                  }
                  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__sz.__r_.__value_.__l.__data_);
                    if (v333) {
LABEL_691:
                    }
                      nitro::nitro_function::nitro_function(v333);
                  }
                  else if (v333)
                  {
                    goto LABEL_691;
                  }
                }
                char v328 = (uint64_t *)*v328;
                if (!v328) {
                  goto LABEL_696;
                }
                continue;
              }
            }
LABEL_699:
            std::string::size_type v370 = v557[11];
            uint64_t v369 = v557[12];
            while (v370 != v369)
            {
              unint64_t v371 = (const Espresso::net *)v646;
              v652.__r_.__value_.__r.__words[0] = v370;
              int v372 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v646 + 17), (unsigned __int8 *)v370, (long long **)&v652);
              int v373 = (const void *)*((void *)v372 + 5);
              if (!v373
              {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob type");
              }
              uint64_t v375 = (uint64_t)v374;
              long long v376 = (std::__shared_weak_count *)*((void *)v372 + 6);
              if (v376) {
                atomic_fetch_add_explicit(&v376->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              long long v377 = v647;
              if (v647) {
                atomic_fetch_add_explicit(&v647->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              __sz.__r_.__value_.__r.__words[0] = v370;
              std::string v378 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v632, (void *)v370, (long long **)&__sz);
              long long v379 = *(_OWORD *)(v378 + 72);
              *(_OWORD *)v650 = *(_OWORD *)(v378 + 56);
              *(_OWORD *)&v650[16] = v379;
              std::string v380 = (const void *)*((void *)v378 + 12);
              *(void *)&v650[32] = *((void *)v378 + 11);
              memset(v651, 0, sizeof(v651));
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v651, v380, *((void *)v378 + 13), (uint64_t)(*((void *)v378 + 13) - (void)v380) >> 2);
              Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v652, v371, (const Espresso::layer_shape *)v650, *(_DWORD *)(v375 + 204));
              if (v651[0])
              {
                v651[1] = v651[0];
                operator delete(v651[0]);
              }
              if (v377) {
                nitro::nitro_function::nitro_function(v377);
              }
              uint64_t v381 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v371 + 472);
              uint64_t v614 = v375;
              v615 = v376;
              if (v376) {
                atomic_fetch_add_explicit(&v376->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v382 = output_unit((uint64_t *)v370, &v614, (int *)&v652, v381);
              if (v615) {
                nitro::nitro_function::nitro_function(v615);
              }
              int v383 = NSString;
              Espresso::ANECompilerEngine::ane_name_translator::ane_name(v570, (char *)v370, &v622);
              std::string v384 = std::string::append(&v622, "@output");
              long long v385 = *(_OWORD *)&v384->__r_.__value_.__l.__data_;
              __sz.__r_.__value_.__r.__words[2] = v384->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v385;
              v384->__r_.__value_.__l.__size_ = 0;
              v384->__r_.__value_.__r.__words[2] = 0;
              v384->__r_.__value_.__r.__words[0] = 0;
              if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v386 = &__sz;
              }
              else {
                uint64_t v386 = (std::string *)__sz.__r_.__value_.__r.__words[0];
              }
              int v387 = [v383 stringWithUTF8String:v386];
              if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__sz.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v622.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v622.__r_.__value_.__l.__data_);
              }
              __sz.__r_.__value_.__r.__words[0] = v370;
              std::string v388 = objc_msgSend(NSString, "stringWithFormat:", @"S%d", *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__str, (unsigned __int8 *)v370, (uint64_t)&std::piecewise_construct, (long long **)&__sz)+ 10));
              [v382 setObject:v388 forKeyedSubscript:@"OperationName"];

              long long v389 = NSString;
              Espresso::ANECompilerEngine::ane_name_translator::ane_name(v570, (char *)v370, &__sz);
              if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v390 = &__sz;
              }
              else {
                uint64_t v390 = (std::string *)__sz.__r_.__value_.__r.__words[0];
              }
              int v391 = [v389 stringWithUTF8String:v390];
              [v382 setObject:v391 forKeyedSubscript:@"Name"];

              if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__sz.__r_.__value_.__l.__data_);
              }
              [v382 setObject:v387 forKeyedSubscript:@"OutputName"];
              std::string::size_type v392 = v370;
              if (*(char *)(v370 + 23) < 0) {
                std::string::size_type v392 = *(void *)v370;
              }
              uint64_t v393 = [NSString stringWithUTF8String:v392];
              [v382 setObject:v393 forKeyedSubscript:@"OutputNameUnescaped"];

              [v382 removeObjectForKey:@"Bottom"];
              [v539 addObject:v382];

              if (v376) {
                nitro::nitro_function::nitro_function(v376);
              }
              v370 += 24;
            }
            unint64_t v250 = (unint64_t)v531;
            [v531 setObject:v559 forKeyedSubscript:@"Name"];
            [v531 setObject:v536 forKeyedSubscript:@"OperationList"];
            [v531 setObject:v566 forKeyedSubscript:@"InputList"];
            [v531 setObject:v539 forKeyedSubscript:@"OutputList"];
            [v531 setObject:__vala forKeyedSubscript:@"BindingList"];
            [*(id *)(a1 + 176) addObject:v531];
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&__str[16]);
            uint64_t v394 = *(void **)__str;
            *(void *)std::string __str = 0;
            if (v394) {
              operator delete(v394);
            }

            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)buf);
            std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::~__hash_table((uint64_t)v628);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v634, (char *)v635);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v632, v633[0]);
LABEL_735:

            unint64_t v395 = (char **)v533;
            v396 = (char *)*((void *)v533 + 1);
            if (v396)
            {
              do
              {
                uint64_t v397 = (char **)v396;
                v396 = *(char **)v396;
              }
              while (v396);
            }
            else
            {
              do
              {
                uint64_t v397 = (char **)v395[2];
                _ZF = *v397 == (char *)v395;
                unint64_t v395 = v397;
              }
              while (!_ZF);
            }
            std::string::size_type v268 = (char *)v397;
            uint64_t v255 = a1;
          }
          while (v397 != &v640);
        }
        std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)&v639, v640);
        if ((char)v644 < 0) {
          operator delete(v642);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v645);
        int v265 = v647;
        if (v647) {
LABEL_744:
        }
          nitro::nitro_function::nitro_function(v265);
        if (v573 < 0) {
          operator delete(v571);
        }
        uint64_t v398 = v557;
        uint64_t v399 = (void *)v557[1];
        uint64_t v263 = v524;
        if (v399)
        {
          do
          {
            uint64_t v400 = v399;
            uint64_t v399 = (void *)*v399;
          }
          while (v399);
        }
        else
        {
          do
          {
            uint64_t v400 = (void *)v398[2];
            _ZF = *v400 == (void)v398;
            uint64_t v398 = v400;
          }
          while (!_ZF);
        }
        v557 = v400;
        if (v400 == v523) {
          goto LABEL_753;
        }
        continue;
      }
    }
  }
LABEL_955:
  int v513 = [*v534 objectForKeyedSubscript:@"Networks"];
  [v513 addObjectsFromArray:*(void *)(v255 + 200)];

  if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v576.__r_.__value_.__l.__data_);
  }
LABEL_957:

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v592[0]);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v594);
  if (v605) {
    nitro::nitro_function::nitro_function(v605);
  }
  if (v611)
  {
    char v612 = v611;
    operator delete(v611);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v609);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v607);
}

void sub_19286ABA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)STACK[0x240]);
  char v59 = (std::__shared_weak_count *)STACK[0x2A8];
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&STACK[0x258]);
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void Espresso::run_pass_on_network<Espresso::pass_ane_multi_head>(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_1EE386AC0;
  uint64_t v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE350080;
  uint64_t v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v8 = (unint64_t)"N8Espresso19pass_ane_multi_headE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v6 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v6);
  if (v6)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v8 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso23analysis_ane_multi_headE");
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void sub_19286C004(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(uint64_t a1, std::string *__str)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_DWORD *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = @"Float16";
  std::string::operator=((std::string *)(a1 + 80), __str);
  return a1;
}

void sub_19286C110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  if (*(char *)(v2 + 103) < 0) {
    operator delete(*v3);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_19286C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::compiler::get_consumers_of_blob(Espresso::ANECompilerEngine::compiler *this, void *a2)
{
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 1065353216;
  Espresso::ANECompilerEngine::compiler::add_consumers_of_blob(a2, -1, (uint64_t)&v12);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>((uint64_t)this, (unint64_t)(float)*((unint64_t *)&v13 + 1));
  for (uint64_t i = (uint64_t *)v13; i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v4 = i[5];
    for (uint64_t j = i[6]; v4 != j; v4 += 32)
    {
      BOOL v15 = (long long *)(i + 2);
      char v6 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v15);
      uint64_t v7 = (char **)(v6 + 40);
      unint64_t v8 = (long long *)(v4 + 8);
      uint64_t v9 = (std::string *)*((void *)v6 + 6);
      if ((unint64_t)v9 >= *((void *)v6 + 7))
      {
        uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, (uint64_t)v8);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, v8);
        uint64_t v10 = v9 + 1;
      }
      *((void *)v6 + 6) = v10;
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::~__hash_table((uint64_t)&v12);
}

void sub_19286C2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v9);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::ANECompilerEngine::compiler::add_anec_subnet_output(uint64_t a1, void *a2, const void **a3, uint64_t *a4)
{
  unint64_t v8 = NSString;
  if (*((char *)a3 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 7);
  if (v21 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v9)
  {
    if (*((char *)a3 + 23) >= 0) {
      id v11 = a3;
    }
    else {
      id v11 = *a3;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "@output");
  if (v21 >= 0) {
    long long v12 = __p;
  }
  else {
    long long v12 = (void **)__p[0];
  }
  long long v13 = [v8 stringWithUTF8String:v12];
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  int v14 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a2 + 472);
  uint64_t v15 = *a4;
  long long v16 = (std::__shared_weak_count *)a4[1];
  uint64_t v18 = *a4;
  unint64_t v19 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a4;
  }
  int v17 = output_unit((uint64_t *)a3, &v18, (int *)(v15 + 160), v14);
  [*(id *)(a1 + 136) setObject:v17 forKeyedSubscript:v13];

  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  [*(id *)(a1 + 160) addObject:v13];
}

void sub_19286C4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19286C514(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19286C50CLL);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_ane_multi_head>(void *a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a2 + 1120), (uint64_t)&v8);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (const void *)v3[3];
  char v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5
  {
    *a1 = v7;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v6) {
      return;
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

uint64_t std::map<std::string,Espresso::net_configuration>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      unint64_t v8 = *(void **)(a1 + 8);
      size_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          unint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          size_t v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          long long v16 = (void *)v3;
          id v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__construct_node<std::pair<std::string const,Espresso::net_configuration> const&>((uint64_t)v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15[0]);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        long long v16 = v7;
        id v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        id v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      long long v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v10);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19286C75C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::procedure_name_for_combo_and_configuration(std::string *a1, int *a2, int *a3, uint64_t a4)
{
  memset(&v21, 0, sizeof(v21));
  if (a2 != a3)
  {
    uint64_t v7 = a2;
    do
    {
      std::to_string(&v23, *v7);
      unint64_t v8 = std::string::append(&v23, ",");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v21, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      ++v7;
    }
    while (v7 != a3);
  }
  long long v12 = std::string::insert(&v21, 0, "C");
  std::string v22 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  int v13 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v14 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v14 = v22.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v14 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    if (v13 >= 0) {
      long long v16 = &v22;
    }
    else {
      long long v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    memmove(v15, v16, v14);
  }
  *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 64;
  int v17 = *(char *)(a4 + 23);
  if (v17 >= 0) {
    uint64_t v18 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v18 = *(const std::string::value_type **)a4;
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v19 = *(void *)(a4 + 8);
  }
  int v20 = std::string::append(&__p, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0) {
      return;
    }
LABEL_36:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v13 < 0) {
    goto LABEL_36;
  }
}

void sub_19286C944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (v30 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

id input_unit(unsigned int **a1, unsigned int *a2, void *a3, unint64_t a4, unsigned __int8 a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  id v74 = a3;
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 32))() == 4
    || (*(unsigned int (**)(void))(*(void *)*a1 + 32))() == 2)
  {
    int v9 = 1;
  }
  else
  {
    int v9 = 2;
  }
  BOOL v10 = objc_opt_new();
  int v73 = v10;
  id v11 = [NSNumber numberWithInt:a2[4]];
  [v10 setObject:v11 forKeyedSubscript:@"InputWidth"];

  long long v12 = [NSNumber numberWithInt:a2[3]];
  [v10 setObject:v12 forKeyedSubscript:@"InputHeight"];

  int v13 = [NSNumber numberWithInt:*a2];
  [v10 setObject:v13 forKeyedSubscript:@"BatchSize"];

  uint64_t v15 = *((void *)*a1 + 16);
  uint64_t v16 = *((void *)*a1 + 17);
  uint64_t v17 = v16 - v15;
  if (a4 && v16 == v15)
  {
    long long v69 = "4CC format index must stay 0";
    goto LABEL_83;
  }
  if (v16 != v15 && v17 >> 2 <= a4)
  {
    long long v69 = "4CC format index too large";
LABEL_83:
    Espresso::throw_exception_selector<Espresso::generic_error>(v69);
  }
  if (v16 == v15) {
    goto LABEL_35;
  }
  BOOL v18 = 0;
  uint64_t v19 = *(unsigned int *)(v15 + 4 * a4);
  if ((int)v19 <= 1278226487)
  {
    if (v19 == 843264056 || v19 == 843264104) {
      goto LABEL_36;
    }
    int v20 = 1111970369;
  }
  else
  {
    if ((int)v19 <= 1380411456)
    {
      if (v19 != 1278226488)
      {
        int v20 = 1278226536;
        goto LABEL_19;
      }
LABEL_36:
      if ((*(unsigned int (**)(void))(*(void *)*a1 + 32))() == 4)
      {
        int v33 = @"UInt8";
      }
      else if ((*(unsigned int (**)(void))(*(void *)*a1 + 32))() == 2)
      {
        int v33 = @"Int8";
      }
      else if (v9 == 4)
      {
        int v33 = @"Float32";
      }
      else if ((((*a1)[30] == 7) & a5) != 0)
      {
        int v33 = @"Int16";
      }
      else
      {
        int v33 = @"Float16";
      }
      [v10 setObject:v33 forKeyedSubscript:@"InputType"];
      unsigned int v34 = a2[3];
      uint64_t v70 = a1;
      signed int v35 = (*a1)[48];
      int v36 = a2[4] * v9 * v35;
      int v38 = v36 - 1;
      BOOL v37 = v36 < 1;
      int v39 = v36 + 62;
      if (!v37) {
        int v39 = v38;
      }
      unsigned int v40 = (v39 & 0xFFFFFFC0) + 64;
      if (v37) {
        v38 += 127;
      }
      unsigned int v41 = (v38 & 0xFFFFFF80) + 128;
      if (v18) {
        uint64_t v42 = v41;
      }
      else {
        uint64_t v42 = v40;
      }
      signed int v43 = a2[1];
      uint64_t v44 = a2[2];
      unsigned int v45 = *a2;
      unsigned int v46 = a2[7];
      id v47 = v73;
      int v72 = (Espresso::ANECompilerEngine *)v74;
      uint64_t v48 = [NSNumber numberWithInt:v42];
      [v47 setObject:v48 forKeyedSubscript:@"InputRowStride"];

      if (v46 == -1)
      {
        char v56 = [NSNumber numberWithInt:v34 * v42];
        [v47 setObject:v56 forKeyedSubscript:@"InputPlaneStride"];
        BOOL v10 = v73;
        a1 = v70;
      }
      else
      {
        if (Espresso::ANECompilerEngine::is_mix(v72, v49)) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid ANE blob layout.");
        }
        uint64_t v50 = [NSNumber numberWithInt:v44];
        [v47 setObject:v50 forKeyedSubscript:@"InputDepth"];
        int v51 = v43 / v35;

        if (v46 == 1)
        {
          uint64_t v54 = v34 * v42;
          uint64_t v55 = (v51 * v54);
          uint64_t v53 = v45 * v55;
          BOOL v10 = v73;
          unint64_t v52 = 0x1E4F28000uLL;
        }
        else
        {
          BOOL v10 = v73;
          unint64_t v52 = 0x1E4F28000;
          if (v46) {
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid ANE blob layout.");
          }
          uint64_t v53 = v34 * v42;
          uint64_t v54 = (v44 * v53);
          uint64_t v55 = (v54 * v51);
        }
        objc_msgSend(*(id *)(v52 + 3792), "numberWithInt:", v53, v70);
        char v57 = a1 = v71;
        [v47 setObject:v57 forKeyedSubscript:@"InputDepthStride"];

        BOOL v58 = [NSNumber numberWithInt:v54];
        [v47 setObject:v58 forKeyedSubscript:@"InputPlaneStride"];

        char v56 = [NSNumber numberWithInt:v55];
        [v47 setObject:v56 forKeyedSubscript:@"InputBatchStride"];
      }

      char v59 = [NSNumber numberWithInt:(*a1)[48]];
      [v47 setObject:v59 forKeyedSubscript:@"InputInterleave"];

      uint64_t v32 = [NSNumber numberWithInt:a2[1]];
      [v47 setObject:v32 forKeyedSubscript:@"InputChannels"];
      goto LABEL_61;
    }
    if (v19 == 1380411457) {
      goto LABEL_36;
    }
    int v20 = 1751411059;
  }
LABEL_19:
  if (v19 == v20) {
    goto LABEL_36;
  }
  if (v17 != 4)
  {
    if (v19) {
      goto LABEL_27;
    }
LABEL_35:
    BOOL v18 = 0;
    goto LABEL_36;
  }
  if (!v19) {
    goto LABEL_35;
  }
  if (v19 == 1278226534 || v19 == 843264102)
  {
    std::string v21 = Espresso::ANECompilerEngine::current_ane_arch(v14);
    if ((Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v21, v22) & 1) == 0)
    {
      int v68 = 4 * (*a1)[48] * a2[4];

      BOOL v18 = (v68 & 0x3C) == 0 && v19 == 843264102;
      if ((v68 & 0x3C) == 0) {
        int v9 = 4;
      }
      goto LABEL_36;
    }

    goto LABEL_35;
  }
LABEL_27:
  std::string v23 = [NSNumber numberWithUnsignedInt:v19];
  [v10 setObject:v23 forKeyedSubscript:@"Input4CCFormat"];

  uint64_t v26 = *a1;
  if (*((void *)*a1 + 7) != *((void *)*a1 + 6))
  {
    unint64_t v27 = (void *)[MEMORY[0x1E4F1CBF0] mutableCopy];
    if (*((void *)v26 + 7) != *((void *)v26 + 6))
    {
      unint64_t v28 = 0;
      do
      {
        uint64_t v29 = objc_opt_new();
        int v30 = [NSNumber numberWithInt:v28];
        [v29 setObject:v30 forKeyedSubscript:@"PlaneIndex"];

        char v31 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(*((void *)v26 + 6) + 4 * v28)];
        [v29 setObject:v31 forKeyedSubscript:@"PlaneRowStride"];

        [v27 addObject:v29];
        ++v28;
      }
      while (v28 < (uint64_t)(*((void *)v26 + 7) - *((void *)v26 + 6)) >> 2);
    }
    [v10 setObject:v27 forKeyedSubscript:@"PlaneDescriptor"];
  }
  if (v19 == 707153000 || v19 == 706956392)
  {
    uint64_t v32 = [NSNumber numberWithInt:a2[1]];
    [v10 setObject:v32 forKeyedSubscript:@"InputChannels"];
LABEL_61:
  }
  std::string::size_type v60 = *a1;
  unsigned int v61 = (*a1)[8];
  if (v61)
  {
    if ((v61 & 0x3F) != 0) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid row stride (not aligned)");
    }
    uint64_t v62 = v60[9];
    uint64_t v63 = [NSNumber numberWithUnsignedInt:(*a1)[8]];
    [v10 setObject:v63 forKeyedSubscript:@"InputRowStride"];

    if (v62) {
      [NSNumber numberWithUnsignedInt:v62];
    }
    else {
    long long v64 = [NSNumber numberWithUnsignedInt:(*a1)[3] * v61];
    }
    [v10 setObject:v64 forKeyedSubscript:@"InputPlaneStride"];

    std::string::size_type v60 = *a1;
  }
  if (v60[11])
  {
    objc_msgSend(v10, "setObject:forKeyedSubscript:", Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)v60[10], (int)a2[6], a2[7] == 0), @"InputCircularBufferWrapAxis");
    char v65 = [NSNumber numberWithUnsignedInt:(*a1)[11]];
    [v10 setObject:v65 forKeyedSubscript:@"InputCircularBufferSize"];
  }
  uint64_t v66 = Espresso::espresso_os_log_subsystem(v24, v25);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v76 = v10;
    _os_log_debug_impl(&dword_1920CB000, v66, OS_LOG_TYPE_DEBUG, "ANEC input = %@", buf, 0xCu);
  }

  return v10;
}

void sub_19286D2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id output_unit(uint64_t *a1, uint64_t *a2, int *a3, void *a4)
{
  id v67 = a4;
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = (uint64_t *)*a1;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  uint64_t v63 = v7;
  unint64_t v8 = objc_opt_new();
  long long v64 = v8;
  int v9 = (Espresso::ANECompilerEngine *)[v8 setObject:v7 forKeyedSubscript:@"Bottom"];
  BOOL v10 = *(unsigned int **)(*a2 + 128);
  id v11 = *(unsigned int **)(*a2 + 136);
  BOOL v12 = 0;
  int64_t v13 = (char *)v11 - (char *)v10;
  if (v11 == v10)
  {
    int v15 = 2;
  }
  else
  {
    uint64_t v14 = *v10;
    int v15 = 2;
    if ((int)v14 <= 1278226487)
    {
      BOOL v16 = v14 == 843264056 || v14 == 843264104;
      int v17 = 1111970369;
    }
    else if ((int)v14 > 1380411456)
    {
      BOOL v16 = v14 == 1380411457;
      int v17 = 1751411059;
    }
    else
    {
      BOOL v16 = v14 == 1278226488;
      int v17 = 1278226536;
    }
    if (v16 || v14 == v17) {
      goto LABEL_19;
    }
    if (v13 == 4)
    {
      if (v14)
      {
        if (v14 != 1278226534 && v14 != 843264102) {
          goto LABEL_60;
        }
        int v51 = Espresso::ANECompilerEngine::current_ane_arch(v9);
        if ((Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v51, v52) & 1) == 0)
        {
          int v61 = 4 * *(_DWORD *)(*a2 + 192) * a3[4];

          BOOL v12 = (v61 & 0x3C) == 0 && v14 == 843264102;
          if ((v61 & 0x3C) != 0) {
            int v15 = 2;
          }
          else {
            int v15 = 4;
          }
          goto LABEL_19;
        }
      }
    }
    else if (v14)
    {
LABEL_60:
      uint64_t v53 = [NSNumber numberWithUnsignedInt:v14];
      [v8 setObject:v53 forKeyedSubscript:@"Output4CCFormat"];

      uint64_t v54 = *a2;
      if (*(void *)(*a2 + 56) != *(void *)(*a2 + 48))
      {
        uint64_t v55 = (void *)[MEMORY[0x1E4F1CBF0] mutableCopy];
        if (*(void *)(v54 + 56) != *(void *)(v54 + 48))
        {
          unint64_t v56 = 0;
          do
          {
            char v57 = objc_opt_new();
            BOOL v58 = [NSNumber numberWithInt:v56];
            [v57 setObject:v58 forKeyedSubscript:@"PlaneIndex"];

            char v59 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v54 + 48) + 4 * v56)];
            [v57 setObject:v59 forKeyedSubscript:@"PlaneRowStride"];

            [v55 addObject:v57];
            ++v56;
          }
          while (v56 < (uint64_t)(*(void *)(v54 + 56) - *(void *)(v54 + 48)) >> 2);
        }
        unint64_t v8 = v64;
        [v64 setObject:v55 forKeyedSubscript:@"PlaneDescriptor"];
      }
      if (v14 == 707153000 || v14 == 706956392)
      {
        std::string::size_type v60 = [NSNumber numberWithInt:a3[1]];
        [v8 setObject:v60 forKeyedSubscript:@"InputChannels"];
      }
      goto LABEL_45;
    }
    BOOL v12 = 0;
  }
LABEL_19:
  uint64_t v19 = [NSNumber numberWithInt:*(unsigned int *)(*a2 + 192)];
  [v8 setObject:v19 forKeyedSubscript:@"OutputInterleave"];

  if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))() == 4
    || (*(unsigned int (**)(void))(*(void *)*a2 + 32))() == 2)
  {
    int v15 = 1;
  }
  int v20 = a3[3];
  int v62 = v15;
  int v21 = a3[4] * v15;
  std::string v22 = a2;
  int v23 = *(_DWORD *)(*a2 + 192);
  int v24 = v21 * v23;
  int v26 = v24 - 1;
  BOOL v25 = v24 < 1;
  int v27 = v24 + 62;
  if (!v25) {
    int v27 = v26;
  }
  unsigned int v28 = (v27 & 0xFFFFFFC0) + 64;
  if (v25) {
    v26 += 127;
  }
  unsigned int v29 = (v26 & 0xFFFFFF80) + 128;
  int v30 = v8;
  if (v12) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = v28;
  }
  int v33 = a3[1];
  int v32 = a3[2];
  int v34 = *a3;
  int v35 = a3[7];
  id v36 = v30;
  char v65 = (Espresso::ANECompilerEngine *)v67;
  BOOL v37 = [NSNumber numberWithInt:v31];
  [v36 setObject:v37 forKeyedSubscript:@"OutputRowStride"];

  if (v35 == -1)
  {
    signed int v43 = [NSNumber numberWithInt:(v20 * v31)];
    [v36 setObject:v43 forKeyedSubscript:@"OutputPlaneStride"];
    uint64_t v7 = v63;
    int v44 = v62;
    a2 = v22;
  }
  else
  {
    if (Espresso::ANECompilerEngine::is_mix(v65, v38)) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid ANE blob layout.");
    }
    int v39 = v33 / v23;
    if (v35 == 1)
    {
      uint64_t v41 = (v20 * v31);
      uint64_t v42 = (v39 * v41);
      uint64_t v40 = (v34 * v42);
      a2 = v22;
    }
    else
    {
      if (v35) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid ANE blob layout.");
      }
      a2 = v22;
      uint64_t v40 = (v20 * v31);
      uint64_t v41 = (v32 * v40);
      uint64_t v42 = (v41 * v39);
    }
    uint64_t v7 = v63;
    [NSNumber numberWithInt:v40];
    v45 = int v44 = v62;
    [v36 setObject:v45 forKeyedSubscript:@"OutputDepthStride"];

    unsigned int v46 = [NSNumber numberWithInt:v41];
    [v36 setObject:v46 forKeyedSubscript:@"OutputPlaneStride"];

    signed int v43 = [NSNumber numberWithInt:v42];
    [v36 setObject:v43 forKeyedSubscript:@"OutputBatchStride"];
  }

  unint64_t v8 = v64;
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))() == 4)
  {
    id v47 = @"UInt8";
  }
  else if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))() == 2)
  {
    id v47 = @"Int8";
  }
  else if (v44 == 4)
  {
    id v47 = @"Float32";
  }
  else
  {
    id v47 = @"Float16";
  }
  [v36 setObject:v47 forKeyedSubscript:@"OutputType"];
LABEL_45:
  if (*(_DWORD *)(*a2 + 44))
  {
    objc_msgSend(v8, "setObject:forKeyedSubscript:", Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)*(unsigned int *)(*a2 + 40), a3[6], a3[7] == 0), @"OutputCircularBufferWrapAxis");
    uint64_t v48 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(*a2 + 44)];
    [v8 setObject:v48 forKeyedSubscript:@"OutputCircularBufferSize"];
  }

  return v8;
}

void sub_19286DA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v5 = *(void **)a1;
    operator delete(v5);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void Espresso::ANECompilerEngine::compiler::add_consumers_of_blob(void *a1, int a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id obj = a1;
  uint64_t v4 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
  if (v4)
  {
    uint64_t v23 = *(void *)v42;
    do
    {
      uint64_t v5 = 0;
      uint64_t v24 = v4;
      do
      {
        if (*(void *)v42 != v23) {
          objc_enumerationMutation(obj);
        }
        uint64_t v27 = v5;
        uint64_t v6 = *(void *)(*((void *)&v41 + 1) + 8 * v5);
        context = (void *)MEMORY[0x192FF2020]();
        CFDictionaryRef theDict = [obj objectForKeyedSubscript:v6];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          CFDictionaryGetValue(theDict, @"Bottom");
          id v28 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v7 = CFDictionaryGetValue(theDict, @"Name");
          unint64_t v8 = (void *)v7;
          if (v28) {
            BOOL v9 = v7 == 0;
          }
          else {
            BOOL v9 = 1;
          }
          if (!v9)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              long long v39 = 0u;
              long long v40 = 0u;
              long long v37 = 0u;
              long long v38 = 0u;
              id v10 = v28;
              uint64_t v11 = [v10 countByEnumeratingWithState:&v37 objects:v46 count:16];
              if (v11)
              {
                uint64_t v12 = *(void *)v38;
                do
                {
                  for (uint64_t i = 0; i != v11; ++i)
                  {
                    if (*(void *)v38 != v12) {
                      objc_enumerationMutation(v10);
                    }
                    uint64_t v14 = *(void **)(*((void *)&v37 + 1) + 8 * i);
                    int v33 = 0;
                    uint64_t v35 = 0;
                    uint64_t v36 = 0;
                    int v34 = 0;
                    MEMORY[0x192FF0F50](&v34, [v8 UTF8String]);
                    int v33 = a2;
                    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v14 UTF8String]);
                    unsigned int v45 = __p;
                    int v15 = std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (long long **)&v45);
                    BOOL v16 = v15 + 5;
                    unint64_t v17 = v15[6];
                    if (v17 >= v15[7])
                    {
                      BOOL v18 = std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::consumer_info const&>(v16, (uint64_t)&v33);
                    }
                    else
                    {
                      std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__construct_one_at_end[abi:ne180100]<Espresso::ANECompilerEngine::compiler::consumer_info const&>((uint64_t)v16, (uint64_t)&v33);
                      BOOL v18 = (char *)(v17 + 32);
                    }
                    v15[6] = v18;
                    if (v32 < 0) {
                      operator delete(__p[0]);
                    }
                    if (SHIBYTE(v36) < 0) {
                      operator delete(v34);
                    }
                  }
                  uint64_t v11 = [v10 countByEnumeratingWithState:&v37 objects:v46 count:16];
                }
                while (v11);
              }
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                int v33 = 0;
                uint64_t v35 = 0;
                uint64_t v36 = 0;
                int v34 = 0;
                MEMORY[0x192FF0F50](&v34, [v8 UTF8String]);
                int v33 = a2;
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v28 UTF8String]);
                unsigned int v45 = __p;
                uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (long long **)&v45);
                int v20 = v19 + 5;
                unint64_t v21 = v19[6];
                if (v21 >= v19[7])
                {
                  std::string v22 = std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::consumer_info const&>(v20, (uint64_t)&v33);
                }
                else
                {
                  std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__construct_one_at_end[abi:ne180100]<Espresso::ANECompilerEngine::compiler::consumer_info const&>((uint64_t)v20, (uint64_t)&v33);
                  std::string v22 = (char *)(v21 + 32);
                }
                v19[6] = v22;
                if (v32 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v36) < 0) {
                  operator delete(v34);
                }
              }
            }
          }
        }
        uint64_t v5 = v27 + 1;
      }
      while (v27 + 1 != v24);
      uint64_t v4 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
    }
    while (v4);
  }
}

void sub_19286E0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  int v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x40uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  BOOL v16 = *a3;
  long long v17 = **a3;
  *((void *)i + 4) = *((void *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)BOOL v16 = 0;
  *((void *)i + 6) = 0;
  *((void *)i + 7) = 0;
  *((void *)i + 5) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  BOOL v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    *BOOL v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v15;
  void *v15 = i;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    BOOL v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_19286E3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__construct_one_at_end[abi:ne180100]<Espresso::ANECompilerEngine::compiler::consumer_info const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  uint64_t v4 = (std::string *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v3 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)(a1 + 8) = v3 + 32;
}

void sub_19286E470(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::consumer_info const&>(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = (uint64_t)(v2 - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v23 = a1 + 2;
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint8x8_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint8x8_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v4];
  BOOL v20 = v10;
  v21.i64[0] = (uint64_t)v11;
  v21.i64[1] = (uint64_t)v11;
  unint64_t v22 = &v10[32 * v9];
  *(_DWORD *)unint64_t v11 = *(_DWORD *)a2;
  uint64_t v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    unint64_t v3 = *a1;
    unint64_t v2 = a1[1];
    int64_t v13 = (char *)v21.i64[1];
    unint64_t v11 = (char *)v21.i64[0];
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    int64_t v13 = v11;
  }
  if (v2 == v3)
  {
    int64x2_t v16 = vdupq_n_s64(v3);
  }
  else
  {
    do
    {
      int v14 = *(_DWORD *)(v2 - 32);
      v2 -= 32;
      *((_DWORD *)v11 - 8) = v14;
      v11 -= 32;
      long long v15 = *(_OWORD *)(v2 + 8);
      *((void *)v11 + 3) = *(void *)(v2 + 24);
      *(_OWORD *)(v11 + 8) = v15;
      *(void *)(v2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
      *(void *)(v2 + 24) = 0;
      *(void *)(v2 + 8) = 0;
    }
    while (v2 != v3);
    int64x2_t v16 = *(int64x2_t *)a1;
  }
  long long v17 = v13 + 32;
  *a1 = (unint64_t)v11;
  a1[1] = (unint64_t)(v13 + 32);
  int64x2_t v21 = v16;
  unint64_t v18 = a1[2];
  a1[2] = (unint64_t)v22;
  unint64_t v22 = (char *)v18;
  BOOL v20 = (char *)v16.i64[0];
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::consumer_info>::~__split_buffer((uint64_t)&v20);
  return v17;
}

void sub_19286E5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::consumer_info>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::ANECompilerEngine::compiler::consumer_info>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 32;
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::ANECompilerEngine::compiler::procedure_name_with_four_cc_configuration(std::string *this, uint64_t a2, unint64_t a3)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if (!a3) {
      return;
    }
  }
  else
  {
    *this = *(std::string *)a2;
    if (!a3) {
      return;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v8 = (const void *)a2;
    }
    else {
      uint64_t v8 = *(const void **)a2;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 35;
  std::to_string(&v15, a3);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v9 = &v15;
  }
  else {
    unint64_t v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  unint64_t v11 = std::string::append(&v16, (const std::string::value_type *)v9, size);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  v17[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this->__r_.__value_.__l.__data_);
  }
  std::string::size_type v14 = v17[0];
  this->__r_.__value_.__r.__words[0] = v12;
  this->__r_.__value_.__l.__size_ = v14;
  *(std::string::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v17 + 7);
  *((unsigned char *)&this->__r_.__value_.__s + 23) = v13;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_19286E7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(Espresso::ANECompilerEngine::compiler::build_state_t *this, const unsigned __int8 *a2, size_t a3)
{
  *((unsigned char *)this + 172) = 1;
  Espresso::sha_hash(&v25, a2, a3, 0);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v25;
  }
  size_t v24 = a3;
  size_t v6 = (uint64_t **)((char *)this + 184);
  for (uint64_t i = (const void **)*((void *)this + 24); i; uint64_t i = (const void **)*i)
  {
    if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100]((const void **)&v23.__r_.__value_.__l.__data_, i + 4))
    {
      if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](i + 4, (const void **)&v23.__r_.__value_.__l.__data_))
      {
        uint64_t v14 = *((unsigned int *)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,int>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,int>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long> const&>,std::tuple<>>((uint64_t **)this + 23, (const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)&v23)+ 16);
        goto LABEL_22;
      }
      ++i;
    }
  }
  int v8 = *((_DWORD *)this + 42);
  if (v8 <= 0) {
    int v9 = -(-v8 & 3);
  }
  else {
    int v9 = *((_DWORD *)this + 42) & 3;
  }
  if (v9)
  {
    size_t v10 = (4 - v9);
    *((_DWORD *)this + 42) = v10 + v8;
    if (*((unsigned char *)this + 97))
    {
      unint64_t v11 = [*((id *)this + 11) objectForKeyedSubscript:&unk_1EE3AEF08];
      std::string::size_type v12 = [v11 allValues];
      char v13 = [v12 objectAtIndexedSubscript:0];

      char v21 = 0;
      std::vector<unsigned char>::vector(__p, v10, &v21);
      [v13 appendBytes:__p[0] length:v10];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      int v19 = v9 - 5;
      while (!__CFADD__(v19++, 1))
      {
        if (fputc(0, *((FILE **)this + 22)) == -1) {
          Espresso::throw_exception_selector<Espresso::io_error>("Error writing additional blob file");
        }
      }
    }
  }
  uint64_t v14 = *((unsigned int *)this + 42);
  *((_DWORD *)this + 42) = v14 + a3;
  if (*((unsigned char *)this + 97))
  {
    std::string v15 = [*((id *)this + 11) objectForKeyedSubscript:&unk_1EE3AEF08];
    std::string v16 = [v15 allValues];
    long long v17 = [v16 objectAtIndexedSubscript:0];

    [v17 appendBytes:a2 length:a3];
  }
  else if (fwrite(a2, a3, 1uLL, *((FILE **)this + 22)) != 1)
  {
    Espresso::throw_exception_selector<Espresso::io_error>("Error writing additional blob file");
  }
  *((_DWORD *)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,int>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,int>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long> const&>,std::tuple<>>(v6, (const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)&v23)+ std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v14;
LABEL_22:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_19286EA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::pair<std::string,unsigned long>,int>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,int>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long> const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  size_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        size_t v6 = (uint64_t **)v5;
        int v8 = (const void **)(v5 + 4);
        if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](a2, (const void **)v5 + 4)) {
          break;
        }
        unint64_t v5 = *v6;
        int v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v8, a2)) {
        return v6;
      }
      int v9 = v6 + 1;
      unint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_9:
    size_t v10 = (char *)operator new(0x48uLL);
    unint64_t v11 = (std::string *)(v10 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v10 + 6) = *(void *)(a3 + 16);
    }
    *((void *)v10 + 7) = *(void *)(a3 + 24);
    *((_DWORD *)v10 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
    *(void *)size_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v6;
    std::string *v9 = (uint64_t *)v10;
    std::string::size_type v12 = (uint64_t *)**a1;
    char v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      char v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_19286EC54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](const void **a1, const void **a2)
{
  int v4 = *((char *)a2 + 23);
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  if (v5 >= 0) {
    unint64_t v7 = a1;
  }
  else {
    unint64_t v7 = *a1;
  }
  if (v4 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = *a2;
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  int v11 = memcmp(v7, v9, v10);
  BOOL v12 = v6 < v8;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v12) {
    return 1;
  }
  int v14 = memcmp(v9, v7, v10);
  BOOL v15 = v8 < v6;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  return !v15 && a1[3] < a2[3];
}

Espresso::ANECompilerEngine::compiler::layer_graph_info_t *Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(Espresso::ANECompilerEngine::compiler::layer_graph_info_t *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *((_DWORD *)this + 26) = 1;
  *((void *)this + 14) = @"Float16";
  MEMORY[0x192FF0F50]((char *)this + 80, "Unassigned");
  return this;
}

void sub_19286EDD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  if (*(char *)(v2 + 103) < 0) {
    operator delete(*v3);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,Espresso::elementwise_params &,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  size_t v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE384F68;
  Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel((uint64_t)(v6 + 3), a2, a3);
  *a1 = v7;
  a1[1] = v6;
}

void sub_19286EE8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384F68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso35use_multiple_procedure_for_segmentsERKNSt3__110shared_ptrINS_3netEEE_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v2 = [v0 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v1 = [v2 objectForKeyedSubscript:@"espresso.anecompiler.merge_segments"];
  Espresso::use_multiple_procedure_for_segments(std::shared_ptr<Espresso::net> const&)::ret = [v1 intValue] != 0;
}

void sub_19286EFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_ane_multi_head>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_ane_multi_head>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_ane_multi_head>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::ANECompilerEngine::compiler::compile_ir(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  size_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6 && (long long v44 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      BOOL v8 = *(unsigned __int8 *)(v7 + 1408) != 0;
      goto LABEL_7;
    }
  }
  else
  {
    long long v44 = 0;
  }
  BOOL v8 = 0;
LABEL_7:
  if (*((char *)a2 + 23) >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = (uint64_t *)*a2;
  }
  size_t v10 = [NSString stringWithUTF8String:v9];
  if (*((char *)a3 + 23) >= 0) {
    int v11 = a3;
  }
  else {
    int v11 = (uint64_t *)*a3;
  }
  BOOL v12 = [NSString stringWithUTF8String:v11];
  int v14 = Espresso::espresso_os_log_subsystem(v12, v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    int v33 = @"False";
    *(_DWORD *)buf = 138412802;
    uint64_t v53 = v10;
    __int16 v54 = 2112;
    if (v8) {
      int v33 = @"True";
    }
    uint64_t v55 = v12;
    __int16 v56 = 2112;
    char v57 = v33;
    _os_log_debug_impl(&dword_1920CB000, v14, OS_LOG_TYPE_DEBUG, "[compiler::compile_ir] input: %@ binary path: %@ EnableANEAnalytics: %@", buf, 0x20u);
  }

  int v51 = [v10 stringByAppendingPathComponent:@"net.plist"];
  BOOL v15 = [v10 stringByAppendingPathComponent:@"net.additional.weights"];
  uint64_t v50 = [v10 stringByAppendingPathComponent:@"net_options.plist"];
  std::string v16 = [MEMORY[0x1E4F28CB8] defaultManager];
  int v17 = [v16 fileExistsAtPath:v50 isDirectory:0];

  unint64_t v18 = [v51 stringByDeletingLastPathComponent];
  unsigned int v46 = [v18 stringByAppendingString:@"/"];

  id v47 = [v51 lastPathComponent];
  value = [v15 lastPathComponent];
  int v19 = [v15 stringByDeletingLastPathComponent];
  long long v49 = [v19 stringByAppendingString:@"/"];

  unsigned int v45 = [(Espresso *)v12 lastPathComponent];
  BOOL v20 = [(Espresso *)v12 stringByDeletingLastPathComponent];
  char v21 = [v20 stringByAppendingString:@"/"];

  int v22 = v17;
  CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, @"WeightFileName", value);
  CFDictionaryAddValue(Mutable, @"WeightFilePath", v49);
  std::string v25 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(v25, Mutable);
  CFRelease(Mutable);
  unint64_t v26 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(v26, @"NetworkPlistName", v47);
  CFDictionaryAddValue(v26, @"NetworkPlistPath", v46);
  CFDictionaryAddValue(v26, @"NetworkWeights", v25);
  uint64_t v27 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(v27, v26);
  CFRelease(v26);
  CFRelease(v25);
  id v28 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(v28, @"InputNetworks", v27);
  CFRelease(v27);
  CFDictionaryAddValue(v28, @"OutputFileName", v45);
  CFDictionaryAddValue(v28, @"OutputFilePath", v21);
  char v29 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v30 = Espresso::ANECompilerEngine::current_ane_arch(v29);
  uint64_t v31 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryAddValue(v29, @"UndefinedSymbolsBehaviorUseFVMLibs", (const void *)*MEMORY[0x1E4F1CFD0]);
  if ([v30 isEqualToString:@"H14"])
  {
    char v32 = @"h14";
  }
  else if ([v30 isEqualToString:@"H14G"])
  {
    char v32 = @"h14g";
  }
  else if ([v30 isEqualToString:@"H13"])
  {
    char v32 = @"h13";
  }
  else if ([v30 isEqualToString:@"H13G"])
  {
    char v32 = @"h13g";
  }
  else if ([v30 isEqualToString:@"H12"])
  {
    char v32 = @"h12";
  }
  else if ([v30 isEqualToString:@"M9"])
  {
    char v32 = @"m9";
  }
  else if ([v30 isEqualToString:@"M10"])
  {
    char v32 = @"m10";
  }
  else if (([v30 isEqualToString:@"N301"] & 1) != 0 {
         || ([v30 isEqualToString:@"H14G.N301"] & 1) != 0)
  }
  {
    char v32 = @"h14g.n301";
  }
  else if ([v30 isEqualToString:@"H15"])
  {
    char v32 = @"h15";
  }
  else if ([v30 isEqualToString:@"H15G"])
  {
    char v32 = @"h15g";
  }
  else if ([v30 isEqualToString:@"H16"])
  {
    char v32 = @"h16";
  }
  else if ([v30 isEqualToString:@"H16G"])
  {
    char v32 = @"h16g";
  }
  else if ([v30 isEqualToString:@"H17"])
  {
    char v32 = @"h17";
  }
  else if ([v30 isEqualToString:@"M11"])
  {
    char v32 = @"m11";
  }
  else
  {
    char v32 = @"h11";
  }
  CFDictionaryAddValue(v29, @"TargetArchitecture", v32);
  if (v22) {
    CFDictionaryAddValue(v29, @"OptionsFilePath", v50);
  }
  if (v8)
  {
    CFDictionaryAddValue(v29, @"CompileANEProgramForDebugging", v31);
    CFDictionaryAddValue(v29, @"GenerateStaticPerfAnalytics", v31);
    CFDictionaryAddValue(v29, @"GenerateAnalyticsBuffer", v31);
    uint64_t v36 = Espresso::espresso_os_log_subsystem(v34, v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1920CB000, v36, OS_LOG_TYPE_INFO, "[compiler::compile_ir] Set: CompileANEProgramForDebugging, GenerateStaticPerfAnalytics, GenerateAnalyticsBuffer", buf, 2u);
    }
  }
  uint64_t v37 = ANECCompile();
  CFRelease(v28);
  if (v37) {
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("_ANECompiler : ANECCompile() FAILED : %d", v37);
  }
  if (v8)
  {
    long long v40 = Espresso::espresso_os_log_subsystem(v38, v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ANECGetAnalyticsBufferSize() Get ANE analytics size", buf, 2u);
    }

    id v41 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v12];
    [v41 bytes];
    [v41 length];
    long long v42 = (Espresso *)ANECGetAnalyticsBufferSize();
    if (v42) {
      Espresso::throw_exception_selector<Espresso::generic_error,int &>("_ANECompiler : ANECGetAnalyticsBufferSize() FAILED : %d", (uint64_t)v42);
    }
    long long v43 = Espresso::espresso_os_log_subsystem(v42, (const char *)v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v53 = 0;
      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ANECGetAnalyticsBufferSize() ANE analytics size: %llu Bytes", buf, 0xCu);
    }
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
}

void sub_19286F8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,int &>(char *a1, uint64_t a2)
{
}

void ___ZN8Espresso17ANECompilerEngine8compiler10compile_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(Espresso *a1, const char *a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v4 = Espresso::espresso_os_log_subsystem(a1, a2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      uint64_t v6 = a3;
      _os_log_error_impl(&dword_1920CB000, v4, OS_LOG_TYPE_ERROR, "ANECCompile() failed: statusdict=%@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void Espresso::ANECompilerEngine::compiler::dump_ir(uint64_t a1, uint64_t *a2)
{
  void (***v13)(uint64_t *__return_ptr, void);
  uint64_t v14;
  FILE *v15;
  FILE *v16;
  _DWORD *v17;
  _DWORD *v18;
  void *v19;
  void *v20;
  char v21;
  const char *v22;
  Espresso *v23;
  NSObject *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  NSMutableDictionary *v30;
  void *v31;
  void *v32;
  std::string *v33;
  void *v34;
  std::string *v35;
  NSString *v36;
  NSString *v37;
  NSNumber *v38;
  void *v39;
  std::string::size_type size;
  char v41;
  std::string *v42;
  void *v43;
  void *v44;
  std::string *v45;
  uint64_t v46;
  void *v47;
  uint64_t **m;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  std::string *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  NSMutableDictionary *v67;
  void *v68;
  void *v69;
  std::string *v70;
  void *v71;
  std::string *v72;
  NSString *v73;
  NSString *v74;
  NSNumber *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t k;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;
  FILE *v86;
  void *v87;
  void **v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  id v93;
  void *v94;
  int v95;
  id v96;
  Espresso *v97;
  const char *v98;
  NSObject *v99;
  void *v100;
  void **v101;
  void *v102;
  void *v103;
  id v104;
  std::string *v105;
  std::runtime_error *exception;
  std::runtime_error *v107;
  const char *v108;
  void *v109;
  const char *v110;
  const char *v111;
  void *v112;
  void *v113;
  void *v114;
  std::__shared_weak_count *v115;
  id v116;
  id v117;
  Espresso::net *v118;
  id obj;
  id obja;
  id objb;
  void *v122;
  void *v123;
  id v124;
  Espresso::ANECompilerEngine::compiler *v126;
  id v127;
  id v128;
  Espresso::net *v129;
  std::__shared_weak_count *v130;
  long long v131;
  long long v132;
  long long v133;
  long long v134;
  long long v135;
  long long v136;
  long long v137;
  long long v138;
  long long v139;
  long long v140;
  long long v141;
  long long v142;
  void *v143;
  std::__shared_weak_count *v144;
  char v145;
  std::string v146;
  uint64_t v147;
  long long v148;
  long long v149;
  long long v150;
  long long v151;
  void v152[5];
  std::__shared_weak_count *v153;
  uint64_t v154[2];
  std::string v155;
  void *v156[2];
  char v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  std::string __p[17];
  uint64_t v161;
  void *v162;
  unsigned char v163[128];
  unsigned char v164[128];
  unsigned char v165[128];
  uint64_t v166;

  uint64_t v166 = *MEMORY[0x1E4F143B8];
  uint64_t v159 = 0;
  uint64_t v158 = 0;
  id v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2
    || (v159 = std::__shared_weak_count::lock(v2), (long long v115 = v159) == 0)
    || (uint64_t v4 = *(void *)(a1 + 8), (v158 = v4) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string[abi:ne180100]<0>(v156, "net");
  if (*((char *)a2 + 23) >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = (uint64_t *)*a2;
  }
  BOOL v122 = [NSString stringWithUTF8String:v5];
  if (*(char *)(v4 + 471) < 0) {
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(v4 + 448), *(void *)(v4 + 456));
  }
  else {
    uint64_t v155 = *(std::string *)(v4 + 448);
  }
  unsigned int v118 = (Espresso::net *)v4;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v155.__r_.__value_.__l.__size_)
    {
      uint64_t v6 = (std::string *)v155.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
  }
  else if (*((unsigned char *)&v155.__r_.__value_.__s + 23))
  {
    uint64_t v6 = &v155;
LABEL_15:
    uint64_t v7 = [NSString stringWithUTF8String:v6];

    BOOL v122 = (void *)v7;
    uint64_t v8 = v4;
    goto LABEL_28;
  }
  int v9 = [MEMORY[0x1E4F28CB8] defaultManager];
  [v9 createDirectoryAtPath:v122 withIntermediateDirectories:1 attributes:0 error:0];

  memset(__p, 0, 24);
  size_t v10 = v156;
  if (v157 < 0) {
    size_t v10 = (void **)v156[0];
  }
  int v11 = objc_msgSend(NSString, "stringWithFormat:", @"%s.additional.weights", v10);
  id v12 = [v122 stringByAppendingPathComponent:v11];
  MEMORY[0x192FF0F50](__p, [v12 UTF8String]);

  uint64_t v8 = (uint64_t)v118;
  v154[0] = (uint64_t)v118;
  v154[1] = (uint64_t)v115;
  atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::ANECompilerEngine::compiler::build_state_t::prepare_additional_blob_file(&v147, a1 + 128, v154, (uint64_t)__p);
  nitro::nitro_function::nitro_function(v115);
  char v13 = *(void (****)(uint64_t *__return_ptr, void))(a1 + 104);
  v152[0] = MEMORY[0x1E4F143A8];
  v152[1] = 3321888768;
  v152[2] = ___ZN8Espresso17ANECompilerEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v152[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v152[4] = v118;
  uint64_t v153 = v115;
  atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_context::compute_batch_sync(v13, v152);
  int v14 = v147;
  if (v147)
  {
    BOOL v15 = *(FILE **)(v147 + 176);
    if (v15)
    {
      fclose(v15);
      *(void *)(v14 + 176) = 0;
    }
  }
  if (v153) {
    nitro::nitro_function::nitro_function(v153);
  }
  if (v14)
  {
    std::string v16 = *(FILE **)(v14 + 176);
    if (v16)
    {
      fclose(v16);
      *(void *)(v14 + 176) = 0;
    }
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_28:
  if (!*(unsigned char *)(a1 + 224))
  {
    uint64_t v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v107, "Network not built");
    __cxa_throw(v107, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LOBYTE(v147) = 1;
  uint64_t v148 = 0u;
  uint64_t v149 = 0u;
  uint64_t v150 = 0u;
  long long v151 = 0u;
  HIDWORD(v147) = 723714120;
  kdebug_trace();
  int v17 = *(_DWORD **)(v8 + 752);
  unint64_t v18 = *(_DWORD **)(v8 + 760);
  if (v17 != v18)
  {
    while (*v17 != 10008)
    {
      if (++v17 == v18)
      {
        int v17 = *(_DWORD **)(v8 + 760);
        break;
      }
    }
  }
  if (v17 == v18)
  {
    int v19 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    std::string::size_type v113 = [v19 persistentDomainForName:*MEMORY[0x1E4F283E0]];

    BOOL v20 = [v113 objectForKeyedSubscript:@"espresso.anecompiler.force_single_weight_file"];
    char v21 = [v20 BOOLValue];

    memset(&v146, 0, sizeof(v146));
    CFAllocatorRef v23 = (Espresso *)*((void *)v118 + 72);
    if (v23)
    {
      CFAllocatorRef v23 = (Espresso *)(*(void *(**)(std::string *__return_ptr))(*(void *)v23 + 40))(__p);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      char v146 = __p[0];
    }
    size_t v24 = Espresso::espresso_os_log_subsystem(v23, v22);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      std::vector<int> v105 = &v146;
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::vector<int> v105 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v105;
      _os_log_debug_impl(&dword_1920CB000, v24, OS_LOG_TYPE_DEBUG, "[compiler::dump_ir] net_storage_path %s", (uint8_t *)__p, 0xCu);
    }

    std::string v25 = v156;
    if (v157 < 0) {
      std::string v25 = (void **)v156[0];
    }
    unint64_t v26 = objc_msgSend(NSString, "stringWithFormat:", @"%s.additional.weights", v25);
    long long v112 = [v122 stringByAppendingPathComponent:v26];
    long long v123 = (void *)v26;
    if (*(unsigned char *)(a1 + 120))
    {
      uint64_t v141 = 0u;
      uint64_t v142 = 0u;
      char v139 = 0u;
      unint64_t v140 = 0u;
      id obj = [*(id *)(a1 + 128) objectForKeyedSubscript:@"NetworkList"];
      uint64_t v27 = [obj countByEnumeratingWithState:&v139 objects:v165 count:16];
      if (v27)
      {
        id v28 = *(void *)v140;
        do
        {
          for (uint64_t i = 0; i != v27; ++i)
          {
            if (*(void *)v140 != v28) {
              objc_enumerationMutation(obj);
            }
            int v30 = *(NSMutableDictionary **)(*((void *)&v139 + 1) + 8 * i);
            uint64_t v31 = [MEMORY[0x1E4F1CA48] array];
            [(NSMutableDictionary *)v30 setObject:v31 forKeyedSubscript:@"Weights"];

            if ((v21 & 1) == 0)
            {
              char v32 = [(NSMutableDictionary *)v30 objectForKeyedSubscript:@"Weights"];
              int v33 = (v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v146
                  : (std::string *)v146.__r_.__value_.__r.__words[0];
              int v34 = [NSString stringWithUTF8String:v33];
              [v32 addObject:v34];

              if (*((unsigned char *)v118 + 1282))
              {
                if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v35 = &v146;
                }
                else {
                  uint64_t v35 = (std::string *)v146.__r_.__value_.__r.__words[0];
                }
                uint64_t v36 = [NSString stringWithUTF8String:v35];
                append_weights_file_property(v30, v36, v37, v38);
              }
            }
            long long v39 = [(NSMutableDictionary *)v30 objectForKeyedSubscript:@"Weights"];
            [v39 addObject:v26];
          }
          uint64_t v27 = [obj countByEnumeratingWithState:&v139 objects:v165 count:16];
        }
        while (v27);
      }
    }
    else
    {
      unint64_t v137 = 0u;
      uint64_t v138 = 0u;
      unint64_t v135 = 0u;
      std::string v136 = 0u;
      id obj = [*(id *)(a1 + 128) objectForKeyedSubscript:@"Networks"];
      long long v64 = [obj countByEnumeratingWithState:&v135 objects:v164 count:16];
      if (v64)
      {
        char v65 = *(void *)v136;
        do
        {
          for (uint64_t j = 0; j != v64; ++j)
          {
            if (*(void *)v136 != v65) {
              objc_enumerationMutation(obj);
            }
            id v67 = [*(id *)(a1 + 128) objectForKeyedSubscript:*(void *)(*((void *)&v135 + 1) + 8 * j)];
            int v68 = [MEMORY[0x1E4F1CA48] array];
            [(NSMutableDictionary *)v67 setObject:v68 forKeyedSubscript:@"Weights"];

            if ((v21 & 1) == 0)
            {
              long long v69 = [(NSMutableDictionary *)v67 objectForKeyedSubscript:@"Weights"];
              uint64_t v70 = (v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v146
                  : (std::string *)v146.__r_.__value_.__r.__words[0];
              size_t v71 = [NSString stringWithUTF8String:v70];
              [v69 addObject:v71];

              if (*((unsigned char *)v118 + 1282))
              {
                if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v72 = &v146;
                }
                else {
                  int v72 = (std::string *)v146.__r_.__value_.__r.__words[0];
                }
                int v73 = [NSString stringWithUTF8String:v72];
                append_weights_file_property(v67, v73, v74, v75);
              }
            }
            uint64_t v76 = [(NSMutableDictionary *)v67 objectForKeyedSubscript:@"Weights"];
            [v76 addObject:v123];
          }
          long long v64 = [obj countByEnumeratingWithState:&v135 objects:v164 count:16];
        }
        while (v64);
      }
    }

    if (*(unsigned char *)(a1 + 480))
    {
      uint64_t v133 = 0u;
      unsigned int v134 = 0u;
      char v131 = 0u;
      float v132 = 0u;
      uint64_t v77 = [*(id *)(a1 + 128) objectForKeyedSubscript:@"Networks"];
      objb = v77;
      uint64_t v78 = [v77 countByEnumeratingWithState:&v131 objects:v163 count:16];
      if (v78)
      {
        std::string::size_type v79 = *(void *)v132;
        do
        {
          for (uint64_t k = 0; k != v78; ++k)
          {
            if (*(void *)v132 != v79) {
              objc_enumerationMutation(objb);
            }
            uint64_t v81 = *(void *)(*((void *)&v131 + 1) + 8 * k);
            std::string v82 = [*(id *)(a1 + 128) objectForKeyedSubscript:v81];
            uint64_t v83 = [NSString stringWithFormat:@"%@.mutable.weights", v81];
            unint64_t v162 = v83;
            uint64_t v84 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v162 count:1];
            [v82 setObject:v84 forKeyedSubscript:@"MutableWeights"];

            uint64_t v85 = [v122 stringByAppendingPathComponent:v83];
            long long v86 = fopen((const char *)[v85 UTF8String], "wb");
            std::vector<unsigned char>::vector(__p, *(void *)(a1 + 488));
            if (!v86) {
              Espresso::throw_exception_selector<Espresso::io_error>("Cannot open mutable blob file");
            }
            fwrite(__p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0], 1uLL, v86);
            fclose(v86);
            if (__p[0].__r_.__value_.__r.__words[0])
            {
              __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
          }
          uint64_t v77 = objb;
          uint64_t v78 = [objb countByEnumeratingWithState:&v131 objects:v163 count:16];
        }
        while (v78);
      }
    }
    size_t v129 = v118;
    BOOL v130 = v115;
    atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
    int v87 = Espresso::ANECompilerEngine::compiler::get_anec_debug_info_dict((uint64_t *)&v129);
    [*(id *)(a1 + 128) setObject:v87 forKeyedSubscript:@"ModelDebugInformation"];

    if (v130) {
      nitro::nitro_function::nitro_function(v130);
    }
    int v88 = v156;
    if (v157 < 0) {
      int v88 = (void **)v156[0];
    }
    uint64_t v89 = objc_msgSend(NSString, "stringWithFormat:", @"%s.plist", v88);
    uint64_t v90 = [v122 stringByAppendingPathComponent:v89];
    uint64_t v91 = *(void *)(a1 + 128);
    unint64_t v128 = 0;
    int v92 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v91 format:200 options:0 error:&v128];
    uint64_t v93 = v128;
    uint64_t v94 = v93;
    if (!v92)
    {
      unint64_t v108 = [v93 description];
      Espresso::throw_exception_selector<Espresso::io_error,NSString * {__strong}>(v108);
    }
    uint64_t v127 = v93;
    uint64_t v95 = [v92 writeToFile:v90 options:1 error:&v127];
    unint64_t v96 = v127;

    if (!v95)
    {
      uint64_t v109 = [v96 description];
      NSLog(&stru_1EE39CE70.isa, v109);

      BOOL v110 = (const char *)[v90 UTF8String];
      char v111 = [v96 description];
      Espresso::throw_exception_selector<Espresso::io_error,char const*,NSString * {__strong}>(v110, v111);
    }
    uint64_t v99 = Espresso::espresso_os_log_subsystem(v97, v98);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v90;
      _os_log_debug_impl(&dword_1920CB000, v99, OS_LOG_TYPE_DEBUG, "Dumping IR to %@", (uint8_t *)__p, 0xCu);
    }

    uint64_t v100 = Espresso::ANECompilerEngine::compiler::compiler_options_dict((Espresso::ANECompilerEngine::compiler *)a1);

    if (v157 >= 0) {
      uint64_t v101 = v156;
    }
    else {
      uint64_t v101 = (void **)v156[0];
    }
    unsigned int v102 = objc_msgSend(NSString, "stringWithFormat:", @"%s.precompilation_info", v101);
    std::string::size_type v103 = [v122 stringByAppendingPathComponent:v102];
    Espresso::net::save_precompilation_info(v118, (uint64_t *)&v143);
    uint64_t v104 = v103;
    [v104 UTF8String];
    std::ofstream::basic_ofstream((uint64_t *)__p);
    if (*(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24))) {
      Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot write to file %s", [v104 UTF8String]);
    }
    (*(void (**)(void *, std::string *))(*(void *)v143 + 288))(v143, __p);
    __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                              + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
    MEMORY[0x192FF1040](&__p[0].__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x192FF15B0](&v161);
    if (v144) {
      nitro::nitro_function::nitro_function(v144);
    }

    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v146.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (*(char *)(v8 + 615) < 0) {
      std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(v8 + 592), *(void *)(v8 + 600));
    }
    else {
      char v146 = *(std::string *)(v8 + 592);
    }
    std::string::size_type size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    id v41 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v146.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      std::string::operator=(&v146, (const std::string *)(v8 + 616));
      id v41 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    }
    if (v41 >= 0) {
      long long v42 = &v146;
    }
    else {
      long long v42 = (std::string *)v146.__r_.__value_.__r.__words[0];
    }
    long long v43 = [NSString stringWithUTF8String:v42];
    size_t v116 = [v43 stringByDeletingLastPathComponent];

    if (![v116 length])
    {
      long long v44 = NSString;
      std::__fs::filesystem::__current_path((std::__fs::filesystem::path *)__p, 0);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v45 = __p;
      }
      else {
        unsigned int v45 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      unsigned int v46 = [v44 stringWithUTF8String:v45];

      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      size_t v116 = (id)v46;
    }
    id v47 = [MEMORY[0x1E4F28CB8] defaultManager];
    [v47 createDirectoryAtPath:v122 withIntermediateDirectories:1 attributes:0 error:0];

    unint64_t v114 = Espresso::ANECompilerEngine::compiler::compiler_options_dict((Espresso::ANECompilerEngine::compiler *)a1);
    int8x8_t v117 = v116;
    std::string::basic_string[abi:ne180100]<0>(&v143, (char *)[v117 UTF8String]);
    std::string::size_type v124 = v114;
    int obja = v122;
    if (!*(unsigned char *)(a1 + 224)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Can't dump network that isn't built.");
    }
    for (uint64_t m = *(uint64_t ***)(a1 + 248); m; uint64_t m = (uint64_t **)*m)
    {
      if (!v49) {
        __cxa_bad_cast();
      }
      uint64_t v50 = (uint64_t)v49;
      uint64_t v126 = (Espresso::ANECompilerEngine::compiler *)v124;
      int v51 = obja;
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      if (*(char *)(v158 + 447) < 0) {
        unint64_t v52 = *(void *)(v158 + 432);
      }
      else {
        unint64_t v52 = *(unsigned __int8 *)(v158 + 447);
      }
      if (v52) {
        std::string::operator=(__p, (const std::string *)(v158 + 424));
      }
      uint64_t v53 = NSString;
      __int16 v54 = v51;
      uint64_t v55 = [v54 UTF8String];
      __int16 v56 = __p;
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v56 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      char v57 = objc_msgSend(v53, "stringWithFormat:", @"%s/%s.plist", v55, v56);
      if (*(_DWORD *)(v50 + 328) != 1) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Pre-compiled ANE networks only support tunneled plist format.");
      }
      uint64_t v58 = v54;
      char v59 = *(void *)(v50 + 512);
      std::string::size_type v60 = *(void *)(v50 + 520);
      while (v59 != v60)
      {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("target_file_path cannot be absolute");
        int v61 = v59;
        if (*(char *)(v59 + 23) < 0) {
          int v61 = *(void *)v59;
        }
        int v62 = [NSString stringWithUTF8String:v61];
        uint64_t v63 = [v58 stringByAppendingPathComponent:v62];

        v59 += 104;
      }

      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (v145 < 0) {
      operator delete(v143);
    }

    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v146.__r_.__value_.__l.__data_);
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v147);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }

  if (v157 < 0) {
    operator delete(v156[0]);
  }
  if (v159) {
    nitro::nitro_function::nitro_function(v159);
  }
}

void sub_192870D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_objecta, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59)
{
  if (a58 < 0) {
    operator delete(__p);
  }

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a59);
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }

  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (STACK[0x238]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x238]);
  }
  _Unwind_Resume(a1);
}

void sub_192871124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }

  if (a55 < 0) {
    operator delete(a50);
  }

  if (a61 < 0) {
    operator delete(a56);
  }
  JUMPOUT(0x1928710D4);
}

void Espresso::ANECompilerEngine::compiler::build_state_t::prepare_additional_blob_file(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(FILE **)(a2 + 176);
  if (v8) {
    fclose(v8);
  }
  if (*(char *)(a4 + 23) >= 0) {
    int v9 = (const char *)a4;
  }
  else {
    int v9 = *(const char **)a4;
  }
  size_t v10 = fopen(v9, "wb");
  *(void *)(a2 + 176) = v10;
  if (!v10) {
    Espresso::throw_exception_selector<Espresso::io_error>("Cannot open additional blob file");
  }
  *(_DWORD *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 172) = 0;
  int v11 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v20 = [v11 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  id v12 = [v20 objectForKeyedSubscript:@"espresso.anecompiler.force_single_weight_file"];
  int v13 = [v12 BOOLValue];

  if (v13)
  {
    uint64_t v14 = *a3;
    BOOL v15 = *(const void **)(v14 + 576);
    if (v15)
    {
      int v17 = v16;
      if (v16)
      {
        unint64_t v18 = *(std::__shared_weak_count **)(v14 + 584);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*(unsigned int (**)(void *))(*(void *)v16 + 48))(v16) != 1) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("force_single_weight_file option is not supported with blob_v2 file format. Please dump espresso network to get blob_v1 file and use it along with above flag.");
        }
      }
      else
      {
        unint64_t v18 = 0;
      }
    }
    else
    {
      unint64_t v18 = 0;
      int v17 = 0;
    }
    if (fwrite(*((const void **)v17 + 9), *((void *)v17 + 10), 1uLL, *(FILE **)(a2 + 176)) != 1)
    {
      if (*(char *)(a4 + 23) >= 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = *(void *)a4;
      }
      Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot write to file %s", v19);
    }
    *(_DWORD *)(a2 + 168) = *((void *)v17 + 10);
    *(unsigned char *)(a2 + 172) = 1;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
  }
  *a1 = a2;
}

void sub_1928713A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
}

void anonymous namespace'::write_to_dest(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, void *a5)
{
  id v9 = a5;
  int v11 = v9;
  switch(*(_DWORD *)a3)
  {
    case 0:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob storage type uninitialized.");
    case 1:
      id v12 = v9;
      uint64_t v15 = *(void *)(a3 + 8);
      uint64_t v14 = a3 + 8;
      uint64_t v13 = v15;
      if (*(char *)(v14 + 23) >= 0) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v13;
      }
      int v17 = [NSString stringWithUTF8String:v16];
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v18 = a4;
      }
      else {
        unint64_t v18 = (uint64_t *)*a4;
      }
      uint64_t v19 = [NSString stringWithUTF8String:v18];
      id v20 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v12];
      char v21 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v19];
      int v22 = [MEMORY[0x1E4F1CB10] URLWithString:v17 relativeToURL:v21];
      CFAllocatorRef v23 = [MEMORY[0x1E4F28CB8] defaultManager];
      [v23 removeItemAtPath:v12 error:0];

      size_t v24 = [MEMORY[0x1E4F28CB8] defaultManager];
      char v25 = [v24 copyItemAtURL:v22 toURL:v20 error:0];

      if ((v25 & 1) == 0) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed copying plist to file.");
      }

      goto LABEL_23;
    case 2:
      id v28 = *(_anonymous_namespace_ **)(a3 + 32);
      uint64_t v27 = a3 + 32;
      unint64_t v26 = v28;
      int v29 = *(char *)(v27 + 23);
      if (v29 >= 0) {
        int v30 = (_anonymous_namespace_ *)v27;
      }
      else {
        int v30 = v26;
      }
      if (v29 >= 0) {
        uint64_t v31 = (const void *)*(unsigned __int8 *)(v27 + 23);
      }
      else {
        uint64_t v31 = *(const void **)(v27 + 8);
      }
      goto LABEL_24;
    case 3:
      id v12 = v9;
      char v32 = (std::__shared_weak_count *)a2[1];
      uint64_t v42 = *a2;
      long long v43 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(_anonymous_namespace_ **__return_ptr))(*(void *)(a1 + 560) + 120))(v44);
      if (v43) {
        nitro::nitro_function::nitro_function(v43);
      }
      if (!v44[0])
      {
        std::operator+<char>();
        int v34 = std::string::append(&v40, "' is not an existing raw blob");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v41.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v36 = &v41;
        }
        else {
          uint64_t v36 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::invalid_state_error>((const char *)v36);
      }
LABEL_23:

LABEL_24:
      return;
    default:
      std::to_string(&v41, *(_DWORD *)a3);
      uint64_t v37 = std::string::insert(&v41, 0, "Unsupported blob storage type. ");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      unsigned int v45 = (void *)v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long v44 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v45) >= 0) {
        long long v39 = v44;
      }
      else {
        long long v39 = (_anonymous_namespace_ **)v44[0];
      }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>((const char *)v39);
  }
}

void sub_1928716E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::starts_with(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  size_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0) {
    size_t v5 = *(void *)(a1 + 8);
  }
  return v5 >= v4 && std::string::compare((const std::string *)a1, 0, v4, __s) == 0;
}

void anonymous namespace'::write_compilation_aux_file(uint64_t a1, uint64_t *a2, void *a3)
{
  v31[3] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (uint64_t *)*a2;
  }
  char v25 = v5;
  objc_msgSend(v5, "stringByAppendingFormat:", @"/%s_aux.json", v6);
  id v26 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v27 = objc_opt_new();
  id v28 = objc_opt_new();
  uint64_t v7 = *(uint64_t **)(*(void *)a1 + 32);
  uint64_t v8 = *(uint64_t **)(*(void *)a1 + 40);
  if (v7 != v8)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v11 = *v7;
      size_t v10 = (std::__shared_weak_count *)v7[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(_DWORD *)(v11 + 8) == 10008) {
        goto LABEL_23;
      }
      id v12 = (uint64_t *)(v11 + 40);
      int v13 = *(char *)(v11 + 63);
      if (v13 < 0)
      {
        if (*(void *)(v11 + 48) != 16) {
          goto LABEL_18;
        }
        uint64_t v14 = (uint64_t *)*v12;
      }
      else
      {
        uint64_t v14 = (uint64_t *)(v11 + 40);
        if (v13 != 16) {
          goto LABEL_18;
        }
      }
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      if (v16 != 0x5F747865746E6F63 || v15 != 0x726566736E617274)
      {
LABEL_18:
        v30[0] = @"ilayer";
        unint64_t v18 = [NSNumber numberWithInt:v9];
        v31[0] = v18;
        v30[1] = @"name";
        uint64_t v19 = (void *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          uint64_t v19 = (void *)*v19;
        }
        id v20 = [NSString stringWithUTF8String:v19];
        v31[1] = v20;
        uint64_t v30[2] = @"type";
        if (*(char *)(v11 + 63) < 0) {
          id v12 = (uint64_t *)*v12;
        }
        char v21 = [NSString stringWithUTF8String:v12];
        uint64_t v31[2] = v21;
        int v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:v30 count:3];
        [v28 addObject:v22];
      }
LABEL_23:
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      v7 += 2;
      uint64_t v9 = (v9 + 1);
    }
    while (v7 != v8);
  }
  [v27 setObject:v28 forKeyedSubscript:@"unsupported"];
  CFAllocatorRef v23 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v27 options:1 error:0];
  char v24 = [v23 writeToFile:v26 atomically:1];

  if ((v24 & 1) == 0)
  {
    uint64_t v29 = [v26 UTF8String];
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Failed writing compiler aux file %s", &v29);
  }
}

void sub_192871B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_192871BC4()
{
  if (!v0) {
    JUMPOUT(0x192871B9CLL);
  }
  JUMPOUT(0x192871B94);
}

void sub_192871BE0()
{
  JUMPOUT(0x192871BF4);
}

void append_weights_file_property(NSMutableDictionary *a1, NSString *a2, NSString *a3, NSNumber *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = a2;
  uint64_t v7 = [(NSMutableDictionary *)v5 objectForKeyedSubscript:@"WeightFileProperties"];
  if (!v7)
  {
    uint64_t v7 = (void *)[MEMORY[0x1E4F1CC08] mutableCopy];
    [(NSMutableDictionary *)v5 setObject:v7 forKeyedSubscript:@"WeightFileProperties"];
  }
  uint64_t v8 = [v7 objectForKeyedSubscript:v6];
  if (!v8)
  {
    uint64_t v8 = (void *)[MEMORY[0x1E4F1CC08] mutableCopy];
    [v7 setObject:v8 forKeyedSubscript:v6];
  }
  uint64_t v9 = (Espresso *)[v8 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"Encrypted"];
  uint64_t v11 = Espresso::espresso_os_log_subsystem(v9, v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 138412290;
    int v13 = v7;
    _os_log_debug_impl(&dword_1920CB000, v11, OS_LOG_TYPE_DEBUG, "[compiler::append_weights_file_property] weights_file_properties %@", (uint8_t *)&v12, 0xCu);
  }
}

void sub_192871D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::io_error,NSString * {__strong}>(const char *a1)
{
}

void Espresso::throw_exception_selector<Espresso::io_error,char const*,NSString * {__strong}>(const char *a1, const char *a2)
{
}

void anonymous namespace'::write_data_to_dest(_anonymous_namespace_ *this, const void *a2, void *a3, NSString *a4)
{
  id v8 = a3;
  uint64_t v6 = [MEMORY[0x1E4F1C9B8] dataWithBytes:this length:a2];
  uint64_t v7 = [MEMORY[0x1E4F28CB8] defaultManager];
  [v7 removeItemAtPath:v8 error:0];

  if (([v6 writeToFile:v8 atomically:1] & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed writing plist to file.");
  }
}

void sub_192871EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v12 = v11;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::build(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v77 = __PAIR64__(a4, a3);
  uint64_t v76 = a2;
  v90[3] = *MEMORY[0x1E4F143B8];
  uint64_t v85 = 0;
  long long v86 = 0;
  id v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5
    || (i = (unint64_t)std::__shared_weak_count::lock(v5), (long long v86 = (std::__shared_weak_count *)i) == 0)
    || (uint64_t v7 = *(Espresso::net **)(a1 + 8), (v85 = v7) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "net");
  if (*(unsigned char *)(a1 + 552))
  {
    Espresso::ANECompilerEngine::compiler::reset((Espresso::ANECompilerEngine::compiler *)a1);
    uint64_t v8 = [MEMORY[0x1E4F1CC08] mutableCopy];
    uint64_t v9 = *(void **)(a1 + 216);
    *(void *)(a1 + 2std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v8;

    size_t v10 = v83;
    if (v84 < 0) {
      size_t v10 = (void **)v83[0];
    }
    unint64_t i = objc_msgSend(NSString, "stringWithFormat:", @"%s.additional.weights", v10, v76, v77);
    v90[0] = i;
    uint64_t v11 = [MEMORY[0x1E4F1CA58] data];
    __p[0] = v11;
    int v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:__p forKeys:v90 count:1];
    [*(id *)(a1 + 216) setObject:v12 forKeyedSubscript:&unk_1EE3AEF08];
  }
  memset(v90, 0, 24);
  uint64_t v13 = *((void *)v7 + 4);
  if (*((void *)v7 + 5) != v13)
  {
    for (unint64_t i = 0; i < (*((void *)v7 + 5) - v13) >> 4; ++i)
    {
      uint64_t v14 = *(void *)(v13 + 16 * i);
      uint64_t v15 = (void *)(v14 + 40);
      int v16 = *(char *)(v14 + 63);
      if (v16 < 0)
      {
        if (*(void *)(v14 + 48) == 15)
        {
          uint64_t v15 = (void *)*v15;
LABEL_15:
          int v17 = (void *)*v15;
          uint64_t v18 = *(void *)((char *)v15 + 7);
          if (v17 == (void *)0x64656C656E6E7574 && v18 == 0x706F5F656E615F64) {
            operator new();
          }
        }
      }
      else if (v16 == 15)
      {
        goto LABEL_15;
      }
      uint64_t v13 = *((void *)v7 + 4);
    }
  }
  id v20 = (_DWORD *)*((void *)v7 + 94);
  char v21 = (_DWORD *)*((void *)v7 + 95);
  if (v20 != v21)
  {
    while (*v20 != 10008)
    {
      if (++v20 == v21)
      {
        id v20 = (_DWORD *)*((void *)v7 + 95);
        break;
      }
    }
  }
  if (v20 == v21)
  {
    Espresso::ANECompilerEngine::ane_mutable_weights_helper::compute_mutable_weight_offsets((Espresso::ANECompilerEngine::ane_mutable_weights_helper *)(a1 + 480), v7);
    if (Espresso::use_multiple_procedure_for_segments((uint64_t *)&v85))
    {
      uint64_t v59 = objc_opt_new();
      std::string::size_type v60 = *(void **)(a1 + 200);
      *(void *)(a1 + 200) = v59;

      uint64_t v61 = objc_opt_new();
      int v62 = *(void **)(a1 + 128);
      *(void *)(a1 + 128) = v61;

      uint64_t v63 = objc_opt_new();
      long long v64 = *(void **)(a1 + 176);
      *(void *)(a1 + 176) = v63;
    }
    uint64_t v65 = (uint64_t)v85;
    if (*((char *)v85 + 471) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v85 + 56), *((void *)v85 + 57));
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v85 + 28);
      v88[0] = *((void **)v85 + 58);
    }
    if (SHIBYTE(v88[0]) < 0)
    {
      if (__p[1])
      {
        uint64_t v66 = (void **)__p[0];
        goto LABEL_135;
      }
    }
    else if (HIBYTE(v88[0]))
    {
      uint64_t v66 = __p;
LABEL_135:
      id v67 = [NSString stringWithUTF8String:v66];
      int v68 = [MEMORY[0x1E4F28CB8] defaultManager];
      [v68 createDirectoryAtPath:v67 withIntermediateDirectories:1 attributes:0 error:0];

      v81[0] = 0;
      v81[1] = 0;
      uint64_t v82 = 0;
      long long v69 = v83;
      if (v84 < 0) {
        long long v69 = (void **)v83[0];
      }
      uint64_t v70 = objc_msgSend(NSString, "stringWithFormat:", @"%s.additional.weights", v69);
      id v71 = [v67 stringByAppendingPathComponent:v70];
      MEMORY[0x192FF0F50](v81, [v71 UTF8String]);

      int v72 = v86;
      v79[0] = v65;
      v79[1] = (uint64_t)v86;
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::compiler::build_state_t::prepare_additional_blob_file(&v80, a1 + 128, v79, (uint64_t)v81);
      if (v72) {
        nitro::nitro_function::nitro_function(v72);
      }
      Espresso::ANECompilerEngine::compiler::build_wrapper(a1, v76);
      uint64_t v73 = v80;
      if (v80)
      {
        id v74 = *(FILE **)(v80 + 176);
        if (v74)
        {
          fclose(v74);
          *(void *)(v73 + 176) = 0;
        }
      }
      if (SHIBYTE(v82) < 0) {
        operator delete(v81[0]);
      }

      goto LABEL_148;
    }
    Espresso::ANECompilerEngine::compiler::build_wrapper(a1, v76);
LABEL_148:
    if (SHIBYTE(v88[0]) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_150;
  }
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)int v88 = 0u;
  float v89 = 1.0;
  uint64_t v22 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) != v22)
  {
    unint64_t v23 = 0;
    while (1)
    {
      char v25 = (uint64_t *)(v22 + 120 * v23);
      uint64_t v24 = *v25;
      if (v25[1] - *v25 == 1)
      {
        uint64_t v26 = *(void *)(*((void *)v85 + 4) + 16 * v24);
        uint64_t v27 = *(const void **)(v26 + 64);
        if (v27)
        {
          if (v28) {
            break;
          }
        }
      }
LABEL_111:
      ++v23;
      uint64_t v22 = *(void *)(a1 + 32);
      if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 40) - v22) >> 3) <= v23) {
        goto LABEL_122;
      }
    }
    uint64_t v29 = *(std::__shared_weak_count **)(v26 + 72);
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v30 = v28;
      *((void *)&v30 + 1) = v29;
      long long v78 = v30;
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v78 = (unint64_t)v28;
    }
    unint64_t v31 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        unint64_t i = (int)v23;
        if (__p[1] <= (void *)(int)v23) {
          unint64_t i = (int)v23 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t i = ((unint64_t)__p[1] - 1) & (int)v23;
      }
      int v33 = (uint64_t **)*((void *)__p[0] + i);
      if (v33)
      {
        for (uint64_t j = *v33; j; uint64_t j = (uint64_t *)*j)
        {
          unint64_t v35 = j[1];
          if (v35 == (int)v23)
          {
            if (*((_DWORD *)j + 4) == v23)
            {
              __int16 v56 = (std::__shared_weak_count *)*((void *)&v78 + 1);
              goto LABEL_107;
            }
          }
          else
          {
            if (v32.u32[0] > 1uLL)
            {
              if ((void *)v35 >= __p[1]) {
                v35 %= (unint64_t)__p[1];
              }
            }
            else
            {
              v35 &= (unint64_t)__p[1] - 1;
            }
            if (v35 != i) {
              break;
            }
          }
        }
      }
    }
    uint64_t v36 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v36 = 0;
    *((void *)v36 + 1) = (int)v23;
    *((_DWORD *)v36 + 4) = v23;
    *(_OWORD *)(v36 + 24) = v78;
    float v37 = (float)((unint64_t)v88[1] + 1);
    if (v31 && (float)(v89 * (float)v31) >= v37)
    {
LABEL_97:
      uint64_t v53 = __p[0];
      __int16 v54 = (void *)*((void *)__p[0] + i);
      if (v54)
      {
        *(void *)uint64_t v36 = *v54;
      }
      else
      {
        *(void **)uint64_t v36 = v88[0];
        v88[0] = v36;
        v53[i] = v88;
        if (!*(void *)v36) {
          goto LABEL_106;
        }
        unint64_t v55 = *(void *)(*(void *)v36 + 8);
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v55 >= v31) {
            v55 %= v31;
          }
        }
        else
        {
          v55 &= v31 - 1;
        }
        __int16 v54 = (char *)__p[0] + 8 * v55;
      }
      *__int16 v54 = v36;
LABEL_106:
      ++v88[1];
      __int16 v56 = 0;
LABEL_107:
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      if (v29) {
        nitro::nitro_function::nitro_function(v29);
      }
      goto LABEL_111;
    }
    BOOL v38 = (v31 & (v31 - 1)) != 0;
    if (v31 < 3) {
      BOOL v38 = 1;
    }
    unint64_t v39 = v38 | (2 * v31);
    unint64_t v40 = vcvtps_u32_f32(v37 / v89);
    if (v39 <= v40) {
      int8x8_t prime = (int8x8_t)v40;
    }
    else {
      int8x8_t prime = (int8x8_t)v39;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v31 = (unint64_t)__p[1];
    }
    if (*(void *)&prime > v31) {
      goto LABEL_63;
    }
    if (*(void *)&prime < v31)
    {
      unint64_t v48 = vcvtps_u32_f32((float)(unint64_t)v88[1] / v89);
      if (v31 < 3 || (uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        unint64_t v48 = std::__next_prime(v48);
      }
      else
      {
        uint64_t v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2) {
          unint64_t v48 = v50;
        }
      }
      if (*(void *)&prime <= v48) {
        int8x8_t prime = (int8x8_t)v48;
      }
      if (*(void *)&prime >= v31)
      {
        unint64_t v31 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_63:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v42 = operator new(8 * *(void *)&prime);
          long long v43 = __p[0];
          __p[0] = v42;
          if (v43) {
            operator delete(v43);
          }
          uint64_t v44 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v44++) = 0;
          while (*(void *)&prime != v44);
          unsigned int v45 = (void **)v88[0];
          if (v88[0])
          {
            unint64_t v46 = *((void *)v88[0] + 1);
            uint8x8_t v47 = (uint8x8_t)vcnt_s8(prime);
            v47.i16[0] = vaddlv_u8(v47);
            if (v47.u32[0] > 1uLL)
            {
              if (v46 >= *(void *)&prime) {
                v46 %= *(void *)&prime;
              }
            }
            else
            {
              v46 &= *(void *)&prime - 1;
            }
            *((void *)__p[0] + v46) = v88;
            for (k = *v45; k; unint64_t v46 = v52)
            {
              unint64_t v52 = k[1];
              if (v47.u32[0] > 1uLL)
              {
                if (v52 >= *(void *)&prime) {
                  v52 %= *(void *)&prime;
                }
              }
              else
              {
                v52 &= *(void *)&prime - 1;
              }
              if (v52 != v46)
              {
                if (!*((void *)__p[0] + v52))
                {
                  *((void *)__p[0] + v52) = v45;
                  goto LABEL_88;
                }
                *unsigned int v45 = (void *)*k;
                *uint64_t k = **((void **)__p[0] + v52);
                **((void **)__p[0] + v52) = k;
                uint64_t k = v45;
              }
              unint64_t v52 = v46;
LABEL_88:
              unsigned int v45 = (void **)k;
              uint64_t k = (void *)*k;
            }
          }
          unint64_t v31 = (unint64_t)prime;
          goto LABEL_92;
        }
        char v57 = __p[0];
        __p[0] = 0;
        if (v57) {
          operator delete(v57);
        }
        unint64_t v31 = 0;
        __p[1] = 0;
      }
    }
LABEL_92:
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v31 <= (int)v23) {
        unint64_t i = (int)v23 % v31;
      }
      else {
        unint64_t i = (int)v23;
      }
    }
    else
    {
      unint64_t i = (v31 - 1) & (int)v23;
    }
    goto LABEL_97;
  }
LABEL_122:
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__move_assign(a1 + 232, (uint64_t *)__p);
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__deallocate_node((void *)v88[0]);
  uint64_t v58 = __p[0];
  __p[0] = 0;
  if (v58) {
    operator delete(v58);
  }
  *(unsigned char *)(a1 + 224) = 1;
LABEL_150:
  __p[0] = v90;
  std::vector<std::unique_ptr<Espresso::net_compiler_segment_based::segment_t>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v84 < 0) {
    operator delete(v83[0]);
  }
  if (v86) {
    nitro::nitro_function::nitro_function(v86);
  }
}

void sub_192872CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::__shared_weak_count *a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v37 - 120);
  std::vector<std::unique_ptr<Espresso::net_compiler_segment_based::segment_t>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::reset(Espresso::ANECompilerEngine::compiler *this)
{
  uint64_t v39 = 1065353216;
  long long v42 = 0u;
  memset(v38, 0, sizeof(v38));
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v41 = 0u;
  long long v44 = 0u;
  unint64_t v40 = &v41;
  long long v43 = &v44;
  uint64_t v31 = 0;
  id v2 = (void *)*((void *)this + 16);
  *((void *)this + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;

  uint64_t v3 = v32;
  *(void *)&long long v32 = 0;
  size_t v4 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v3;

  uint64_t v5 = *((void *)&v32 + 1);
  *((void *)&v32 + 1) = 0;
  uint64_t v6 = (void *)*((void *)this + 18);
  *((void *)this + 18) = v5;

  uint64_t v7 = v33;
  *(void *)&long long v33 = 0;
  uint64_t v8 = (void *)*((void *)this + 19);
  *((void *)this + 19) = v7;

  uint64_t v9 = *((void *)&v33 + 1);
  *((void *)&v33 + 1) = 0;
  size_t v10 = (void *)*((void *)this + 20);
  *((void *)this + 20) = v9;

  uint64_t v11 = v34;
  *(void *)&long long v34 = 0;
  int v12 = (void *)*((void *)this + 21);
  *((void *)this + 21) = v11;

  uint64_t v13 = *((void *)&v34 + 1);
  *((void *)&v34 + 1) = 0;
  uint64_t v14 = (void *)*((void *)this + 22);
  *((void *)this + 22) = v13;

  uint64_t v15 = v35;
  *(void *)&long long v35 = 0;
  int v16 = (void *)*((void *)this + 23);
  *((void *)this + 23) = v15;

  uint64_t v17 = *((void *)&v35 + 1);
  *((void *)&v35 + 1) = 0;
  uint64_t v18 = (void *)*((void *)this + 24);
  *((void *)this + 24) = v17;

  uint64_t v19 = v36;
  *(void *)&long long v36 = 0;
  id v20 = (void *)*((void *)this + 25);
  *((void *)this + 25) = v19;

  uint64_t v21 = *((void *)&v36 + 1);
  *((void *)&v36 + 1) = 0;
  uint64_t v22 = (void *)*((void *)this + 26);
  *((void *)this + 26) = v21;

  uint64_t v23 = v37;
  *(void *)&long long v37 = 0;
  uint64_t v24 = (void *)*((void *)this + 27);
  *((void *)this + 27) = v23;

  *((_WORD *)this + 112) = WORD4(v37);
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__move_assign((uint64_t)this + 232, (uint64_t *)v38);
  char v25 = (char *)this + 280;
  std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(*((void **)this + 35));
  uint64_t v26 = v41;
  *((void *)this + 34) = v40;
  *((void *)this + 35) = v26;
  uint64_t v27 = *((void *)&v41 + 1);
  *((void *)this + 36) = *((void *)&v41 + 1);
  if (v27)
  {
    *(void *)(v26 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v25;
    unint64_t v40 = &v41;
    long long v41 = 0uLL;
  }
  else
  {
    *((void *)this + 34) = v25;
  }
  *(_OWORD *)((char *)this + 296) = v42;
  id v28 = (char *)this + 320;
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 40));
  uint64_t v29 = v44;
  *((void *)this + 39) = v43;
  *((void *)this + 40) = v29;
  uint64_t v30 = *((void *)&v44 + 1);
  *((void *)this + 41) = *((void *)&v44 + 1);
  if (v30)
  {
    *(void *)(v29 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v28;
    long long v43 = &v44;
    long long v44 = 0uLL;
  }
  else
  {
    *((void *)this + 39) = v28;
  }
  Espresso::ANECompilerEngine::compiler::build_state_t::~build_state_t((Espresso::ANECompilerEngine::compiler::build_state_t *)&v31);
  *((unsigned char *)this + 225) = *((unsigned char *)this + 552);
}

void std::default_delete<Espresso::net_compiler_segment_based::segment_t>::operator()[abi:ne180100](uint64_t a1)
{
  id v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 16);

  JUMPOUT(0x192FF16B0);
}

void std::vector<std::unique_ptr<Espresso::net_compiler_segment_based::segment_t>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = **a1;
  if (v2)
  {
    size_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          std::default_delete<Espresso::net_compiler_segment_based::segment_t>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__deallocate_node(*(void **)(a1 + 16));
  id v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

void Espresso::ANECompilerEngine::compiler::build_wrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(v15, "per_network_configuration");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(v6 + 472, (uint64_t)v15, (uint64_t)__p, &v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) == 1)
    {
      uint64_t v7 = &v17;
      goto LABEL_15;
    }
LABEL_28:
    Espresso::net_compiler_segment_based::build((void *)a1, a2);
    goto LABEL_29;
  }
  if (v17.__r_.__value_.__l.__size_ != 1) {
    goto LABEL_28;
  }
  uint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
LABEL_15:
  if (v7->__r_.__value_.__s.__data_[0] != 49) {
    goto LABEL_28;
  }
  for (uint64_t i = *(uint64_t **)(a1 + 432); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v9 = i[5];
    uint64_t v10 = (std::__shared_weak_count *)i[6];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v10;
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    std::string::operator=((std::string *)(a1 + 392), (const std::string *)(i + 2));
    *(unsigned char *)(a1 + 385) = 1;
    Espresso::net_compiler_segment_based::build((void *)a1, a2);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v5;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_29:
  *(unsigned char *)(a1 + 224) = 1;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192873444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      id v2 = (void *)*v1;
      uint64_t v3 = (std::__shared_weak_count *)v1[4];
      if (v3) {
        nitro::nitro_function::nitro_function(v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void Espresso::ANECompilerEngine::compiler::build_state_t::~build_state_t(Espresso::ANECompilerEngine::compiler::build_state_t *this)
{
}

void Espresso::ANECompilerEngine::compiler::~compiler(Espresso::ANECompilerEngine::compiler *this)
{
  Espresso::ANECompilerEngine::compiler::~compiler(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(void *)this = &unk_1EE348250;
  Espresso::ANECompilerEngine::compiler::reset(this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 512);
  if (*((char *)this + 479) < 0) {
    operator delete(*((void **)this + 57));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 416);
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 360, *((void *)this + 46));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 336, *((void *)this + 43));
  Espresso::ANECompilerEngine::compiler::build_state_t::~build_state_t((Espresso::ANECompilerEngine::compiler *)((char *)this + 128));
  id v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE35F3A0;
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  uint64_t v5 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(void *)this = &unk_1EE32A8C8;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void Espresso::ANECompilerEngine::CombineOptionsPlists(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA60];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = (uint64_t *)*a1;
  }
  uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", v6, a3);
  uint64_t v8 = [v5 dictionaryWithContentsOfFile:v7];

  uint64_t v9 = (void *)MEMORY[0x1E4F1CA60];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = (uint64_t *)*a2;
  }
  uint64_t v11 = [NSString stringWithUTF8String:v10];
  uint64_t v27 = [v9 dictionaryWithContentsOfFile:v11];

  if (!v8)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v23 = a1;
    }
    else {
      uint64_t v23 = (uint64_t *)*a1;
    }
    long long v32 = v23;
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Error reading options plist at %s", &v32);
  }
  if (!v27)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v24 = a2;
    }
    else {
      uint64_t v24 = (uint64_t *)*a2;
    }
    long long v32 = v24;
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Error reading options plist at %s", &v32);
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v12 = v27;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v29 != v14) {
          objc_enumerationMutation(v12);
        }
        uint64_t v16 = *(void *)(*((void *)&v28 + 1) + 8 * i);
        std::string v17 = [v8 objectForKeyedSubscript:v16];
        uint64_t v18 = [v12 objectForKeyedSubscript:v16];
        uint64_t v19 = [v18 objectForKey:@"ProcedureParams"];
        BOOL v20 = v19 == 0;

        if (!v20) {
          Espresso::throw_exception_selector<Espresso::generic_error>("Procedures not supported in user-supplied options plist");
        }
        if (v17) {
          [v17 addEntriesFromDictionary:v18];
        }
        else {
          [v8 setObject:v18 forKey:v16];
        }
      }
      uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v13);
  }

  if (*((char *)v26 + 23) >= 0) {
    uint64_t v21 = v26;
  }
  else {
    uint64_t v21 = (uint64_t *)*v26;
  }
  uint64_t v22 = [NSString stringWithUTF8String:v21];
  [v8 writeToFile:v22 atomically:1];
}

void sub_1928739A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::add_unit(Espresso::ANECompilerEngine::compiler *this, const Espresso::ANECompilerEngine::compiler::unit_t *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v3 || (long long v35 = std::__shared_weak_count::lock(v3)) == 0 || !*((void *)this + 1))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = NSString;
  Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)this + 336, (char *)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  objc_msgSend(v5, "stringWithUTF8String:", p_p, v35);
  id v37 = (id)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = (char *)*((void *)a2 + 6);
  if (*((void *)a2 + 7) - (void)v7 == 24)
  {
    uint64_t v8 = NSString;
    Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)this + 336, v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &__p;
    }
    else {
      uint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v10 = [v8 stringWithUTF8String:v9];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = (uint64_t *)*((void *)a2 + 6);
    if (*((char *)v11 + 23) < 0) {
      uint64_t v11 = (uint64_t *)*v11;
    }
    id v12 = [NSString stringWithUTF8String:v11];
  }
  else
  {
    uint64_t v10 = objc_opt_new();
    id v12 = objc_opt_new();
    uint64_t v14 = (char *)*((void *)a2 + 6);
    for (uint64_t i = (char *)*((void *)a2 + 7); v14 != i; v14 += 24)
    {
      uint64_t v15 = NSString;
      Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)this + 336, v14, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v16 = &__p;
      }
      else {
        uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      std::string v17 = [v15 stringWithUTF8String:v16];
      [v10 addObject:v17];

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v18 = v14;
      if (v14[23] < 0) {
        uint64_t v18 = *(char **)v14;
      }
      uint64_t v19 = [NSString stringWithUTF8String:v18];
      [v12 addObject:v19];
    }
  }
  BOOL v20 = objc_opt_new();
  [v20 setObject:v10 forKeyedSubscript:@"Bottom"];
  [v20 setObject:v12 forKeyedSubscript:@"UnescapedBottom"];
  [v20 setObject:v37 forKeyedSubscript:@"Name"];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v21 = a2;
  }
  else {
    uint64_t v21 = *(const Espresso::ANECompilerEngine::compiler::unit_t **)a2;
  }
  uint64_t v22 = [NSString stringWithUTF8String:v21];
  [v20 setObject:v22 forKeyedSubscript:@"UnescapedName"];

  [v20 setObject:*((void *)a2 + 15) forKeyedSubscript:@"Type"];
  [v20 setObject:*((void *)a2 + 16) forKeyedSubscript:@"Params"];
  if (*((char *)a2 + 103) >= 0) {
    uint64_t v23 = (char *)a2 + 80;
  }
  else {
    uint64_t v23 = (char *)*((void *)a2 + 10);
  }
  uint64_t v24 = [NSString stringWithUTF8String:v23];
  [v20 setObject:v24 forKeyedSubscript:@"EspressoLayerName"];

  if (*((int *)a2 + 35) >= 2)
  {
    char v25 = objc_msgSend(NSNumber, "numberWithInt:");
    [v20 setObject:v25 forKeyedSubscript:@"NumGroups"];
  }
  id v26 = *((id *)a2 + 14);
  [v20 setObject:v26 forKeyedSubscript:@"OutputType"];
  if (*((_DWORD *)a2 + 34))
  {
    uint64_t v27 = objc_msgSend(NSNumber, "numberWithInt:");
    [v20 setObject:v27 forKeyedSubscript:@"OutputChannels"];
  }
  long long v28 = (Espresso *)[*((id *)this + 18) addObject:v37];
  long long v30 = Espresso::espresso_os_log_subsystem(v28, v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v31 = [v37 UTF8String];
    std::string::size_type v32 = [*((id *)a2 + 15) UTF8String];
    long long v33 = [v20 objectForKeyedSubscript:@"EspressoLayerName"];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v31;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v32;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2112;
    id v39 = v26;
    __int16 v40 = 2112;
    long long v41 = v33;
    _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "[ANECompilerEngine::compiler::add_unit] Adding unit %s of type %s %@  Espresso layer: %@ ", (uint8_t *)&__p, 0x2Au);
  }
  if (*((unsigned char *)this + 120))
  {
    [*((id *)this + 24) addObject:v20];
    [v20 setObject:v37 forKeyedSubscript:@"Name"];
  }
  else
  {
    [*((id *)this + 17) setObject:v20 forKeyedSubscript:v37];
  }

  nitro::nitro_function::nitro_function(v36);
}

void sub_192873F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_name_translator::~ane_name_translator(Espresso::ANECompilerEngine::ane_name_translator *this)
{
}

uint64_t Espresso::ANECompilerEngine::compiler::compiler(uint64_t a1, const Espresso::net **a2)
{
  v100[3] = *(char **)MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = &unk_1EE348250;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table((uint64_t)this + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(_DWORD *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 300) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  *(void *)(a1 + 336) = a1 + 344;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1 + 368;
  *(_WORD *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 544) = 1065353216;
  *(unsigned char *)(a1 + 552) = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)*((void *)*a2 + 2);
  if (v6
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 112);
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table((uint64_t)this + 104) = v6;
    *(void *)(a1 + 112) = v7;
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
  }
  else
  {
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table((uint64_t)this + 104) = v6;
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 2, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v89 = a1 + 416;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v10;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  char v12 = *(unsigned char *)(*(void *)(a1 + 104) + 123);
  *(unsigned char *)(a1 + 552) = v12;
  *(unsigned char *)(a1 + 225) = v12;
  uint64_t v13 = *a2;
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating compiler");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (getenv("ESPRESSO_ANEC_USE_LISTS")) {
    *(unsigned char *)(a1 + 120) = 1;
  }
  if (getenv("ESPRESSO_ANEC_USE_FUSE_CONV_VERTICAL")) {
    *(unsigned char *)(a1 + 121) = 1;
  }
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_name_translator::fill_name_table((uint64_t **)(a1 + 336), v13);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  for (uint64_t i = (void *)*((void *)*a2 + 19); i; uint64_t i = (void *)*i)
  {
    uint64_t v16 = (const void *)i[5];
    if (v16)
    {
      if (v17)
      {
        uint64_t v18 = *a2;
        uint64_t v19 = (std::__shared_weak_count *)a2[1];
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v17, v18, v19);
        if (v19) {
          nitro::nitro_function::nitro_function(v19);
        }
      }
    }
  }
  BOOL v20 = *(std::__shared_weak_count **)(a1 + 16);
  if (v20)
  {
    uint64_t v21 = std::__shared_weak_count::lock(v20);
    if (v21) {
      uint64_t v22 = *v4;
    }
    else {
      uint64_t v22 = 0;
    }
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v95, "per_network_configuration");
  std::string::basic_string[abi:ne180100]<0>(&v98, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(v22 + 472, (uint64_t)&v95, (uint64_t)&v98, &__p);
  if (v99 < 0) {
    operator delete((void *)v98);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  char v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_153;
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_154;
    }
    p_p = &__p;
  }
  if (p_p->__r_.__value_.__s.__data_[0] != 49) {
    goto LABEL_151;
  }
  long long v86 = v21;
  std::string::basic_string[abi:ne180100]<0>(&v95, "default");
  *(void *)&long long v98 = &v95;
  char v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89, (unsigned __int8 *)&v95, (long long **)&v98);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = (std::__shared_weak_count *)v25[6];
  v25[5] = v22;
  v25[6] = v21;
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  int v87 = (uint64_t **)(v22 + 776);
  long long v28 = *(void **)(v22 + 776);
  int v88 = (void *)(v22 + 784);
  if (v28 == (void *)(v22 + 784)) {
    goto LABEL_150;
  }
  do
  {
    long long v29 = (const void **)(v28 + 4);
    long long v30 = Espresso::espresso_os_log_subsystem((Espresso *)v25, v26);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v83 = v28 + 4;
      if (*((char *)v28 + 55) < 0) {
        uint64_t v83 = *v29;
      }
      LODWORD(v95.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v83;
      _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "per_network_configuration config=%s", (uint8_t *)&v95, 0xCu);
    }

    Espresso::reload_network_layers((Espresso *)v22, (uint64_t *)v90);
    uint64_t v31 = *(void *)(v22 + 1368);
    if (v31) {
      Espresso::multi_head_aot_helper_t::remove_unused_layers(v31, v90[0], v28 + 4);
    }
    std::string::basic_string[abi:ne180100]<0>(&v95, "default");
    uint64_t v32 = *((unsigned __int8 *)v28 + 55);
    if ((v32 & 0x80u) == 0) {
      uint64_t v33 = *((unsigned __int8 *)v28 + 55);
    }
    else {
      uint64_t v33 = v28[5];
    }
    std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
    int v35 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v95.__r_.__value_.__l.__size_;
    }
    if (v33 != size)
    {
      BOOL v45 = 0;
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_80;
      }
      goto LABEL_74;
    }
    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v36 = &v95;
    }
    else {
      long long v36 = (std::string *)v95.__r_.__value_.__r.__words[0];
    }
    if ((v32 & 0x80) != 0)
    {
      BOOL v45 = memcmp(*v29, v36, v28[5]) == 0;
      goto LABEL_73;
    }
    if (*((unsigned char *)v28 + 55))
    {
      uint64_t v37 = v32 - 1;
      BOOL v38 = (unsigned __int8 *)(v28 + 4);
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        int v42 = v36->__r_.__value_.__s.__data_[0];
        long long v36 = (std::string *)((char *)v36 + 1);
        int v41 = v42;
        BOOL v44 = v37-- != 0;
        BOOL v45 = v39 == v41;
      }
      while (v39 == v41 && v44);
LABEL_73:
      if (v35 < 0) {
        goto LABEL_80;
      }
      goto LABEL_74;
    }
    BOOL v45 = 1;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_80:
      operator delete(v95.__r_.__value_.__l.__data_);
      if (v45)
      {
LABEL_75:
        unint64_t v46 = v90[0];
        uint8x8_t v47 = (std::__shared_weak_count *)v90[1];
        if (v90[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v90[1] + 1, 1uLL, memory_order_relaxed);
        }
        Espresso::shape_network_recursive(v46, (Espresso::net *)(v22 + 184), 0, 0);
        if (v47) {
          nitro::nitro_function::nitro_function(v47);
        }
        goto LABEL_106;
      }
      goto LABEL_81;
    }
LABEL_74:
    if (v45) {
      goto LABEL_75;
    }
LABEL_81:
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v93, (long long **)(v22 + 824));
    unint64_t v48 = v90[0];
    uint8x8_t v49 = (void *)*((void *)v90[0] + 98);
    if (!v49)
    {
LABEL_86:
      *(void *)&long long v98 = v28 + 4;
      uint64_t v50 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87, v28 + 4, (long long **)&v98);
      goto LABEL_88;
    }
    while (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v28 + 4, v49 + 4))
    {
LABEL_85:
      uint8x8_t v49 = (void *)*v49;
      if (!v49) {
        goto LABEL_86;
      }
    }
    if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v49 + 4, v28 + 4))
    {
      ++v49;
      goto LABEL_85;
    }
    *(void *)&long long v98 = v28 + 4;
    uint64_t v50 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v48 + 97, v28 + 4, (long long **)&v98);
LABEL_88:
    int v51 = v50;
    memset(&v95, 0, sizeof(v95));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, v50[7], v50[8], 0xAAAAAAAAAAAAAAABLL * ((v50[8] - v50[7]) >> 3));
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v96, (long long **)v51 + 10);
    unint64_t v52 = v96;
    if (v96 != v97)
    {
      do
      {
        v92[0] = (long long *)(v52 + 4);
        uint64_t v53 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v93, v52 + 4, v92);
        long long v54 = *(_OWORD *)(v52 + 7);
        long long v55 = *(_OWORD *)(v52 + 9);
        *((void *)v53 + 11) = v52[11];
        *(_OWORD *)(v53 + 72) = v55;
        *(_OWORD *)(v53 + 56) = v54;
        if (v52 != (char **)v53) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v53 + 96, v52[12], (uint64_t)v52[13], (v52[13] - v52[12]) >> 2);
        }
        __int16 v56 = v52[1];
        if (v56)
        {
          do
          {
            char v57 = (char **)v56;
            __int16 v56 = *(char **)v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            char v57 = (char **)v52[2];
            BOOL v58 = *v57 == (char *)v52;
            unint64_t v52 = v57;
          }
          while (!v58);
        }
        unint64_t v52 = v57;
      }
      while (v57 != v97);
    }
    std::string::size_type v60 = v90[0];
    uint64_t v59 = (std::__shared_weak_count *)v90[1];
    v92[0] = (long long *)v90[0];
    v92[1] = (long long *)v90[1];
    if (v90[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v90[1] + 1, 1uLL, memory_order_relaxed);
    }
    Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)v92, (uint64_t)v93, (uint64_t)&v98);
    if (v59)
    {
      nitro::nitro_function::nitro_function(v59);
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::shape_network_recursive(v60, (Espresso::net *)&v98, 0, 0);
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    uint64_t v94 = (long long *)(v28 + 4);
    uint64_t v61 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87, v28 + 4, &v94);
    int v62 = v90[0];
    if ((uint64_t *)v90[0] + 100 != v61 + 7)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v90[0] + 800, (std::string *)v61[7], (std::string *)v61[8], 0xAAAAAAAAAAAAAAABLL * ((v61[8] - v61[7]) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v62 + 103, (long long *)v61[10], (long long *)(v61 + 11));
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v100, v100[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v98, *((char **)&v98 + 1));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v96, v97[0]);
    *(void *)&long long v98 = &v95;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v93, (char *)v93[1]);
LABEL_106:
    uint64_t v63 = v90[0];
    long long v64 = (void *)*((void *)v90[0] + 19);
    if (v64)
    {
      uint64_t v65 = (std::__shared_weak_count *)v90[1];
      do
      {
        uint64_t v66 = (const void *)v64[5];
        if (v66)
        {
          if (v67)
          {
            if (v65) {
              atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v67, v63, v65);
            if (v65) {
              nitro::nitro_function::nitro_function(v65);
            }
          }
        }
        long long v64 = (void *)*v64;
      }
      while (v64);
    }
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)v63 + 776, *((char **)v63 + 98));
    *((void *)v63 + 97) = (char *)v63 + 784;
    *((void *)v63 + 99) = 0;
    *((void *)v63 + 98) = 0;
    if (*(char *)(v22 + 447) >= 0) {
      size_t v68 = *(unsigned __int8 *)(v22 + 447);
    }
    else {
      size_t v68 = *(void *)(v22 + 432);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v95, v68 + 1);
    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v69 = &v95;
    }
    else {
      long long v69 = (std::string *)v95.__r_.__value_.__r.__words[0];
    }
    if (v68)
    {
      if (*(char *)(v22 + 447) >= 0) {
        uint64_t v70 = (const void *)(v22 + 424);
      }
      else {
        uint64_t v70 = *(const void **)(v22 + 424);
      }
      memmove(v69, v70, v68);
    }
    *(_WORD *)((char *)&v69->__r_.__value_.__l.__data_ + v68) = 95;
    int v71 = *((char *)v28 + 55);
    if (v71 >= 0) {
      int v72 = (const std::string::value_type *)(v28 + 4);
    }
    else {
      int v72 = (const std::string::value_type *)v28[4];
    }
    if (v71 >= 0) {
      std::string::size_type v73 = *((unsigned __int8 *)v28 + 55);
    }
    else {
      std::string::size_type v73 = v28[5];
    }
    id v74 = std::string::append(&v95, v72, v73);
    std::string::size_type v75 = v74->__r_.__value_.__r.__words[0];
    *(void *)&long long v98 = v74->__r_.__value_.__l.__size_;
    *(void *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1] + 7);
    char v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    unint64_t v77 = v90[0];
    if (*((char *)v90[0] + 447) < 0) {
      operator delete(*((void **)v90[0] + 53));
    }
    uint64_t v78 = v98;
    *((void *)v77 + 53) = v75;
    *((void *)v77 + 54) = v78;
    *(void *)((char *)v77 + 439) = *(void *)((char *)&v98 + 7);
    *((unsigned char *)v77 + 447) = v76;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(*(void *)(v22 + 16) + 127))
    {
      std::string::size_type v79 = Espresso::DTypeConverter::DTypeConverter((Espresso::DTypeConverter *)&v95, v77);
      Espresso::DTypeConverter::PrepareNetworkForConversion(v79);
      std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)&v95.__r_.__value_.__r.__words[2]);
    }
    *(void *)&long long v98 = v28 + 4;
    char v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v89, (uint64_t)(v28 + 4), (uint64_t)&std::piecewise_construct, (long long **)&v98);
    uint64_t v80 = (std::__shared_weak_count *)v25[6];
    *(_OWORD *)(v25 + 5) = *(_OWORD *)v90;
    if (v80) {
      nitro::nitro_function::nitro_function(v80);
    }
    uint64_t v81 = (void *)v28[1];
    if (v81)
    {
      do
      {
        uint64_t v82 = v81;
        uint64_t v81 = (void *)*v81;
      }
      while (v81);
    }
    else
    {
      do
      {
        uint64_t v82 = (void *)v28[2];
        BOOL v58 = *v82 == (void)v28;
        long long v28 = v82;
      }
      while (!v58);
    }
    long long v28 = v82;
  }
  while (v82 != v88);
LABEL_150:
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)v87, *(char **)(v22 + 784));
  *(void *)(v22 + 776) = v88;
  *(_OWORD *)(v22 + 784) = 0u;
  char v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  uint64_t v21 = v86;
LABEL_151:
  if (v23 < 0)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_153:
    operator delete(p_p);
  }
LABEL_154:
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  return a1;
}

void sub_192874B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void **a14, uint64_t *a15, uint64_t *a16, Espresso::ANECompilerEngine::compiler::build_state_t *a17, std::__shared_weak_count **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41)
{
  if (*(char *)(v44 - 185) < 0) {
    operator delete(*(void **)(v44 - 208));
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v41 + 512);
  if (*(char *)(v41 + 479) < 0) {
    operator delete(*(void **)(v41 + 456));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a28);
  if (*(char *)(v41 + 415) < 0) {
    operator delete(*a14);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v41 + 360, *a15);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a19, *a16);
  Espresso::ANECompilerEngine::compiler::build_state_t::~build_state_t(a17);
  if (*a18) {
    nitro::nitro_function::nitro_function(*a18);
  }
  *(void *)uint64_t v41 = &unk_1EE35F3A0;
  unint64_t v46 = *(void **)(v41 + 80);
  if (v46)
  {
    *(void *)(v41 + 88) = v46;
    operator delete(v46);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v43, *(void **)(v41 + 64));
  *(void *)(v44 - 208) = v42;
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 208));
  *(void *)uint64_t v41 = &unk_1EE32A8C8;
  uint8x8_t v47 = *(std::__shared_weak_count **)(v41 + 16);
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  _Unwind_Resume(a1);
}

id *Espresso::ANECompilerEngine::compiler::unit_t::unit_t(id *this, id *a2)
{
  uint64_t v4 = (std::string *)Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)this, (std::string *)(a2 + 10));
  v4[5].__r_.__value_.__r.__words[0] = 0;
  v4[5].__r_.__value_.__l.__size_ = 0;
  v4[5].__r_.__value_.__r.__words[2] = 0x100000000;
  std::string::operator=(v4, (const std::string *)a2);
  if (this != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(this + 3), (std::string *)a2[3], (std::string *)a2[4], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a2[4] - (unsigned char *)a2[3]) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(this + 6), (std::string *)a2[6], (std::string *)a2[7], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a2[7] - (unsigned char *)a2[6]) >> 3));
  }
  objc_storeStrong(this + 14, a2[14]);
  return this;
}

void sub_192874F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 103) < 0) {
    operator delete(*(void **)(v10 + 80));
  }
  a10 = (void **)(v10 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::scatter_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_scatter_nd_kernel::kernel_type_str(Espresso::generic_scatter_nd_kernel *this)
{
  return "scatter_nd";
}

uint64_t Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel::is_valid_for_engine()
{
  return 0;
}

void Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel::~scatter_nd_kernel(Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::one_hot_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_one_hot_kernel::kernel_type_str(Espresso::generic_one_hot_kernel *this)
{
  return "one_hot";
}

BOOL Espresso::generic_one_hot_kernel::has_dynamic_top_shape(Espresso::generic_one_hot_kernel *this, unint64_t a2)
{
  return a2 > 1;
}

uint64_t Espresso::MPSGraphEngine::Kernels::one_hot_kernel::is_valid_for_engine()
{
  return 0;
}

void Espresso::MPSGraphEngine::Kernels::one_hot_kernel::~one_hot_kernel(Espresso::MPSGraphEngine::Kernels::one_hot_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t H12ACCPHeuristics::get_amx_fp32_ops_per_clock(H12ACCPHeuristics *this)
{
  return 256;
}

uint64_t H12ACCPHeuristics::get_amx_fp16_ops_per_clock(H12ACCPHeuristics *this)
{
  return 512;
}

uint64_t H12ACCPHeuristics::get_amx_reg_width(H12ACCPHeuristics *this)
{
  return 64;
}

uint64_t H12ACCPHeuristics::get_amx_reg_count(H12ACCPHeuristics *this)
{
  return 8;
}

uint64_t H12ACCPHeuristics::get_neon_sfu_count(H12ACCPHeuristics *this)
{
  return 1;
}

uint64_t H12ACCPHeuristics::get_neon_alu_count(H12ACCPHeuristics *this)
{
  return 3;
}

uint64_t H12ACCPHeuristics::get_neon_simd_reg_count(H12ACCPHeuristics *this)
{
  return 384;
}

float H12ACCPHeuristics::get_amx_flops_per_sec(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (a3 != 1)
  {
    if (v4)
    {
      float v5 = 256.0;
      return (float)(*((float *)v4 + 5) * 0.5) * v5;
    }
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!v4) {
    goto LABEL_7;
  }
  float v5 = 512.0;
  return (float)(*((float *)v4 + 5) * 0.5) * v5;
}

uint64_t H12ACCPHeuristics::get_l1_cache_size(H12ACCPHeuristics *this)
{
  return 128;
}

uint64_t H12ACCPHeuristics::get_llc_size(H12ACCPHeuristics *this)
{
  return 0x800000;
}

uint64_t H12ACCPHeuristics::get_num_cores(H12ACCPHeuristics *this)
{
  return 2;
}

float H12ACCPHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 48), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

uint64_t H12ACCPHeuristics::get_highest_device_pstate(H12ACCPHeuristics *this)
{
  return 7;
}

float H12ACCPHeuristics::get_flops_per_sec(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (a3 == 1)
  {
    float v5 = 8.0;
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    float v5 = 4.0;
    if (!v4) {
LABEL_3:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(unint64_t)(float)((float)(*((float *)v4 + 5) * v5) * 3.0);
}

float H12ACCPHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 2);
  return v4 + (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2) * 0.0);
}

float H12ACCPHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 2);
  return v4 + (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2) * 0.0);
}

float H12ACCPHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float H12ACCPHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float H12ACCPHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float H12ACCPHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.5;
}

float H12ACCPHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.5;
}

void H12ACCPHeuristics::~H12ACCPHeuristics(H12ACCPHeuristics *this)
{
  H12ACCPHeuristics::~H12ACCPHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE320F20;
  id v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

uint64_t newpACCPHeuristics::get_amx_fp32_ops_per_clock(newpACCPHeuristics *this)
{
  return 256;
}

uint64_t newpACCPHeuristics::get_amx_fp16_ops_per_clock(newpACCPHeuristics *this)
{
  return 512;
}

uint64_t newpACCPHeuristics::get_amx_reg_width(newpACCPHeuristics *this)
{
  return 64;
}

uint64_t newpACCPHeuristics::get_amx_reg_count(newpACCPHeuristics *this)
{
  return 8;
}

uint64_t newpACCPHeuristics::get_neon_sfu_count(newpACCPHeuristics *this)
{
  return 1;
}

uint64_t newpACCPHeuristics::get_neon_alu_count(newpACCPHeuristics *this)
{
  return 3;
}

uint64_t newpACCPHeuristics::get_neon_simd_reg_count(newpACCPHeuristics *this)
{
  return 448;
}

uint64_t newpACCPHeuristics::get_l1_cache_size(newpACCPHeuristics *this)
{
  return 128;
}

uint64_t newpACCPHeuristics::get_llc_size(newpACCPHeuristics *this)
{
  return 0x800000;
}

uint64_t newpACCPHeuristics::get_num_cores(newpACCPHeuristics *this)
{
  return 2;
}

float newpACCPHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 48), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float newpACCPHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 2);
  return v4 + (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2) * 0.0);
}

float newpACCPHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float newpACCPHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.5;
}

float newpACCPHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.5;
}

void newpACCPHeuristics::~newpACCPHeuristics(newpACCPHeuristics *this)
{
  newpACCPHeuristics::~newpACCPHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE321770;
  id v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

uint64_t Espresso::quantized_weights_helper::quantized_weights_helper(uint64_t result, void *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  uint64_t v8 = a2[1];
  *(void *)(result + 112) = *a2;
  *(void *)(result + 120) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 128) = a3;
  *(_DWORD *)(result + 132) = a4;
  *(_DWORD *)(result + 136) = a5;
  *(_DWORD *)(result + 140) = a6;
  *(_DWORD *)(result + 144) = a7;
  *(_DWORD *)(result + 148) = a8;
  *(unsigned char *)(result + 152) = 0;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = 0;
  *(void *)(result + 156) = 0;
  *(unsigned char *)(result + 164) = 0;
  return result;
}

{
  uint64_t v8;

  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  uint64_t v8 = a2[1];
  *(void *)(result + 112) = *a2;
  *(void *)(result + 120) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 128) = a3;
  *(_DWORD *)(result + 132) = a4;
  *(_DWORD *)(result + 136) = a5;
  *(_DWORD *)(result + 140) = a6;
  *(_DWORD *)(result + 144) = a7;
  *(_DWORD *)(result + 148) = a8;
  *(unsigned char *)(result + 152) = 0;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = 0;
  *(void *)(result + 156) = 0;
  *(unsigned char *)(result + 164) = 0;
  return result;
}

void Espresso::swap_zero_to_first_position_anec_format(Espresso *this, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned int v8 = a2;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  double v9 = exp2((double)(unint64_t)a5);
  std::string __p = 0;
  uint64_t v63 = 0;
  long long v64 = 0;
  if (a6) {
    size_t v10 = 2 * v8;
  }
  else {
    size_t v10 = v8;
  }
  std::vector<unsigned char>::reserve((unint64_t *)&__p, v10);
  if (v8)
  {
    int v11 = 0;
    char v12 = v63;
    do
    {
      if (v12 >= v64)
      {
        unint64_t v14 = (unint64_t)__p;
        uint64_t v15 = v12 - (unsigned char *)__p;
        uint64_t v16 = v12 - (unsigned char *)__p + 1;
        if (v16 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = v64 - (unsigned char *)__p;
        if (2 * (v64 - (unsigned char *)__p) > (unint64_t)v16) {
          uint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          uint64_t v19 = (char *)operator new(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        BOOL v20 = &v19[v15];
        uint64_t v21 = &v19[v15];
        *uint64_t v21 = 0;
        uint64_t v13 = v21 + 1;
        if (v12 != (char *)v14)
        {
          uint64_t v22 = &v12[~v14];
          do
          {
            char v23 = *--v12;
            (v22--)[(void)v19] = v23;
          }
          while (v12 != (char *)v14);
          char v12 = (char *)__p;
          BOOL v20 = v19;
        }
        std::string __p = v20;
        uint64_t v63 = v13;
        long long v64 = &v19[v18];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        char *v12 = 0;
        uint64_t v13 = v12 + 1;
      }
      uint64_t v63 = v13;
      ++v11;
      char v12 = v13;
    }
    while (v11 != v8);
  }
  if (a6)
  {
    uint64_t v24 = v63;
    if (v63 >= v64)
    {
      unint64_t v26 = (unint64_t)__p;
      uint64_t v27 = v63 - (unsigned char *)__p;
      uint64_t v28 = v63 - (unsigned char *)__p + 1;
      if (v28 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = v64 - (unsigned char *)__p;
      if (2 * (v64 - (unsigned char *)__p) > (unint64_t)v28) {
        uint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v30 = v28;
      }
      if (v30) {
        uint64_t v31 = operator new(v30);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = (char *)v31 + v30;
      *((unsigned char *)v31 + v27) = 0x80;
      char v25 = (char *)v31 + v27 + 1;
      if (v24 == (char *)v26)
      {
        uint64_t v31 = (char *)v31 + v27;
      }
      else
      {
        uint64_t v33 = &v24[~v26];
        do
        {
          char v34 = *--v24;
          (v33--)[(void)v31] = v34;
        }
        while (v24 != (char *)v26);
        uint64_t v24 = (char *)__p;
      }
      std::string __p = v31;
      uint64_t v63 = v25;
      long long v64 = v32;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *uint64_t v63 = 0x80;
      char v25 = v24 + 1;
    }
    uint64_t v63 = v25;
    if (v8 >= 2)
    {
      for (int i = 1; i != v8; ++i)
      {
        if (v25 >= v64)
        {
          unint64_t v37 = (unint64_t)__p;
          uint64_t v38 = v25 - (unsigned char *)__p;
          uint64_t v39 = v25 - (unsigned char *)__p + 1;
          if (v39 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v40 = v64 - (unsigned char *)__p;
          if (2 * (v64 - (unsigned char *)__p) > (unint64_t)v39) {
            uint64_t v39 = 2 * v40;
          }
          if (v40 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v41 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v41 = v39;
          }
          if (v41) {
            uint64_t v42 = operator new(v41);
          }
          else {
            uint64_t v42 = 0;
          }
          uint64_t v43 = (char *)v42 + v38;
          uint64_t v44 = (char *)v42 + v38;
          *uint64_t v44 = 0;
          long long v36 = v44 + 1;
          if (v25 == (char *)v37)
          {
            std::string __p = v43;
            uint64_t v63 = v36;
            long long v64 = (char *)v42 + v41;
          }
          else
          {
            BOOL v45 = &v25[~v37];
            do
            {
              char v46 = *--v25;
              (v45--)[(void)v42] = v46;
            }
            while (v25 != (char *)v37);
            char v25 = (char *)__p;
            std::string __p = v42;
            uint64_t v63 = v36;
            long long v64 = (char *)v42 + v41;
            if (!v25) {
              goto LABEL_63;
            }
          }
          operator delete(v25);
        }
        else
        {
          *char v25 = 0;
          long long v36 = v25 + 1;
        }
LABEL_63:
        uint64_t v63 = v36;
        char v25 = v36;
      }
    }
  }
  unint64_t v47 = (unint64_t)(v9 * (double)v8);
  unint64_t v48 = (char *)__p;
  if (v47)
  {
    unint64_t v49 = 0;
    uint64_t v50 = v63;
    unint64_t v51 = v63 - (unsigned char *)__p;
    while (v50 == v48)
    {
LABEL_70:
      v49 += v8;
      if (v49 >= v47) {
        goto LABEL_84;
      }
    }
    unint64_t v52 = 0;
    while (1)
    {
      uint64_t v53 = (Espresso *)memcmp((char *)this + v49, &v48[v52], v8);
      if (!v53) {
        break;
      }
      v52 += v8;
      if (v51 <= v52) {
        goto LABEL_70;
      }
    }
    if (v49 && v49 < v47)
    {
      long long v55 = Espresso::espresso_os_log_subsystem(v53, v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v66 = v49 / v8;
        _os_log_debug_impl(&dword_1920CB000, v55, OS_LOG_TYPE_DEBUG, "swap_zero_to_first_position_anec_format: %zu", buf, 0xCu);
      }

      memcpy((char *)this + v49, this, v8);
      memcpy(this, __p, v8);
      Espresso::bit_packer::anec_value_accessor_fn(buf, a5);
      if (a4)
      {
        uint64_t v56 = 0;
        while (1)
        {
          int v57 = std::function<unsigned char ()(unsigned long,unsigned char const*)>::operator()(v67, v56, a3);
          unsigned __int8 v58 = v49 / v8;
          if (!v57) {
            goto LABEL_81;
          }
          if (v49 / v8 == v57) {
            break;
          }
LABEL_82:
          if (a4 == (unsigned __int8 *)++v56) {
            goto LABEL_83;
          }
        }
        unsigned __int8 v58 = 0;
LABEL_81:
        Espresso::bit_packer::set_pack_starts_from_lsb_val(a3, (unsigned __int8 *)v58, v56, a5);
        goto LABEL_82;
      }
LABEL_83:
      std::__function::__value_func<unsigned char ()(unsigned long,unsigned char const*)>::~__value_func[abi:ne180100](buf);
      unint64_t v48 = (char *)__p;
    }
  }
LABEL_84:
  if (v48)
  {
    uint64_t v63 = v48;
    operator delete(v48);
  }
}

void sub_192875C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    unsigned int v8 = v7;
    if (v5 != (char *)v2)
    {
      double v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unsigned int v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void Espresso::quantized_weights_helper::dequantize_to_float32_4d(uint64_t *a1, uint64_t a2, double a3, double a4, float a5)
{
  int v5 = *((_DWORD *)a1 + 40);
  if (v5 >= 1 && (uint64_t v6 = a1[2]) != 0)
  {
    uint64_t v7 = (std::__shared_weak_count *)a1[3];
    if (!v7) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (std::__shared_weak_count *)a1[1];
    if (!v7) {
      goto LABEL_7;
    }
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v5 = *((_DWORD *)a1 + 40);
LABEL_7:
  if (v5 <= 0) {
    int v5 = *((_DWORD *)a1 + 39);
  }
LABEL_9:
  if (a1[6] || a1[8] || a1[4])
  {
    uint64_t v8 = a1[4];
    if (!v8) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    }
    double v9 = *(float **)(*(void *)a2 + 24);
    char v10 = *(unsigned __int8 **)(v6 + 16);
    uint64_t v11 = *(void *)(v8 + 16);
    uint64_t v12 = a1[10];
    uint64_t v13 = (std::__shared_weak_count *)a1[11];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = a1[12];
    uint64_t v15 = (std::__shared_weak_count *)a1[13];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dequantize_uint_per_channel_lut<float>(v9, v10, v11, v12, v14, *((_DWORD *)a1 + 32), *((_DWORD *)a1 + 33), *((_DWORD *)a1 + 34), *((_DWORD *)a1 + 35), v5, *((_DWORD *)a1 + 36));
    if (!v15) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v5 == 8 && !*((_DWORD *)a1 + 36))
  {
    BOOL v20 = *(float **)(*(void *)a2 + 24);
    int v21 = *((_DWORD *)a1 + 33) * *((_DWORD *)a1 + 32) * *((_DWORD *)a1 + 34);
    int v22 = v21 * *((_DWORD *)a1 + 35);
    char v23 = *(float **)(a1[10] + 16);
    uint64_t v24 = *(float **)(a1[12] + 16);
    char v25 = *(char **)(v6 + 16);
    if (*((unsigned char *)a1 + 164)) {
      Espresso::range_quantizer<signed char>::dequantize_chunks(v20, v22, v21, v23, v24, v25);
    }
    else {
      Espresso::range_quantizer<unsigned char>::dequantize_chunks(v20, v22, v21, v23, v24, (unsigned __int8 *)v25);
    }
    goto LABEL_21;
  }
  uint64_t v16 = *(float **)(*(void *)a2 + 24);
  unint64_t v17 = *(unsigned char **)(v6 + 16);
  uint64_t v18 = a1[10];
  uint64_t v13 = (std::__shared_weak_count *)a1[11];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = a1[12];
  uint64_t v15 = (std::__shared_weak_count *)a1[13];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dequantize_uint_per_channel_linear<float>(v16, v17, v18, v19, *((_DWORD *)a1 + 32), *((_DWORD *)a1 + 33), *((_DWORD *)a1 + 34), *((_DWORD *)a1 + 35), a3, a4, a5, v5, *((_DWORD *)a1 + 36), *((unsigned char *)a1 + 164));
  if (v15) {
LABEL_18:
  }
    nitro::nitro_function::nitro_function(v15);
LABEL_19:
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
LABEL_21:
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192875F10(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::range_quantizer<unsigned char>::dequantize_chunks(float *__C, int a2, int a3, float *a4, float *a5, unsigned __int8 *__A)
{
  char v10 = __C;
  vDSP_vfltu8(__A, 1, __C, 1, a2);
  int v20 = a3;
  int v11 = (a2 - 1) / a3;
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v11 + 1);
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = a3;
      if (v14 < a3) {
        uint64_t v15 = v14;
      }
      vDSP_Length v16 = v15 + v12;
      float v17 = *a4++;
      float v18 = v17;
      float v19 = *a5++;
      float v21 = v19;
      float __B = v18;
      vDSP_vsmul(v10, 1, &__B, v10, 1, v15 + v12);
      vDSP_vsadd(v10, 1, &v21, v10, 1, v16);
      a3 += v20;
      v12 -= v20;
      v10 += v20;
      --v13;
    }
    while (v13);
  }
}

void Espresso::range_quantizer<signed char>::dequantize_chunks(float *__C, int a2, int a3, float *a4, float *a5, char *__A)
{
  char v10 = __C;
  vDSP_vflt8(__A, 1, __C, 1, a2);
  int v20 = a3;
  int v11 = (a2 - 1) / a3;
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v11 + 1);
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = a3;
      if (v14 < a3) {
        uint64_t v15 = v14;
      }
      vDSP_Length v16 = v15 + v12;
      float v17 = *a4++;
      float v18 = v17;
      float v19 = *a5++;
      float v21 = v19;
      float __B = v18;
      vDSP_vsmul(v10, 1, &__B, v10, 1, v15 + v12);
      vDSP_vsadd(v10, 1, &v21, v10, 1, v16);
      a3 += v20;
      v12 -= v20;
      v10 += v20;
      --v13;
    }
    while (v13);
  }
}

float *dequantize_uint_per_channel_linear<float>(float *result, unsigned char *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, double a9, double a10, float a11, int a12, int a13, char a14)
{
  uint64_t v14 = (a6 * a5);
  if (!a13)
  {
    if (a8 < 1) {
      return result;
    }
    unint64_t v46 = 0;
    char v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = (v14 * a7);
    uint64_t v50 = (int)v49;
    uint64_t v77 = a8;
    uint64_t v78 = v49;
    char v75 = a12 * a7 * a6 * a5;
    uint64_t v76 = 4 * (int)v49;
    uint64_t v74 = a12 * (uint64_t)(int)v49;
    unint64_t v51 = a2;
    while (1)
    {
      if (a3)
      {
        float v52 = *(float *)(*(void *)(a3 + 16) + 4 * v48);
        if (!a4) {
          goto LABEL_47;
        }
      }
      else
      {
        float v52 = 1.0;
        if (!a4)
        {
LABEL_47:
          float v53 = 0.0;
          goto LABEL_48;
        }
      }
      float v53 = *(float *)(*(void *)(a4 + 16) + 4 * v48);
LABEL_48:
      long long v54 = v51;
      unint64_t v55 = v46;
      char v56 = v47;
      int v57 = result;
      uint64_t v58 = v78;
      if ((int)v50 >= 1)
      {
        do
        {
          if (8 - (v56 & 7u) >= (unint64_t)a12) {
            uint64_t v59 = a12;
          }
          else {
            uint64_t v59 = 8 - (v56 & 7u);
          }
          if (a14)
          {
            if (a12 == 8)
            {
              float v60 = (float)(char)*v54;
            }
            else
            {
              unsigned int v61 = 8 - (v56 & 7);
              if (v61 >= a12) {
                char v62 = a12;
              }
              else {
                char v62 = 8 - (v56 & 7);
              }
              unsigned int v63 = (((255 << (8 - v62)) >> (v56 & 7)) & a2[v55 >> 3]) >> (v61 - v62);
              if (a12 > v61)
              {
                unsigned int v64 = (a12 - v62);
                unsigned int v65 = v63 << (a12 - v62);
                int v66 = ((_BYTE)v59 + v56) & 7;
                if (v64 >= 8 - v66) {
                  LOBYTE(v64) = 8 - v66;
                }
                unsigned int v63 = ((((255 << (8 - v64)) >> v66) & a2[(v59 + v55) >> 3]) >> (8 - v66 - v64)) | v65;
              }
              if (((1 << (a12 - 1)) & v63) != 0) {
                char v67 = 255 << a12;
              }
              else {
                char v67 = 0;
              }
              float v60 = (float)(char)(v67 | v63);
            }
          }
          else if (a12 == 8)
          {
            LOBYTE(a11) = *v54;
            float v60 = (float)LODWORD(a11);
          }
          else
          {
            unsigned int v68 = 8 - (v56 & 7);
            if (v68 >= a12) {
              char v69 = a12;
            }
            else {
              char v69 = 8 - (v56 & 7);
            }
            unsigned int v70 = (((255 << (8 - v69)) >> (v56 & 7)) & a2[v55 >> 3]) >> (v68 - v69);
            if (a12 > v68)
            {
              unsigned int v71 = (a12 - v69);
              unsigned int v72 = v70 << (a12 - v69);
              int v73 = ((_BYTE)v59 + v56) & 7;
              if (v71 >= 8 - v73) {
                LOBYTE(v71) = 8 - v73;
              }
              unsigned int v70 = ((((255 << (8 - v71)) >> v73) & a2[(v59 + v55) >> 3]) >> (8 - v73 - v71)) | v72;
            }
            float v60 = (float)v70;
          }
          a11 = v53 + (float)(v60 * v52);
          *v57++ = a11;
          v56 += a12;
          v55 += a12;
          ++v54;
          --v58;
        }
        while (v58);
      }
      ++v48;
      uint64_t result = (float *)((char *)result + v76);
      v47 += v75;
      v46 += v74;
      v51 += v50;
      if (v48 == v77) {
        return result;
      }
    }
  }
  if (a7 >= 1)
  {
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = a7;
    int v18 = a7 * a6 * a5;
    do
    {
      if (a3)
      {
        float v19 = *(float *)(*(void *)(a3 + 16) + 4 * v16);
        if (!a4) {
          goto LABEL_8;
        }
      }
      else
      {
        float v19 = 1.0;
        if (!a4)
        {
LABEL_8:
          float v20 = 0.0;
          goto LABEL_9;
        }
      }
      float v20 = *(float *)(*(void *)(a4 + 16) + 4 * v16);
LABEL_9:
      if (a8 >= 1)
      {
        int v21 = 0;
        int v22 = v15;
        do
        {
          int v23 = v22;
          uint64_t v24 = v14;
          if ((int)v14 >= 1)
          {
            do
            {
              if (a14)
              {
                if (a12 == 8)
                {
                  int v25 = (char)a2[v23];
                }
                else
                {
                  unint64_t v27 = v23 * (uint64_t)a12;
                  unsigned int v28 = 8 - (v27 & 7);
                  if (v28 >= a12) {
                    unsigned int v29 = a12;
                  }
                  else {
                    unsigned int v29 = 8 - (v27 & 7);
                  }
                  unsigned int v30 = (((255 << (8 - v29)) >> (v27 & 7)) & a2[v27 >> 3]) >> (v28 - v29);
                  if (a12 > v28)
                  {
                    unsigned int v31 = (a12 - v29);
                    unint64_t v32 = v27 + v29;
                    unsigned int v33 = v30 << (a12 - v29);
                    unint64_t v34 = v32 >> 3;
                    int v35 = v32 & 7;
                    if (v31 >= 8 - v35) {
                      LOBYTE(v31) = 8 - v35;
                    }
                    unsigned int v30 = ((((255 << (8 - v31)) >> v35) & a2[v34]) >> (8 - v35 - v31)) | v33;
                  }
                  if (((1 << (a12 - 1)) & v30) != 0) {
                    char v36 = 255 << a12;
                  }
                  else {
                    char v36 = 0;
                  }
                  int v25 = (char)(v36 | v30);
                }
                float v26 = (float)v25;
              }
              else if (a12 == 8)
              {
                LOBYTE(a11) = a2[v23];
                float v26 = (float)LODWORD(a11);
              }
              else
              {
                unint64_t v37 = v23 * (uint64_t)a12;
                unsigned int v38 = 8 - (v37 & 7);
                if (v38 >= a12) {
                  unsigned int v39 = a12;
                }
                else {
                  unsigned int v39 = 8 - (v37 & 7);
                }
                unsigned int v40 = (((255 << (8 - v39)) >> (v37 & 7)) & a2[v37 >> 3]) >> (v38 - v39);
                if (a12 > v38)
                {
                  unsigned int v41 = (a12 - v39);
                  unint64_t v42 = v37 + v39;
                  unsigned int v43 = v40 << (a12 - v39);
                  unint64_t v44 = v42 >> 3;
                  int v45 = v42 & 7;
                  if (v41 >= 8 - v45) {
                    LOBYTE(v41) = 8 - v45;
                  }
                  unsigned int v40 = ((((255 << (8 - v41)) >> v45) & a2[v44]) >> (8 - v45 - v41)) | v43;
                }
                float v26 = (float)v40;
              }
              a11 = v20 + (float)(v26 * v19);
              result[v23++] = a11;
              --v24;
            }
            while (v24);
          }
          ++v21;
          v22 += v18;
        }
        while (v21 != a8);
      }
      ++v16;
      v15 += v14;
    }
    while (v16 != v17);
  }
  return result;
}

float *dequantize_uint_per_channel_lut<float>(float *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  uint64_t v11 = (a7 * a6);
  if (!a11)
  {
    if (a9 < 1) {
      return result;
    }
    unint64_t v32 = 0;
    char v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = (v11 * a8);
    char v52 = a10 * a8 * a7 * a6;
    char v36 = a2;
    while (1)
    {
      if (a4)
      {
        float v37 = *(float *)(*(void *)(a4 + 16) + 4 * v34);
        if (!a5) {
          goto LABEL_32;
        }
      }
      else
      {
        float v37 = 1.0;
        if (!a5)
        {
LABEL_32:
          float v38 = 0.0;
          goto LABEL_33;
        }
      }
      float v38 = *(float *)(*(void *)(a5 + 16) + 4 * v34);
LABEL_33:
      unsigned int v39 = v36;
      unint64_t v40 = v32;
      char v41 = v33;
      unint64_t v42 = result;
      uint64_t v43 = v35;
      if ((int)v35 >= 1)
      {
        do
        {
          unint64_t v44 = 8 - (v41 & 7u);
          if (v44 >= a10) {
            unint64_t v44 = a10;
          }
          if (a10 == 8)
          {
            float v45 = *(float *)(a3 + 4 * *v39);
          }
          else
          {
            unsigned int v46 = 8 - (v41 & 7);
            if (v46 >= a10) {
              char v47 = a10;
            }
            else {
              char v47 = 8 - (v41 & 7);
            }
            unsigned int v48 = (((255 << (8 - v47)) >> (v41 & 7)) & a2[v40 >> 3]) >> (v46 - v47);
            if (a10 > v46)
            {
              unsigned int v49 = (a10 - v47);
              unint64_t v50 = (v44 + v40) >> 3;
              int v51 = ((_BYTE)v44 + v41) & 7;
              if (v49 >= 8 - v51) {
                LOBYTE(v49) = 8 - v51;
              }
              unsigned int v48 = ((((255 << (8 - v49)) >> v51) & a2[v50]) >> (8 - v51 - v49)) | (v48 << (a10 - v47));
            }
            float v45 = v38 + (float)(v37 * *(float *)(a3 + 4 * v48));
          }
          *v42++ = v45;
          v41 += a10;
          v40 += a10;
          ++v39;
          --v43;
        }
        while (v43);
      }
      ++v34;
      result += (int)v35;
      v33 += v52;
      v32 += a10 * (uint64_t)(int)v35;
      v36 += (int)v35;
      if (v34 == a9) {
        return result;
      }
    }
  }
  if (a8 >= 1)
  {
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = a8;
    int v15 = a8 * a7 * a6;
    do
    {
      if (a4)
      {
        float v16 = *(float *)(*(void *)(a4 + 16) + 4 * v13);
        if (!a5) {
          goto LABEL_8;
        }
      }
      else
      {
        float v16 = 1.0;
        if (!a5)
        {
LABEL_8:
          float v17 = 0.0;
          goto LABEL_9;
        }
      }
      float v17 = *(float *)(*(void *)(a5 + 16) + 4 * v13);
LABEL_9:
      if (a9 >= 1)
      {
        int v18 = 0;
        int v19 = v12;
        do
        {
          int v20 = v19;
          uint64_t v21 = v11;
          if ((int)v11 >= 1)
          {
            do
            {
              if (a10 == 8)
              {
                uint64_t v22 = a2[v20];
              }
              else
              {
                unint64_t v23 = v20 * (uint64_t)a10;
                unsigned int v24 = 8 - (v23 & 7);
                if (v24 >= a10) {
                  unsigned int v25 = a10;
                }
                else {
                  unsigned int v25 = 8 - (v23 & 7);
                }
                unsigned int v26 = (((255 << (8 - v25)) >> (v23 & 7)) & a2[v23 >> 3]) >> (v24 - v25);
                if (a10 > v24)
                {
                  unsigned int v27 = (a10 - v25);
                  unint64_t v28 = v23 + v25;
                  unsigned int v29 = v26 << (a10 - v25);
                  unint64_t v30 = v28 >> 3;
                  int v31 = v28 & 7;
                  if (v27 >= 8 - v31) {
                    LOBYTE(v27) = 8 - v31;
                  }
                  unsigned int v26 = ((((255 << (8 - v27)) >> v31) & a2[v30]) >> (8 - v31 - v27)) | v29;
                }
                uint64_t v22 = v26;
              }
              result[v20++] = v17 + (float)(v16 * *(float *)(a3 + 4 * v22));
              --v21;
            }
            while (v21);
          }
          ++v18;
          v19 += v15;
        }
        while (v18 != a9);
      }
      ++v13;
      v12 += v11;
    }
    while (v13 != v14);
  }
  return result;
}

int *Espresso::quantized_weights_helper::get_extended_weight_blob@<X0>(int *this@<X0>, void *a2@<X8>)
{
  if (this[40] >= 1 && (uint64_t v2 = *((void *)this + 2)) != 0)
  {
    uint64_t v3 = *((void *)this + 3);
  }
  else
  {
    uint64_t v2 = *(void *)this;
    uint64_t v3 = *((void *)this + 1);
  }
  *a2 = v2;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::quantized_weights_helper::get_extended_number_of_weight_bits(Espresso::quantized_weights_helper *this)
{
  uint64_t result = *((unsigned int *)this + 40);
  if ((int)result <= 0) {
    return *((unsigned int *)this + 39);
  }
  return result;
}

uint64_t Espresso::quantized_weights_helper::are_weights_signed(Espresso::quantized_weights_helper *this)
{
  return *((unsigned __int8 *)this + 164);
}

void Espresso::quantized_weights_helper::dequantize_to_float16_4d(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 160);
  if (v2 >= 1 && *(void *)(a1 + 16))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v3) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      goto LABEL_7;
    }
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  int v2 = *(_DWORD *)(a1 + 160);
LABEL_7:
  if (v2 <= 0) {
    int v2 = *(_DWORD *)(a1 + 156);
  }
LABEL_9:
  uint64_t v14 = v3;
  if (v2 != 8) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("FP16 BNNS Dequantizer only available for uint8/int8");
  }
  if (*(_DWORD *)(a1 + 144))
  {
    int v4 = *(_DWORD *)(a1 + 136);
    if (v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = *(int *)(a1 + 132) * (uint64_t)*(int *)(a1 + 128);
      uint64_t v9 = (int)v8 * v4;
      do
      {
        if (*(int *)(a1 + 140) >= 1)
        {
          uint64_t v15 = v7;
          uint64_t v16 = v6;
          uint64_t v10 = 0;
          uint64_t v17 = v5;
          do
          {
            if (BNNSDequantize())
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "BNNS de-quantization error");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            ++v10;
            v6 += 2 * v9;
            v5 += v9;
          }
          while (v10 < *(int *)(a1 + 140));
          int v4 = *(_DWORD *)(a1 + 136);
          uint64_t v6 = v16;
          uint64_t v5 = v17;
          uint64_t v7 = v15;
        }
        ++v7;
        v6 += 2 * v8;
        v5 += v8;
      }
      while (v7 < v4);
    }
  }
  else if (*(int *)(a1 + 140) >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      if (BNNSDequantize())
      {
        uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v13, "BNNS de-quantization error");
        __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      ++v11;
    }
    while (v11 < *(int *)(a1 + 140));
  }
  if (v14)
  {
    nitro::nitro_function::nitro_function(v14);
  }
}

void sub_192876CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9)
{
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::dequantize_to_float32_4d(Espresso::quantized_weights_helper *this@<X0>, uint64_t *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35));
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  v9[0] = v7;
  v9[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::quantized_weights_helper::dequantize_to_float32_4d((uint64_t *)this, (uint64_t)v9, v4, v5, v6);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_192876DA0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::dequantize_to_float32_2d(uint64_t *a1, uint64_t a2, double a3, double a4, float a5)
{
  int v5 = *((_DWORD *)a1 + 40);
  if (v5 >= 1 && (uint64_t v6 = a1[2]) != 0)
  {
    uint64_t v7 = (std::__shared_weak_count *)a1[3];
    if (!v7) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (std::__shared_weak_count *)a1[1];
    if (!v7) {
      goto LABEL_7;
    }
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v5 = *((_DWORD *)a1 + 40);
LABEL_7:
  if (v5 <= 0) {
    int v5 = *((_DWORD *)a1 + 39);
  }
LABEL_9:
  if (a1[6] || a1[8] || a1[4])
  {
    uint64_t v8 = a1[4];
    if (!v8) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    }
    uint64_t v9 = *(float **)(*(void *)a2 + 16);
    uint64_t v10 = *(unsigned __int8 **)(v6 + 16);
    uint64_t v11 = *(void *)(v8 + 16);
    uint64_t v12 = a1[10];
    uint64_t v13 = (std::__shared_weak_count *)a1[11];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = a1[12];
    uint64_t v15 = (std::__shared_weak_count *)a1[13];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dequantize_uint_per_channel_lut<float>(v9, v10, v11, v12, v14, 1, 1, *((_DWORD *)a1 + 33) * *((_DWORD *)a1 + 32) * *((_DWORD *)a1 + 34), *((_DWORD *)a1 + 35), v5, *((_DWORD *)a1 + 36));
    if (!v15) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v5 == 8)
  {
    uint64_t v16 = *(float **)(*(void *)a2 + 16);
    int v17 = *((_DWORD *)a1 + 33) * *((_DWORD *)a1 + 32) * *((_DWORD *)a1 + 34);
    int v18 = v17 * *((_DWORD *)a1 + 35);
    int v19 = *(float **)(a1[10] + 16);
    int v20 = *(float **)(a1[12] + 16);
    uint64_t v21 = *(char **)(v6 + 16);
    if (*((unsigned char *)a1 + 164)) {
      Espresso::range_quantizer<signed char>::dequantize_chunks(v16, v18, v17, v19, v20, v21);
    }
    else {
      Espresso::range_quantizer<unsigned char>::dequantize_chunks(v16, v18, v17, v19, v20, (unsigned __int8 *)v21);
    }
    goto LABEL_21;
  }
  uint64_t v22 = *(float **)(*(void *)a2 + 16);
  unint64_t v23 = *(unsigned char **)(v6 + 16);
  uint64_t v24 = a1[10];
  uint64_t v13 = (std::__shared_weak_count *)a1[11];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = a1[12];
  uint64_t v15 = (std::__shared_weak_count *)a1[13];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dequantize_uint_per_channel_linear<float>(v22, v23, v24, v25, 1, 1, *((_DWORD *)a1 + 33) * *((_DWORD *)a1 + 32) * *((_DWORD *)a1 + 34), *((_DWORD *)a1 + 35), a3, a4, a5, v5, *((_DWORD *)a1 + 36), *((unsigned char *)a1 + 164));
  if (v15) {
LABEL_18:
  }
    nitro::nitro_function::nitro_function(v15);
LABEL_19:
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
LABEL_21:
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192876FCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::dequantize_to_float16_2d(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 160);
  if (v2 >= 1 && *(void *)(a1 + 16))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v3) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      goto LABEL_7;
    }
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  int v2 = *(_DWORD *)(a1 + 160);
LABEL_7:
  if (v2 <= 0) {
    int v2 = *(_DWORD *)(a1 + 156);
  }
LABEL_9:
  if (v2 != 8) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("FP16 BNNS Dequantizer only available for uint8/int8");
  }
  if (*(int *)(a1 + 140) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      if (BNNSDequantize())
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "BNNS de-quantization error");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      ++v4;
    }
    while (v4 < *(int *)(a1 + 140));
  }
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1928771B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::dequantize_to_float32_2d(Espresso::quantized_weights_helper *this@<X0>, uint64_t *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34), *((_DWORD *)this + 35), 1, 1);
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  v9[0] = v7;
  v9[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::quantized_weights_helper::dequantize_to_float32_2d((uint64_t *)this, (uint64_t)v9, v4, v5, v6);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_192877278(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::dequantize_to_float32_4d_lstm(Espresso::quantized_weights_helper *this@<X0>, uint64_t *a2@<X8>)
{
  int v4 = *((_DWORD *)this + 35) / 4;
  int v5 = *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34);
  int v45 = v5 * v4;
  int v46 = v5;
  int v6 = v5 * v4 * *((_DWORD *)this + 39);
  int v8 = v6 - 1;
  BOOL v7 = v6 < 1;
  int v9 = v6 + 6;
  if (!v7) {
    int v9 = v8;
  }
  int v10 = v9 >> 3;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, 1, 1, v5, (*((_DWORD *)this + 35) + (*((int *)this + 35) < 0 ? 3 : 0)) & 0xFFFFFFFC);
  if (*((int *)this + 40) >= 1)
  {
    uint64_t v48 = *((void *)this + 2);
    if (v48)
    {
      uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 3);
      if (!v11) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
  uint64_t v48 = *(void *)this;
  if (v11) {
LABEL_8:
  }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_9:
  int v12 = v10 + 1;
  int v47 = v4;
  unint64_t v44 = v11;
  if (*((void *)this + 6) || *((void *)this + 8) || *((void *)this + 4))
  {
    if (!*((void *)this + 4)) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    }
    int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = v12;
    uint64_t v17 = *a2;
    while (1)
    {
      int v18 = *((_DWORD *)this + 39);
      uint64_t v19 = *(void *)(v17 + 24);
      uint64_t v20 = *(void *)(v48 + 16);
      uint64_t v21 = *(void *)(*((void *)this + 4) + 16);
      uint64_t v22 = *((void *)this + 10);
      unint64_t v23 = (std::__shared_weak_count *)*((void *)this + 11);
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (float *)(v19 + 4 * v13);
      uint64_t v25 = (unsigned __int8 *)(v20 + v14);
      uint64_t v26 = v21 + 4 * v15 * (2 << (v18 - 1));
      uint64_t v27 = *((void *)this + 12);
      unint64_t v28 = (std::__shared_weak_count *)*((void *)this + 13);
      if (!v28) {
        break;
      }
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      dequantize_uint_per_channel_lut<float>(v24, v25, v26, v22, v27, 1, 1, v46, v4, *((_DWORD *)this + 39), *((_DWORD *)this + 36));
      nitro::nitro_function::nitro_function(v28);
      if (v23) {
        goto LABEL_18;
      }
LABEL_19:
      ++v15;
      v14 += v16;
      v13 += v45;
      if (v15 == 4) {
        goto LABEL_25;
      }
    }
    dequantize_uint_per_channel_lut<float>(v24, v25, v26, v22, v27, 1, 1, v46, v4, *((_DWORD *)this + 39), *((_DWORD *)this + 36));
    if (!v23) {
      goto LABEL_19;
    }
LABEL_18:
    nitro::nitro_function::nitro_function(v23);
    goto LABEL_19;
  }
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  uint64_t v42 = *a2;
  uint64_t v43 = v12;
  uint64_t v41 = 4 * v4;
  uint64_t v32 = 4;
  do
  {
    uint64_t v33 = *(void *)(*((void *)this + 10) + 16);
    uint64_t v34 = (char *)operator new(0x58uLL);
    *((void *)v34 + 1) = 0;
    *((void *)v34 + 2) = 0;
    *(void *)uint64_t v34 = &unk_1EE389920;
    *((void *)v34 + 3) = &unk_1EE36BEB0;
    *(_OWORD *)(v34 + 56) = 0u;
    *(_OWORD *)(v34 + 72) = 0u;
    *((_DWORD *)v34 + 8) = v47;
    *((void *)v34 + 5) = v33 + v29;
    v34[48] = 0;
    uint64_t v35 = *(void *)(*((void *)this + 12) + 16);
    char v36 = (char *)operator new(0x58uLL);
    *((void *)v36 + 1) = 0;
    *(void *)char v36 = &unk_1EE389920;
    *((void *)v36 + 2) = 0;
    *((void *)v36 + 3) = &unk_1EE36BEB0;
    *(_OWORD *)(v36 + 56) = 0u;
    *(_OWORD *)(v36 + 72) = 0u;
    *((_DWORD *)v36 + 8) = v47;
    *((void *)v36 + 5) = v35 + v29;
    v36[48] = 0;
    float v37 = (float *)(*(void *)(v42 + 24) + 4 * v30);
    float v38 = (unsigned char *)(*(void *)(v48 + 16) + v31);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v34 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v36 + 1, 1uLL, memory_order_relaxed);
    dequantize_uint_per_channel_linear<float>(v37, v38, (uint64_t)(v34 + 24), (uint64_t)(v36 + 24), 1, 1, v46, v47, 0.0, v39, v40, *((_DWORD *)this + 39), *((_DWORD *)this + 36), *((unsigned char *)this + 164));
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v36);
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v34);
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v36);
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v34);
    v31 += v43;
    v30 += v45;
    v29 += v41;
    --v32;
  }
  while (v32);
LABEL_25:
  if (v44)
  {
    nitro::nitro_function::nitro_function(v44);
  }
}

void sub_19287767C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a11 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::dequantize_to_float16_4d(Espresso::quantized_weights_helper *this@<X0>, void *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a2, 2 * *((_DWORD *)this + 32) * *((_DWORD *)this + 33) * *((_DWORD *)this + 34) * *((_DWORD *)this + 35), 1, 1, 1);
  if (*((void *)this + 6) || *((void *)this + 8) || *((void *)this + 4))
  {
    uint64_t v7 = *((void *)this + 4);
    if (!v7) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    }
    int v8 = *(_WORD **)(*a2 + 16);
    int v9 = *(unsigned __int8 **)(*(void *)this + 16);
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v11 = *((void *)this + 10);
    int v12 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)this + 12);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      dequantize_uint_per_channel_lut<half>(v8, v9, v10, v11, v13, *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((_DWORD *)this + 39), *((_DWORD *)this + 36));
LABEL_9:
      nitro::nitro_function::nitro_function(v14);
      goto LABEL_11;
    }
    dequantize_uint_per_channel_lut<half>(v8, v9, v10, v11, v13, *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((_DWORD *)this + 39), *((_DWORD *)this + 36));
  }
  else
  {
    uint64_t v15 = *(_WORD **)(*a2 + 16);
    uint64_t v16 = *(unsigned char **)(*(void *)this + 16);
    uint64_t v17 = *((void *)this + 10);
    int v12 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *((void *)this + 12);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dequantize_uint_per_channel_linear<half>(v15, v16, v17, v18, *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35), v4, v5, v6, *((_DWORD *)this + 39), *((_DWORD *)this + 36), *((unsigned char *)this + 164));
    if (v14) {
      goto LABEL_9;
    }
  }
LABEL_11:
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192877858(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

_WORD *dequantize_uint_per_channel_linear<half>(_WORD *result, unsigned char *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, double a9, double a10, float _S2, int a12, int a13, char a14)
{
  uint64_t v14 = (a6 * a5);
  if (!a13)
  {
    if (a8 < 1) {
      return result;
    }
    unint64_t v50 = 0;
    char v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = (v14 * a7);
    uint64_t v54 = (int)v53;
    uint64_t v81 = a8;
    uint64_t v82 = v53;
    char v79 = a12 * a7 * a6 * a5;
    uint64_t v80 = 2 * (int)v53;
    uint64_t v78 = a12 * (uint64_t)(int)v53;
    unint64_t v55 = a2;
    while (1)
    {
      if (a3)
      {
        float v56 = *(float *)(*(void *)(a3 + 16) + 4 * v52);
        if (!a4) {
          goto LABEL_47;
        }
      }
      else
      {
        float v56 = 1.0;
        if (!a4)
        {
LABEL_47:
          float v57 = 0.0;
          goto LABEL_48;
        }
      }
      float v57 = *(float *)(*(void *)(a4 + 16) + 4 * v52);
LABEL_48:
      uint64_t v58 = v55;
      unint64_t v59 = v50;
      char v60 = v51;
      unsigned int v61 = result;
      uint64_t v62 = v82;
      if ((int)v54 >= 1)
      {
        do
        {
          if (8 - (v60 & 7u) >= (unint64_t)a12) {
            uint64_t v63 = a12;
          }
          else {
            uint64_t v63 = 8 - (v60 & 7u);
          }
          if (a14)
          {
            if (a12 == 8)
            {
              float v64 = (float)(char)*v58;
            }
            else
            {
              unsigned int v65 = 8 - (v60 & 7);
              if (v65 >= a12) {
                char v66 = a12;
              }
              else {
                char v66 = 8 - (v60 & 7);
              }
              unsigned int v67 = (((255 << (8 - v66)) >> (v60 & 7)) & a2[v59 >> 3]) >> (v65 - v66);
              if (a12 > v65)
              {
                unsigned int v68 = (a12 - v66);
                unsigned int v69 = v67 << (a12 - v66);
                int v70 = ((_BYTE)v63 + v60) & 7;
                if (v68 >= 8 - v70) {
                  LOBYTE(v68) = 8 - v70;
                }
                unsigned int v67 = ((((255 << (8 - v68)) >> v70) & a2[(v63 + v59) >> 3]) >> (8 - v70 - v68)) | v69;
              }
              if (((1 << (a12 - 1)) & v67) != 0) {
                char v71 = 255 << a12;
              }
              else {
                char v71 = 0;
              }
              float v64 = (float)(char)(v71 | v67);
            }
          }
          else if (a12 == 8)
          {
            LOBYTE(_S2) = *v58;
            float v64 = (float)LODWORD(_S2);
          }
          else
          {
            unsigned int v72 = 8 - (v60 & 7);
            if (v72 >= a12) {
              char v73 = a12;
            }
            else {
              char v73 = 8 - (v60 & 7);
            }
            unsigned int v74 = (((255 << (8 - v73)) >> (v60 & 7)) & a2[v59 >> 3]) >> (v72 - v73);
            if (a12 > v72)
            {
              unsigned int v75 = (a12 - v73);
              unsigned int v76 = v74 << (a12 - v73);
              int v77 = ((_BYTE)v63 + v60) & 7;
              if (v75 >= 8 - v77) {
                LOBYTE(v75) = 8 - v77;
              }
              unsigned int v74 = ((((255 << (8 - v75)) >> v77) & a2[(v63 + v59) >> 3]) >> (8 - v77 - v75)) | v76;
            }
            float v64 = (float)v74;
          }
          _S2 = v57 + (float)(v64 * v56);
          __asm { FCVT            H2, S2 }
          *v61++ = LOWORD(_S2);
          v60 += a12;
          v59 += a12;
          ++v58;
          --v62;
        }
        while (v62);
      }
      ++v52;
      uint64_t result = (_WORD *)((char *)result + v80);
      v51 += v79;
      v50 += v78;
      v55 += v54;
      if (v52 == v81) {
        return result;
      }
    }
  }
  if (a7 >= 1)
  {
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = a7;
    int v18 = a7 * a6 * a5;
    do
    {
      if (a3)
      {
        float v19 = *(float *)(*(void *)(a3 + 16) + 4 * v16);
        if (!a4) {
          goto LABEL_8;
        }
      }
      else
      {
        float v19 = 1.0;
        if (!a4)
        {
LABEL_8:
          float v20 = 0.0;
          goto LABEL_9;
        }
      }
      float v20 = *(float *)(*(void *)(a4 + 16) + 4 * v16);
LABEL_9:
      if (a8 >= 1)
      {
        int v21 = 0;
        int v22 = v15;
        do
        {
          int v23 = v22;
          uint64_t v24 = v14;
          if ((int)v14 >= 1)
          {
            do
            {
              if (a14)
              {
                if (a12 == 8)
                {
                  int v25 = (char)a2[v23];
                }
                else
                {
                  unint64_t v27 = v23 * (uint64_t)a12;
                  unsigned int v28 = 8 - (v27 & 7);
                  if (v28 >= a12) {
                    unsigned int v29 = a12;
                  }
                  else {
                    unsigned int v29 = 8 - (v27 & 7);
                  }
                  unsigned int v30 = (((255 << (8 - v29)) >> (v27 & 7)) & a2[v27 >> 3]) >> (v28 - v29);
                  if (a12 > v28)
                  {
                    unsigned int v31 = (a12 - v29);
                    unint64_t v32 = v27 + v29;
                    unsigned int v33 = v30 << (a12 - v29);
                    unint64_t v34 = v32 >> 3;
                    int v35 = v32 & 7;
                    if (v31 >= 8 - v35) {
                      LOBYTE(v31) = 8 - v35;
                    }
                    unsigned int v30 = ((((255 << (8 - v31)) >> v35) & a2[v34]) >> (8 - v35 - v31)) | v33;
                  }
                  if (((1 << (a12 - 1)) & v30) != 0) {
                    char v36 = 255 << a12;
                  }
                  else {
                    char v36 = 0;
                  }
                  int v25 = (char)(v36 | v30);
                }
                float v26 = (float)v25;
              }
              else if (a12 == 8)
              {
                LOBYTE(_S2) = a2[v23];
                float v26 = (float)LODWORD(_S2);
              }
              else
              {
                unint64_t v37 = v23 * (uint64_t)a12;
                unsigned int v38 = 8 - (v37 & 7);
                if (v38 >= a12) {
                  unsigned int v39 = a12;
                }
                else {
                  unsigned int v39 = 8 - (v37 & 7);
                }
                unsigned int v40 = (((255 << (8 - v39)) >> (v37 & 7)) & a2[v37 >> 3]) >> (v38 - v39);
                if (a12 > v38)
                {
                  unsigned int v41 = (a12 - v39);
                  unint64_t v42 = v37 + v39;
                  unsigned int v43 = v40 << (a12 - v39);
                  unint64_t v44 = v42 >> 3;
                  int v45 = v42 & 7;
                  if (v41 >= 8 - v45) {
                    LOBYTE(v41) = 8 - v45;
                  }
                  unsigned int v40 = ((((255 << (8 - v41)) >> v45) & a2[v44]) >> (8 - v45 - v41)) | v43;
                }
                float v26 = (float)v40;
              }
              _S2 = v20 + (float)(v26 * v19);
              __asm { FCVT            H2, S2 }
              result[v23++] = LOWORD(_S2);
              --v24;
            }
            while (v24);
          }
          ++v21;
          v22 += v18;
        }
        while (v21 != a8);
      }
      ++v16;
      v15 += v14;
    }
    while (v16 != v17);
  }
  return result;
}

_WORD *dequantize_uint_per_channel_lut<half>(_WORD *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  uint64_t v11 = (a7 * a6);
  if (!a11)
  {
    if (a9 < 1) {
      return result;
    }
    unint64_t v37 = 0;
    char v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = (v11 * a8);
    char v58 = a10 * a8 * a7 * a6;
    unsigned int v41 = a2;
    while (1)
    {
      if (a4)
      {
        float v42 = *(float *)(*(void *)(a4 + 16) + 4 * v39);
        if (!a5) {
          goto LABEL_32;
        }
      }
      else
      {
        float v42 = 1.0;
        if (!a5)
        {
LABEL_32:
          float v43 = 0.0;
          goto LABEL_33;
        }
      }
      float v43 = *(float *)(*(void *)(a5 + 16) + 4 * v39);
LABEL_33:
      unint64_t v44 = v41;
      unint64_t v45 = v37;
      char v46 = v38;
      int v47 = result;
      uint64_t v48 = v40;
      if ((int)v40 >= 1)
      {
        do
        {
          unint64_t v49 = 8 - (v46 & 7u);
          if (v49 >= a10) {
            unint64_t v49 = a10;
          }
          if (a10 == 8)
          {
            _S2 = *(float *)(a3 + 4 * *v44);
          }
          else
          {
            unsigned int v51 = 8 - (v46 & 7);
            if (v51 >= a10) {
              char v52 = a10;
            }
            else {
              char v52 = 8 - (v46 & 7);
            }
            unsigned int v53 = (((255 << (8 - v52)) >> (v46 & 7)) & a2[v45 >> 3]) >> (v51 - v52);
            if (a10 > v51)
            {
              unsigned int v54 = (a10 - v52);
              unint64_t v55 = (v49 + v45) >> 3;
              int v56 = ((_BYTE)v49 + v46) & 7;
              if (v54 >= 8 - v56) {
                LOBYTE(v54) = 8 - v56;
              }
              unsigned int v53 = ((((255 << (8 - v54)) >> v56) & a2[v55]) >> (8 - v56 - v54)) | (v53 << (a10 - v52));
            }
            _S2 = v43 + (float)(v42 * *(float *)(a3 + 4 * v53));
          }
          __asm { FCVT            H2, S2 }
          *v47++ = _H2;
          v46 += a10;
          v45 += a10;
          ++v44;
          --v48;
        }
        while (v48);
      }
      ++v39;
      result += (int)v40;
      v38 += v58;
      v37 += a10 * (uint64_t)(int)v40;
      v41 += (int)v40;
      if (v39 == a9) {
        return result;
      }
    }
  }
  if (a8 >= 1)
  {
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = a8;
    int v15 = a8 * a7 * a6;
    do
    {
      if (a4)
      {
        float v16 = *(float *)(*(void *)(a4 + 16) + 4 * v13);
        if (!a5) {
          goto LABEL_8;
        }
      }
      else
      {
        float v16 = 1.0;
        if (!a5)
        {
LABEL_8:
          float v17 = 0.0;
          goto LABEL_9;
        }
      }
      float v17 = *(float *)(*(void *)(a5 + 16) + 4 * v13);
LABEL_9:
      if (a9 >= 1)
      {
        int v18 = 0;
        int v19 = v12;
        do
        {
          int v20 = v19;
          uint64_t v21 = v11;
          if ((int)v11 >= 1)
          {
            do
            {
              if (a10 == 8)
              {
                uint64_t v22 = a2[v20];
              }
              else
              {
                unint64_t v23 = v20 * (uint64_t)a10;
                unsigned int v24 = 8 - (v23 & 7);
                if (v24 >= a10) {
                  unsigned int v25 = a10;
                }
                else {
                  unsigned int v25 = 8 - (v23 & 7);
                }
                unsigned int v26 = (((255 << (8 - v25)) >> (v23 & 7)) & a2[v23 >> 3]) >> (v24 - v25);
                if (a10 > v24)
                {
                  unsigned int v27 = (a10 - v25);
                  unint64_t v28 = v23 + v25;
                  unsigned int v29 = v26 << (a10 - v25);
                  unint64_t v30 = v28 >> 3;
                  int v31 = v28 & 7;
                  if (v27 >= 8 - v31) {
                    LOBYTE(v27) = 8 - v31;
                  }
                  unsigned int v26 = ((((255 << (8 - v27)) >> v31) & a2[v30]) >> (8 - v31 - v27)) | v29;
                }
                uint64_t v22 = v26;
              }
              _S2 = v17 + (float)(v16 * *(float *)(a3 + 4 * v22));
              __asm { FCVT            H2, S2 }
              result[v20++] = LOWORD(_S2);
              --v21;
            }
            while (v21);
          }
          ++v18;
          v19 += v15;
        }
        while (v18 != a9);
      }
      ++v13;
      v12 += v11;
    }
    while (v13 != v14);
  }
  return result;
}

void Espresso::quantized_weights_helper::dequantize_to_float16_2d(Espresso::quantized_weights_helper *this@<X0>, void *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a2, 2 * *((_DWORD *)this + 32) * *((_DWORD *)this + 33) * *((_DWORD *)this + 34) * *((_DWORD *)this + 35), 1, 1, 1);
  if (*((void *)this + 6) || *((void *)this + 8) || *((void *)this + 4))
  {
    uint64_t v7 = *((void *)this + 4);
    if (!v7) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    }
    int v8 = *(_WORD **)(*a2 + 16);
    int v9 = *(unsigned __int8 **)(*(void *)this + 16);
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v11 = *((void *)this + 10);
    int v12 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)this + 12);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dequantize_uint_per_channel_lut<half>(v8, v9, v10, v11, v13, 1, 1, *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((_DWORD *)this + 39), *((_DWORD *)this + 36));
    if (v14) {
LABEL_10:
    }
      nitro::nitro_function::nitro_function(v14);
  }
  else
  {
    int v15 = *(_WORD **)(*a2 + 16);
    float v16 = *(unsigned char **)(*(void *)this + 16);
    uint64_t v17 = *((void *)this + 10);
    int v12 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *((void *)this + 12);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dequantize_uint_per_channel_linear<half>(v15, v16, v17, v18, 1, 1, *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34), *((_DWORD *)this + 35), v4, v5, v6, *((_DWORD *)this + 39), *((_DWORD *)this + 36), *((unsigned char *)this + 164));
    if (v14) {
      goto LABEL_10;
    }
  }
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_19287822C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::expand_to_int8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::quantized_weights_helper::expand_to_uint8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::quantized_weights_helper::make_uint8_weight_from_raw(Espresso::quantized_weights_helper *this)
{
  if (*((_DWORD *)this + 39) != 8)
  {
    if (*((unsigned char *)this + 164)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Unable to extend signed int weights to unsigned char");
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v44, *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34) * *((_DWORD *)this + 35), 1, 1, 1);
    uint64_t v2 = v44;
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    *((_OWORD *)this + 1) = v44;
    if (v3)
    {
      nitro::nitro_function::nitro_function(v3);
      uint64_t v4 = *((void *)this + 2);
    }
    else
    {
      uint64_t v4 = v2;
    }
    double v5 = *(unsigned char **)(v4 + 16);
    uint64_t v6 = *(void *)(*(void *)this + 16);
    int v8 = *((_DWORD *)this + 34);
    uint64_t v7 = *((unsigned int *)this + 35);
    uint64_t v9 = *((int *)this + 39);
    uint64_t v10 = (*((_DWORD *)this + 33) * *((_DWORD *)this + 32));
    if (*((_DWORD *)this + 36))
    {
      if (v8 >= 1)
      {
        int v11 = 0;
        for (int i = 0; i != v8; ++i)
        {
          if ((int)v7 >= 1)
          {
            int v13 = 0;
            int v14 = v11;
            do
            {
              int v15 = v14;
              uint64_t v16 = v10;
              if ((int)v10 >= 1)
              {
                do
                {
                  unint64_t v17 = (int)v9 * (uint64_t)v15;
                  unsigned int v18 = 8 - (v17 & 7);
                  if (v18 >= v9) {
                    unsigned int v19 = v9;
                  }
                  else {
                    unsigned int v19 = 8 - (v17 & 7);
                  }
                  unsigned int v20 = (((255 << (8 - v19)) >> (v17 & 7)) & *(unsigned __int8 *)(v6 + (v17 >> 3))) >> (v18 - v19);
                  if (v9 > v18)
                  {
                    unsigned int v21 = (v9 - v19);
                    unint64_t v22 = v17 + v19;
                    unsigned int v23 = v20 << (v9 - v19);
                    unint64_t v24 = v22 >> 3;
                    int v25 = v22 & 7;
                    if (v21 >= 8 - v25) {
                      LOBYTE(v21) = 8 - v25;
                    }
                    unsigned int v20 = ((((255 << (8 - v21)) >> v25) & *(unsigned __int8 *)(v6 + v24)) >> (8 - v25 - v21)) | v23;
                  }
                  v5[v15++] = v20;
                  --v16;
                }
                while (v16);
              }
              ++v13;
              v14 += v10 * v8;
            }
            while (v13 != v7);
          }
          v11 += v10;
        }
      }
    }
    else if ((int)v7 >= 1)
    {
      unint64_t v26 = 0;
      char v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = (v10 * v8);
      do
      {
        unint64_t v30 = v26;
        char v31 = v27;
        unint64_t v32 = v5;
        uint64_t v33 = v29;
        if ((int)v29 >= 1)
        {
          do
          {
            int v34 = v31 & 7;
            unint64_t v35 = (8 - v34);
            if (v35 >= v9) {
              uint64_t v36 = v9;
            }
            else {
              uint64_t v36 = (8 - v34);
            }
            if (v35 >= v9) {
              char v37 = v9;
            }
            else {
              char v37 = 8 - (v31 & 7);
            }
            unsigned int v38 = (((255 << (8 - v37)) >> v34) & *(unsigned __int8 *)(v6 + (v30 >> 3))) >> (8 - (v31 & 7) - v37);
            if (v9 > v35)
            {
              unsigned __int8 v39 = v9 - v37;
              unsigned int v40 = v39;
              unsigned int v41 = v38 << v39;
              unint64_t v42 = (v36 + v30) >> 3;
              int v43 = ((_BYTE)v36 + v31) & 7;
              if (v40 >= 8 - v43) {
                LOBYTE(v40) = 8 - v43;
              }
              unsigned int v38 = ((((255 << (8 - v40)) >> v43) & *(unsigned __int8 *)(v6 + v42)) >> (8 - v43 - v40)) | v41;
            }
            *v32++ = v38;
            v31 += v9;
            v30 += v9;
            --v33;
          }
          while (v33);
        }
        ++v28;
        v5 += (int)v29;
        v27 += v29 * v9;
        v26 += (int)v9 * (uint64_t)(int)v29;
      }
      while (v28 != v7);
    }
    *((_DWORD *)this + 40) = 8;
  }
}

__int16 Espresso::quantized_weights_helper::make_fp16_lut_from_fp32@<H0>(Espresso::quantized_weights_helper *this@<X0>, double _D0@<D0>)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v4 = *(int *)(v2 + 8);
    double v5 = *((double *)this + 21);
    if (v5 == 0.0)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(&v15, *(_DWORD *)(v2 + 8), 1, 1, 1);
      _D0 = *(double *)&v15;
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 22);
      *(_OWORD *)((char *)this + 168) = v15;
      if (v6)
      {
        nitro::nitro_function::nitro_function(v6);
        double v5 = *((double *)this + 21);
      }
      else
      {
        double v5 = _D0;
      }
      uint64_t v2 = *((void *)this + 4);
    }
    if (v4)
    {
      uint64_t v7 = *(int **)(v2 + 16);
      int v8 = *(_WORD **)(*(void *)&v5 + 16);
      do
      {
        int v9 = *v7++;
        LODWORD(_D0) = v9;
        __asm { FCVT            H0, S0 }
        *v8++ = LOWORD(_D0);
        --v4;
      }
      while (v4);
    }
  }
  return LOWORD(_D0);
}

BOOL Espresso::quantized_weights_helper::valid(Espresso::quantized_weights_helper *this)
{
  if (!*(void *)this) {
    return 0;
  }
  if (*((void *)this + 4) || *((void *)this + 6) || *((void *)this + 8)) {
    return 1;
  }
  return *((void *)this + 10) != 0;
}

BOOL Espresso::quantized_weights_helper::has_lut(Espresso::quantized_weights_helper *this)
{
  return *((void *)this + 4) || *((void *)this + 6) || *((void *)this + 8) != 0;
}

BOOL Espresso::quantized_weights_helper::is_qbias_zero(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 1;
  }
  float __C = 0.0;
  vDSP_maxmgv(*(const float **)(v1 + 16), 1, &__C, *(int *)(v1 + 8));
  return __C < 0.00001;
}

BOOL Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(Espresso::quantized_weights_helper *this)
{
  if (*((void *)this + 4) || *((void *)this + 6) || *((void *)this + 8) || !*((unsigned char *)this + 164)) {
    return 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  v4[0] = *((void *)this + 12);
  v4[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v4);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return is_qbias_zero;
}

void sub_19287871C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::cast_int8_linear_to_uint8_linear(Espresso::quantized_weights_helper *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (*(void *)this
    && !*((void *)this + 4)
    && !*((void *)this + 6)
    && !*((void *)this + 8)
    && *((void *)this + 10)
    && *((_DWORD *)this + 39) == 8)
  {
    uint64_t v4 = 136;
    if (!*((_DWORD *)this + 36)) {
      uint64_t v4 = 140;
    }
    uint64_t v5 = *(unsigned int *)((char *)this + v4);
    int v6 = *(_DWORD *)(*(void *)this + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v28, v6, 1, 1, 1);
    uint64_t v7 = v28;
    uint64_t v8 = *(void *)(v28 + 16);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v26, v5, 1, 1, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v24, v5, 1, 1, 1);
    if ((int)v5 >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *((void *)this + 10);
      uint64_t v11 = *((void *)this + 12);
      uint64_t v12 = *(void *)(v26 + 16);
      uint64_t v13 = *(void *)(v24 + 16);
      do
      {
        if (v10)
        {
          double v14 = *(float *)(*(void *)(v10 + 16) + v9);
          if (!v11) {
            goto LABEL_16;
          }
        }
        else
        {
          double v14 = 1.0;
          if (!v11)
          {
LABEL_16:
            double v15 = 0.0;
            goto LABEL_17;
          }
        }
        double v15 = *(float *)(*(void *)(v11 + 16) + v9);
LABEL_17:
        float v16 = v15 + v14 * -128.0;
        *(float *)(v12 + v9) = v16;
        float v17 = v14;
        *(float *)(v13 + v9) = v17;
        v9 += 4;
      }
      while (4 * v5 != v9);
    }
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(unsigned char *)(v8 + i) = *(unsigned char *)(*(void *)(*(void *)this + 16) + i) ^ 0x80;
    }
    uint64_t v20 = v24;
    unsigned int v19 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v20;
    *(void *)(a2 + 24) = v19;
    uint64_t v21 = v26;
    unint64_t v22 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(a2 + 32) = v21;
    *(void *)(a2 + 40) = v22;
    unsigned int v23 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v23;
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
  }
}

void sub_192878934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data(v14);
  _Unwind_Resume(a1);
}

uint64_t Espresso::quantized_weights_helper::number_of_weights_bits(Espresso::quantized_weights_helper *this)
{
  return *((unsigned int *)this + 39);
}

void Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(Espresso::quantized_weights_helper *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (*(void *)this
    && !*((void *)this + 4)
    && !*((void *)this + 6)
    && !*((void *)this + 8)
    && *((void *)this + 10)
    && *((_DWORD *)this + 39) == 8)
  {
    uint64_t v8 = 136;
    if (!*((_DWORD *)this + 36)) {
      uint64_t v8 = 140;
    }
    uint64_t v9 = *(unsigned int *)((char *)this + v8);
    int v10 = *(_DWORD *)(*(void *)this + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v33, v10, 1, 1, 1);
    uint64_t v11 = v33;
    uint64_t v12 = *(void *)(v33 + 16);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v31, v9, 1, 1, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v29, v9, 1, 1, 1);
    if ((int)v9 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *((void *)this + 10);
      uint64_t v15 = *((void *)this + 12);
      uint64_t v16 = *(void *)(v31 + 16);
      uint64_t v17 = *(void *)(v29 + 16);
      do
      {
        if (v14)
        {
          double v18 = *(float *)(*(void *)(v14 + 16) + v13);
          if (!v15) {
            goto LABEL_16;
          }
        }
        else
        {
          double v18 = 1.0;
          if (!v15)
          {
LABEL_16:
            double v19 = 0.0;
            goto LABEL_17;
          }
        }
        double v19 = *(float *)(*(void *)(v15 + 16) + v13);
LABEL_17:
        float v20 = v19 + v18 * 128.0;
        if (a2 | a3) {
          float v20 = 0.0;
        }
        *(float *)(v16 + v13) = v20;
        float v21 = v18;
        *(float *)(v17 + v13) = v21;
        v13 += 4;
      }
      while (4 * v9 != v13);
    }
    if (v10)
    {
      for (uint64_t i = 0; i != v10; *(unsigned char *)(v12 + i++) = v23)
      {
        char v23 = *(unsigned char *)(*(void *)(*(void *)this + 16) + i);
        if (!a2) {
          v23 ^= 0x80u;
        }
      }
    }
    uint64_t v25 = v29;
    uint64_t v24 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v25;
    *(void *)(a4 + 24) = v24;
    uint64_t v26 = v31;
    char v27 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(a4 + 32) = v26;
    *(void *)(a4 + 40) = v27;
    uint64_t v28 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)a4 = v11;
    *(void *)(a4 + 8) = v28;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
  }
}

void sub_192878BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data(v14);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long &,unsigned long &,int &>(int a1, int a2, int a3, int a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("Mismatching size %d != %d, n_elements=%d n_bits=%d", a1, a2, a3, a4);
}

char *Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<unsigned char,1>(void *a1, uint64_t a2, const void *a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  *a1 = 0;
  a1[1] = 0;
  if (!*(unsigned char *)(a2 + 73)) {
    goto LABEL_5;
  }
  if (!a5 || (a8 & 1) != 0)
  {
    if (!a5) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (char *)operator new(0x58uLL);
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
    *(void *)uint64_t result = &unk_1EE389A70;
    *((void *)result + 3) = &unk_1EE36BF70;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *((_DWORD *)result + 8) = a7;
    *((void *)result + 5) = a3;
    result[48] = 0;
    *a1 = result + 24;
    a1[1] = result;
    if (a6)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a6 + 8), 1uLL, memory_order_relaxed);
      *((void *)result + 7) = a5;
      *((void *)result + 8) = a6;
    }
    else
    {
      *((void *)result + 7) = a5;
      *((void *)result + 8) = 0;
    }
    return result;
  }
  if (*(unsigned char *)(a2 + 123)) {
    goto LABEL_10;
  }
LABEL_5:
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v30, a7, 1, 1, 1);
  std::string::size_type v14 = v30.__r_.__value_.__r.__words[0];
  *(_OWORD *)a1 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
  if (*(_DWORD *)(v14 + 8) != a4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, a4);
    double v18 = std::string::insert(&v27, 0, "Unexpected size s=");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    float v20 = std::string::append(&v28, "/blob=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v26, *(int *)(v14 + 8));
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v22 = &v26;
    }
    else {
      unint64_t v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v29, (const std::string::value_type *)v22, size);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v30);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v15 = *(void **)(v14 + 16);

  return (char *)memcpy(v15, a3, a4);
}

void sub_192878E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v36 & 1) == 0)
    {
LABEL_14:
      if (a10) {
        nitro::nitro_function::nitro_function(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v35);
  goto LABEL_14;
}

char *Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<signed char,1>(void *a1, uint64_t a2, const void *a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  *a1 = 0;
  a1[1] = 0;
  if (!*(unsigned char *)(a2 + 73)) {
    goto LABEL_5;
  }
  if (!a5 || (a8 & 1) != 0)
  {
    if (!a5) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (char *)operator new(0x58uLL);
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
    *(void *)uint64_t result = &unk_1EE389840;
    *((void *)result + 3) = &unk_1EE36BE30;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *((_DWORD *)result + 8) = a7;
    *((void *)result + 5) = a3;
    result[48] = 0;
    *a1 = result + 24;
    a1[1] = result;
    if (a6)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a6 + 8), 1uLL, memory_order_relaxed);
      *((void *)result + 7) = a5;
      *((void *)result + 8) = a6;
    }
    else
    {
      *((void *)result + 7) = a5;
      *((void *)result + 8) = 0;
    }
    return result;
  }
  if (*(unsigned char *)(a2 + 123)) {
    goto LABEL_10;
  }
LABEL_5:
  std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v30, a7, 1, 1, 1);
  std::string::size_type v14 = v30.__r_.__value_.__r.__words[0];
  *(_OWORD *)a1 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
  if (*(_DWORD *)(v14 + 8) != a4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, a4);
    double v18 = std::string::insert(&v27, 0, "Unexpected size s=");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    float v20 = std::string::append(&v28, "/blob=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v26, *(int *)(v14 + 8));
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v22 = &v26;
    }
    else {
      unint64_t v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v29, (const std::string::value_type *)v22, size);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v30);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v15 = *(void **)(v14 + 16);

  return (char *)memcpy(v15, a3, a4);
}

void sub_192879184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v36 & 1) == 0)
    {
LABEL_14:
      if (a10) {
        nitro::nitro_function::nitro_function(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v35);
  goto LABEL_14;
}

BOOL Espresso::quantized_weights_helper::is_linear_quantization(Espresso::quantized_weights_helper *this)
{
  return !*((void *)this + 4) && !*((void *)this + 6) && !*((void *)this + 8) && *((void *)this + 10) != 0;
}

void Espresso::quantized_weights_helper::get_per_ch_ranges_uint8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a4, 2 * a3, 1, 1, 1);
  if (a3 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a1;
    uint64_t v10 = *a2;
    uint64_t v11 = *(void *)(*a4 + 16);
    do
    {
      if (v9)
      {
        float v12 = *(float *)(*(void *)(v9 + 16) + v8);
        if (!v10) {
          goto LABEL_7;
        }
      }
      else
      {
        float v12 = 1.0;
        if (!v10)
        {
LABEL_7:
          float v13 = 0.0;
          goto LABEL_8;
        }
      }
      float v13 = *(float *)(*(void *)(v10 + 16) + v8);
LABEL_8:
      float v14 = v13 + (float)(v12 * 255.0);
      if (v13 <= v14) {
        float v15 = v13;
      }
      else {
        float v15 = v14;
      }
      if (v13 > v14) {
        float v14 = v13;
      }
      *(float *)(v11 + v8) = v15;
      *(float *)(v11 + 4 * a3 + v8) = v14;
      v8 += 4;
    }
    while (4 * a3 != v8);
  }
}

void Espresso::quantized_weights_helper::get_per_ch_ranges(Espresso::quantized_weights_helper *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 4) || *((void *)this + 6) || *((void *)this + 8) || !*((void *)this + 10)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid linear quantization");
  }
  uint64_t v4 = 140;
  if (*((_DWORD *)this + 36) == 1) {
    uint64_t v4 = 136;
  }
  uint64_t v5 = *(unsigned int *)((char *)this + v4);
  int v6 = *((_DWORD *)this + 40);
  if (v6 <= 0) {
    int v6 = *((_DWORD *)this + 39);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, 2 * v5, 1, 1, 1);
  float v7 = (float)((2 << (v6 - 1)) - 1);
  if (!*((unsigned char *)this + 164))
  {
    if ((int)v5 < 1) {
      return;
    }
    uint64_t v18 = 0;
    uint64_t v19 = *((void *)this + 10);
    uint64_t v20 = *((void *)this + 12);
    uint64_t v21 = *(void *)(*a2 + 16);
    while (1)
    {
      if (v19)
      {
        float v22 = *(float *)(*(void *)(v19 + 16) + v18);
        if (!v20) {
          goto LABEL_32;
        }
      }
      else
      {
        float v22 = 1.0;
        if (!v20)
        {
LABEL_32:
          float v23 = 0.0;
          goto LABEL_33;
        }
      }
      float v23 = *(float *)(*(void *)(v20 + 16) + v18);
LABEL_33:
      float v24 = v23 + (float)(v22 * v7);
      if (v23 <= v24) {
        float v25 = v23;
      }
      else {
        float v25 = v24;
      }
      if (v23 > v24) {
        float v24 = v23;
      }
      *(float *)(v21 + v18) = v25;
      *(float *)(v21 + 4 * v5 + v18) = v24;
      v18 += 4;
      if (4 * v5 == v18) {
        return;
      }
    }
  }
  float v8 = (float)(v7 + -1.0) * 0.5;
  if (v6 <= 1) {
    float v8 = 1.0;
  }
  if ((int)v5 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 10);
    uint64_t v11 = *((void *)this + 12);
    uint64_t v12 = *(void *)(*a2 + 16);
    do
    {
      if (v10)
      {
        float v13 = *(float *)(*(void *)(v10 + 16) + v9);
        if (!v11) {
          goto LABEL_18;
        }
      }
      else
      {
        float v13 = 1.0;
        if (!v11)
        {
LABEL_18:
          float v14 = 0.0;
          goto LABEL_19;
        }
      }
      float v14 = *(float *)(*(void *)(v11 + 16) + v9);
LABEL_19:
      float v15 = v14 + (float)((float)-v8 * v13);
      float v16 = v14 + (float)(v8 * v13);
      if (v15 <= v16) {
        float v17 = v15;
      }
      else {
        float v17 = v16;
      }
      if (v15 > v16) {
        float v16 = v15;
      }
      *(float *)(v12 + v9) = v17;
      *(float *)(v12 + 4 * v5 + v9) = v16;
      v9 += 4;
    }
    while (4 * v5 != v9);
  }
}

BOOL Espresso::weight_key_supported_by_conv_quantized_weights_helper(unsigned char *a1, int a2)
{
  int v2 = a1[23];
  int v3 = (char)v2;
  int v4 = 0;
  if (a2)
  {
    if (((char)v2 & 0x80000000) == 0)
    {
      uint64_t v5 = a1;
      switch(a1[23])
      {
        case 2:
          int v6 = 0;
          int v4 = *(unsigned __int16 *)a1 == 14423;
          int v3 = 2;
          goto LABEL_66;
        case 4:
          int v4 = *(_DWORD *)a1 == 947216215;
          int v8 = *(_DWORD *)a1;
          goto LABEL_58;
        case 9:
          int v6 = 0;
          int v4 = *(void *)a1 == 0x616D6E696D5F3857 && a1[8] == 120;
          int v3 = 9;
          goto LABEL_66;
        case 0xA:
          goto LABEL_19;
        default:
          goto LABEL_26;
      }
    }
    uint64_t v7 = *((void *)a1 + 1);
    switch(v7)
    {
      case 2:
        int v4 = **(unsigned __int16 **)a1 == 14423;
        uint64_t v7 = 2;
        goto LABEL_76;
      case 4:
        int v4 = **(_DWORD **)a1 == 947216215;
        goto LABEL_60;
      case 9:
        int v4 = (**(void **)a1 ^ 0x616D6E696D5F3857 | *(unsigned __int8 *)(*(void *)a1 + 8) ^ 0x78) == 0;
        if (!(**(void **)a1 ^ 0x616D6E696D5F3857 | *(unsigned __int8 *)(*(void *)a1 + 8) ^ 0x78)) {
          uint64_t v7 = 9;
        }
        goto LABEL_76;
      case 10:
        uint64_t v5 = *(unsigned char **)a1;
LABEL_19:
        uint64_t v10 = *(void *)v5;
        int v11 = *((unsigned __int16 *)v5 + 4);
        int v4 = v10 == 0x6E61725F38755F71 && v11 == 25959;
        break;
      default:
        goto LABEL_36;
    }
  }
  if ((char)v2 < 0)
  {
    uint64_t v7 = *((void *)a1 + 1);
LABEL_36:
    if (v7 > 11)
    {
      if (v7 == 12)
      {
        float v22 = *(unsigned char **)a1;
        int v21 = 1;
LABEL_68:
        uint64_t v23 = *(void *)v22;
        int v24 = *((_DWORD *)v22 + 2);
        if (v23 == 0x755F6F745F74756CLL && v24 == 947154537) {
          int v4 = 1;
        }
        if (!v21) {
          goto LABEL_81;
        }
        uint64_t v7 = *((void *)a1 + 1);
        goto LABEL_76;
      }
      if (v7 == 14)
      {
        uint64_t v14 = *(void *)(*(void *)a1 + 6);
        BOOL v15 = **(void **)a1 == 0x665F6F745F74756CLL;
        uint64_t v16 = 0x323374616F6C665FLL;
LABEL_51:
        if (v15 && v14 == v16)
        {
          int v19 = 0;
          int v4 = 1;
          return (v4 | v19) != 0;
        }
      }
    }
    else
    {
      if (v7 == 4)
      {
LABEL_60:
        a1 = *(unsigned char **)a1;
        if (*a1 == 87) {
          return (char)a1[3] >= 49 && a1[3] <= 0x38u && ((a1[2] - 83) & 0xFD) == 0;
        }
LABEL_86:
        int v19 = 0;
        return (v4 | v19) != 0;
      }
      if (v7 == 11)
      {
        uint64_t v14 = *(void *)(*(void *)a1 + 3);
        BOOL v15 = **(void **)a1 == 0x695F6F745F74756CLL;
        uint64_t v16 = 0x38746E695F6F745FLL;
        goto LABEL_51;
      }
    }
LABEL_76:
    if (v7 == 12)
    {
      a1 = *(unsigned char **)a1;
      goto LABEL_88;
    }
    if (v7 == 13)
    {
      BOOL v26 = **(void **)a1 == 0x715F68635F726570 && *(void *)(*(void *)a1 + 5) == 0x656C616373715F68;
      goto LABEL_91;
    }
    goto LABEL_86;
  }
LABEL_26:
  if (a1[23] > 0xBu)
  {
    if (v2 != 12)
    {
      if (v2 != 14) {
        goto LABEL_65;
      }
      BOOL v17 = *(void *)a1 == 0x665F6F745F74756CLL && *(void *)(a1 + 6) == 0x323374616F6C665FLL;
      int v3 = 14;
      if (v17)
      {
LABEL_47:
        int v6 = 1;
LABEL_66:
        v4 |= v6;
      }
LABEL_81:
      if (v3 != 12)
      {
        if (v3 == 13)
        {
          BOOL v26 = *(void *)a1 == 0x715F68635F726570 && *(void *)(a1 + 5) == 0x656C616373715F68;
LABEL_91:
          int v19 = v26;
          return (v4 | v19) != 0;
        }
        goto LABEL_86;
      }
LABEL_88:
      BOOL v26 = *(void *)a1 == 0x715F68635F726570 && *((_DWORD *)a1 + 2) == 1935763810;
      goto LABEL_91;
    }
    int v21 = 0;
    float v22 = a1;
    goto LABEL_68;
  }
  if (v2 != 4)
  {
    if (v2 == 11)
    {
      BOOL v13 = *(void *)a1 == 0x695F6F745F74756CLL && *(void *)(a1 + 3) == 0x38746E695F6F745FLL;
      int v3 = 11;
      if (!v13) {
        goto LABEL_81;
      }
      goto LABEL_47;
    }
LABEL_65:
    int v6 = 0;
    goto LABEL_66;
  }
  int v8 = *a1;
LABEL_58:
  if (v8 != 87)
  {
    int v3 = 4;
    goto LABEL_81;
  }
  return (char)a1[3] >= 49 && a1[3] <= 0x38u && ((a1[2] - 83) & 0xFD) == 0;
}

void Espresso::set_conv_quantized_weight_helper(__n128 a1, double a2, int32x2_t a3, uint64_t a4, unsigned __int8 **a5, char *a6, unint64_t a7, uint64_t *a8, uint64_t *a9, long long *a10, uint64_t *a11, int a12, char a13)
{
  if (*((char *)a5 + 23) < 0)
  {
    switch((unint64_t)a5[1])
    {
      case 1uLL:
        int v21 = **a5;
LABEL_6:
        if (v21 != 87 && v21 != 98) {
          goto LABEL_32;
        }
        break;
      case 4uLL:
        int v22 = *(_DWORD *)*a5;
LABEL_21:
        if (v22 != 947216215 || (a13 & 1) != 0) {
          goto LABEL_32;
        }
        break;
      case 5uLL:
        if ((*(_DWORD *)*a5 != 828792663 || (*a5)[4] != 54) && (*(_DWORD *)*a5 != 828792674 || (*a5)[4] != 54)) {
          goto LABEL_32;
        }
        break;
      case 0xAuLL:
        uint64_t v20 = (int *)*a5;
LABEL_36:
        if (*(void *)v20 ^ 0x6E61725F38755F71 | *((unsigned __int16 *)v20 + 4) ^ 0x6567) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = a13 == 0;
        }
        if (!v32) {
          goto LABEL_32;
        }
        break;
      default:
LABEL_32:
        uint64_t v27 = *a9;
        if (!*a9)
        {
          std::string v28 = (char *)operator new(0xD0uLL);
          *((void *)v28 + 1) = 0;
          *((void *)v28 + 2) = 0;
          *(void *)std::string v28 = &unk_1EE388110;
          uint64_t v27 = (uint64_t)(v28 + 24);
          uint64_t v30 = *a11;
          std::string v29 = (std::__shared_weak_count *)a11[1];
          if (v29)
          {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v31 = *a10;
            a2 = 0.0;
            *(_OWORD *)uint64_t v27 = 0u;
            *(_OWORD *)(v28 + 40) = 0u;
            *(_OWORD *)(v28 + 56) = 0u;
            *(_OWORD *)(v28 + 72) = 0u;
            *(_OWORD *)(v28 + 88) = 0u;
            *(_OWORD *)(v28 + std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table((uint64_t)this + 104) = 0u;
            *(_OWORD *)(v28 + 120) = 0u;
            *((void *)v28 + 17) = v30;
            *((void *)v28 + 18) = v29;
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            long long v31 = *a10;
            a2 = 0.0;
            *(_OWORD *)uint64_t v27 = 0u;
            *(_OWORD *)(v28 + 40) = 0u;
            *(_OWORD *)(v28 + 56) = 0u;
            *(_OWORD *)(v28 + 72) = 0u;
            *(_OWORD *)(v28 + 88) = 0u;
            *(_OWORD *)(v28 + std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table((uint64_t)this + 104) = 0u;
            *(_OWORD *)(v28 + 120) = 0u;
            *((void *)v28 + 17) = v30;
            *((void *)v28 + 18) = 0;
          }
          *(_OWORD *)(v28 + 152) = v31;
          *((_DWORD *)v28 + 42) = a12;
          *((_DWORD *)v28 + 43) = 1;
          v28[176] = 0;
          *((void *)v28 + 24) = 0;
          *((void *)v28 + 25) = 0;
          *(void *)(v28 + 180) = 0;
          v28[188] = 0;
          if (v29) {
            nitro::nitro_function::nitro_function(v29);
          }
          a1.n128_u64[0] = (unint64_t)(v28 + 24);
          a1.n128_u64[1] = (unint64_t)v28;
          uint64_t v33 = (std::__shared_weak_count *)a9[1];
          *(__n128 *)a9 = a1;
          if (v33)
          {
            nitro::nitro_function::nitro_function(v33);
            uint64_t v27 = *a9;
          }
          *(unsigned char *)(v27 + 152) = a13;
        }
        Espresso::quantized_weights_helper::__set_weight_raw_blob(v27, a1.n128_f64[0], a2, a3, (uint64_t)a5, (uint64_t)a5, a6, a7, a8);
        break;
    }
  }
  else
  {
    uint64_t v20 = (int *)a5;
    switch(*((unsigned char *)a5 + 23))
    {
      case 1:
        int v21 = *(unsigned __int8 *)a5;
        goto LABEL_6;
      case 4:
        int v22 = *(_DWORD *)a5;
        goto LABEL_21;
      case 5:
        if ((*(_DWORD *)a5 != 828792663 || *((unsigned char *)a5 + 4) != 54)
          && (*(_DWORD *)a5 != 828792674 || *((unsigned char *)a5 + 4) != 54))
        {
          goto LABEL_32;
        }
        break;
      case 0xA:
        goto LABEL_36;
      default:
        goto LABEL_32;
    }
  }
}

void sub_192879D20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::analysis_result::~analysis_result(Espresso::analysis_result *this)
{
}

void Espresso::pass_params_base::~pass_params_base(Espresso::pass_params_base *this)
{
}

void Espresso::net_pass::~net_pass(Espresso::net_pass *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t Espresso::run_custom_pass_on_network(uint64_t *a1, uint64_t a2)
{
  if (*((char *)a1 + 23) >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = (uint64_t *)*a1;
  }
  objc_msgSend(NSString, "stringWithFormat:", @"EspressoPass_%s", v4);
  uint64_t v5 = (NSString *)objc_claimAutoreleasedReturnValue();
  Class v6 = NSClassFromString(v5);

  if (!v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = (uint64_t *)*a1;
    }
    uint64_t v12 = v10;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Pass not found %s", &v12);
  }
  uint64_t v7 = objc_opt_new();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v11 = a1;
    }
    else {
      int v11 = (uint64_t *)*a1;
    }
    uint64_t v12 = v11;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Invalid pass %s", &v12);
  }
  uint64_t v8 = [v7 runOnNetwork:a2];

  return v8;
}

void sub_192879EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::transform_network_inplace(uint64_t a1)
{
  Espresso::net::net((Espresso::net *)v3);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)&v4);
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__move_assign((uint64_t)&v6, (uint64_t *)(a1 + 56));
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__move_assign((uint64_t)&v7, (uint64_t *)(a1 + 96));
  Espresso::net::_tag_inputs_and_outputs((Espresso::net *)v3);
  uint64_t v2 = a1;
  operator new();
}

void sub_19287A108()
{
}

void sub_19287A138()
{
}

void sub_19287A148()
{
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

uint64_t std::__shared_ptr_pointer<Espresso::net *,noop_deleter,std::allocator<Espresso::net>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"12noop_deleter")) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<Espresso::net *,noop_deleter,std::allocator<Espresso::net>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::MPSGraphEngine::Kernels::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3[4] - a3[3];
  if (v5 == 64)
  {
    long long v36 = xmmword_192DD7308;
    long long v37 = unk_192DD7318;
    long long v38 = xmmword_192DD7328;
    long long v39 = unk_192DD7338;
    *(_OWORD *)unint64_t v35 = xmmword_192DD72E8;
    *(_OWORD *)&v35[16] = unk_192DD72F8;
    int v40 = 25;
    std::unordered_set<Espresso::ELEMENTWISE_OPERATION>::unordered_set((uint64_t)&__p, (unsigned int *)v35, 25);
    *(_OWORD *)unint64_t v35 = xmmword_192DD734C;
    *(_OWORD *)&v35[16] = unk_192DD735C;
    long long v36 = xmmword_192DD736C;
    long long v37 = unk_192DD737C;
    *(void *)&long long v38 = 0x7100000021;
    std::unordered_set<Espresso::ELEMENTWISE_OPERATION>::unordered_set((uint64_t)&v31, (unsigned int *)v35, 18);
    *(_DWORD *)unint64_t v35 = 101;
    std::unordered_set<Espresso::ELEMENTWISE_OPERATION>::unordered_set((uint64_t)&v29, (unsigned int *)v35, 1);
    unsigned int v7 = *(_DWORD *)(a1 + 280);
    long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if (std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, v7)|| std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_, v7)|| std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v29, v30, v7))
    {
      if (std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>(v8, *((unint64_t *)&v8 + 1), v7)&& (uint64_t v9 = a3[1] - *a3, v9 != 64))
      {
        uint64_t v16 = *(int64x2_t **)a2;
        uint64_t v12 = *(void *)(a2 + 8);
        v25[0] = v16;
        v25[1] = (int64x2_t *)v12;
        if (v12)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
          uint64_t v9 = a3[1] - *a3;
        }
        std::to_string(&v26, v9 >> 6);
        BOOL v17 = std::string::insert(&v26, 0, "[Dispatch::MPSGraph::elementwise_kernel] Unsupported: unary op accepts 1 input, received ");
        std::string v27 = *v17;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v35, (long long *)&v27, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v25, (Espresso::base_kernel::validate_for_engine_warning_t *)v35);
      }
      else if (std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_, v7)&& (uint64_t v10 = a3[1] - *a3, (unint64_t)v10 >= 0x81))
      {
        unint64_t v11 = *(int64x2_t **)a2;
        uint64_t v12 = *(void *)(a2 + 8);
        v24[0] = v11;
        v24[1] = (int64x2_t *)v12;
        if (v12)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
          uint64_t v10 = a3[1] - *a3;
        }
        std::to_string(&v26, v10 >> 6);
        BOOL v13 = std::string::insert(&v26, 0, "[Dispatch::MPSGraph::elementwise_kernel] Unsupported: binary op accepts 1 or 2 inputs, received ");
        std::string v27 = *v13;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v35, (long long *)&v27, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v24, (Espresso::base_kernel::validate_for_engine_warning_t *)v35);
      }
      else
      {
        if (!std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v29, v30, v7)|| (uint64_t v15 = a3[1] - *a3, v15 == 192))
        {
          uint64_t v12 = 1;
LABEL_46:
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v29);
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v31);
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
          return v12;
        }
        uint64_t v18 = *(int64x2_t **)a2;
        uint64_t v12 = *(void *)(a2 + 8);
        v23[0] = v18;
        v23[1] = (int64x2_t *)v12;
        if (v12)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
          uint64_t v15 = a3[1] - *a3;
        }
        std::to_string(&v26, v15 >> 6);
        int v19 = std::string::insert(&v26, 0, "[Dispatch::MPSGraph::elementwise_kernel] Unsupported: ternary op accepts 3 inputs, received ");
        std::string v27 = *v19;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v35, (long long *)&v27, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v23, (Espresso::base_kernel::validate_for_engine_warning_t *)v35);
      }
    }
    else
    {
      uint64_t v20 = *(int64x2_t **)a2;
      uint64_t v12 = *(void *)(a2 + 8);
      v28[0] = v20;
      v28[1] = (int64x2_t *)v12;
      if (v12)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        unsigned int v7 = *(_DWORD *)(a1 + 280);
      }
      std::to_string(&v26, v7);
      int v21 = std::string::insert(&v26, 0, "[Dispatch::MPSGraph::elementwise_kernel] Unsupported: elementwise operation ");
      std::string v27 = *v21;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v35, (long long *)&v27, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v28, (Espresso::base_kernel::validate_for_engine_warning_t *)v35);
    }
    if ((void)v39) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v39);
    }
    int v34 = (void **)&v37;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v34);
    int v34 = (void **)&v35[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v34);
    if ((v35[23] & 0x80000000) != 0) {
      operator delete(*(void **)v35);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (v12)
    {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
      uint64_t v12 = 0;
    }
    goto LABEL_46;
  }
  uint64_t v12 = *(void *)(a2 + 8);
  v33[0] = *(int64x2_t **)a2;
  v33[1] = (int64x2_t *)v12;
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = a3[4] - a3[3];
  }
  std::to_string(&v31, v5 >> 6);
  uint64_t v14 = std::string::insert(&v31, 0, "[Dispatch::MPSGraph::elementwise_kernel] unsupported: number of outputs must be 1, received ");
  std::string __p = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v35, (long long *)&__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v33, (Espresso::base_kernel::validate_for_engine_warning_t *)v35);
  if ((void)v39) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v39);
  }
  std::string v29 = (void **)&v37;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v29);
  std::string v29 = (void **)&v35[24];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v29);
  if ((v35[23] & 0x80000000) != 0) {
    operator delete(*(void **)v35);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v12)
  {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
    return 0;
  }
  return v12;
}

void sub_19287A814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v50 - 192));
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a31);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a36);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_19287A918()
{
}

uint64_t std::unordered_set<Espresso::ELEMENTWISE_OPERATION>::unordered_set(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__emplace_unique_key_args<Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION const&>(a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_19287A984(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::elementwise_kernel::~elementwise_kernel(Espresso::MPSGraphEngine::Kernels::elementwise_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::MPSGraphEngine::Kernels::fill_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  if (*(unsigned char *)(a1 + 312))
  {
    uint64_t v4 = a2[1];
    v14[0] = *a2;
    v14[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "[Dispatch::MPSGraph::fill_kernel] unsupported: dynamic fill");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v8, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else if (*a3 == a3[1])
  {
    if (*(_DWORD *)(a1 + 308)) {
      return 1;
    }
    uint64_t v4 = a2[1];
    v6[0] = *a2;
    v6[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "[Dispatch::MPSGraph::fill_kernel] unsupported: nd_mode is false");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v8, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v6, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    uint64_t v4 = a2[1];
    v7[0] = *a2;
    v7[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "[Dispatch::MPSGraph::fill_kernel] unsupported: invalid number of inputs ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v8, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v7, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  uint64_t v15 = (void **)&v12;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v15 = (void **)&v11;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v4) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
  }
  return 0;
}

void sub_19287AB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::fill_kernel::~fill_kernel(Espresso::MPSGraphEngine::Kernels::fill_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::MPSGraphEngine::Kernels::einsum_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v4 = (_DWORD *)*a3;
  uint64_t v5 = a3[1] - *a3;
  if (v5 != 128)
  {
    uint64_t v14 = a2[1];
    v26[0] = *a2;
    v26[1] = v14;
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v5 = a3[1] - *a3;
    }
    std::to_string(&v20, v5 >> 6);
    uint64_t v15 = std::string::insert(&v20, 0, "[Dispatch::MPSGraph::einsum_kernel] unsupported: number of inputs must be 2, received ");
    std::string v21 = *v15;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v21, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v26, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_30;
  }
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4] - v6;
  if (v7 != 64)
  {
    uint64_t v14 = a2[1];
    v19[0] = *a2;
    v19[1] = v14;
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v7 = a3[4] - a3[3];
    }
    std::to_string(&v20, v7 >> 6);
    uint64_t v16 = std::string::insert(&v20, 0, "[Dispatch::MPSGraph::einsum_kernel] unsupported: number of outputs must be 1, received ");
    std::string v21 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v21, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v19, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_30:
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    std::string v27 = (void **)v24;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v27);
    std::string v27 = (void **)v23;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
    BOOL v17 = (void *)v20.__r_.__value_.__r.__words[0];
    goto LABEL_47;
  }
  int v8 = v4[5];
  int v9 = v8;
  if (v8 == -1)
  {
    if (v4[4] == 1) {
      int v9 = 4;
    }
    else {
      int v9 = 5;
    }
  }
  int v10 = v4[21];
  if (v10 == -1)
  {
    if (v4[20] == 1) {
      int v10 = 4;
    }
    else {
      int v10 = 5;
    }
  }
  if (v9 == v10)
  {
    int v11 = v4[5];
    if (v8 == -1)
    {
      if (v4[4] == 1) {
        int v11 = 4;
      }
      else {
        int v11 = 5;
      }
    }
    int v12 = *(_DWORD *)(v6 + 20);
    if (v12 == -1)
    {
      if (*(_DWORD *)(v6 + 16) == 1) {
        int v12 = 4;
      }
      else {
        int v12 = 5;
      }
    }
    if (v11 == v12)
    {
      if (v8 == -1)
      {
        if (v4[4] == 1) {
          return 1;
        }
      }
      else if ((v8 - 3) < 2)
      {
        return 1;
      }
    }
  }
  uint64_t v14 = a2[1];
  v18[0] = *a2;
  v18[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "[Dispatch::MPSGraph::einsum_kernel] unsupported: tensors have mismatching ranks or ranks other than 3 or 4.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v21, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v18, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v17 = (void *)v21.__r_.__value_.__r.__words[0];
LABEL_47:
    operator delete(v17);
  }
LABEL_48:
  if (v14) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14);
  }
  return 0;
}

void sub_19287AF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a26);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::einsum_kernel::~einsum_kernel(Espresso::MPSGraphEngine::Kernels::einsum_kernel *this)
{
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void sub_19287B1A0(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_remove_squeeze::run_on_network(Espresso::pass_remove_squeeze *this, Espresso::net *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "initial");
  v6[3] = 0;
  Espresso::net::pprint((uint64_t)a2, (uint64_t)__p, (uint64_t)v6);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v6);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  atomic_ullong v5 = 0;
  Espresso::zephyr::es_function_t::es_function_t((Espresso::zephyr::es_function_t *)__p, &v5, a2);
}

void sub_19287B86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](&a46);
  if (*(char *)(v50 - 153) < 0) {
    operator delete(*(void **)(v50 - 176));
  }
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&__p);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_squeeze_kernelENS_26generic_expand_dims_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  atomic_ullong v5 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DBE8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DBE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso19pass_remove_squeeze14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)a2[1];
  uint64_t v5 = *a3;
  uint64_t v6 = (void *)a3[1];
  uint64_t v7 = (*(uint64_t (**)(void *))(*v4 + 320))(v4);
  int v8 = *(_DWORD *)v7;
  int v9 = *(_DWORD *)(v7 + 4);
  char v10 = *(unsigned char *)(v7 + 136);
  int v11 = (Espresso *)(*(uint64_t (**)(void *))(*v6 + 320))(v6);
  BOOL v15 = v9 <= 0 && (v10 & 1) == 0 && *((_DWORD *)v11 + 1) <= 0 && *(_DWORD *)v11 == v8;
  if (!v15 || v4[1] != v6[1]) {
    return 0;
  }
  BOOL v17 = Espresso::espresso_os_log_subsystem(v11, v12);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    float v25 = (void *)(v3 + 144);
    if (*(char *)(v3 + 167) < 0) {
      float v25 = (void *)*v25;
    }
    std::string v26 = (void *)(v5 + 144);
    if (*(char *)(v5 + 167) < 0) {
      std::string v26 = (void *)*v26;
    }
    int v27 = 136315394;
    std::string v28 = v25;
    __int16 v29 = 2080;
    unint64_t v30 = v26;
    _os_log_debug_impl(&dword_1920CB000, v17, OS_LOG_TYPE_DEBUG, "pass_remove_squeeze: fusing at %s %s\n", (uint8_t *)&v27, 0x16u);
  }

  uint64_t v18 = *(uint64_t **)(v5 + 96);
  if (*(uint64_t **)(v5 + 104) == v18) {
LABEL_28:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  uint64_t v19 = *v18;
  std::string v20 = *(Espresso::zephyr::node_t ***)(v19 + 56);
  std::string v21 = *(Espresso::zephyr::node_t ***)(v19 + 64);
  while (v20 != v21)
  {
    int v22 = *(Espresso::zephyr::value_t ***)(v5 + 96);
    if (*(Espresso::zephyr::value_t ***)(v5 + 104) == v22) {
      goto LABEL_28;
    }
    uint64_t v23 = *(Espresso::zephyr::value_t ***)(v3 + 120);
    if (*(Espresso::zephyr::value_t ***)(v3 + 128) == v23) {
      goto LABEL_28;
    }
    int v24 = *v20;
    v20 += 2;
    Espresso::zephyr::node_t::replace_input_with(v24, *v22, *v23);
  }
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v3);
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v5);
  return 1;
}

uint64_t std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C640;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37C640;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::~__func()
{
}

void Espresso::pass_remove_squeeze::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_remove_squeeze::~pass_remove_squeeze(Espresso::pass_remove_squeeze *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_remove_squeeze>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_remove_squeeze>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_remove_squeeze>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::dispatch_error_fallback_at_c_level::~dispatch_error_fallback_at_c_level(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::dispatch_error_use_mpsgraph::~dispatch_error_use_mpsgraph(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::dispatch_error_use_mpsgraph_compiler::~dispatch_error_use_mpsgraph_compiler(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::dispatch_error_use_mps_buffers::~dispatch_error_use_mps_buffers(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::dispatch_error_use_cpu_script::~dispatch_error_use_cpu_script(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cpu_context_transfer_algo_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388880;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cpu_context_transfer_algo_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void to_fallback_if_bouncing_too_much(uint64_t a1, const char *a2)
{
  int v2 = (int)a2;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = *(void *)(v4 + 56);
  unint64_t v7 = (v6 - v5) >> 2;
  if (v6 == v5)
  {
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    if (v7 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v7;
    }
    do
    {
      if (v8) {
        int v11 = *(_DWORD *)(v5 + 4 * (v8 - 1));
      }
      else {
        int v11 = 0;
      }
      v9 += (v11 != 0) ^ (*(_DWORD *)(v5 + 4 * v8++) != 0);
    }
    while (v10 != v8);
  }
  float v12 = (float)v9 / (float)v7;
  BOOL v14 = *(float *)(a1 + 48) < 240.0 && v9 > 5;
  if (v12 <= 0.3) {
    BOOL v14 = 0;
  }
  int v15 = v9 > 0x20 || v14;
  uint64_t v16 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    double v19 = *(float *)(a1 + 48);
    v24[0] = 67109888;
    v24[1] = v15;
    __int16 v25 = 2048;
    double v26 = v19;
    __int16 v27 = 2048;
    unint64_t v28 = v9;
    __int16 v29 = 2048;
    double v30 = v12;
    _os_log_debug_impl(&dword_1920CB000, v16, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] bouncing_often=%d cost=%f n_bounces=%zu bounce_ratio=%f", (uint8_t *)v24, 0x26u);
  }

  if (v15)
  {
    std::string v20 = Espresso::espresso_os_log_subsystem(v17, v18);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v24[0]) = 0;
      _os_log_debug_impl(&dword_1920CB000, v20, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] The network bounces between the ANE and GPU/CPU or between GPU & CPU too often. Please consider running the network on a different engine or change the architecture.", (uint8_t *)v24, 2u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v23 = exception;
    if (v2)
    {
      Espresso::dispatch_error_use_mpsgraph::dispatch_error_use_mpsgraph(exception, v22);
    }
    Espresso::dispatch_error_fallback_at_c_level::dispatch_error_fallback_at_c_level(exception, v22);
  }
}

void sub_19287C3B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::dispatch_error_use_mpsgraph::dispatch_error_use_mpsgraph(std::runtime_error *this, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(this, "The network bounces between the ANE and GPU/CPU or between GPU & CPU too often. Please consider running the network on a different engine or change the architecture.");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE3605B8;
  return result;
}

std::runtime_error *Espresso::dispatch_error_fallback_at_c_level::dispatch_error_fallback_at_c_level(std::runtime_error *this, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(this, "The network bounces between the ANE and GPU/CPU or between GPU & CPU too often. Please consider running the network on a different engine or change the architecture.");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE368F10;
  return result;
}

std::runtime_error *Espresso::dispatch_error_use_mpsgraph_compiler::dispatch_error_use_mpsgraph_compiler(std::runtime_error *this)
{
  uint64_t result = std::runtime_error::runtime_error(this, "");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE36A088;
  return result;
}

std::runtime_error *Espresso::dispatch_error_use_cpu_script::dispatch_error_use_cpu_script(std::runtime_error *this)
{
  uint64_t result = std::runtime_error::runtime_error(this, "");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE364200;
  return result;
}

void Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_2::operator()(uint64_t a1, uint64_t a2)
{
  Espresso::create_context(*(int **)a2, &v13);
  uint64_t v4 = v13;
  if (!v13) {
    Espresso::throw_exception_selector<Espresso::invalid_context_error>("Could not create MPSBuffers context.");
  }
  *(unsigned char *)(v13 + 56) = 1;
  uint64_t v5 = v14;
  v12[0] = v4;
  v12[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(uint64_t **)(a2 + 8);
  unint64_t v7 = (std::__shared_weak_count *)v6[1];
  v11[0] = *v6;
  v11[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(Espresso ****)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = 0;
  try_dispatch(a1, v12, v11, v8, v9, (unsigned int *)&v10 + 1, *(int **)(a2 + 40), (int *)&v10);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
}

void sub_19287C5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::dispatch_status_t::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v8;
  *(void *)(a1 + 24) = v7;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  float v12 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  int v13 = *((_DWORD *)a2 + 12);
  *(_WORD *)(a1 + 52) = *((_WORD *)a2 + 26);
  *(_DWORD *)(a1 + 48) = v13;
  return a1;
}

BOOL is_fully_on_fallback(char *a1, char *a2)
{
  unint64_t v2 = a2 - a1;
  unint64_t v3 = (a2 - a1) >> 2;
  unint64_t v4 = 0;
  if (a2 != a1)
  {
    if (v3 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = (a2 - a1) >> 2;
    }
    do
    {
      int v6 = *(_DWORD *)a1;
      a1 += 4;
      if (v6) {
        ++v4;
      }
      --v5;
    }
    while (v5);
  }
  unint64_t v7 = v3 - 1;
  return v2 > 0xC && v4 >= v7;
}

void sub_19287C8D8(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_transpose_inner_product::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(a1, &__block_literal_global_9442);
  id v5 = &__block_literal_global_3;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v30, a1);
  long long v28 = 0u;
  memset(v29, 0, 28);
  long long v27 = 0u;
  v29[4] = a1;
  uint64_t v6 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      LODWORD(v29[3]) = v7;
      long long v8 = *(_OWORD *)(v6 + 16 * v7);
      uint64_t v9 = *(void *)(v6 + 16 * v7 + 8);
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)&v28 + 1);
      long long v28 = v8;
      if (v10)
      {
        nitro::nitro_function::nitro_function(v10);
        uint64_t v11 = v28;
      }
      else
      {
        uint64_t v11 = v8;
      }
      float v12 = *(void **)(v11 + 64);
      if (v12
      {
        uint64_t v13 = *(void *)(v11 + 72);
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      BOOL v14 = (std::__shared_weak_count *)*((void *)&v27 + 1);
      *(void *)&long long v27 = v12;
      *((void *)&v27 + 1) = v13;
      if (v14)
      {
        nitro::nitro_function::nitro_function(v14);
        float v12 = (void *)v27;
      }
      if (v12) {
        ___ZN8Espresso28pass_transpose_inner_product14run_on_networkERNS_3netE_block_invoke_2((uint64_t)&__block_literal_global_3, (uint64_t *)&v27);
      }
      ++v7;
      uint64_t v6 = *((void *)a1 + 4);
    }
    while (v7 < (*((void *)a1 + 5) - v6) >> 4);
    int v15 = (uint64_t *)v29[1];
    if (v29[0] != v29[1])
    {
      uint64_t v23 = a2;
      int v16 = 0;
      BOOL v17 = (uint64_t *)(v29[0] + 32);
      do
      {
        uint64_t v18 = v17 - 4;
        int v19 = *((_DWORD *)v17 - 8) + v16;
        *((_DWORD *)v17 - 8) = v19;
        std::string v20 = (void **)*(v17 - 3);
        if (v20)
        {
          LODWORD(v36[0]) = v19;
          v36[1] = v20;
          std::string v21 = (std::__shared_weak_count *)*(v17 - 2);
          long long v37 = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v38, 0, sizeof(v38));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v38, *(v17 - 1), *v17, 0xAAAAAAAAAAAAAAABLL * ((*v17 - *(v17 - 1)) >> 3));
          memset(v39, 0, sizeof(v39));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v39, v17[2], v17[3], 0xAAAAAAAAAAAAAAABLL * ((v17[3] - v17[2]) >> 3));
          int v24 = 0;
          __int16 v25 = 0;
          double v26 = 0;
          int v34 = (void **)&v24;
          char v35 = 0;
          int v24 = (uint64_t *)operator new(0x48uLL);
          __int16 v25 = v24;
          double v26 = v24 + 9;
          __int16 v25 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v26, (uint64_t)v36, (uint64_t)&v40, (uint64_t)v24);
          Espresso::net::insert_layers((uint64_t)a1, &v24);
          int v34 = (void **)&v24;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v34);
          int v34 = (void **)v39;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
          int v34 = (void **)v38;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
          if (v37) {
            nitro::nitro_function::nitro_function(v37);
          }
          int v22 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v19);
          int v22 = -1;
        }
        v16 += v22;
        v17 += 9;
      }
      while (v18 + 9 != v15);
      a2 = v23;
    }
  }
  v36[0] = (void **)v29;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v36);
  if (*((void *)&v28 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v28 + 1));
  }
  if (*((void *)&v27 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v27 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v33);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v32);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }

  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  *(unsigned char *)a2 = 1;
}

void sub_19287CC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso28pass_transpose_inner_product14run_on_networkERNS_3netE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  v18[0] = *a2;
  v18[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "W_t_x");
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x");
  transpose_inner_product((uint64_t *)(v4 + 624), v18, (uint64_t)v16, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v6 = *a2;
  id v5 = (std::__shared_weak_count *)a2[1];
  v13[0] = *a2;
  v13[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "W_t_x_reverse");
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x_reverse");
  transpose_inner_product((uint64_t *)(v6 + 640), v13, (uint64_t)v16, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v8 = *a2;
  unint64_t v7 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "W_t_h");
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
  transpose_inner_product((uint64_t *)(v8 + 656), v12, (uint64_t)v16, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v10 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  v11[0] = *a2;
  v11[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "W_t_h_reverse");
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h_reverse");
  transpose_inner_product((uint64_t *)(v10 + 672), v11, (uint64_t)v16, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_19287CF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void transpose_inner_product(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a1;
  if (v5 && !*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v5 + 384))(v5) + 28))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 416))(&v30);
    if (v30)
    {
      Espresso::transposed_blob_2d<Espresso::blob<float,2>>(&v28, &v30);
      uint64_t v9 = *a1;
      uint64_t v26 = 0;
      long long v27 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "w_f32_t");
      uint64_t v10 = v28;
      (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v9 + 168))(v9, &v26, &__p, *(void *)(v28 + 16), 4 * *(int *)(v10 + 8) * (uint64_t)*(int *)(v10 + 12), 0);
      if (v25 < 0) {
        operator delete(__p);
      }
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
      uint64_t v11 = *a1;
      uint64_t v21 = 0;
      int v22 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 400))(v11, &v21);
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      uint64_t v12 = *a2;
      if (*a2)
      {
        std::string __p = 0;
        int v24 = 0;
        (*(void (**)(uint64_t, void **, uint64_t, void, uint64_t, void))(*(void *)v12 + 168))(v12, &__p, a3, *(void *)(v10 + 16), 4 * *(int *)(v10 + 8) * (uint64_t)*(int *)(v10 + 12), 0);
        if (v24) {
          nitro::nitro_function::nitro_function(v24);
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__erase_unique<std::string>((uint64_t **)(*a2 + 152), a4);
        Espresso::abstract_kernel_with_weights_::erase_weights_blobs(*a2, a4);
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 472))(&v28);
      if (v28)
      {
        Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(&v26, &v28);
        uint64_t v13 = *a1;
        uint64_t v19 = 0;
        std::string v20 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "w_f16_t");
        uint64_t v14 = v26;
        (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v13 + 168))(v13, &v19, &__p, *(void *)(v26 + 16), 2 * *(int *)(v26 + 8) * (uint64_t)*(int *)(v26 + 12), 0);
        if (v25 < 0) {
          operator delete(__p);
        }
        if (v20) {
          nitro::nitro_function::nitro_function(v20);
        }
        uint64_t v15 = *a1;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        std::string __p = 0;
        int v24 = 0;
        (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v15 + 464))(v15, &v17, &__p);
        if (v24) {
          nitro::nitro_function::nitro_function(v24);
        }
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        uint64_t v16 = *a2;
        if (*a2)
        {
          std::string __p = 0;
          int v24 = 0;
          (*(void (**)(uint64_t, void **, uint64_t, void, uint64_t, void))(*(void *)v16 + 168))(v16, &__p, a3, *(void *)(v14 + 16), 2 * *(int *)(v14 + 8) * (uint64_t)*(int *)(v14 + 12), 0);
          if (v24) {
            nitro::nitro_function::nitro_function(v24);
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__erase_unique<std::string>((uint64_t **)(*a2 + 152), a4);
          Espresso::abstract_kernel_with_weights_::erase_weights_blobs(*a2, a4);
        }
        if (v27) {
          nitro::nitro_function::nitro_function(v27);
        }
      }
    }
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
  }
}

void sub_19287D384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  char v25 = *(std::__shared_weak_count **)(v23 - 72);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v23 - 56);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__erase_unique<std::string>(uint64_t **a1, void *a2)
{
  unint64_t v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (uint64_t *)v3[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      unint64_t v7 = v3;
      do
      {
        uint64_t v6 = (uint64_t *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        unint64_t v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    uint64_t v9 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void Espresso::abstract_kernel_with_weights_::erase_weights_blobs(uint64_t a1, void *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 288);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v4, a2))
  {
    uint64_t v5 = (uint64_t **)(a1 + 280);
    uint64_t v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 280, a2);
    if ((uint64_t *)(a1 + 288) != v6)
    {
      unint64_t v7 = v6;
      BOOL v8 = (uint64_t *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        uint64_t v10 = v6;
        do
        {
          uint64_t v9 = (uint64_t *)v10[2];
          BOOL v11 = *v9 == (void)v10;
          uint64_t v10 = v9;
        }
        while (!v11);
      }
      if (*v5 == v6) {
        uint64_t *v5 = v9;
      }
      --*(void *)(a1 + 296);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v6);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(v7 + 4));
      operator delete(v7);
    }
  }
}

void ___ZN8Espresso28pass_transpose_inner_product14run_on_networkERNS_3netE_block_invoke(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (std::__shared_weak_count *)a2[1];
  v8[0] = *a2;
  v8[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v7[0] = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  transpose_inner_product(v8, v7, (uint64_t)v5, __p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void sub_19287D694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_transpose_inner_product::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_transpose_inner_product::~pass_transpose_inner_product(Espresso::pass_transpose_inner_product *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_transpose_inner_product>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_transpose_inner_product>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_transpose_inner_product>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19287D9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19287DB38(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19287DBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19287E288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (v13)
  {
    operator delete(v13);
    if (!v12) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v12)
  {
    goto LABEL_4;
  }
  operator delete(v12);
  goto LABEL_4;
}

void sub_19287E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)va);
  _Unwind_Resume(a1);
}

void sub_19287EFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (v46)
  {
    operator delete(v46);
    if (!v48)
    {
LABEL_3:
      if (!v47) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v48)
  {
    goto LABEL_3;
  }
  operator delete(v48);
  if (!v47)
  {
LABEL_5:
    Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)(v49 - 216));
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v47);
  goto LABEL_5;
}

void Espresso::blob<int,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C030;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  char v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<int,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C030;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  char v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<int,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<int,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<int,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::blob<vision::DCN::boundingbox,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE10;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  char v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<vision::DCN::boundingbox,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE10;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  char v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<vision::DCN::boundingbox,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<vision::DCN::boundingbox,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<vision::DCN::boundingbox,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSGraphEngine::Kernels::lrn_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  if (a3[1] - *a3 == 64 && a3[4] - a3[3] == 64) {
    return 1;
  }
  uint64_t v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "[Dispatch::MPSGraph::lrn_kernel] unsupported: invalid number of inputs or outputs. ");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v6, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  uint64_t v13 = (void **)&v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = (void **)&v9;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v5) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  }
  return 0;
}

void sub_19287F5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::lrn_kernel::~lrn_kernel(Espresso::MPSGraphEngine::Kernels::lrn_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::MPSBuffersEngine::context::network_transform_pre_allocation(Espresso::MPSBuffersEngine::context *this, Espresso::net *a2)
{
  if (!*((unsigned char *)a2 + 568) && (Espresso::net::needs_interpreter(a2) & 1) == 0)
  {
    *((unsigned char *)a2 + 568) = 1;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke;
    v6[3] = &__block_descriptor_48_e9_v16__0_v8l;
    void v6[4] = this;
    v6[5] = a2;
    Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(a2, v6);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2;
    v5[3] = &__block_descriptor_48_e9_v16__0_v8l;
    v5[4] = this;
    v5[5] = a2;
    Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(a2, v5);
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    uint64_t v4[2] = ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3;
    v4[3] = &__block_descriptor_48_e9_v16__0_v8l;
    v4[4] = this;
    v4[5] = a2;
    Espresso::single_match_replace<Espresso::generic_dev_op_kernel>(a2, v4);
  }
}

void ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v79 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == *(void *)(a1 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "@BUFFERS2D");
    uint64_t v4 = *(void *)(a1 + 40);
    unint64_t v5 = a2[3].i32[2];
    uint64_t v6 = *(void *)(*(void *)(v4 + 32) + 16 * v5);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(v6 + 16), *(void *)(v6 + 24));
      uint64_t v4 = *(void *)(a1 + 40);
      unint64_t v5 = a2[3].i32[2];
    }
    else
    {
      std::string v69 = *(std::string *)(v6 + 16);
    }
    *(void *)&v54[0] = v5;
    char v7 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4 + 56, v5, v54)[3];
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v68.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t v9 = *(void *)(a1 + 40) + 96;
    unint64_t v10 = a2[3].i32[2];
    *(void *)&v54[0] = v10;
    BOOL v11 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v54)[3];
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v12 = *v11;
      v67.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v12;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v68.__r_.__value_.__l.__data_, v70, (uint64_t)&__s);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v67.__r_.__value_.__l.__data_, v70, (uint64_t)&v65);
    uint64_t v13 = *(void *)(a1 + 40);
    memset((char *)&v48[1] + 8, 0, 40);
    v48[0] = xmmword_192DC3600;
    *(void *)&v48[1] = 0xFFFFFFFF00000001;
    Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)v54, v13 + 184, &v68, (uint64_t)v48);
    if (LODWORD(v54[1]) == 1) {
      int v14 = 4;
    }
    else {
      int v14 = 5;
    }
    if (DWORD1(v54[1]) == -1) {
      signed int v15 = v14;
    }
    else {
      signed int v15 = DWORD1(v54[1]);
    }
    if (*((void *)&v54[2] + 1))
    {
      *(void *)&v54[3] = *((void *)&v54[2] + 1);
      operator delete(*((void **)&v54[2] + 1));
    }
    uint64_t v16 = *(void *)(a1 + 40);
    memset((char *)&v48[1] + 8, 0, 40);
    v48[0] = xmmword_192DC3600;
    *(void *)&v48[1] = 0xFFFFFFFF00000001;
    Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)v54, v16 + 184, &v67, (uint64_t)v48);
    if (LODWORD(v54[1]) == 1) {
      int v17 = 4;
    }
    else {
      int v17 = 5;
    }
    if (DWORD1(v54[1]) == -1) {
      signed int v18 = v17;
    }
    else {
      signed int v18 = DWORD1(v54[1]);
    }
    if (*((void *)&v54[2] + 1))
    {
      *(void *)&v54[3] = *((void *)&v54[2] + 1);
      operator delete(*((void **)&v54[2] + 1));
    }
    if (*((void *)&v48[2] + 1)) {
      operator delete(*((void **)&v48[2] + 1));
    }
    if (v15 >= 4
      && v18 >= 4
      && !*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]) + 32))
    {
      uint64_t v19 = *(void *)(a1 + 40);
      memset((char *)&v54[1] + 8, 0, 40);
      v54[0] = xmmword_192DC3600;
      *(void *)&v54[1] = 0xFFFFFFFF00000001;
      Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)v60, v19 + 184, &v68, (uint64_t)v54);
      if (v15 != 4 || v61 != 1 || v62 != 1)
      {
        long long v57 = 0u;
        memset(v58, 0, sizeof(v58));
        long long v55 = 0u;
        long long v56 = 0u;
        *(void *)&v54[0] = 0x200000000;
        memset(&v54[1], 0, 48);
        int v59 = 2;
        uint64_t v53 = 0;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        *(void *)&v48[0] = 0x200000000;
        memset(&v48[1], 0, 48);
        *((int32x2_t *)&v54[0] + 1) = vadd_s32(vdup_n_s32(v15), (int32x2_t)0xFFFFFFFEFFFFFFFFLL);
        *((int32x2_t *)&v48[0] + 1) = vadd_s32(vdup_n_s32(v18), (int32x2_t)-2);
        uint64_t v20 = *(void *)(a1 + 40);
        uint64_t v22 = *(void *)(v20 + 16);
        uint64_t v21 = *(std::__shared_weak_count **)(v20 + 24);
        uint64_t v46 = v22;
        int v47 = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::abstract_engine_factory::shared(&v40);
        uint64_t v23 = v40.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v43, "squeeze");
        LODWORD(v78.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v46 + 8))(*(void *)(v46 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v23, (uint64_t)&v46, (uint64_t)&v43, (uint64_t)v54, (int *)&v78);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v40.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40.__r_.__value_.__l.__size_);
        }
        Espresso::abstract_engine_factory::shared(&v40);
        uint64_t v24 = v40.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v43, "expand_dims");
        LODWORD(v78.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v46 + 8))(*(void *)(v46 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v24, (uint64_t)&v46, (uint64_t)&v43, (uint64_t)v48, (int *)&v78);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v40.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40.__r_.__value_.__l.__size_);
        }
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::remove_layer(a2);
        char v25 = v45;
        v41[0] = v44;
        v41[1] = v45;
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v43, "squeeze");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v69.__r_.__value_.__l.__data_, v70, (uint64_t)&v78);
        uint64_t v26 = std::string::append(&v78, "squeeze");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v40.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v76, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
        }
        else {
          std::string v76 = v68;
        }
        long long v37 = 0;
        long long v38 = 0;
        p_int data = 0;
        int v34 = (std::string *)&v37;
        LOBYTE(v35) = 0;
        long long v37 = (std::string *)operator new(0x18uLL);
        long long v38 = v37;
        p_int data = (void **)&v37[1].__r_.__value_.__l.__data_;
        long long v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v76, (long long *)&v77, v37);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v74, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v74 = __s;
        }
        int v34 = 0;
        char v35 = 0;
        long long v36 = 0;
        unsigned int v72 = (void ***)&v34;
        char v73 = 0;
        int v34 = (std::string *)operator new(0x18uLL);
        char v35 = v34;
        long long v36 = (void **)&v34[1].__r_.__value_.__l.__data_;
        char v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v74, (long long *)&v75, v34);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v41, &v43, &v40, &v37, &v34);
        unsigned int v72 = (void ***)&v34;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        int v34 = (std::string *)&v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v25) {
          nitro::nitro_function::nitro_function(v25);
        }
        uint64_t v28 = (std::__shared_weak_count *)a2->i64[1];
        v33[0] = a2->i64[0];
        v33[1] = v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v43, "inner_product");
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v78, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v78 = __s;
        }
        memset(&v40, 0, sizeof(v40));
        long long v37 = &v40;
        LOBYTE(v38) = 0;
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
        v40.__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[0] + 24;
        v40.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40.__r_.__value_.__r.__words[2], (long long *)&v78, &v79, (std::string *)v40.__r_.__value_.__l.__data_);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v76, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
        }
        else {
          std::string v76 = v65;
        }
        long long v37 = 0;
        long long v38 = 0;
        p_int data = 0;
        int v34 = (std::string *)&v37;
        LOBYTE(v35) = 0;
        long long v37 = (std::string *)operator new(0x18uLL);
        long long v38 = v37;
        p_int data = (void **)&v37[1].__r_.__value_.__l.__data_;
        long long v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v76, (long long *)&v77, v37);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v33, &v43, &v69, (std::string **)&v40, &v37);
        int v34 = (std::string *)&v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        long long v37 = &v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v28) {
          nitro::nitro_function::nitro_function(v28);
        }
        __int16 v29 = v42;
        v32[0] = v41[2];
        v32[1] = v42;
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v43, "expand_dims");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v69.__r_.__value_.__l.__data_, v70, (uint64_t)&v78);
        uint64_t v30 = std::string::append(&v78, "expand_dims");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v40.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v76, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
        }
        else {
          std::string v76 = v65;
        }
        long long v37 = 0;
        long long v38 = 0;
        p_int data = 0;
        int v34 = (std::string *)&v37;
        LOBYTE(v35) = 0;
        long long v37 = (std::string *)operator new(0x18uLL);
        long long v38 = v37;
        p_int data = (void **)&v37[1].__r_.__value_.__l.__data_;
        long long v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v76, (long long *)&v77, v37);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v74, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        }
        else {
          std::string v74 = v67;
        }
        int v34 = 0;
        char v35 = 0;
        long long v36 = 0;
        unsigned int v72 = (void ***)&v34;
        char v73 = 0;
        int v34 = (std::string *)operator new(0x18uLL);
        char v35 = v34;
        long long v36 = (void **)&v34[1].__r_.__value_.__l.__data_;
        char v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v74, (long long *)&v75, v34);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v32, &v43, &v40, &v37, &v34);
        unsigned int v72 = (void ***)&v34;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        int v34 = (std::string *)&v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v29) {
          nitro::nitro_function::nitro_function(v29);
        }
        if (v42) {
          nitro::nitro_function::nitro_function(v42);
        }
        if (v45) {
          nitro::nitro_function::nitro_function(v45);
        }
        if (v47) {
          nitro::nitro_function::nitro_function(v47);
        }
      }
      if (v63)
      {
        float v64 = v63;
        operator delete(v63);
      }
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (v71 < 0) {
      operator delete((void *)v70[0]);
    }
  }
}

void sub_1928802BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  a15 = (uint64_t)&a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v41 - 73) < 0) {
    operator delete(*(void **)(v41 - 96));
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (a30) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a30);
  }
  if (a38) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a38);
  }
  if (a40) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a40);
  }
  std::string v43 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v43;
    operator delete(v43);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (*(char *)(v41 - 233) < 0) {
    operator delete(*(void **)(v41 - 256));
  }
  if (*(char *)(v41 - 201) < 0) {
    operator delete(*(void **)(v41 - 224));
  }
  if (*(char *)(v41 - 177) < 0) {
    operator delete(*(void **)(v41 - 200));
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2(uint64_t a1, int64x2_t *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == *(void *)(a1 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "@BUFFERS2D");
    uint64_t v4 = *(void *)(a1 + 40);
    unint64_t v5 = a2[3].i32[2];
    uint64_t v6 = *(void *)(*(void *)(v4 + 32) + 16 * v5);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v6 + 16), *(void *)(v6 + 24));
      uint64_t v4 = *(void *)(a1 + 40);
      unint64_t v5 = a2[3].i32[2];
    }
    else
    {
      std::string v51 = *(std::string *)(v6 + 16);
    }
    v60.__r_.__value_.__r.__words[0] = v5;
    char v7 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4 + 56, v5, &v60)[3];
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v50.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t v9 = *(void *)(a1 + 40) + 56;
    v60.__r_.__value_.__r.__words[0] = a2[3].i32[2];
    unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v60.__r_.__value_.__r.__words[0], &v60);
    if (v10[4] - v10[3] != 24)
    {
      uint64_t v11 = *(void *)(a1 + 40) + 56;
      v60.__r_.__value_.__r.__words[0] = a2[3].i32[2];
      uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v60.__r_.__value_.__r.__words[0], &v60)[3];
      if (*(char *)(v12 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v12 + 24), *(void *)(v12 + 32));
      }
      else {
        std::string v49 = *(std::string *)(v12 + 24);
      }
      uint64_t v13 = *(void *)(a1 + 40) + 96;
      v60.__r_.__value_.__r.__words[0] = a2[3].i32[2];
      int v14 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v60.__r_.__value_.__r.__words[0], &v60)[3];
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v15 = *v14;
        v48.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
      }
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v49.__r_.__value_.__l.__data_, v52, (uint64_t)&v47);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v46 = 0;
      long long __p = 0u;
      long long v44 = 0u;
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = xmmword_192DC3600;
      v43.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
      Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)&v60, v16 + 184, &v50, (uint64_t)&v43);
      int v17 = HIDWORD(v60.__r_.__value_.__r.__words[2]);
      if (v61.__r_.__value_.__r.__words[2])
      {
        *(void *)&long long v62 = *((void *)&v61.__r_.__value_.__l + 2);
        operator delete((void *)v61.__r_.__value_.__r.__words[2]);
      }
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v46 = 0;
      long long __p = 0u;
      long long v44 = 0u;
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = xmmword_192DC3600;
      v43.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
      Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)&v60, v18 + 184, &v48, (uint64_t)&v43);
      int v19 = HIDWORD(v60.__r_.__value_.__r.__words[2]);
      if (v61.__r_.__value_.__r.__words[2])
      {
        *(void *)&long long v62 = *((void *)&v61.__r_.__value_.__l + 2);
        operator delete((void *)v61.__r_.__value_.__r.__words[2]);
      }
      if ((void)__p) {
        operator delete((void *)__p);
      }
      if (v17 != -1 && v17 <= 3 && v19 != -1 && v19 <= 3)
      {
        int v42 = 4;
        long long v41 = xmmword_192DCA540;
        uint64_t v20 = *(void *)(a1 + 40);
        uint64_t v22 = *(void *)(v20 + 16);
        uint64_t v21 = *(std::__shared_weak_count **)(v20 + 24);
        uint64_t v39 = v22;
        std::string v40 = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::abstract_engine_factory::shared(&v43);
        uint64_t v23 = v43.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v60, "transpose");
        LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v39 + 8))(*(void *)(v39 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v23, (uint64_t)&v39, (uint64_t)&v60, (uint64_t)&v41, (int *)&v36);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (v43.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v43.__r_.__value_.__l.__size_);
        }
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::remove_layer(a2);
        uint64_t v24 = v38;
        v37[0] = v37[2];
        v37[1] = v38;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v60, "transpose");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v51.__r_.__value_.__l.__data_, v52, (uint64_t)&v36);
        char v25 = std::string::append(&v36, "transpose");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = v49;
        }
        uint64_t v33 = 0;
        int v34 = 0;
        p_int data = 0;
        uint64_t v30 = (std::string *)&v33;
        LOBYTE(v31) = 0;
        uint64_t v33 = (std::string *)operator new(0x18uLL);
        int v34 = v33;
        p_int data = (void **)&v33[1].__r_.__value_.__l.__data_;
        int v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v58, (long long *)&v59, v33);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v56, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
        }
        else {
          std::string v56 = v47;
        }
        uint64_t v30 = 0;
        long long v31 = 0;
        BOOL v32 = 0;
        unsigned int v54 = &v30;
        char v55 = 0;
        uint64_t v30 = (std::string *)operator new(0x18uLL);
        long long v31 = v30;
        BOOL v32 = (void **)&v30[1].__r_.__value_.__l.__data_;
        long long v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32, (long long *)&v56, (long long *)&v57, v30);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v37, &v60, &v43, &v33, &v30);
        unsigned int v54 = &v30;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        uint64_t v30 = (std::string *)&v33;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (v24) {
          nitro::nitro_function::nitro_function(v24);
        }
        long long v27 = (std::__shared_weak_count *)a2->i64[1];
        v29[0] = a2->i64[0];
        v29[1] = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v43, "inner_product");
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v60, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
        }
        else {
          std::string v60 = v50;
        }
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v61, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
        }
        else {
          std::string v61 = v47;
        }
        memset(&v36, 0, sizeof(v36));
        uint64_t v33 = &v36;
        LOBYTE(v34) = 0;
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
        v36.__r_.__value_.__r.__words[2] = v36.__r_.__value_.__r.__words[0] + 48;
        v36.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36.__r_.__value_.__r.__words[2], (long long *)&v60, &v62, (std::string *)v36.__r_.__value_.__l.__data_);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = v48;
        }
        uint64_t v33 = 0;
        int v34 = 0;
        p_int data = 0;
        uint64_t v30 = (std::string *)&v33;
        LOBYTE(v31) = 0;
        uint64_t v33 = (std::string *)operator new(0x18uLL);
        int v34 = v33;
        p_int data = (void **)&v33[1].__r_.__value_.__l.__data_;
        int v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v58, (long long *)&v59, v33);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v29, &v43, &v51, (std::string **)&v36, &v33);
        uint64_t v30 = (std::string *)&v33;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        uint64_t v33 = &v36;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
        for (uint64_t i = 0; i != -6; i -= 3)
        {
          if (SHIBYTE(v61.__r_.__value_.__r.__words[i + 2]) < 0) {
            operator delete(*(void **)((char *)&v60 + i * 8 + 24));
          }
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v27) {
          nitro::nitro_function::nitro_function(v27);
        }
        if (v38) {
          nitro::nitro_function::nitro_function(v38);
        }
        if (v40) {
          nitro::nitro_function::nitro_function(v40);
        }
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (v53 < 0) {
      operator delete((void *)v52[0]);
    }
  }
}

void sub_192880CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  a17 = (uint64_t)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  uint64_t v76 = 0;
  uint64_t v77 = v74 - 144;
  while (1)
  {
    if (*(char *)(v77 + v76 + 47) < 0) {
      operator delete(*(void **)(v77 + v76 + 24));
    }
    v76 -= 24;
    if (v76 == -48)
    {
      if (a38 < 0) {
        operator delete(__p);
      }
      if (v73) {
        nitro::nitro_function::nitro_function(v73);
      }
      if (a26) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)a26);
      }
      if (a28) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)a28);
      }
      if (a50 < 0) {
        operator delete(a45);
      }
      if (a56 < 0) {
        operator delete(a51);
      }
      if (a63 < 0) {
        operator delete(a58);
      }
      if (a70 < 0) {
        operator delete(a65);
      }
      if (a73 < 0) {
        operator delete(a72);
      }
      if (*(char *)(v74 - 225) < 0) {
        operator delete(*(void **)(v74 - 248));
      }
      _Unwind_Resume(a1);
    }
  }
}

void ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a2 + 8) == *(void *)(a1 + 32))
  {
    if (v4)
    {
      unint64_t v5 = v4;
      uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *(void *)(a1 + 40);
      long long v8 = (void *)(v7 + 1024);
      if (*(char *)(v7 + 1047) < 0) {
        long long v8 = (void *)*v8;
      }
      uint64_t v9 = [NSString stringWithUTF8String:v8];
      unint64_t v10 = (void *)v5[52];
      v5[52] = v9;

      if (v6)
      {
        nitro::nitro_function::nitro_function(v6);
      }
    }
  }
}

void sub_192881078(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_replace<Espresso::generic_dev_op_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      long long v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      unint64_t v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        unint64_t v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    uint64_t v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      long long v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        uint64_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          int v19 = (std::__shared_weak_count *)*(v15 - 2);
          int v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          long long v31 = (void **)&v21;
          char v32 = 0;
          uint64_t v21 = (uint64_t *)operator new(0x48uLL);
          uint64_t v22 = v21;
          uint64_t v23 = v21 + 9;
          uint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          long long v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          long long v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          long long v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1928813D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, a3);
  if ((void *)(a2 + 8) == v7)
  {
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v13;
    uint64_t v11 = *(const void **)(a4 + 40);
    *(void *)(a1 + 32) = *(void *)(a4 + 32);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (void *)(a1 + 40);
    uint64_t v12 = *(void *)(a4 + 48);
  }
  else
  {
    long long v8 = *(_OWORD *)(v7 + 7);
    long long v9 = *(_OWORD *)(v7 + 9);
    *(void *)(a1 + 32) = v7[11];
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v9;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (void *)(a1 + 40);
    uint64_t v11 = (const void *)v7[12];
    uint64_t v12 = v7[13];
  }

  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v10, v11, v12, (v12 - (uint64_t)v11) >> 2);
}

float Espresso::MPSEngine::context::begin_batch@<S0>(id *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSEngine::context *,void>((Espresso::MPSEngine::batch **)&v8, this);
  char v4 = *((unsigned char *)this + 184);
  float result = *((float *)this + 42);
  long long v6 = v8;
  uint64_t v7 = v8;
  *(unsigned char *)(v8 + 2std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((unsigned char *)this + 172);
  *(float *)(v7 + 212) = result;
  *(unsigned char *)(v7 + 232) = v4;
  *a2 = v6;
  return result;
}

Espresso::MPSEngine::batch *std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSEngine::context *,void>(Espresso::MPSEngine::batch **a1, id *a2)
{
  char v4 = operator new(0x120uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_1EE38D238;
  float result = Espresso::MPSEngine::batch::batch((Espresso::MPSEngine::batch *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Espresso::MPSEngine::batch *)v4;
  return result;
}

void sub_19288163C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(uint64_t *a1@<X1>, const Espresso::dev_op_params_t *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x1E8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE384248;
  Espresso::dev_op_params_t::dev_op_params_t((Espresso::dev_op_params_t *)v8, a2);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE33BAD8;
  *((void *)v6 + 38) = 0;
  *((_DWORD *)v6 + 78) = 0;
  *((void *)v6 + 54) = 0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  Espresso::dev_op_params_t::operator=((uint64_t)(v6 + 304), v8);
  int v17 = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  int v17 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1928817B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v30 = *(std::__shared_weak_count **)(v26 + 480);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v27);
  *(void *)(v28 - 40) = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 40) = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a11) {
    operator delete(a11);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v26);
  operator delete(v31);
  _Unwind_Resume(a1);
}

Espresso::dev_op_params_t *Espresso::dev_op_params_t::dev_op_params_t(Espresso::dev_op_params_t *this, const Espresso::dev_op_params_t *a2)
{
  uint64_t v4 = *(void *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *(void *)this = v4;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  std::vector<Espresso::dev_op_params_t::shape>::__init_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>((void *)this + 2, *((const void **)a2 + 2), *((void *)a2 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<Espresso::dev_op_params_t::shape>::__init_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>((void *)this + 5, *((const void **)a2 + 5), *((void *)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v5;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)this + 11, *((void *)a2 + 11), *((void *)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3));
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)this + 14, *((void *)a2 + 14), *((void *)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
  return this;
}

void sub_192881988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  char v14 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 48) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 24) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<Espresso::dev_op_params_t::shape>::__init_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_192881A48(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384248;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE384600;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33D248;
  *((unsigned char *)v6 + 312) = 0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  *((_WORD *)v6 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192881BA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE3843D0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33C3C8;
  *((unsigned char *)v6 + 320) = 0;
  v6[41] = 0;
  v6[57] = 0;
  v6[58] = 0;
  *((_DWORD *)v6 + 118) = 0;
  v6[38] = *a2;
  *(void *)((char *)v6 + 310) = *(void *)((char *)a2 + 6);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192881C70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3843D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3843D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE3841A0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33B6D0;
  v6[41] = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192881DDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::tile_kernel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3841A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3841A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x1B8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE384670;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE33D4F8;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 47) = 0;
  *((void *)v6 + 45) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192881F68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::instancenorm_1d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384670;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  size_t v8 = operator new(0x360uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *size_t v8 = &unk_1EE384398;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  void v8[3] = &unk_1EE33C270;
  v8[103] = 0;
  *((_DWORD *)v8 + 208) = a3;
  v8[105] = 0;
  v8[107] = 0;
  v8[106] = 0;
  memcpy(v8 + 38, a2, 0x208uLL);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1928820E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384398;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x228uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE384590;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE33CED0;
  *((void *)v6 + 51) = 0;
  *(_OWORD *)(v6 + 536) = 0u;
  long long v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v7;
  *((_DWORD *)v6 + 100) = *(_DWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v9;
  *((void *)v6 + 66) = 0;
  uint64_t v10 = (void *)*((void *)v6 + 67);
  *((void *)v6 + 67) = 0;

  uint64_t v11 = (void *)*((void *)v6 + 68);
  *((void *)v6 + 68) = 0;

  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19288227C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384590;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x148uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE3840F8;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 3) = &unk_1EE33B2C8;
  *((void *)v6 + 39) = v7;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v8;
  long long v9 = (const void *)*((void *)v6 + 4);
  if (!v9
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v6 + 5);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    id v12 = v10[18];
    nitro::nitro_function::nitro_function(v11);
  }
  else
  {
    id v12 = v10[18];
  }
  id v13 = objc_alloc(MEMORY[0x1E4F35940]);
  LODWORD(v14) = 1.0;
  uint64_t v15 = (void *)[v13 initWithLearningRate:0 gradientRescale:0.0 regularizationType:v14 regularizationScale:0.0];
  id v16 = objc_alloc(MEMORY[0x1E4F35938]);
  LODWORD(v17) = *((_DWORD *)v6 + 78);
  uint64_t v18 = [v16 initWithDevice:v12 beta1:0 beta2:v15 epsilon:*((float *)v6 + 76) timeStep:*((float *)v6 + 77) optimizerDescriptor:v17];
  int v19 = (void *)*((void *)v6 + 40);
  *((void *)v6 + 40) = v18;

  if (!*((void *)v6 + 40)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("fail to create mps adam kernel");
  }

  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192882534(_Unwind_Exception *a1)
{
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::adam_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::adam_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3840F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::adam_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3840F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE384168;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33B578;
  v6[43] = 0;
  v6[44] = 0;
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((unsigned char *)v6 + 336) = *(unsigned char *)(a2 + 32);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1928826C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::fill_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384168;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x148uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE3840C0;
  uint64_t v7 = *a2;
  LODWORD(a2) = *((_DWORD *)a2 + 2);
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 3) = &unk_1EE33B170;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v7;
  *((_DWORD *)v6 + 78) = a2;
  long long v8 = (const void *)*((void *)v6 + 4);
  if (!v8
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 5);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    id v11 = v9[18];
    nitro::nitro_function::nitro_function(v10);
  }
  else
  {
    id v11 = v9[18];
  }
  if (*((unsigned char *)v6 + 304))
  {
    id v12 = objc_alloc(MEMORY[0x1E4F35940]);
    LODWORD(v13) = 1.0;
    double v14 = (void *)[v12 initWithLearningRate:0 gradientRescale:0.0 regularizationType:v13 regularizationScale:0.0];
    id v15 = objc_alloc(MEMORY[0x1E4F35948]);
    LODWORD(vstd::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *((_DWORD *)v6 + 77);
    uint64_t v17 = [v15 initWithDevice:v11 momentumScale:0 useNestrovMomentum:v14 optimizerDescriptor:v16];
    uint64_t v18 = (void *)*((void *)v6 + 40);
    *((void *)v6 + 40) = v17;
  }
  else
  {
    uint64_t v19 = [objc_alloc(MEMORY[0x1E4F35948]) initWithDevice:v11 learningRate:0.0];
    double v14 = (void *)*((void *)v6 + 40);
    *((void *)v6 + 40) = v19;
  }

  if (!*((void *)v6 + 40)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("fail to create mps sgd kernel");
  }

  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1928829A4(_Unwind_Exception *a1)
{
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::sgd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::sgd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3840C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::sgd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3840C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1A8uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE384478;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33C818;
  v6[51] = 0;
  v6[52] = 0;
  v6[50] = 0;
  v6[40] = 0;
  v6[41] = 0;
  v6[39] = 0;
  *((_DWORD *)v6 + 76) = *a2;
  v6[41] = 0;

  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192882B94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 400);
  if (v2)
  {
    *(void *)(a1 + 408) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384478;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE3842F0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33BE68;
  v6[44] = 0;
  v6[45] = 0;
  long long v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v7;
  v6[42] = *(void *)(a2 + 32);
  v6[43] = 0;
  v6[45] = 0;

  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192882D40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reshape_kernel>::__on_zero_shared(id *a1)
{
  unint64_t v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3842F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3842F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(uint64_t *a1@<X1>, unsigned __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE384520;
  int v7 = *((unsigned __int8 *)a2 + 2);
  LODWORD(a2) = *a2;
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE33CC20;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 49) = 0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *((_WORD *)v6 + 152) = (_WORD)a2;
  v6[306] = (a2 | (v7 << 16)) >> 16;
  v6[320] = 0;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192882EE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(void *)(a1 + 384) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(void *)(a1 + 360) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(void *)(a1 + 336) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384520;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>((uint64_t *)&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x218uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_1EE3844E8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  void v8[3] = &unk_1EE33CAC8;
  long long v10 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v8 + 25) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v8 + 26) = v10;
  v8[54] = *(void *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 22) = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 24) = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v13;
  *((_DWORD *)v8 + 130) = a3;
  v8[66] = 0;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192883158(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::expand_dims_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3844E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3844E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x220uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_1EE384360;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  void v8[3] = &unk_1EE33C118;
  long long v10 = a2[7];
  *((_OWORD *)v8 + 25) = a2[6];
  *((_OWORD *)v8 + 26) = v10;
  *((_OWORD *)v8 + 27) = a2[8];
  long long v11 = a2[3];
  *((_OWORD *)v8 + 21) = a2[2];
  *((_OWORD *)v8 + 22) = v11;
  long long v12 = a2[5];
  *((_OWORD *)v8 + 23) = a2[4];
  *((_OWORD *)v8 + 24) = v12;
  long long v13 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v13;
  *((_DWORD *)v8 + 132) = a3;
  v8[67] = 0;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1928832D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::squeeze_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384360;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x1F0uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE384408;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE33C520;
  *((void *)v8 + 49) = 0;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 80) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v8 + 100) = a3;
  v8[324] = 0;
  *((void *)v8 + 61) = 0;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192883450(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(void *)(a1 + 384) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(void *)(a1 + 360) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(void *)(a1 + 336) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384408;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x1A0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE384558;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE33CD78;
  *((_OWORD *)v6 + 20) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *((void *)v6 + 38) = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  int v7 = (void *)*((void *)v6 + 49);
  *((void *)v6 + 49) = 0;

  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192883614(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::l2_normalize_kernel>::__on_zero_shared(id *a1)
{
  unint64_t v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384558;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x1B0uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE3846A8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE33D650;
  *((void *)v8 + 41) = 0;
  *((_DWORD *)v8 + 107) = 0;
  *(_OWORD *)(v8 + 396) = 0u;
  *(_OWORD *)(v8 + 412) = 0u;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 80) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v8 + 84) = a3;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1928837BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::matrix_band_part_kernel>::__on_zero_shared(id *a1)
{
  unint64_t v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::matrix_band_part_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3846A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::matrix_band_part_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3846A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x228uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE384638;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE33D3A0;
  *((_DWORD *)v8 + 135) = 0;
  *(_OWORD *)(v8 + 492) = 0u;
  *(_OWORD *)(v8 + 508) = 0u;
  *(_OWORD *)(v8 + 524) = 0u;
  *((_DWORD *)v8 + 136) = a3;
  long long v10 = a2[3];
  *((_OWORD *)v8 + 21) = a2[2];
  *((_OWORD *)v8 + 22) = v10;
  *(_OWORD *)(v8 + 364) = *(_OWORD *)((char *)a2 + 60);
  long long v11 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v11;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192883968(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_padding_kernel>::__on_zero_shared(id *a1)
{
  unint64_t v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384638;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x1F0uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE384280;
  long long v11 = *a2;
  *(_OWORD *)long long v12 = a2[1];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a2 + 28);
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE33BC30;
  *((void *)v8 + 44) = 0;
  *((void *)v8 + 45) = 0;
  *((_DWORD *)v8 + 121) = a3;
  v8[488] = 0;
  *((_OWORD *)v8 + 19) = v11;
  *((_OWORD *)v8 + 20) = *(_OWORD *)v12;
  *(_OWORD *)(v8 + 329) = *(_OWORD *)&v12[9];
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192883B20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reduce_kernel>::__on_zero_shared(id *a1)
{
  unint64_t v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384280;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x178uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_1EE3841D8;
  long long v11 = *a2;
  long long v12 = a2[1];
  long long v13 = a2[2];
  int v14 = *((_DWORD *)a2 + 12);
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  void v8[3] = &unk_1EE33B828;
  v8[45] = 0;
  *((_DWORD *)v8 + 92) = a3;
  *((_OWORD *)v8 + 19) = v11;
  *((_OWORD *)v8 + 20) = v12;
  *((_OWORD *)v8 + 21) = v13;
  *((_DWORD *)v8 + 88) = v14;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192883CD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3841D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3841D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE384210;
  long long v9 = *a2;
  long long v10 = a2[1];
  *(_OWORD *)long long v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE33B980;
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 47) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192883E48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384210;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x208uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE384440;
  long long v10 = *a2;
  long long v11 = a2[1];
  int v12 = *((_DWORD *)a2 + 8);
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 39) = 0;
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 38) = v8 + 312;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((void *)v8 + 3) = &unk_1EE33C678;
  *((void *)v8 + 52) = 0;
  *((void *)v8 + 55) = 0;
  *((void *)v8 + 56) = 0;
  *((_DWORD *)v8 + 117) = a3;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *((_DWORD *)v8 + 90) = v12;
  *(_OWORD *)(v8 + 328) = v10;
  *(_OWORD *)(v8 + 344) = v11;
  *((void *)v8 + 57) = 0;
  *((void *)v8 + 52) = 0;

  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192884004(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::activation_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384440;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE384130;
  LODWORD(a2) = *a2;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33B420;
  *((_DWORD *)v6 + 76) = a2;
  v6[39] = 0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192884134(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384130;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x1D8uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_1EE3844B0;
  long long v11 = *a2;
  long long v12 = a2[1];
  long long v13 = a2[2];
  int v14 = *((_DWORD *)a2 + 12);
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  void v8[3] = &unk_1EE33C970;
  *((unsigned char *)v8 + 356) = 0;
  *((_DWORD *)v8 + 90) = a3;
  v8[46] = 0;
  *((unsigned char *)v8 + 376) = 0;
  v8[48] = 0;
  *((unsigned char *)v8 + 392) = 0;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  *((_OWORD *)v8 + 28) = 0u;
  v8[58] = 0;
  *((_OWORD *)v8 + 19) = v11;
  *((_OWORD *)v8 + 20) = v12;
  *((_OWORD *)v8 + 21) = v13;
  *((_DWORD *)v8 + 88) = v14;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192884330(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(void *)(a1 + 456) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 424);
  if (v3)
  {
    *(void *)(a1 + 432) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 400);
  if (v4)
  {
    *(void *)(a1 + 408) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3844B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3844B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x3A8uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE3845C8;
  long long v18 = a2[6];
  long long v19 = a2[7];
  int v20 = *((_DWORD *)a2 + 32);
  long long v14 = a2[2];
  long long v15 = a2[3];
  long long v16 = a2[4];
  long long v17 = a2[5];
  long long v12 = *a2;
  long long v13 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE33D028;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *((_OWORD *)v8 + 29) = 0u;
  v8[480] = 0;
  *((void *)v8 + 71) = 0;
  v8[580] = 1;
  *((void *)v8 + 77) = 0;
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *((_DWORD *)v8 + 174) = a3;
  *((void *)v8 + 99) = 0;
  *(_OWORD *)(v8 + 776) = 0u;
  *((_OWORD *)v8 + 44) = 0u;
  *((_OWORD *)v8 + 45) = 0u;
  *((_OWORD *)v8 + 46) = 0u;
  *((void *)v8 + 94) = 0;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(_OWORD *)(v8 + 856) = 0u;
  *(_OWORD *)(v8 + 872) = 0u;
  *(_OWORD *)(v8 + 888) = 0u;
  *((void *)v8 + 113) = 0;
  *(_OWORD *)(v8 + 920) = 0u;
  *(_OWORD *)(v8 + 360) = v14;
  *(_OWORD *)(v8 + 376) = v15;
  *(_OWORD *)(v8 + 328) = v12;
  *(_OWORD *)(v8 + 344) = v13;
  *((_DWORD *)v8 + 114) = v20;
  *(_OWORD *)(v8 + 424) = v18;
  *(_OWORD *)(v8 + 440) = v19;
  *(_OWORD *)(v8 + 392) = v16;
  *(_OWORD *)(v8 + 408) = v17;
  *((void *)v8 + 78) = 0;
  uint64_t v9 = (void *)*((void *)v8 + 94);
  *((void *)v8 + 94) = 0;

  long long v10 = (void *)*((void *)v8 + 71);
  *((void *)v8 + 71) = 0;

  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1928845B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3845C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3845C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE384328;
  *(_OWORD *)uint64_t v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 83) = 0;
  *((void *)v6 + 3) = &unk_1EE33BFC0;
  *((void *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 3std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192884708(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384328;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MPSBuffersEngine::engine::~engine(Espresso::MPSBuffersEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::MPSBuffersEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x110uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE384718;
  uint64_t v7 = Espresso::MPSEngine::context::context<int>((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE33D800;
  *((_WORD *)v6 + 132) = 1;
  *((unsigned char *)v6 + 68) = 1;
  *((unsigned char *)v6 + 80) = 1;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19288492C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::MPSBuffersEngine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x118uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE3842B8;
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 3) = &unk_1EE359E28;
  *((_DWORD *)v6 + 13) = -1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((void *)v6 + 11) = 0;
  *((void *)v6 + 12) = v8;
  *((void *)v6 + 13) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 15) = 0;
  *((_DWORD *)v6 + 32) = 0;
  *((_DWORD *)v6 + 34) = 1065353216;
  *(void *)(v6 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v6 + 37) = 1;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  *((_DWORD *)v6 + 12) = 0;
  *(_OWORD *)(v6 + 152) = 0uLL;
  *(_OWORD *)(v6 + 168) = 0uLL;
  *((void *)v6 + 3) = &unk_1EE33BD88;
  *((void *)v6 + 34) = 0;
  *((void *)v6 + 25) = 0;
  *((void *)v6 + 26) = 0;
  *((void *)v6 + 24) = 0;
  *((void *)v6 + 32) = 0;
  *((_OWORD *)v6 + 14) = 0uLL;
  *((_OWORD *)v6 + 15) = 0uLL;
  *((_DWORD *)v6 + 46) = a2;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3842B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3842B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::CVAEngine::convolution_kernel::set_weights()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob<float,4>::ptr blob");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192884B64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::CVAEngine::convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 696) = v2;
  long long v4 = *(std::__shared_weak_count **)(a1 + 704);
  *(void *)(a1 + 704) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::CVAEngine::convolution_kernel::__set_weights_finalize(void *a1)
{
  if (!a1[76])
  {
    Espresso::HXEngine::hx_quantization_converter_helper::get_conv_weights((Espresso::HXEngine::hx_quantization_converter_helper *)&v16, (Espresso::generic_convolution_kernel *)(a1 + 81), (uint64_t)a1);
    uint64_t v3 = v16;
    uint64_t v2 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[70] = v3;
    long long v4 = (std::__shared_weak_count *)a1[71];
    a1[71] = v2;
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
    uint64_t v6 = v18;
    long long v5 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[72] = v6;
    uint64_t v7 = (std::__shared_weak_count *)a1[73];
    a1[73] = v5;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    uint64_t v8 = v20;
    uint64_t v9 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[74] = v8;
    long long v10 = (std::__shared_weak_count *)a1[75];
    a1[75] = v9;
    if (v10)
    {
      nitro::nitro_function::nitro_function(v10);
      uint64_t v8 = a1[74];
    }
    if (v8 && *(_DWORD *)(v8 + 8))
    {
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v8 + 16);
      do
        *(_DWORD *)(v12 + 4 * v11++) += 8;
      while (v11 < *(unsigned int *)(v8 + 8));
    }
    uint64_t v14 = v22;
    long long v13 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[76] = v14;
    long long v15 = (std::__shared_weak_count *)a1[77];
    a1[77] = v13;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
}

void Espresso::CVAEngine::convolution_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6 = a5;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    long long v10 = a3;
    switch(*((unsigned char *)a3 + 23))
    {
      case 7:
        if (*(_DWORD *)a3 != 1650423912 || *(_DWORD *)((char *)a3 + 3) != 1935763810) {
          goto LABEL_76;
        }
        goto LABEL_15;
      case 9:
        if (*a3 != 0x656E72656B5F7868 || *((unsigned char *)a3 + 8) != 108) {
          goto LABEL_76;
        }
        goto LABEL_46;
      case 0xA:
        goto LABEL_34;
      case 0xB:
        if (*a3 == 0x656C6163735F7868 && *(uint64_t *)((char *)a3 + 3) == 0x74756F656C616373) {
          goto LABEL_61;
        }
        if (*a3 != 0x74666968735F7868 || *(uint64_t *)((char *)a3 + 3) != 0x74756F7466696873) {
          goto LABEL_76;
        }
        goto LABEL_59;
      default:
        goto LABEL_76;
    }
  }
  switch(a3[1])
  {
    case 7:
      if (*(_DWORD *)*a3 != 1650423912 || *(_DWORD *)(*a3 + 3) != 1935763810) {
        goto LABEL_76;
      }
LABEL_15:
      std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v84, *(_DWORD *)(a1 + 344), 1, 1, 1);
      std::string::size_type v13 = v84.__r_.__value_.__r.__words[0];
      uint64_t v14 = *(std::__shared_weak_count **)(a1 + 568);
      *(_OWORD *)(a1 + 560) = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
      if (v14)
      {
        nitro::nitro_function::nitro_function(v14);
        std::string::size_type v15 = *(void *)(a1 + 560);
      }
      else
      {
        std::string::size_type v15 = v13;
      }
      if (v6 != 4 * *(int *)(v15 + 8))
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v81, v6);
        long long v41 = std::string::insert(&v81, 0, "Unexpected size ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::string v43 = std::string::append(&v82, "/");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v80, 4 * *(int *)(*(void *)(a1 + 560) + 8));
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v45 = &v80;
        }
        else {
          unint64_t v45 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v80.__r_.__value_.__l.__size_;
        }
        std::string v47 = std::string::append(&v83, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v84);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_90;
    case 9:
      if (*(void *)*a3 != 0x656E72656B5F7868 || *(unsigned char *)(*a3 + 8) != 108) {
        goto LABEL_76;
      }
LABEL_46:
      if (a6)
      {
        uint64_t v26 = *a6;
        if (*a6)
        {
          long long v27 = (std::__shared_weak_count *)a6[1];
          if (v27)
          {
            char v28 = 0;
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v78 = v26;
            long long v79 = v27;
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_65;
          }
        }
      }
      else
      {
        uint64_t v26 = 0;
      }
      long long v27 = 0;
      uint64_t v78 = v26;
      long long v79 = 0;
      char v28 = 1;
LABEL_65:
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<signed char,1>(&v84, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v78, *(_DWORD *)(a1 + 348) * *(_DWORD *)(a1 + 344) * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356), (a4 & 0x3F) == 0);
      uint64_t v39 = *(std::__shared_weak_count **)(a1 + 616);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
      if (v39) {
        nitro::nitro_function::nitro_function(v39);
      }
      if (v79) {
        nitro::nitro_function::nitro_function(v79);
      }
      if ((v28 & 1) == 0)
      {
        nitro::nitro_function::nitro_function(v27);
      }
      return;
    case 10:
      long long v10 = (uint64_t *)*a3;
LABEL_34:
      uint64_t v19 = *v10;
      int v20 = *((unsigned __int16 *)v10 + 4);
      if (v19 == 0x61727478655F7868 && v20 == 26207)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v84, 1, 1, 1, 1);
        std::string::size_type v22 = v84.__r_.__value_.__r.__words[0];
        uint64_t v23 = *(std::__shared_weak_count **)(a1 + 632);
        *(_OWORD *)(a1 + 624) = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
        if (v23)
        {
          nitro::nitro_function::nitro_function(v23);
          std::string::size_type v24 = *(void *)(a1 + 624);
        }
        else
        {
          std::string::size_type v24 = v22;
        }
        if (v6 != 4 * *(int *)(v24 + 8))
        {
          std::string v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v81, v6);
          long long v52 = std::string::insert(&v81, 0, "Unexpected size ");
          long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v82.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          unsigned int v54 = std::string::append(&v82, "/");
          long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          v83.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v80, *(int *)(*(void *)(a1 + 608) + 8));
          if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v56 = &v80;
          }
          else {
            std::string v56 = (std::string *)v80.__r_.__value_.__r.__words[0];
          }
          if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v57 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v57 = v80.__r_.__value_.__l.__size_;
          }
          std::string v58 = std::string::append(&v83, (const std::string::value_type *)v56, v57);
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v84.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v51, &v84);
          __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        memcpy(*(void **)(v24 + 16), a4, v6);
      }
      goto LABEL_76;
    case 11:
      __int16 v29 = (uint64_t *)*a3;
      if (*(void *)*a3 == 0x656C6163735F7868 && *(void *)(*a3 + 3) == 0x74756F656C616373)
      {
LABEL_61:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v84, *(_DWORD *)(a1 + 344), 1, 1, 1);
        std::string::size_type v37 = v84.__r_.__value_.__r.__words[0];
        long long v38 = *(std::__shared_weak_count **)(a1 + 584);
        *(_OWORD *)(a1 + 576) = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
        if (v38)
        {
          nitro::nitro_function::nitro_function(v38);
          std::string::size_type v15 = *(void *)(a1 + 576);
        }
        else
        {
          std::string::size_type v15 = v37;
        }
        if (v6 != 4 * *(int *)(v15 + 8))
        {
          std::string v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v81, v6);
          std::string v61 = std::string::insert(&v81, 0, "Unexpected size ");
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v82.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          uint64_t v63 = std::string::append(&v82, "/");
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v83.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v80, 4 * *(int *)(*(void *)(a1 + 576) + 8));
          if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v65 = &v80;
          }
          else {
            std::string v65 = (std::string *)v80.__r_.__value_.__r.__words[0];
          }
          if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v66 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v66 = v80.__r_.__value_.__l.__size_;
          }
          std::string v67 = std::string::append(&v83, (const std::string::value_type *)v65, v66);
          long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          v84.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v60, &v84);
          __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
LABEL_90:
        std::string v49 = *(void **)(v15 + 16);
        memcpy(v49, a4, v6);
      }
      else
      {
        uint64_t v31 = *v29;
        uint64_t v32 = *(uint64_t *)((char *)v29 + 3);
        if (v31 == 0x74666968735F7868 && v32 == 0x74756F7466696873)
        {
LABEL_59:
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(&v84, *(_DWORD *)(a1 + 344), 1, 1, 1);
          std::string::size_type v34 = v84.__r_.__value_.__r.__words[0];
          char v35 = *(std::__shared_weak_count **)(a1 + 600);
          *(_OWORD *)(a1 + 592) = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          if (v35)
          {
            nitro::nitro_function::nitro_function(v35);
            std::string::size_type v36 = *(void *)(a1 + 592);
          }
          else
          {
            std::string::size_type v36 = v34;
          }
          if (v6 != 4 * *(int *)(v36 + 8))
          {
            std::string v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v81, v6);
            int v70 = std::string::insert(&v81, 0, "Unexpected size ");
            long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v82.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            unsigned int v72 = std::string::append(&v82, "/");
            long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v83.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v80, 4 * *(int *)(*(void *)(a1 + 592) + 8));
            if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v74 = &v80;
            }
            else {
              uint64_t v74 = (std::string *)v80.__r_.__value_.__r.__words[0];
            }
            if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v75 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v75 = v80.__r_.__value_.__l.__size_;
            }
            uint64_t v76 = std::string::append(&v83, (const std::string::value_type *)v74, v75);
            long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v69, &v84);
            __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          memcpy(*(void **)(v36 + 16), a4, v6);
          if (v6)
          {
            std::string v50 = *(_DWORD **)(*(void *)(a1 + 592) + 16);
            do
            {
              *v50++ += 8;
              --v6;
            }
            while (v6);
          }
        }
        else
        {
LABEL_76:
          Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 648), a3, a4, v6);
        }
      }
      return;
    default:
      goto LABEL_76;
  }
}

void sub_1928855AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v35 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v36);
  goto LABEL_14;
}

void sub_1928856A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if ((v11 & 1) == 0) {
    nitro::nitro_function::nitro_function(v10);
  }
  JUMPOUT(0x1928856A0);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<signed char,1>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a6;
  char v11 = (std::__shared_weak_count *)a6[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<signed char,1>(a1, a2, a4, a5, v10, (uint64_t)v11, a7, a8);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (a3)
  {
    nitro::nitro_function::nitro_function(a3);
  }
}

void sub_192885784(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::CVAEngine::convolution_kernel::clear_weights(Espresso::CVAEngine::convolution_kernel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 71);
  long long v3 = 0uLL;
  *((_OWORD *)this + 35) = 0u;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    long long v3 = 0uLL;
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 73);
  *((_OWORD *)this + 36) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 75);
  long long v6 = 0uLL;
  *((_OWORD *)this + 37) = 0u;
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
    long long v6 = 0uLL;
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 77);
  *((_OWORD *)this + 38) = v6;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 79);
  *((_OWORD *)this + 39) = 0u;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  *((_DWORD *)this + 160) = 0;
}

void Espresso::CVAEngine::convolution_kernel::share_weights(void *a1, uint64_t a2)
{
  if (!*(void *)a2
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v5 = v4;
  long long v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v4[70];
  uint64_t v8 = v4[71];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[70] = v7;
  uint64_t v9 = (std::__shared_weak_count *)a1[71];
  a1[71] = v8;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = v5[72];
  uint64_t v11 = v5[73];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a1[72] = v10;
  uint64_t v12 = (std::__shared_weak_count *)a1[73];
  a1[73] = v11;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v13 = v5[74];
  uint64_t v14 = v5[75];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  a1[74] = v13;
  std::string::size_type v15 = (std::__shared_weak_count *)a1[75];
  a1[75] = v14;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  uint64_t v16 = v5[76];
  uint64_t v17 = v5[77];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  a1[76] = v16;
  uint64_t v18 = (std::__shared_weak_count *)a1[77];
  a1[77] = v17;
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  uint64_t v19 = v5[78];
  uint64_t v20 = v5[79];
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  a1[78] = v19;
  uint64_t v21 = (std::__shared_weak_count *)a1[79];
  a1[79] = v20;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_1928859FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::CVAEngine::convolution_kernel::__launch(uint64_t a1, uint64_t a2)
{
  long long v4 = *(const void **)(a1 + 8);
  if (v4
  {
    uint64_t v93 = *(std::__shared_weak_count **)(a1 + 16);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v93 = 0;
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v97 = v6[16];
    nitro::nitro_function::nitro_function(v7);
  }
  else
  {
    uint64_t v97 = v6[16];
  }
  uint64_t v8 = getkCVANetOutputShapeSame();
  if (*(unsigned __int16 *)(a1 + 376) - 2 < 2
    || (uint64_t v9 = v8, !*(_WORD *)(a1 + 376))
    && !*(_WORD *)(a1 + 384)
    && !*(_WORD *)(a1 + 386)
    && !*(_WORD *)(a1 + 388)
    && !*(_WORD *)(a1 + 390))
  {
    uint64_t v9 = getkCVANetOutputShapeValid();
  }
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE38C5C0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  *((void *)v10 + 5) = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const UInt8 **)(*(void *)(a1 + 608) + 16), *(int *)(*(void *)(a1 + 608) + 8), (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  *((void *)v10 + 6) = CFDataCreateWithBytesNoCopy(v11, *(const UInt8 **)(*(void *)(a1 + 560) + 16), 4 * *(int *)(*(void *)(a1 + 560) + 8), v12);
  *((void *)v10 + 7) = CFDataCreateWithBytesNoCopy(v11, *(const UInt8 **)(*(void *)(a1 + 576) + 16), 4 * *(int *)(*(void *)(a1 + 576) + 8), v12);
  *((void *)v10 + 8) = CFDataCreateWithBytesNoCopy(v11, *(const UInt8 **)(*(void *)(a1 + 592) + 16), 4 * *(int *)(*(void *)(a1 + 592) + 8), v12);
  uint64_t v13 = *(const char ***)(v97 + 104);
  if (!v13)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v100, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    long long v59 = std::string::insert(&v100, 0, "CVA EXPECT_EQ failed ");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    std::string v61 = std::string::append(&v101, ":");
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v99, 116);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v63 = &v99;
    }
    else {
      uint64_t v63 = (std::string *)v99.__r_.__value_.__r.__words[0];
    }
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v99.__r_.__value_.__l.__size_;
    }
    std::string v65 = std::string::append(&v102, (const std::string::value_type *)v63, size);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v103);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(void *)(v97 + 112))
  {
    std::string v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v100, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    long long v68 = std::string::insert(&v100, 0, "CVA EXPECT_EQ failed ");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    int v70 = std::string::append(&v101, ":");
    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v99, 117);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v72 = &v99;
    }
    else {
      unsigned int v72 = (std::string *)v99.__r_.__value_.__r.__words[0];
    }
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v73 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v73 = v99.__r_.__value_.__l.__size_;
    }
    uint64_t v74 = std::string::append(&v102, (const std::string::value_type *)v72, v73);
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v67, &v103);
    __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v14 = *v13;
  if ((*v13)[23] < 0) {
    uint64_t v14 = *(const char **)v14;
  }
  *((void *)v10 + 9) = CFStringCreateWithCString(v11, v14, 0);
  std::string::size_type v15 = **(const char ***)(v97 + 112);
  if (v15[23] < 0) {
    std::string::size_type v15 = *(const char **)v15;
  }
  int v87 = (void *)v9;
  *((void *)v10 + 10) = CFStringCreateWithCString(v11, v15, 0);
  value = (void *)*((void *)v10 + 9);
  uint64_t v16 = (const void *)getkCVANetAcceleratorISP();
  uint64_t v91 = (void *)getkCVANetFormatUInt8();
  uint64_t v89 = (void *)getkCVANetFormatInt8();
  int v17 = *(_DWORD *)(a1 + 356);
  int v18 = *(_DWORD *)(a1 + 348);
  uint64_t v19 = *(int *)(a1 + 344);
  unsigned int v85 = *(__int16 *)(a1 + 398);
  unsigned int v86 = *(__int16 *)(a1 + 396);
  CFDataRef v20 = (const __CFData *)*((void *)v10 + 5);
  CFDataRef v95 = (const __CFData *)*((void *)v10 + 7);
  CFDataRef theData = (const __CFData *)*((void *)v10 + 6);
  CFDataRef v94 = (const __CFData *)*((void *)v10 + 8);
  uint64_t v90 = (void *)*((void *)v10 + 10);
  int v21 = *(_DWORD *)(a1 + 640);
  LODWORD(v102.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 352);
  LODWORD(v101.__r_.__value_.__l.__data_) = v17;
  LODWORD(v100.__r_.__value_.__l.__data_) = v18;
  LODWORD(v99.__r_.__value_.__l.__data_) = v19;
  valuePtr[0] = 0;
  int v104 = v21;
  CFDataRef v88 = v20;
  CFIndex Length = CFDataGetLength(v20);
  CFIndex v23 = CFDataGetLength(theData);
  CFIndex v24 = CFDataGetLength(v95);
  CFIndex v25 = CFDataGetLength(v94);
  if (Length != LODWORD(v102.__r_.__value_.__l.__data_) * v18 * v17 * v19
    || (uint64_t v26 = 4 * v19, v23 != 4 * v19)
    || v24 != v26
    || v25 != v26)
  {
    *((void *)v10 + 4) = 0;
    uint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v100, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    long long v77 = std::string::insert(&v100, 0, "CVA EXPECT_EQ failed ");
    long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v78;
    v77->__r_.__value_.__l.__size_ = 0;
    v77->__r_.__value_.__r.__words[2] = 0;
    v77->__r_.__value_.__r.__words[0] = 0;
    long long v79 = std::string::append(&v101, ":");
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v99, 148);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v81 = &v99;
    }
    else {
      std::string v81 = (std::string *)v99.__r_.__value_.__r.__words[0];
    }
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v82 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v82 = v99.__r_.__value_.__l.__size_;
    }
    std::string v83 = std::string::append(&v102, (const std::string::value_type *)v81, v82);
    long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v76, &v103);
    __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  char v28 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v29 = (const void *)getkCVANetUnitType[0]();
  uint64_t v30 = (const void *)getkCVANetUnitTypeConvolution[0]();
  CFDictionaryAddValue(Mutable, v29, v30);
  uint64_t v31 = (const void *)getkCVANetUnitAcceleratorType[0]();
  CFDictionaryAddValue(Mutable, v31, v16);
  uint64_t v32 = (const void *)getkCVANetUnitName[0]();
  CFDictionaryAddValue(Mutable, v32, value);
  uint64_t v33 = (const void *)getkCVANetUnitDataType[0]();
  CFDictionaryAddValue(Mutable, v33, v91);
  std::string::size_type v34 = (const void *)getkCVANetUnitBottomName[0]();
  CFDictionaryAddValue(Mutable, v34, v90);
  int v35 = (const void *)getkCVANetUnitBottomOutputIndex[0]();
  CFNumberRef v36 = CFNumberCreate(v11, kCFNumberSInt32Type, (char *)valuePtr + 4);
  CFDictionaryAddValue(Mutable, v35, v36);
  CFRelease(v36);
  uint64_t v37 = (const void *)getkCVANetUnitBottomOutputChannelStart[0]();
  CFNumberRef v38 = CFNumberCreate(v11, kCFNumberSInt32Type, valuePtr);
  CFDictionaryAddValue(Mutable, v37, v38);
  CFRelease(v38);
  uint64_t v39 = (const void *)getkCVANetUnitInputChannels[0]();
  CFNumberRef v40 = CFNumberCreate(v11, kCFNumberSInt32Type, &v100);
  CFDictionaryAddValue(Mutable, v39, v40);
  CFRelease(v40);
  long long v41 = (const void *)getkCVANetUnitOutputChannels[0]();
  CFNumberRef v42 = CFNumberCreate(v11, kCFNumberSInt32Type, &v99);
  CFDictionaryAddValue(Mutable, v41, v42);
  CFRelease(v42);
  std::string v43 = (const void *)getkCVANetUnitKernelType[0]();
  CFDictionaryAddValue(v28, v43, v89);
  long long v44 = (const void *)getkCVANetUnitOffsetOut[0]();
  CFDictionaryAddValue(v28, v44, theData);
  unint64_t v45 = (const void *)getkCVANetUnitKernel[0]();
  CFDictionaryAddValue(v28, v45, v88);
  uint64_t v46 = (const void *)getkCVANetUnitKernelWidth[0]();
  CFNumberRef v47 = CFNumberCreate(v11, kCFNumberSInt32Type, &v102);
  CFDictionaryAddValue(v28, v46, v47);
  CFRelease(v47);
  long long v48 = (const void *)getkCVANetUnitKernelHeight[0]();
  CFNumberRef v49 = CFNumberCreate(v11, kCFNumberSInt32Type, &v101);
  CFDictionaryAddValue(v28, v48, v49);
  CFRelease(v49);
  std::string v50 = (const void *)getkCVANetUnitOffsetIn[0]();
  CFNumberRef v51 = CFNumberCreate(v11, kCFNumberSInt32Type, &v104);
  CFDictionaryAddValue(v28, v50, v51);
  CFRelease(v51);
  long long v52 = (const void *)getkCVANetUnitScaleOut[0]();
  CFDictionaryAddValue(v28, v52, v95);
  long long v53 = (const void *)getkCVANetUnitShiftOut[0]();
  CFDictionaryAddValue(v28, v53, v94);
  unsigned int v54 = (const void *)getkCVANetUnitStep[0]();
  long long v55 = operator new(8uLL);
  *long long v55 = v86 | ((unint64_t)v85 << 32);
  v103.__r_.__value_.__l.__size_ = (std::string::size_type)(v55 + 1);
  v103.__r_.__value_.__r.__words[2] = (std::string::size_type)(v55 + 1);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  dictionaryAddVector<int>(v28, v54, &v103.__r_.__value_.__l.__data_);
  operator delete(v55);
  std::string v56 = (const void *)getkCVANetUnitOutputShape[0]();
  CFDictionaryAddValue(v28, v56, v87);
  std::string::size_type v57 = (const void *)getkCVANetUnitParams[0]();
  CFDictionaryAddValue(Mutable, v57, v28);
  CFRelease(v28);
  *((void *)v10 + 4) = Mutable;
  *(void *)&long long v98 = v10 + 24;
  *((void *)&v98 + 1) = v10;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  Espresso::CVAEngine::CVACompiler::add_operation(v97, &v98);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v10);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v10);
  if (v93) {
    nitro::nitro_function::nitro_function(v93);
  }
}

void sub_192886468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v45 - 105) < 0) {
    operator delete(*(void **)(v45 - 128));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 137) < 0) {
    operator delete(*(void **)(v45 - 160));
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v44 & 1) == 0)
    {
LABEL_14:
      nitro::nitro_function::nitro_function(v42);
      if (a18) {
        nitro::nitro_function::nitro_function(a18);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v43);
  goto LABEL_14;
}

uint64_t initValkCVANetFormatInt8(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_9848);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetFormatInt8");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetFormatInt8 = result;
  }
  else
  {
    uint64_t result = constantValkCVANetFormatInt8;
  }
  getkCVANetFormatInt8 = kCVANetFormatInt8Function;
  return result;
}

uint64_t kCVANetFormatInt8Function(void)
{
  return constantValkCVANetFormatInt8;
}

void *___ZL15AppleCVALibraryv_block_invoke_9853()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/AppleCVA.framework/AppleCVA", 2);
  AppleCVALibrary(void)::sLib = (uint64_t)result;
  return result;
}

uint64_t initValkCVANetFormatUInt8(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_9848);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetFormatUInt8");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetFormatUInt8 = result;
  }
  else
  {
    uint64_t result = constantValkCVANetFormatUInt8;
  }
  getkCVANetFormatUInt8 = kCVANetFormatUInt8Function;
  return result;
}

uint64_t kCVANetFormatUInt8Function(void)
{
  return constantValkCVANetFormatUInt8;
}

uint64_t initValkCVANetAcceleratorISP(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_9848);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetAcceleratorISP");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetAcceleratorISP = result;
  }
  else
  {
    uint64_t result = constantValkCVANetAcceleratorISP;
  }
  getkCVANetAcceleratorISP = kCVANetAcceleratorISPFunction;
  return result;
}

uint64_t kCVANetAcceleratorISPFunction(void)
{
  return constantValkCVANetAcceleratorISP;
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler::op_t>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  long long v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = *(const void **)(a1 + 56);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 64);
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 80));
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler::op_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C5C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler::op_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C5C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t initValkCVANetOutputShapeValid(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_9848);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetOutputShapeValid");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetOutputShapeValid = result;
  }
  else
  {
    uint64_t result = constantValkCVANetOutputShapeValid;
  }
  getkCVANetOutputShapeValid = kCVANetOutputShapeValidFunction;
  return result;
}

uint64_t kCVANetOutputShapeValidFunction(void)
{
  return constantValkCVANetOutputShapeValid;
}

uint64_t initValkCVANetOutputShapeSame(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_9848);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetOutputShapeSame");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetOutputShapeSame = result;
  }
  else
  {
    uint64_t result = constantValkCVANetOutputShapeSame;
  }
  getkCVANetOutputShapeSame = kCVANetOutputShapeSameFunction;
  return result;
}

uint64_t kCVANetOutputShapeSameFunction(void)
{
  return constantValkCVANetOutputShapeSame;
}

void Espresso::CVAEngine::convolution_kernel::~convolution_kernel(Espresso::CVAEngine::convolution_kernel *this)
{
  Espresso::CVAEngine::convolution_kernel::~convolution_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t vars8;

  *(void *)this = &unk_1EE371E08;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 88);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 86);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 84);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 82);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

void Espresso::CVAEngine::pool_kernel::__set_weights_finalize(void *a1)
{
  if (!a1[56])
  {
    Espresso::HXEngine::hx_quantization_converter_helper::get_pool_weights((Espresso::HXEngine::hx_quantization_converter_helper *)&v5, a1 + 59);
    uint64_t v3 = v5;
    uint64_t v2 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v4 = (std::__shared_weak_count *)a1[57];
    a1[56] = v3;
    a1[57] = v2;
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
  }
}

void *Espresso::CVAEngine::pool_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a3 + 23) != 10)
    {
      uint64_t v9 = a3;
      if (*((unsigned char *)a3 + 23) != 14) {
        goto LABEL_36;
      }
      goto LABEL_8;
    }
    if (*a3 != 0x61727478655F7868 || *((_WORD *)a3 + 4) != 26207) {
      goto LABEL_36;
    }
LABEL_26:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v50, 1, 1, 1, 1);
    std::string::size_type v19 = v50.__r_.__value_.__r.__words[0];
    CFDataRef v20 = *(std::__shared_weak_count **)(a1 + 440);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
    if (v20)
    {
      nitro::nitro_function::nitro_function(v20);
      std::string::size_type v21 = *(void *)(a1 + 432);
    }
    else
    {
      std::string::size_type v21 = v19;
    }
    if (a5 != 4 * *(int *)(v21 + 8))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v36 = a5;
      uint64_t v37 = exception;
      std::to_string(&v47, v36);
      CFNumberRef v38 = std::string::insert(&v47, 0, "Unexpected size ");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      CFNumberRef v40 = std::string::append(&v48, "/");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 432) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFNumberRef v42 = &v46;
      }
      else {
        CFNumberRef v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      int v44 = std::string::append(&v49, (const std::string::value_type *)v42, size);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v37, &v50);
      __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    memcpy(*(void **)(v21 + 16), a4, a5);
    goto LABEL_36;
  }
  uint64_t v10 = a3[1];
  if (v10 == 10)
  {
    if (*(void *)*a3 != 0x61727478655F7868 || *(_WORD *)(*a3 + 8) != 26207) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  if (v10 != 14)
  {
LABEL_36:
    return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 472), a3, a4, a5);
  }
  uint64_t v9 = (uint64_t *)*a3;
LABEL_8:
  uint64_t v11 = *v9;
  uint64_t v12 = *(uint64_t *)((char *)v9 + 6);
  if (v11 != 0x656C6163735F7868 || v12 != 0x74666968735F656CLL) {
    goto LABEL_36;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v50, 2, 1, 1, 1);
  std::string::size_type v14 = v50.__r_.__value_.__r.__words[0];
  std::string::size_type v15 = *(std::__shared_weak_count **)(a1 + 456);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
  if (v15)
  {
    nitro::nitro_function::nitro_function(v15);
    std::string::size_type v16 = *(void *)(a1 + 448);
  }
  else
  {
    std::string::size_type v16 = v14;
  }
  if (a5 != 4 * *(int *)(v16 + 8))
  {
    CFIndex v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v25 = a5;
    uint64_t v26 = v24;
    std::to_string(&v47, v25);
    long long v27 = std::string::insert(&v47, 0, "Unexpected size ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    __int16 v29 = std::string::append(&v48, "/");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 448) + 8));
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &v46;
    }
    else {
      uint64_t v31 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v46.__r_.__value_.__l.__size_;
    }
    uint64_t v33 = std::string::append(&v49, (const std::string::value_type *)v31, v32);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, &v50);
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::size_type v22 = *(void **)(v16 + 16);

  return memcpy(v22, a4, a5);
}

void sub_192886EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v34) {
    __cxa_free_exception(v33);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::CVAEngine::pool_kernel::clear_weights(Espresso::CVAEngine::pool_kernel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 55);
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::CVAEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8
  {
    uint64_t v97 = *(std::__shared_weak_count **)(a1 + 16);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v97 = 0;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 8);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v99 = v10[16];
    nitro::nitro_function::nitro_function(v11);
  }
  else
  {
    uint64_t v99 = v10[16];
  }
  uint64_t v12 = *a4;
  if (*(void *)v12)
  {
    if (v13)
    {
      uint64_t v14 = *(void *)(v12 + 8);
      if (v14)
      {
        unint64_t v96 = *(std::__shared_weak_count **)(v12 + 8);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  unint64_t v96 = 0;
LABEL_15:
  uint64_t v15 = *a3;
  if (!*(void *)v15)
  {
    std::string::size_type v16 = 0;
LABEL_20:
    CFDataRef v95 = 0;
    goto LABEL_21;
  }
  if (!v16) {
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)(v15 + 8);
  if (!v17) {
    goto LABEL_20;
  }
  CFDataRef v95 = *(std::__shared_weak_count **)(v15 + 8);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
LABEL_21:
  value = (void *)getkCVANetOutputShapeSame();
  if (*(unsigned __int16 *)(a1 + 340) - 2 < 2
    || !*(_WORD *)(a1 + 340)
    && !*(_WORD *)(a1 + 348)
    && !*(_WORD *)(a1 + 350)
    && !*(_WORD *)(a1 + 352)
    && !*(_WORD *)(a1 + 354))
  {
    value = (void *)getkCVANetOutputShapeValid();
  }
  int v18 = (char *)operator new(0x58uLL);
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)int v18 = &unk_1EE38C5C0;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  std::string::size_type v19 = *(const char ***)(v99 + 104);
  if (!v19)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v102, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    uint64_t v76 = std::string::insert(&v102, 0, "CVA EXPECT_EQ failed ");
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    long long v78 = std::string::append(&v103, ":");
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v101, 221);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v80 = &v101;
    }
    else {
      long long v80 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v101.__r_.__value_.__l.__size_;
    }
    std::string::size_type v82 = std::string::append(&v104, (const std::string::value_type *)v80, size);
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v105);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(void *)(v99 + 112))
  {
    long long v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v102, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    unsigned int v85 = std::string::insert(&v102, 0, "CVA EXPECT_EQ failed ");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    int v87 = std::string::append(&v103, ":");
    long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v101, 222);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v89 = &v101;
    }
    else {
      uint64_t v89 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v90 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v90 = v101.__r_.__value_.__l.__size_;
    }
    uint64_t v91 = std::string::append(&v104, (const std::string::value_type *)v89, v90);
    long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v84, &v105);
    __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  std::string::size_type v21 = *v19;
  if ((*v19)[23] < 0) {
    std::string::size_type v21 = *(const char **)v21;
  }
  *((void *)v18 + 9) = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v21, 0);
  std::string::size_type v22 = **(const char ***)(v99 + 112);
  if (v22[23] < 0) {
    std::string::size_type v22 = *(const char **)v22;
  }
  *((void *)v18 + 10) = CFStringCreateWithCString(v20, v22, 0);
  uint64_t v23 = getkCVANetPoolingTypeMax();
  int v24 = *(_DWORD *)(a1 + 304);
  if (v24)
  {
    unint64_t v25 = (const void *)v23;
  }
  else
  {
    unint64_t v25 = (const void *)getkCVANetPoolingTypeAvg();
    int v24 = *(_DWORD *)(a1 + 304);
  }
  if (v24 == 2)
  {
    unint64_t v25 = (const void *)getkCVANetPoolingTypeL2();
    int v24 = *(_DWORD *)(a1 + 304);
  }
  uint64_t v26 = *(int **)(*(void *)(a1 + 448) + 16);
  int v28 = *v26;
  int v27 = v26[1];
  if (v24)
  {
    int v94 = v27;
  }
  else
  {
    float v29 = ldexp(1.0, -v27) * (double)v28;
    float v30 = 1.0 / (double)(*(_DWORD *)(a1 + 312) * *(_DWORD *)(a1 + 308)) * v29;
    double v31 = v30;
    int v32 = vcvtmd_s64_f64(log2(4096.0 / v30));
    if (v32 >= 20) {
      int v32 = 20;
    }
    if (v32 <= 8) {
      int v33 = 8;
    }
    else {
      int v33 = v32;
    }
    int v94 = v33;
    int v28 = vcvtpd_s64_f64(ldexp(1.0, v33) * v31);
  }
  char v34 = (const void *)*((void *)v18 + 9);
  uint64_t v35 = (const void *)getkCVANetAcceleratorISP();
  unint64_t v36 = (const void *)getkCVANetFormatUInt8();
  int v37 = *(_DWORD *)(a1 + 312);
  int v38 = v13[4];
  int v39 = v16[4];
  uint64_t v93 = *(unsigned int *)(a1 + 324);
  CFNumberRef v40 = (const void *)*((void *)v18 + 10);
  int v41 = *(_DWORD *)(a1 + 464);
  LODWORD(v104.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 308);
  LODWORD(v103.__r_.__value_.__l.__data_) = v37;
  LODWORD(v102.__r_.__value_.__l.__data_) = v38;
  LODWORD(v101.__r_.__value_.__l.__data_) = v39;
  int v108 = v28;
  v109[0] = 0;
  uint64_t valuePtr = 0;
  int v106 = v41;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  std::string v43 = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v44 = (const void *)getkCVANetUnitType[0]();
  long long v45 = (const void *)getkCVANetUnitTypePooling[0]();
  CFDictionaryAddValue(Mutable, v44, v45);
  std::string v46 = (const void *)getkCVANetUnitAcceleratorType[0]();
  CFDictionaryAddValue(Mutable, v46, v35);
  std::string v47 = (const void *)getkCVANetUnitName[0]();
  CFDictionaryAddValue(Mutable, v47, v34);
  std::string v48 = (const void *)getkCVANetUnitDataType[0]();
  CFDictionaryAddValue(Mutable, v48, v36);
  std::string v49 = (const void *)getkCVANetUnitBottomName[0]();
  CFDictionaryAddValue(Mutable, v49, v40);
  std::string v50 = (const void *)getkCVANetUnitBottomOutputIndex[0]();
  CFNumberRef v51 = CFNumberCreate(v20, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  CFDictionaryAddValue(Mutable, v50, v51);
  CFRelease(v51);
  long long v52 = (const void *)getkCVANetUnitBottomOutputChannelStart[0]();
  CFNumberRef v53 = CFNumberCreate(v20, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, v52, v53);
  CFRelease(v53);
  unsigned int v54 = (const void *)getkCVANetUnitInputChannels[0]();
  CFNumberRef v55 = CFNumberCreate(v20, kCFNumberSInt32Type, &v102);
  CFDictionaryAddValue(Mutable, v54, v55);
  CFRelease(v55);
  std::string v56 = (const void *)getkCVANetUnitOutputChannels[0]();
  CFNumberRef v57 = CFNumberCreate(v20, kCFNumberSInt32Type, &v101);
  CFDictionaryAddValue(Mutable, v56, v57);
  CFRelease(v57);
  std::string v58 = (const void *)getkCVANetUnitPoolingType[0]();
  CFDictionaryAddValue(v43, v58, v25);
  long long v59 = (const void *)getkCVANetUnitKernelWidth[0]();
  CFNumberRef v60 = CFNumberCreate(v20, kCFNumberSInt32Type, &v104);
  CFDictionaryAddValue(v43, v59, v60);
  CFRelease(v60);
  std::string v61 = (const void *)getkCVANetUnitKernelHeight[0]();
  CFNumberRef v62 = CFNumberCreate(v20, kCFNumberSInt32Type, &v103);
  CFDictionaryAddValue(v43, v61, v62);
  CFRelease(v62);
  uint64_t v63 = (const void *)getkCVANetUnitOffsetIn[0]();
  CFNumberRef v64 = CFNumberCreate(v20, kCFNumberSInt32Type, &v106);
  CFDictionaryAddValue(v43, v63, v64);
  CFRelease(v64);
  std::string v65 = (const void *)getkCVANetUnitOffsetOut[0]();
  CFNumberRef v66 = CFNumberCreate(v20, kCFNumberSInt32Type, v109);
  CFDictionaryAddValue(v43, v65, v66);
  CFRelease(v66);
  std::string v67 = (const void *)getkCVANetUnitScaleOut[0]();
  CFNumberRef v68 = CFNumberCreate(v20, kCFNumberSInt32Type, &v108);
  CFDictionaryAddValue(v43, v67, v68);
  CFRelease(v68);
  long long v69 = (const void *)getkCVANetUnitShiftOut[0]();
  v105.__r_.__value_.__r.__words[0] = (v94 - 8);
  CFNumberRef v70 = CFNumberCreate(v20, kCFNumberSInt64Type, &v105);
  CFDictionaryAddValue(v43, v69, v70);
  CFRelease(v70);
  long long v71 = (const void *)getkCVANetUnitStep[0]();
  unsigned int v72 = operator new(8uLL);
  void *v72 = v93 | (v93 << 32);
  v105.__r_.__value_.__l.__size_ = (std::string::size_type)(v72 + 1);
  v105.__r_.__value_.__r.__words[2] = (std::string::size_type)(v72 + 1);
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  dictionaryAddVector<int>(v43, v71, &v105.__r_.__value_.__l.__data_);
  operator delete(v72);
  std::string::size_type v73 = (const void *)getkCVANetUnitOutputShape[0]();
  CFDictionaryAddValue(v43, v73, value);
  uint64_t v74 = (const void *)getkCVANetUnitParams[0]();
  CFDictionaryAddValue(Mutable, v74, v43);
  CFRelease(v43);
  *((void *)v18 + 4) = Mutable;
  *(void *)&long long v100 = v18 + 24;
  *((void *)&v100 + 1) = v18;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
  Espresso::CVAEngine::CVACompiler::add_operation(v99, &v100);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v18);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v18);
  if (v95) {
    nitro::nitro_function::nitro_function(v95);
  }
  if (v96) {
    nitro::nitro_function::nitro_function(v96);
  }
  if (v97) {
    nitro::nitro_function::nitro_function(v97);
  }
}

void sub_192887A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v46 - 137) < 0) {
    operator delete(*(void **)(v46 - 160));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    if ((v44 & 1) == 0)
    {
LABEL_14:
      nitro::nitro_function::nitro_function(v45);
      if (a12) {
        nitro::nitro_function::nitro_function(a12);
      }
      if (a13) {
        nitro::nitro_function::nitro_function(a13);
      }
      if (a14) {
        nitro::nitro_function::nitro_function(a14);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v43);
  goto LABEL_14;
}

uint64_t initValkCVANetPoolingTypeL2(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_9848);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetPoolingTypeL2");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetPoolingTypeL2 = result;
  }
  else
  {
    uint64_t result = constantValkCVANetPoolingTypeL2;
  }
  getkCVANetPoolingTypeL2 = kCVANetPoolingTypeL2Function;
  return result;
}

uint64_t kCVANetPoolingTypeL2Function(void)
{
  return constantValkCVANetPoolingTypeL2;
}

uint64_t initValkCVANetPoolingTypeAvg(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_9848);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetPoolingTypeAvg");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetPoolingTypeAvg = result;
  }
  else
  {
    uint64_t result = constantValkCVANetPoolingTypeAvg;
  }
  getkCVANetPoolingTypeAvg = kCVANetPoolingTypeAvgFunction;
  return result;
}

uint64_t kCVANetPoolingTypeAvgFunction(void)
{
  return constantValkCVANetPoolingTypeAvg;
}

uint64_t initValkCVANetPoolingTypeMax(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_9848);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetPoolingTypeMax");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetPoolingTypeMax = result;
  }
  else
  {
    uint64_t result = constantValkCVANetPoolingTypeMax;
  }
  getkCVANetPoolingTypeMax = kCVANetPoolingTypeMaxFunction;
  return result;
}

uint64_t kCVANetPoolingTypeMaxFunction(void)
{
  return constantValkCVANetPoolingTypeMax;
}

void Espresso::CVAEngine::pool_kernel::~pool_kernel(Espresso::CVAEngine::pool_kernel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 62);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 62);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
}

void Espresso::CVAEngine::concat_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, uint64_t *a4)
{
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 8);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = v10[16];
    nitro::nitro_function::nitro_function(v11);
  }
  else
  {
    uint64_t v12 = v10[16];
  }
  uint64_t v13 = *a4;
  if (a4[1] != *a4)
  {
    if (*(void *)v13
    {
      uint64_t v74 = *(std::__shared_weak_count **)(v13 + 8);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v74 = 0;
    }
    uint64_t v15 = *a3;
    std::string::size_type v16 = **a3;
    if (v16
    {
      uint64_t v17 = (std::__shared_weak_count *)v15[1];
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    long long v75 = v9;
    std::string::size_type v73 = v17;
    int v18 = (char *)operator new(0x58uLL);
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)int v18 = &unk_1EE38C5C0;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    std::string::size_type v19 = *(const char ***)(v12 + 104);
    if (!v19)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v79, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
      std::string v56 = std::string::insert(&v79, 0, "CVA EXPECT_EQ failed ");
      long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::string v58 = std::string::append(&v80, ":");
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v78, 339);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFNumberRef v60 = &v78;
      }
      else {
        CFNumberRef v60 = (std::string *)v78.__r_.__value_.__r.__words[0];
      }
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v78.__r_.__value_.__l.__size_;
      }
      CFNumberRef v62 = std::string::append(&v81, (const std::string::value_type *)v60, size);
      long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v82);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v76 = v12;
    if (!*(void *)(v12 + 112))
    {
      CFNumberRef v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v79, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
      std::string v65 = std::string::insert(&v79, 0, "CVA EXPECT_EQ failed ");
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::string v67 = std::string::append(&v80, ":");
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v78, 340);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v69 = &v78;
      }
      else {
        long long v69 = (std::string *)v78.__r_.__value_.__r.__words[0];
      }
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v70 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v70 = v78.__r_.__value_.__l.__size_;
      }
      long long v71 = std::string::append(&v81, (const std::string::value_type *)v69, v70);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v64, &v82);
      __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    std::string::size_type v21 = *v19;
    if ((*v19)[23] < 0) {
      std::string::size_type v21 = *(const char **)v21;
    }
    *((void *)v18 + 9) = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v21, 0);
    std::string::size_type v22 = **(const char ***)(v76 + 112);
    if (v22[23] < 0) {
      std::string::size_type v22 = *(const char **)v22;
    }
    *((void *)v18 + 10) = CFStringCreateWithCString(v20, v22, 0);
    uint64_t v23 = objc_opt_new();
    int v24 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v23;

    uint64_t v25 = objc_opt_new();
    uint64_t v26 = *(void **)(a1 + 352);
    *(void *)(a1 + 352) = v25;

    uint64_t v27 = objc_opt_new();
    int v28 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v27;

    uint64_t v29 = objc_opt_new();
    float v30 = *(void **)(a1 + 368);
    *(void *)(a1 + 368) = v29;

    double v31 = *(long long ***)(v76 + 112);
    int v32 = *v31;
    int v33 = v31[1];
    if (*v31 != v33)
    {
      do
      {
        if (*((char *)v32 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)v32, *((void *)v32 + 1));
        }
        else
        {
          long long v34 = *v32;
          v82.__r_.__value_.__r.__words[2] = *((void *)v32 + 2);
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v34;
        }
        uint64_t v35 = *(void **)(a1 + 344);
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v36 = &v82;
        }
        else {
          unint64_t v36 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        int v37 = [NSString stringWithUTF8String:v36];
        [v35 addObject:v37];

        [*(id *)(a1 + 352) addObject:&unk_1EE3AEF20];
        [*(id *)(a1 + 360) addObject:&unk_1EE3AEF20];
        [*(id *)(a1 + 368) addObject:&unk_1EE3AEF20];
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        int v32 = (long long *)((char *)v32 + 24);
      }
      while (v32 != v33);
    }
    int v38 = (const void *)*((void *)v18 + 9);
    int v39 = (const void *)getkCVANetAcceleratorISP();
    CFNumberRef v40 = (const void *)getkCVANetFormatUInt8();
    CFNumberRef v42 = *(const void **)(a1 + 344);
    int v41 = *(const void **)(a1 + 352);
    int v44 = *(const void **)(a1 + 360);
    std::string v43 = *(const void **)(a1 + 368);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v46 = (const void *)getkCVANetUnitType[0]();
    std::string v47 = (const void *)getkCVANetUnitTypeConcat[0]();
    CFDictionaryAddValue(Mutable, v46, v47);
    std::string v48 = (const void *)getkCVANetUnitAcceleratorType[0]();
    CFDictionaryAddValue(Mutable, v48, v39);
    std::string v49 = (const void *)getkCVANetUnitName[0]();
    CFDictionaryAddValue(Mutable, v49, v38);
    std::string v50 = (const void *)getkCVANetUnitDataType[0]();
    CFDictionaryAddValue(Mutable, v50, v40);
    CFNumberRef v51 = (const void *)getkCVANetUnitBottomName[0]();
    CFDictionaryAddValue(Mutable, v51, v42);
    long long v52 = (const void *)getkCVANetUnitBottomOutputIndex[0]();
    CFDictionaryAddValue(Mutable, v52, v41);
    CFNumberRef v53 = (const void *)getkCVANetUnitBottomOutputChannelStart[0]();
    CFDictionaryAddValue(Mutable, v53, v44);
    unsigned int v54 = (const void *)getkCVANetUnitInputChannels[0]();
    CFDictionaryAddValue(Mutable, v54, v43);
    *((void *)v18 + 4) = Mutable;
    *(void *)&long long v77 = v18 + 24;
    *((void *)&v77 + 1) = v18;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
    Espresso::CVAEngine::CVACompiler::add_operation(v76, &v77);
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v18);
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v18);
    uint64_t v9 = v75;
    if (v73) {
      nitro::nitro_function::nitro_function(v73);
    }
    if (v74) {
      nitro::nitro_function::nitro_function(v74);
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1928885A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v44 - 89) < 0) {
    operator delete(*(void **)(v44 - 112));
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v41 & 1) == 0)
    {
LABEL_14:
      nitro::nitro_function::nitro_function(v42);
      if (a11) {
        nitro::nitro_function::nitro_function(a11);
      }
      if (a12) {
        nitro::nitro_function::nitro_function(a12);
      }
      if (a13) {
        nitro::nitro_function::nitro_function(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v43);
  goto LABEL_14;
}

void Espresso::CVAEngine::concat_kernel::~concat_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::context_transfer_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_context_transfer_kernel::kernel_type_str(Espresso::generic_context_transfer_kernel *this)
{
  return "context_transfer";
}

void Espresso::CVAEngine::context_transfer_kernel::blob_options(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::CVAEngine::context_transfer_kernel::__launch(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = v4[16];
    nitro::nitro_function::nitro_function(v5);
  }
  else
  {
    uint64_t v6 = v4[16];
  }
  uint64_t v7 = *(void *)(a1 + 312);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 320);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!*(void *)(v6 + 232))
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_8;
    }
LABEL_19:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HX: only one context transfer is supported");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(void *)(v6 + 232)) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v9 = *(std::__shared_weak_count **)(v6 + 240);
  *(void *)(v6 + 232) = v7;
  *(void *)(v6 + 240) = v8;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(int *)(v6 + 88);
  long long v11 = *(_OWORD *)(*(void *)(*(void *)(v6 + 48) + 32) + 16 * v10);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(v6 + 48) + 32) + 16 * v10 + 8);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v6 + 224);
  *(_OWORD *)(v6 + 2std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v11;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_192888934(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::CVAEngine::context_transfer_kernel::~context_transfer_kernel(Espresso::CVAEngine::context_transfer_kernel *this)
{
  Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::abstract_executor_t::setup_subnetworks(Espresso::abstract_executor_t *this)
{
  uint64_t v2 = (void **)((char *)this + 16);
  *((void *)this + 3) = *((void *)this + 2);
  uint64_t v3 = (char *)this + 40;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear((uint64_t)this + 40);
  std::vector<Espresso::net *>::reserve(v2, *((void *)*(v2 - 1) + 126) + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "__main__");
  long long v34 = __p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v34)+ 5) = 0;
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  long long v34 = __p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v34)+ 5) = 0;
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = (char *)*((void *)this + 3);
  unint64_t v4 = *((void *)this + 4);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - (unsigned char *)*v2) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
LABEL_41:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v8 = v4 - (void)*v2;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (void *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    void *v12 = *((void *)this + 1);
    uint64_t v6 = v12 + 1;
    uint64_t v15 = (char *)*((void *)this + 2);
    uint64_t v14 = (char *)*((void *)this + 3);
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--uint64_t v12 = v16;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)*v2;
    }
    *((void *)this + 2) = v12;
    *((void *)this + 3) = v6;
    *((void *)this + 4) = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = v5 + 8;
  }
  *((void *)this + 3) = v6;
  uint64_t v17 = *(void **)(*((void *)this + 1) + 1000);
  if (v17)
  {
    uint64_t v18 = 1;
    do
    {
      __p[0] = v17 + 2;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)(v17 + 2), (uint64_t)&std::piecewise_construct, (long long **)__p)[5] = v18;
      uint64_t v19 = v17[5];
      std::string::size_type v21 = (char *)*((void *)this + 3);
      unint64_t v20 = *((void *)this + 4);
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = (v21 - (unsigned char *)*v2) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          goto LABEL_41;
        }
        uint64_t v24 = v20 - (void)*v2;
        uint64_t v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
          uint64_t v25 = v23 + 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26);
        }
        else {
          uint64_t v27 = 0;
        }
        int v28 = (void *)(v26 + 8 * v23);
        *int v28 = v19;
        std::string::size_type v22 = v28 + 1;
        float v30 = (char *)*((void *)this + 2);
        uint64_t v29 = (char *)*((void *)this + 3);
        if (v29 != v30)
        {
          do
          {
            uint64_t v31 = *((void *)v29 - 1);
            v29 -= 8;
            *--int v28 = v31;
          }
          while (v29 != v30);
          uint64_t v29 = (char *)*v2;
        }
        *((void *)this + 2) = v28;
        *((void *)this + 3) = v22;
        *((void *)this + 4) = v26 + 8 * v27;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(void *)std::string::size_type v21 = v19;
        std::string::size_type v22 = v21 + 8;
      }
      *((void *)this + 3) = v22;
      ++v18;
      uint64_t v17 = (void *)*v17;
    }
    while (v17);
  }
}

void sub_192888C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  uint64_t v16 = *a4;
  long long v17 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v17;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)i + 5) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    *uint64_t v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = i;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_192888E94(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_executor_t::get_subnetwork(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 16)
                   + 8
                   * std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)(a1 + 40), a2)[5]);
}

uint64_t Espresso::abstract_executor_t::abstract_executor_t(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)uint64_t result = &unk_1EE34F0F0;
  *(void *)(result + 8) = v2;
  *(void *)(result + 64) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = 0u;
  *(_DWORD *)(result + 72) = 1065353216;
  uint64_t v3 = *(void *)(*a2 + 24);
  *(void *)(result + 80) = *(void *)(*a2 + 16);
  *(void *)(result + 88) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::abstract_executor_t::~abstract_executor_t(Espresso::abstract_executor_t *this)
{
  *(void *)this = &unk_1EE34F0F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 40);
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void Espresso::load_network_layers(std::string *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  v19[19] = *MEMORY[0x1E4F143B8];
  Espresso::find_base_dir((uint64_t)&v16, a1);
  Espresso::gen_precompilation_info_fstream(&v14, (uint64_t *)a1);
  std::ifstream::basic_ifstream(v17);
  if (v18[15])
  {
    unint64_t v12 = v14;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    Espresso::load_network_layers_internal(a6, (uint64_t)v17, &v16, a2, a3, v12, a4, a5, 0, &__p, 0, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*a6) {
      std::string::operator=((std::string *)(*a6 + 592), a1);
    }
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
  v17[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v17 + *(void *)(v17[0] - std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FF1040](v18);
  std::istream::~istream();
  MEMORY[0x192FF15B0](v19);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_192889198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  float v30 = *(std::__shared_weak_count **)(v28 + 8);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  std::ifstream::~ifstream(&a28);
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_internal(uint64_t *a1, uint64_t a2, std::string *a3, void *a4, uint64_t a5, void *a6, unsigned int a7, void *a8, FILE *a9, const std::string *a10, char a11, uint64_t a12, uint64_t a13)
{
  unint64_t v21 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v34, (uint64_t)v21, a8);
  uint64_t v22 = v34;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 280))(v34, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  int v23 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v22 + 24))(v22, __p);
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "shape");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v22 + 120))(&v29, v22, v27);
    Espresso::load_network_shape(&v29, (uint64_t)__p);
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    uint64_t v24 = (std::__shared_weak_count *)v35;
    v26[0] = v22;
    v26[1] = v35;
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::load_network_layers_internal(a1, v26, a3, a4, (uint64_t)__p, a6, a7, a9, a10, a11, a12, a13);
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v33, v33[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, (char *)__p[1]);
    if (!v24) {
      return;
    }
LABEL_18:
    nitro::nitro_function::nitro_function(v24);
    return;
  }
  uint64_t v24 = (std::__shared_weak_count *)v35;
  v25[0] = v22;
  v25[1] = v35;
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_layers_internal(a1, v25, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13);
  if (v24)
  {
    nitro::nitro_function::nitro_function(v24);
    goto LABEL_18;
  }
}

void sub_192889470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  int v37 = *(std::__shared_weak_count **)(v35 - 96);
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_layers_internal(uint64_t *a1, uint64_t *a2, std::string *a3, void *a4, uint64_t a5, void *a6, unsigned int a7, FILE *a8, const std::string *a9, char a10, uint64_t a11, uint64_t a12)
{
  float v19 = (std::__shared_weak_count *)a4[1];
  v28[0] = *a4;
  v28[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL is_ane_context = Espresso::is_ane_context((uint64_t)v28);
  uint64_t v21 = *a2;
  uint64_t v22 = (std::__shared_weak_count *)a2[1];
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::load_blob_storage(&v26, v21, (const void **)&a3->__r_.__value_.__l.__data_, a8, (uint64_t)a9, a11, a12, is_ane_context);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  int v23 = (std::__shared_weak_count *)a2[1];
  v25[0] = *a2;
  v25[1] = (uint64_t)v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_layers_internal(v25, a9, a3, (uint64_t)a4, a5, a6, a7, a10, a1, &v26);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
}

void sub_192889634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::run_pass_on_network<Espresso::pass_multi_head_program_gen>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EE3889D0;
  uint64_t v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE361388;
  uint64_t v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v10 = (unint64_t)"N8Espresso27pass_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v8 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v8);
  if (v8)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v10 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso31analysis_multi_head_program_genE");
    }
  }
  int v6 = buf[0];
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
  return v6 != 0;
}

void sub_1928898A4(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::net::reload_info_t>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 104, *(char **)(a1 + 112));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 80, *(char **)(a1 + 88));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void std::__shared_ptr_emplace<Espresso::net::reload_info_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389648;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::net::reload_info_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_multi_head_program_gen>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_multi_head_program_gen>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3889D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_multi_head_program_gen>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3889D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::blob<float,6>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF50;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 32) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<float,6>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF50;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 32) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,6>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<float,6>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389A38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<float,6>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*&,char const*>(const char *a1, const char *a2)
{
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = (char *)operator new(0x68uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389A00;
  *((void *)v12 + 3) = &unk_1EE36BF30;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *((_DWORD *)v12 + 8) = a2;
  *((_DWORD *)v12 + 9) = a3;
  *((_DWORD *)v12 + 10) = a4;
  *((_DWORD *)v12 + 11) = a5;
  *((_DWORD *)v12 + 12) = a6;
  unint64_t v13 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5 * a6);
  uint64_t v14 = Espresso::kern_alloc_uninitialized(v13);
  bzero(v14, (size_t)v13);
  *((void *)v12 + 7) = v14;
  v12[64] = 1;
  *a1 = v12 + 24;
  a1[1] = v12;
}

void sub_192889D34(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[4].__vftable;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_pass_insert_casts>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_insert_casts>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_insert_casts>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_to_preserve_mil_types>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_to_preserve_mil_types>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_multi_head_program_gen>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::analysis_multi_head_program_gen>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388F80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_multi_head_program_gen>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob_storage_mmap,std::allocator<Espresso::blob_storage_mmap>,std::string const&,unsigned long &,void>(void *a1, uint64_t a2, uint64_t *a3)
{
  int v6 = operator new(0x78uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE386190;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  Espresso::blob_storage_mmap::blob_storage_mmap((uint64_t)(v6 + 3), (long long *)&__p, *a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_192889FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<Espresso::blob_storage_abstract  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000192E06333)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<Espresso::blob_storage_abstract  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<Espresso::blob_storage_abstract  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob_storage_mmap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob_storage_mmap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386190;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob_storage_mmap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::load_network_layers_binserializer_v2(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v12 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v12 = (size_t)a2[1];
  }
  unint64_t v13 = v33;
  std::string::basic_string[abi:ne180100]((uint64_t)v33, v12 + 4);
  if (v34 < 0) {
    unint64_t v13 = (void **)v33[0];
  }
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = *a2;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".net");
  if (*((char *)a2 + 23) >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v15 = (size_t)a2[1];
  }
  std::string v16 = v31;
  std::string::basic_string[abi:ne180100]((uint64_t)v31, v15 + 8);
  if (v32 < 0) {
    std::string v16 = (void **)v31[0];
  }
  if (v15)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v17 = a2;
    }
    else {
      long long v17 = *a2;
    }
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, ".weights");
  if (*(char *)(a1 + 23) >= 0) {
    float v18 = (const char *)a1;
  }
  else {
    float v18 = *(const char **)a1;
  }
  float v19 = fopen(v18, "rb");
  if (!v19)
  {
    *a6 = 0;
    a6[1] = 0;
    goto LABEL_39;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::binserializer_blob_to_sstream(&v27, v19, (uint64_t)v33);
  Espresso::load_js_fstream(&v25, (uint64_t)v27, __p);
  uint64_t v20 = v25;
  if (v25)
  {
    uint64_t v21 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL is_ane_context = Espresso::is_ane_context(a3);
    Espresso::load_blob_storage(&v23, v20, (const void **)v31, v19, a1, 0, 0, is_ane_context);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    Espresso::load_and_shape_network(&v25, v31, a3, a4, a5, &v23, a1);
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (!v21) {
      goto LABEL_34;
    }
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    uint64_t v21 = v26;
    if (!v26) {
      goto LABEL_34;
    }
  }
  nitro::nitro_function::nitro_function(v21);
LABEL_34:
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (v30 < 0) {
    operator delete(__p[0]);
  }
LABEL_39:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
}

void sub_19288A41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v28 - 65) < 0) {
    operator delete(*(void **)(v28 - 88));
  }
  _Unwind_Resume(exception_object);
}

double Espresso::binserializer_blob_to_sstream(uint64_t **a1, FILE *a2, uint64_t a3)
{
  fseek(a2, 0, 0);
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v7 = (__sFILE *)a3;
  }
  else {
    uint64_t v7 = *(__sFILE **)a3;
  }
  if (v7)
  {
    int v8 = Espresso::BinSerializer::BinSerializer_fseek(a2, v7, v6);
    if (v8 < 0)
    {
      syslog(3, "BinSerializer error %d:%s in %s @ %s:%d\n", v8, Espresso::BinSerializer::BinSerializer_statusDescription[v8 + 10], "BinSerializer_status Espresso::BinSerializer::BinSerializer_freadInBytes(FILE *, const char *, BOOL, void **, size_t *)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/BinSerializer/Custom_BinSerializer_Core.cpp", 548);
      goto LABEL_17;
    }
  }
  if (fread(&__ptr, 0x28uLL, 1uLL, a2) != 1)
  {
LABEL_17:
    std::string v16 = (char *)operator new(0x128uLL);
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *(void *)std::string v16 = &unk_1EE38D4A0;
    uint64_t v17 = MEMORY[0x1E4FBA490] + 64;
    *((void *)v16 + 18) = MEMORY[0x1E4FBA490] + 64;
    uint64_t v18 = *(void *)(MEMORY[0x1E4FBA410] + 16);
    uint64_t v19 = *(void *)(MEMORY[0x1E4FBA410] + 8);
    *((void *)v16 + 3) = v19;
    *(void *)&v16[*(void *)(v19 - 24) + 24] = v18;
    *((void *)v16 + 4) = 0;
    uint64_t v20 = (std::ios_base *)&v16[*(void *)(*((void *)v16 + 3) - 24) + 24];
    std::ios_base::init(v20, v16 + 40);
    uint64_t v21 = MEMORY[0x1E4FBA490] + 24;
    v20[1].__vftable = 0;
    v20[1].__fmtflags_ = -1;
    *((void *)v16 + 3) = v21;
    *((void *)v16 + 18) = v17;
    std::streambuf::basic_streambuf();
    *((void *)v16 + 5) = MEMORY[0x1E4FBA470] + 16;
    double result = 0.0;
    *(_OWORD *)(v16 + std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table((uint64_t)this + 104) = 0u;
    *(_OWORD *)(v16 + 120) = 0u;
    *((_DWORD *)v16 + 34) = 8;
    *a1 = (uint64_t *)(v16 + 24);
    a1[1] = (uint64_t *)v16;
    return result;
  }
  if (LOWORD(__ptr.__r_.__value_.__r.__words[1]) != 9)
  {
    int v22 = 559;
    uint64_t v14 = "invalid data type";
    int v15 = -5;
LABEL_16:
    syslog(3, "BinSerializer error %d:%s in %s @ %s:%d\n", v15, v14, "BinSerializer_status Espresso::BinSerializer::BinSerializer_freadInBytes(FILE *, const char *, BOOL, void **, size_t *)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/BinSerializer/Custom_BinSerializer_Core.cpp", v22);
    goto LABEL_17;
  }
  size_t v9 = v24;
  unint64_t v10 = (char *)malloc_type_malloc(4 * v24, 0x100004052888210uLL);
  if (!v10)
  {
    int v22 = 569;
    uint64_t v14 = "undexpected null pointer";
    int v15 = -3;
    goto LABEL_16;
  }
  uint8x8_t v11 = v10;
  if (fread(v10, 1uLL, v9, a2) != v9)
  {
    int v22 = 574;
    uint64_t v14 = "I/O error";
    int v15 = -7;
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(&__ptr, v11);
  size_t v12 = (uint64_t *)operator new(0x128uLL);
  v12[1] = 0;
  uint64_t v12[2] = 0;
  uint64_t *v12 = (uint64_t)&unk_1EE38D4A0;
  *a1 = std::istringstream::basic_istringstream[abi:ne180100](v12 + 3, &__ptr);
  a1[1] = v12;
  free(v11);
  if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__ptr.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_19288A828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::__erase_unique<std::string>(void *a1, void *a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = (uint64_t *)a1[1];
  if (!v2) {
    return 0;
  }
  int v6 = a1 + 1;
  uint64_t v7 = (void *)a1[1];
  do
  {
    BOOL v8 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
    size_t v9 = v7 + 1;
    if (!v8)
    {
      size_t v9 = v7;
      int v6 = v7;
    }
    uint64_t v7 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4)) {
    return 0;
  }
  uint8x8_t v11 = (void *)v6[1];
  if (v11)
  {
    do
    {
      size_t v12 = v11;
      uint8x8_t v11 = (void *)*v11;
    }
    while (v11);
  }
  else
  {
    unint64_t v13 = v6;
    do
    {
      size_t v12 = (void *)v13[2];
      BOOL v14 = *v12 == (void)v13;
      unint64_t v13 = v12;
    }
    while (!v14);
  }
  if ((void *)*a1 == v6) {
    *a1 = v12;
  }
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
  if (*((char *)v6 + 55) < 0) {
    operator delete((void *)v6[4]);
  }
  operator delete(v6);
  return 1;
}

void *std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::target_type()
{
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000192DD89DBLL)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1EE379620;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_1EE379620;
  result[1] = v3;
  return result;
}

void std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::~__func()
{
}

void Espresso::load_network_binserializer(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if ((a5 - 3) <= 0xFFFFFFFD) {
    Espresso::throw_exception_selector<Espresso::io_error>("error loading binserializer.");
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v12 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v12 = (size_t)a2[1];
  }
  unint64_t v13 = v42;
  std::string::basic_string[abi:ne180100]((uint64_t)v42, v12 + 6);
  if (v43 < 0) {
    unint64_t v13 = (void **)v42[0];
  }
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v14 = a2;
    }
    else {
      BOOL v14 = *a2;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".shape");
  if (*(char *)(a1 + 23) >= 0) {
    int v15 = (const char *)a1;
  }
  else {
    int v15 = *(const char **)a1;
  }
  std::string v16 = fopen(v15, "rb");
  if (v16)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::binserializer_blob_to_sstream(&v38, v16, (uint64_t)v42);
    fclose(v16);
    char v32 = &v33;
    char v33 = 0;
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = &v36;
    if (v38 && !*(_DWORD *)((char *)v38 + *(void *)(*v38 - 24) + 32))
    {
      Espresso::load_network_shape((uint64_t)v38, __p, (uint64_t)buf);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v32, v33);
      char v32 = *(char ***)buf;
      char v33 = *(char **)&buf[8];
      uint64_t v34 = *(void *)&buf[16];
      if (*(void *)&buf[16])
      {
        *(void *)(*(void *)&buf[8] + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = &v33;
        *(void *)buf = &buf[8];
        *(void *)&buf[8] = 0;
        *(void *)&uint8_t buf[16] = 0;
      }
      else
      {
        char v32 = &v33;
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v35, v36);
      uint64_t v17 = (char *)v46;
      uint64_t v35 = v45;
      unint64_t v36 = (char *)v46;
      uint64_t v37 = v47;
      if (v47)
      {
        *(void *)(v46 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = &v36;
        long long v45 = (char **)&v46;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v35 = &v36;
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v45, v17);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
    }
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    if (a5 == 1) {
      Espresso::load_network_layers_binserializer(a1, a2, a3, (uint64_t)&v32, a4, 0, (uint64_t *)buf);
    }
    else {
      Espresso::load_network_layers_binserializer_v2(a1, a2, (uint64_t)a3, (uint64_t)&v32, a4, buf);
    }
    uint64_t v19 = *(void *)buf;
    uint64_t v18 = *(std::__shared_weak_count **)&buf[8];
    uint64_t v30 = *(void *)buf;
    uint64_t v31 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)buf)
    {
      std::string::operator=((std::string *)(*(void *)buf + 424), (const std::string *)a2);
      std::string::operator=((std::string *)(v19 + 592), (const std::string *)a1);
      uint64_t v20 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::shape_network_recursive((Espresso *)v19, (Espresso::net *)&v32, 0, 0);
      if (v31)
      {
        nitro::nitro_function::nitro_function(v31);
        uint64_t v28 = v19;
        uint64_t v29 = v31;
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v28 = v19;
        uint64_t v29 = 0;
      }
      Espresso::setup_layer_callbacks(&v28);
      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
      Espresso::setup_layers_post_load((uint64_t)&v30);
      uint64_t v23 = Espresso::espresso_os_log_subsystem(v21, v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        int v24 = *(char *)(a1 + 23);
        uint64_t v25 = *(const char **)a1;
        int v26 = (***(uint64_t (****)(void))(*a3 + 8))(*(void *)(*a3 + 8));
        *(_DWORD *)buf = 136315650;
        if (v24 >= 0) {
          uint64_t v27 = a1;
        }
        else {
          uint64_t v27 = (uint64_t)v25;
        }
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = a4;
        _os_log_impl(&dword_1920CB000, v23, OS_LOG_TYPE_INFO, "Loaded network: '%s' pf=%d cp=%d", buf, 0x18u);
      }

      *a6 = v19;
      a6[1] = (uint64_t)v20;
    }
    else
    {
      *a6 = 0;
      a6[1] = 0;
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v35, v36);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v32, v33);
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    if (v41 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
}

void sub_19288AE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void Espresso::load_network_shape(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v14 = v15;
  v15[0] = 0;
  v17[0] = 0;
  v17[1] = 0;
  v15[1] = 0;
  std::string v16 = v17;
  BOOL v8 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v12, (uint64_t)v8, a3);
  uint64_t v9 = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 296))(v12, a1, a2);
  unint64_t v10 = (std::__shared_weak_count *)v13;
  v11[0] = v9;
  v11[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_shape(v11, a4);
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
    nitro::nitro_function::nitro_function(v10);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v16, v17[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_19288B034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::network_shape::~network_shape((char **)va);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_binserializer(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v14 = (size_t)a2[1];
  }
  int v15 = v27;
  std::string::basic_string[abi:ne180100]((uint64_t)v27, v14 + 4);
  if (v28 < 0) {
    int v15 = (void **)v27[0];
  }
  if (v14)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string v16 = a2;
    }
    else {
      std::string v16 = *a2;
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, ".net");
  if (*((char *)a2 + 23) >= 0) {
    size_t v17 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v17 = (size_t)a2[1];
  }
  uint64_t v18 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v17 + 8);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v18 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v17)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = *a2;
    }
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, ".weights");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v20 = (const char *)a1;
  }
  else {
    uint64_t v20 = *(const char **)a1;
  }
  uint64_t v21 = fopen(v20, "rb");
  if (v21)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::binserializer_blob_to_sstream(&v22, v21, (uint64_t)v27);
    Espresso::load_network_layers_internal(a7, (uint64_t)v22, &v26, a3, a4, 0, a5, __p, v21, (const std::string *)a1, a6, 0, 0);
    if (*a7) {
      std::string::operator=((std::string *)(*a7 + 592), (const std::string *)a1);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *a7 = 0;
    a7[1] = 0;
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_19288B278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v35 = *(std::__shared_weak_count **)(v33 + 8);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<std::istringstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<std::istringstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D4A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<std::istringstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D4A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::dump_network_binserializer(uint64_t *a1, const char *a2, const void **a3)
{
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t v7 = v40;
  std::string::basic_string[abi:ne180100]((uint64_t)v40, v6 + 4);
  if (v41 < 0) {
    uint64_t v7 = (void **)v40[0];
  }
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      BOOL v8 = a3;
    }
    else {
      BOOL v8 = *a3;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".net");
  if (*((char *)a3 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  unint64_t v10 = v38;
  std::string::basic_string[abi:ne180100]((uint64_t)v38, v9 + 6);
  if (v39 < 0) {
    unint64_t v10 = (void **)v38[0];
  }
  if (v9)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint8x8_t v11 = a3;
    }
    else {
      uint8x8_t v11 = *a3;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ".shape");
  if (*((char *)a3 + 23) >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = (size_t)a3[1];
  }
  uint64_t v13 = v36;
  std::string::basic_string[abi:ne180100]((uint64_t)v36, v12 + 8);
  if (v37 < 0) {
    uint64_t v13 = (void **)v36[0];
  }
  if (v12)
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v14 = a3;
    }
    else {
      size_t v14 = *a3;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".weights");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  int v15 = fopen(a2, "wb");
  uint64_t v16 = *a1;
  size_t v17 = (std::__shared_weak_count *)a1[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::dump_network_internal(v16, v17, (uint64_t)v33, (uint64_t)v29, (uint64_t)v36, v15);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  std::stringbuf::str();
  std::stringbuf::str();
  if (v41 >= 0) {
    uint64_t v18 = (__sFILE *)v40;
  }
  else {
    uint64_t v18 = (__sFILE *)v40[0];
  }
  Espresso::binserializer_write_string(v15, v18, (const void **)&v26);
  if (v39 >= 0) {
    uint64_t v19 = (__sFILE *)v38;
  }
  else {
    uint64_t v19 = (__sFILE *)v38[0];
  }
  Espresso::binserializer_write_string(v15, v19, (const void **)&__p);
  fclose(v15);
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v27 < 0) {
    operator delete(v26);
  }
  v28[0] = *MEMORY[0x1E4FBA408];
  uint64_t v20 = v28[0];
  uint64_t v21 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)((char *)v28 + *(void *)(v28[0] - std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24)) = v22;
  uint64_t v23 = v21;
  v29[0] = v21;
  v29[1] = MEMORY[0x1E4FBA470] + 16;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v31);
  v32[0] = v20;
  *(void *)((char *)v32 + *(void *)(v20 - std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24)) = v22;
  v33[0] = v23;
  v33[1] = MEMORY[0x1E4FBA470] + 16;
  if (v34 < 0) {
    operator delete((void *)v33[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v35);
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
}

void sub_19288B814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a57);
  if (*(char *)(v57 - 129) < 0) {
    operator delete(*(void **)(v57 - 152));
  }
  if (*(char *)(v57 - 105) < 0) {
    operator delete(*(void **)(v57 - 128));
  }
  if (*(char *)(v57 - 81) < 0) {
    operator delete(*(void **)(v57 - 104));
  }
  _Unwind_Resume(a1);
}

void Espresso::dump_network_internal(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3, uint64_t a4, uint64_t a5, FILE *a6)
{
  *(_OWORD *)std::string __p = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  v14[0] = a1;
  v14[1] = a2;
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::serialize_network(v14, a5, v18, 0, &v15);
  if (a2) {
    nitro::nitro_function::nitro_function(a2);
  }
  long long v11 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v16;
  size_t v12 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void, uint64_t))(*(void *)v11 + 288))(v11, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 288))(v13, a4);
  Espresso::dump_network_layers_blobs_state::write((uint64_t)v18, a5, a6);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (*((void *)&v11 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v11 + 1));
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (*((void *)&v15 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[1]);
  }
  *(void *)&long long v15 = &v24;
  std::vector<std::unique_ptr<Espresso::blob_file_metadata>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (v22[1])
  {
    *(void **)&long long v23 = v22[1];
    operator delete(v22[1]);
  }
  *(void *)&long long v15 = &v21;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (v19[1])
  {
    *(void **)&long long v20 = v19[1];
    operator delete(v19[1]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_19288BA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::dump_network_layers_blobs_state::~dump_network_layers_blobs_state((void **)va);
  _Unwind_Resume(a1);
}

void Espresso::binserializer_write_string(FILE *a1, __sFILE *a2, const void **a3)
{
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t v7 = (char *)malloc_type_malloc(v6 + 1, 0xEC8B7D8DuLL);
  BOOL v8 = v7;
  if (*((char *)a3 + 23) >= 0) {
    size_t v9 = a3;
  }
  else {
    size_t v9 = *a3;
  }
  memcpy(v7, v9, v6);
  v8[v6] = 0;
  Espresso::BinSerializer::BinSerializer_fwriteBytes(a1, a2, v8, (const void *)(v6 + 1));

  free(v8);
}

void Espresso::dump_network_layers_blobs_state::write(uint64_t a1, uint64_t a2, FILE *a3)
{
  if (!Espresso::blob_storage_write_version)
  {
    int v10 = *(char *)(a2 + 23);
    if (a3)
    {
      if (v10 < 0) {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v53 = *(std::string *)a2;
      }
      memset(v52, 0, sizeof(v52));
      std::vector<void *>::__init_with_size[abi:ne180100]<void **,void **>(v52, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
      std::string __p = 0;
      std::string v50 = 0;
      uint64_t v51 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
      long long v11 = (uint64_t *)__p;
      if (__p != v50)
      {
        uint64_t v12 = 0;
        do
        {
          uint64_t v13 = *v11++;
          v12 += v13;
        }
        while (v11 != v50);
      }
      operator new[]();
    }
    if (v10 < 0)
    {
      std::string::size_type v16 = *(void *)(a2 + 8);
      if (!v16) {
        return;
      }
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a2, v16);
    }
    else
    {
      if (!*(unsigned char *)(a2 + 23)) {
        return;
      }
      std::string v48 = *(std::string *)a2;
    }
    memset(v47, 0, sizeof(v47));
    std::vector<void *>::__init_with_size[abi:ne180100]<void **,void **>(v47, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    memset(v46, 0, sizeof(v46));
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v46, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v17 = &v48;
    }
    else {
      size_t v17 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    fopen((const char *)v17, "wb");
    operator new[]();
  }
  if (Espresso::blob_storage_write_version != 1)
  {
    if (Espresso::blob_storage_write_version == 2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Writing to blob_v2 file format is not supported. Please set blob_storage_write_version=1 to use blob_v1 file format.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)__dst, Espresso::blob_storage_write_version);
    char v34 = std::string::insert((std::string *)__dst, 0, "Invalid blob_storage_write_version: ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v33, &__ptr);
    __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_OWORD *)char v43 = 0u;
  long long v44 = 0u;
  *(_OWORD *)__dst = 0u;
  int v45 = 64;
  if (__dst != (void **)a1)
  {
    uint64_t v7 = *(const void **)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    int64_t v8 = v6 - *(void *)a1;
    if (v6 == *(void *)a1)
    {
      size_t v9 = 0;
    }
    else
    {
      if (v8 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      std::vector<unsigned long>::__vallocate[abi:ne180100](__dst, v8 >> 3);
      size_t v9 = (char *)__dst[1];
      memmove(__dst[1], v7, v8);
    }
    __dst[1] = &v9[8 * (v8 >> 3)];
  }
  if (__dst != (void **)a1) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v43[1], *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  }
  int v14 = *(char *)(a2 + 23);
  if (a3)
  {
    if (v14 < 0) {
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v41 = *(std::string *)a2;
    }
    fseek(a3, 0, 2);
    uint64_t v15 = MEMORY[0x192FF1CC0](a3);
    Espresso::write_blob_storage_v1_info((uint64_t)&__ptr, (uint64_t *)__dst, v15 + 40);
    operator new[]();
  }
  if (v14 < 0)
  {
    std::string::size_type v18 = *(void *)(a2 + 8);
    if (v18)
    {
      std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a2, v18);
      goto LABEL_39;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    std::string v40 = *(std::string *)a2;
LABEL_39:
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v40;
    }
    else {
      uint64_t v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    long long v20 = fopen((const char *)v19, "wb");
    long long v21 = v20;
    if (!v20)
    {
      unint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v55, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      }
      else {
        std::string v55 = v40;
      }
      int v38 = std::string::insert(&v55, 0, "Can't open for writing: ");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      __ptr.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v36, &__ptr);
      __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v22 = MEMORY[0x192FF1CC0](v20);
    Espresso::write_blob_storage_v1_info((uint64_t)&__ptr, (uint64_t *)__dst, v22);
    v54.__r_.__value_.__s.__data_[0] = 0;
    std::vector<unsigned char>::vector(&v55, 2 * v45, &v54);
    if (fwrite(&__ptr, 8uLL, 1uLL, v21) != 1)
    {
      char v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, "I/O error");
      __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type size = __ptr.__r_.__value_.__l.__size_;
    if (__ptr.__r_.__value_.__r.__words[2] != __ptr.__r_.__value_.__l.__size_)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        if (fwrite((const void *)(size + v24), 0x10uLL, 1uLL, v21) != 1)
        {
          char v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v30, "I/O error");
          __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        ++v25;
        std::string::size_type size = __ptr.__r_.__value_.__l.__size_;
        v24 += 16;
      }
      while (v25 < (uint64_t)(__ptr.__r_.__value_.__r.__words[2] - __ptr.__r_.__value_.__l.__size_) >> 4);
      if (__ptr.__r_.__value_.__r.__words[2] != __ptr.__r_.__value_.__l.__size_)
      {
        unint64_t v26 = 0;
        uint64_t v27 = 8;
        do
        {
          uint64_t v28 = v57[v26];
          size_t v29 = *(void *)(size + v27);
          if ((v28 & 0x80000000) != 0)
          {
            if (v29 > v55.__r_.__value_.__l.__size_ - v55.__r_.__value_.__r.__words[0])
            {
              char v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v32, "Align error");
              goto LABEL_77;
            }
            if (v29 && fwrite(v55.__r_.__value_.__l.__data_, v29, 1uLL, v21) != 1)
            {
LABEL_76:
              char v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v32, "I/O error");
LABEL_77:
              __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
          }
          else if (v29 && fwrite(*((const void **)__dst[0] + v28), v29, 1uLL, v21) != 1)
          {
            goto LABEL_76;
          }
          ++v26;
          std::string::size_type size = __ptr.__r_.__value_.__l.__size_;
          v27 += 16;
        }
        while (v26 < (uint64_t)(__ptr.__r_.__value_.__r.__words[2] - __ptr.__r_.__value_.__l.__size_) >> 4);
      }
    }
    if (v55.__r_.__value_.__r.__words[0])
    {
      v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (v57)
    {
      std::string v58 = v57;
      operator delete(v57);
    }
    if (__ptr.__r_.__value_.__l.__size_)
    {
      __ptr.__r_.__value_.__r.__words[2] = __ptr.__r_.__value_.__l.__size_;
      operator delete((void *)__ptr.__r_.__value_.__l.__size_);
    }
    fclose(v21);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  if (v43[1])
  {
    *(void **)&long long v44 = v43[1];
    operator delete(v43[1]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_19288C770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  __cxa_free_exception(v58);
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

void sub_19288CAB4()
{
}

void Espresso::dump_network_layers_blobs_state::~dump_network_layers_blobs_state(void **this)
{
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  uint64_t v5 = this + 12;
  std::vector<std::unique_ptr<Espresso::blob_file_metadata>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  uint64_t v5 = this + 6;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = this[3];
  if (v3)
  {
    this[4] = v3;
    operator delete(v3);
  }
  unint64_t v4 = *this;
  if (*this)
  {
    this[1] = v4;
    operator delete(v4);
  }
}

void *std::vector<void *>::__init_with_size[abi:ne180100]<void **,void **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19288CBCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso19dump_network_layersENSt3__110shared_ptrINS_3netEEEiRNS_31dump_network_layers_blobs_stateERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(const void **)(a2 + 24);
  if (v4)
  {
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a2 + 32);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v5);
      }
      return;
    }
    uint64_t v6 = (uint64_t)v4;
  }
  else
  {
    uint64_t v6 = 0;
  }
  Espresso::abstract_blob_container::shape(v14, v6);
  uint64_t v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v12, (uint64_t)v7, *(void **)(a1 + 8));
  Espresso::SerDes::params_io<Espresso::layer_shape>(v12, (uint64_t)v14, 1);
  Espresso::SerDes::generic_serdes_object::operator[](**(void **)(a1 + 16), a2, &v8);
  (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v8 + 240))(v8, &__p, &v12);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v15)
  {
    std::string::size_type v16 = v15;
    operator delete(v15);
  }
}

void sub_19288CDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C590;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37C590;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__func()
{
}

void Espresso::throw_exception_selector<Espresso::network_translation_error>(const char *a1)
{
}

void Espresso::dump_network(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::dump_network_internal(v5, v6, a2, a3, a4, 0);
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19288CF18(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_layers(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Espresso::load_network_layers_internal(a7, a1, a2, a3, a4, 0, a5, a6, 0, &__p, 0, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19288CFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_layers(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t *a7@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "");
  std::string::basic_string[abi:ne180100]<0>(v15, "json");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Espresso::load_network_layers_internal(a7, a1, &v17, a4, a5, 0, a6, v15, 0, &__p, 0, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_19288D0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::reload_network_layers(Espresso *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 161);
  if (!v3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing reload info cache");
  }
  if (!*(void *)v3 || (uint64_t v6 = (uint64_t **)(v3 + 32), !*(void *)(v3 + 32)) || !*(void *)(v3 + 120)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cached reload info is malformed");
  }
  Espresso::load_network_metadata(*(void *)v3, (const std::string *)((char *)this + 592), (const std::string *)((char *)this + 1024), (Espresso::abstract_context **)this + 2, (std::__shared_weak_count **)this + 72, a2);
  uint64_t v7 = *a2;
  if (!*a2) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Error reloading network metadata");
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  size_t v9 = (uint64_t *)(v3 + 112);
  uint64_t v8 = *(void **)(v3 + 112);
  if (!v8) {
    goto LABEL_57;
  }
  int v10 = (uint64_t *)(v3 + 112);
  do
  {
    BOOL v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, __p);
    uint64_t v12 = v8 + 1;
    if (!v11)
    {
      uint64_t v12 = v8;
      int v10 = v8;
    }
    uint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v9 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v10 + 4)) {
LABEL_57:
  }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Default configuration missing from reload info");
  if ((uint64_t *)(v7 + 800) != v10 + 7)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v7 + 800, (std::string *)v10[7], (std::string *)v10[8], 0xAAAAAAAAAAAAAAABLL * ((v10[8] - v10[7]) >> 3));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v7 + 824), (long long *)v10[10], (long long *)(v10 + 11));
  }
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v7 + 776, *(char **)(v7 + 784));
  *(void *)(v7 + 776) = v7 + 784;
  *(void *)(v7 + 792) = 0;
  *(void *)(v7 + 784) = 0;
  uint64_t v13 = *(uint64_t **)(v3 + 104);
  if (v13 != v9)
  {
    do
    {
      uint64_t v14 = *((unsigned __int8 *)v13 + 55);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = (void *)*((unsigned __int8 *)v13 + 55);
      }
      else {
        uint64_t v15 = (void *)v13[5];
      }
      unint64_t v16 = v34;
      if ((v34 & 0x80u) != 0) {
        unint64_t v16 = (unint64_t)__p[1];
      }
      if (v15 != (void *)v16) {
        goto LABEL_32;
      }
      if ((v34 & 0x80u) == 0) {
        std::string v17 = __p;
      }
      else {
        std::string v17 = (void **)__p[0];
      }
      if ((v14 & 0x80) != 0)
      {
        if (memcmp((const void *)v13[4], v17, v13[5])) {
          goto LABEL_32;
        }
      }
      else if (*((unsigned char *)v13 + 55))
      {
        std::string::size_type v18 = (unsigned __int8 *)(v13 + 4);
        while (*v18 == *(unsigned __int8 *)v17)
        {
          ++v18;
          std::string v17 = (void **)((char *)v17 + 1);
          if (!--v14) {
            goto LABEL_34;
          }
        }
LABEL_32:
        long long v35 = (long long *)(v13 + 4);
        uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 776), v13 + 4, &v35);
        long long v20 = v19;
        if (v13 != v19)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v19 + 7), (std::string *)v13[7], (std::string *)v13[8], 0xAAAAAAAAAAAAAAABLL * ((v13[8] - v13[7]) >> 3));
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v20 + 10, (long long *)v13[10], (long long *)(v13 + 11));
        }
      }
LABEL_34:
      long long v21 = (uint64_t *)v13[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          long long v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (uint64_t *)v13[2];
          BOOL v23 = *v22 == (void)v13;
          uint64_t v13 = v22;
        }
        while (!v23);
      }
      uint64_t v13 = v22;
    }
    while (v22 != v9);
  }
  uint64_t v24 = *((void *)this + 89);
  uint64_t v25 = *((void *)this + 90);
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v7 + 712) = v24;
  unint64_t v26 = *(std::__shared_weak_count **)(v7 + 720);
  *(void *)(v7 + 720) = v25;
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  uint64_t v27 = *((void *)this + 157);
  uint64_t v28 = *((void *)this + 158);
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v7 + 1256) = v27;
  size_t v29 = *(std::__shared_weak_count **)(v7 + 1264);
  *(void *)(v7 + 1264) = v28;
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  uint64_t v30 = **v6;
  uint64_t v31 = (*v6)[1];
  while (v30 != v31)
  {
    char v32 = *(std::__shared_weak_count **)(v30 + 96);
    *(void *)(v30 + 88) = 0;
    *(void *)(v30 + 96) = 0;
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    v30 += 224;
  }
  Espresso::load_network_layers_post_dispatch(a2, (uint64_t *)v3, (void *)(v3 + 16), (uint64_t **)(v3 + 32), *(unsigned __int8 *)(v3 + 52), v3 + 56, *(_DWORD *)(v3 + 48), 0, (std::string::size_type *)this + 72);
  if ((char)v34 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19288D48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v19 = *(std::__shared_weak_count **)(a12 + 8);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::shape_network(uint64_t a1, uint64_t a2, void *a3)
{
  Espresso::load_network_shape(a2, a3, (uint64_t)v6);
  unint64_t v4 = *(Espresso **)a1;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::shape_network_recursive(v4, (Espresso::net *)v6, 0, 0);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v7, v7[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v6, v6[1]);
}

void sub_19288D54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  Espresso::network_shape::~network_shape(&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::check_blob_storage_aligned(std::string *__str, const void **a2)
{
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (size <= 3)
    {
      std::string::__init_copy_ctor_external(&v30, __str->__r_.__value_.__l.__data_, size);
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (HIBYTE(__str->__r_.__value_.__r.__words[2]) <= 3u)
    {
      std::string v30 = *__str;
      goto LABEL_8;
    }
  }
  std::string::basic_string(&__ptr, __str, 0, size - 4, (std::allocator<char> *)&v29);
  uint64_t v5 = std::string::append(&__ptr, ".weights");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__ptr.__r_.__value_.__l.__data_);
  }
LABEL_8:
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v29 = v30;
LABEL_11:
    std::string __p = v30;
    goto LABEL_12;
  }
  std::string::__init_copy_ctor_external(&v29, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_11;
  }
  std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
LABEL_12:
  if (*((char *)a2 + 23) < 0)
  {
    size_t v7 = (size_t)a2[1];
    if (v7) {
      goto LABEL_16;
    }
  }
  else if (*((unsigned char *)a2 + 23))
  {
    size_t v7 = (size_t)a2[1];
LABEL_16:
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = v7;
    }
    p_ptr = &__ptr;
    std::string::basic_string[abi:ne180100]((uint64_t)&__ptr, v8 + 8);
    if ((__ptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_ptr = (std::string *)__ptr.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (*((char *)a2 + 23) >= 0) {
        int v10 = a2;
      }
      else {
        int v10 = *a2;
      }
      memmove(p_ptr, v10, v8);
    }
    strcpy((char *)p_ptr + v8, ".weights");
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string v30 = __ptr;
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v11 = __str;
    }
    else {
      BOOL v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    uint64_t v12 = fopen((const char *)v11, "rb");
    fseek(v12, 0, 0);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v30;
    }
    else {
      uint64_t v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if (Espresso::BinSerializer::BinSerializer_fseek(v12, (__sFILE *)v14, v13))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &__ptr);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (fread(&__ptr, 0x28uLL, 1uLL, v12) != 1)
    {
      uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v24, &v26);
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v25 = MEMORY[0x192FF1CC0](v12);
    fclose(v12);
    std::allocate_shared[abi:ne180100]<Espresso::blob_storage_mmap,std::allocator<Espresso::blob_storage_mmap>,std::string const&,unsigned long &,void>(&v26, (uint64_t)__str, &v25);
    unint64_t v16 = (std::__shared_weak_count *)v26.__r_.__value_.__l.__size_;
    std::string::size_type v15 = v26.__r_.__value_.__r.__words[0];
    goto LABEL_42;
  }
  int v17 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
  std::string::size_type v18 = v29.__r_.__value_.__r.__words[0];
  uint64_t v19 = (std::__shared_weak_count *)operator new(0x78uLL);
  unint64_t v16 = v19;
  if (v17 >= 0) {
    long long v20 = &v29;
  }
  else {
    long long v20 = (std::string *)v18;
  }
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386190;
  std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v20);
  std::string::size_type v15 = (std::string::size_type)&v16[1];
  Espresso::blob_storage_mmap::blob_storage_mmap((uint64_t)&v16[1], (long long *)&__ptr, 0);
  if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__ptr.__r_.__value_.__l.__data_);
  }
LABEL_42:
  uint64_t v21 = (*(uint64_t (**)(std::string::size_type))(*(void *)v15 + 88))(v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  return v21;
}

void sub_19288D954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_19288DA60()
{
}

void Espresso::dump_network(uint64_t *a1, std::string *__str, uint64_t a3, uint64_t a4)
{
  v35[19] = *MEMORY[0x1E4F143B8];
  if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__str->__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_6:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Output network path is empty");
  }
  if (!__str->__r_.__value_.__l.__size_) {
    goto LABEL_6;
  }
LABEL_3:
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v30 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v29 = *(std::string *)a4;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    size_t v8 = __str;
  }
  size_t v9 = (std::string *)((char *)v8 + size);
  if (size)
  {
    int v10 = v8;
    BOOL v11 = (std::string *)((char *)v8 + size);
    do
    {
      if (v10->__r_.__value_.__s.__data_[0] == 46)
      {
        uint64_t v12 = 1u;
        while (v12 != 13)
        {
          if ((std::string *)((char *)v10 + v12) == v9) {
            goto LABEL_26;
          }
          int v13 = v10->__r_.__value_.__s.__data_[v12];
          int v14 = aEspressoNet[v12++];
          if (v13 != v14) {
            goto LABEL_17;
          }
        }
        BOOL v11 = v10;
      }
LABEL_17:
      int v10 = (std::string *)((char *)v10 + 1);
    }
    while (v10 != v9);
  }
  else
  {
    BOOL v11 = v8;
  }
LABEL_26:
  std::string::size_type v15 = (char *)v11 - (char *)v8;
  if (v11 == v9) {
    std::string::size_type v16 = -1;
  }
  else {
    std::string::size_type v16 = v15;
  }
  std::string::basic_string(&v28, __str, 0, v16, (std::allocator<char> *)v34);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v29.__r_.__value_.__l.__size_) {
      goto LABEL_46;
    }
  }
  else if (*((unsigned char *)&v29.__r_.__value_.__s + 23))
  {
    goto LABEL_46;
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v17 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v17 = v28.__r_.__value_.__l.__size_;
  }
  std::string::size_type v18 = v34;
  std::string::basic_string[abi:ne180100]((uint64_t)v34, v17 + 17);
  if ((v34[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v18 = (std::string *)v34[0].__r_.__value_.__r.__words[0];
  }
  if (v17)
  {
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v28;
    }
    else {
      uint64_t v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, ".espresso.weights");
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string v29 = v34[0];
LABEL_46:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v30.__r_.__value_.__l.__size_) {
      goto LABEL_63;
    }
  }
  else if (*((unsigned char *)&v30.__r_.__value_.__s + 23))
  {
    goto LABEL_63;
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v20 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v20 = v28.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = v34;
  std::string::basic_string[abi:ne180100]((uint64_t)v34, v20 + 15);
  if ((v34[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v21 = (std::string *)v34[0].__r_.__value_.__r.__words[0];
  }
  if (v20)
  {
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v28;
    }
    else {
      uint64_t v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, ".espresso.shape");
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  std::string v30 = v34[0];
LABEL_63:
  std::ofstream::basic_ofstream((uint64_t *)v34);
  std::ofstream::basic_ofstream((uint64_t *)&v31);
  BOOL v23 = (std::__shared_weak_count *)a1[1];
  v27[0] = *a1;
  v27[1] = (uint64_t)v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v29;
  }
  Espresso::dump_network(v27, (uint64_t)v34, (uint64_t)&v31, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  std::string::size_type v31 = *MEMORY[0x1E4FBA400];
  std::string::size_type v24 = v31;
  uint64_t v25 = *(void *)(MEMORY[0x1E4FBA400] + 24);
  *(std::string::size_type *)((char *)&v31 + *(void *)(v31 - std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24)) = v25;
  MEMORY[0x192FF1040](&v32);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&v33);
  v34[0].__r_.__value_.__r.__words[0] = v24;
  *(std::string::size_type *)((char *)v34[0].__r_.__value_.__r.__words + *(void *)(v24 - std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24)) = v25;
  MEMORY[0x192FF1040](&v34[0].__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v35);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_19288DF24(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,...)
{
  va_start(va, a25);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  std::ofstream::~ofstream(va);
  std::ofstream::~ofstream(&STACK[0x2B0]);
  if (a12 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void Espresso::default_layer_parameters(uint64_t *a1@<X8>)
{
  uint64_t v3 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(&__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a1, (uint64_t)v3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = *a1;
  uint64_t v5 = (Espresso::generic_factory_t *)Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  Espresso::generic_factory_t::get_objects_copy(v5, (uint64_t)&v21);
  long long v6 = v21;
  if (v21 != (long long *)v22)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v6 + 2);
      size_t v7 = lpsrc;
      if (lpsrc
      {
        size_t v8 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        size_t v8 = 0;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 32))(&v16);
      Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)&__p, &v12);
      (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v12 + 240))(v12, &v14, &v16);
      if (v15 < 0) {
        operator delete(v14);
      }
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      size_t v9 = (long long *)*((void *)v6 + 1);
      if (v9)
      {
        do
        {
          int v10 = v9;
          size_t v9 = *(long long **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (long long *)*((void *)v6 + 2);
          BOOL v11 = *(void *)v10 == (void)v6;
          long long v6 = v10;
        }
        while (!v11);
      }
      long long v6 = v10;
    }
    while (v10 != (long long *)v22);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v22[0]);
}

void sub_19288E1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::string v28 = *(std::__shared_weak_count **)(v26 + 8);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::debug::write_vImage_Buffer(Espresso::debug *this, const char *a2, vImage_Buffer *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = fopen((const char *)this, "wb");
  int8x16_t v6 = vextq_s8(*(int8x16_t *)(a2 + 8), *(int8x16_t *)(a2 + 8), 8uLL);
  uint64_t v7 = *((void *)a2 + 3);
  fwrite(&v6, 8uLL, 3uLL, v4);
  fwrite(*(const void **)a2, *((void *)a2 + 1) * *((void *)a2 + 3), 1uLL, v4);
  return fclose(v4);
}

uint64_t Espresso::debug::read_vImage_Buffer@<X0>(Espresso::debug *this@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = fopen((const char *)this, "rb");
  fread(&v11, 8uLL, 3uLL, v4);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  a2[1] = v12;
  a2[2] = v5;
  uint64_t v7 = v13;
  a2[3] = v13;
  size_t v8 = v7 * v6;
  size_t v9 = malloc_type_malloc(v7 * v6, 0x1774316CuLL);
  *a2 = v9;
  fread(v9, v8, 1uLL, v4);

  return fclose(v4);
}

vImage_Error Espresso::get_vImageBuffer_from_CGImage@<X0>(Espresso *this@<X0>, uint64_t a2@<X8>)
{
  int v15 = 0;
  v10[0] = CGImageGetBitsPerComponent(this);
  v10[1] = CGImageGetBitsPerPixel(this);
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace(this);
  CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo(this);
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  vImage_Error result = MEMORY[0x192FF2B60](a2, v10, 0, this, 0);
  if (*(void *)a2)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&srcB.int data = *(_OWORD *)a2;
    *(_OWORD *)&srcB.width = v6;
    if ((double)*((unint64_t *)&v6 + 1) / (double)(unint64_t)v6 < 2.0)
    {
      MEMORY[0x192FF2B50](&v8, srcB.height);
      vImageConvert_Planar8toARGB8888(&srcB, &srcB, &srcB, &srcB, &v8, 0);
      free(srcB.data);
      long long v7 = *(_OWORD *)&v8.width;
      *(_OWORD *)a2 = *(_OWORD *)&v8.data;
      *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16) = v7;
    }
    LODWORD(v8.data) = 50331906;
    return vImagePermuteChannels_ARGB8888((const vImage_Buffer *)a2, (const vImage_Buffer *)a2, (const uint8_t *)&v8, 0);
  }
  return result;
}

void Espresso::load_image_to_vImageBuffer_stbi(Espresso *this, const char *a2)
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "internal image library not available");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19288E538(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::load_image_to_vImageBuffer(Espresso *this@<X0>, const char *a2@<X1>, char a3@<W2>, vImage_Buffer *a4@<X8>)
{
  long long v7 = (void *)MEMORY[0x192FF2020](this, a2);
  a4->int data = 0;
  vImage_Buffer v8 = objc_msgSend(NSString, "stringWithFormat:", @"%s", this);
  context = (void *)MEMORY[0x192FF2020]();
  size_t v9 = CGDataProviderCreateWithFilename((const char *)this);
  if (v9)
  {
    int v10 = [v8 pathExtension];
    if ([v10 isEqualToString:@"png"])
    {
    }
    else
    {
      uint64_t v11 = [v8 pathExtension];
      int v12 = [v11 isEqualToString:@"PNG"];

      if (!v12)
      {
        CGImageRef v13 = CGImageCreateWithJPEGDataProvider(v9, 0, 0, kCGRenderingIntentDefault);
        goto LABEL_7;
      }
    }
    CGImageRef v13 = CGImageCreateWithPNGDataProvider(v9, 0, 0, kCGRenderingIntentDefault);
LABEL_7:
    uint64_t v14 = v13;
    CGDataProviderRelease(v9);
    int Width = CGImageGetWidth(v14);
    int Height = CGImageGetHeight(v14);
    char v22 = a3;
    size_t v17 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    std::string::size_type v18 = malloc_type_malloc(4 * Width * Height, 0x9B83E74EuLL);
    uint64_t v19 = CGBitmapContextCreate(v18, Width, Height, 8uLL, 4 * Width, v17, 0x4001u);
    CGColorSpaceRelease(v17);
    v26.size.width = (double)Width;
    v26.size.height = (double)Height;
    v26.origin.x = 0.0;
    v26.origin.y = 0.0;
    CGContextDrawImage(v19, v26, v14);
    a4->int data = v18;
    a4->height = Height;
    a4->width = Width;
    a4->rowBytes = 4 * Width;
    LODWORD(permuteMap.data) = 50331906;
    vImagePermuteChannels_ARGB8888(a4, a4, (const uint8_t *)&permuteMap, 0);
    CGContextRelease(v19);
    CGImageRelease(v14);
    a3 = v22;
  }
  if (a4->data)
  {
    if ((a3 & 1) == 0)
    {
      long long v20 = *(_OWORD *)&a4->width;
      *(_OWORD *)&permuteMap.int data = *(_OWORD *)&a4->data;
      *(_OWORD *)&permuteMap.width = v20;
      if ((double)*((unint64_t *)&v20 + 1) / (double)(unint64_t)v20 < 2.0)
      {
        MEMORY[0x192FF2B50](&dest, permuteMap.height);
        vImageConvert_Planar8toARGB8888(&permuteMap, &permuteMap, &permuteMap, &permuteMap, &dest, 0);
        free(permuteMap.data);
        long long v21 = *(_OWORD *)&dest.width;
        *(_OWORD *)&a4->int data = *(_OWORD *)&dest.data;
        *(_OWORD *)&a4->width = v21;
      }
    }
  }
}

void sub_19288E7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}