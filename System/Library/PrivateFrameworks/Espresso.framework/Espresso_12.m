void sub_1926FCD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a71;
  void *v71;
  uint64_t v72;
  std::__shared_weak_count *v74;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a53);
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  v74 = *(std::__shared_weak_count **)(v72 - 208);
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }

  a53 = &a36;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((Espresso::base_kernel::validate_for_engine_args_t *)&a43);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a71);
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_topk_kernel::compile(Espresso::ANECompilerEngine::mix_topk_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v195 = *MEMORY[0x1E4F143B8];
  v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v6 = a2, (v122 = std::__shared_weak_count::lock(v4)) == 0) || (uint64_t v7 = *((void *)v6 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v174.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v174.__r_.__value_.__l.__data_, (long long **)&v174);
  v10 = (const void *)*((void *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v124 = v9;
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v11 = v9;
  v123 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)&v174)+ 6);
  if (v123) {
    atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10)
  {
    v13 = 0;
    if (v11 && v12)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      v13 = v11;
    }
  }
  else
  {
    v13 = 0;
  }
  v121 = v13;
  uint64_t v187 = 0x100000007;
  uint64_t v188 = 0;
  uint64_t v189 = 0;
  unint64_t v190 = 0xFFFFFFFF00000000;
  char v191 = 0;
  if (*((unsigned char *)this + 292)) {
    int v14 = 10;
  }
  else {
    int v14 = 9;
  }
  v186[0] = v14;
  v186[1] = 897988541;
  unsigned int v15 = *((_DWORD *)this + 72);
  if ((v15 & 0x80000000) != 0)
  {
    Espresso::abstract_blob_container::shape((char *)&v174, (uint64_t)v10);
    int v16 = HIDWORD(v174.__r_.__value_.__r.__words[2]);
    if (LODWORD(v174.__r_.__value_.__r.__words[2]) == 1) {
      int v17 = 4;
    }
    else {
      int v17 = 5;
    }
    if (HIDWORD(v174.__r_.__value_.__r.__words[2]) == -1) {
      int v16 = v17;
    }
    v15 += v16;
    if (__p)
    {
      v178 = (std::string *)__p;
      operator delete(__p);
    }
  }
  if (*((unsigned char *)this + 284))
  {
    Espresso::abstract_blob_container::shape((char *)&v174, (uint64_t)v10);
    int v18 = HIDWORD(v174.__r_.__value_.__r.__words[2]);
    if (LODWORD(v174.__r_.__value_.__r.__words[2]) == 1) {
      int v19 = 4;
    }
    else {
      int v19 = 5;
    }
    if (HIDWORD(v174.__r_.__value_.__r.__words[2]) == -1) {
      int v18 = v19;
    }
    unsigned int v15 = v18 + ~v15;
    if (__p)
    {
      v178 = (std::string *)__p;
      operator delete(__p);
    }
  }
  if (*((_DWORD *)this + 70) == 1)
  {
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v174, a3);
    if (v15 >= 3) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported top-k axis");
    }
    LODWORD(v187) = dword_192DCD668[v15];
    (*(void (**)(const void *))(*(void *)v10 + 32))(v10);
    std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::mix_reduce_kernel,std::allocator<Espresso::ANECompilerEngine::mix_reduce_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::reduce_params_t &,void>(v152, (uint64_t *)this + 1, (uint64_t)v186);
    (*(void (**)(void, Espresso::ANECompilerEngine::compiler *, std::string *))(**(void **)v152 + 328))(*(void *)v152, v6, &v174);
    if (*((unsigned char *)this + 294))
    {
      if (*((unsigned char *)this + 292)) {
        int v20 = 12;
      }
      else {
        int v20 = 11;
      }
      v186[0] = v20;
      Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v163, a3);
      std::string::operator=(&v163, *((const std::string **)a3 + 3));
      (*(void (**)(const void *))(*(void *)v10 + 32))(v10);
      std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::mix_reduce_kernel,std::allocator<Espresso::ANECompilerEngine::mix_reduce_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::reduce_params_t &,void>(&v139, (uint64_t *)this + 1, (uint64_t)v186);
      (*(void (**)(std::string::size_type, Espresso::ANECompilerEngine::compiler *, std::string *))(*(void *)v139.__r_.__value_.__l.__data_ + 328))(v139.__r_.__value_.__r.__words[0], v6, &v163);
      if (v139.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v139.__r_.__value_.__l.__size_);
      }

      if (v170 < 0) {
        operator delete(v169);
      }
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v166;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v164;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v163.__r_.__value_.__l.__data_);
      }
    }
    if (*(void *)&v152[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v152[8]);
    }

    if (v182 < 0) {
      operator delete(v181);
    }
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
  }
  else
  {
    if (v15 != 2) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported top-k axis with num_k > 1");
    }
    uint64_t v125 = v7;
    uint64_t v126 = (uint64_t)v10;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v174.__r_.__value_.__l.__data_, (id *)a3);
    v21 = v178;
    for (i = v179; i != v21; --i)
    {
      if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(i[-1].__r_.__value_.__l.__data_);
      }
    }
    v179 = v21;
    uint64_t v23 = v175;
    for (uint64_t j = v176; j != v23; j -= 24)
    {
      if (*(char *)(j - 1) < 0) {
        operator delete(*(void **)(j - 24));
      }
    }
    v25 = v184;
    uint64_t v176 = v23;
    v184 = @"Concat";

    obuint64_t j = (id)objc_opt_new();
    [obj setObject:@"Channel" forKeyedSubscript:@"Dimension"];
    objc_storeStrong(&v185, obj);
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v163.__r_.__value_.__l.__data_, (id *)a3);
    if (*((unsigned char *)this + 294))
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v152, (id *)a3);
      Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&v163, (long long *)v152);

      if (v159 < 0) {
        operator delete(v158);
      }
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
      if ((v152[23] & 0x80000000) != 0) {
        operator delete(*(void **)v152);
      }
      v26 = v166;
      for (k = v167; k != v26; --k)
      {
        if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(k[-1].__r_.__value_.__l.__data_);
        }
      }
      v167 = v26;
      uint64_t v28 = v164;
      for (uint64_t m = v165; m != v28; m -= 24)
      {
        if (*(char *)(m - 1) < 0) {
          operator delete(*(void **)(m - 24));
        }
      }
      uint64_t v165 = v28;
      std::string::operator=(&v163, *((const std::string **)a3 + 3));
      v30 = v172;
      v172 = @"Concat";

      objc_storeStrong(&v173, obj);
    }
    v31 = (long long *)*((void *)a3 + 6);
    if (*((char *)v31 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v31, *((void *)v31 + 1));
    }
    else
    {
      long long v32 = *v31;
      v151.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v32;
    }
    if (*((int *)this + 70) >= 1)
    {
      int v33 = 0;
      v127 = v6;
      while (1)
      {
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v152, (id *)a3);
        v34 = v155;
        for (n = v156; n != v34; --n)
        {
          if (SHIBYTE(n[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(n[-1].__r_.__value_.__l.__data_);
          }
        }
        v156 = v34;
        uint64_t v36 = v153;
        uint64_t v37 = v154;
        if (v154 != v153)
        {
          do
          {
            if (*(char *)(v37 - 1) < 0) {
              operator delete(*(void **)(v37 - 24));
            }
            v37 -= 24;
          }
          while (v37 != v36);
          v34 = v156;
        }
        uint64_t v154 = v36;
        if ((unint64_t)v34 >= v157)
        {
          v39 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v155, (uint64_t)&v151);
        }
        else
        {
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v34, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v38 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
            v34->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v38;
          }
          v39 = v34 + 1;
        }
        v156 = v39;
        v40 = (const void **)*((void *)a3 + 6);
        if (*((char *)v40 + 23) >= 0) {
          size_t v41 = *((unsigned __int8 *)v40 + 23);
        }
        else {
          size_t v41 = (size_t)v40[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v139, v41 + 12);
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v42 = &v139;
        }
        else {
          v42 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if (v41)
        {
          if (*((char *)v40 + 23) >= 0) {
            v43 = v40;
          }
          else {
            v43 = *v40;
          }
          memmove(v42, v43, v41);
        }
        strcpy((char *)v42 + v41, "__@topk_max_");
        std::to_string(&__str, v33);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        v46 = std::string::append(&v139, (const std::string::value_type *)p_str, size);
        std::string::size_type v47 = v46->__r_.__value_.__r.__words[0];
        v194.__r_.__value_.__r.__words[0] = v46->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
        char v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if ((v152[23] & 0x80000000) != 0) {
          operator delete(*(void **)v152);
        }
        *(void *)v152 = v47;
        *(void *)&v152[8] = v194.__r_.__value_.__r.__words[0];
        *(void *)&v152[15] = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
        v152[23] = v48;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v139.__r_.__value_.__l.__data_);
        }
        v49 = objc_opt_new();
        v50 = v49;
        if (*((unsigned char *)this + 292)) {
          v51 = @"Min";
        }
        else {
          v51 = @"Max";
        }
        [v49 setObject:v51 forKeyedSubscript:@"Type"];
        Espresso::abstract_blob_container::shape((char *)&v139, v126);
        unsigned int v52 = HIDWORD(v139.__r_.__value_.__r.__words[2]);
        if (LODWORD(v139.__r_.__value_.__r.__words[2]) == 1) {
          int v53 = 4;
        }
        else {
          int v53 = 5;
        }
        if (HIDWORD(v139.__r_.__value_.__r.__words[2]) == -1) {
          unsigned int v52 = v53;
        }
        if (v52 > 5) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
        }
        if (*(unsigned char *)(v125 + 1281)) {
          BOOL v54 = v52 == 5;
        }
        else {
          BOOL v54 = 0;
        }
        if (v54) {
          v55 = @"Depth";
        }
        else {
          v55 = @"Channel";
        }
        [v50 setObject:v55 forKeyedSubscript:@"Dimension"];
        if (v142)
        {
          v143 = (std::string *)v142;
          operator delete(v142);
        }
        v56 = v161;
        v161 = @"Reduction";

        objc_storeStrong(&v162, v50);
        Espresso::ANECompilerEngine::compiler::add_unit(v6, (const Espresso::ANECompilerEngine::compiler::unit_t *)v152);
        v57 = v179;
        if ((unint64_t)v179 >= v180)
        {
          v59 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v178, (uint64_t)v152);
        }
        else
        {
          if ((v152[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v179, *(const std::string::value_type **)v152, *(std::string::size_type *)&v152[8]);
          }
          else
          {
            long long v58 = *(_OWORD *)v152;
            v179->__r_.__value_.__r.__words[2] = *(void *)&v152[16];
            *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
          }
          v59 = v57 + 1;
        }
        v179 = v59;
        if (*((unsigned char *)this + 294))
        {
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v139.__r_.__value_.__l.__data_, (id *)a3);
          v61 = v143;
          for (ii = v144; ii != v61; --ii)
          {
            if (SHIBYTE(ii[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(ii[-1].__r_.__value_.__l.__data_);
            }
          }
          v144 = v61;
          uint64_t v62 = v140;
          uint64_t v63 = v141;
          if (v141 != v140)
          {
            do
            {
              if (*(char *)(v63 - 1) < 0) {
                operator delete(*(void **)(v63 - 24));
              }
              v63 -= 24;
            }
            while (v63 != v62);
            v61 = v144;
          }
          uint64_t v141 = v62;
          if ((unint64_t)v61 >= v145)
          {
            v65 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v143, (uint64_t)&v151);
            v6 = v127;
          }
          else
          {
            v6 = v127;
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v61, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v64 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
              v61->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v64;
            }
            v65 = v61 + 1;
          }
          v144 = v65;
          v66 = (const void **)*((void *)a3 + 6);
          if (*((char *)v66 + 23) >= 0) {
            size_t v67 = *((unsigned __int8 *)v66 + 23);
          }
          else {
            size_t v67 = (size_t)v66[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, v67 + 15);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v68 = &__str;
          }
          else {
            v68 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v67)
          {
            if (*((char *)v66 + 23) >= 0) {
              v69 = v66;
            }
            else {
              v69 = *v66;
            }
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "__@topk_argmax_");
          std::to_string(&v194, v33);
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v70 = &v194;
          }
          else {
            v70 = (std::string *)v194.__r_.__value_.__r.__words[0];
          }
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v71 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v71 = v194.__r_.__value_.__l.__size_;
          }
          v72 = std::string::append(&__str, (const std::string::value_type *)v70, v71);
          std::string::size_type v73 = v72->__r_.__value_.__r.__words[0];
          v192.__r_.__value_.__r.__words[0] = v72->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v72->__r_.__value_.__r.__words[1] + 7);
          char v74 = HIBYTE(v72->__r_.__value_.__r.__words[2]);
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v139.__r_.__value_.__l.__data_);
          }
          v139.__r_.__value_.__r.__words[0] = v73;
          v139.__r_.__value_.__l.__size_ = v192.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v139.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v139.__r_.__value_.__s + 23) = v74;
          if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v194.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          v75 = objc_opt_new();
          v76 = v75;
          if (*((unsigned char *)this + 292)) {
            v77 = @"ChannelArgMin";
          }
          else {
            v77 = @"ChannelArgMax";
          }
          [v75 setObject:v77 forKeyedSubscript:@"Mode"];
          v78 = v149;
          v149 = @"ArgMinMax";

          objc_storeStrong(v150, v76);
          Espresso::ANECompilerEngine::compiler::add_unit(v6, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v139);
          v79 = v167;
          if ((unint64_t)v167 >= v168)
          {
            v81 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v166, (uint64_t)&v139);
          }
          else
          {
            if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v167, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v80 = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
              v167->__r_.__value_.__r.__words[2] = v139.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
            }
            v81 = v79 + 1;
          }
          v167 = v81;

          if (v147 < 0) {
            operator delete(v146);
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v139.__r_.__value_.__l.__data_);
          }
        }
        if (v33 == *((_DWORD *)this + 70) - 1) {
          break;
        }
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v139.__r_.__value_.__l.__data_, (id *)a3);
        v83 = v143;
        for (juint64_t j = v144; jj != v83; --jj)
        {
          if (SHIBYTE(jj[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(jj[-1].__r_.__value_.__l.__data_);
          }
        }
        v144 = v83;
        if ((unint64_t)v83 >= v145)
        {
          v85 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v143, (uint64_t)&v151);
        }
        else
        {
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v83, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v84 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
            v83->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
          }
          v85 = v83 + 1;
        }
        v144 = v85;
        if ((unint64_t)v85 >= v145)
        {
          v87 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v143, (uint64_t)v152);
        }
        else
        {
          if ((v152[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v85, *(const std::string::value_type **)v152, *(std::string::size_type *)&v152[8]);
          }
          else
          {
            long long v86 = *(_OWORD *)v152;
            v85->__r_.__value_.__r.__words[2] = *(void *)&v152[16];
            *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v86;
          }
          v87 = v85 + 1;
        }
        v144 = v87;
        uint64_t v88 = v140;
        for (uint64_t kk = v141; kk != v88; kk -= 24)
        {
          if (*(char *)(kk - 1) < 0) {
            operator delete(*(void **)(kk - 24));
          }
        }
        uint64_t v141 = v88;
        v90 = (const void **)*((void *)a3 + 6);
        if (*((char *)v90 + 23) >= 0) {
          size_t v91 = *((unsigned __int8 *)v90 + 23);
        }
        else {
          size_t v91 = (size_t)v90[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v91 + 30);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v92 = &__str;
        }
        else {
          v92 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v91)
        {
          if (*((char *)v90 + 23) >= 0) {
            v93 = v90;
          }
          else {
            v93 = *v90;
          }
          memmove(v92, v93, v91);
        }
        strcpy((char *)v92 + v91, "__@topk_elementwise_not_equal_");
        std::to_string(&v194, v33);
        if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v94 = &v194;
        }
        else {
          v94 = (std::string *)v194.__r_.__value_.__r.__words[0];
        }
        if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = v194.__r_.__value_.__l.__size_;
        }
        v96 = std::string::append(&__str, (const std::string::value_type *)v94, v95);
        std::string::size_type v97 = v96->__r_.__value_.__r.__words[0];
        v192.__r_.__value_.__r.__words[0] = v96->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v96->__r_.__value_.__r.__words[1] + 7);
        char v98 = HIBYTE(v96->__r_.__value_.__r.__words[2]);
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v139.__r_.__value_.__l.__data_);
        }
        v139.__r_.__value_.__r.__words[0] = v97;
        v139.__r_.__value_.__l.__size_ = v192.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v139.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v139.__r_.__value_.__s + 23) = v98;
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        v99 = v149;
        v149 = @"ElementWise";

        v100 = objc_opt_new();
        [v100 setObject:@"NotEqual" forKeyedSubscript:@"Type"];
        objc_storeStrong(v150, v100);
        Espresso::ANECompilerEngine::compiler::add_unit(v6, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v139);
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
        v101 = v131;
        for (muint64_t m = v132; mm != v101; --mm)
        {
          if (SHIBYTE(mm[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(mm[-1].__r_.__value_.__l.__data_);
          }
        }
        v132 = v101;
        if ((unint64_t)v101 >= v133)
        {
          v104 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v131, (uint64_t)&v151);
        }
        else
        {
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v101, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v103 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
            v101->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v103;
          }
          v104 = v101 + 1;
        }
        v132 = v104;
        if ((unint64_t)v104 >= v133)
        {
          v106 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v131, (uint64_t)&v139);
        }
        else
        {
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v104, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v105 = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
            v104->__r_.__value_.__r.__words[2] = v139.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v105;
          }
          v106 = v104 + 1;
        }
        v132 = v106;
        uint64_t v107 = v129;
        for (uint64_t nn = v130; nn != v107; nn -= 24)
        {
          if (*(char *)(nn - 1) < 0) {
            operator delete(*(void **)(nn - 24));
          }
        }
        uint64_t v130 = v107;
        v109 = (const void **)*((void *)a3 + 6);
        if (*((char *)v109 + 23) >= 0) {
          size_t v110 = *((unsigned __int8 *)v109 + 23);
        }
        else {
          size_t v110 = (size_t)v109[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v194, v110 + 14);
        if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v111 = &v194;
        }
        else {
          v111 = (std::string *)v194.__r_.__value_.__r.__words[0];
        }
        if (v110)
        {
          if (*((char *)v109 + 23) >= 0) {
            v112 = v109;
          }
          else {
            v112 = *v109;
          }
          memmove(v111, v112, v110);
        }
        strcpy((char *)v111 + v110, "__@topk_input_");
        std::to_string(&v192, v33);
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v113 = &v192;
        }
        else {
          v113 = (std::string *)v192.__r_.__value_.__r.__words[0];
        }
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v114 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v114 = v192.__r_.__value_.__l.__size_;
        }
        v115 = std::string::append(&v194, (const std::string::value_type *)v113, v114);
        std::string::size_type v116 = v115->__r_.__value_.__r.__words[0];
        v193[0] = v115->__r_.__value_.__l.__size_;
        *(void *)((char *)v193 + 7) = *(std::string::size_type *)((char *)&v115->__r_.__value_.__r.__words[1] + 7);
        char v117 = HIBYTE(v115->__r_.__value_.__r.__words[2]);
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[0] = v116;
        __str.__r_.__value_.__l.__size_ = v193[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v193 + 7);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v117;
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v192.__r_.__value_.__l.__data_);
        }
        v6 = v127;
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
        v118 = v137;
        v137 = @"ElementWise";

        v119 = objc_opt_new();
        [v119 setObject:@"Mult" forKeyedSubscript:@"Type"];
        objc_storeStrong(&v138, v119);
        Espresso::ANECompilerEngine::compiler::add_unit(v127, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
        std::string::operator=(&v151, &__str);

        if (v135 < 0) {
          operator delete(v134);
        }
        v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
        v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }

        if (v147 < 0) {
          operator delete(v146);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v139.__r_.__value_.__l.__data_);
        }

        if (v159 < 0) {
          operator delete(v158);
        }
        v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
        v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
        if ((v152[23] & 0x80000000) != 0) {
          operator delete(*(void **)v152);
        }
        if (++v33 >= *((_DWORD *)this + 70)) {
          goto LABEL_306;
        }
      }

      if (v159 < 0) {
        operator delete(v158);
      }
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
      if ((v152[23] & 0x80000000) != 0) {
        operator delete(*(void **)v152);
      }
    }
LABEL_306:
    Espresso::ANECompilerEngine::compiler::add_unit(v6, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v174);
    if (*((unsigned char *)this + 294)) {
      Espresso::ANECompilerEngine::compiler::add_unit(v6, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v163);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }

    if (v170 < 0) {
      operator delete(v169);
    }
    *(void *)v152 = &v166;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    *(void *)v152 = &v164;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }

    if (v182 < 0) {
      operator delete(v181);
    }
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  if (v121) {
    nitro::nitro_function::nitro_function(v121);
  }
  if (v123) {
    nitro::nitro_function::nitro_function(v123);
  }
  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  nitro::nitro_function::nitro_function(v122);
}

void sub_1926FE4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x308]);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

__CFString *Espresso::ANECompilerEngine::anonymous namespace'::get_vector_dimension(__CFString *this, const __CFString *const *a2, const Espresso::layer_shape *a3)
{
  int v3 = *((_DWORD *)a2 + 5);
  if (*(_DWORD *)a2 == 1)
  {
    if ((v3 - 6) > 0xFFFFFFF8)
    {
      v4 = @"Width";
      goto LABEL_24;
    }
LABEL_50:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
  }
  if (v3 == -1)
  {
    if (*((_DWORD *)a2 + 1) != 1)
    {
      if (*((_DWORD *)a2 + 2) != 1)
      {
        if (*((_DWORD *)a2 + 3) != 1) {
          return 0;
        }
        if (*((_DWORD *)a2 + 4) == 1) {
          int v3 = 4;
        }
        else {
          int v3 = 5;
        }
LABEL_35:
        BOOL v5 = v3 == 5;
        v4 = @"Batch";
        int v7 = v5;
        v8 = @"Channel";
LABEL_39:
        if ((v7 & a3) != 0) {
          v4 = v8;
        }
LABEL_41:
        if (v4 != this) {
          return v4;
        }
        return 0;
      }
      if (*((_DWORD *)a2 + 4) == 1) {
        int v3 = 4;
      }
      else {
        int v3 = 5;
      }
LABEL_27:
      BOOL v5 = v3 == 5;
      v4 = @"Channel";
      int v7 = v5;
      v8 = @"Depth";
      goto LABEL_39;
    }
  }
  else
  {
    BOOL v5 = v3 >= 2 && *((_DWORD *)a2 + 1) == 1;
    if (!v5)
    {
      if (v3 <= 2 || *((_DWORD *)a2 + 2) != 1)
      {
        if (v3 < 4 || *((_DWORD *)a2 + 3) != 1)
        {
          if (v3 <= 4 || *((_DWORD *)a2 + 4) != 1) {
            return 0;
          }
          if (v3 > 5) {
            goto LABEL_50;
          }
          v4 = @"Depth";
          if (a3) {
            v4 = @"Batch";
          }
          goto LABEL_41;
        }
        if (v3 > 5) {
          goto LABEL_50;
        }
        goto LABEL_35;
      }
      if (v3 > 5) {
        goto LABEL_50;
      }
      goto LABEL_27;
    }
    if (v3 >= 6) {
      goto LABEL_50;
    }
  }
  v4 = @"Height";
LABEL_24:
  if (this == v4) {
    return 0;
  }
  return v4;
}

void Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(id *this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

__CFString *Espresso::ANECompilerEngine::anec_axis_str_for_cnn_axis(Espresso::ANECompilerEngine *this, unint64_t a2, char a3)
{
  if (a2 <= 5)
  {
    int v3 = (int)this;
    if (this <= 4)
    {
      result = @"Height";
      switch(v3)
      {
        case 0:
          return @"Width";
        case 1:
          return result;
        case 2:
          if (a2 != 5 || (a3 & 1) == 0) {
            return @"Channel";
          }
          return @"Depth";
        case 3:
          result = @"Batch";
          if (a2 == 5 && (a3 & 1) != 0) {
            return @"Channel";
          }
          return result;
        case 4:
          if (a2 == 5 && (a3 & 1) != 0) {
            return @"Batch";
          }
          else {
            return @"Depth";
          }
        default:
          break;
      }
    }
  }
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
}

void Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(Espresso::base_kernel::validate_for_engine_args_t *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (void **)((char *)this + 24);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = (void **)this;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
}

std::string *Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(std::string *this, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[2].__r_.__value_.__r.__words, *((void *)a2 + 6), *((void *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  BOOL v5 = (std::string *)((char *)this + 80);
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 5);
    this[4].__r_.__value_.__r.__words[0] = *((void *)a2 + 12);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[4].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 26);
  this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)*((id *)a2 + 14);
  return this;
}

void sub_1926FEB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::mix_reduce_kernel,std::allocator<Espresso::ANECompilerEngine::mix_reduce_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::reduce_params_t &,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  long long v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE384EC0;
  Espresso::ANECompilerEngine::reduce_kernel::reduce_kernel((uint64_t)(v6 + 3), a2, a3);
  v6[3] = &unk_1EE342578;
  v6[44] = &unk_1EE3426D8;
  *a1 = v7;
  a1[1] = v6;
}

void sub_1926FEC78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::layer_graph_info_t::~layer_graph_info_t(id *this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t Espresso::ANECompilerEngine::compiler::unit_t::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 48));
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  BOOL v5 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v5);
  }
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)BOOL v5 = v6;
  *((unsigned char *)a2 + 103) = 0;
  *((unsigned char *)a2 + 80) = 0;
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  uint64_t v7 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  v8 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v7;

  uint64_t v9 = *((void *)a2 + 15);
  *((void *)a2 + 15) = 0;
  v10 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v9;

  uint64_t v11 = *((void *)a2 + 16);
  *((void *)a2 + 16) = 0;
  v12 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v11;

  *(void *)(a1 + 136) = *((void *)a2 + 17);
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reduce_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

const char *Espresso::generic_topk_kernel::kernel_type_str(Espresso::generic_topk_kernel *this)
{
  return "topk";
}

BOOL Espresso::ANECompilerEngine::chop_topk_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  long long v6 = (_OWORD *)*((void *)a3 + 6);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *((void *)v6 + 9);
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
  }
  uint64_t v9 = 0;
LABEL_6:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  v75 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_c(v75, v10))
  {
    uint64_t v11 = *a2;
    v12 = a2[1];
    v114[0] = v11;
    v114[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    BOOL is_valid_for_engine = Espresso::ANECompilerEngine::mix_topk_kernel::is_valid_for_engine(a1, v114, a3);
    if (v12) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
    }
LABEL_35:
    int v19 = v75;
    goto LABEL_36;
  }
  if (!*(unsigned char *)(a1 + 285))
  {
    int v17 = *a2;
    int v16 = a2[1];
    v113[0] = v17;
    v113[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "TopK kernel: single_axis_topk required to run on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v103, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v113, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_26;
  }
  if (!*(unsigned char *)(a1 + 293))
  {
    int v18 = *a2;
    int v16 = a2[1];
    v112[0] = v18;
    v112[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "TopK kernel: sort must be true for TopK to run on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v103, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v112, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_26;
  }
  if (!*(unsigned char *)(a1 + 284) && (*(_DWORD *)(a1 + 288) & 0x80000000) != 0)
  {
    v46 = *a2;
    int v16 = a2[1];
    v111[0] = v46;
    v111[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "TopK kernel: nd_mode is false but axis is less than zero.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v103, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v111, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_26;
  }
  unsigned int v14 = Espresso::ANECompilerEngine::bottom_compute_path(a3, (const Espresso::base_kernel::validate_for_engine_args_t *)v9, 0);
  if (v14 >= 8 || ((0x97u >> v14) & 1) == 0)
  {
    unsigned int v15 = *a2;
    int v16 = a2[1];
    v110[0] = v15;
    v110[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "TopK kernel: invalid compute path for input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v103, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v110, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_26:
    if (v119) {
      nitro::nitro_function::nitro_function(v119);
    }
    v99 = &v118;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    v99 = v117;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_30:
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
    if (v16) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v16);
    }
    goto LABEL_34;
  }
  std::string::size_type v73 = *(&off_1E5746DC0 + v14);
  if (*(_DWORD *)(a1 + 280) != -1)
  {
    v21 = operator new(8uLL);
    void *v21 = *MEMORY[0x1E4F1CFC8];
    v22 = v21 + 1;
    if (*(unsigned char *)(a1 + 294))
    {
      uint64_t v23 = operator new(0x10uLL);
      uint64_t v24 = *MEMORY[0x1E4F1CFD0];
      *uint64_t v23 = *v21;
      v23[1] = v24;
      operator delete(v21);
      v21 = v23;
      v22 = v23 + 2;
    }
    std::string::size_type v71 = v21;
    v72 = v22;
    while (1)
    {
      uint64_t v25 = *v21;
      ANECTopKLayerDescInitialize();
      v26 = @"Min";
      if (!*(unsigned char *)(a1 + 292)) {
        v26 = @"Max";
      }
      std::string::size_type v27 = *(int *)(a1 + 280);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      __p.__r_.__value_.__l.__size_ = v27;
      *(_OWORD *)&v117[8] = xmmword_192DC8DC0;
      unsigned int v28 = *(_DWORD *)(a1 + 288);
      uint64_t v29 = *(void *)a3;
      unsigned int v30 = *(_DWORD *)(*(void *)a3 + 20);
      if ((v28 & 0x80000000) != 0)
      {
        int v31 = *(_DWORD *)(*(void *)a3 + 20);
        if (v30 == -1)
        {
          if (*(_DWORD *)(v29 + 16) == 1) {
            int v31 = 4;
          }
          else {
            int v31 = 5;
          }
        }
        v28 += v31;
      }
      int v32 = *(_DWORD *)(*(void *)a3 + 20);
      if (v30 == -1)
      {
        if (*(_DWORD *)(v29 + 16) == 1) {
          int v32 = 4;
        }
        else {
          int v32 = 5;
        }
      }
      if ((v28 & 0x80000000) != 0 || (int)v28 > v32)
      {
LABEL_118:
        operator delete(v71);
        BOOL is_valid_for_engine = 0;
        goto LABEL_35;
      }
      if (*(unsigned char *)(a1 + 284))
      {
        if (v30 == -1)
        {
          if (*(_DWORD *)(v29 + 16) == 1) {
            unsigned int v30 = 4;
          }
          else {
            unsigned int v30 = 5;
          }
        }
        int v33 = *(unsigned __int8 *)(v9 + 1281);
        v34 = @"Height";
        switch(v30 + ~v28)
        {
          case 0u:
            goto LABEL_71;
          case 1u:
            goto LABEL_82;
          case 2u:
            goto LABEL_75;
          case 3u:
            goto LABEL_78;
          case 4u:
            goto LABEL_72;
          default:
            goto LABEL_193;
        }
      }
      if (v30 == -1)
      {
        if (*(_DWORD *)(v29 + 16) == 1) {
          unsigned int v30 = 4;
        }
        else {
          unsigned int v30 = 5;
        }
      }
      else if (v30 > 5)
      {
        goto LABEL_193;
      }
      if (v28 > 4) {
LABEL_193:
      }
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      int v33 = *(unsigned __int8 *)(v9 + 1281);
      v34 = @"Height";
      switch(v28)
      {
        case 0u:
LABEL_71:
          v34 = @"Width";
          break;
        case 1u:
          break;
        case 2u:
LABEL_75:
          if (v30 == 5 && v33) {
            goto LABEL_77;
          }
          goto LABEL_80;
        case 3u:
LABEL_78:
          if (v30 != 5 || !v33) {
            goto LABEL_81;
          }
LABEL_80:
          v34 = @"Channel";
          break;
        case 4u:
LABEL_72:
          if (v30 == 5 && v33)
          {
            int v33 = 1;
LABEL_81:
            v34 = @"Batch";
          }
          else
          {
LABEL_77:
            v34 = @"Depth";
          }
          break;
        default:
          goto LABEL_193;
      }
LABEL_82:
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v34;
      uint64_t v121 = v25;
      ANECTensorDescInitialize();
      Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v83, (NSString *)(a1 + 296), v75);
      v115 = 0;
      uint64_t v96 = 0;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = *(void *)a3;
      uint64_t v36 = *(void *)(*(void *)a3 + 32);
      long long v37 = *(_OWORD *)(*(void *)a3 + 16);
      v78[0] = *(_OWORD *)*(void *)a3;
      v78[1] = v37;
      uint64_t v79 = v36;
      v81 = 0;
      uint64_t v82 = 0;
      long long v80 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v80, *(const void **)(v35 + 40), *(void *)(v35 + 48), (uint64_t)(*(void *)(v35 + 48) - *(void *)(v35 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v91, (const Espresso::net *)v9, (const Espresso::layer_shape *)v78, 1);
      if (v80)
      {
        v81 = v80;
        operator delete(v80);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      *(void *)&long long v38 = v93;
      *((void *)&v38 + 1) = v94;
      long long v101 = v38;
      v99 = v73;
      uint64_t v102 = v92;
      *(void *)&long long v38 = (int)v91;
      *((void *)&v38 + 1) = SHIDWORD(v91);
      long long v100 = v38;
      int v39 = ANECValidateTopKLayer();
      if (!v39) {
        goto LABEL_96;
      }
      v40 = a2[1];
      v77[0] = *a2;
      v77[1] = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->i64[1], 1uLL, memory_order_relaxed);
      }
      BOOL v41 = Espresso::ANECompilerEngine::mix_topk_kernel::is_valid_for_engine(a1, v77, a3);
      if (v40) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40);
      }
      if (v41) {
        break;
      }
      v44 = a2[1];
      v76[0] = *a2;
      v76[1] = v44;
      if (v44) {
        atomic_fetch_add_explicit(&v44->i64[1], 1uLL, memory_order_relaxed);
      }
      std::to_string(&v84, v39);
      v45 = std::string::insert(&v84, 0, "TopK kernel: ANECValidateTopKLayer failed with status ");
      std::string v108 = *v45;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v103, (long long *)&v108, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v76, (Espresso::base_kernel::validate_for_engine_warning_t *)&v103);
      if (v106) {
        nitro::nitro_function::nitro_function(v106);
      }
      std::string::size_type v97 = (void **)v105;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v97);
      std::string::size_type v97 = (void **)v104;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v97);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v103.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v108.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if (v44) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v44);
      }
      char v43 = 0;
      v22 = v72;
LABEL_110:
      if (v83.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v83.__r_.__value_.__l.__size_);
      }
      if ((v43 & 1) == 0) {
        goto LABEL_118;
      }
      if (++v21 == v22)
      {
        operator delete(v71);
        BOOL is_valid_for_engine = 1;
        goto LABEL_35;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "ane.force_generic_topk");
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
    v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v9 + 472), &v103, (uint64_t)&std::piecewise_construct, &v108);
    v22 = v72;
    MEMORY[0x192FF0F50]((char *)v42 + 56, "1");
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
LABEL_96:
    char v43 = 1;
    goto LABEL_110;
  }
  if (!*(unsigned char *)(a1 + 284))
  {
    v68 = *a2;
    int v16 = a2[1];
    v109[0] = v68;
    v109[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "TopK kernel: unsupported configuration (nd_mode == false).");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v103, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v109, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_30;
  }
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F1CFC8];
  std::vector<__CFBoolean const*>::vector[abi:ne180100](&v108, &__p, 1uLL);
  if (*(unsigned char *)(a1 + 294)) {
    std::vector<__CFBoolean const*>::push_back[abi:ne180100]((void **)&v108.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = v108.__r_.__value_.__l.__size_;
  char v48 = (uint64_t *)v108.__r_.__value_.__r.__words[0];
  if (v108.__r_.__value_.__r.__words[0] != v108.__r_.__value_.__l.__size_)
  {
    char v74 = v8;
    while (1)
    {
      uint64_t v49 = *v48;
      ANECSortLayerDescInitialize();
      v50 = @"Ascending";
      if (!*(unsigned char *)(a1 + 292)) {
        v50 = @"Descending";
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      int v51 = *(_DWORD *)(a1 + 288);
      unsigned int v52 = *(_OWORD **)a3;
      int v53 = *(_DWORD *)(*(void *)a3 + 20);
      if (v51 < 0)
      {
        int v54 = *(_DWORD *)(*(void *)a3 + 20);
        if (v53 == -1)
        {
          if (*((_DWORD *)v52 + 4) == 1) {
            int v54 = 4;
          }
          else {
            int v54 = 5;
          }
        }
        v51 += v54;
      }
      if (v53 == -1)
      {
        if (*((_DWORD *)v52 + 4) == 1) {
          int v53 = 4;
        }
        else {
          int v53 = 5;
        }
      }
      if (v51 < 0) {
LABEL_194:
      }
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      int v55 = v53 + ~v51;
      int v56 = *(unsigned __int8 *)(v9 + 1281);
      v57 = @"Height";
      switch(v55)
      {
        case 0:
          v57 = @"Width";
          goto LABEL_150;
        case 1:
          goto LABEL_150;
        case 2:
          if (v53 == 5 && v56 != 0) {
            goto LABEL_146;
          }
          goto LABEL_149;
        case 3:
          v57 = @"Batch";
          if (v53 == 5 && *(unsigned char *)(v9 + 1281)) {
LABEL_149:
          }
            v57 = @"Channel";
          goto LABEL_150;
        case 4:
          if (v53 != 5 || (v57 = @"Batch", !*(unsigned char *)(v9 + 1281))) {
LABEL_146:
          }
            v57 = @"Depth";
LABEL_150:
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
          if (!vector_dimension)
          {
            v69 = *a2;
            v70 = a2[1];
            v107[0] = v69;
            v107[1] = v70;
            if (v70) {
              atomic_fetch_add_explicit(&v70->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v99, "TopK kernel: unsupported input shape, expect size 1 for vector dimension.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v103, (long long *)&v99, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v107, (Espresso::base_kernel::validate_for_engine_warning_t *)&v103);
            if (v106) {
              nitro::nitro_function::nitro_function(v106);
            }
            size_t v91 = (void **)v105;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v91);
            size_t v91 = (void **)v104;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v91);
            if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v103.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v100) < 0) {
              operator delete(v99);
            }
            if (v70) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v70);
            }
LABEL_191:
            if (v108.__r_.__value_.__r.__words[0])
            {
              v108.__r_.__value_.__l.__size_ = v108.__r_.__value_.__r.__words[0];
              operator delete(v108.__r_.__value_.__l.__data_);
            }
LABEL_34:
            BOOL is_valid_for_engine = 0;
            goto LABEL_35;
          }
          *(_OWORD *)char v117 = xmmword_192DC8DC0;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)vector_dimension;
          uint64_t v120 = v49;
          ANECTensorDescInitialize();
          Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v97, (NSString *)(a1 + 296), v75);
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v60 = *(_OWORD **)a3;
          uint64_t v61 = *(void *)(*(void *)a3 + 32);
          long long v62 = *(_OWORD *)(*(void *)a3 + 16);
          v86[0] = *(_OWORD *)*(void *)a3;
          v86[1] = v62;
          uint64_t v87 = v61;
          v89 = 0;
          uint64_t v90 = 0;
          uint64_t v88 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, *((const void **)v60 + 5), *((void *)v60 + 6), (uint64_t)(*((void *)v60 + 6) - *((void *)v60 + 5)) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v91, (const Espresso::net *)v9, (const Espresso::layer_shape *)v86, 1);
          if (v88)
          {
            v89 = v88;
            operator delete(v88);
          }
          if (v8) {
            nitro::nitro_function::nitro_function(v8);
          }
          *(void *)&long long v63 = v93;
          *((void *)&v63 + 1) = v94;
          long long v101 = v63;
          v99 = v73;
          uint64_t v102 = v92;
          *(void *)&long long v63 = (int)v91;
          *((void *)&v63 + 1) = SHIDWORD(v91);
          long long v100 = v63;
          int v64 = ANECValidateSortLayer();
          int v65 = v64;
          if (v64)
          {
            v66 = a2[1];
            v85[0] = *a2;
            v85[1] = v66;
            if (v66) {
              atomic_fetch_add_explicit(&v66->i64[1], 1uLL, memory_order_relaxed);
            }
            std::to_string(&v83, v64);
            size_t v67 = std::string::insert(&v83, 0, "TopK kernel: ANECValidateSortLayer failed with status ");
            std::string v84 = *v67;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v103, (long long *)&v84, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v85, (Espresso::base_kernel::validate_for_engine_warning_t *)&v103);
            if (v106) {
              nitro::nitro_function::nitro_function(v106);
            }
            v115 = (void **)v105;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v115);
            v115 = (void **)v104;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v115);
            if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v103.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v83.__r_.__value_.__l.__data_);
            }
            if (v66) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v66);
            }
          }
          if (v98) {
            nitro::nitro_function::nitro_function(v98);
          }
          v8 = v74;
          if (v65) {
            goto LABEL_191;
          }
          if (++v48 == (uint64_t *)size)
          {
            char v48 = (uint64_t *)v108.__r_.__value_.__r.__words[0];
            goto LABEL_175;
          }
          break;
        default:
          goto LABEL_194;
      }
    }
  }
LABEL_175:
  int v19 = v75;
  if (v48)
  {
    v108.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
    operator delete(v48);
  }
  BOOL is_valid_for_engine = 1;
LABEL_36:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_1926FFBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a70);
  if (a64 < 0) {
    operator delete(__p);
  }
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  v72 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v72;
    operator delete(v72);
  }

  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_topk_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    v12 = *a2;
    v13 = a2[1];
    v69[0] = v12;
    v69[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v73, "topk not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v73, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v69, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v68) {
      nitro::nitro_function::nitro_function(v68);
    }
    v70 = (std::string::size_type *)v67;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v70 = &v64;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(v73);
    }
    goto LABEL_26;
  }
  if (!*(unsigned char *)(a1 + 284))
  {
    int v18 = *a2;
    v13 = a2[1];
    v62[0] = v18;
    v62[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v73, "TopK kernel: nd_mode required on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v73, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v62, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v68) {
      nitro::nitro_function::nitro_function(v68);
    }
    v70 = (std::string::size_type *)v67;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v70 = &v64;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74) < 0)
    {
      operator delete(v73);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (!v13)
    {
LABEL_28:
      BOOL v19 = 0;
      goto LABEL_118;
    }
LABEL_27:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    goto LABEL_28;
  }
  uint64_t v14 = a3[6];
  unsigned int v15 = *(std::__shared_weak_count **)(v14 + 80);
  if (v15)
  {
    int v16 = std::__shared_weak_count::lock(v15);
    if (v16) {
      int v17 = *(const Espresso::net **)(v14 + 72);
    }
    else {
      int v17 = 0;
    }
  }
  else
  {
    int v17 = 0;
    int v16 = 0;
  }
  uint64_t v20 = *a3;
  uint64_t v21 = *(void *)(*a3 + 32);
  long long v22 = *(_OWORD *)(*a3 + 16);
  v55[0] = *(_OWORD *)*a3;
  v55[1] = v22;
  uint64_t v56 = v21;
  v57 = 0;
  long long v58 = 0;
  uint64_t v59 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v57, *(const void **)(v20 + 40), *(void *)(v20 + 48), (uint64_t)(*(void *)(v20 + 48) - *(void *)(v20 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v60, v17, (const Espresso::layer_shape *)v55, 1);
  if (v57)
  {
    long long v58 = v57;
    operator delete(v57);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = *(std::__shared_weak_count **)(v23 + 80);
  if (v24)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v24);
    if (v25) {
      v26 = *(const Espresso::net **)(v23 + 72);
    }
    else {
      v26 = 0;
    }
  }
  else
  {
    v26 = 0;
    uint64_t v25 = 0;
  }
  uint64_t v27 = a3[3];
  uint64_t v28 = *(void *)(v27 + 32);
  long long v29 = *(_OWORD *)(v27 + 16);
  v49[0] = *(_OWORD *)v27;
  v49[1] = v29;
  uint64_t v50 = v28;
  int v51 = 0;
  unsigned int v52 = 0;
  uint64_t v53 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v51, *(const void **)(v27 + 40), *(void *)(v27 + 48), (uint64_t)(*(void *)(v27 + 48) - *(void *)(v27 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v54, v26, (const Espresso::layer_shape *)v49, 1);
  if (v51)
  {
    unsigned int v52 = v51;
    operator delete(v51);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  unsigned int v30 = *(long long **)(*(void *)a3[6] + 224 * a3[9] + 136);
  if (*((char *)v30 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v48.__r_.__value_.__r.__words[2] = *((void *)v30 + 2);
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v31;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v9 + 360), &v48))
  {
    std::string::size_type v73 = &v48;
    int v32 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 352), &v48, (uint64_t)&std::piecewise_construct, (long long **)&v73);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v32 + 56);
    std::string::size_type v64 = 0;
    unint64_t v65 = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v32 + 9), *((void *)v32 + 10), (uint64_t)(*((void *)v32 + 10) - *((void *)v32 + 9)) >> 2);
    if (LODWORD(__p.__r_.__value_.__r.__words[1]) == -1) {
      int v33 = 1;
    }
    else {
      int v33 = __p.__r_.__value_.__r.__words[1];
    }
    if (__p.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v64 = __p.__r_.__value_.__r.__words[2];
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    int v33 = *((_DWORD *)a3 + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "ane.enable_iterative_topk");
  std::string::basic_string[abi:ne180100]<0>(&v70, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v9 + 472, (uint64_t)&v73, (uint64_t)&v70, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v34 = __p.__r_.__value_.__l.__size_ == 1 && *__p.__r_.__value_.__l.__data_ == 49;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v34 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1 && __p.__r_.__value_.__s.__data_[0] == 49;
  }
  if (SHIBYTE(v71) < 0) {
    operator delete(v70);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73);
  }
  if (*(_DWORD *)(a1 + 280) == 1
    || v34
    && *(_DWORD *)(a1 + 288) == 1
    && *(unsigned char *)(a1 + 284)
    && ((int v37 = *(_DWORD *)(*a3 + 20), v37 == 4) || v37 == -1 && *(_DWORD *)(*a3 + 16) == 1))
  {
    uint64_t v35 = v10;
    if (*(unsigned char *)(a1 + 285))
    {
      unsigned int v36 = (v61 & (*(int *)(a1 + 288) >> 31)) + *(_DWORD *)(a1 + 288);
      if (*(unsigned char *)(a1 + 284)) {
        unsigned int v36 = v61 + ~v36;
      }
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = 897988541;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0x100000007uLL;
      std::string::size_type v64 = 0;
      unint64_t v65 = 0xFFFFFFFF00000000;
      char v66 = 0;
      if (v36 >= 3)
      {
        char v44 = 0;
        std::string::basic_string[abi:ne180100]<0>(v45, "Cannot perform Argmax/Argmin along Batch or Depth");
      }
      else
      {
        LODWORD(__p.__r_.__value_.__r.__words[1]) = dword_192DCD668[v36];
        LODWORD(__p.__r_.__value_.__l.__data_) = 11;
        Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw((uint64_t)&v73, v35, v60, v54, (long long *)&__p, v33);
        if ((_BYTE)v73)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw((uint64_t)&v70, v35, v60, v54, (long long *)&__p, v33);
          if ((_BYTE)v70)
          {
            if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v60, v35))
            {
              if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v54, v35))
              {
                char v44 = 1;
                std::string::basic_string[abi:ne180100]<0>(v45, "Success");
              }
              else
              {
                char v44 = 0;
                std::string::basic_string[abi:ne180100]<0>(v45, "Output blob dimensions exceed ANE limit.");
              }
            }
            else
            {
              char v44 = 0;
              std::string::basic_string[abi:ne180100]<0>(v45, "Input blob dimensions exceed ANE limit.");
            }
          }
          else
          {
            char v44 = 0;
            *(_OWORD *)v45 = v71;
            uint64_t v46 = v72;
            long long v71 = 0uLL;
            uint64_t v72 = 0;
          }
          if (SHIBYTE(v72) < 0) {
            operator delete((void *)v71);
          }
          if (SHIBYTE(v75) < 0) {
            operator delete((void *)v74);
          }
        }
        else
        {
          char v44 = 0;
          *(_OWORD *)v45 = v74;
          uint64_t v46 = v75;
        }
      }
    }
    else
    {
      char v44 = 0;
      std::string::basic_string[abi:ne180100]<0>(v45, "Only Channelwise or Spatial ArgMax/Min is supported on ANE");
    }

    BOOL v19 = v44 != 0;
    if (!v44)
    {
      v40 = *a2;
      BOOL v41 = a2[1];
      v43[0] = v40;
      v43[1] = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v45, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v43, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (v68) {
        nitro::nitro_function::nitro_function(v68);
      }
      std::string::size_type v73 = (std::string *)v67;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      std::string::size_type v73 = (std::string *)&v64;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v41) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v41);
      }
    }
    if (SHIBYTE(v46) < 0) {
      operator delete(v45[0]);
    }
  }
  else
  {
    long long v38 = *a2;
    int v39 = a2[1];
    v47[0] = v38;
    v47[1] = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v73, "TopK kernel: num_k > 1 not available on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v73, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v47, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v68) {
      nitro::nitro_function::nitro_function(v68);
    }
    v70 = (std::string::size_type *)v67;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v70 = &v64;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(v73);
    }
    if (v39) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v39);
    }
    BOOL v19 = 0;
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
LABEL_118:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v19;
}

void sub_1927006BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (*(char *)(v56 - 113) < 0) {
    operator delete(*(void **)(v56 - 136));
  }
  if (*(char *)(v56 - 81) < 0) {
    operator delete(*(void **)(v56 - 104));
  }

  if (a25 < 0) {
    operator delete(__p);
  }

  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  _Unwind_Resume(a1);
}

void sub_19270086C()
{
  if (!v0) {
    JUMPOUT(0x192700864);
  }
  JUMPOUT(0x19270085CLL);
}

void *std::vector<__CFBoolean const*>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * v7];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1927008F4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<__CFBoolean const*>::push_back[abi:ne180100](void **a1)
{
  int v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v5 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = v2 - (void)*a1;
    uint64_t v7 = v6 >> 2;
    if (v6 >> 2 <= (unint64_t)(v5 + 1)) {
      uint64_t v7 = v5 + 1;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8) {
      unint64_t v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8);
    }
    else {
      uint64_t v9 = 0;
    }
    v10 = (void *)(v8 + 8 * v5);
    unint64_t v11 = v8 + 8 * v9;
    void *v10 = *MEMORY[0x1E4F1CFD0];
    long long v4 = v10 + 1;
    v13 = (char *)*a1;
    v12 = (char *)a1[1];
    if (v12 != *a1)
    {
      do
      {
        uint64_t v14 = *((void *)v12 - 1);
        v12 -= 8;
        *--v10 = v14;
      }
      while (v12 != v13);
      v12 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v4;
    a1[2] = (void *)v11;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *int v3 = *MEMORY[0x1E4F1CFD0];
    long long v4 = v3 + 1;
  }
  a1[1] = v4;
}

void Espresso::ANECompilerEngine::mix_topk_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::chop_topk_kernel::~chop_topk_kernel(Espresso::ANECompilerEngine::chop_topk_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::chop_topk_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::chop_topk_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_topk_kernel::~mix_topk_kernel(Espresso::ANECompilerEngine::mix_topk_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_topk_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_topk_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_topk_kernel::compile(Espresso::ANECompilerEngine::mix_topk_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_topk_kernel::~mix_topk_kernel(Espresso::ANECompilerEngine::mix_topk_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_topk_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_topk_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

double Espresso::ANECompilerEngine::mix_topk_kernel::mix_topk_kernel(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 5;
  *(_WORD *)(v5 + 284) = 0;
  *(_DWORD *)(v5 + 288) = -1;
  *(_WORD *)(v5 + 292) = 256;
  *(unsigned char *)(v5 + 294) = 1;
  *(void *)uint64_t v5 = &unk_1EE34FEF8;
  uint64_t v6 = *a3;
  *(void *)(v5 + 287) = *(uint64_t *)((char *)a3 + 7);
  *(void *)(v5 + 280) = v6;
  LOBYTE(v6) = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(unsigned char *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(unsigned char *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(unsigned char *)(v5 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 476) = result;
  *(unsigned char *)(v5 + 484) = 0;
  *(void *)(v5 + 488) = 0;
  *(void *)(v5 + 496) = 0;
  *(unsigned char *)(v5 + 504) = v6;
  *(void *)uint64_t v5 = &unk_1EE340C40;
  *(void *)(v5 + 296) = &unk_1EE340DA0;
  return result;
}

void sub_192700FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192701134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,std::vector<int>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  return this;
}

void sub_1927011CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    unint64_t v8 = (std::string *)(v6 + 4);
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1927012B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pair<std::string const,std::vector<int>>::~pair(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1927013F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_192701474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void pthread_mutex_locker::pthread_mutex_locker(pthread_mutex_locker *this, _opaque_pthread_mutex_t *a2)
{
  *(void *)this = &g_mutex;
  if (pthread_mutex_locker::pthread_mutex_locker(_opaque_pthread_mutex_t &)::onceToken != -1) {
    dispatch_once(&pthread_mutex_locker::pthread_mutex_locker(_opaque_pthread_mutex_t &)::onceToken, &__block_literal_global_432);
  }
  if (!pthread_mutex_locker::g_disabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)this);
  }
}

void pthread_mutex_locker::~pthread_mutex_locker(pthread_mutex_t **this)
{
  if (!pthread_mutex_locker::g_disabled) {
    pthread_mutex_unlock(*this);
  }
}

void ___ZN20pthread_mutex_lockerC2ER23_opaque_pthread_mutex_t_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v2 = [v0 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v1 = [v2 objectForKeyedSubscript:@"espresso.locker_disabled"];
  pthread_mutex_locker::g_disabled = [v1 BOOLValue];
}

void sub_1927015C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_192701680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192701D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, void *a15)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }

  _Unwind_Resume(a1);
}

void sub_19270212C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        unint64_t v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v6;
        uint64_t v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2)) {
        break;
      }
      uint64_t v9 = v6 + 1;
      uint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_9:
    long long v10 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x40uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    v6[6] = *(uint64_t **)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = 0;
    uint64_t *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    long long *v9 = (uint64_t *)v6;
    unint64_t v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *a1 = v11;
      v12 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

void sub_19270260C(_Unwind_Exception *a1)
{
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)(v4 - 168));
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)(v4 - 160));

  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point ___ZN8Espresso12time_secondsEv_block_invoke()
{
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Espresso::time_seconds(void)::t0 = result.__d_.__rep_;
  return result;
}

void sub_192702914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }

  _Unwind_Resume(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::V9Engine::context,Espresso::abstract_context>(void *result, void *lpsrc, uint64_t a3)
{
  int v3 = result;
  if (lpsrc
  {
    *int v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *int v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void sub_192702C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192702FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v11);
  operator delete(v13);
  operator delete(v12);
  operator delete(v10);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a10);
  _Unwind_Resume(a1);
}

void sub_1927030BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_1927031E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_192703284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_19270374C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, pthread_mutex_t *a20,uint64_t a21,uint64_t a22)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>>>>::reset[abi:ne180100](&a22);
  if (a19 < 0) {
    operator delete(__p);
  }
  pthread_mutex_locker::~pthread_mutex_locker(&a20);

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v1 + 103) < 0) {
        operator delete(*(void **)(v1 + 80));
      }
      if (*(char *)(v1 + 79) < 0) {
        operator delete(*(void **)(v1 + 56));
      }
      if (*(char *)(v1 + 55) < 0) {
        operator delete(*(void **)(v1 + 32));
      }
    }
    operator delete((void *)v1);
  }
}

void sub_1927038A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_192703974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_192705088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v42 - 240));
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&__p);
  if (a38) {
    nitro::nitro_function::nitro_function(a38);
  }
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  long long v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)long long v10 = &unk_1EE389920;
  *((void *)v10 + 3) = &unk_1EE36BEB0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  std::chrono::steady_clock::time_point result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  *((void *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_192705438(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_1927054E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)EspressoImage2Image;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_192705598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192705634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192705B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,pthread_mutex_t *a24)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  pthread_mutex_locker::~pthread_mutex_locker(&a24);

  _Unwind_Resume(a1);
}

void sub_192705D88(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1927067B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_convolution_kernel,Espresso::convolution_uniforms>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  int v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v22 = v16;
    uint64_t v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v22 = v16;
    uint64_t v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_192706C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_192706F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  if (a32 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_192707048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19270726C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,Espresso::Image2Image::postprocessing_settings_t>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1927073D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192707504(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1927074B8);
  }

  _Unwind_Resume(a1);
}

void sub_1927076A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_192707A7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_192707B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)TwoNetsStyleTransfer;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_192707DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192707EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<std::string>>,std::unordered_set<std::string>*,std::unordered_set<std::string>*,std::unordered_set<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      std::unordered_set<std::string>::unordered_set(a3 + v6, a1 + v6);
      v6 += 40;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_map<std::string,int>>,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      std::unordered_map<std::string,int>::unordered_map(a3 + v6, a1 + v6);
      v6 += 40;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void Espresso::generic_conv3d_kernel::get_f16_weights(int8x8_t *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
  BOOL has_parameter_blob = Espresso::base_kernel::has_parameter_blob(this, (unsigned __int8 *)__p);
  BOOL v5 = has_parameter_blob;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v5)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
      Espresso::base_kernel::get_parameter_blob<unsigned short,5>();
    }
  }
  else if (has_parameter_blob)
  {
    goto LABEL_3;
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_1927080C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSGraphEngine::Kernels::conv3d_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 448);
  *a2 = *(void *)(this + 440);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::MPSGraphEngine::Kernels::conv3d_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 432);
  *a2 = *(void *)(this + 424);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::MPSGraphEngine::Kernels::conv3d_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = v3;
  *(void *)(a1 + 448) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::MPSGraphEngine::Kernels::conv3d_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v5;
  *(void *)(a1 + 432) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(a1 + 304) = *a2 != 0;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t Espresso::MPSGraphEngine::Kernels::conv3d_kernel::num_weights_blob(Espresso::MPSGraphEngine::Kernels::conv3d_kernel *this)
{
  if (*((_DWORD *)this + 76)) {
    return 2;
  }
  else {
    return 1;
  }
}

const char *Espresso::generic_conv3d_kernel::kernel_type_str(Espresso::generic_conv3d_kernel *this)
{
  return "conv3d";
}

BOOL Espresso::MPSGraphEngine::Kernels::conv3d_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v4 = a3[1] - *a3;
  if (v4 != 64)
  {
    uint64_t v6 = a2[1];
    v23[0] = *a2;
    v23[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v4 = a3[1] - *a3;
    }
    std::to_string(&v17, v4 >> 6);
    char v7 = std::string::insert(&v17, 0, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: number of inputs must be 1, received ");
    std::string v18 = *v7;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v18, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v23, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_13;
  }
  uint64_t v5 = a3[4] - a3[3];
  if (v5 != 64)
  {
    uint64_t v6 = a2[1];
    v16[0] = *a2;
    v16[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v5 = a3[4] - a3[3];
    }
    std::to_string(&v17, v5 >> 6);
    unint64_t v8 = std::string::insert(&v17, 0, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: number of outputs must be 1, received ");
    std::string v18 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v18, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v16, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_13:
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    std::string v24 = (void **)v21;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v24);
    std::string v24 = (void **)v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    uint64_t v9 = (void *)v17.__r_.__value_.__r.__words[0];
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 400))
  {
    uint64_t v6 = a2[1];
    v15[0] = *a2;
    v15[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v18, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: low_precision_accumulation");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v18, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v15, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_29:
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    uint64_t v9 = (void *)v18.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v9);
LABEL_36:
    if (v6) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
    }
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 348) >= 2u)
  {
    uint64_t v6 = a2[1];
    v14[0] = *a2;
    v14[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v18, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: padding configuration");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v18, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 332) != -1)
  {
    uint64_t v6 = a2[1];
    v13[0] = *a2;
    v13[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v18, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: fused_activation_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v18, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_29;
  }
  int v11 = *(_DWORD *)(a1 + 384);
  if (v11 >= 2 && v11 == *(_DWORD *)(a1 + 316)) {
    return 1;
  }
  int v12 = *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 320) == 1
    && (v12 == 1
     && *(_DWORD *)(a1 + 328) == 1
     && *(_WORD *)(a1 + 368) == 1
     && *(_WORD *)(a1 + 370) == 1
     && *(_WORD *)(a1 + 372) == 1
     && (*(_WORD *)(a1 + 348)
      || !*(_WORD *)(a1 + 364)
      && !*(_WORD *)(a1 + 366)
      && !*(_WORD *)(a1 + 356)
      && !*(_WORD *)(a1 + 358)
      && !*(_WORD *)(a1 + 360)
      && !*(_WORD *)(a1 + 362))
     || *(_WORD *)(a1 + 368) == 1))
  {
    return 1;
  }
  if (v12 == 1 && *(_WORD *)(a1 + 370) == 1) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 328) == 1) {
    return *(unsigned __int16 *)(a1 + 372) == 1;
  }
  return 0;
}

void sub_1927085B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a30);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::conv3d_kernel::clear_weights(Espresso::MPSGraphEngine::Kernels::conv3d_kernel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 56);
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 54);
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::MPSGraphEngine::Kernels::conv3d_kernel::~conv3d_kernel(Espresso::MPSGraphEngine::Kernels::conv3d_kernel *this)
{
  *(void *)this = &unk_1EE32E4F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE32E4F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

double Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = 0;
  *(void *)(v2 + 280) = v2 + 288;
  *(void *)uint64_t v2 = &unk_1EE355310;
  *(void *)(v2 + 304) = 1;
  *(void *)&long long v8 = 0x100000001;
  *((void *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(v2 + 312) = v8;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v2 + 328) = 0xFFFFFFFF00000001;
  *(void *)(v2 + 336) = _D1;
  *(_DWORD *)(v2 + 344) = 0;
  *(_WORD *)(v2 + 348) = 1;
  *(void *)(v2 + 358) = 0;
  *(void *)(v2 + 350) = 0;
  *(_WORD *)(v2 + 366) = 0;
  WORD1(v8) = 1;
  WORD3(v8) = 1;
  *(void *)(v2 + 368) = v8;
  *(_DWORD *)(v2 + 376) = 65537;
  *(void *)(v2 + 380) = 0x100000000;
  *(void *)(v2 + 396) = 0;
  *(void *)(v2 + 388) = 0;
  return *(double *)&v8;
}

const char *espresso_get_branch()
{
  return "x";
}

uint64_t Espresso::net_compiler::rebuild(Espresso::net_compiler *this)
{
  return 0;
}

void Espresso::net_compiler::compile_network_to_cache_url_identifier(Espresso::net_compiler *this)
{
}

void Espresso::pass_global_name_indexing_result::~pass_global_name_indexing_result(Espresso::pass_global_name_indexing_result *this)
{
  Espresso::pass_global_name_indexing_result::~pass_global_name_indexing_result(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;
  void **v3;

  *(void *)this = &unk_1EE367E48;
  uint64_t v2 = (char *)this + 16;
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)v2);
}

void Espresso::net_compiler_segment_based::compilation_cache_purge(Espresso::net_compiler_segment_based *this)
{
}

uint64_t Espresso::net_compiler_segment_based::implements_compilation_cache_purge(Espresso::net_compiler_segment_based *this)
{
  return 0;
}

void Espresso::net_compiler_segment_based::compilation_cache_exists(Espresso::net_compiler_segment_based *this)
{
}

void Espresso::net_compiler_segment_based::clear_priority(Espresso::net_compiler_segment_based *this)
{
}

void Espresso::net_compiler_segment_based::set_priority()
{
}

void Espresso::net_compiler_segment_based::get_intermediate_buffer_handle(Espresso::net_compiler_segment_based *this)
{
}

uint64_t std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);

  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 16);
}

__n128 std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(a2 + 16, (uint64_t *)(a3 + 16));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(a2 + 56, (uint64_t *)(a3 + 56));
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  __n128 result = *(__n128 *)(a3 + 96);
  *(__n128 *)(a2 + 96) = result;
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  return result;
}

void Espresso::net_compiler_segment_based::__forward(void *a1, void *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v29 = std::__shared_weak_count::lock(v2)) == 0 || (uint64_t v4 = a1[1]) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*a2
  {
    uint64_t v5 = a2[1];
    if (v5)
    {
      uint64_t v28 = (std::__shared_weak_count *)a2[1];
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_10;
    }
  }
  else
  {
    long long v31 = 0;
  }
  uint64_t v28 = 0;
LABEL_10:
  uint64_t v6 = a1[5] - a1[4];
  if (v6 != -120)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
    while (1)
    {
      if (v8 >= v9) {
        unint64_t v10 = (uint64_t)(*(void *)(v4 + 40) - *(void *)(v4 + 32)) >> 4;
      }
      else {
        unint64_t v10 = *(void *)(a1[4] + 120 * v8);
      }
      uint64_t v11 = a2[1];
      *(void *)&long long v42 = *a2;
      *((void *)&v42 + 1) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      if (v7 >= v10 || !*(unsigned char *)(*a2 + 97)) {
        goto LABEL_35;
      }
      if (v31) {
        break;
      }
      (*(void (**)(void))(*(void *)*a2 + 24))(*a2);
LABEL_35:
      v38[0] = *(unsigned char *)(v4 + 1352);
      memset(&v38[4], 0, 64);
      int v39 = 0;
      if (v38[0])
      {
        *(void *)&v38[8] = v7;
        *(void *)&v38[16] = v10;
        memset(&v38[32], 0, 24);
        *(void *)&v38[24] = v4;
        *(void *)&v38[56] = v4;
        *(_DWORD *)&v38[4] = 723714152;
        kdebug_trace();
      }
      uint64_t v35 = v4;
      long long v36 = v42;
      if (*((void *)&v42 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      char v37 = 0;
      if (v7 < v10)
      {
        uint64_t v20 = 16 * v7;
        unint64_t v21 = v7;
        do
        {
          if (*a2) {
            *(void *)(*a2 + 48) = v21;
          }
          if (*(unsigned char *)(v4 + 1352)
            && std::string::compare((const std::string *)(*(void *)(*(void *)(v4 + 32) + v20) + 40), "context_transfer"))
          {
            long long v22 = *(uint64_t (****)(void))(*(void *)(*(void *)(*(void *)(*(void *)(v4 + 32) + v20)
                                                                             + 64)
                                                                 + 8)
                                                     + 8);
            int v23 = (**v22)(v22);
            JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)v34, v23);
          }
          (*(void (**)(void, long long *, unint64_t))(**(void **)(*(void *)(v4 + 32) + v20) + 8))(*(void *)(*(void *)(v4 + 32) + v20), &v42, v21++);
          v20 += 16;
        }
        while (v10 != v21);
      }
      JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)v34);
      Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v38);
      if (v8 < v9)
      {
        if (v31 && *(unsigned char *)(*a2 + 97))
        {
          std::string v24 = *(std::__shared_weak_count **)(v4 + 24);
          v33[0] = *(void *)(v4 + 16);
          v33[1] = v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::switch_engine_batch::switch_to_engine(v31, (uint64_t)v33, 0, v38);
          if (v24) {
            nitro::nitro_function::nitro_function(v24);
          }
          if (*(void *)&v38[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v38[8]);
          }
        }
        uint64_t v25 = a1[4];
        v38[0] = *(unsigned char *)(v4 + 1352);
        memset(&v38[4], 0, 64);
        int v39 = 0;
        if (v38[0])
        {
          *(_DWORD *)&v38[4] = 723714096;
          kdebug_trace();
        }
        (*(void (**)(void *, void *, unint64_t, unint64_t))(*a1 + 80))(a1, a2, v8, v25 + 120 * v8);
        unint64_t v7 = *(void *)(v25 + 120 * v8 + 8);
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v38);
      }
      if (*((void *)&v42 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v42 + 1));
      }
      if (v8++ == v9) {
        goto LABEL_63;
      }
    }
    uint64_t v12 = *(void *)(*(void *)(v4 + 32) + 16 * v7);
    char v13 = *(void **)(v12 + 64);
    uint64_t v14 = v13[1];
    uint64_t v15 = (std::__shared_weak_count *)v13[2];
    if (v15
      && (atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed),
          uint64_t v12 = *(void *)(*(void *)(v4 + 32) + 16 * v7),
          (char v13 = *(void **)(v12 + 64)) == 0))
    {
      char v18 = 0;
      uint64_t v40 = v14;
      BOOL v41 = v15;
    }
    else
    {
      uint64_t v30 = v14;
      if (v16)
      {
        std::string v17 = *(std::__shared_weak_count **)(v12 + 72);
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          char v18 = v16[345] != 0;
          nitro::nitro_function::nitro_function(v17);
        }
        else
        {
          char v18 = v16[345] != 0;
        }
      }
      else
      {
        char v18 = 0;
      }
      uint64_t v40 = v30;
      BOOL v41 = v15;
      if (!v15) {
        goto LABEL_31;
      }
    }
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_31:
    Espresso::switch_engine_batch::switch_to_engine(v31, (uint64_t)&v40, v18, v38);
    BOOL v19 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    long long v42 = *(_OWORD *)v38;
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v15)
    {
      nitro::nitro_function::nitro_function(v15);
      nitro::nitro_function::nitro_function(v15);
    }
    goto LABEL_35;
  }
LABEL_63:
  if (v31
    && *(unsigned char *)(*a2 + 97)
    && *(void *)(*(void *)(*(void *)(*(void *)(v4 + 40) - 16) + 64) + 8) == *(void *)(v4 + 16))
  {
    (*(void (**)(uint64_t *))(*v31 + 24))(v31);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  nitro::nitro_function::nitro_function(v29);
}

void sub_192709250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::string *a10, std::string *a11, uint64_t a12, std::string *a13, uint64_t a14, std::string *a15, uint64_t a16, std::string *a17, uint64_t a18, std::string *a19, uint64_t a20,std::string *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

void sub_192709484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a71 < 0) {
    operator delete(__p);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  __cxa_end_catch();
  JUMPOUT(0x19270954CLL);
}

void Espresso::net_compiler_segment_based::identify_segments_two_compilers(uint64_t a1, void *a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v75 = (int64x2_t *)(a1 + 32);
  for (uint64_t i = *(void *)(a1 + 40);
        i != v3;
        std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](i))
  {
    i -= 120;
  }
  *(void *)(a1 + 40) = v3;
  uint64_t v5 = *(uint64_t (****)(void))(*(void *)(*a2 + 16) + 8);
  unsigned int v6 = (**v5)(v5);
  unsigned int v7 = (***(uint64_t (****)(void))(*(void *)(*a2 + 1256) + 8))();
  unint64_t v8 = (void *)*a2;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(*a2 + 528), v6);
  if (v9)
  {
    unint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v8 = (void *)*a2;
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t v11 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v8 + 66, v7);
  if (!v11)
  {
    char v13 = 0;
LABEL_18:
    uint64_t v15 = v8 + 2;
    goto LABEL_19;
  }
  uint64_t v12 = v11[3];
  char v13 = (std::__shared_weak_count *)v11[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v8 = (void *)*a2;
  }
  if (v12) {
    BOOL v14 = v12 == a1;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_18;
  }
  uint64_t v15 = v8 + 157;
LABEL_19:
  std::string::size_type v73 = v15;
  uint64_t v16 = v8[4];
  long long v71 = v13;
  uint64_t v72 = v10;
  if (v8[5] == v16) {
    goto LABEL_64;
  }
  uint64_t v17 = 0;
  LODWORD(v18) = 0;
  unint64_t v19 = 0;
  do
  {
    uint64_t v20 = *(void *)(v16 + v17);
    unint64_t v21 = *(void **)(v20 + 64);
    long long v22 = *(std::__shared_weak_count **)(v20 + 72);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v21)
    {
      if (v22) {
        BOOL v24 = v23 == 0;
      }
      else {
        BOOL v24 = 1;
      }
      if (!v24)
      {
        BOOL v25 = 1;
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v22);
        goto LABEL_31;
      }
    }
    else
    {
      int v23 = 0;
    }
    BOOL v25 = v23 != 0;
LABEL_31:
    BOOL v26 = v21[1] == *v73;
    if (v22) {
      BOOL v29 = v27 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (v29)
    {
      if (v27) {
        unsigned int v30 = 1;
      }
      else {
        unsigned int v30 = v25;
      }
    }
    else
    {
      unsigned int v30 = 1;
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v22);
    }
    uint64_t v32 = *(void *)(*a2 + 32);
    uint64_t v31 = *(void *)(*a2 + 40);
    if (((v18 | !v26) & 1) == 0)
    {
      *(_OWORD *)&buf[16] = 0u;
      long long v82 = 0u;
      memset(v84, 0, sizeof(v84));
      int v83 = 1065353216;
      int v85 = 1065353216;
      uint64_t v87 = 0;
      uint64_t v88 = 0;
      std::string __p = 0;
      *(void *)buf = v19 + v30;
      *(void *)&buf[8] = *(void *)buf + 1;
      unint64_t v33 = *(void *)(a1 + 40);
      if (v33 >= *(void *)(a1 + 48))
      {
        uint64_t v34 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t const&>(v75, (uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>(*(_OWORD **)(a1 + 40), (uint64_t)buf);
        uint64_t v34 = v33 + 120;
        *(void *)(a1 + 40) = v33 + 120;
      }
      *(void *)(a1 + 40) = v34;
      if (__p)
      {
        uint64_t v87 = __p;
        operator delete(__p);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v84);
      uint64_t v27 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf[16]);
      LODWORD(v18) = 1;
    }
    uint64_t v35 = ((v31 - v32) >> 4) - 1;
    if ((v18 & 1) != 0 && (!v26 || v19 == v35))
    {
      BOOL v36 = v19 == v35;
      if (!v26) {
        BOOL v36 = v30;
      }
      if (!v36)
      {
        char v37 = Espresso::espresso_os_log_subsystem(v27, v28);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)&buf[4] = v30;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v26;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v19 == v35;
          *(_WORD *)&buf[20] = 2048;
          *(void *)&buf[22] = v19;
          _os_log_error_impl(&dword_1920CB000, v37, OS_LOG_TYPE_ERROR, "identify_segments, logic error: is_context_transfer=%d is_default_context_layer=%d is_last_layer=%d ilayer=%zu", buf, 0x1Eu);
        }
      }
      uint64_t v38 = *(void *)(a1 + 40);
      unint64_t v40 = *(void *)(v38 - 120);
      int v39 = (unint64_t *)(v38 - 120);
      unint64_t v41 = v19 + (v30 ^ 1);
      v39[1] = v41;
      if (v41 >= v40)
      {
        char v18 = (std::__shared_weak_count *)a2[1];
        v76[0] = *a2;
        v76[1] = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::net_compiler_segment_based::identify_segment_input_output((uint64_t)v27, (uint64_t)v76, v39);
        if (v18)
        {
          nitro::nitro_function::nitro_function(v18);
          LODWORD(v18) = 0;
        }
      }
      else
      {
        std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100]((uint64_t)v39);
        LODWORD(v18) = 0;
        *(void *)(a1 + 40) = v39;
      }
    }
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    ++v19;
    unint64_t v8 = (void *)*a2;
    uint64_t v16 = *(void *)(*a2 + 32);
    v17 += 16;
  }
  while (v19 < (*(void *)(*a2 + 40) - v16) >> 4);
  char v13 = v71;
  unint64_t v10 = v72;
LABEL_64:
  uint64_t v42 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) != v42)
  {
    unint64_t v43 = 0;
    do
    {
      char v44 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 56), *(void *)(v42 + 120 * v43), (uint64_t *)(v42 + 120 * v43));
      v44[5] = v43;
      uint64_t v46 = Espresso::espresso_os_log_subsystem((Espresso *)v44, v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        int v55 = (uint64_t *)(v75->i64[0] + 120 * v43);
        uint64_t v57 = *v55;
        uint64_t v56 = v55[1];
        *(_DWORD *)buf = 134218496;
        *(void *)&buf[4] = v43;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v57;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = v56;
        _os_log_debug_impl(&dword_1920CB000, v46, OS_LOG_TYPE_DEBUG, "identify_segments: isegment %zu (%zu %zu)", buf, 0x20u);
      }

      uint64_t v42 = v75->i64[0];
      uint64_t v49 = *(uint64_t **)(v75->i64[0] + 120 * v43 + 32);
      if (v49)
      {
        do
        {
          if (*((char *)v49 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v49[2], v49[3]);
          }
          else
          {
            *(_OWORD *)buf = *((_OWORD *)v49 + 1);
            *(void *)&buf[16] = v49[4];
          }
          uint64_t v50 = Espresso::espresso_os_log_subsystem(v47, v48);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            if (buf[23] >= 0) {
              int v51 = buf;
            }
            else {
              int v51 = *(unsigned char **)buf;
            }
            *(_DWORD *)v77 = 134218242;
            unint64_t v78 = v43;
            __int16 v79 = 2080;
            long long v80 = v51;
            _os_log_debug_impl(&dword_1920CB000, v50, OS_LOG_TYPE_DEBUG, "\tinput %zu %s", v77, 0x16u);
          }

          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v49 = (uint64_t *)*v49;
        }
        while (v49);
        uint64_t v42 = v75->i64[0];
      }
      unsigned int v52 = *(uint64_t **)(v42 + 120 * v43 + 72);
      if (v52)
      {
        do
        {
          if (*((char *)v52 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v52[2], v52[3]);
          }
          else
          {
            *(_OWORD *)buf = *((_OWORD *)v52 + 1);
            *(void *)&buf[16] = v52[4];
          }
          uint64_t v53 = Espresso::espresso_os_log_subsystem(v47, v48);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
          {
            if (buf[23] >= 0) {
              int v54 = buf;
            }
            else {
              int v54 = *(unsigned char **)buf;
            }
            *(_DWORD *)v77 = 134218242;
            unint64_t v78 = v43;
            __int16 v79 = 2080;
            long long v80 = v54;
            _os_log_debug_impl(&dword_1920CB000, v53, OS_LOG_TYPE_DEBUG, "\toutput %zu %s", v77, 0x16u);
          }

          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          unsigned int v52 = (uint64_t *)*v52;
        }
        while (v52);
        uint64_t v42 = v75->i64[0];
      }
      ++v43;
    }
    while (v43 < 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 40) - v42) >> 3));
    unint64_t v8 = (void *)*a2;
    char v13 = v71;
    unint64_t v10 = v72;
  }
  std::vector<int>::resize((std::vector<int> *)(a1 + 80), (uint64_t)(v8[5] - v8[4]) >> 4);
  uint64_t v58 = *(void *)(*a2 + 40) - *(void *)(*a2 + 32);
  if (v58)
  {
    unint64_t v59 = 0;
    unint64_t v60 = v58 >> 4;
    long long v63 = *(void **)(a1 + 64);
    long long v62 = (void *)(a1 + 64);
    int v61 = v63;
    if (v60 <= 1) {
      unint64_t v60 = 1;
    }
    uint64_t v64 = v62[2];
    do
    {
      if (!v61) {
        goto LABEL_111;
      }
      unint64_t v65 = v62;
      char v66 = v61;
      do
      {
        unint64_t v67 = v66[4];
        BOOL v68 = v67 >= v59;
        if (v67 >= v59) {
          v69 = v66;
        }
        else {
          v69 = v66 + 1;
        }
        if (v68) {
          unint64_t v65 = v66;
        }
        char v66 = (void *)*v69;
      }
      while (*v69);
      if (v65 != v62 && v59 >= v65[4]) {
        int v70 = *((_DWORD *)v65 + 10);
      }
      else {
LABEL_111:
      }
        int v70 = -1;
      *(_DWORD *)(v64 + 4 * v59++) = v70;
    }
    while (v59 != v60);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192709DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int &,unsigned long &>(uint64_t a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("index >= blob_shapes.size() %zu %zu", a1, a2);
}

void std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388E68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_global_name_indexing::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x80uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE389108;
  uint64_t v5 = (unint64_t *)(v4 + 24);
  *((void *)v4 + 3) = &unk_1EE367E48;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  uint64_t v6 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v6)
  {
    for (unint64_t i = 0; i < (*((void *)a1 + 5) - v6) >> 4; ++i)
    {
      uint64_t v8 = *(void *)(v6 + 16 * i);
      unint64_t v9 = *(const void **)(v8 + 64);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = *(std::__shared_weak_count **)(v8 + 72);
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v12 = (long long *)(*(uint64_t (**)(void *))(*(void *)v10 + 320))(v10);
          Espresso::check_if_global_indexed(v5, v12);
          BOOL v36 = v12;
          uint64_t v13 = *((void *)v4 + 10)
              + 24
              * *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v4 + 40), (unsigned __int8 *)v12, (uint64_t)&std::piecewise_construct, &v36)+ 10);
          uint64_t v15 = (unint64_t **)(v13 + 8);
          BOOL v14 = *(unint64_t **)(v13 + 8);
          uint64_t v17 = (void *)(v13 + 16);
          unint64_t v16 = *(void *)(v13 + 16);
          if ((unint64_t)v14 < v16) {
            goto LABEL_19;
          }
          char v18 = *(unint64_t **)v13;
          uint64_t v19 = ((uint64_t)v14 - *(void *)v13) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = v16 - (void)v18;
          if (v21 >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          BOOL v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v22) {
            unint64_t v23 = v20;
          }
          if (v23)
          {
            unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v23);
            BOOL v14 = *v15;
            char v18 = *(unint64_t **)v13;
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v32 = (unint64_t *)(v23 + 8 * v19);
          *uint64_t v32 = i;
          uint64_t v28 = v32 + 1;
          while (v14 != v18)
          {
            unint64_t v33 = *--v14;
            *--uint64_t v32 = v33;
          }
          goto LABEL_35;
        }
        if (v25)
        {
          uint64_t v11 = *(std::__shared_weak_count **)(v8 + 72);
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v26 = (long long *)(*(uint64_t (**)(void *))(*(void *)v25 + 320))(v25);
          Espresso::check_if_global_indexed(v5, v26);
          BOOL v36 = v26;
          uint64_t v13 = *((void *)v4 + 13)
              + 24
              * *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v4 + 40), (unsigned __int8 *)v26, (uint64_t)&std::piecewise_construct, &v36)+ 10);
          uint64_t v15 = (unint64_t **)(v13 + 8);
          BOOL v14 = *(unint64_t **)(v13 + 8);
          uint64_t v17 = (void *)(v13 + 16);
          unint64_t v27 = *(void *)(v13 + 16);
          if ((unint64_t)v14 < v27)
          {
LABEL_19:
            *BOOL v14 = i;
            uint64_t v28 = v14 + 1;
LABEL_37:
            *uint64_t v15 = v28;
            if (v11) {
              nitro::nitro_function::nitro_function(v11);
            }
            goto LABEL_39;
          }
          char v18 = *(unint64_t **)v13;
          uint64_t v29 = ((uint64_t)v14 - *(void *)v13) >> 3;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v27 - (void)v18;
          if (v31 >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          BOOL v22 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v22) {
            unint64_t v23 = v30;
          }
          if (v23)
          {
            unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v23);
            BOOL v14 = *v15;
            char v18 = *(unint64_t **)v13;
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v32 = (unint64_t *)(v23 + 8 * v29);
          *uint64_t v32 = i;
          uint64_t v28 = v32 + 1;
          while (v14 != v18)
          {
            unint64_t v34 = *--v14;
            *--uint64_t v32 = v34;
          }
LABEL_35:
          *(void *)uint64_t v13 = v32;
          *uint64_t v15 = v28;
          *uint64_t v17 = v23 + 8 * v24;
          if (v18) {
            operator delete(v18);
          }
          goto LABEL_37;
        }
      }
LABEL_39:
      uint64_t v6 = *((void *)a1 + 4);
    }
  }
  *(unsigned char *)a2 = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
}

void sub_19270A31C(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::check_if_global_indexed(unint64_t *a1, long long *a2)
{
  uint64_t v2 = a1 + 7;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[8] - a1[7]) >> 3);
  if (v3 != a1[1] || (uint64_t v5 = a1 + 10, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[11] - a1[10]) >> 3) != v3) || a1[5] != v3) {
    Espresso::throw_exception_selector<Espresso::generic_error>("pass_global_name_indexing_result not synced");
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a1 + 2, (unsigned __int8 *)a2))
  {
    unint64_t v7 = a1[1];
    unint64_t v9 = a2;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 2), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v9)+ 10) = v7;
    unint64_t v8 = a1[1] + 1;
    a1[1] = v8;
    std::vector<std::vector<unsigned long>>::resize(v2, v8);
    std::vector<std::vector<unsigned long>>::resize(v5, a1[1]);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_global_name_indexing_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_global_name_indexing_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389108;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_global_name_indexing_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_global_name_indexing::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

void Espresso::pass_global_name_indexing::~pass_global_name_indexing(Espresso::pass_global_name_indexing *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

std::__shared_weak_count *___ZN8Espresso27pass_constant_if_conditions14run_on_networkERNS_3netE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 32) + 16 * a2);
  unint64_t v3 = *(const void **)(v2 + 64);
  if (!v3
  {
    return (std::__shared_weak_count *)1;
  }
  __n128 result = *(std::__shared_weak_count **)(v2 + 72);
  if (result)
  {
    atomic_fetch_add_explicit(&result->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(result);
    return 0;
  }
  return result;
}

void Espresso::net::recurse_layer_producers(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v42 = a3;
  unint64_t v10 = a6;
  memset(v40, 0, sizeof(v40));
  int v41 = 1065353216;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  std::deque<unsigned long>::push_back(v38, &v42);
  uint64_t v11 = *((void *)&v39 + 1);
  if (*((void *)&v39 + 1))
  {
    uint64_t v12 = a1 + 56;
    do
    {
      unint64_t v37 = 0;
      uint64_t v13 = v11 - 1;
      unint64_t v37 = *(void *)(*(void *)(*((void *)&v38[0] + 1)
                                  + (((unint64_t)(v39 + v13) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v39 + v13) & 0x1FF));
      *((void *)&v39 + 1) = v13;
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v38);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v40, &v37, &v37);
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      BOOL v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v12, &v37, (uint64_t)&std::piecewise_construct, (uint64_t **)&v36);
      uint64_t v15 = (long long *)v14[3];
      unint64_t v16 = (long long *)v14[4];
      while (v15 != v16)
      {
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v15, *((void *)v15 + 1));
        }
        else
        {
          long long v17 = *v15;
          v36.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
        }
        char v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a2, (uint64_t)&v36);
        if (v18)
        {
          unint64_t v19 = v18[5];
          unint64_t v35 = v19;
          if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v40, v19))
          {
            std::deque<unsigned long>::push_back(v38, &v35);
            if (!v10 || v10[2](v10, v19))
            {
              uint64_t v21 = *(unint64_t **)(a4 + 8);
              unint64_t v20 = *(void *)(a4 + 16);
              if ((unint64_t)v21 >= v20)
              {
                BOOL v26 = *(unint64_t **)a4;
                uint64_t v27 = ((uint64_t)v21 - *(void *)a4) >> 3;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v29 = v20 - (void)v26;
                if (v29 >> 2 > v28) {
                  unint64_t v28 = v29 >> 2;
                }
                BOOL v30 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8;
                unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v30) {
                  unint64_t v31 = v28;
                }
                if (v31)
                {
                  unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v31);
                  BOOL v26 = *(unint64_t **)a4;
                  uint64_t v21 = *(unint64_t **)(a4 + 8);
                }
                else
                {
                  uint64_t v32 = 0;
                }
                unint64_t v33 = (unint64_t *)(v31 + 8 * v27);
                *unint64_t v33 = v19;
                BOOL v22 = v33 + 1;
                while (v21 != v26)
                {
                  unint64_t v34 = *--v21;
                  *--unint64_t v33 = v34;
                }
                *(void *)a4 = v33;
                *(void *)(a4 + 8) = v22;
                *(void *)(a4 + 16) = v31 + 8 * v32;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                unint64_t *v21 = v19;
                BOOL v22 = v21 + 1;
              }
              *(void *)(a4 + 8) = v22;
            }
          }
        }
        else
        {
          unint64_t v23 = *(void *)(a5 + 8);
          if (v23 >= *(void *)(a5 + 16))
          {
            BOOL v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v36);
          }
          else
          {
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v24 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
              *(void *)(v23 + 16) = *((void *)&v36.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v23 = v24;
            }
            BOOL v25 = (std::string *)(v23 + 24);
            *(void *)(a5 + 8) = v23 + 24;
          }
          *(void *)(a5 + 8) = v25;
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        uint64_t v15 = (long long *)((char *)v15 + 24);
      }
      uint64_t v11 = *((void *)&v39 + 1);
    }
    while (*((void *)&v39 + 1));
  }
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)v38);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v40);
}

void sub_19270A8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)&a18);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a24);

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::constant_type_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unint64_t v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  char v18 = operator new(8 * *(void *)&prime);
  unint64_t v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  uint64_t v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    uint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          void *v21 = *v27;
          *uint64_t v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          uint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        uint64_t v21 = v27;
        uint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v29 = *(void **)a1;
  BOOL v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    void *v10 = *v30;
LABEL_72:
    void *v30 = v10;
    goto LABEL_73;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    BOOL v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_19270AD24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,Espresso::constant_type_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::constant_type_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    float v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      float v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  float v13 = (char *)operator new(0x30uLL);
  *(void *)float v13 = 0;
  *((void *)v13 + 1) = v8;
  unint64_t v15 = (std::string *)(v13 + 16);
  unint64_t v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  char v18 = a1 + 2;
  *((_DWORD *)v13 + 10) = 0;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint8x8_t v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          unint64_t v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            unint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *unint64_t v28 = *v34;
                  void *v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  unint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                unint64_t v28 = v34;
                unint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  unint64_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)float v13 = *v37;
LABEL_75:
    *unint64_t v37 = v13;
    goto LABEL_76;
  }
  *(void *)float v13 = *v18;
  *char v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    unint64_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_19270B150(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_constant_if_conditions_result::serialize(Espresso::pass_constant_if_conditions_result *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, __p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v8, (uint64_t)v5, __p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  for (unint64_t i = (uint64_t *)*((void *)this + 3); i; unint64_t i = (uint64_t *)*i)
  {
    LODWORD(__p[0]) = *((_DWORD *)i + 10);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v8 + 160))(v8, i + 2, __p);
  }
  uint64_t v7 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "constant_blobs");
  (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v7 + 240))(v7, __p, &v8);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_19270B2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  float v19 = *(std::__shared_weak_count **)(v17 + 8);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::pass_constant_if_conditions_result::deserialize(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "constant_blobs");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v3 + 120))(&v12, v3, &__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  if (v12)
  {
    std::string __p = 0;
    uint8x8_t v10 = 0;
    uint64_t v11 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, &__p);
    uint64_t v4 = (long long *)__p;
    unint64_t v5 = v10;
    if (__p != v10)
    {
      uint64_t v6 = (uint64_t *)(a1 + 8);
      do
      {
        int v7 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v12 + 40))(v12, v4);
        unint64_t v14 = v4;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,Espresso::constant_type_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::constant_type_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)v4, &v14)+ 10) = v7;
        uint64_t v4 = (long long *)((char *)v4 + 24);
      }
      while (v4 != v5);
    }
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  return 0;
}

void sub_19270B47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  *(void *)(v17 - 40) = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(a1);
}

void Espresso::pass_constant_if_conditions_result::~pass_constant_if_conditions_result(Espresso::pass_constant_if_conditions_result *this)
{
  *(void *)this = &unk_1EE369630;
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE369630;
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389338;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity((uint64_t)a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 6) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void Espresso::net_compiler::~net_compiler(Espresso::net_compiler *this)
{
  *(void *)this = &unk_1EE32A8C8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void Espresso::net::get_stride_configuration(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  char v135 = (void **)(a3 + 8);
  *(void *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)a3 = 0;
  v137 = 0;
  id v138 = 0;
  unint64_t v139 = 0;
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v5 = *(uint64_t **)(a1 + 40);
  if (v4 == v5) {
    goto LABEL_66;
  }
  unint64_t v8 = 0;
  unint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v10 = *v4;
    uint64_t v11 = (std::__shared_weak_count *)v4[1];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(unsigned __int8 *)(v10 + 39);
    size_t v13 = *(void *)(v10 + 24);
    if ((v12 & 0x80u) == 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 39);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 24);
    }
    uint64_t v15 = a2[23];
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *((void *)a2 + 1);
    }
    if (v14 == v15)
    {
      uint64_t v17 = (const void **)(v10 + 16);
      if (v16 >= 0) {
        char v18 = a2;
      }
      else {
        char v18 = *(unsigned __int8 **)a2;
      }
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*v17, v18, v13)) {
          goto LABEL_21;
        }
LABEL_20:
        unint64_t v9 = v8;
        goto LABEL_21;
      }
      if (!v12) {
        goto LABEL_20;
      }
      while (*(unsigned __int8 *)v17 == *v18)
      {
        uint64_t v17 = (const void **)((char *)v17 + 1);
        ++v18;
        if (!--v12) {
          goto LABEL_20;
        }
      }
    }
LABEL_21:
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    ++v8;
    v4 += 2;
  }
  while (v4 != v5);
  if ((v9 & 0x80000000) != 0)
  {
LABEL_66:
    unint64_t v40 = 0;
    goto LABEL_67;
  }
  do
  {
    while (1)
    {
      v140[0] = (void **)v9;
      float v19 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v9, v140)[3];
      if (*((char *)v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v19, *((void *)v19 + 1));
      }
      else
      {
        long long v20 = *v19;
        v136.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v20;
      }
      uint64_t v21 = *(void *)(a1 + 32);
      unint64_t v22 = v138;
      if ((unint64_t)v138 >= v139)
      {
        uint64_t v25 = (v138 - v137) >> 4;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v139 - (void)v137;
        if ((uint64_t)(v139 - (void)v137) >> 3 > v26) {
          unint64_t v26 = v27 >> 3;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        v140[4] = (void **)&v139;
        unint64_t v29 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v28);
        uint8x8_t v30 = &v29[2 * v25];
        v140[0] = v29;
        v140[1] = v30;
        v140[3] = &v29[2 * v31];
        long long v32 = *(_OWORD *)(v21 + 16 * v9);
        *(_OWORD *)uint8x8_t v30 = v32;
        if (*((void *)&v32 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        v140[2] = v30 + 2;
        std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer((uint64_t *)&v137, v140);
        unint64_t v24 = v138;
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v140);
      }
      else
      {
        long long v23 = *(_OWORD *)(v21 + 16 * v9);
        *(_OWORD *)id v138 = v23;
        if (*((void *)&v23 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v24 = v22 + 16;
      }
      id v138 = v24;
      if (*(void *)(a1 + 40) == *(void *)(a1 + 32)) {
        break;
      }
      unint64_t v33 = 0;
      unint64_t v9 = 0xFFFFFFFFLL;
      do
      {
        v140[0] = (void **)v33;
        unint64_t v34 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 96, v33, v140)[3];
        uint64_t v35 = v34[23];
        if ((v35 & 0x80u) == 0) {
          uint64_t v36 = v34[23];
        }
        else {
          uint64_t v36 = *((void *)v34 + 1);
        }
        std::string::size_type size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
        char v38 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v136.__r_.__value_.__l.__size_;
        }
        if (v36 == size)
        {
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v39 = &v136;
          }
          else {
            long long v39 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v35 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v34, v39, *((void *)v34 + 1))) {
              goto LABEL_59;
            }
LABEL_58:
            unint64_t v9 = v33;
            goto LABEL_59;
          }
          if (!v34[23]) {
            goto LABEL_58;
          }
          while (*v34 == v39->__r_.__value_.__s.__data_[0])
          {
            ++v34;
            long long v39 = (std::string *)((char *)v39 + 1);
            if (!--v35) {
              goto LABEL_58;
            }
          }
        }
LABEL_59:
        ++v33;
      }
      while (v33 < (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4);
      if ((v38 & 0x80) == 0) {
        goto LABEL_61;
      }
LABEL_64:
      operator delete(v136.__r_.__value_.__l.__data_);
      if ((v9 & 0x80000000) != 0) {
        goto LABEL_65;
      }
    }
    unint64_t v9 = 0xFFFFFFFFLL;
    if ((*((unsigned char *)&v136.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_64;
    }
LABEL_61:
    ;
  }
  while ((v9 & 0x80000000) == 0);
LABEL_65:
  unint64_t v40 = v137;
LABEL_67:
  int v41 = v138;
  if (v40 != v138)
  {
    uint64_t v42 = v138 - 16;
    if (v138 - 16 > v40)
    {
      do
      {
        uint64_t v43 = *(void *)v40;
        *(void *)unint64_t v40 = *(void *)v42;
        *(void *)uint64_t v42 = v43;
        uint64_t v44 = *((void *)v40 + 1);
        *((void *)v40 + 1) = *((void *)v42 + 1);
        *((void *)v42 + 1) = v44;
        v40 += 16;
        v42 -= 16;
      }
      while (v40 < v42);
      unint64_t v40 = v137;
      int v41 = v138;
    }
  }
  if (v40 != v41)
  {
    unint64_t v133 = (void **)(a3 + 32);
    v134 = (void **)(a3 + 56);
    while (2)
    {
      uint64_t v46 = *(void *)v40;
      v45 = (std::__shared_weak_count *)*((void *)v40 + 1);
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v47 = *(const void **)(v46 + 64);
      if (!v47) {
        goto LABEL_194;
      }
      if (!v48) {
        goto LABEL_144;
      }
      uint64_t v49 = v48;
      uint64_t v50 = (*(uint64_t (**)(void *))(*(void *)v48 + 384))(v48);
      uint64_t v51 = v50;
      uint64_t v53 = *(char **)(a3 + 16);
      unint64_t v52 = *(void *)(a3 + 24);
      if ((unint64_t)v53 >= v52)
      {
        int v55 = (char *)*v135;
        uint64_t v56 = (v53 - (unsigned char *)*v135) >> 2;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v58 = v52 - (void)v55;
        if (v58 >> 1 > v57) {
          unint64_t v57 = v58 >> 1;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v59);
          int v55 = *(char **)(a3 + 8);
          uint64_t v53 = *(char **)(a3 + 16);
        }
        else
        {
          uint64_t v60 = 0;
        }
        int v61 = (_DWORD *)(v59 + 4 * v56);
        _DWORD *v61 = *(_DWORD *)(v51 + 48);
        int v54 = v61 + 1;
        while (v53 != v55)
        {
          int v62 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *--int v61 = v62;
        }
        *(void *)(a3 + 8) = v61;
        *(void *)(a3 + 16) = v54;
        *(void *)(a3 + 24) = v59 + 4 * v60;
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v53 = *(_DWORD *)(v50 + 48);
        int v54 = v53 + 4;
      }
      *(void *)(a3 + 16) = v54;
      uint64_t v63 = (*(uint64_t (**)(void *))(*(void *)v49 + 384))(v49);
      uint64_t v64 = *(uint64_t (**)(void *))(*(void *)v49 + 384);
      if (*(_WORD *)(v63 + 72))
      {
        if (*(_WORD *)(v64(v49) + 72) == 2
          || *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v49 + 384))(v49) + 72) == 3)
        {
          int v65 = 0;
        }
        else
        {
          int v65 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v49 + 384))(v49) + 48) / 2;
        }
        unint64_t v67 = *(int **)(a3 + 64);
        unint64_t v74 = *(void *)(a3 + 72);
        if ((unint64_t)v67 < v74)
        {
LABEL_108:
          *unint64_t v67 = v65;
          uint64_t v75 = v67 + 1;
LABEL_127:
          *(void *)(a3 + 64) = v75;
          int v82 = *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v49 + 384))(v49) + 92);
          std::string v84 = *(char **)(a3 + 40);
          unint64_t v83 = *(void *)(a3 + 48);
          if ((unint64_t)v84 >= v83)
          {
            long long v86 = (char *)*v133;
            uint64_t v87 = (v84 - (unsigned char *)*v133) >> 2;
            unint64_t v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v89 = v83 - (void)v86;
            if (v89 >> 1 > v88) {
              unint64_t v88 = v89 >> 1;
            }
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v88;
            }
            if (v90)
            {
              unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v90);
              long long v86 = *(char **)(a3 + 32);
              std::string v84 = *(char **)(a3 + 40);
            }
            else
            {
              uint64_t v91 = 0;
            }
            int v92 = (_DWORD *)(v90 + 4 * v87);
            _DWORD *v92 = v82;
            int v85 = v92 + 1;
            while (v84 != v86)
            {
              int v93 = *((_DWORD *)v84 - 1);
              v84 -= 4;
              *--int v92 = v93;
            }
            *(void *)(a3 + 32) = v92;
            *(void *)(a3 + 40) = v85;
            *(void *)(a3 + 48) = v90 + 4 * v91;
            if (v86) {
              operator delete(v86);
            }
          }
          else
          {
            *(_DWORD *)std::string v84 = v82;
            int v85 = v84 + 4;
          }
          *(void *)(a3 + 40) = v85;
          ++*(_DWORD *)a3;
          std::string::size_type v47 = *(const void **)(v46 + 64);
          if (v47)
          {
LABEL_144:
            if (v94)
            {
              uint64_t v95 = v94;
              uint64_t v96 = (*(uint64_t (**)(void *))(*(void *)v94 + 384))(v94);
              uint64_t v97 = v96;
              v99 = *(char **)(a3 + 16);
              unint64_t v98 = *(void *)(a3 + 24);
              if ((unint64_t)v99 >= v98)
              {
                long long v101 = (char *)*v135;
                uint64_t v102 = (v99 - (unsigned char *)*v135) >> 2;
                unint64_t v103 = v102 + 1;
                if ((unint64_t)(v102 + 1) >> 62) {
                  goto LABEL_202;
                }
                uint64_t v104 = v98 - (void)v101;
                if (v104 >> 1 > v103) {
                  unint64_t v103 = v104 >> 1;
                }
                if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v105 = v103;
                }
                if (v105)
                {
                  unint64_t v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v105);
                  long long v101 = *(char **)(a3 + 8);
                  v99 = *(char **)(a3 + 16);
                }
                else
                {
                  uint64_t v106 = 0;
                }
                uint64_t v107 = (_DWORD *)(v105 + 4 * v102);
                *uint64_t v107 = *(_DWORD *)(v97 + 4);
                long long v100 = v107 + 1;
                while (v99 != v101)
                {
                  int v108 = *((_DWORD *)v99 - 1);
                  v99 -= 4;
                  *--uint64_t v107 = v108;
                }
                *(void *)(a3 + 8) = v107;
                *(void *)(a3 + 16) = v100;
                *(void *)(a3 + 24) = v105 + 4 * v106;
                if (v101) {
                  operator delete(v101);
                }
              }
              else
              {
                *(_DWORD *)v99 = *(_DWORD *)(v96 + 4);
                long long v100 = v99 + 4;
              }
              *(void *)(a3 + 16) = v100;
              size_t v110 = *(char **)(a3 + 64);
              unint64_t v109 = *(void *)(a3 + 72);
              if ((unint64_t)v110 >= v109)
              {
                v112 = (char *)*v134;
                uint64_t v113 = (v110 - (unsigned char *)*v134) >> 2;
                unint64_t v114 = v113 + 1;
                if ((unint64_t)(v113 + 1) >> 62) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v115 = v109 - (void)v112;
                if (v115 >> 1 > v114) {
                  unint64_t v114 = v115 >> 1;
                }
                if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v116 = v114;
                }
                if (v116)
                {
                  unint64_t v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v116);
                  v112 = *(char **)(a3 + 56);
                  size_t v110 = *(char **)(a3 + 64);
                }
                else
                {
                  uint64_t v117 = 0;
                }
                uint64_t v118 = (_DWORD *)(v116 + 4 * v113);
                _DWORD *v118 = 0;
                v111 = v118 + 1;
                while (v110 != v112)
                {
                  int v119 = *((_DWORD *)v110 - 1);
                  v110 -= 4;
                  *--uint64_t v118 = v119;
                }
                *(void *)(a3 + 56) = v118;
                *(void *)(a3 + 64) = v111;
                *(void *)(a3 + 72) = v116 + 4 * v117;
                if (v112) {
                  operator delete(v112);
                }
              }
              else
              {
                *(_DWORD *)size_t v110 = 0;
                v111 = v110 + 4;
              }
              *(void *)(a3 + 64) = v111;
              uint64_t v120 = (*(uint64_t (**)(void *))(*(void *)v95 + 384))(v95);
              uint64_t v121 = v120;
              v123 = *(char **)(a3 + 40);
              unint64_t v122 = *(void *)(a3 + 48);
              if ((unint64_t)v123 >= v122)
              {
                uint64_t v125 = (char *)*v133;
                uint64_t v126 = (v123 - (unsigned char *)*v133) >> 2;
                unint64_t v127 = v126 + 1;
                if ((unint64_t)(v126 + 1) >> 62) {
LABEL_202:
                }
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                uint64_t v128 = v122 - (void)v125;
                if (v128 >> 1 > v127) {
                  unint64_t v127 = v128 >> 1;
                }
                if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v129 = v127;
                }
                if (v129)
                {
                  unint64_t v129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v129);
                  uint64_t v125 = *(char **)(a3 + 32);
                  v123 = *(char **)(a3 + 40);
                }
                else
                {
                  uint64_t v130 = 0;
                }
                v131 = (_DWORD *)(v129 + 4 * v126);
                _DWORD *v131 = *(_DWORD *)(v121 + 16);
                v124 = v131 + 1;
                while (v123 != v125)
                {
                  int v132 = *((_DWORD *)v123 - 1);
                  v123 -= 4;
                  *--v131 = v132;
                }
                *(void *)(a3 + 32) = v131;
                *(void *)(a3 + 40) = v124;
                *(void *)(a3 + 48) = v129 + 4 * v130;
                if (v125) {
                  operator delete(v125);
                }
              }
              else
              {
                *(_DWORD *)v123 = *(_DWORD *)(v120 + 16);
                v124 = v123 + 4;
              }
              *(void *)(a3 + 40) = v124;
              ++*(_DWORD *)a3;
            }
          }
LABEL_194:
          if (v45) {
            nitro::nitro_function::nitro_function(v45);
          }
          v40 += 16;
          if (v40 == v41) {
            goto LABEL_197;
          }
          continue;
        }
        BOOL v68 = (int *)*v134;
        uint64_t v76 = ((char *)v67 - (unsigned char *)*v134) >> 2;
        unint64_t v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v78 = v74 - (void)v68;
        if (v78 >> 1 > v77) {
          unint64_t v77 = v78 >> 1;
        }
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v77;
        }
        if (v72)
        {
          unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v72);
          BOOL v68 = *(int **)(a3 + 56);
          unint64_t v67 = *(int **)(a3 + 64);
        }
        else
        {
          uint64_t v73 = 0;
        }
        __int16 v79 = (int *)(v72 + 4 * v76);
        int *v79 = v65;
        uint64_t v75 = v79 + 1;
        while (v67 != v68)
        {
          int v80 = *--v67;
          *--__int16 v79 = v80;
        }
      }
      else
      {
        int v65 = *(__int16 *)(v64(v49) + 80);
        unint64_t v67 = *(int **)(a3 + 64);
        unint64_t v66 = *(void *)(a3 + 72);
        if ((unint64_t)v67 < v66) {
          goto LABEL_108;
        }
        BOOL v68 = (int *)*v134;
        uint64_t v69 = ((char *)v67 - (unsigned char *)*v134) >> 2;
        unint64_t v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v71 = v66 - (void)v68;
        if (v71 >> 1 > v70) {
          unint64_t v70 = v71 >> 1;
        }
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v70;
        }
        if (v72)
        {
          unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v72);
          BOOL v68 = *(int **)(a3 + 56);
          unint64_t v67 = *(int **)(a3 + 64);
        }
        else
        {
          uint64_t v73 = 0;
        }
        __int16 v79 = (int *)(v72 + 4 * v69);
        int *v79 = v65;
        uint64_t v75 = v79 + 1;
        while (v67 != v68)
        {
          int v81 = *--v67;
          *--__int16 v79 = v81;
        }
      }
      break;
    }
    *(void *)(a3 + 56) = v79;
    *(void *)(a3 + 64) = v75;
    *(void *)(a3 + 72) = v72 + 4 * v73;
    if (v68) {
      operator delete(v68);
    }
    goto LABEL_127;
  }
LABEL_197:
  v140[0] = (void **)&v137;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v140);
}

void sub_19270C2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  std::string __p = &a20;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  Espresso::net_strides_configuration::~net_strides_configuration(v20);
  _Unwind_Resume(a1);
}

void Espresso::net_strides_configuration::~net_strides_configuration(Espresso::net_strides_configuration *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

uint64_t Espresso::net::share_weights(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(*(void *)a2 + 32);
  if ((*(void *)(*(void *)a2 + 40) - v3) >> 4 >= (unint64_t)((*(void *)(result + 40) - v2) >> 4)) {
    uint64_t v4 = (*(void *)(result + 40) - v2) >> 4;
  }
  else {
    uint64_t v4 = (*(void *)(*(void *)a2 + 40) - v3) >> 4;
  }
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      __n128 result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + v7) + 16))(*(void *)(v2 + v7), v3 + v7);
      ++v8;
      uint64_t v2 = *(void *)(v6 + 32);
      uint64_t v9 = *(void *)(v6 + 40) - v2;
      uint64_t v3 = *(void *)(*(void *)a2 + 32);
      if ((*(void *)(*(void *)a2 + 40) - v3) >> 4 >= (unint64_t)(v9 >> 4)) {
        unint64_t v10 = v9 >> 4;
      }
      else {
        unint64_t v10 = (*(void *)(*(void *)a2 + 40) - v3) >> 4;
      }
      v7 += 16;
    }
    while (v10 > v8);
  }
  return result;
}

float Espresso::net::get_estimated_compute_resources(Espresso::net *this, unint64_t a2, unint64_t a3)
{
  unint64_t v49 = a2;
  float v3 = 0.0;
  float v4 = 0.0;
  float v5 = 0.0;
  float v6 = 0.0;
  if (a2 < a3)
  {
    uint64_t v7 = (char *)this + 56;
    unint64_t v8 = (char *)this + 136;
    do
    {
      uint64_t v9 = (uint64_t *)(*((void *)this + 4) + 16 * a2);
      uint64_t v10 = *v9;
      uint64_t v11 = (std::__shared_weak_count *)v9[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v41 = &v49;
      uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v49, (uint64_t)&std::piecewise_construct, (uint64_t **)&v41);
      if (v12[4] != v12[3])
      {
        *(void *)&long long v41 = &v49;
        size_t v13 = (long long **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v49, (uint64_t)&std::piecewise_construct, (uint64_t **)&v41);
        uint64_t v46 = 0;
        std::string::size_type v47 = 0;
        unint64_t v48 = 0;
        std::vector<Espresso::layer_shape>::reserve((uint64_t *)&v46, 0xAAAAAAAAAAAAAAABLL * (((char *)v13[4] - (char *)v13[3]) >> 3));
        unint64_t v40 = v11;
        uint64_t v14 = v7;
        v50[0] = v13[3];
        uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v50[0], v50);
        uint64_t v16 = (*(uint64_t (**)(void))(**((void **)v15 + 5) + 32))(*((void *)v15 + 5));
        uint64_t v17 = v13[3];
        char v18 = v13[4];
        while (v17 != v18)
        {
          v50[0] = v17;
          float v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v17, v50);
          Espresso::abstract_blob_container::shape((char *)&v41, *((void *)v19 + 5));
          long long v20 = v47;
          if ((unint64_t)v47 >= v48)
          {
            uint64_t v23 = (v47 - v46) >> 6;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 58) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v25 = v48 - (void)v46;
            if ((uint64_t)(v48 - (void)v46) >> 5 > v24) {
              unint64_t v24 = v25 >> 5;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v26 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            v50[4] = (long long *)&v48;
            uint64_t v27 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v26);
            unint64_t v28 = &v27[4 * v23];
            v50[0] = v27;
            v50[1] = v28;
            v50[3] = &v27[4 * v29];
            long long v30 = v42;
            uint64_t v31 = v43;
            *unint64_t v28 = v41;
            v28[1] = v30;
            *((void *)v28 + 4) = v31;
            *((void *)v28 + 5) = 0;
            *((void *)v28 + 6) = 0;
            *((void *)v28 + 7) = 0;
            *(long long *)((char *)v28 + 40) = *(_OWORD *)__p;
            *((void *)v28 + 7) = v45;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v45 = 0;
            v50[2] = v28 + 4;
            std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v46, v50);
            long long v32 = v47;
            std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v50);
            std::string::size_type v47 = v32;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v21 = v42;
            uint64_t v22 = v43;
            *(_OWORD *)std::string::size_type v47 = v41;
            v20[1] = v21;
            *((void *)v20 + 4) = v22;
            *((void *)v20 + 5) = 0;
            *((void *)v20 + 6) = 0;
            *((void *)v20 + 7) = 0;
            *(_OWORD *)((char *)v20 + 40) = *(_OWORD *)__p;
            *((void *)v20 + 7) = v45;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v45 = 0;
            std::string::size_type v47 = (char *)(v20 + 4);
          }
          v50[0] = v17;
          unint64_t v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v17, v50);
          (*(void (**)(void))(**((void **)v33 + 5) + 32))(*((void *)v33 + 5));
          uint64_t v17 = (long long *)((char *)v17 + 24);
        }
        if (v46 == v47)
        {
          uint64_t v7 = v14;
          uint64_t v11 = v40;
        }
        else
        {
          uint64_t v11 = v40;
          uint64_t v7 = v14;
          float v6 = v6
             + (*(float (**)(void, char **, uint64_t))(**(void **)(v10 + 64) + 128))(*(void *)(v10 + 64), &v46, v16);
          float v5 = v5 + v34;
          float v4 = v4 + v35;
          float v3 = v3 + v36;
        }
        *(void *)&long long v41 = &v46;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      a2 = v49 + 1;
      unint64_t v49 = a2;
    }
    while (a2 < a3);
  }
  return v6;
}

void sub_19270C808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  a13 = &a21;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(a1);
}

double Espresso::net::get_gflop(Espresso::net *this, int a2, uint64_t a3)
{
  if ((int)a3 <= 0) {
    a3 = (*((void *)this + 5) - *((void *)this + 4)) >> 4;
  }
  return Espresso::net::get_estimated_compute_resources(this, a2, (int)a3);
}

void Espresso::net::__build_network_two_compilers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)(a1 + 528);
  unsigned int v9 = (***(uint64_t (****)(void))(*(void *)(a1 + 16) + 8))(*(void *)(*(void *)(a1 + 16) + 8));
  uint64_t v10 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v8, v9);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v13 = *(void *)(a1 + 1256);
  if (!v13) {
    goto LABEL_18;
  }
  unsigned int v14 = (***(uint64_t (****)(void))(v13 + 8))(*(void *)(v13 + 8));
  uint64_t v15 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v8, v14);
  if (!v15) {
    goto LABEL_18;
  }
  uint64_t v17 = v15[3];
  uint64_t v16 = (std::__shared_weak_count *)v15[4];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12 || !v17) {
LABEL_18:
  }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("One or more compilers is missing.");
  LOBYTE(v18[0]) = *(unsigned char *)(a1 + 1352);
  memset((char *)v18 + 4, 0, 68);
  if (LOBYTE(v18[0]))
  {
    v18[1] = a1;
    memset(&v18[2], 0, 24);
    v18[5] = a1;
    memset(&v18[6], 0, 24);
    HIDWORD(v18[0]) = 723714104;
    kdebug_trace();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 16))(v17, a2, a3, a4);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v18);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_19270CAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::__forward_network_two_compilers(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (v4 && (uint64_t v5 = *(void *)(a2 + 8)) != 0)
    {
      uint64_t v51 = *(std::__shared_weak_count **)(a2 + 8);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v51 = 0;
    }
  }
  else
  {
    uint64_t v51 = 0;
    float v4 = 0;
  }
  unsigned int v6 = (***(uint64_t (****)(void))(*(void *)(a1 + 16) + 8))(*(void *)(*(void *)(a1 + 16) + 8));
  uint64_t v7 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(a1 + 528), v6);
  unint64_t v8 = v7;
  if (v7)
  {
    unsigned int v9 = (const void *)v7[3];
    uint64_t v10 = (std::__shared_weak_count *)v8[4];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v9
    {
      unint64_t v59 = 0;
      uint64_t v11 = 0;
      unint64_t v8 = 0;
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = v10;
LABEL_15:
      nitro::nitro_function::nitro_function(v10);
      unint64_t v8 = (uint64_t *)v11;
      goto LABEL_17;
    }
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v59 = 0;
  }
LABEL_17:
  uint64_t v50 = (std::__shared_weak_count *)v8;
  unsigned int v12 = (***(uint64_t (****)(void))(*(void *)(a1 + 1256) + 8))(*(void *)(*(void *)(a1 + 1256) + 8));
  uint64_t v13 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(a1 + 528), v12);
  unsigned int v14 = v13;
  if (!v13) {
    goto LABEL_94;
  }
  uint64_t v15 = (const void *)v13[3];
  uint64_t v16 = (std::__shared_weak_count *)v14[4];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15
  {
    if (!v16)
    {
      char v18 = 0;
      goto LABEL_26;
    }
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v17 = 0;
    int v55 = 0;
    if (!v16) {
      goto LABEL_94;
    }
  }
  nitro::nitro_function::nitro_function(v16);
  char v18 = v17;
LABEL_26:
  if (!v59 || (unint64_t v49 = v18, !v55)) {
LABEL_94:
  }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing a compiler in __forward_network_two_compilers");
  uint64_t v19 = v59[5] - v59[4];
  if (v19 != -120)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    unint64_t v24 = v19 / 120;
    unint64_t v54 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v55[5] - v55[4]) >> 3);
    uint64_t v56 = v19 / 120;
    unint64_t v52 = v4;
    uint64_t v58 = v19 / 120 + 1;
    do
    {
      if (v23 >= v24) {
        unint64_t v25 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4;
      }
      else {
        unint64_t v25 = *(void *)(v59[4] + 120 * SHIDWORD(v20));
      }
      uint64_t v26 = *(void *)(a2 + 8);
      *(void *)&v64[0] = *(void *)a2;
      *((void *)&v64[0] + 1) = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      if (v21 < v25 && *(unsigned char *)(*(void *)a2 + 97) && v22 < v54)
      {
        unint64_t v57 = v22;
        uint64_t v28 = v55[4];
        uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 16 * v21);
        long long v30 = *(const void **)(v29 + 64);
        if (v30
        {
          long long v32 = *(std::__shared_weak_count **)(v29 + 72);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v53 = v32;
          char v33 = v31[345] != 0;
          int v34 = 1;
        }
        else
        {
          int v34 = 0;
          uint64_t v53 = 0;
          char v33 = 0;
        }
        float v35 = *(std::__shared_weak_count **)(a1 + 1264);
        v63[0] = *(void *)(a1 + 1256);
        v63[1] = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::switch_engine_batch::switch_to_engine(v4, (uint64_t)v63, v33, v61);
        float v36 = (std::__shared_weak_count *)*((void *)&v64[0] + 1);
        v64[0] = *(_OWORD *)v61;
        if (v36) {
          nitro::nitro_function::nitro_function(v36);
        }
        if (v35) {
          nitro::nitro_function::nitro_function(v35);
        }
        unint64_t v37 = (uint64_t *)(v28 + 120 * (int)v57);
        uint64_t v38 = *v37;
        unint64_t v40 = v37 + 1;
        uint64_t v39 = v37[1];
        v61[0] = *(unsigned char *)(a1 + 1352);
        memset(&v61[4], 0, 64);
        int v62 = 0;
        if (v61[0])
        {
          *(void *)&v61[8] = v38;
          *(void *)&v61[16] = v39;
          memset(&v61[32], 0, 24);
          *(void *)&v61[24] = a1;
          *(void *)&v61[56] = a1;
          *(_DWORD *)&v61[4] = 723714152;
          kdebug_trace();
        }
        if (v34)
        {
          uint64_t v41 = *(void *)(*(void *)(a1 + 32) + 16 * v21);
          (*(void (**)(uint64_t, _OWORD *, unint64_t))(*(void *)v41 + 8))(v41, v64, v21);
        }
        (*(void (**)(void *, _OWORD *, unint64_t, uint64_t *))(*v55 + 80))(v55, v64, v57, v37);
        uint64_t v42 = *v40;
        uint64_t v43 = *(void *)(a1 + 32);
        if (*v40 < (unint64_t)((*(void *)(a1 + 40) - v43) >> 4))
        {
          uint64_t v44 = *(void **)(v43 + 16 * v42);
          uint64_t v45 = (const void *)v44[8];
          if (v45)
          {
            {
              uint64_t v46 = (std::__shared_weak_count *)v44[9];
              if (v46)
              {
                atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v42 = *v40;
                uint64_t v44 = *(void **)(*(void *)(a1 + 32) + 16 * *v40);
              }
              (*(void (**)(void *, _OWORD *, uint64_t))(*v44 + 8))(v44, v64, v42);
              if (v46) {
                nitro::nitro_function::nitro_function(v46);
              }
            }
          }
        }
        unint64_t v22 = v57 + 1;
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v61);
        if (v53) {
          nitro::nitro_function::nitro_function(v53);
        }
        float v4 = v52;
        unint64_t v24 = v56;
      }
      if (v23 < v24)
      {
        uint64_t v47 = v59[4];
        if (v4 && *(unsigned char *)(*(void *)a2 + 97))
        {
          unint64_t v48 = *(std::__shared_weak_count **)(a1 + 24);
          v60[0] = *(void *)(a1 + 16);
          v60[1] = v48;
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::switch_engine_batch::switch_to_engine(v4, (uint64_t)v60, 0, v61);
          if (v48) {
            nitro::nitro_function::nitro_function(v48);
          }
          if (*(void *)&v61[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v61[8]);
          }
        }
        v61[0] = *(unsigned char *)(a1 + 1352);
        memset(&v61[4], 0, 64);
        int v62 = 0;
        if (v61[0])
        {
          *(_DWORD *)&v61[4] = 723714096;
          kdebug_trace();
        }
        (*(void (**)(void *, uint64_t, unint64_t, uint64_t))(*v59 + 80))(v59, a2, v23, v47 + 120 * SHIDWORD(v20));
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v61);
        unint64_t v21 = *(void *)(v47 + 120 * SHIDWORD(v20) + 8);
        unint64_t v24 = v56;
      }
      if (*((void *)&v64[0] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v64[0] + 1));
      }
      ++v23;
      v20 += 0x100000000;
    }
    while (v58 != v23);
  }
  if (v4
    && *(unsigned char *)(*(void *)a2 + 97)
    && *(void *)(*(void *)(*(void *)(*(void *)(a1 + 40) - 16) + 64) + 8) == *(void *)(a1 + 16))
  {
    (*(void (**)(uint64_t *))(*v4 + 24))(v4);
  }
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
}

void sub_19270D304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t __val, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::string *a16, std::string *a17, uint64_t a18, std::string *__vala, uint64_t a20,std::string *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

void sub_19270D464(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  __cxa_end_catch();
  JUMPOUT(0x19270D4E4);
}

void sub_19270D4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  JUMPOUT(0x19270D52CLL);
}

void sub_19270D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (*(void *)(v11 - 104)) {
    nitro::nitro_function::nitro_function();
  }
  if (a9) {
    nitro::nitro_function::nitro_function();
  }
  if (a10) {
    nitro::nitro_function::nitro_function();
  }
  if (a11) {
    nitro::nitro_function::nitro_function();
  }
  _Unwind_Resume(a1);
}

void sub_19270D520()
{
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)(v0 - 208));
  JUMPOUT(0x19270D52CLL);
}

void Espresso::net::wipe_layers_blobs(Espresso::net *this)
{
  uint64_t v2 = (void *)MEMORY[0x192FF2020]();
  for (unint64_t i = (void *)*((void *)this + 19); i; unint64_t i = (void *)*i)
  {
    uint64_t v4 = i[5];
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 176))(v4, &v16);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  if (!Espresso::net::fast_reshape_enabled(this))
  {
    *((unsigned char *)this + 180) = 1;
    for (uint64_t j = (void *)*((void *)this + 19); j; uint64_t j = (void *)*j)
    {
      uint64_t v6 = j[5];
      uint64_t v21 = 0;
      long long v19 = 0u;
      long long __p = 0u;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      unint64_t v18 = 0xFFFFFFFF00000000;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 16))(v6, &v16, &v14);
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
    uint64_t v7 = (uint64_t *)*((void *)this + 4);
    for (k = (uint64_t *)*((void *)this + 5); v7 != k; v7 += 2)
    {
      uint64_t v10 = *v7;
      unsigned int v9 = (std::__shared_weak_count *)v7[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(const void **)(v10 + 64);
      if (v11)
      {
        if (v12)
        {
          uint64_t v13 = *(std::__shared_weak_count **)(v10 + 72);
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *))(*(void *)v12 + 56))(v12);
          if (v13) {
            nitro::nitro_function::nitro_function(v13);
          }
        }
      }
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
    }
  }
}

void sub_19270D76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::net::restore_layers_if_wiped(Espresso::net *this)
{
  int v1 = *((unsigned __int8 *)this + 180);
  if (*((unsigned char *)this + 180))
  {
    *((unsigned char *)this + 180) = 0;
    Espresso::shape_network_recursive(this, (Espresso::net *)((char *)this + 184), 0, 0);
    *((unsigned char *)this + 180) = 0;
  }
  return v1 != 0;
}

void Espresso::net::shape_network(Espresso::net *this, const Espresso::network_shape *a2)
{
  *((unsigned char *)this + 180) = 0;
  Espresso::shape_network_recursive(this, a2, 0, 0);
}

void *std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unsigned int v12 = a1 + 2;
  uint64_t v10 = operator new(0x28uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      int v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  unint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    uint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          void *v22 = *v28;
          *uint64_t v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          uint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        unint64_t v22 = v28;
        uint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v30 = *a1;
  uint64_t v31 = *(void **)(*a1 + 8 * v6);
  if (v31)
  {
    void *v10 = *v31;
LABEL_72:
    void *v31 = v10;
    goto LABEL_73;
  }
  void *v10 = *v12;
  void *v12 = v10;
  *(void *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_19270DC00(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::deque<int>::push_back(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)a1[2];
  unint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 7) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x400)
    {
      a1[4] = v9 - 1024;
      uint64_t v13 = *(void *)v5;
      unint64_t v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
          uint64_t v45 = &v43[8 * (v42 >> 2)];
          uint64_t v46 = (uint64_t *)a1[1];
          unint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            unint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            unint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)unint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          uint64_t v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            unint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          uint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            unint64_t v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            unint64_t v23 = (char *)a1[1];
          }
          unint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)unint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      unint64_t v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    unint64_t v25 = (char *)a1[3];
    uint8x8_t v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      unint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          unint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v52);
          unint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v56 = (uint64_t *)a1[1];
          unint64_t v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            unint64_t v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            uint64_t v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)uint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          int v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            unint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        uint64_t v63 = (char *)a1[1];
        uint64_t v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            unint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v97);
            long long v100 = &v98[8 * (v97 >> 2)];
            long long v101 = (uint64_t *)a1[1];
            uint64_t v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              uint64_t v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              uint64_t v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)uint64_t v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            uint64_t v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              uint64_t v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            unint64_t v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              uint64_t v63 = (char *)a1[1];
            }
            uint64_t v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)uint64_t v64 = v65;
      }
      else
      {
        *(void *)unint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v30);
    uint64_t v33 = v32;
    int v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v110 = v35;
    float v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v75);
      int v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v107 = v37;
      long long v110 = v39;
      operator delete(v31);
      long long v37 = v107;
    }
    long long v39 = v110;
LABEL_56:
    *(void *)int v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      __int16 v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        int v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v86);
          int v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            uint64_t v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            int v92 = v80;
            int v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)int v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v108 = v37;
            long long v112 = v39;
            operator delete(v79);
            long long v37 = v108;
            long long v39 = v112;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          int v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            int v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            uint64_t v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&long long v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        int v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    uint64_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(_DWORD *)(*(void *)&v5[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_19270E234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(std::vector<std::string> *this, std::vector<std::string> *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)this) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (SLODWORD(a2[-3].__begin_) > SLODWORD(this->__begin_))
      {
        uint64_t v6 = this;
        uint64_t v7 = a2 - 3;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(this, this + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(this, this + 3, this + 6, &a2[-3]);
      return 1;
    case 5uLL:
      uint64_t v27 = this + 6;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(this, this + 3, this + 6, &this[9]);
      int begin = (int)a2[-3].__begin_;
      uint64_t v28 = (uint64_t)&a2[-3];
      if (begin > SLODWORD(this[9].__begin_))
      {
        std::swap[abi:ne180100]<Espresso::net::new_layer_info>(this + 9, v28);
        if (SLODWORD(this[9].__begin_) > SLODWORD(v27->__begin_))
        {
          std::swap[abi:ne180100]<Espresso::net::new_layer_info>(this + 6, (uint64_t)&this[9]);
          if (SLODWORD(v27->__begin_) > SLODWORD(this[3].__begin_))
          {
            std::swap[abi:ne180100]<Espresso::net::new_layer_info>(this + 3, (uint64_t)&this[6]);
            if (SLODWORD(this[3].__begin_) > SLODWORD(this->__begin_))
            {
              uint64_t v6 = this;
              uint64_t v7 = this + 3;
LABEL_4:
              std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v6, (uint64_t)v7);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = this + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(this, this + 3, this + 6);
      unint64_t v9 = this + 9;
      if (&this[9] == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (SLODWORD(v9->__begin_) > SLODWORD(v8->__begin_))
    {
      int v30 = (int)v9->__begin_;
      long long v31 = *(_OWORD *)&v9->__end_;
      v9->__end_ = 0;
      v9->__end_cap_.__value_ = 0;
      long long v32 = *(_OWORD *)&v9[1].__begin_;
      value = v9[1].__end_cap_.__value_;
      v9[1].__begin_ = 0;
      v9[1].__end_ = 0;
      long long v34 = *(_OWORD *)&v9[2].__begin_;
      long long v35 = v9[2].__end_cap_.__value_;
      v9[1].__end_cap_.__value_ = 0;
      v9[2].__begin_ = 0;
      v9[2].__end_ = 0;
      v9[2].__end_cap_.__value_ = 0;
      uint64_t v12 = v10;
      int v13 = (int)v8->__begin_;
      while (1)
      {
        uint64_t v14 = (char *)this + v12;
        *((_DWORD *)v14 + 54) = v13;
        long long v15 = *(_OWORD *)((char *)&this[6].__end_ + v12);
        *((void *)v14 + 19) = 0;
        *((void *)v14 + 20) = 0;
        BOOL v16 = *(std::__shared_weak_count **)((char *)&this[9].__end_cap_.__value_ + v12);
        *((_OWORD *)v14 + 14) = v15;
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v14 + 10);
        *((_OWORD *)v14 + 15) = *(_OWORD *)(v14 + 168);
        *((void *)v14 + 32) = *((void *)v14 + 23);
        *((void *)v14 + 22) = 0;
        *((void *)v14 + 23) = 0;
        *((void *)v14 + 21) = 0;
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v14 + 11);
        *(_OWORD *)(v14 + 264) = *((_OWORD *)v14 + 12);
        *((void *)v14 + 35) = *((void *)v14 + 26);
        *((void *)v14 + 25) = 0;
        *((void *)v14 + 26) = 0;
        *((void *)v14 + 24) = 0;
        if (v12 == -144) {
          break;
        }
        uint64_t v17 = (std::vector<std::string> *)((char *)this + v12);
        int v13 = *(_DWORD *)((char *)&this[3].__begin_ + v12);
        v12 -= 72;
        if (v30 <= v13)
        {
          uint64_t v18 = (std::vector<std::string> *)((char *)this + v12 + 216);
          p_end = &v17[6].__end_;
          uint64_t v20 = v17 + 8;
          uint64_t v21 = v17 + 7;
          goto LABEL_16;
        }
      }
      p_end = &this->__end_;
      uint64_t v20 = this + 2;
      uint64_t v21 = this + 1;
      uint64_t v18 = this;
LABEL_16:
      LODWORD(v18->__begin_) = v30;
      std::vector<std::string>::pointer *p_end = (std::vector<std::string>::pointer)v31;
      int64_t v22 = (std::__shared_weak_count *)v18->__end_cap_.__value_;
      v18->__end_cap_.__value_ = (std::string *)*((void *)&v31 + 1);
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      std::vector<std::string>::__vdeallocate(v21);
      unint64_t v23 = (std::string *)*((void *)&v32 + 1);
      v21->__begin_ = (std::vector<std::string>::pointer)v32;
      uint64_t v24 = value;
      v18[1].__end_ = v23;
      v18[1].__end_cap_.__value_ = v24;
      value = 0;
      long long v32 = 0uLL;
      std::vector<std::string>::__vdeallocate(v20);
      unint64_t v25 = (std::string *)*((void *)&v34 + 1);
      v20->__begin_ = (std::vector<std::string>::pointer)v34;
      uint8x8_t v26 = v35;
      v18[2].__end_ = v25;
      v18[2].__end_cap_.__value_ = v26;
      long long v35 = 0;
      long long v34 = 0uLL;
      float v36 = (void **)&v34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      float v36 = (void **)&v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      if (++v11 == 8) {
        return &v9[3] == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 72;
    v9 += 3;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t Espresso::net::position_of_kernel(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40) - v2;
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = v3 >> 4;
  if ((unint64_t)(v3 >> 4) <= 1) {
    uint64_t v5 = 1;
  }
  while (*(void *)(*(void *)v2 + 64) != *a2)
  {
    ++result;
    v2 += 16;
    if (v5 == result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void Espresso::net::insert_layers(uint64_t a1, int *a2, uint64_t *a3)
{
  if (a3[1] != *a3)
  {
    uint64_t v6 = a1 + 96;
    std::unordered_map<unsigned long,std::vector<std::string>>::unordered_map((uint64_t)v25, a1 + 96);
    std::unordered_map<unsigned long,std::vector<std::string>>::unordered_map((uint64_t)__p, a1 + 56);
    uint64_t v7 = *a3;
    uint64_t v21 = a3[1];
    if (*a3 != v21)
    {
      int64_t v8 = *a2;
      do
      {
        uint64_t v9 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
        if (v8 < (int)((unint64_t)v9 >> 4))
        {
          unint64_t v10 = (int)(v9 >> 4);
          do
          {
            int64_t v11 = v10 - 1;
            int64_t v23 = v10 - 1;
            uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v10 - 1, &v23);
            unint64_t v22 = v10;
            int v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v10, &v22);
            if (v13 != v12) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v13 + 3), (std::string *)v12[3], (std::string *)v12[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 3));
            }
            int64_t v23 = v10 - 1;
            uint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v10 - 1, &v23);
            unint64_t v22 = v10;
            long long v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v10, &v22);
            if (v15 != v14) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v15 + 3), (std::string *)v14[3], (std::string *)v14[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[4] - v14[3]) >> 3));
            }
            --v10;
          }
          while (v11 > v8);
        }
        int64_t v23 = v8;
        BOOL v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v8, &v23);
        if (v16 != (void *)v7) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v16 + 3), *(std::string **)(v7 + 24), *(std::string **)(v7 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 3));
        }
        int64_t v23 = v8;
        uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v8, &v23)+ 3;
        if (v17 != (void *)(v7 + 48)) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v17, *(std::string **)(v7 + 48), *(std::string **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 56) - *(void *)(v7 + 48)) >> 3));
        }
        std::vector<std::shared_ptr<Espresso::layer>>::insert((uint64_t *)(a1 + 32), *(void *)(a1 + 32) + 16 * v8, (char *)(v7 + 8));
        ++v8;
        v7 += 72;
      }
      while (v7 != v21);
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node((char *)__p[2]);
    uint64_t v19 = __p[0];
    __p[0] = 0;
    if (v19) {
      operator delete(v19);
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node((char *)v25[2]);
    uint64_t v20 = v25[0];
    v25[0] = 0;
    if (v20) {
      operator delete(v20);
    }
  }
}

void sub_19270E8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long,std::vector<std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = v5[2];
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 >= v8) {
            unint64_t v2 = v7 % v8;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
        unint64_t v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v7)
            {
              if (i[2] == v7) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8) {
                  v12 %= v8;
                }
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      int v13 = operator new(0x30uLL);
      void *v13 = 0;
      v13[1] = v7;
      v13[2] = v5[2];
      v13[3] = 0;
      v13[4] = 0;
      v13[5] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13 + 3, v5[3], v5[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4] - v5[3]) >> 3));
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        BOOL v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v8);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v19);
        unint64_t v8 = *(void *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8) {
            unint64_t v2 = v7 % v8;
          }
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        void *v13 = *v21;
      }
      else
      {
        void *v13 = *v6;
        void *v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8) {
            v22 %= v8;
          }
        }
        else
        {
          v22 &= v8 - 1;
        }
        uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      void *v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_19270EB78(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

float Espresso::net::_bench(Espresso::net *this, int a2)
{
  void (***v5)(uint64_t *__return_ptr, void);
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void v14[5];
  uint64_t v15;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v17;
  char v18;
  void v19[5];

  int v2 = a2;
  uint64_t v5 = (void (***)(uint64_t *__return_ptr, void))*((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a2 + 1;
  }
  unint64_t v7 = v6 >> 1;
  if (v7 <= 1) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v7;
  }
  uint8x8_t v9 = MEMORY[0x1E4F143A8];
  do
  {
    v19[0] = v9;
    v19[1] = 3221225472;
    v19[2] = ___ZN8Espresso3net6_benchEi_block_invoke;
    v19[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v19[4] = this;
    Espresso::abstract_context::compute_batch_sync(v5, v19);
    --v8;
  }
  while (v8);
  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v15, "5x", v10);
  if (v2 >= 1)
  {
    int64_t v11 = MEMORY[0x1E4F143A8];
    do
    {
      v14[0] = v11;
      v14[1] = 3221225472;
      v14[2] = ___ZN8Espresso3net6_benchEi_block_invoke_2;
      v14[3] = &__block_descriptor_40_e10_v16__0r_v8l;
      v14[4] = this;
      Espresso::abstract_context::compute_batch_sync(v5, v14);
      --v2;
    }
    while (v2);
  }
  unint64_t v18 = 1;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v12 = (double)(rep - v15) * 0.000001;
  unint64_t v17 = v12;
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v15);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return v12;
}

void sub_19270ED38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso3net6_benchEi_block_invoke(uint64_t a1, void *a2)
{
}

Espresso::scoped_timer *Espresso::scoped_timer::scoped_timer(Espresso::scoped_timer *this, const char *a2, double a3)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  MEMORY[0x192FF0F50]((char *)this + 24, a2);
  *(std::chrono::steady_clock::time_point *)this = std::chrono::steady_clock::now();
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 56) = 0;
  return this;
}

void sub_19270EDCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso3net6_benchEi_block_invoke_2(uint64_t a1, void *a2)
{
}

void Espresso::scoped_timer::~scoped_timer(Espresso::scoped_timer *this)
{
  if (!*((unsigned char *)this + 56))
  {
    *((unsigned char *)this + 56) = 1;
    v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *((std::chrono::steady_clock::time_point *)this + 1) = v2;
    *((double *)this + 2) = (double)(v2.__d_.__rep_ - *(void *)this) * 0.000001;
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

float Espresso::net::_bench_layer_and_children(std::__shared_weak_count **this, int a2, int a3)
{
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x7012000000;
  v21[3] = __Block_byref_object_copy__1586;
  v21[4] = __Block_byref_object_dispose__1587;
  v21[5] = "";
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v22, (Espresso::net *)this);
  unint64_t v7 = this[2];
  uint64_t v6 = this[3];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = ___ZN8Espresso3net25_bench_layer_and_childrenEii_block_invoke;
  v18[3] = &unk_1E5746E60;
  int v19 = a3;
  int v20 = a2;
  v18[4] = v21;
  v18[5] = this;
  Espresso::abstract_context::compute_batch_sync(v7, v18);
  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v14, "5x", v8);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___ZN8Espresso3net25_bench_layer_and_childrenEii_block_invoke_2;
  v11[3] = &unk_1E5746E60;
  int v12 = a3;
  int v13 = a2;
  v11[4] = v21;
  v11[5] = this;
  Espresso::abstract_context::compute_batch_sync(v7, v11);
  char v17 = 1;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  double v9 = (double)(rep - v14) * 0.000001;
  double v16 = v9;
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v14);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  _Block_object_dispose(v21, 8);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v25);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  return v9;
}

void sub_19270F040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&a16);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Block_object_dispose(&a31, 8);
  Espresso::network_optimization_graph::~network_optimization_graph(v32);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1586(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(result + 64) = *(void *)(a2 + 64);
  std::chrono::steady_clock::time_point v2 = (void *)(a2 + 72);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(result + 72) = v3;
  uint64_t v4 = result + 72;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(result + 80) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 64) = v2;
    void *v2 = 0;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(void *)(result + 64) = v4;
  }
  *(void *)(result + 88) = *(void *)(a2 + 88);
  uint64_t v6 = (void *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(result + 96) = v7;
  uint64_t v8 = result + 96;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(result + 104) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a2 + 88) = v6;
    void *v6 = 0;
    *(void *)(a2 + 104) = 0;
  }
  else
  {
    *(void *)(result + 88) = v8;
  }
  return result;
}

void __Block_byref_object_dispose__1587(uint64_t a1)
{
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)(a1 + 96));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)(a1 + 72));
  std::chrono::steady_clock::time_point v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

uint64_t **___ZN8Espresso3net25_bench_layer_and_childrenEii_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (_DWORD *)(a1 + 52);
  do
  {
    uint64_t v7 = *(void *)(*(void *)(v5 + 32) + 16 * *(int *)(a1 + 52));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 8))(v7, a2);
    uint64_t result = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 64), *(_DWORD *)(a1 + 52), v6);
    uint64_t v9 = (int *)result[5];
    unint64_t v10 = (int *)result[6];
    while (v9 != v10)
    {
      uint64_t v11 = *v9++;
      uint64_t v12 = *(void *)(*(void *)(v5 + 32) + 16 * v11);
      uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 8))(v12, a2);
    }
    ++v4;
    int v13 = *(_DWORD *)(a1 + 48) / 2;
    if (v13 <= 2) {
      int v13 = 2;
    }
  }
  while (v4 < v13);
  return result;
}

uint64_t **___ZN8Espresso3net25_bench_layer_and_childrenEii_block_invoke_2(uint64_t **result, uint64_t a2)
{
  if (*((int *)result + 12) >= 1)
  {
    uint64_t v3 = result;
    int v4 = 0;
    uint64_t v5 = result[5];
    uint64_t v6 = (_DWORD *)result + 13;
    do
    {
      uint64_t v7 = *(void *)(v5[4] + 16 * *((int *)v3 + 13));
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 8))(v7, a2);
      uint64_t result = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v3[4][1] + 64), *((_DWORD *)v3 + 13), v6);
      uint64_t v8 = (int *)result[5];
      uint64_t v9 = (int *)result[6];
      while (v8 != v9)
      {
        uint64_t v10 = *v8++;
        uint64_t v11 = *(void *)(v5[4] + 16 * v10);
        uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 8))(v11, a2);
      }
      ++v4;
    }
    while (v4 < *((_DWORD *)v3 + 12));
  }
  return result;
}

void Espresso::net::_tune_concurrency(Espresso::net *this, int a2, int a3)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int64_t v23 = v7;
  if (*(unsigned char *)(v6 + 52))
  {
    float v8 = Espresso::net::_bench(this, a2);
    uint64_t v9 = (Espresso::net *)*((void *)this + 63);
    if (v9 != (Espresso::net *)((char *)this + 512))
    {
      float v10 = (float)a2;
      double v11 = (float)(v8 / (float)a2);
      do
      {
        uint64_t v12 = *(void *)((char *)v9 + 28);
        uint64_t v24 = v12;
        Espresso::net::_bench_layer_and_children((std::__shared_weak_count **)this, v12, a2);
        *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 63, v12, &v24)+ 32) = 0;
        Espresso::net::_assign_streams(this);
        float v13 = Espresso::net::_bench_layer_and_children((std::__shared_weak_count **)this, v12, a2);
        *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 63, v12, &v24)+ 32) = 1;
        Espresso::net::_assign_streams(this);
        float v14 = Espresso::net::_bench_layer_and_children((std::__shared_weak_count **)this, v12, a2);
        double v15 = v14 * 1.01;
        BOOL v16 = v15 < v13;
        if (a3)
        {
          double v17 = (float)(v14 / v10);
          double v18 = (float)((float)(v14 - v13) / v10);
          int v19 = "";
          if (v15 < v13) {
            int v19 = "async";
          }
          printf("%.3f \t %.3f \t %.3f %s\n", v17, v18, v11, v19);
        }
        *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 63, v12, &v24)+ 32) = v16;
        int v20 = (Espresso::net *)*((void *)v9 + 1);
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            int v20 = *(Espresso::net **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (Espresso::net *)*((void *)v9 + 2);
            BOOL v22 = *(void *)v21 == (void)v9;
            uint64_t v9 = v21;
          }
          while (!v22);
        }
        uint64_t v9 = v21;
      }
      while (v21 != (Espresso::net *)((char *)this + 512));
    }
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
}

void sub_19270F53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::__reset_temporal_state(uint64_t a1, uint64_t a2)
{
  std::chrono::steady_clock::time_point v2 = *(uint64_t **)(a1 + 32);
  for (uint64_t i = *(uint64_t **)(a1 + 40); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *(void *)(v5 + 64);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 192))(v7, a2);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
  }
}

void sub_19270F5FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_multi<std::pair<std::string const,Espresso::net_configuration> const&>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__construct_node<std::pair<std::string const,Espresso::net_configuration> const&>((uint64_t)v8, a1, a2);
  uint64_t v3 = (uint64_t *)v8[0];
  uint64_t v5 = (uint64_t **)(a1 + 8);
  int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, v4 + 4)) {
          break;
        }
        int v4 = *v5;
        uint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      int v4 = v5[1];
    }
    while (v4);
    uint64_t v6 = v5 + 1;
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, v3);
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
  return v3;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__construct_node<std::pair<std::string const,Espresso::net_configuration> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x68uLL);
  uint64_t v7 = v6;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  v7[7] = 0;
  v7[8] = 0;
  v7[9] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v7 + 7, *(void *)(a3 + 24), *(void *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
  uint64_t result = std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)(v7 + 10), (long long **)(a3 + 48));
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_19270F7D8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 48, *(char **)(a1 + 56));
  int v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<unsigned long>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<unsigned long>>,0>(uint64_t a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v4; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v6 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      unint64_t v7 = a2[2];
      v6[2] = v7;
      float v8 = (void *)*v6;
      v6[1] = v7;
      inserted = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)a1, v7, v6 + 2);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(a1, v6, inserted);
      a2 = (void *)*a2;
      uint64_t v6 = v8;
      if (!v8) {
        goto LABEL_9;
      }
    }
    do
    {
      float v13 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2)
    {
      float v10 = operator new(0x18uLL);
      void *v10 = 0;
      unint64_t v11 = a2[2];
      v10[2] = v11;
      v10[1] = v11;
      uint64_t v12 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)a1, v11, v10 + 2);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(a1, v10, v12);
      a2 = (void *)*a2;
    }
  }
}

void sub_19270FA20(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_19270FA40(_Unwind_Exception *a1)
{
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v13 = operator new(8 * *(void *)&prime);
      float v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      BOOL v16 = *(void **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = (void *)*v16; *v16; uint64_t i = (void *)*v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            BOOL v16 = i;
          }
          else
          {
            uint64_t v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                unint64_t v25 = v24;
                uint64_t v24 = (void *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *BOOL v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              BOOL v16 = i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      long long v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    uint64_t result = v28;
    uint64_t v28 = (void *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && v28[2] == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int8x8_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int8x8_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1, a1[2]);
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      a1[1] = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1, v2);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>(a1, a2, (uint64_t)v9);
  uint64_t v3 = (uint64_t *)v9[0];
  uint8x8_t v5 = (uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint8x8_t v5 = (uint64_t **)v4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, v4 + 4)) {
          break;
        }
        unint64_t v4 = *v5;
        unint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = v5[1];
    }
    while (v4);
    unint64_t v6 = v5 + 1;
  }
  else
  {
    unint64_t v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, v3);
  uint64_t v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_192710040(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v2);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)v2);
  }
  return a1;
}

void Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::kernels_validation_status_t::save(Espresso::kernels_validation_status_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  unint64_t v60 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  uint64_t v2 = (_DWORD *)*((void *)this + 3);
  for (uint64_t i = (_DWORD *)*((void *)this + 4); v2 != i; ++v2)
  {
    LODWORD(v51) = *v2;
    unint64_t v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(&p_p, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v49, (uint64_t)v4, &p_p);
    if (SHIBYTE(p_shared_weak_owners) < 0) {
      operator delete(p_p);
    }
    uint64_t v5 = v49[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v5, (uint64_t)&__p, &p_p);
    (*((void (**)(void **, uint64_t **, long long *))*p_p + 20))(p_p, &p_shared_weak_owners, &v51);
    if (SHIBYTE(v65) < 0) {
      operator delete(p_shared_weak_owners);
    }
    if (v62) {
      nitro::nitro_function::nitro_function(v62);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(__p);
    }
    unint64_t v6 = v59;
    if ((unint64_t)v59 >= v60)
    {
      uint64_t v9 = ((uint64_t)v59 - v58) >> 4;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v60 - v58;
      if ((uint64_t)(v60 - v58) >> 3 > v10) {
        unint64_t v10 = v11 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      uint64_t v65 = &v60;
      p_p = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v12);
      float v13 = (std::__shared_weak_count *)&p_p[2 * v9];
      int v62 = v13;
      uint64_t v64 = &p_p[2 * v14];
      uint64_t v15 = (std::__shared_weak_count *)v49[1];
      v13->std::__shared_count = *(std::__shared_count *)v49;
      uint64_t v7 = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v7 = (std::__shared_weak_count *)v49[1];
      }
      p_shared_weak_owners = &v13->__shared_weak_owners_;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v58, &p_p);
      float v8 = v59;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&p_p);
    }
    else
    {
      void *v59 = v5;
      uint64_t v7 = (std::__shared_weak_count *)v49[1];
      v6[1] = v49[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v8 = v6 + 2;
    }
    uint64_t v59 = v8;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  BOOL v16 = (_DWORD *)*((void *)this + 6);
  for (uint64_t j = (_DWORD *)*((void *)this + 7); v16 != j; ++v16)
  {
    LODWORD(v51) = 0;
    LODWORD(v51) = *v16;
    uint8x8_t v18 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(&p_p, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v49, (uint64_t)v18, &p_p);
    if (SHIBYTE(p_shared_weak_owners) < 0) {
      operator delete(p_p);
    }
    unint64_t v19 = v49[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v19, (uint64_t)&__p, &p_p);
    (*((void (**)(void **, uint64_t **, long long *))*p_p + 20))(p_p, &p_shared_weak_owners, &v51);
    if (SHIBYTE(v65) < 0) {
      operator delete(p_shared_weak_owners);
    }
    if (v62) {
      nitro::nitro_function::nitro_function(v62);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(__p);
    }
    uint8x8_t v20 = v56;
    if ((unint64_t)v56 >= v57)
    {
      uint64_t v23 = ((uint64_t)v56 - v55) >> 4;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v57 - v55;
      if ((uint64_t)(v57 - v55) >> 3 > v24) {
        unint64_t v24 = v25 >> 3;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      uint64_t v65 = &v57;
      p_p = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v26);
      unint64_t v27 = (std::__shared_weak_count *)&p_p[2 * v23];
      int v62 = v27;
      uint64_t v64 = &p_p[2 * v28];
      int v29 = (std::__shared_weak_count *)v49[1];
      v27->std::__shared_count = *(std::__shared_count *)v49;
      uint64_t v21 = v29;
      if (v29)
      {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v21 = (std::__shared_weak_count *)v49[1];
      }
      p_shared_weak_owners = &v27->__shared_weak_owners_;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v55, &p_p);
      BOOL v22 = v56;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&p_p);
    }
    else
    {
      void *v56 = v19;
      uint64_t v21 = (std::__shared_weak_count *)v49[1];
      v20[1] = v49[1];
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v22 = v20 + 2;
    }
    uint64_t v56 = v22;
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
  }
  long long __p = 0;
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  uint64_t v30 = *(void *)this;
  uint64_t v31 = *((void *)this + 1);
  if (*(void *)this != v31)
  {
    do
    {
      if (!*(unsigned char *)(v30 + 104))
      {
        unint64_t v32 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
        std::string::basic_string[abi:ne180100]<0>(&p_p, "json");
        Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v51, (uint64_t)v32, &p_p);
        if (SHIBYTE(p_shared_weak_owners) < 0) {
          operator delete(p_p);
        }
        uint64_t v33 = v51;
        std::string::basic_string[abi:ne180100]<0>(v49, "");
        Espresso::SerDes::generic_serdes_object::operator[](v33, (uint64_t)v49, &p_p);
        int v48 = *(void *)(v30 + 96);
        (*((void (**)(void **, uint64_t **, int *))*p_p + 20))(p_p, &p_shared_weak_owners, &v48);
        if (SHIBYTE(v65) < 0) {
          operator delete(p_shared_weak_owners);
        }
        if (v62) {
          nitro::nitro_function::nitro_function(v62);
        }
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        int v34 = v53;
        if ((unint64_t)v53 >= v54)
        {
          uint64_t v37 = ((char *)v53 - (unsigned char *)__p) >> 4;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v54 - (void)__p;
          if ((uint64_t)(v54 - (void)__p) >> 3 > v38) {
            unint64_t v38 = v39 >> 3;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          uint64_t v65 = &v54;
          p_p = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v40);
          unint64_t v41 = (std::__shared_weak_count *)&p_p[2 * v37];
          int v62 = v41;
          uint64_t v64 = &p_p[2 * v42];
          uint64_t v43 = (std::__shared_weak_count *)*((void *)&v51 + 1);
          v41->std::__shared_count = (std::__shared_count)v51;
          long long v35 = v43;
          if (v43)
          {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v35 = (std::__shared_weak_count *)*((void *)&v51 + 1);
          }
          p_shared_weak_owners = &v41->__shared_weak_owners_;
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&__p, &p_p);
          float v36 = v53;
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&p_p);
        }
        else
        {
          *uint64_t v53 = v33;
          long long v35 = (std::__shared_weak_count *)*((void *)&v51 + 1);
          v34[1] = *((void *)&v51 + 1);
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float v36 = v34 + 2;
        }
        uint64_t v53 = v36;
        if (v35) {
          nitro::nitro_function::nitro_function(v35);
        }
      }
      v30 += 112;
    }
    while (v30 != v31);
  }
  uint64_t v44 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(&p_p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v44, &p_p);
  if (SHIBYTE(p_shared_weak_owners) < 0) {
    operator delete(p_p);
  }
  uint64_t v45 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "unsupported");
  (*(void (**)(uint64_t, void ***, void **))(*(void *)v45 + 248))(v45, &p_p, &__p);
  if (SHIBYTE(p_shared_weak_owners) < 0) {
    operator delete(p_p);
  }
  std::string::basic_string[abi:ne180100]<0>(&p_p, "to_fallback");
  (*(void (**)(uint64_t, void ***, uint64_t *))(*(void *)v45 + 248))(v45, &p_p, &v55);
  if (SHIBYTE(p_shared_weak_owners) < 0) {
    operator delete(p_p);
  }
  std::string::basic_string[abi:ne180100]<0>(&p_p, "visit_order");
  (*(void (**)(uint64_t, void ***, uint64_t *))(*(void *)v45 + 248))(v45, &p_p, &v58);
  if (SHIBYTE(p_shared_weak_owners) < 0) {
    operator delete(p_p);
  }
  std::string::basic_string[abi:ne180100]<0>(&p_p, "any_fallback");
  LODWORD(v49[0]) = *((unsigned __int8 *)this + 120);
  (*(void (**)(uint64_t, void ***, void **))(*(void *)v45 + 160))(v45, &p_p, v49);
  if (SHIBYTE(p_shared_weak_owners) < 0) {
    operator delete(p_p);
  }
  p_p = &__p;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  p_p = (void **)&v55;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  p_p = (void **)&v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&p_p);
}

void sub_1927108BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char **a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char *a28,uint64_t a29,uint64_t a30,char a31)
{
  if (*(char *)(v31 - 113) < 0) {
    operator delete(*(void **)(v31 - 136));
  }
  uint64_t v33 = *(std::__shared_weak_count **)(a10 + 8);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  long long __p = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a22 = &a28;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a28 = &a31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::kernels_validation_status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::kernels_validation_status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::net::save_precompilation_info(Espresso::net *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v14, (uint64_t)v4, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = (Espresso::kernels_validation_status_t *)*((void *)this + 89);
  if (v5)
  {
    Espresso::kernels_validation_status_t::save(v5, &v10);
    uint64_t v6 = v14;
    std::string::basic_string[abi:ne180100]<0>(__p, "kernel_validation_status");
    (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v6 + 240))(v6, __p, &v10);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  uint64_t v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v7, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = (char *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 8) + 16))(*(void *)(*((void *)this + 2) + 8));
  std::string::basic_string[abi:ne180100]<0>(__p, v9);
  (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v8 + 240))(v8, __p, &v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192710C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net_configuration::~net_configuration(char **this)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(this + 3), this[4]);
  uint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void Espresso::net::infer_current_configuration(Espresso::net *this@<X0>, uint64_t a2@<X8>)
{
}

void Espresso::net::save_additional_configurations(Espresso::net *this@<X0>, uint64_t *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v35, "json");
  unint64_t v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, v35);
  uint64_t v5 = (char *)*((void *)this + 97);
  uint64_t v6 = (char *)this + 784;
  if (v5 != (char *)this + 784)
  {
    uint64_t v7 = *a2;
    do
    {
      uint64_t v8 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v33, (uint64_t)v8, v35);
      uint64_t v9 = v33;
      if (*((void *)v5 + 8) != *((void *)v5 + 7))
      {
        uint64_t v10 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
        Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v31, (uint64_t)v10, v35);
        uint64_t v12 = *((void *)v5 + 7);
        uint64_t v11 = *((void *)v5 + 8);
        while (v12 != v11)
        {
          LODWORD(__p[0]) = 1;
          (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v31 + 160))(v31, v12, __p);
          v12 += 24;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "outputs");
        (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v9 + 240))(v9, __p, &v31);
        if (SBYTE7(v24) < 0) {
          operator delete(__p[0]);
        }
        if (v32) {
          nitro::nitro_function::nitro_function(v32);
        }
      }
      if (*((void *)v5 + 12))
      {
        char v13 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
        Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v31, (uint64_t)v13, v35);
        uint64_t v14 = (char *)*((void *)v5 + 10);
        if (v14 != v5 + 88)
        {
          do
          {
            uint64_t v15 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
            Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v29, (uint64_t)v15, v35);
            long long v16 = *(_OWORD *)(v14 + 72);
            *(_OWORD *)long long __p = *(_OWORD *)(v14 + 56);
            long long v24 = v16;
            unint64_t v17 = (const void *)*((void *)v14 + 12);
            uint64_t v25 = *((void *)v14 + 11);
            unint64_t v26 = 0;
            unint64_t v27 = 0;
            uint64_t v28 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v26, v17, *((void *)v14 + 13), (uint64_t)(*((void *)v14 + 13) - (void)v17) >> 2);
            Espresso::SerDes::params_io<Espresso::layer_shape>(v29, (uint64_t)__p, 1);
            (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v31 + 240))(v31, (void *)v14 + 4, &v29);
            if (v26)
            {
              unint64_t v27 = v26;
              operator delete(v26);
            }
            if (v30) {
              nitro::nitro_function::nitro_function(v30);
            }
            uint8x8_t v18 = (char *)*((void *)v14 + 1);
            if (v18)
            {
              do
              {
                unint64_t v19 = v18;
                uint8x8_t v18 = *(char **)v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                unint64_t v19 = (char *)*((void *)v14 + 2);
                BOOL v20 = *(void *)v19 == (void)v14;
                uint64_t v14 = v19;
              }
              while (!v20);
            }
            uint64_t v14 = v19;
          }
          while (v19 != v5 + 88);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "input_shapes");
        (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v9 + 240))(v9, __p, &v31);
        if (SBYTE7(v24) < 0) {
          operator delete(__p[0]);
        }
        if (v32) {
          nitro::nitro_function::nitro_function(v32);
        }
      }
      (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v7 + 240))(v7, (void *)v5 + 4, &v33);
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      uint64_t v21 = (char *)*((void *)v5 + 1);
      if (v21)
      {
        do
        {
          BOOL v22 = v21;
          uint64_t v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          BOOL v22 = (char *)*((void *)v5 + 2);
          BOOL v20 = *(void *)v22 == (void)v5;
          uint64_t v5 = v22;
        }
        while (!v20);
      }
      uint64_t v5 = v22;
    }
    while (v22 != v6);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
}

void sub_192711090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (*(char *)(v27 - 89) < 0) {
    operator delete(*(void **)(v27 - 112));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::setup_script(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "engine");
    uint64_t v7 = (Espresso *)(*(void *(**)(void **__return_ptr, uint64_t, long long *))(*(void *)v6 + 112))(v24, v6, &__p);
    if (v27 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    uint64_t v7 = (Espresso *)std::string::basic_string[abi:ne180100]<0>(v24, "espresso");
  }
  uint64_t v9 = Espresso::espresso_os_log_subsystem(v7, v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint8x8_t v18 = v24;
    if (v25 < 0) {
      uint8x8_t v18 = (void **)v24[0];
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v18;
    _os_log_debug_impl(&dword_1920CB000, v9, OS_LOG_TYPE_DEBUG, "[net::setup_script] %s", (uint8_t *)&__p, 0xCu);
  }

  if (*(void *)(a1 + 968)) {
    Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>(a1);
  }
  if (v25 < 0)
  {
    if (v24[1] == (void *)8)
    {
      uint64_t v10 = (void **)v24[0];
      if (*(void *)v24[0] == 0x6F73736572707365) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v10 = (void **)v24[0];
    }
LABEL_36:
    *(void *)&long long __p = v10;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Unsupported scripting engine ", &__p);
  }
  if (v25 != 8 || v24[0] != (void *)0x6F73736572707365)
  {
    uint64_t v10 = v24;
    goto LABEL_36;
  }
LABEL_14:
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&__p, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
  uint64_t v11 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381D18;
  uint64_t v12 = Espresso::interpreter_t::interpreter_t((uint64_t)&v11[1], (uint64_t *)&__p);
  *(void *)&long long v13 = v12;
  *((void *)&v13 + 1) = v11;
  shared_owners = (std::__shared_weak_count *)v11[5].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      goto LABEL_19;
    }
    long long v19 = v13;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[5].__vftable = (std::__shared_weak_count_vtbl *)v12;
    v11[5].__shared_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    long long v19 = v13;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[5].__vftable = (std::__shared_weak_count_vtbl *)v12;
    v11[5].__shared_owners_ = (uint64_t)v11;
  }
  nitro::nitro_function::nitro_function(v11);
  long long v13 = v19;
LABEL_19:
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 976);
  *(_OWORD *)(a1 + 968) = v13;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*((void *)&__p + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
  }
  uint64_t v16 = *(void *)(a1 + 968);
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v22, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
  unint64_t v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v20 = *a2;
  uint64_t v21 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t *))(*(void *)v16 + 24))(v16, &v22, a3, &v20);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
}

void sub_192711464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<Espresso::interpreter_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::interpreter_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381D18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::interpreter_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::net::transform_parameters_as_input(Espresso::net *this)
{
}

void Espresso::net::transform_transfer_global_parameters(Espresso::net *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)this + 5);
  unint64_t v4 = (v3 - v2) >> 4;
  if (v3 != v2)
  {
    unint64_t v5 = 0;
    if (v4 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = (v3 - v2) >> 4;
    }
    uint64_t v7 = *((void *)this + 4);
    unint64_t v8 = (v3 - v2) >> 4;
    unint64_t v9 = v8;
    while (1)
    {
      uint64_t v10 = (unint64_t *)(*(void *)v7 + 16);
      if (*(char *)(*(void *)v7 + 39) < 0)
      {
        uint64_t v14 = *(void *)(*(void *)v7 + 24);
        if (v14 == 11)
        {
          uint8x8_t v18 = (unint64_t *)*v10;
          unint64_t v19 = bswap64(*(void *)*v10);
          unint64_t v20 = 0x69735F747261696ELL;
          if (v19 != 0x69735F747261696ELL
            || (unint64_t v19 = bswap64(*(unint64_t *)((char *)v18 + 3)),
                unint64_t v20 = 0x747261696E696E67,
                v19 != 0x747261696E696E67))
          {
            BOOL v13 = v19 >= v20;
            goto LABEL_28;
          }
          goto LABEL_26;
        }
        if (v14 == 12)
        {
          uint64_t v10 = (unint64_t *)*v10;
LABEL_15:
          unint64_t v15 = bswap64(*v10);
          unint64_t v16 = 0x656E645F74726169;
          if (v15 == 0x656E645F74726169
            && (unint64_t v15 = bswap32(*((_DWORD *)v10 + 2)), v16 = 1852403303, v15 == 1852403303))
          {
            int v17 = 0;
          }
          else if (v15 < v16)
          {
            int v17 = -1;
          }
          else
          {
            int v17 = 1;
          }
          if (!v17) {
            unint64_t v9 = v5;
          }
        }
      }
      else
      {
        if (*(unsigned char *)(*(void *)v7 + 39) == 12) {
          goto LABEL_15;
        }
        if (*(unsigned char *)(*(void *)v7 + 39) == 11)
        {
          unint64_t v11 = bswap64(*v10);
          unint64_t v12 = 0x69735F747261696ELL;
          if (v11 != 0x69735F747261696ELL
            || (unint64_t v11 = bswap64(*(void *)(*(void *)v7 + 19)), v12 = 0x747261696E696E67,
                                                                  v11 != 0x747261696E696E67))
          {
            BOOL v13 = v11 >= v12;
LABEL_28:
            if (v13) {
              int v21 = 1;
            }
            else {
              int v21 = -1;
            }
LABEL_31:
            if (!v21) {
              unint64_t v8 = v5;
            }
            goto LABEL_33;
          }
LABEL_26:
          int v21 = 0;
          goto LABEL_31;
        }
      }
LABEL_33:
      ++v5;
      v7 += 16;
      if (v6 == v5) {
        goto LABEL_36;
      }
    }
  }
  unint64_t v9 = (v3 - v2) >> 4;
  unint64_t v8 = v9;
LABEL_36:
  unint64_t v22 = (int)v9;
  if (v4 > (v8 < v9) && v8 <= (int)v9)
  {
    do
      Espresso::net::remove_layer(this, v22--);
    while (v8 <= v22);
    uint64_t v2 = *((void *)this + 4);
    uint64_t v3 = *((void *)this + 5);
  }
  v78[0] = 0;
  v78[1] = 0;
  uint64_t v77 = v78;
  v76[0] = 0;
  v76[1] = 0;
  unint64_t v75 = v76;
  unint64_t v72 = 0;
  if (v3 == v2)
  {
    int64_t v73 = 0;
    uint64_t v74 = 0;
    unint64_t v72 = &v73;
LABEL_98:
    long long v67 = 0u;
    long long v68 = 0u;
    int v69 = 1065353216;
    goto LABEL_110;
  }
  long long v24 = 0;
  uint64_t v65 = (char *)this + 96;
  do
  {
    uint64_t v25 = *(void *)(v2 + 16 * (void)v24);
    unint64_t v26 = *(const void **)(v25 + 64);
    if (v26)
    {
      if (v27)
      {
        uint64_t v28 = *(std::__shared_weak_count **)(v25 + 72);
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = (std::string *)(v27 + 280);
        if (v76 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v75, (void *)v27 + 35))Espresso::throw_exception_selector<Espresso::generic_error>("A global can be loaded by at most one load constant kernel"); {
        *(void *)&long long v67 = v29;
        }
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v75, v29, (long long **)&v67)[7] = v24;
        *(void *)&long long v67 = &v72;
        *(void *)&long long v67 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v65, (unint64_t *)&v72, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67)[3];
        uint64_t v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v77, (void *)v67, (uint64_t)&std::piecewise_construct, (long long **)&v67);
        std::string::operator=((std::string *)(v30 + 7), v29);
        if (v28) {
          nitro::nitro_function::nitro_function(v28);
        }
      }
    }
    long long v24 = (char **)((char *)v72 + 1);
    unint64_t v72 = v24;
    uint64_t v2 = *((void *)this + 4);
    uint64_t v31 = *((void *)this + 5);
  }
  while ((unint64_t)v24 < (v31 - v2) >> 4);
  int64_t v73 = 0;
  uint64_t v74 = 0;
  unint64_t v71 = 0;
  unint64_t v72 = &v73;
  if (v31 == v2)
  {
    uint64_t v2 = v31;
    goto LABEL_98;
  }
  do
  {
    long long v67 = 0uLL;
    *(void *)&long long v68 = 0;
    v79[0] = (uint64_t *)&v71;
    unint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 56, &v71, (uint64_t)&std::piecewise_construct, v79);
    uint64_t v33 = (long long *)v32[3];
    int v34 = (long long *)v32[4];
    while (v33 != v34)
    {
      if (*((char *)v33 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v33, *((void *)v33 + 1));
      }
      else
      {
        long long v35 = *v33;
        v70.__r_.__value_.__r.__words[2] = *((void *)v33 + 2);
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v35;
      }
      if (v78 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v77, &v70))
      {
        v79[0] = (uint64_t *)&v70;
        char v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v77, &v70, (uint64_t)&std::piecewise_construct, (long long **)v79);
        uint64_t v37 = (long long *)(v36 + 7);
        unint64_t v38 = (_OWORD *)*((void *)&v67 + 1);
        if (*((void *)&v67 + 1) >= (unint64_t)v68)
        {
          unint64_t v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v67, (uint64_t)v37);
        }
        else
        {
          if (*((char *)v36 + 79) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)&v67 + 1), (const std::string::value_type *)v36[7], v36[8]);
          }
          else
          {
            long long v39 = *v37;
            *(void *)(*((void *)&v67 + 1) + 16) = v36[9];
            *unint64_t v38 = v39;
          }
          unint64_t v40 = (std::string *)((char *)v38 + 24);
        }
        *((void *)&v67 + 1) = v40;
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      uint64_t v33 = (long long *)((char *)v33 + 24);
    }
    if (*((void *)&v67 + 1) != (void)v67)
    {
      unint64_t v41 = std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v72, v71, (uint64_t **)&v71)+ 5;
      if (v41 != (uint64_t **)&v67) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v41, (std::string *)v67, *((std::string **)&v67 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v67 + 1) - v67) >> 3));
      }
    }
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    ++v71;
    uint64_t v42 = *((void *)this + 4);
    uint64_t v2 = *((void *)this + 5);
  }
  while (v71 < (v2 - v42) >> 4);
  long long v67 = 0u;
  long long v68 = 0u;
  int v69 = 1065353216;
  unint64_t v71 = 0;
  if (v2 == v42)
  {
    uint64_t v60 = (v2 - v42) >> 4;
  }
  else
  {
    unint64_t v43 = 0;
    do
    {
      uint64_t v44 = v73;
      if (v73)
      {
        uint64_t v45 = &v73;
        do
        {
          uint64_t v46 = v44;
          uint64_t v47 = v45;
          unint64_t v48 = *((void *)v44 + 4);
          if (v48 >= v43) {
            uint64_t v45 = (char **)v44;
          }
          else {
            v44 += 8;
          }
          uint64_t v44 = *(char **)v44;
        }
        while (v44);
        if (v45 != &v73)
        {
          if (v48 < v43) {
            uint64_t v46 = (char *)v47;
          }
          if (v43 >= *((void *)v46 + 4))
          {
            *(_OWORD *)&v70.__r_.__value_.__r.__words[1] = 0uLL;
            v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70.__r_.__value_.__l.__size_;
            unint64_t v49 = std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v72, v43, (uint64_t **)&v71);
            long long v51 = (unsigned __int8 *)v49[5];
            char v50 = (unsigned __int8 *)v49[6];
            while (v51 != v50)
            {
              unint64_t v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)this + 180, v51);
              if (!v52) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              uint64_t v53 = v52;
              v79[0] = (uint64_t *)v51;
              unint64_t v54 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v70, v51, (long long **)v79);
              uint64_t v56 = *((void *)v53 + 5);
              uint64_t v55 = *((void *)v53 + 6);
              if (v55) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
              }
              unint64_t v57 = (std::__shared_weak_count *)v54[8];
              v54[7] = v56;
              _DWORD v54[8] = v55;
              if (v57) {
                nitro::nitro_function::nitro_function(v57);
              }
              v79[0] = (uint64_t *)v51;
              uint64_t v58 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v75, v51, (long long **)v79);
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v67, v58 + 7, v58 + 7);
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((void *)this + 180, v51);
              v51 += 24;
            }
            uint64_t v59 = *(void *)(*(void *)(*((void *)this + 4) + 16 * v43) + 64);
            (*(void (**)(uint64_t, std::string *, Espresso::net *, unint64_t))(*(void *)v59 + 240))(v59, &v70, this, v43);
            std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy((void *)v70.__r_.__value_.__l.__size_);
            uint64_t v42 = *((void *)this + 4);
            uint64_t v2 = *((void *)this + 5);
          }
        }
      }
      unint64_t v71 = ++v43;
    }
    while (v43 < (v2 - v42) >> 4);
    uint64_t v60 = (v2 - v42) >> 4;
    uint64_t v2 = v42;
  }
  int v61 = v60 - 1;
  if ((int)v60 >= 1)
  {
    unint64_t v62 = v60 + 1;
    do
    {
      if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(&v67, (v62 - 2)))
      {
        v79[0] = (uint64_t *)(v62 - 2);
        uint64_t v63 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v65, (unint64_t)v79[0], v79)[3];
        if (*((char *)v63 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v63, *((void *)v63 + 1));
        }
        else
        {
          long long v64 = *v63;
          v70.__r_.__value_.__r.__words[2] = *((void *)v63 + 2);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v64;
        }
        Espresso::net::remove_layer(this, v61);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((void *)this + 17, (unsigned __int8 *)&v70);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)this + 23, &v70);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
      }
      --v62;
      --v61;
    }
    while (v62 > 1);
    uint64_t v2 = *((void *)this + 4);
  }
LABEL_110:
  v66[0] = 0;
  v66[1] = 0;
  Espresso::net::setup_script((uint64_t)this, v66, *(unsigned int *)(*(void *)v2 + 12));
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v67);
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(v73);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v76[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v77, v78[0]);
}

void sub_192711D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,char *a30)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a13);
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(a27);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a30);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30 - 128, *(void *)(v30 - 120));
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a1, a2);
  if (v3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::remove((uint64_t)v4, a1, v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4);
  }
}

void std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::remove(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  *uint64_t v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)uint64_t result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void Espresso::net::rewire_layer_input(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = (uint64_t)a4;
  unint64_t v40 = (unint64_t *)a4;
  uint64_t v37 = a1 + 136;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 136, (unsigned __int8 *)a4, (long long **)&v40)+ 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v40 = (unint64_t *)a3;
  unint64_t v8 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, (unsigned __int8 *)a3, (long long **)&v40)+ 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v36 = v8;
  unint64_t v39 = 0;
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) != v9)
  {
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = (uint64_t *)(v9 + 16 * v10);
      uint64_t v12 = *v11;
      BOOL v13 = (std::__shared_weak_count *)v11[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(unsigned __int8 *)(v12 + 39);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *(unsigned __int8 *)(v12 + 39);
      }
      else {
        uint64_t v15 = *(void *)(v12 + 24);
      }
      uint64_t v16 = a2[23];
      int v17 = (char)v16;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *((void *)a2 + 1);
      }
      if (v15 == v16)
      {
        uint8x8_t v18 = (const void **)(v12 + 16);
        if (v17 >= 0) {
          unint64_t v19 = a2;
        }
        else {
          unint64_t v19 = *(unsigned __int8 **)a2;
        }
        if ((v14 & 0x80) == 0)
        {
          if (*(unsigned char *)(v12 + 39))
          {
            while (*(unsigned __int8 *)v18 == *v19)
            {
              uint8x8_t v18 = (const void **)((char *)v18 + 1);
              ++v19;
              if (!--v14) {
                goto LABEL_24;
              }
            }
            goto LABEL_47;
          }
LABEL_24:
          for (unint64_t i = 0; ; ++i)
          {
            unint64_t v40 = &v39;
            int v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v39, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
            if (i >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[4] - v21[3]) >> 3)) {
              break;
            }
            unint64_t v40 = &v39;
            unint64_t v22 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v39, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40)[3]+ 24 * i);
            uint64_t v23 = v22[23];
            if ((v23 & 0x80u) == 0) {
              uint64_t v24 = v22[23];
            }
            else {
              uint64_t v24 = *((void *)v22 + 1);
            }
            uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
            int v26 = (char)v25;
            if ((v25 & 0x80u) != 0) {
              uint64_t v25 = *(void *)(v4 + 8);
            }
            if (v24 == v25)
            {
              if (v26 >= 0) {
                char v27 = (unsigned __int8 *)v4;
              }
              else {
                char v27 = *(unsigned __int8 **)v4;
              }
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v22, v27, *((void *)v22 + 1))) {
                  break;
                }
              }
              else
              {
                if (!v22[23]) {
                  break;
                }
                while (*v22 == *v27)
                {
                  ++v22;
                  ++v27;
                  if (!--v23) {
                    goto LABEL_42;
                  }
                }
              }
            }
          }
LABEL_42:
          unint64_t v40 = &v39;
          uint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v39, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
          if (i == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[4] - v28[3]) >> 3))
          {
            if (*(char *)(v4 + 23) < 0) {
              uint64_t v4 = *(void *)v4;
            }
            if (*(char *)(a3 + 23) < 0) {
              a3 = *(void *)a3;
            }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("blob %s is not input of layer %s", v4, a3);
          }
          unint64_t v40 = &v39;
          uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v39, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
          std::string::operator=((std::string *)(v29[3] + 24 * i), (const std::string *)a3);
          unint64_t v40 = (unint64_t *)a3;
          uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, (unsigned __int8 *)a3, (long long **)&v40);
          uint64_t v31 = *(void *)(v12 + 80);
          uint64_t v33 = *((void *)v30 + 5);
          uint64_t v32 = *((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
          }
          int v34 = (void *)(v31 + 16 * i);
          long long v35 = (std::__shared_weak_count *)v34[1];
          void *v34 = v33;
          v34[1] = v32;
          if (v35) {
            nitro::nitro_function::nitro_function(v35);
          }
          goto LABEL_47;
        }
        if (!memcmp(*v18, v19, *(void *)(v12 + 24))) {
          goto LABEL_24;
        }
      }
LABEL_47:
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      unint64_t v10 = v39 + 1;
      unint64_t v39 = v10;
      uint64_t v9 = *(void *)(a1 + 32);
    }
    while (v10 < (*(void *)(a1 + 40) - v9) >> 4);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_19271236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::set_metadata_for_key(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  long long v45 = *a3;
  long long v46 = a3[1];
  unint64_t v8 = (const void *)*((void *)a3 + 5);
  uint64_t v47 = *((void *)a3 + 4);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v8, *((void *)a3 + 6), (uint64_t)(*((void *)a3 + 6) - (void)v8) >> 2);
  uint64_t v9 = a4[1];
  *(void *)&long long v50 = *a4;
  *((void *)&v50 + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 1312);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)(a1 + 1304) + 8 * v4);
    if (v15)
    {
      for (unint64_t i = *v15; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            goto LABEL_79;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  uint8x8_t v18 = (char *)operator new(0x78uLL);
  unint64_t v19 = (void *)(a1 + 1320);
  v51[0] = v18;
  v51[1] = a1 + 1320;
  char v52 = 0;
  *(void *)uint8x8_t v18 = 0;
  *((void *)v18 + 1) = v11;
  unint64_t v20 = (std::string *)(v18 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v18 + 4) = *(void *)(a2 + 16);
  }
  *((void *)v18 + 12) = 0;
  *((void *)v18 + 13) = 0;
  *((_OWORD *)v18 + 4) = 0u;
  *((_OWORD *)v18 + 5) = 0u;
  *(_OWORD *)(v18 + 40) = xmmword_192DC3600;
  *((void *)v18 + 7) = 0xFFFFFFFF00000001;
  *((void *)v18 + 14) = 0;
  char v52 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 1328) + 1);
  float v22 = *(float *)(a1 + 1336);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    BOOL v23 = 1;
    if (v12 >= 3) {
      BOOL v23 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v12);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v12 = *(void *)(a1 + 1312);
    if (*(void *)&prime > v12) {
      goto LABEL_35;
    }
    if (*(void *)&prime < v12)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1328) / *(float *)(a1 + 1336));
      if (v12 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v12)
      {
        unint64_t v12 = *(void *)(a1 + 1312);
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v27 = operator new(8 * *(void *)&prime);
          uint64_t v28 = *(void **)(a1 + 1304);
          *(void *)(a1 + 1304) = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 1312) = prime;
          do
            *(void *)(*(void *)(a1 + 1304) + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint64_t v30 = (void *)*v19;
          if (*v19)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 1304) + 8 * v31) = v19;
            char v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  uint64_t v38 = *(void *)(a1 + 1304);
                  if (!*(void *)(v38 + 8 * v37))
                  {
                    *(void *)(v38 + 8 * v37) = v30;
                    goto LABEL_60;
                  }
                  void *v30 = *v36;
                  *char v36 = **(void **)(*(void *)(a1 + 1304) + 8 * v37);
                  **(void **)(*(void *)(a1 + 1304) + 8 * v37) = v36;
                  char v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_60:
                uint64_t v30 = v36;
                char v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v12 = (unint64_t)prime;
          goto LABEL_64;
        }
        uint64_t v44 = *(void **)(a1 + 1304);
        *(void *)(a1 + 1304) = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v12 = 0;
        *(void *)(a1 + 1312) = 0;
      }
    }
LABEL_64:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v39 = *(void **)(*(void *)(a1 + 1304) + 8 * v4);
  unint64_t i = (uint64_t *)v51[0];
  if (v39)
  {
    *(void *)v51[0] = *v39;
LABEL_77:
    void *v39 = i;
    goto LABEL_78;
  }
  *(void *)v51[0] = *(void *)(a1 + 1320);
  *(void *)(a1 + 1320) = i;
  *(void *)(*(void *)(a1 + 1304) + 8 * v4) = v19;
  if (*i)
  {
    unint64_t v40 = *(void *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v40 >= v12) {
        v40 %= v12;
      }
    }
    else
    {
      v40 &= v12 - 1;
    }
    unint64_t v39 = (void *)(*(void *)(a1 + 1304) + 8 * v40);
    goto LABEL_77;
  }
LABEL_78:
  v51[0] = 0;
  ++*(void *)(a1 + 1328);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
LABEL_79:
  unint64_t v41 = (void *)i[10];
  *(_OWORD *)(i + 5) = v45;
  *(_OWORD *)(i + 7) = v46;
  i[9] = v47;
  if (v41)
  {
    i[11] = (uint64_t)v41;
    operator delete(v41);
    i[10] = 0;
    i[11] = 0;
    i[12] = 0;
  }
  *((_OWORD *)i + 5) = *(_OWORD *)__p;
  i[12] = v49;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  long long v42 = v50;
  long long v50 = 0uLL;
  unint64_t v43 = (std::__shared_weak_count *)i[14];
  *(_OWORD *)(i + 13) = v42;
  if (v43)
  {
    nitro::nitro_function::nitro_function(v43);
    if (*((void *)&v50 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v50 + 1));
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1927128D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void *std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::~pair(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int8x8_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int8x8_t v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void Espresso::net::sync_copy_global(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  void (***v19)(uint64_t *__return_ptr, void);
  void v20[2];
  void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void v25[5];
  void *__p;
  void *v27;
  std::__shared_weak_count *v28;

  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 1440), a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint8x8_t v5 = v4;
  uint64_t v6 = (void *)*((void *)v4 + 5);
  uint64_t v7 = v6 + 9;
  uint64_t v8 = *(void *)(v6[9] + 8);
  uint64_t v9 = (*(uint64_t (**)(void *))(*v6 + 32))(v6);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 24))(v8, v7, v9);
  uint64_t v10 = *((void *)v5 + 5);
  uint64_t v11 = *a3;
  *(_OWORD *)(v11 + 112) = *(_OWORD *)(v10 + 112);
  if (v11 != v10) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v11 + 128), *(char **)(v10 + 128), *(void *)(v10 + 136), (uint64_t)(*(void *)(v10 + 136) - *(void *)(v10 + 128)) >> 2);
  }
  uint64_t v12 = *a3;
  Espresso::abstract_blob_container::shape((char *)v25, *((void *)v5 + 5));
  BOOL v23 = 0;
  unint64_t v24 = 0;
  (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v12 + 16))(v12, v25, &v23);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (__p)
  {
    char v27 = __p;
    operator delete(__p);
  }
  uint64_t v13 = *((void *)v5 + 5);
  unint64_t v14 = (std::__shared_weak_count *)*((void *)v5 + 6);
  v20[0] = v13;
  v20[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::sync_copy_to_host(&v21, v20);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  uint64_t v15 = *a3;
  uint64_t v16 = (std::__shared_weak_count *)a3[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = v21;
  uint8x8_t v18 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = *(void (****)(uint64_t *__return_ptr, void))(v15 + 72);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3321888768;
  v25[2] = ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_1622;
  v25[3] = &__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
  v25[4] = v15;
  long long __p = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v27 = v17;
  uint64_t v28 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_context::compute_batch_sync(v19, v25);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (__p) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
}

void sub_192712C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22)
{
  unint64_t v24 = *(std::__shared_weak_count **)(v22 + 8);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_1622(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, a1 + 48);
}

void Espresso::net::swap_global(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 1440;
  unint64_t v14 = a2;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1440, (unsigned __int8 *)a2, &v14);
  uint64_t v9 = *((void *)v8 + 6);
  *a4 = *((void *)v8 + 5);
  a4[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = a2;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a2, &v14);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 6);
  *((void *)v10 + 5) = v12;
  *((void *)v10 + 6) = v11;
  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
  }
}

void sub_192712E34(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::blobs_summary(Espresso::net *this)
{
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  unint64_t v73 = 0;
  unint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    if (v2 > 0x276276276276276) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v57 = (unint64_t)&v73;
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(v2);
    v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
    v55.__r_.__value_.__r.__words[2] = v55.__r_.__value_.__r.__words[0];
    std::string::size_type v56 = v55.__r_.__value_.__r.__words[0] + 104 * v3;
    std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__swap_out_circular_buffer(&v71, &v55);
    std::__split_buffer<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::~__split_buffer((uint64_t)&v55);
  }
  unint64_t __val = v2;
  unint64_t v4 = (uint64_t *)*((void *)this + 19);
  if (v4)
  {
    uint64_t v50 = 0;
    uint64_t v5 = 0;
    while (1)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v69, v4 + 5);
      Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v67, v4 + 5);
      Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v65, v4 + 5);
      Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v63, v4 + 5);
      uint64_t v6 = v69;
      if (v69) {
        break;
      }
      uint64_t v6 = v67;
      if (v67)
      {
        unint64_t v9 = *(int *)(v67 + 8);
        for (uint64_t i = 12; i != 24; i += 4)
          v9 *= *(int *)(v67 + i);
      }
      else
      {
        uint64_t v6 = v65;
        if (v65)
        {
          uint64_t v7 = *(int *)(v65 + 8);
          for (uint64_t j = 12; j != 24; j += 4)
            v7 *= *(int *)(v65 + j);
          goto LABEL_9;
        }
        uint64_t v6 = v63;
        if (!v63)
        {
          char v12 = 0;
          unint64_t v9 = 0;
LABEL_24:
          unint64_t v13 = v9;
          goto LABEL_25;
        }
        uint64_t v15 = *(int *)(v63 + 8);
        for (uint64_t k = 12; k != 24; k += 4)
          v15 *= *(int *)(v63 + k);
        unint64_t v9 = 2 * v15;
      }
LABEL_13:
      int v11 = *(unsigned __int8 *)(v6 + 32);
      char v12 = v11 ^ 1;
      v50 += v9;
      if (v11) {
        goto LABEL_24;
      }
      unint64_t v13 = 0;
LABEL_25:
      Espresso::abstract_blob_container::shape(v51, v4[5]);
      if (*((char *)v4 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)v4[2], v4[3]);
      }
      else {
        std::string v55 = *(std::string *)(v4 + 2);
      }
      LOBYTE(v56) = v12;
      unint64_t v57 = v9;
      long long v58 = *(_OWORD *)v51;
      long long v59 = *(_OWORD *)&v51[16];
      uint64_t v60 = v52;
      *(_OWORD *)long long __p = *(_OWORD *)v53;
      uint64_t v62 = v54;
      v53[1] = 0;
      uint64_t v54 = 0;
      v53[0] = 0;
      unint64_t v17 = v72;
      if (v72 >= v73)
      {
        uint64_t v21 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v72 - v71) >> 3);
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) > 0x276276276276276) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (0x9D89D89D89D89D8ALL * ((uint64_t)(v73 - v71) >> 3) > v22) {
          unint64_t v22 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v73 - v71) >> 3);
        }
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v73 - v71) >> 3)) >= 0x13B13B13B13B13BLL) {
          unint64_t v23 = 0x276276276276276;
        }
        else {
          unint64_t v23 = v22;
        }
        v74[4] = &v73;
        if (v23) {
          unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(v23);
        }
        else {
          uint64_t v24 = 0;
        }
        unint64_t v25 = v23 + 104 * v21;
        v74[0] = v23;
        v74[1] = v25;
        v74[3] = v23 + 104 * v24;
        long long v26 = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
        *(void *)(v25 + 16) = *((void *)&v55.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v25 = v26;
        memset(&v55, 0, sizeof(v55));
        *(unsigned char *)(v25 + 24) = v56;
        *(void *)(v25 + 32) = v57;
        long long v27 = v58;
        uint64_t v28 = v60;
        *(_OWORD *)(v25 + 56) = v59;
        *(_OWORD *)(v25 + 40) = v27;
        *(void *)(v25 + 72) = v28;
        *(void *)(v25 + 80) = 0;
        *(void *)(v25 + 88) = 0;
        *(void *)(v25 + 96) = 0;
        *(_OWORD *)(v25 + 80) = *(_OWORD *)__p;
        *(void *)(v25 + 96) = v62;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v62 = 0;
        v74[2] = v25 + 104;
        std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__swap_out_circular_buffer(&v71, v74);
        unint64_t v29 = v72;
        std::__split_buffer<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::~__split_buffer((uint64_t)v74);
        unint64_t v72 = v29;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v18 = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
        *(void *)(v72 + 16) = *((void *)&v55.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v17 = v18;
        memset(&v55, 0, sizeof(v55));
        *(unsigned char *)(v17 + 24) = v56;
        *(void *)(v17 + 32) = v57;
        uint64_t v19 = v60;
        long long v20 = v59;
        *(_OWORD *)(v17 + 40) = v58;
        *(_OWORD *)(v17 + 56) = v20;
        *(void *)(v17 + 72) = v19;
        *(void *)(v17 + 80) = 0;
        *(void *)(v17 + 88) = 0;
        *(void *)(v17 + 96) = 0;
        *(_OWORD *)(v17 + 80) = *(_OWORD *)__p;
        *(void *)(v17 + 96) = v62;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v62 = 0;
        unint64_t v72 = v17 + 104;
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (v53[0])
      {
        v53[1] = v53[0];
        operator delete(v53[0]);
      }
      if (v64) {
        nitro::nitro_function::nitro_function(v64);
      }
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }
      if (v68) {
        nitro::nitro_function::nitro_function(v68);
      }
      if (v70) {
        nitro::nitro_function::nitro_function(v70);
      }
      v5 += v13;
      unint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_56;
      }
    }
    uint64_t v7 = *(int *)(v69 + 8);
    for (uint64_t m = 12; m != 24; m += 4)
      v7 *= *(int *)(v69 + m);
LABEL_9:
    unint64_t v9 = 4 * v7;
    goto LABEL_13;
  }
  uint64_t v5 = 0;
  uint64_t v50 = 0;
LABEL_56:
  std::to_string(&v55, __val);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    int v49 = v55.__r_.__value_.__r.__words[1];
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  else
  {
    int v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  uint64_t v47 = v5;
  uint64_t v30 = v71;
  if (v72 == v71)
  {
    int v35 = 12;
    int v37 = 4;
    int v34 = 3;
    int v40 = 1;
    int v39 = 1;
    int v38 = 1;
    int v33 = 1;
    int v36 = 4;
  }
  else
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    int v33 = 1;
    int v34 = 3;
    int v35 = 12;
    int v36 = 4;
    int v37 = 4;
    int v38 = 1;
    int v39 = 1;
    int v40 = 1;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,BOOL,unsigned long,Espresso::layer_shape>::__tuple_impl(&v55, (long long *)(v30 + v31));
      int v41 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v41 = v55.__r_.__value_.__r.__words[1];
      }
      if (v36 <= v41) {
        int v36 = v41;
      }
      std::to_string((std::string *)v51, v57);
      if ((v51[23] & 0x80000000) != 0)
      {
        if (v35 <= *(int *)&v51[8]) {
          int v35 = *(_DWORD *)&v51[8];
        }
        operator delete(*(void **)v51);
      }
      else if (v35 <= v51[23])
      {
        int v35 = v51[23];
      }
      std::to_string((std::string *)v51, v58);
      if ((v51[23] & 0x80000000) != 0)
      {
        if (v39 <= *(int *)&v51[8]) {
          int v39 = *(_DWORD *)&v51[8];
        }
        operator delete(*(void **)v51);
      }
      else if (v39 <= v51[23])
      {
        int v39 = v51[23];
      }
      std::to_string((std::string *)v51, SDWORD1(v58));
      if ((v51[23] & 0x80000000) != 0)
      {
        if (v40 <= *(int *)&v51[8]) {
          int v40 = *(_DWORD *)&v51[8];
        }
        operator delete(*(void **)v51);
      }
      else if (v40 <= v51[23])
      {
        int v40 = v51[23];
      }
      std::to_string((std::string *)v51, SDWORD2(v58));
      if ((v51[23] & 0x80000000) != 0)
      {
        if (v38 <= *(int *)&v51[8]) {
          int v38 = *(_DWORD *)&v51[8];
        }
        operator delete(*(void **)v51);
      }
      else if (v38 <= v51[23])
      {
        int v38 = v51[23];
      }
      std::to_string((std::string *)v51, SHIDWORD(v58));
      if ((v51[23] & 0x80000000) != 0)
      {
        if (v33 <= *(int *)&v51[8]) {
          int v33 = *(_DWORD *)&v51[8];
        }
        operator delete(*(void **)v51);
      }
      else if (v33 <= v51[23])
      {
        int v33 = v51[23];
      }
      std::to_string((std::string *)v51, v59);
      if ((v51[23] & 0x80000000) != 0)
      {
        if (v34 <= *(int *)&v51[8]) {
          int v34 = *(_DWORD *)&v51[8];
        }
        operator delete(*(void **)v51);
      }
      else if (v34 <= v51[23])
      {
        int v34 = v51[23];
      }
      std::to_string((std::string *)v51, SDWORD1(v59));
      if ((v51[23] & 0x80000000) != 0)
      {
        if (v37 <= *(int *)&v51[8]) {
          int v37 = *(_DWORD *)&v51[8];
        }
        operator delete(*(void **)v51);
      }
      else if (v37 <= v51[23])
      {
        int v37 = v51[23];
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      ++v32;
      uint64_t v30 = v71;
      v31 += 104;
    }
    while (v32 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v72 - v71) >> 3));
  }
  printf("%*s %*s %*s %*s %*s %*s %*s %*s %-*s Aliased\n", v49, "", v35, "Size (Bytes)", v39, "W", v40, "H", v38, "K", v33, "N", v34, "Seq", v37, "Rank", v36, "Name");
  uint64_t v42 = v71;
  if (v72 != v71)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,BOOL,unsigned long,Espresso::layer_shape>::__tuple_impl(&v55, (long long *)(v42 + v43));
      long long v45 = &v55;
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      long long v46 = "*";
      if (!(_BYTE)v56) {
        long long v46 = "-";
      }
      printf("%*zu %*zu %*d %*d %*d %*d %*d %*d %-*s %-*s\n", v49, v44, v35, v57, v39, v58, v40, DWORD1(v58), v38, DWORD2(v58), v33, HIDWORD(v58), v34, v59, v37, DWORD1(v59), v36, (const char *)v45,
        7,
        v46);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      ++v44;
      uint64_t v42 = v71;
      v43 += 104;
    }
    while (v44 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v72 - v71) >> 3));
  }
  printf("[Blobs Summary] %zu Bytes of Max Memory for %zu Blobs\n", v50, __val);
  printf("[Blobs Summary] %zu Bytes of Memory with Aliasing for %zu Blobs\n", v47, __val);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
}

void sub_1927136F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41)
{
  a33 = v41 - 152;
  std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>::~tuple(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,BOOL,unsigned long,Espresso::layer_shape>::__tuple_impl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 24);
  this[1].__r_.__value_.__l.__size_ = *((void *)a2 + 4);
  long long v5 = *(long long *)((char *)a2 + 40);
  long long v6 = *(long long *)((char *)a2 + 56);
  std::string::size_type v7 = *((void *)a2 + 9);
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[0] = v7;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v5;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&this[3].__r_.__value_.__l.__size_, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  return this;
}

void sub_192713898(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a1);
}

uint64_t *std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 104);
      *(void *)(v6 - 88) = *(void *)(v2 + v5 - 88);
      *(_OWORD *)(v6 - 104) = v8;
      *(void *)(v7 - 96) = 0;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 104) = 0;
      *(unsigned char *)(v6 - 80) = *(unsigned char *)(v2 + v5 - 80);
      *(void *)(v6 - 72) = *(void *)(v2 + v5 - 72);
      long long v9 = *(_OWORD *)(v2 + v5 - 48);
      uint64_t v10 = *(void *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 48) = v9;
      *(void *)(v6 - 32) = v10;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 104;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  std::string *result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100](i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::net::pprint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v166 + 1) = a3;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = (const char *)a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  uint64_t v5 = (const char *)(a1 + 424);
  if (*(char *)(a1 + 447) < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  printf("def %s %s (", v4, v5);
  uint64_t v6 = *(void *)(a1 + 640);
  if (*(void *)(a1 + 648) != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      long long v9 = (const char *)(v6 + v7);
      if (v9[23] < 0) {
        long long v9 = *(const char **)v9;
      }
      printf("%s", v9);
      uint64_t v6 = *(void *)(a1 + 640);
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 648) - v6) >> 3);
      if (v8 < v10 - 1)
      {
        printf(", ");
        uint64_t v6 = *(void *)(a1 + 640);
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 648) - v6) >> 3);
      }
      ++v8;
      v7 += 24;
    }
    while (v8 < v10);
  }
  printf("): -> ");
  uint64_t v11 = *(void *)(a1 + 664);
  if (*(void *)(a1 + 672) != v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      unint64_t v14 = (const char *)(v11 + v12);
      if (v14[23] < 0) {
        unint64_t v14 = *(const char **)v14;
      }
      printf("%s", v14);
      uint64_t v11 = *(void *)(a1 + 664);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 672) - v11) >> 3);
      if (v13 < v15 - 1)
      {
        printf(", ");
        uint64_t v11 = *(void *)(a1 + 664);
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 672) - v11) >> 3);
      }
      ++v13;
      v12 += 24;
    }
    while (v13 < v15);
  }
  putchar(10);
  unsigned int v16 = (***(uint64_t (****)(void))(*(void *)(a1 + 16) + 8))(*(void *)(*(void *)(a1 + 16) + 8));
  unint64_t v17 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(a1 + 528), v16);
  long long v18 = v17;
  if (v17)
  {
    uint64_t v19 = (const void *)v17[3];
    long long v20 = (std::__shared_weak_count *)v18[4];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v19
    {
      uint64_t v165 = 0;
      unint64_t v22 = 0;
      long long v18 = 0;
      if (!v20) {
        goto LABEL_30;
      }
      goto LABEL_28;
    }
    uint64_t v165 = v21;
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v22 = v20;
LABEL_28:
      nitro::nitro_function::nitro_function(v20);
      long long v18 = (uint64_t *)v22;
      goto LABEL_30;
    }
    long long v18 = 0;
  }
  else
  {
    uint64_t v165 = 0;
  }
LABEL_30:
  std::string v163 = (std::__shared_weak_count *)v18;
  memset(v183, 0, sizeof(v183));
  int v184 = 1065353216;
  unint64_t v182 = 0;
  uint64_t v23 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) != v23)
  {
    int v167 = 0;
    int __val = 0;
    unint64_t v24 = 0;
    unint64_t v25 = (void *)(a1 + 96);
    long long v26 = (void *)(a1 + 56);
    *(void *)&long long v166 = a1;
    while (1)
    {
      long long v27 = *(_OWORD *)(v23 + 16 * v24);
      long long v181 = v27;
      if (*((void *)&v27 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = v27;
      if (*(char *)(v27 + 63) >= 0) {
        size_t v29 = *(unsigned __int8 *)(v27 + 63);
      }
      else {
        size_t v29 = *(void *)(v27 + 48);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v178, v29 + 1);
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v178;
      }
      else {
        uint64_t v30 = (std::string *)v178.__r_.__value_.__r.__words[0];
      }
      if (v29)
      {
        if (*(char *)(v28 + 63) >= 0) {
          uint64_t v31 = (const void *)(v28 + 40);
        }
        else {
          uint64_t v31 = *(const void **)(v28 + 40);
        }
        memmove(v30, v31, v29);
      }
      *(_WORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 60;
      int v32 = *(char *)(v181 + 39);
      if (v32 >= 0) {
        int v33 = (const std::string::value_type *)(v181 + 16);
      }
      else {
        int v33 = *(const std::string::value_type **)(v181 + 16);
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(v181 + 39);
      }
      else {
        std::string::size_type v34 = *(void *)(v181 + 24);
      }
      int v35 = std::string::append(&v178, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v174.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      int v37 = std::string::append(&v174, ">");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      std::string::size_type v180 = v37->__r_.__value_.__r.__words[2];
      long long v179 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v178.__r_.__value_.__l.__data_);
      }
      uint64_t v39 = *(void *)(*(void *)(*(void *)(v181 + 64) + 8) + 8);
      int v40 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v39 + 16))(v39);
      std::string::basic_string[abi:ne180100]<0>(&v178, v40);
      memset(&v177, 0, sizeof(v177));
      memset(&v176, 0, sizeof(v176));
      unint64_t v41 = v182;
      uint64_t v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v25, v182);
      if (!v42) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v44 = v42[3];
      uint64_t v43 = v42[4];
      long long v45 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v26, v41);
      if (!v45) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v47 = v45[3];
      uint64_t v46 = v45[4];
      *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v166;
      v174.__r_.__value_.__r.__words[2] = (std::string::size_type)&v181;
      uint64_t v175 = &v178;
      if (v43 != v44)
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0;
        unint64_t v50 = (v43 - v44) / 24;
        unint64_t v51 = v50 - 1;
        if (v50 <= 1) {
          uint64_t v52 = 1;
        }
        else {
          uint64_t v52 = v50;
        }
        do
        {
          uint64_t v53 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v25, v182);
          if (!v53) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          uint64_t v54 = (long long *)(v53[3] + v48);
          if (*((char *)v54 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v54, *((void *)v54 + 1));
          }
          else
          {
            long long v55 = *v54;
            v173.__r_.__value_.__r.__words[2] = *((void *)v54 + 2);
            *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v55;
          }
          Espresso::net::pprint(std::string const&,std::function<std::string ()(unsigned long const*,std::string const*)>)const::$_0::operator()(&__p, (uint64_t)&v174, (uint64_t)&v173);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v177, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v49 < v51) {
            std::string::append(&v177, ", ");
          }
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v173.__r_.__value_.__l.__data_);
          }
          ++v49;
          v48 += 24;
        }
        while (v52 != v49);
      }
      unint64_t v58 = (v46 - v47) / 24;
      if (v46 != v47)
      {
        uint64_t v59 = 0;
        unint64_t v60 = 0;
        if (v58 <= 1) {
          uint64_t v61 = 1;
        }
        else {
          uint64_t v61 = v58;
        }
        do
        {
          uint64_t v62 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v26, v182);
          if (!v62) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          uint64_t v63 = (long long *)(v62[3] + v59);
          if (*((char *)v63 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v63, *((void *)v63 + 1));
          }
          else
          {
            long long v64 = *v63;
            v173.__r_.__value_.__r.__words[2] = *((void *)v63 + 2);
            *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v64;
          }
          Espresso::net::pprint(std::string const&,std::function<std::string ()(unsigned long const*,std::string const*)>)const::$_0::operator()(&__p, (uint64_t)&v174, (uint64_t)&v173);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v65 = &__p;
          }
          else {
            uint64_t v65 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v66 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v66 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v176, (const std::string::value_type *)v65, v66);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v60 < v58 - 1) {
            std::string::append(&v176, ", ");
          }
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v173.__r_.__value_.__l.__data_);
          }
          ++v60;
          v59 += 24;
        }
        while (v61 != v60);
      }
      memset(&v173, 0, sizeof(v173));
      uint64_t v67 = *(void *)(v181 + 64);
      std::string::basic_string[abi:ne180100]<0>(&__p, "basic_block_head");
      long long v68 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v67 + 240), (unsigned __int8 *)&__p);
      uint64_t v69 = v68;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        break;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v69) {
        goto LABEL_103;
      }
LABEL_104:
      unint64_t v70 = v182;
      if (v165)
      {
        uint64_t v71 = v165[10];
        if (v182 < (v165[11] - v71) >> 2 && *(_DWORD *)(v71 + 4 * v182) != -1)
        {
          std::to_string(&v170, __val);
          unint64_t v72 = std::string::insert(&v170, 0, "<segment_head ");
          long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          uint64_t v74 = std::string::append(&v171, ">");
          long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v76 = &__p;
          }
          else {
            uint64_t v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v77 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v173, (const std::string::value_type *)v76, v77);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v171.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v170.__r_.__value_.__l.__data_);
          }
          uint64_t v78 = v165[10];
          if (v182 >= (v165[11] - v78) >> 2) {
            int v79 = -1;
          }
          else {
            int v79 = *(_DWORD *)(v78 + 4 * v182);
          }
          int v80 = (unint64_t *)(v165[4] + 120 * v79 + 8);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v183, v80, v80);
          ++__val;
          unint64_t v70 = v182;
        }
      }
      if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v183, v70))
      {
        std::string::append(&v173, "<segment_end>");
      }
      uint64_t v81 = *(void *)(v181 + 64);
      if (v81 && (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v81 + 264))(v81, v58)) {
        std::string::append(&v173, "<dyn>");
      }
      uint64_t v82 = v181;
      uint64_t v83 = *(const void **)(v181 + 64);
      if (v83)
      {
        if (v84)
        {
          uint64_t v85 = v84;
          unint64_t v86 = *(std::__shared_weak_count **)(v82 + 72);
          if (v86) {
            atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::to_string(&v168, v84[4]);
          uint64_t v87 = std::string::insert(&v168, 0, "<label ");
          long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v169.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          uint64_t v89 = std::string::append(&v169, ":");
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v170.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          int v93 = (const std::string::value_type *)v85[1];
          int v92 = (const std::string::value_type *)(v85 + 1);
          uint64_t v91 = v93;
          int v94 = v92[23];
          if (v94 >= 0) {
            uint64_t v95 = v92;
          }
          else {
            uint64_t v95 = v91;
          }
          if (v94 >= 0) {
            std::string::size_type v96 = *((unsigned __int8 *)v92 + 23);
          }
          else {
            std::string::size_type v96 = *((void *)v92 + 1);
          }
          unint64_t v97 = std::string::append(&v170, v95, v96);
          long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          uint64_t v99 = std::string::append(&v171, ">");
          long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v101 = &__p;
          }
          else {
            long long v101 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v102 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v173, (const std::string::value_type *)v101, v102);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v171.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v170.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v169.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v168.__r_.__value_.__l.__data_);
            if (!v86) {
              goto LABEL_155;
            }
LABEL_154:
            nitro::nitro_function::nitro_function(v86);
            goto LABEL_155;
          }
          if (v86) {
            goto LABEL_154;
          }
        }
      }
LABEL_155:
      uint64_t v103 = v181;
      uint64_t v104 = *(const void **)(v181 + 64);
      if (v104)
      {
        if (v105)
        {
          uint64_t v106 = v105;
          long long v107 = *(std::__shared_weak_count **)(v103 + 72);
          if (v107) {
            atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::to_string(&v168, v105[44]);
          long long v108 = std::string::insert(&v168, 0, "<self_label ");
          long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v169.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          long long v110 = std::string::append(&v169, ":");
          long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          v170.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          int v112 = *((char *)v106 + 351);
          if (v112 >= 0) {
            uint64_t v113 = (const std::string::value_type *)(v106 + 41);
          }
          else {
            uint64_t v113 = (const std::string::value_type *)v106[41];
          }
          if (v112 >= 0) {
            std::string::size_type v114 = *((unsigned __int8 *)v106 + 351);
          }
          else {
            std::string::size_type v114 = v106[42];
          }
          uint64_t v115 = std::string::append(&v170, v113, v114);
          long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v116;
          v115->__r_.__value_.__l.__size_ = 0;
          v115->__r_.__value_.__r.__words[2] = 0;
          v115->__r_.__value_.__r.__words[0] = 0;
          uint64_t v117 = std::string::append(&v171, ">");
          long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v118;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v119 = &__p;
          }
          else {
            int v119 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v120 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v120 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v173, (const std::string::value_type *)v119, v120);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v171.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v170.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v169.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (!v107) {
              goto LABEL_182;
            }
LABEL_181:
            nitro::nitro_function::nitro_function(v107);
            goto LABEL_182;
          }
          operator delete(v168.__r_.__value_.__l.__data_);
          if (v107) {
            goto LABEL_181;
          }
        }
      }
LABEL_182:
      if (SHIBYTE(v180) < 0)
      {
        if (*((void *)&v179 + 1) == 6)
        {
          int v123 = *(unsigned __int16 *)(v179 + 4);
          BOOL v124 = *(_DWORD *)v179 == 1700750947;
          int v125 = 25710;
        }
        else
        {
          if (*((void *)&v179 + 1) != 7) {
            goto LABEL_207;
          }
          uint64_t v121 = (int *)v179;
LABEL_189:
          int v122 = *v121;
          int v123 = *(int *)((char *)v121 + 3);
          BOOL v124 = v122 == 1700750947;
          int v125 = 1702063205;
        }
        if (v124 && v123 == v125) {
          goto LABEL_206;
        }
        goto LABEL_207;
      }
      if (HIBYTE(v180) != 6)
      {
        if (HIBYTE(v180) != 7) {
          goto LABEL_207;
        }
        uint64_t v121 = (int *)&v179;
        goto LABEL_189;
      }
      if (v179 == 1700750947 && WORD2(v179) == 25710) {
LABEL_206:
      }
        --v167;
LABEL_207:
      memset(&__p, 0, sizeof(__p));
      int v128 = v167;
      if (v167 >= 1)
      {
        do
        {
          std::string::append(&__p, "  ");
          --v128;
        }
        while (v128);
      }
      uint64_t v129 = *(void *)(*((void *)&v166 + 1) + 24);
      if (v129)
      {
        std::function<std::string ()(unsigned long const*,std::string const*)>::operator()((uint64_t)&v171, v129, (uint64_t)&v182, 0);
        std::string::size_type v130 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
        char v131 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v130 = v171.__r_.__value_.__l.__size_;
        }
        if (v130)
        {
          std::operator+<char>();
          int v132 = std::string::append(&v169, "}");
          long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          v170.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v134 = &v170;
          }
          else {
            v134 = (std::string *)v170.__r_.__value_.__r.__words[0];
          }
          if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v135 = HIBYTE(v170.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v135 = v170.__r_.__value_.__l.__size_;
          }
          std::string::append(&v173, (const std::string::value_type *)v134, v135);
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v170.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v169.__r_.__value_.__l.__data_);
          }
          char v131 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
        }
        if (v131 < 0) {
          operator delete(v171.__r_.__value_.__l.__data_);
        }
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v136 = &__p;
      }
      else {
        std::string v136 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      printf("%.4zu: %s", v182, (const char *)v136);
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v177.__r_.__value_.__l.__size_) {
          goto LABEL_235;
        }
        v137 = (std::string *)v177.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((unsigned char *)&v177.__r_.__value_.__s + 23)) {
          goto LABEL_235;
        }
        v137 = &v177;
      }
      printf("%%%s = ", (const char *)v137);
LABEL_235:
      int v138 = SHIBYTE(v180);
      unint64_t v139 = (const char *)v179;
      int v140 = SHIBYTE(v176.__r_.__value_.__r.__words[2]);
      std::string::size_type v141 = v176.__r_.__value_.__r.__words[0];
      int v142 = SHIBYTE(v178.__r_.__value_.__r.__words[2]);
      std::string::size_type v143 = v178.__r_.__value_.__r.__words[0];
      Espresso::compute_path_to_string(*(_DWORD *)(v181 + 12), &v171);
      v144 = &v178;
      if (v142 < 0) {
        v144 = (std::string *)v143;
      }
      unint64_t v145 = &v176;
      if (v140 < 0) {
        unint64_t v145 = (std::string *)v141;
      }
      v146 = (const char *)&v179;
      if (v138 < 0) {
        v146 = v139;
      }
      char v147 = &v171;
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v147 = (std::string *)v171.__r_.__value_.__r.__words[0];
      }
      id v148 = &v173;
      if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        id v148 = (std::string *)v173.__r_.__value_.__r.__words[0];
      }
      printf("%s(%s) @%s,%s %s\n", v146, (const char *)v145, (const char *)v144, (const char *)v147, (const char *)v148);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      if ((v180 & 0x8000000000000000) != 0)
      {
        switch(*((void *)&v179 + 1))
        {
          case 5:
            int v153 = *(unsigned __int8 *)(v179 + 4);
            BOOL v154 = *(_DWORD *)v179 == 1767859811;
            int v155 = 102;
            goto LABEL_274;
          case 6:
            int v153 = *(unsigned __int16 *)(v179 + 4);
            BOOL v154 = *(_DWORD *)v179 == 1717528163;
            int v155 = 29295;
            goto LABEL_274;
          case 7:
            v150 = (int *)v179;
            if (*(_DWORD *)v179 != 1818191459 || *(_DWORD *)(v179 + 3) != 1886351212)
            {
LABEL_263:
              int v152 = *v150;
              int v153 = *(int *)((char *)v150 + 3);
              BOOL v154 = v152 == 1700750947;
              int v155 = 1702063205;
LABEL_274:
              if (!v154 || v153 != v155) {
                break;
              }
            }
LABEL_279:
            ++v167;
            break;
        }
      }
      else
      {
        switch(HIBYTE(v180))
        {
          case 5u:
            int v156 = BYTE4(v179);
            BOOL v157 = v179 == 1767859811;
            int v158 = 102;
LABEL_266:
            if (!v157 || v156 != v158) {
              break;
            }
            goto LABEL_279;
          case 6u:
            int v156 = WORD2(v179);
            BOOL v157 = v179 == 1717528163;
            int v158 = 29295;
            goto LABEL_266;
          case 7u:
            if (v179 != 1818191459 || *(_DWORD *)((char *)&v179 + 3) != 1886351212)
            {
              v150 = (int *)&v179;
              goto LABEL_263;
            }
            goto LABEL_279;
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v173.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v177.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v178.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v180) < 0) {
        operator delete((void *)v179);
      }
      if (*((void *)&v181 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v181 + 1));
      }
      unint64_t v24 = v182 + 1;
      unint64_t v182 = v24;
      uint64_t v23 = *(void *)(v166 + 32);
      if (v24 >= (*(void *)(v166 + 40) - v23) >> 4) {
        goto LABEL_295;
      }
    }
    if (!v68) {
      goto LABEL_104;
    }
LABEL_103:
    MEMORY[0x192FF0F50](&v173, "<basic_block_head>");
    goto LABEL_104;
  }
LABEL_295:
  if (*(char *)(a2 + 23) >= 0) {
    v161 = (const char *)a2;
  }
  else {
    v161 = *(const char **)a2;
  }
  printf("end %s\n\n", v161);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v183);
  if (v163) {
    nitro::nitro_function::nitro_function(v163);
  }
}

void sub_192714B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (*(char *)(v67 - 233) < 0) {
    operator delete(*(void **)(v67 - 256));
  }
  if (*(char *)(v67 - 209) < 0) {
    operator delete(*(void **)(v67 - 232));
  }
  if (*(char *)(v67 - 185) < 0) {
    operator delete(*(void **)(v67 - 208));
  }
  uint64_t v69 = *(std::__shared_weak_count **)(v67 - 168);
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v67 - 144);
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(a1);
}

void Espresso::net::pprint(std::string const&,std::function<std::string ()(unsigned long const*,std::string const*)>)const::$_0::operator()(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "?");
  std::string::basic_string[abi:ne180100]<0>(&v72, "");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v6 + 136), (unsigned __int8 *)a3);
  unint64_t v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v6 + 184, (void *)a3);
  if ((void *)(v6 + 192) == v8)
  {
    if (v7)
    {
      uint64_t v16 = *((void *)v7 + 5);
      if (v16)
      {
        Espresso::abstract_blob_container::shape((char *)&v68, v16);
        int v17 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v68);
        std::to_string(&v78, v17);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v78;
        *((unsigned char *)&v78.__r_.__value_.__s + 23) = 0;
        v78.__r_.__value_.__s.__data_[0] = 0;
        if (v70)
        {
          uint64_t v71 = v70;
          operator delete(v70);
        }
        Espresso::abstract_blob_container::shape((char *)&v68, *((void *)v7 + 5));
        if (LODWORD(v68.__r_.__value_.__r.__words[2]) == 1) {
          int v18 = 4;
        }
        else {
          int v18 = 5;
        }
        if (HIDWORD(v68.__r_.__value_.__r.__words[2]) == -1) {
          int v19 = v18;
        }
        else {
          int v19 = HIDWORD(v68.__r_.__value_.__r.__words[2]);
        }
        std::to_string(&v78, v19);
        long long v20 = std::string::insert(&v78, 0, "r");
        uint64_t v21 = (void *)v20->__r_.__value_.__r.__words[0];
        v77.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if ((char)v74 < 0) {
          operator delete(v72);
        }
        unint64_t v72 = v21;
        *(void *)long long v73 = v77.__r_.__value_.__r.__words[0];
        *(void *)&v73[7] = *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 7);
        unsigned __int8 v74 = v22;
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        unint64_t v15 = v70;
        if (v70)
        {
          uint64_t v71 = v70;
          goto LABEL_30;
        }
      }
    }
  }
  else
  {
    long long v9 = v8;
    int v10 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(v8 + 7));
    std::to_string(&v68, v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v68;
    int v11 = *((_DWORD *)v9 + 19);
    if (v11 == -1)
    {
      if (*((_DWORD *)v9 + 18) == 1) {
        int v11 = 4;
      }
      else {
        int v11 = 5;
      }
    }
    std::to_string(&v68, v11);
    uint64_t v12 = std::string::insert(&v68, 0, "r");
    unint64_t v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v78.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v74 < 0) {
      operator delete(v72);
    }
    unint64_t v72 = v13;
    *(void *)long long v73 = v78.__r_.__value_.__r.__words[0];
    *(void *)&v73[7] = *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 7);
    unsigned __int8 v74 = v14;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v15 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v15);
    }
  }
  memset(&v78, 0, sizeof(v78));
  uint64_t v23 = *(void *)(*(void *)(a2 + 8) + 24);
  if (v23)
  {
    std::function<std::string ()(unsigned long const*,std::string const*)>::operator()((uint64_t)&v68, v23, 0, a3);
    std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    char v25 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v68.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::operator+<char>();
      long long v26 = std::string::append(&v77, "}");
      std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
      v76.__r_.__value_.__r.__words[0] = v26->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
      char v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      v78.__r_.__value_.__r.__words[0] = v27;
      v78.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v78.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&v78.__r_.__value_.__s + 23) = v28;
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      char v25 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    if (v25 < 0)
    {
      size_t v29 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_76:
      operator delete(v29);
    }
  }
  else
  {
    uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v6 + 136), (unsigned __int8 *)a3);
    uint64_t v31 = v30;
    if (v30 && (uint64_t v32 = *((void *)v30 + 5)) != 0)
    {
      int v33 = (char *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v32 + 72) + 8) + 16))(*(void *)(*(void *)(v32 + 72) + 8));
      std::string::basic_string[abi:ne180100]<0>(&v68, v33);
      std::string::size_type v34 = std::string::insert(&v68, 0, "{");
      std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
      v77.__r_.__value_.__r.__words[0] = v34->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
      char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      v78.__r_.__value_.__r.__words[0] = v35;
      v78.__r_.__value_.__l.__size_ = v77.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v78.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&v78.__r_.__value_.__s + 23) = v36;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      int v37 = (*(uint64_t (**)(void))(**((void **)v31 + 5) + 32))(*((void *)v31 + 5));
      Espresso::compute_path_to_string(v37, &v76);
      long long v38 = std::string::insert(&v76, 0, ",");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      int v40 = std::string::append(&v77, "}");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v42 = &v68;
      }
      else {
        uint64_t v42 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v43 = v68.__r_.__value_.__l.__size_;
      }
      std::string::append(&v78, (const std::string::value_type *)v42, v43);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v29 = (void *)v76.__r_.__value_.__r.__words[0];
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v44 = *(uint64_t (****)(void))(*(void *)(*(void *)(**(void **)(a2 + 16) + 64) + 8) + 8);
      LODWORD(v77.__r_.__value_.__l.__data_) = (**v44)(v44);
      Espresso::net::resolve_blob_numerical_properties(v6, (void *)a3, (int *)&v77, (_DWORD *)(**(void **)(a2 + 16) + 12), (uint64_t)&v68);
      std::operator+<char>();
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      std::string v78 = v77;
      Espresso::compute_path_to_string(v68.__r_.__value_.__r.__words[1], &v67);
      long long v45 = std::string::insert(&v67, 0, ",");
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      uint64_t v47 = std::string::append(&v76, "}");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v49 = &v77;
      }
      else {
        unint64_t v49 = (std::string *)v77.__r_.__value_.__r.__words[0];
      }
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v50 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v50 = v77.__r_.__value_.__l.__size_;
      }
      std::string::append(&v78, (const std::string::value_type *)v49, v50);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      size_t v29 = (void *)v68.__r_.__value_.__r.__words[2];
      if (v68.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v69 = v68.__r_.__value_.__r.__words[2];
        goto LABEL_76;
      }
    }
  }
  if (*(char *)(a3 + 23) >= 0) {
    size_t v51 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v51 = *(void *)(a3 + 8);
  }
  uint64_t v52 = &v67;
  std::string::basic_string[abi:ne180100]((uint64_t)&v67, v51 + 1);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v52 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  if (v51)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v53 = (const void *)a3;
    }
    else {
      uint64_t v53 = *(const void **)a3;
    }
    memmove(v52, v53, v51);
  }
  *(_WORD *)((char *)&v52->__r_.__value_.__l.__data_ + v51) = 40;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v55 = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v56 = std::string::append(&v67, (const std::string::value_type *)p_p, v55);
  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  if ((v74 & 0x80u) == 0) {
    unint64_t v58 = (const std::string::value_type *)&v72;
  }
  else {
    unint64_t v58 = (const std::string::value_type *)v72;
  }
  if ((v74 & 0x80u) == 0) {
    std::string::size_type v59 = v74;
  }
  else {
    std::string::size_type v59 = *(void *)v73;
  }
  unint64_t v60 = std::string::append(&v76, v58, v59);
  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  uint64_t v62 = std::string::append(&v77, ")");
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v64 = &v78;
  }
  else {
    long long v64 = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v65 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v65 = v78.__r_.__value_.__l.__size_;
  }
  std::string::size_type v66 = std::string::append(&v68, (const std::string::value_type *)v64, v65);
  *a1 = *v66;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if ((char)v74 < 0) {
    operator delete(v72);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19271559C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v46 - 121) < 0) {
    operator delete(*(void **)(v46 - 144));
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (*(char *)(v46 - 89) < 0) {
    operator delete(*(void **)(v46 - 112));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_19271577C()
{
}

void sub_192715784()
{
}

uint64_t std::function<std::string ()(unsigned long const*,std::string const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (!a2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a2 + 48))(a2, &v6, &v5);
}

void Espresso::pass_constant_if_conditions::hint_fallback_constant_ifs_from_metal(Espresso::pass_constant_if_conditions *this, Espresso::net *a2)
{
  Espresso::run_pass_on_network<Espresso::pass_constant_if_conditions>((uint64_t)this);
  uint64_t v3 = (uint64_t *)*((void *)this + 4);
  uint64_t v4 = (uint64_t *)*((void *)this + 5);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v6 = *v3;
      uint64_t v5 = (std::__shared_weak_count *)v3[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *(void *)(v6 + 64);
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
      uint64_t v12 = __p;
      int v8 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 240, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v12)+ 10);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = *(void *)(v6 + 64);
      if (v8) {
        *(_DWORD *)(v9 + 136) = 1;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((void *)(v9 + 240), (unsigned __int8 *)__p);
      if (v11 < 0) {
        break;
      }
      if (v5) {
        goto LABEL_10;
      }
LABEL_11:
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    operator delete(__p[0]);
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    nitro::nitro_function::nitro_function(v5);
    goto LABEL_11;
  }
}

void sub_192715900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::net::loaded_global_name(void *a1, uint64_t a2)
{
  if (!a1[121]) {
    Espresso::throw_exception_selector<Espresso::generic_error>("interpreter is needed by load_global layers");
  }
  uint64_t v4 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a1);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v4 + 2, (unsigned __int8 *)a2);
  if (!v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v16 = (void *)a2;
    }
    else {
      uint64_t v16 = *(void **)a2;
    }
    int v18 = v16;
    unint64_t v15 = "Blob %s does not exist";
    goto LABEL_23;
  }
  unint64_t v6 = *(void *)(v4[19] + 8 * *((int *)v5 + 10));
  uint64_t v7 = a1[4];
  if (v6 >= (a1[5] - v7) >> 4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v17 = (void *)a2;
    }
    else {
      int v17 = *(void **)a2;
    }
    int v18 = v17;
    unint64_t v15 = "Blob %s is not loaded from global";
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)(v7 + 16 * v6);
  uint64_t v9 = *(const void **)(v8 + 64);
  if (!v9
  {
    unsigned __int8 v14 = (void *)(v8 + 16);
    if (*(char *)(v8 + 39) < 0) {
      unsigned __int8 v14 = (void *)*v14;
    }
    int v18 = v14;
    unint64_t v15 = "layer %s is not a load_global layer";
LABEL_23:
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v15, &v18);
  }
  char v11 = *(std::__shared_weak_count **)(v8 + 72);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v10 + 320))(v10);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  return v12;
}

void sub_192715AC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::net::try_fast_reshape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 1160);
  if (!v4)
  {
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v9, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
    uint64_t v5 = operator new(0x80uLL);
    v5[1] = 0;
    v5[2] = 0;
    *uint64_t v5 = &unk_1EE3863F8;
    *(void *)&long long v6 = Espresso::net_fast_reshaper::net_fast_reshaper((uint64_t)(v5 + 3), &v9);
    *((void *)&v6 + 1) = v5;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 1168);
    *(_OWORD *)(a1 + 1160) = v6;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    uint64_t v4 = *(void *)(a1 + 1160);
  }
  return Espresso::net_fast_reshaper::reshape(v4, a2);
}

void sub_192715B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::net_fast_reshaper>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)(a1 + 56);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::__shared_ptr_emplace<Espresso::net_fast_reshaper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3863F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::net_fast_reshaper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3863F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::net::set_analysis_model_metadata(Espresso::net *this, const std::string *a2)
{
  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>((uint64_t)this, &v8);
  uint64_t v4 = v8;
  if (!(void)v8)
  {
    uint64_t v5 = operator new(0xF0uLL);
    v5[1] = 0;
    v5[2] = 0;
    *uint64_t v5 = &unk_1EE387A80;
    uint64_t v4 = (uint64_t)(v5 + 3);
    v5[3] = &unk_1EE359F38;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 13) = 0u;
    v5[28] = 0;
    *((_DWORD *)v5 + 58) = 1065353216;
    *(void *)&long long v6 = v5 + 3;
    *((void *)&v6 + 1) = v5;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v8 + 1);
    long long v8 = v6;
    if (v7)
    {
      nitro::nitro_function::nitro_function(v7);
      uint64_t v4 = v8;
    }
  }
  Espresso::analysis_debug_metadata::set_model_metadata(v4, a2);
  Espresso::net::set_analysis<Espresso::analysis_debug_metadata>((uint64_t)this, &v8);
  if (*((void *)&v8 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v8 + 1));
  }
}

void sub_192715D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::analysis_debug_metadata>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387A80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_debug_metadata>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::net::get_analysis_model_metadata(Espresso::net *this@<X0>, std::string *a2@<X8>)
{
  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>((uint64_t)this, &v4);
  char v3 = v4;
  if (v4)
  {
    Espresso::model_metadata_t::model_metadata_t(a2, (const Espresso::model_metadata_t *)(v4 + 8));
    char v3 = 1;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  a2[7].__r_.__value_.__s.__data_[0] = v3;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192715E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *Espresso::model_metadata_t::model_metadata_t(std::string *this, const Espresso::model_metadata_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  int v10 = this + 6;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_19271600C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::interpreter_t::setup(Espresso::interpreter_t *a1, uint64_t *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  (*(void (**)(Espresso::interpreter_t *))(*(void *)a1 + 40))(a1);
  long long v4 = (uint64_t **)*((void *)a1 + 2);
  for (uint64_t i = (uint64_t **)*((void *)a1 + 3); v4 != i; ++v4)
  {
    long long v5 = *v4;
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v42, **v4, (std::__shared_weak_count *)(*v4)[1]);
    uint64_t v6 = v42;
    if ((uint64_t *)v42 != v5)
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v42 + 184), (long long *)v5[23], (long long *)v5 + 12);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v6 + 208), (long long *)v5[26], (long long *)(v5 + 27));
    }
    long long v7 = (Espresso *)operator new(0x30uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)long long v7 = &unk_1EE3848A0;
    long long v8 = (void *)((char *)v7 + 24);
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 3) = &unk_1EE33DE08;
    int v10 = Espresso::espresso_os_log_subsystem(v7, v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = (unint64_t)"N8Espresso16pass_bind_labelsE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v10, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v8 + 24))(&buf, v8, v6);
    char v44 = 0;
    (*(void (**)(void *, char *))(*v8 + 16))(v8, &v44);
    if (v44)
    {
      if ((_BYTE)buf) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (void *)&buf + 1);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), *(void *)(MEMORY[0x1E4FBA3D8] + 8));
      }
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v7);
    long long v11 = (Espresso *)operator new(0x30uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)long long v11 = &unk_1EE387C78;
    uint64_t v12 = (void *)((char *)v11 + 24);
    *((void *)v11 + 4) = 0;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 3) = &unk_1EE35B0F8;
    unsigned __int8 v14 = Espresso::espresso_os_log_subsystem(v11, v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = (unint64_t)"N8Espresso23pass_control_flow_graphE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v14, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v12 + 24))(&buf, v12, v6);
    char v44 = 0;
    (*(void (**)(void *, char *))(*v12 + 16))(v12, &v44);
    if (v44)
    {
      if ((_BYTE)buf) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (void *)&buf + 1);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso18control_flow_graphE");
      }
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11);
    unint64_t v15 = (Espresso *)operator new(0x30uLL);
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
    *(void *)unint64_t v15 = &unk_1EE381DF8;
    uint64_t v16 = (void *)((char *)v15 + 24);
    *((void *)v15 + 4) = 0;
    *((void *)v15 + 5) = 0;
    *((void *)v15 + 3) = &unk_1EE32BB40;
    int v18 = Espresso::espresso_os_log_subsystem(v15, v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = (unint64_t)"N8Espresso13pass_make_ssaE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v18, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v16 + 24))(&buf, v16, v6);
    char v44 = 0;
    (*(void (**)(void *, char *))(*v16 + 16))(v16, &v44);
    if (v44)
    {
      if ((_BYTE)buf) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (void *)&buf + 1);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso17analysis_make_ssaE");
      }
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v15);
    uint64_t v19 = v42;
    long long v20 = (Espresso *)operator new(0x30uLL);
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = 0;
    *(void *)long long v20 = &unk_1EE387968;
    uint64_t v21 = (void *)((char *)v20 + 24);
    *((void *)v20 + 4) = 0;
    *((void *)v20 + 5) = 0;
    *((void *)v20 + 3) = &unk_1EE359C50;
    uint64_t v23 = Espresso::espresso_os_log_subsystem(v20, v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = (unint64_t)"N8Espresso22pass_tag_dynamic_blobsE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v23, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v21 + 24))(&buf, v21, v19);
    char v44 = 0;
    (*(void (**)(void *, char *))(*v21 + 16))(v21, &v44);
    if (v44)
    {
      if ((_BYTE)buf) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v19, (void *)&buf + 1);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v19 + 1120), (uint64_t)"N8Espresso26analysis_tag_dynamic_blobsE");
      }
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v20);
    unint64_t v24 = (Espresso *)operator new(0x30uLL);
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)unint64_t v24 = &unk_1EE386F20;
    char v25 = (void *)((char *)v24 + 24);
    *((void *)v24 + 4) = 0;
    *((void *)v24 + 5) = 0;
    *((void *)v24 + 3) = &unk_1EE352330;
    std::string::size_type v27 = Espresso::espresso_os_log_subsystem(v24, v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = (unint64_t)"N8Espresso20pass_block_transformE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v27, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v25 + 24))(&buf, v25, v6);
    char v44 = 0;
    (*(void (**)(void *, char *))(*v25 + 16))(v25, &v44);
    if (v44)
    {
      if ((_BYTE)buf) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (void *)&buf + 1);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso24analysis_block_transformE");
      }
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v24);
    char v28 = (Espresso *)operator new(0x30uLL);
    *((void *)v28 + 1) = 0;
    *((void *)v28 + 2) = 0;
    *(void *)char v28 = &unk_1EE3880D8;
    size_t v29 = (void *)((char *)v28 + 24);
    *((void *)v28 + 4) = 0;
    *((void *)v28 + 5) = 0;
    *((void *)v28 + 3) = &unk_1EE35CD70;
    uint64_t v31 = Espresso::espresso_os_log_subsystem(v28, v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = (unint64_t)"N8Espresso24pass_re_lower_to_networkE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v31, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v29 + 24))(&buf, v29, v6);
    char v44 = 0;
    (*(void (**)(void *, char *))(*v29 + 16))(v29, &v44);
    if (v44)
    {
      if ((_BYTE)buf) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (void *)&buf + 1);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso28analysis_re_lower_to_networkE");
      }
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v28);
    uint64_t v32 = (Espresso *)operator new(0x30uLL);
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = 0;
    *(void *)uint64_t v32 = &unk_1EE381DC0;
    int v33 = (void *)((char *)v32 + 24);
    *((void *)v32 + 4) = 0;
    *((void *)v32 + 5) = 0;
    *((void *)v32 + 3) = &unk_1EE32BB10;
    std::string::size_type v35 = Espresso::espresso_os_log_subsystem(v32, v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = (unint64_t)"N8Espresso13pass_livenessE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v35, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v33 + 24))(&buf, v33, v6);
    char v44 = 0;
    (*(void (**)(void *, char *))(*v33 + 16))(v33, &v44);
    if (v44)
    {
      if ((_BYTE)buf) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (void *)&buf + 1);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso17analysis_livenessE");
      }
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32);
    char v36 = (Espresso *)operator new(0x30uLL);
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = 0;
    *(void *)char v36 = &unk_1EE3830C8;
    int v37 = (void *)((char *)v36 + 24);
    *((void *)v36 + 4) = 0;
    *((void *)v36 + 5) = 0;
    *((void *)v36 + 3) = &unk_1EE332B68;
    long long v39 = Espresso::espresso_os_log_subsystem(v36, v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = (unint64_t)"N8Espresso15pass_allocationE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v39, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v37 + 24))(&buf, v37, v6);
    char v44 = 0;
    (*(void (**)(void *, char *))(*v37 + 16))(v37, &v44);
    if (v44)
    {
      if ((_BYTE)buf) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (void *)&buf + 1);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso19analysis_allocationE");
      }
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v36);
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(v6);
    Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>(v6);
    if (v43) {
      nitro::nitro_function::nitro_function(v43);
    }
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_multi_head_program_gen>(&buf, *a2);
  uint64_t v40 = buf;
  if (*((void *)&buf + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&buf + 1));
  }
  if (!v40) {
    Espresso::interpreter_t::setup_fix_context_transfer_races(a1);
  }
  if (Espresso::interpreter_t::setup(std::shared_ptr<Espresso::net>,Espresso::compute_path,std::shared_ptr<Espresso::SerDes::generic_serdes_object>)::onceToken != -1) {
    dispatch_once(&Espresso::interpreter_t::setup(std::shared_ptr<Espresso::net>,Espresso::compute_path,std::shared_ptr<Espresso::SerDes::generic_serdes_object>)::onceToken, &__block_literal_global_1681);
  }
}

void sub_192716CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  nitro::nitro_function::nitro_function(v23);
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  _Unwind_Resume(a1);
}

void Espresso::interpreter_t::setup_fix_context_transfer_races(Espresso::interpreter_t *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 2);
  for (uint64_t i = (uint64_t *)*((void *)this + 3); v1 != i; ++v1)
  {
    uint64_t v2 = *v1;
    uint64_t v4 = *(void *)(*v1 + 32);
    uint64_t v3 = *(void *)(*v1 + 40);
    if (v3 != v4)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(v4 + v5);
        long long v8 = *(const void **)(v7 + 64);
        if (v8)
        {
          if (v9)
          {
            int v10 = *(std::__shared_weak_count **)(v7 + 72);
            if (v10)
            {
              atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
              v9[344] = 1;
              nitro::nitro_function::nitro_function(v10);
              uint64_t v4 = *(void *)(v2 + 32);
              uint64_t v3 = *(void *)(v2 + 40);
            }
            else
            {
              v9[344] = 1;
            }
          }
        }
        ++v6;
        v5 += 16;
      }
      while (v6 < (v3 - v4) >> 4);
    }
  }
}

void ___ZN8Espresso13interpreter_t5setupENSt3__110shared_ptrINS_3netEEENS_12compute_pathENS2_INS_6SerDes21generic_serdes_objectEEE_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v2 = [v0 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v1 = [v2 objectForKeyedSubscript:@"espresso.interpreter.verbose"];
  super_verbose = [v1 BOOLValue];
}

void sub_192716ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>(char *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *resolve_virtual_phi(uint64_t **a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  id v2 = a1[1];
  unint64_t v4 = *(void *)(**a1 + 152);
  uint64_t v5 = 0;
  uint64_t v6 = (char *)v2 - (char *)*a1;
  if (v2 != *a1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 4;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    long long v9 = *a1;
    do
    {
      uint64_t v10 = *v9;
      v9 += 2;
      unint64_t v11 = *(void *)(v10 + 152);
      if (v11 > v4)
      {
        unint64_t v4 = v11;
        uint64_t v5 = v7;
      }
      ++v7;
    }
    while (v8 != v7);
  }
  if (super_verbose)
  {
    float v12 = nanf("nan");
    Espresso::abstract_blob_container::shape(buf, v3[2 * v5]);
    uint64_t v14 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
    unint64_t v15 = (Espresso *)__p;
    if (__p)
    {
      unint64_t v24 = __p;
      operator delete(__p);
    }
    if (v14 >= 1)
    {
      long long v16 = *(_OWORD *)&(*a1)[2 * v5];
      long long v19 = v16;
      if (*((void *)&v16 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::sync_copy_to_host(buf, &v19);
      if (*((void *)&v19 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v19 + 1));
      }
      unint64_t v15 = *(Espresso **)&buf[8];
      float v12 = **(float **)(*(void *)buf + 24);
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    int v17 = Espresso::espresso_os_log_subsystem(v15, v13);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218496;
      *(void *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v4;
      __int16 v21 = 2048;
      double v22 = v12;
      _os_log_debug_impl(&dword_1920CB000, v17, OS_LOG_TYPE_DEBUG, "resolve_virtual_phi: idx=%zu ts=%zu v=%.2f X\n", buf, 0x20u);
    }

    uint64_t v3 = *a1;
  }
  return &v3[2 * v5];
}

void sub_1927170D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v14 = v3 + 16 * a2;
      while (v4 != v14)
      {
        unint64_t v15 = *(std::__shared_weak_count **)(v4 - 8);
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
        v4 -= 16;
      }
      a1[1] = v14;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    uint64_t v7 = a1[2];
    if (a2 - v5 <= (v7 - v4) >> 4)
    {
      bzero((void *)a1[1], 16 * v6);
      a1[1] = v4 + 16 * v6;
    }
    else
    {
      if (a2 >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      v16[4] = a1 + 2;
      uint64_t v8 = v7 - v3;
      uint64_t v9 = v8 >> 3;
      if (v8 >> 3 <= a2) {
        uint64_t v9 = a2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      float v12 = &v11[16 * v5];
      v16[0] = v11;
      v16[1] = v12;
      v16[3] = &v11[16 * v13];
      bzero(v12, 16 * v6);
      v16[2] = &v12[16 * v6];
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a1, v16);
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v16);
    }
  }
}

void *std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    id v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void Espresso::interpreter_t::net_return(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 16);
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = *a2;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 120) = 0;
  *(_WORD *)(v8 + 128) = 0;
  *(unsigned char *)(*a2 + 129) = 1;
}

void std::__shared_ptr_emplace<Espresso::return_status_t>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<Espresso::return_status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3831A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::return_status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3831A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::abstract_blob_container_options_aliasing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::abstract_blob_container_options_aliasing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::per_network_phi_state_t>::__on_zero_shared(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
  if (v2) {
    operator delete(v2);
  }

  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::per_network_phi_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387D20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::per_network_phi_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::interpreter_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386A88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::interpreter_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::interpreter_t::~interpreter_t(Espresso::interpreter_t *this)
{
  Espresso::interpreter_t::~interpreter_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE32BAD0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 144);
  std::__function::__value_func<void ()(Espresso::net *,unsigned long)>::~__value_func[abi:ne180100]((void *)this + 14);
  id v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  Espresso::abstract_executor_t::~abstract_executor_t(this);
}

void *std::__function::__value_func<void ()(Espresso::net *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void Espresso::ssa_blob_name::repr(std::string *this, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    if (*(char *)(a2 + 31) >= 0) {
      size_t v4 = *(unsigned __int8 *)(a2 + 31);
    }
    else {
      size_t v4 = *(void *)(a2 + 16);
    }
    uint64_t v5 = &v14;
    std::string::basic_string[abi:ne180100]((uint64_t)&v14, v4 + 14);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if (v4)
    {
      if (*(char *)(a2 + 31) >= 0) {
        uint64_t v6 = (const void *)(a2 + 8);
      }
      else {
        uint64_t v6 = *(const void **)(a2 + 8);
      }
      memmove(v5, v6, v4);
    }
    strcpy((char *)v5 + v4, "_@ssa_version_");
    std::to_string(&__p, *(void *)(a2 + 32));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else if (*(char *)(a2 + 31) < 0)
  {
    unint64_t v11 = *(const std::string::value_type **)(a2 + 8);
    std::string::size_type v12 = *(void *)(a2 + 16);
    std::string::__init_copy_ctor_external(this, v11, v12);
  }
  else
  {
    *this = *(std::string *)(a2 + 8);
  }
}

void sub_1927177C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::interpreter_t::interpreter_t(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)uint64_t result = &unk_1EE34F0F0;
  *(void *)(result + 8) = v2;
  *(void *)(result + 64) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 72) = 1065353216;
  uint64_t v3 = *(void *)(*a2 + 24);
  *(void *)(result + 80) = *(void *)(*a2 + 16);
  *(void *)(result + 88) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)uint64_t result = &unk_1EE32BAD0;
  *(_OWORD *)(result + 136) = 0uLL;
  *(_OWORD *)(result + 152) = 0uLL;
  *(void *)(result + 168) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(_OWORD *)(result + 184) = 0uLL;
  *(_OWORD *)(result + 200) = 0uLL;
  *(_DWORD *)(result + 216) = 1065353216;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *a2;
  *(void *)uint64_t result = &unk_1EE34F0F0;
  *(void *)(result + 8) = v2;
  *(void *)(result + 64) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 72) = 1065353216;
  uint64_t v3 = *(void *)(*a2 + 24);
  *(void *)(result + 80) = *(void *)(*a2 + 16);
  *(void *)(result + 88) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)uint64_t result = &unk_1EE32BAD0;
  *(_OWORD *)(result + 136) = 0uLL;
  *(_OWORD *)(result + 152) = 0uLL;
  *(void *)(result + 168) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(_OWORD *)(result + 184) = 0uLL;
  *(_OWORD *)(result + 200) = 0uLL;
  *(_DWORD *)(result + 216) = 1065353216;
  return result;
}

void Espresso::generic_phi_virtual_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  long long v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  uint64_t v8 = v4;
  std::string __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_1927179F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_phi_virtual_kernel::get_runtime_type_config(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (_OWORD *)*a1;
  long long v9 = *(_OWORD *)*a1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v4 + 2), *((void *)v4 + 3), (uint64_t)(*((void *)v4 + 3) - *((void *)v4 + 2)) >> 2);
  long long v5 = 0;
  uint64_t v6 = 0;
  v7[0] = 0;
  v7[1] = &v5;
  char v8 = 0;
  long long v5 = (char *)operator new(0x28uLL);
  uint64_t v6 = (uint64_t)v5;
  v7[0] = v5 + 40;
  uint64_t v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties*>((uint64_t)v7, (uint64_t)&v9, (uint64_t)&v13, (uint64_t)v5);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<std::vector<Espresso::blob_numerical_properties> const&,std::vector<Espresso::blob_numerical_properties>&,0>(a2, a1, (uint64_t *)&v5);
  *(void *)&long long v9 = &v5;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_192717B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v4 + 16), *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
      uint64_t v4 = v11 + 40;
      v11 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_192717C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::generic_phi_virtual_kernel::__launch(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  if (*a4 == a4[1])
  {
    uint64_t v4 = (void *)(result + 288);
    if (*(char *)(result + 311) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v7 = v4;
    long long v5 = "missing src %s";
LABEL_10:
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>(v5, &v7);
  }
  if (*a3 == a3[1])
  {
    uint64_t v6 = (void *)(result + 288);
    if (*(char *)(result + 311) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = v6;
    long long v5 = "missing dst %s";
    goto LABEL_10;
  }
  return result;
}

void Espresso::interpreter_t::net_goto(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(*(void *)a2 + 120) = *a3;
}

uint64_t *Espresso::interpreter_t::net_call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 120) = 0;
  *(_WORD *)(v5 + 128) = 0;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)(a1 + 40), a3);
  if (!result)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = *(void *)a3;
    }
    uint64_t v9 = v8;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find network %s", &v9);
  }
  uint64_t v7 = *a2;
  *(void *)(v7 + 112) = result[5];
  *(void *)(v7 + 120) = 0;
  *(unsigned char *)(v7 + 128) = 1;
  return result;
}

void Espresso::interpreter_t::iterate_all_ssa_versions(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  Espresso::map_const_get<std::unordered_map<std::string,std::string>>(&v13, (void *)(a1 + 184), a2, a2);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)(a1 + 144), (uint64_t)&v13);
  if (v6) {
    unint64_t v7 = v6[5];
  }
  else {
    unint64_t v7 = 1;
  }
  v5[2](v5, a2);
  if (v7 >= 2)
  {
    for (uint64_t i = 1; i != v7; ++i)
    {
      v9[0] = 1;
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v10 = *(std::string *)a2;
      }
      uint64_t v11 = i;
      Espresso::ssa_blob_name::repr(&__p, (uint64_t)v9);
      v5[2](v5, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
    }
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_192717E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void Espresso::pass_params_graph_coloring::~pass_params_graph_coloring(Espresso::pass_params_graph_coloring *this)
{
}

void Espresso::run_pass_on_network<Espresso::pass_global_name_indexing>(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EE388340;
  uint64_t v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE35DC08;
  uint64_t v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    unint64_t v8 = (unint64_t)"N8Espresso25pass_global_name_indexingE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v6 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v6);
  if (v6)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v8 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso32pass_global_name_indexing_resultE");
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void sub_1927180F0(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void *Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a1 + 1120), (uint64_t)&v15);
  if (!v1) {
    goto LABEL_9;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (const void *)v1[3];
  uint64_t v4 = (std::__shared_weak_count *)v2[4];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v3)
  {
LABEL_9:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Analysis missing: ");
    uint64_t v9 = std::string::append(&v14, (const std::string::value_type *)((unint64_t)"N8Espresso32pass_global_name_indexing_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v5)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Analysis mismatch: ");
    uint64_t v12 = std::string::append(&v14, (const std::string::value_type *)((unint64_t)"N8Espresso32pass_global_name_indexing_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v11, &v15);
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  char v6 = v5;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v4);
    nitro::nitro_function::nitro_function(v4);
  }
  return v6;
}

void sub_1927182F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v23) {
    __cxa_free_exception(v22);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::force_aliased_blob_index::~force_aliased_blob_index(Espresso::force_aliased_blob_index *this)
{
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)this + 80);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

void Espresso::interference_graph::analysis_result(Espresso::interference_graph *this, uint64_t a2)
{
  unint64_t v4 = *(int *)(a2 + 136);
  __p[0] = (void *)-1;
  std::vector<unsigned long>::vector(v19, v4, __p);
  std::vector<int>::size_type v5 = *(int *)(a2 + 136);
  LODWORD(__p[0]) = -1;
  std::vector<int>::vector(&v18, v5, (const std::vector<int>::value_type *)__p);
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)long long v16 = 0u;
  int v17 = 1065353216;
  if (*(_DWORD *)(a2 + 24))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(v9 + 56);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v9 + 64) - v10) >> 3) <= v8) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v11 = *(int *)(*(void *)(*(void *)(a2 + 16) + 24) + (v6 >> 30));
      int v12 = *(_DWORD *)(*(void *)(a2 + 184) + 4 * v11);
      long long v20 = (long long *)(v10 + v7);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)(v10 + v7), (uint64_t)&std::piecewise_construct, &v20)+ 10) = v12;
      int v13 = *(_DWORD *)(*(void *)(a2 + 208) + 4 * v11);
      if (v13 > v18.__begin_[v12])
      {
        v18.__begin_[v12] = v13;
        *((void *)v19[0] + v12) = v8;
      }
      ++v8;
      v7 += 24;
      v6 += 0x100000000;
    }
    while (v8 < *(int *)(a2 + 24));
  }
  std::allocate_shared[abi:ne180100]<Espresso::analysis_pass_graph_coloring,std::allocator<Espresso::analysis_pass_graph_coloring>,std::unordered_map<std::string,int>,std::vector<unsigned long>,void>(this, (uint64_t)__p, (uint64_t)v19);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v16[0]);
  std::string v14 = __p[0];
  __p[0] = 0;
  if (v14) {
    operator delete(v14);
  }
  if (v18.__begin_)
  {
    v18.__end_ = v18.__begin_;
    operator delete(v18.__begin_);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
}

void sub_19271854C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    std::vector<int>::size_type v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v4 - 40);
      while ((void *)v4 != v2);
      std::vector<int>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void Espresso::interference_graph::~interference_graph(Espresso::interference_graph *this)
{
  uint64_t v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    *((void *)this + 27) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    *((void *)this + 24) = v3;
    operator delete(v3);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 144);
  uint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  std::vector<int>::size_type v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void **)((char *)this + 40);
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_graph_coloring>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388A78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_graph_coloring>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8EspressoL45alias_blob_loaded_from_or_stored_to_to_globalERNS_3netERKNS_30pass_blob_name_indexing_resultERKNS_32pass_global_name_indexing_resultERKNSt3__113unordered_mapIiNS8_13unordered_setIiNS8_4hashIiEENS8_8equal_toIiEENS8_9allocatorIiEEEESC_SE_NSF_INS8_4pairIKiSH_EEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1[1] + 16), (unsigned __int8 *)a2);
  if (!v4) {
    return;
  }
  unint64_t v5 = *((int *)v4 + 10);
  uint64_t v6 = (char *)operator new(0x98uLL);
  uint64_t v7 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE3896B8;
  unint64_t v8 = v6 + 24;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((void *)v6 + 17) = 0;
  *((void *)v6 + 18) = 0;
  *((_DWORD *)v6 + 12) = 1065353216;
  *((void *)v6 + 7) = 0x1FFFFFFFFLL;
  *((void *)v6 + 12) = 0;
  *((void *)v6 + 13) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 9) = 0;
  v6[88] = 0;
  *((void *)v6 + 10) = 0;
  *((void *)v6 + 3) = &unk_1EE36B910;
  *((void *)v6 + 15) = 0;
  *((void *)v6 + 16) = 0;
  v6[144] = 0;
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v6 + 17);
    v7[5].__shared_owners_ = v9;
    v7[5].__shared_weak_owners_ = v10;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    *((void *)v6 + 16) = v9;
    *((void *)v6 + 17) = 0;
  }
  int v12 = (void *)a1[2];
  int8x8_t v13 = (int8x8_t)v12[1];
  if (!*(void *)&v13) {
    goto LABEL_22;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = v5;
    if (*(void *)&v13 <= v5) {
      unint64_t v15 = v5 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v13 - 1) & v5;
  }
  long long v16 = *(uint64_t ***)(*v12 + 8 * v15);
  if (!v16 || (int v17 = *v16) == 0) {
LABEL_22:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v18 = v17[1];
    if (v18 == v5) {
      break;
    }
    if (v14.u32[0] > 1uLL)
    {
      if (v18 >= *(void *)&v13) {
        v18 %= *(void *)&v13;
      }
    }
    else
    {
      v18 &= *(void *)&v13 - 1;
    }
    if (v18 != v15) {
      goto LABEL_22;
    }
LABEL_21:
    int v17 = (uint64_t *)*v17;
    if (!v17) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v17 + 4) != v5) {
    goto LABEL_21;
  }
  Espresso::abstract_blob_container::shape(v29, *(void *)(a2 + 24));
  for (uint64_t i = (uint64_t **)v17[5]; i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v20 = a1[3];
    unint64_t v21 = *((int *)i + 4);
    uint64_t v22 = *(void *)(v20 + 56);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v20 + 64) - v22) >> 3) <= v21) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v23 = a1[4] + 136;
    uint64_t v32 = (unsigned __int8 *)(v22 + 24 * (int)v21);
    unint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, v32, (long long **)&v32);
    uint64_t v25 = *((void *)v24 + 5);
    long long v26 = (std::__shared_weak_count *)*((void *)v24 + 6);
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v27 = v8;
    char v28 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, char *, char **))(*(void *)v25 + 16))(v25, v29, &v27);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
  }
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192718A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  nitro::nitro_function::nitro_function(v18);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37E110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE37E110;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__func()
{
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_192718BD8(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *,false>(unint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (int *)result;
  while (2)
  {
    int v12 = a2 - 1;
    int8x8_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v49 = *v12;
                uint64_t v50 = *v13;
                if (*(_DWORD *)(*(void *)(*(void *)a3 + 64) + 8 * v49) < *(_DWORD *)(*(void *)(*(void *)a3 + 64)
                                                                                          + 8 * v50))
                {
                  int *v13 = v49;
                  int *v12 = v50;
                }
                break;
              case 3uLL:
                uint64_t v51 = *(void *)(*(void *)a3 + 64);
                __n128 result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v13, v13 + 1, a2 - 1, v51);
                break;
              case 4uLL:
                __n128 result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v13, v13 + 1, v13 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                uint64_t v52 = v13 + 2;
                uint64_t v53 = v13 + 3;
                __n128 result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v13, v13 + 1, v13 + 2, v13 + 3, a3);
                uint64_t v54 = *v12;
                uint64_t v55 = v13[3];
                uint64_t v56 = *(void *)(*(void *)a3 + 64);
                if (*(_DWORD *)(v56 + 8 * v54) < *(_DWORD *)(v56 + 8 * v55))
                {
                  *uint64_t v53 = v54;
                  int *v12 = v55;
                  uint64_t v57 = *v53;
                  uint64_t v58 = *v52;
                  std::string::size_type v59 = (_DWORD *)(v56 + 8 * v57);
                  if (*v59 < *(_DWORD *)(v56 + 8 * v58))
                  {
                    *uint64_t v52 = v57;
                    *uint64_t v53 = v58;
                    uint64_t v60 = v13[1];
                    if (*v59 < *(_DWORD *)(v56 + 8 * v60))
                    {
                      v13[1] = v57;
                      v13[2] = v60;
                      uint64_t v61 = *v13;
                      if (*v59 < *(_DWORD *)(v56 + 8 * v61))
                      {
                        int *v13 = v57;
                        v13[1] = v61;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 95)
          {
            if (a5)
            {
              if (v13 != a2)
              {
                uint64_t v62 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v63 = *(void *)(*(void *)a3 + 64);
                  uint64_t v64 = 4;
                  std::string::size_type v65 = v13;
                  do
                  {
                    uint64_t v67 = *v65;
                    uint64_t v66 = v65[1];
                    std::string::size_type v65 = v62;
                    std::string v68 = (_DWORD *)(v63 + 8 * v66);
                    if (*v68 < *(_DWORD *)(v63 + 8 * v67))
                    {
                      uint64_t v69 = v64;
                      do
                      {
                        *(int *)((char *)v13 + v69) = v67;
                        uint64_t v70 = v69 - 4;
                        if (v69 == 4)
                        {
                          uint64_t v71 = v13;
                          goto LABEL_78;
                        }
                        uint64_t v67 = *(int *)((char *)v13 + v69 - 8);
                        v69 -= 4;
                      }
                      while (*v68 < *(_DWORD *)(v63 + 8 * v67));
                      uint64_t v71 = (int *)((char *)v13 + v70);
LABEL_78:
                      *uint64_t v71 = v66;
                    }
                    uint64_t v62 = v65 + 1;
                    v64 += 4;
                  }
                  while (v65 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              long long v109 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v110 = *(void *)(*(void *)a3 + 64);
                do
                {
                  uint64_t v112 = *v11;
                  uint64_t v111 = v11[1];
                  uint64_t v11 = v109;
                  uint64_t v113 = (_DWORD *)(v110 + 8 * v111);
                  if (*v113 < *(_DWORD *)(v110 + 8 * v112))
                  {
                    std::string::size_type v114 = v11;
                    do
                    {
                      *std::string::size_type v114 = v112;
                      uint64_t v112 = *(v114 - 2);
                      --v114;
                    }
                    while (*v113 < *(_DWORD *)(v110 + 8 * v112));
                    *std::string::size_type v114 = v111;
                  }
                  long long v109 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v72 = (v15 - 2) >> 1;
              uint64_t v73 = *(void *)a3;
              int64_t v74 = v72;
              do
              {
                int64_t v75 = v74;
                if (v72 >= v74)
                {
                  uint64_t v76 = (2 * v74) | 1;
                  std::string v77 = &v13[v76];
                  __n128 result = *v77;
                  if (2 * v75 + 2 < (uint64_t)v15)
                  {
                    uint64_t v78 = v77[1];
                    uint64_t v81 = *(void *)(v73 + 64);
                    int v79 = *(_DWORD *)(v81 + 8 * (int)result);
                    int v80 = *(_DWORD *)(v81 + 8 * v78);
                    if (v79 >= v80) {
                      __n128 result = result;
                    }
                    else {
                      __n128 result = v78;
                    }
                    if (v79 < v80)
                    {
                      ++v77;
                      uint64_t v76 = 2 * v75 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v81 = *(void *)(v73 + 64);
                  }
                  uint64_t v82 = &v13[v75];
                  uint64_t v83 = *v82;
                  uint64_t v84 = (_DWORD *)(v81 + 8 * v83);
                  if (*(_DWORD *)(v81 + 8 * (int)result) >= *v84)
                  {
                    do
                    {
                      uint64_t v85 = v77;
                      *uint64_t v82 = result;
                      if (v72 < v76) {
                        break;
                      }
                      uint64_t v86 = (2 * v76) | 1;
                      std::string v77 = &v13[v86];
                      uint64_t v76 = 2 * v76 + 2;
                      __n128 result = *v77;
                      if (v76 < (uint64_t)v15)
                      {
                        uint64_t v87 = v77[1];
                        int v88 = *(_DWORD *)(v81 + 8 * (int)result);
                        int v89 = *(_DWORD *)(v81 + 8 * v87);
                        __n128 result = v88 >= v89 ? result : v87;
                        if (v88 >= v89) {
                          uint64_t v76 = v86;
                        }
                        else {
                          ++v77;
                        }
                      }
                      else
                      {
                        uint64_t v76 = v86;
                      }
                      uint64_t v82 = v85;
                    }
                    while (*(_DWORD *)(v81 + 8 * (int)result) >= *v84);
                    int *v85 = v83;
                  }
                }
                int64_t v74 = v75 - 1;
              }
              while (v75);
              uint64_t v90 = (unint64_t)v14 >> 2;
              do
              {
                uint64_t v91 = 0;
                int v92 = *v13;
                uint64_t v93 = *(void *)a3;
                int v94 = v13;
                do
                {
                  uint64_t v95 = &v94[v91];
                  int v98 = v95[1];
                  std::string::size_type v96 = v95 + 1;
                  int v97 = v98;
                  uint64_t v99 = (2 * v91) | 1;
                  uint64_t v91 = 2 * v91 + 2;
                  if (v91 >= v90)
                  {
                    uint64_t v91 = v99;
                  }
                  else
                  {
                    __n128 result = v96[1];
                    if (*(_DWORD *)(*(void *)(v93 + 64) + 8 * v97) >= *(_DWORD *)(*(void *)(v93 + 64) + 8 * result))
                    {
                      uint64_t v91 = v99;
                    }
                    else
                    {
                      int v97 = v96[1];
                      ++v96;
                    }
                  }
                  int *v94 = v97;
                  int v94 = v96;
                }
                while (v91 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
                if (v96 == --a2)
                {
                  int *v96 = v92;
                }
                else
                {
                  int *v96 = *a2;
                  *a2 = v92;
                  uint64_t v100 = (char *)v96 - (char *)v13 + 4;
                  if (v100 >= 5)
                  {
                    unint64_t v101 = (((unint64_t)v100 >> 2) - 2) >> 1;
                    std::string::size_type v102 = &v13[v101];
                    uint64_t v103 = *v102;
                    uint64_t v104 = *v96;
                    uint64_t v105 = *(void *)(v93 + 64);
                    uint64_t v106 = (_DWORD *)(v105 + 8 * v104);
                    if (*(_DWORD *)(v105 + 8 * v103) < *v106)
                    {
                      do
                      {
                        long long v107 = v102;
                        int *v96 = v103;
                        if (!v101) {
                          break;
                        }
                        unint64_t v101 = (v101 - 1) >> 1;
                        std::string::size_type v102 = &v13[v101];
                        uint64_t v103 = *v102;
                        __n128 result = *v106;
                        std::string::size_type v96 = v107;
                      }
                      while (*(_DWORD *)(v105 + 8 * v103) < (int)result);
                      *long long v107 = v104;
                    }
                  }
                }
              }
              while (v90-- > 2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          int v17 = &v13[v15 >> 1];
          uint64_t v18 = *(void *)(*(void *)a3 + 64);
          if ((unint64_t)v14 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v11, &v11[v15 >> 1], a2 - 1, v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v11 + 1, v17 - 1, a2 - 2, *(void *)(*(void *)a3 + 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v11 + 2, &v11[v16 + 1], a2 - 3, *(void *)(*(void *)a3 + 64));
            __n128 result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v17 - 1, v17, &v11[v16 + 1], *(void *)(*(void *)a3 + 64));
            int v19 = *v11;
            int *v11 = *v17;
            *int v17 = v19;
          }
          else
          {
            __n128 result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(&v11[v15 >> 1], v11, a2 - 1, v18);
          }
          --a4;
          int v20 = *v11;
          uint64_t v21 = *(void *)a3;
          if (a5) {
            break;
          }
          uint64_t v22 = *(void *)(v21 + 64);
          int v23 = *(_DWORD *)(v22 + 8 * v20);
          if (*(_DWORD *)(v22 + 8 * *(v11 - 1)) < v23) {
            goto LABEL_13;
          }
          if (v23 >= *(_DWORD *)(v22 + 8 * *v12))
          {
            uint64_t v40 = v11 + 1;
            do
            {
              int8x8_t v13 = v40;
              if (v40 >= a2) {
                break;
              }
              ++v40;
            }
            while (v23 >= *(_DWORD *)(v22 + 8 * *v13));
          }
          else
          {
            int8x8_t v13 = v11;
            do
            {
              uint64_t v39 = v13[1];
              ++v13;
            }
            while (v23 >= *(_DWORD *)(v22 + 8 * v39));
          }
          long long v41 = a2;
          if (v13 < a2)
          {
            long long v41 = a2;
            do
              uint64_t v42 = *--v41;
            while (v23 < *(_DWORD *)(v22 + 8 * v42));
          }
          if (v13 < v41)
          {
            int v43 = *v13;
            int v44 = *v41;
            do
            {
              int *v13 = v44;
              *long long v41 = v43;
              int v45 = *(_DWORD *)(v22 + 8 * v20);
              do
              {
                uint64_t v46 = v13[1];
                ++v13;
                int v43 = v46;
              }
              while (v45 >= *(_DWORD *)(v22 + 8 * v46));
              do
              {
                uint64_t v47 = *--v41;
                int v44 = v47;
              }
              while (v45 < *(_DWORD *)(v22 + 8 * v47));
            }
            while (v13 < v41);
          }
          long long v48 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            int *v11 = *v48;
          }
          a5 = 0;
          *long long v48 = v20;
        }
        uint64_t v22 = *(void *)(v21 + 64);
        int v23 = *(_DWORD *)(v22 + 8 * v20);
LABEL_13:
        unint64_t v24 = v11;
        do
        {
          uint64_t v25 = v24;
          uint64_t v27 = v24[1];
          ++v24;
          int v26 = v27;
        }
        while (*(_DWORD *)(v22 + 8 * v27) < v23);
        char v28 = a2;
        if (v25 == v11)
        {
          char v28 = a2;
          do
          {
            if (v24 >= v28) {
              break;
            }
            uint64_t v30 = *--v28;
          }
          while (*(_DWORD *)(v22 + 8 * v30) >= v23);
        }
        else
        {
          do
            uint64_t v29 = *--v28;
          while (*(_DWORD *)(v22 + 8 * v29) >= v23);
        }
        if (v24 < v28)
        {
          int v31 = *v28;
          int v32 = v26;
          int v33 = v24;
          std::string::size_type v34 = v28;
          do
          {
            *int v33 = v31;
            int *v34 = v32;
            int v35 = *(_DWORD *)(v22 + 8 * v20);
            do
            {
              uint64_t v25 = v33;
              uint64_t v36 = v33[1];
              ++v33;
              int v32 = v36;
            }
            while (*(_DWORD *)(v22 + 8 * v36) < v35);
            do
            {
              uint64_t v37 = *--v34;
              int v31 = v37;
            }
            while (*(_DWORD *)(v22 + 8 * v37) >= v35);
          }
          while (v33 < v34);
        }
        if (v25 != v11) {
          int *v11 = *v25;
        }
        int *v25 = v20;
        if (v24 >= v28) {
          break;
        }
LABEL_32:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *,false>(v11, v25, a3, a4, a5 & 1);
        a5 = 0;
        int8x8_t v13 = v25 + 1;
      }
      BOOL v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v11, v25, a3);
      int8x8_t v13 = v25 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v25 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v38) {
        goto LABEL_32;
      }
    }
    a2 = v25;
    if (!v38) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  int v6 = *(_DWORD *)(a4 + 8 * v4);
  uint64_t v7 = (_DWORD *)(a4 + 8 * v5);
  uint64_t v8 = *a3;
  int v9 = *(_DWORD *)(a4 + 8 * v8);
  if (v6 >= *v7)
  {
    if (v9 < v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(_DWORD *)(a4 + 8 * v10) < *(_DWORD *)(a4 + 8 * v11))
      {
        uint64_t *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v6)
    {
      uint64_t *result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(_DWORD *)(a4 + 8 * v12) >= *v7) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      uint64_t *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a2, a3, *(void *)(*(void *)a5 + 64));
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = *(void *)(*(void *)a5 + 64);
  if (*(_DWORD *)(v13 + 8 * v11) < *(_DWORD *)(v13 + 8 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(_DWORD *)(v13 + 8 * v14) < *(_DWORD *)(v13 + 8 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(_DWORD *)(v13 + 8 * v16) < *(_DWORD *)(v13 + 8 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(_DWORD *)(*(void *)(*(void *)a3 + 64) + 8 * v8) < *(_DWORD *)(*(void *)(*(void *)a3 + 64)
                                                                               + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 64));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = *(void *)(*(void *)a3 + 64);
      if (*(_DWORD *)(v25 + 8 * v23) < *(_DWORD *)(v25 + 8 * v24))
      {
        int *v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        char v28 = (_DWORD *)(v25 + 8 * v26);
        if (*v28 < *(_DWORD *)(v25 + 8 * v27))
        {
          int *v21 = v26;
          int *v22 = v27;
          uint64_t v29 = a1[1];
          if (*v28 < *(_DWORD *)(v25 + 8 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (*v28 < *(_DWORD *)(v25 + 8 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 64));
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *(void *)(*(void *)a3 + 64);
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    uint64_t v17 = (_DWORD *)(v13 + 8 * v15);
    if (*v17 < *(_DWORD *)(v13 + 8 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (*v17 >= *(_DWORD *)(v13 + 8 * v16))
        {
          int v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      int v20 = a1;
LABEL_13:
      *int v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>(char *a1, void *a2, void *a3)
{
}

void *std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso24force_aliased_blob_index45map_global_to_blob_loaded_from_or_store_to_itERNSt3__113unordered_mapIiiNS1_4hashIiEENS1_8equal_toIiEENS1_9allocatorINS1_4pairIKiiEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v3[2] + 16), a2);
  if (v4)
  {
    int v39 = *((_DWORD *)v4 + 10);
    int v5 = v39;
    memset(v37, 0, sizeof(v37));
    int v38 = 1065353216;
    uint64_t v6 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v3 + 10), v39, &v39);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__move_assign((uint64_t)(v6 + 3), (uint64_t *)v37);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v37);
    uint64_t v7 = (void *)v3[2];
    uint64_t v8 = v7[7];
    if (0xAAAAAAAAAAAAAAABLL * ((v7[8] - v8) >> 3) <= v5) {
      goto LABEL_23;
    }
    uint64_t v9 = (unint64_t **)(v8 + 24 * v5);
    uint64_t v10 = *v9;
    int v32 = v9[1];
    uint64_t v11 = 0xFFFFFFFFLL;
    if (*v9 != v32)
    {
      do
      {
        std::string::size_type v34 = v10;
        unint64_t v36 = *v10;
        uint64_t v12 = *v3 + 96;
        *(void *)&v37[0] = &v36;
        uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v12, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)v37);
        uint64_t v14 = (unsigned __int8 *)v13[3];
        uint64_t v15 = (unsigned __int8 *)v13[4];
        while (v14 != v15)
        {
          uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v3[1] + 16), v14);
          if (!v16) {
LABEL_22:
          }
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          LODWORD(v37[0]) = *((_DWORD *)v16 + 10);
          int v17 = v37[0];
          uint64_t v18 = LODWORD(v37[0]);
          if (v11 != -1)
          {
            *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(*(void *)(a1 + 16), v37[0], v37)+ 5) = v11;
            uint64_t v18 = v11;
          }
          uint64_t v19 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v3 + 10), v5, &v39);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v19 + 3), v17, v17);
          *(void *)(v3[7] + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          v14 += 24;
          uint64_t v11 = v18;
        }
        uint64_t v10 = v34 + 1;
      }
      while (v34 + 1 != v32);
      uint64_t v7 = (void *)v3[2];
    }
    uint64_t v21 = v7 + 10;
    uint64_t v20 = v7[10];
    if (0xAAAAAAAAAAAAAAABLL * ((v21[1] - v20) >> 3) <= v5) {
LABEL_23:
    }
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    uint64_t v22 = (unint64_t **)(v20 + 24 * v5);
    uint64_t v23 = *v22;
    int v33 = v22[1];
    if (*v22 != v33)
    {
      do
      {
        int v35 = v23;
        unint64_t v36 = *v23;
        uint64_t v24 = *v3 + 56;
        *(void *)&v37[0] = &v36;
        uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v24, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)v37);
        uint64_t v26 = (unsigned __int8 *)v25[3];
        uint64_t v27 = (unsigned __int8 *)v25[4];
        while (v26 != v27)
        {
          char v28 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v3[1] + 16), v26);
          if (!v28) {
            goto LABEL_22;
          }
          LODWORD(v37[0]) = *((_DWORD *)v28 + 10);
          int v29 = v37[0];
          uint64_t v30 = LODWORD(v37[0]);
          if (v11 != -1)
          {
            *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(*(void *)(a1 + 16), v37[0], v37)+ 5) = v11;
            uint64_t v30 = v11;
          }
          int v31 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v3 + 10), v5, &v39);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v31 + 3), v29, v29);
          *(void *)(v3[7] + (((unint64_t)v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
          v26 += 24;
          uint64_t v11 = v30;
        }
        uint64_t v23 = v35 + 1;
      }
      while (v35 + 1 != v33);
    }
  }
}

void sub_192719BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*v12;
          if (*v12)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = v12;
            int v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *uint64_t v23 = *v29;
                  *int v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  int v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                uint64_t v23 = v29;
                int v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        std::string::size_type v34 = *(void **)a1;
        *(void *)a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  int v31 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t i = (uint64_t *)v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    void *v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    int v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_192719FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        int v5 = (void *)*v4;
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  unint64_t v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    void *v11 = 0;
    v11[1] = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

__n128 std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37C698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_global_name_indexing>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_global_name_indexing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388340;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_global_name_indexing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::vector<Espresso::net *>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
    int v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void Espresso::pass_graph_coloring::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_graph_coloring::~pass_graph_coloring(Espresso::pass_graph_coloring *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>(char *a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'Espresso::ANECompilerEngine::convolution_kernel::weights_helper_weights_shape(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 70) + 464))();
}

void non-virtual thunk to'Espresso::ANECompilerEngine::convolution_kernel::clear_weights(Espresso::ANECompilerEngine::convolution_kernel *this)
{
}

void Espresso::ANECompilerEngine::convolution_kernel::clear_weights(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  Espresso::generic_convolution_kernel::clear_weights(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 98);
  *(_OWORD *)((char *)this + 776) = 0u;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void non-virtual thunk to'Espresso::ANECompilerEngine::convolution_kernel::~convolution_kernel(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  uint64_t v2 = (void **)((char *)this - 560);
  *((void *)this - 70) = &unk_1EE342978;
  *(void *)this = &unk_1EE342C08;
  int64_t v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (void **)((char *)this - 560);
  *((void *)this - 70) = &unk_1EE342978;
  *(void *)this = &unk_1EE342C08;
  int64_t v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::convolution_kernel::compile(Espresso::ANECompilerEngine::convolution_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::convolution_kernel::compile(Espresso::ANECompilerEngine::convolution_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4
    || (unint64_t v7 = std::__shared_weak_count::lock(v4)) == 0
    || (uint64_t v8 = (const Espresso::net *)*((void *)a2 + 1)) == 0)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*((void *)v8 + 72)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v108.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)v108.__r_.__value_.__l.__data_, (long long **)&v108);
  uint64_t v10 = (const void *)*((void *)v9 + 5);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v84 = a2;
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, (long long **)&v108);
  uint64_t v13 = (_DWORD *)*((void *)v12 + 5);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((void *)a3 + 7) - *((void *)a3 + 6) == 48)
  {
    int v80 = v14;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    int v75 = *((_DWORD *)this + 83);
    int v76 = *((_DWORD *)this + 82);
    int v15 = *((_DWORD *)this + 86);
    unsigned int v81 = *((_DWORD *)this + 88);
    unsigned int v82 = *((_DWORD *)this + 89);
    int v16 = *((__int16 *)this + 188);
    int v72 = *((_DWORD *)this + 91);
    unsigned int v73 = *((__int16 *)this + 192);
    unsigned int v74 = *((__int16 *)this + 193);
    LODWORD(v83) = *((__int16 *)this + 195);
    HIDWORD(v83) = *((__int16 *)this + 194);
    if (v10)
    {
      unint64_t v18 = 0;
      if (v17 && v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v18 = v11;
      }
      if (v13) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v17 = 0;
      unint64_t v18 = 0;
      if (v13)
      {
LABEL_15:
        if (v13 && v80)
        {
          atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string v77 = v80;
        }
        else
        {
          std::string v77 = 0;
        }
        goto LABEL_30;
      }
    }
    std::string v77 = 0;
LABEL_30:
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    unint64_t v107 = 0;
    uint64_t v78 = v18;
    int v79 = v11;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v93, (id *)a3);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v28 = *((void *)a3 + 6);
    if (*(char *)(v28 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(v28 + 24), *(void *)(v28 + 32));
    }
    else {
      std::string v120 = *(std::string *)(v28 + 24);
    }
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v120.__r_.__value_.__l.__size_;
    }
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v31 = &v120;
      }
      else {
        int v31 = (std::string *)v120.__r_.__value_.__r.__words[0];
      }
      memmove(p_str, v31, size);
    }
    strcpy((char *)p_str + size, "_rasterizer");
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v108.__r_.__value_.__l.__data_, (id *)a3);
    std::string::operator=(&v108, &__str);
    unint64_t v32 = v110;
    for (uint64_t i = v111; i != v32; --i)
    {
      if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(i[-1].__r_.__value_.__l.__data_);
      }
    }
    uint64_t v111 = v32;
    if ((unint64_t)v32 >= v112)
    {
      uint64_t v11 = v79;
      int v35 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v110, (uint64_t)&v120);
    }
    else
    {
      uint64_t v11 = v79;
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v32, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v34 = *(_OWORD *)&v120.__r_.__value_.__l.__data_;
        v32->__r_.__value_.__r.__words[2] = v120.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v34;
      }
      int v35 = v32 + 1;
    }
    char v36 = v116;
    uint64_t v111 = v35;
    long long v116 = @"KernelRasterizer";

    int v119 = 1;
    int v118 = v15;
    id v37 = v117;
    id v117 = 0;

    Espresso::ANECompilerEngine::compiler::add_unit(v84, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v108);
    if (v114 < 0) {
      operator delete(__p);
    }
    v121[0] = (void **)&v110;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v121);
    v121[0] = (void **)v109;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v121);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    nitro::nitro_function::nitro_function(v7);
    std::string::operator=((std::string *)(v98[0] + 24), &__str);
    int v38 = v101;
    unint64_t v101 = @"CrossCorrelation";

    int v104 = 1;
    int v103 = v15;
    switch(v16)
    {
      case 4:
        goto LABEL_63;
      case 2:
        uint64_t v45 = 0;
        uint64_t v43 = 0;
        uint64_t v83 = 0;
        break;
      case 1:
LABEL_63:
        int v39 = v13[3] + v82 + ~v17[3];
        unsigned int v40 = v39 & ~(v39 >> 31);
        int v41 = v13[2] + v81 + ~v17[2];
        unsigned int v42 = v41 & ~(v41 >> 31);
        uint64_t v43 = v42 >> 1;
        uint64_t v44 = v42 - (v42 >> 1);
        if (v16 == 1)
        {
          uint64_t v45 = v43;
          uint64_t v43 = v44;
          LODWORD(v83) = v40 - (v40 >> 1);
          HIDWORD(v83) = v40 >> 1;
        }
        else
        {
          LODWORD(v83) = v40 >> 1;
          HIDWORD(v83) = v40 - (v40 >> 1);
          uint64_t v45 = v44;
        }
        break;
      default:
        uint64_t v45 = v73;
        uint64_t v43 = v74;
        break;
    }
    uint64_t v46 = objc_opt_new();
    uint64_t v47 = [NSNumber numberWithInt:v82];
    [v46 setObject:v47 forKeyedSubscript:@"TemplateHeight"];

    long long v48 = [NSNumber numberWithInt:v81];
    [v46 setObject:v48 forKeyedSubscript:@"TemplateWidth"];

    uint64_t v49 = [NSNumber numberWithInt:HIDWORD(v83)];
    [v46 setObject:v49 forKeyedSubscript:@"PadTop"];

    uint64_t v50 = [NSNumber numberWithInt:v83];
    [v46 setObject:v50 forKeyedSubscript:@"PadBot"];

    uint64_t v51 = [NSNumber numberWithInt:v45];
    [v46 setObject:v51 forKeyedSubscript:@"PadLeft"];

    uint64_t v52 = [NSNumber numberWithInt:v43];
    [v46 setObject:v52 forKeyedSubscript:@"PadRight"];

    objc_storeStrong(&v102, v46);
    uint64_t v53 = v106;
    if ((unint64_t)v106 >= v107)
    {
      unint64_t v55 = 0x8E38E38E38E38E39 * (((uint64_t)v106 - v105) >> 4);
      if (v55 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v56 = 0x1C71C71C71C71C72 * ((uint64_t)(v107 - v105) >> 4);
      if (v56 <= v55 + 1) {
        unint64_t v56 = v55 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v107 - v105) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v57 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v57 = v56;
      }
      v109[1] = &v107;
      if (v57) {
        unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v57);
      }
      else {
        uint64_t v58 = 0;
      }
      v108.__r_.__value_.__r.__words[0] = v57;
      v108.__r_.__value_.__l.__size_ = v57 + 144 * v55;
      v108.__r_.__value_.__r.__words[2] = v108.__r_.__value_.__l.__size_;
      v109[0] = v57 + 144 * v58;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v108.__r_.__value_.__l.__size_, (uint64_t)&v93);
      v108.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v105, &v108);
      uint64_t v54 = v106;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v108);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v106, (uint64_t)&v93);
      uint64_t v54 = v53 + 6;
    }
    uint64_t v106 = v54;

    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }

    uint64_t v14 = v80;
    if (v99 < 0) {
      operator delete((void *)v98[4]);
    }
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    if (SHIBYTE(v95) < 0) {
      operator delete(v93);
    }
    if (v76)
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v108.__r_.__value_.__l.__data_, (id *)a3);
      std::string::size_type v59 = v116;
      long long v116 = @"Neuron";

      uint64_t v60 = objc_opt_new();
      [v60 setObject:@"ReLU" forKeyedSubscript:@"Type"];
      objc_storeStrong(&v117, v60);
      p_data = (void **)&v111[-1].__r_.__value_.__l.__data_;
      if (SHIBYTE(v111[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(*p_data);
      }
      uint64_t v111 = (std::string *)p_data;
      uint64_t v62 = v106;
      if ((unint64_t)v106 < v107)
      {
LABEL_95:
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v106, (uint64_t)&v108);
        std::string::size_type v65 = v62 + 6;
LABEL_124:
        uint64_t v106 = v65;

        if (v114 < 0) {
          operator delete(__p);
        }
        uint64_t v93 = &v110;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        uint64_t v93 = v109;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
        goto LABEL_128;
      }
      unint64_t v66 = 0x8E38E38E38E38E39 * (((uint64_t)v106 - v105) >> 4);
      if (v66 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v67 = 0x1C71C71C71C71C72 * ((uint64_t)(v107 - v105) >> 4);
      if (v67 <= v66 + 1) {
        unint64_t v67 = v66 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v107 - v105) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v68 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v68 = v67;
      }
      int v97 = &v107;
      if (!v68)
      {
        uint64_t v71 = 0;
        goto LABEL_123;
      }
    }
    else
    {
      if (!v75)
      {
        if (v72 != -1) {
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
        }
LABEL_128:
        (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 70)
                                                                                           + 32))((char *)this + 560, v84, &v105);
        v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
        if (v77) {
          nitro::nitro_function::nitro_function(v77);
        }
        uint64_t v69 = v78;
        if (v78) {
          goto LABEL_131;
        }
        goto LABEL_132;
      }
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v108.__r_.__value_.__l.__data_, (id *)a3);
      uint64_t v63 = v116;
      long long v116 = @"Neuron";

      uint64_t v60 = objc_opt_new();
      [v60 setObject:@"Tanh" forKeyedSubscript:@"Type"];
      objc_storeStrong(&v117, v60);
      uint64_t v64 = (void **)&v111[-1].__r_.__value_.__l.__data_;
      if (SHIBYTE(v111[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(*v64);
      }
      uint64_t v111 = (std::string *)v64;
      uint64_t v62 = v106;
      if ((unint64_t)v106 < v107) {
        goto LABEL_95;
      }
      unint64_t v66 = 0x8E38E38E38E38E39 * (((uint64_t)v106 - v105) >> 4);
      if (v66 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v70 = 0x1C71C71C71C71C72 * ((uint64_t)(v107 - v105) >> 4);
      if (v70 <= v66 + 1) {
        unint64_t v70 = v66 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v107 - v105) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v68 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v68 = v70;
      }
      int v97 = &v107;
      if (!v68)
      {
        uint64_t v71 = 0;
        goto LABEL_123;
      }
    }
    unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v68);
LABEL_123:
    uint64_t v93 = (void *)v68;
    int v94 = (std::string *)(v68 + 144 * v66);
    uint64_t v95 = v94;
    unint64_t v96 = v68 + 144 * v71;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v94, (uint64_t)&v108);
    v95 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v105, &v93);
    std::string::size_type v65 = v106;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v93);
    goto LABEL_124;
  }
  v91[0] = v8;
  v91[1] = (const Espresso::net *)v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v19 = *((_OWORD *)this + 28);
  v89[8] = *((_OWORD *)this + 27);
  v89[9] = v19;
  uint64_t v90 = *((void *)this + 58);
  long long v20 = *((_OWORD *)this + 24);
  v89[4] = *((_OWORD *)this + 23);
  v89[5] = v20;
  long long v21 = *((_OWORD *)this + 26);
  v89[6] = *((_OWORD *)this + 25);
  v89[7] = v21;
  long long v22 = *((_OWORD *)this + 20);
  v89[0] = *((_OWORD *)this + 19);
  v89[1] = v22;
  long long v23 = *((_OWORD *)this + 22);
  v89[2] = *((_OWORD *)this + 21);
  v89[3] = v23;
  if (v10
  {
    uint64_t v87 = v24;
    int v88 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint8x8_t v25 = v11;
      if (!v13) {
        goto LABEL_105;
      }
    }
    else
    {
      uint8x8_t v25 = 0;
      if (!v13) {
        goto LABEL_105;
      }
    }
  }
  else
  {
    uint8x8_t v25 = 0;
    uint64_t v87 = 0;
    int v88 = 0;
    if (!v13)
    {
LABEL_105:
      uint8x8_t v27 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      goto LABEL_106;
    }
  }
  if (!v26) {
    goto LABEL_105;
  }
  uint64_t v85 = v26;
  uint64_t v86 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    uint8x8_t v27 = v14;
  }
  else
  {
    uint8x8_t v27 = 0;
  }
LABEL_106:
  Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::convolution_kernel *>((uint64_t)this, (uint64_t)a2, v91, (uint64_t)v89, (id *)a3, (uint64_t *)&v87, (uint64_t *)&v85);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v25)
  {
    uint64_t v69 = v25;
LABEL_131:
    nitro::nitro_function::nitro_function(v69);
  }
LABEL_132:
  nitro::nitro_function::nitro_function(v7);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_19271B280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&a50);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a71);
  std::string __p = &a68;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  nitro::nitro_function::nitro_function(v71);
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  nitro::nitro_function::nitro_function(v71);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::convolution_kernel *>(uint64_t a1, uint64_t a2, const Espresso::net **a3, uint64_t a4, id *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v650 = *MEMORY[0x1E4F143B8];
  int v532 = *(unsigned __int8 *)(a2 + 552);
  long long v616 = 0u;
  long long v617 = 0u;
  long long v614 = 0u;
  long long v615 = 0u;
  long long v612 = 0u;
  long long v613 = 0u;
  long long v610 = 0u;
  long long v611 = 0u;
  long long v608 = 0u;
  long long v609 = 0u;
  long long v606 = 0u;
  long long v607 = 0u;
  uint64_t v8 = *a3;
  unint64_t v7 = (std::__shared_weak_count *)a3[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v602, *a6);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v605, v8, (const Espresso::layer_shape *)v602, 1);
  if (__p)
  {
    v604 = __p;
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v10 = *a3;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v598, *a7);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v601, v10, (const Espresso::layer_shape *)v598, 1);
  if (v599)
  {
    v600 = v599;
    operator delete(v599);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a3;
  uint64_t v12 = a5[6];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)*a3 + 45), v12))
  {
    *(void *)long long buf = v12;
    uint64_t v13 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v11 + 44, v12, (uint64_t)&std::piecewise_construct, (long long **)buf);
    *(_OWORD *)&v627.__r_.__value_.__l.__data_ = *(_OWORD *)(v13 + 56);
    v628[1] = 0;
    v627.__r_.__value_.__r.__words[2] = 0;
    v628[0] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v627.__r_.__value_.__r.__words[2], *((const void **)v13 + 9), *((void *)v13 + 10), (uint64_t)(*((void *)v13 + 10) - *((void *)v13 + 9)) >> 2);
    if (LODWORD(v627.__r_.__value_.__r.__words[1]) == -1) {
      int v14 = 1;
    }
    else {
      int v14 = v627.__r_.__value_.__r.__words[1];
    }
    if (v627.__r_.__value_.__r.__words[2])
    {
      v628[0] = *((void *)&v627.__r_.__value_.__l + 2);
      operator delete((void *)v627.__r_.__value_.__r.__words[2]);
    }
    uint64_t v11 = *a3;
  }
  else
  {
    int v14 = 1;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v11 + 472);
  v533 = __int16 v597 = 0;
  Espresso::ANECompilerEngine::query_dilation_options(a4, 0, v14, (char *)&v597 + 1, &v597, v533);
  int v16 = *(_DWORD *)(a4 + 48);
  int v15 = *(_DWORD *)(a4 + 52);
  int v17 = *(__int16 *)(a4 + 96);
  BOOL v18 = v17 < 2;
  int v19 = *(__int16 *)(a4 + 98);
  if (HIBYTE(v597))
  {
    BOOL v20 = v19 < 2;
  }
  else
  {
    BOOL v18 = 1;
    BOOL v20 = 1;
  }
  if (v18) {
    int v21 = *(_DWORD *)(a4 + 48);
  }
  else {
    int v21 = (v16 - 1) * v17 + 1;
  }
  unsigned int v539 = v21;
  if (v20) {
    int v22 = *(_DWORD *)(a4 + 52);
  }
  else {
    int v22 = (v15 - 1) * v19 + 1;
  }
  unsigned int v537 = v22;
  BOOL v23 = v17 >= 2 && v16 > 1 || v19 > 1 && v15 > 1;
  BOOL v541 = v23;
  uint8x8_t v25 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v542 = [v25 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  BOOL v26 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse((uint64_t)*a3 + 472, v542)
     || *(unsigned char *)(a1 + 688) != 0;
  BOOL v535 = v26;
  uint64_t v27 = (uint64_t)a5[6];
  if ((char *)a5[7] - v27 != (unsigned char *)24)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v28 = *a6;
  if (!*a6)
  {
    if (*(char *)(v27 + 23) < 0) {
      uint64_t v27 = *(void *)v27;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v27);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v499 = (uint64_t)a5;
    }
    else {
      uint64_t v499 = (uint64_t)*a5;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v499);
  }
  v595 = 0;
  uint64_t v594 = 0;
  unint64_t v596 = 0;
  if (a1
  {
    int v29 = objc_opt_new();
    [v29 setObject:@"NCHW" forKeyedSubscript:@"Mode"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v627.__r_.__value_.__l.__data_, a5);
    unint64_t v30 = v636;
    v636 = @"Flatten";

    objc_storeStrong(&v637, v29);
    unint64_t v31 = 0x8E38E38E38E38E39 * (((uint64_t)v595 - v594) >> 4);
    if (v31 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v32 = 0x1C71C71C71C71C72 * ((uint64_t)(v596 - v594) >> 4);
    if (v32 <= v31 + 1) {
      unint64_t v32 = v31 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v596 - v594) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v33 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v33 = v32;
    }
    *((void *)&v641 + 1) = &v596;
    if (v33) {
      unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v33);
    }
    else {
      uint64_t v34 = 0;
    }
    *(void *)long long buf = v33;
    *(void *)&buf[8] = v33 + 16 * (((uint64_t)v595 - v594) >> 4);
    *(void *)&buf[16] = *(void *)&buf[8];
    *(void *)&long long v641 = v33 + 144 * v34;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v627);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v594, buf);
    int v35 = v595;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    v595 = v35;

    if (v634 < 0) {
      operator delete(v633);
    }
    *(void *)long long buf = &v630;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v628;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v627.__r_.__value_.__l.__data_);
    }
  }
  char v36 = objc_opt_new();
  [v36 setObject:@"Dense" forKeyedSubscript:@"KernelMode"];
  if (*(unsigned char *)(a1 + 809))
  {
    [v36 setObject:@"Unity" forKeyedSubscript:@"KernelMode"];
    [v36 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  }
  id v37 = [NSNumber numberWithInt:v539];
  [v36 setObject:v37 forKeyedSubscript:@"KernelWidth"];

  int v38 = [NSNumber numberWithInt:v537];
  [v36 setObject:v38 forKeyedSubscript:@"KernelHeight"];

  int v39 = *(_DWORD *)(a4 + 116);
  if (v39 >= 2 && v39 == *(_DWORD *)(a4 + 44) && v39 == *(_DWORD *)(a4 + 40))
  {
    [v36 setObject:@"ChannelWiseConv" forKeyedSubscript:@"Type"];
    unsigned int v40 = @"ChannelWiseDilatedConv";
  }
  else
  {
    [v36 setObject:@"Conv" forKeyedSubscript:@"Type"];
    unsigned int v40 = @"DilatedConv";
  }
  v531 = v40;
  int v534 = *(_DWORD *)(a4 + 116);
  [v36 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"KernelGroupReuse"];
  if (*(unsigned char *)(a1 + 808)) {
    [v36 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"KernelGroupReuse"];
  }
  if (!*(unsigned char *)(a1 + 809))
  {
    uint64_t v58 = (std::__shared_weak_count *)a3[1];
    v592 = *a3;
    v593 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v627, "post_scale");
    std::string::size_type v59 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
    BOOL v60 = ((*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(a1 + 560, &v592) & 0x80000000) == 0
       || *(void *)(a1 + 624) != 0;
    if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v627.__r_.__value_.__l.__data_);
    }
    if (v593) {
      nitro::nitro_function::nitro_function(v593);
    }
    if ((_BYTE)v597 || !HIBYTE(v597))
    {
LABEL_107:
      uint64_t v63 = (std::__shared_weak_count *)a3[1];
      v590 = *a3;
      v591 = v63;
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v627, "W_S8");
      uint64_t v64 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v59, &v590);
      if ((int)v64 < 0) {
        BOOL v60 = 0;
      }
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v627.__r_.__value_.__l.__data_);
      }
      if (v591) {
        nitro::nitro_function::nitro_function(v591);
      }
      if (v60)
      {
        std::string::size_type v65 = (std::__shared_weak_count *)a3[1];
        v588 = *a3;
        v589 = v65;
        if (v65) {
          atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_S8");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v627, v59, &v588);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v589) {
          nitro::nitro_function::nitro_function(v589);
        }
        unint64_t v66 = [NSNumber numberWithInt:v64];
        [v36 setObject:v66 forKeyedSubscript:@"KernelOffset"];

        unint64_t v67 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v627.__r_.__value_.__l.__data_, (const void *)v627.__r_.__value_.__r.__words[2]));
        [v36 setObject:v67 forKeyedSubscript:@"KernelIndex"];

        [v36 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
        if (a1) {
          unint64_t v68 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          unint64_t v68 = 0;
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v68, v627.__r_.__value_.__l.__data_);
        goto LABEL_74;
      }
      uint64_t v69 = (std::__shared_weak_count *)a3[1];
      v586 = *a3;
      v587 = v69;
      if (v69) {
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v627, "W_int8");
      uint64_t v70 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v59, &v586);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v627.__r_.__value_.__l.__data_);
      }
      if (v587) {
        nitro::nitro_function::nitro_function(v587);
      }
      if ((v70 & 0x80000000) == 0)
      {
        uint64_t v71 = (std::__shared_weak_count *)a3[1];
        v584 = *a3;
        v585 = v71;
        if (v71) {
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_int8");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v627, v59, &v584);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v585) {
          nitro::nitro_function::nitro_function(v585);
        }
        int v72 = [NSNumber numberWithInt:v70];
        [v36 setObject:v72 forKeyedSubscript:@"KernelOffset"];

        unsigned int v73 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v627.__r_.__value_.__l.__data_, (const void *)v627.__r_.__value_.__r.__words[2]));
        [v36 setObject:v73 forKeyedSubscript:@"KernelIndex"];

        [v36 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
        if (a1) {
          unsigned int v74 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          unsigned int v74 = 0;
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v74, v627.__r_.__value_.__l.__data_);
        goto LABEL_74;
      }
      id v100 = (std::__shared_weak_count *)a3[1];
      v582 = *a3;
      v583 = v100;
      if (v100) {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v627, "blob_weights");
      uint64_t v101 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v59, &v582);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v627.__r_.__value_.__l.__data_);
      }
      if (v583) {
        nitro::nitro_function::nitro_function(v583);
      }
      if ((v101 & 0x80000000) == 0)
      {
        id v102 = (std::__shared_weak_count *)a3[1];
        v580 = *a3;
        v581 = v102;
        if (v102) {
          atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v627, v59, &v580);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v581) {
          nitro::nitro_function::nitro_function(v581);
        }
        int v103 = [NSNumber numberWithInt:v101];
        [v36 setObject:v103 forKeyedSubscript:@"KernelOffset"];

        int v104 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v627.__r_.__value_.__l.__data_, (const void *)v627.__r_.__value_.__r.__words[2]));
        [v36 setObject:v104 forKeyedSubscript:@"KernelIndex"];

        [v36 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
        if (a1) {
          uint64_t v105 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          uint64_t v105 = 0;
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v105, v627.__r_.__value_.__l.__data_);
        goto LABEL_74;
      }
      v386 = (std::__shared_weak_count *)a3[1];
      v578 = *a3;
      v579 = v386;
      if (v386) {
        atomic_fetch_add_explicit(&v386->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v627, "blob_weights_f16");
      uint64_t v387 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v59, &v578);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v627.__r_.__value_.__l.__data_);
      }
      if (v579) {
        nitro::nitro_function::nitro_function(v579);
      }
      if ((v387 & 0x80000000) == 0)
      {
        v388 = (std::__shared_weak_count *)a3[1];
        v576 = *a3;
        v577 = v388;
        if (v388) {
          atomic_fetch_add_explicit(&v388->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v627, v59, &v576);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v577) {
          nitro::nitro_function::nitro_function(v577);
        }
        v389 = [NSNumber numberWithInt:v387];
        [v36 setObject:v389 forKeyedSubscript:@"KernelOffset"];

        v390 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v627.__r_.__value_.__l.__data_, (const void *)v627.__r_.__value_.__r.__words[2]));
        [v36 setObject:v390 forKeyedSubscript:@"KernelIndex"];

        [v36 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
        if (a1) {
          v391 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          v391 = 0;
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v391, v627.__r_.__value_.__l.__data_);
        goto LABEL_74;
      }
      if (*(void *)(a1 + 792))
      {
        v398 = *(std::__shared_weak_count **)(a1 + 800);
        if (a1) {
          v399 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          v399 = 0;
        }
        v575[0] = *(void *)(a1 + 792);
        v575[1] = v398;
        if (v398) {
          atomic_fetch_add_explicit(&v398->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v399, v575);
        if (v398) {
          nitro::nitro_function::nitro_function(v398);
        }
        uint64_t v400 = 0;
        uint64_t v401 = *(void *)(a1 + 792);
        int v402 = *(_DWORD *)(v401 + 8);
        do
        {
          v402 *= *(_DWORD *)(v401 + 12 + v400);
          v400 += 4;
        }
        while (v400 != 12);
        std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(&v627, *(void *)(v401 + 24), 2 * v402);
        size_t size = (std::__shared_weak_count *)v627.__r_.__value_.__l.__size_;
        std::string::size_type v403 = v627.__r_.__value_.__r.__words[0];
        if (v627.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v627.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v405 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v403 + 16), *(int *)(v403 + 8));
        if (size) {
          nitro::nitro_function::nitro_function(size);
        }
        v406 = [NSNumber numberWithInt:v405];
        [v36 setObject:v406 forKeyedSubscript:@"KernelOffset"];

        v407 = NSNumber;
        if (v532) {
          uint64_t weights_file_index = 0;
        }
        else {
        v434 = [v407 numberWithUnsignedLong:weights_file_index];
        }
        [v36 setObject:v434 forKeyedSubscript:@"KernelIndex"];

        [v36 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
LABEL_797:
        if (!size) {
          goto LABEL_74;
        }
        v435 = size;
        goto LABEL_815;
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 456))(&v627);
      std::string::size_type v424 = v627.__r_.__value_.__r.__words[0];
      if (v627.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v627.__r_.__value_.__l.__size_);
      }
      if (v424)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 456))(&v627, a1);
        if (a1) {
          v425 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          v425 = 0;
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v425, &v627);
        uint64_t v426 = 0;
        int v427 = *(_DWORD *)(v627.__r_.__value_.__r.__words[0] + 8);
        do
        {
          v427 *= *(_DWORD *)(v627.__r_.__value_.__r.__words[0] + 12 + v426);
          v426 += 4;
        }
        while (v426 != 12);
        std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(buf, *(void *)(v627.__r_.__value_.__r.__words[0] + 24), 4 * v427);
        uint64_t v428 = *(void *)buf;
        v429 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v430 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v428 + 16), *(int *)(v428 + 8));
        if (v429) {
          nitro::nitro_function::nitro_function(v429);
        }
        v431 = [NSNumber numberWithInt:v430];
        [v36 setObject:v431 forKeyedSubscript:@"KernelOffset"];

        v432 = NSNumber;
        if (v532) {
          uint64_t v433 = 0;
        }
        else {
        v438 = [v432 numberWithUnsignedLong:v433];
        }
        [v36 setObject:v438 forKeyedSubscript:@"KernelIndex"];

        [v36 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
        if (v429) {
          nitro::nitro_function::nitro_function(v429);
        }
        v435 = (std::__shared_weak_count *)v627.__r_.__value_.__l.__size_;
        if (!v627.__r_.__value_.__l.__size_) {
          goto LABEL_74;
        }
        goto LABEL_815;
      }
      v436 = *(Espresso::quantized_weights_helper **)(a1 + 472);
      if (v436
        && *(void *)v436
        && (*((void *)v436 + 4) || *((void *)v436 + 6) || *((void *)v436 + 8) || *((void *)v436 + 10)))
      {
        size_t size = (std::__shared_weak_count *)a3[1];
        v574[0] = (uint64_t)*a3;
        v574[1] = (uint64_t)size;
        if (size)
        {
          atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
          v436 = *(Espresso::quantized_weights_helper **)(a1 + 472);
        }
        v437 = *(atomic_ullong **)(a1 + 480);
        v573[0] = v436;
        v573[1] = (Espresso::quantized_weights_helper *)v437;
        if (v437) {
          atomic_fetch_add_explicit(v437 + 1, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>((void *)a1, a2, v574, v573, v36, (Espresso::quantized_weights_helper ***)&v606);
        if (v437) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v437);
        }
        goto LABEL_797;
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 568))(&v627);
      std::string::size_type v439 = v627.__r_.__value_.__r.__words[0];
      if (!v627.__r_.__value_.__r.__words[0])
      {
LABEL_877:
        if (v627.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v627.__r_.__value_.__l.__size_);
        }
        if (!v473) {
          goto LABEL_911;
        }
        v474 = (unsigned int *)(*(uint64_t (**)(void *))(*(void *)v473 + 384))(v473);
        if (v474[9] != 1) {
          goto LABEL_911;
        }
        uint64_t v476 = *v474;
        vDSP_Length v475 = v474[1];
        v477 = (std::__shared_weak_count *)a3[1];
        v571 = *a3;
        v572 = v477;
        if (v477) {
          atomic_fetch_add_explicit(&v477->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_8bit");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v627, v59, &v571);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v572) {
          nitro::nitro_function::nitro_function(v572);
        }
        v478 = (std::__shared_weak_count *)a3[1];
        v569 = *a3;
        v570 = v478;
        if (v478) {
          atomic_fetch_add_explicit(&v478->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "Qscale");
        (*(void (**)(unsigned char *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(buf, v59, &v569);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v570) {
          nitro::nitro_function::nitro_function(v570);
        }
        v479 = (std::__shared_weak_count *)a3[1];
        v567 = *a3;
        v568 = v479;
        if (v479) {
          atomic_fetch_add_explicit(&v479->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v622, "Qbias");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&__str, v59, &v567);
        if (SHIBYTE(v623) < 0) {
          operator delete((void *)v622);
        }
        if (v568) {
          nitro::nitro_function::nitro_function(v568);
        }
        std::string::size_type v480 = v627.__r_.__value_.__r.__words[0];
        if (!v627.__r_.__value_.__r.__words[0]
          || (uint64_t v481 = *(void *)buf) == 0
          || (std::string::size_type v482 = __str.__r_.__value_.__r.__words[0]) == 0)
        {
LABEL_911:
          if ((v439 & 1) == 0) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
          }
          goto LABEL_74;
        }
        v483 = (char *)operator new(0x58uLL);
        *((void *)v483 + 1) = 0;
        *((void *)v483 + 2) = 0;
        *(void *)v483 = &unk_1EE389AA8;
        *((void *)v483 + 3) = &unk_1EE36BF90;
        *(_OWORD *)(v483 + 56) = 0u;
        *(_OWORD *)(v483 + 72) = 0u;
        *((_DWORD *)v483 + 8) = v476;
        *((_DWORD *)v483 + 9) = v475;
        *((void *)v483 + 5) = v480;
        v530 = (std::__shared_weak_count *)v483;
        v483[48] = 0;
        v484 = (char *)operator new(0x58uLL);
        *((void *)v484 + 1) = 0;
        *((void *)v484 + 2) = 0;
        *(void *)v484 = &unk_1EE389920;
        *((void *)v484 + 3) = &unk_1EE36BEB0;
        *(_OWORD *)(v484 + 56) = 0u;
        *(_OWORD *)(v484 + 72) = 0u;
        *((_DWORD *)v484 + 8) = v476;
        *((void *)v484 + 5) = v481;
        v528 = (std::__shared_weak_count *)v484;
        v484[48] = 0;
        v485 = (char *)operator new(0x58uLL);
        *((void *)v485 + 1) = 0;
        *((void *)v485 + 2) = 0;
        *(void *)v485 = &unk_1EE389920;
        *((void *)v485 + 3) = &unk_1EE36BEB0;
        *(_OWORD *)(v485 + 56) = 0u;
        *(_OWORD *)(v485 + 72) = 0u;
        *((_DWORD *)v485 + 8) = v476;
        *((void *)v485 + 5) = v482;
        v485[48] = 0;
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v622, 4 * v476 * v475, 1, 1, 1);
        uint64_t v486 = v622;
        if (v476)
        {
          unsigned int v487 = 0;
          uint64_t v488 = 0;
          uint64_t v489 = 0;
          uint64_t v490 = 4 * v476;
          do
          {
            v491 = (float *)(*(void *)(v486 + 16) + v488);
            vDSP_vfltu8((const unsigned __int8 *)(v530[1].__shared_weak_owners_ + v487), 1, v491, 1, v475);
            vDSP_vsmul(v491, 1, (const float *)(v528[1].__shared_weak_owners_ + v489), v491, 1, v475);
            vDSP_vsadd(v491, 1, (const float *)(*((void *)v485 + 5) + v489), v491, 1, v475);
            v489 += 4;
            v488 += 4 * v475;
            v487 += v475;
          }
          while (v490 != v489);
        }
        v492 = (std::__shared_weak_count *)*((void *)&v622 + 1);
        if (*((void *)&v622 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v622 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v493 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v486 + 16), *(int *)(v486 + 8));
        if (v492) {
          nitro::nitro_function::nitro_function(v492);
        }
        v494 = [NSNumber numberWithInt:v493];
        [v36 setObject:v494 forKeyedSubscript:@"KernelOffset"];

        v495 = NSNumber;
        if (v532) {
          uint64_t v496 = 0;
        }
        else {
        v497 = [v495 numberWithUnsignedLong:v496];
        }
        [v36 setObject:v497 forKeyedSubscript:@"KernelIndex"];

        [v36 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
        if (v492) {
          nitro::nitro_function::nitro_function(v492);
        }
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v485);
        nitro::nitro_function::nitro_function(v528);
        v435 = v530;
LABEL_815:
        nitro::nitro_function::nitro_function(v435);
        goto LABEL_74;
      }
      v440 = (uint64_t *)(a1 + 536);
      if (*(char *)(a1 + 559) < 0)
      {
        uint64_t v457 = *(void *)(a1 + 544);
        if (v457 != 4)
        {
          if (v457 != 6) {
            goto LABEL_852;
          }
          if (*(_DWORD *)*v440 != 1852399447 || *(_WORD *)(*v440 + 4) != 14452) {
            goto LABEL_852;
          }
          goto LABEL_846;
        }
        v442 = (_DWORD *)*v440;
      }
      else
      {
        int v441 = *(unsigned __int8 *)(a1 + 559);
        v442 = (_DWORD *)(a1 + 536);
        if (v441 != 4)
        {
          if (v441 != 6) {
            goto LABEL_852;
          }
          if (*(_DWORD *)v440 != 1852399447 || *(_WORD *)(a1 + 540) != 14452) {
            goto LABEL_852;
          }
          goto LABEL_846;
        }
      }
      if (*v442 != 947216215)
      {
LABEL_852:
        LOBYTE(v439) = 0;
        goto LABEL_877;
      }
LABEL_846:
      uint64_t v459 = 0;
      int v460 = *(_DWORD *)(v627.__r_.__value_.__r.__words[0] + 8);
      do
      {
        v460 *= *(_DWORD *)(v627.__r_.__value_.__r.__words[0] + 12 + v459);
        v459 += 4;
      }
      while (v459 != 12);
      v461 = (char *)operator new(0x58uLL);
      *((void *)v461 + 1) = 0;
      *((void *)v461 + 2) = 0;
      *(void *)v461 = &unk_1EE389A70;
      v462 = *(const unsigned __int8 **)(v439 + 24);
      *((void *)v461 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v461 + 72) = 0u;
      *(_OWORD *)(v461 + 56) = 0u;
      *((_DWORD *)v461 + 8) = v460;
      *((void *)v461 + 5) = v462;
      v461[48] = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v461 + 1, 1uLL, memory_order_relaxed);
      uint64_t v463 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v462, v460);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v461);
      v464 = [NSNumber numberWithInt:v463];
      [v36 setObject:v464 forKeyedSubscript:@"KernelOffset"];

      v465 = NSNumber;
      if (v532) {
        uint64_t v466 = 0;
      }
      else {
      v467 = [v465 numberWithUnsignedLong:v466];
      }
      [v36 setObject:v467 forKeyedSubscript:@"KernelIndex"];

      if (*(char *)(a1 + 559) < 0)
      {
        uint64_t v470 = *(void *)(a1 + 544);
        if (v470 != 4)
        {
          if (v470 != 6) {
            goto LABEL_873;
          }
          if (*(_DWORD *)*v440 != 1852399447 || *(_WORD *)(*v440 + 4) != 14452) {
            goto LABEL_873;
          }
LABEL_870:
          v472 = @"Int8";
          goto LABEL_875;
        }
        v440 = (uint64_t *)*v440;
      }
      else
      {
        int v468 = *(unsigned __int8 *)(a1 + 559);
        if (v468 != 4)
        {
          if (v468 != 6) {
            goto LABEL_873;
          }
          if (*(_DWORD *)v440 != 1852399447 || *(_WORD *)(a1 + 540) != 14452) {
            goto LABEL_873;
          }
          goto LABEL_870;
        }
      }
      if (*(_DWORD *)v440 != 947216215)
      {
LABEL_873:
        LOBYTE(v439) = 0;
LABEL_876:
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v461);
        goto LABEL_877;
      }
      v472 = @"UInt8";
LABEL_875:
      [v36 setObject:v472 forKeyedSubscript:@"KernelType"];
      LOBYTE(v439) = 1;
      goto LABEL_876;
    }
    id v61 = v36;
    uint64_t v62 = v61;
    if (*(__int16 *)(a4 + 96) <= 1 && *(__int16 *)(a4 + 98) <= 1)
    {

      goto LABEL_107;
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 456))(buf, a1);
    uint64_t v79 = *(void *)(a1 + 792);
    int v80 = *(std::__shared_weak_count **)(a1 + 800);
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!(*(void *)buf | v79))
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 608))(&v627);
      long long v81 = *(_OWORD *)&v627.__r_.__value_.__l.__data_;
      *(_OWORD *)&v627.__r_.__value_.__l.__data_ = 0uLL;
      unsigned int v82 = *(std::__shared_weak_count **)&buf[8];
      *(_OWORD *)long long buf = v81;
      if (v82)
      {
        nitro::nitro_function::nitro_function(v82);
        if (v627.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v627.__r_.__value_.__l.__size_);
        }
      }
      uint64_t v83 = *(void *)(a1 + 472);
      if (v83)
      {
        uint64_t v84 = *(std::__shared_weak_count **)(v83 + 88);
        *(void *)(v83 + 80) = 0;
        *(void *)(v83 + 88) = 0;
        if (v84) {
          nitro::nitro_function::nitro_function(v84);
        }
      }
    }
    int v85 = *(unsigned __int8 *)(a2 + 552);
    uint64_t v86 = *(void *)(a1 + 472);
    if (v86
      && *(void *)v86
      && *(_DWORD *)(v86 + 156) == 8
      && *(unsigned char *)(v86 + 164)
      && !*(void *)(v86 + 32)
      && !*(void *)(v86 + 48)
      && !*(void *)(v86 + 64))
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 464))(&v627, a1);
      uint64_t v444 = **(void **)(a1 + 472);
      v445 = (std::__shared_weak_count *)operator new(0x60uLL);
      v445->__shared_owners_ = 0;
      v445->__shared_weak_owners_ = 0;
      v445->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3898B0;
      v446 = *(std::__shared_weak_count_vtbl **)(v444 + 16);
      v445[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BE70;
      *(_OWORD *)&v445[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v445[3].__shared_owners_ = 0u;
      *(_OWORD *)&v445[1].__shared_owners_ = *(_OWORD *)&v627.__r_.__value_.__l.__data_;
      v445[2].__vftable = v446;
      LOBYTE(v445[2].__shared_owners_) = 0;
      Espresso::dilated_conv_bloated_weights<signed char>(&__str, (uint64_t)&v445[1], v539, v537, a4);
      long long v447 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      long long v622 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v59, &v622);
      if (*((void *)&v447 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v447 + 1));
      }
      uint64_t v448 = 0;
      int v449 = *(_DWORD *)(v447 + 8);
      do
      {
        v449 *= *(_DWORD *)(v447 + 12 + v448);
        v448 += 4;
      }
      while (v448 != 12);
      v450 = (char *)operator new(0x58uLL);
      *((void *)v450 + 1) = 0;
      *((void *)v450 + 2) = 0;
      *(void *)v450 = &unk_1EE389A70;
      v451 = *(const unsigned __int8 **)(v447 + 24);
      *((void *)v450 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v450 + 72) = 0u;
      *(_OWORD *)(v450 + 56) = 0u;
      *((_DWORD *)v450 + 8) = v449;
      *((void *)v450 + 5) = v451;
      v450[48] = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v450 + 1, 1uLL, memory_order_relaxed);
      uint64_t v452 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v451, v449);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v450);
      v453 = [NSNumber numberWithInt:v452];
      [v62 setObject:v453 forKeyedSubscript:@"KernelOffset"];

      v454 = NSNumber;
      if (v85) {
        uint64_t v455 = 0;
      }
      else {
      v456 = [v454 numberWithUnsignedLong:v455];
      }
      [v62 setObject:v456 forKeyedSubscript:@"KernelIndex"];

      [v62 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v450);
      if (*((void *)&v447 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v447 + 1));
      }
      nitro::nitro_function::nitro_function(v445);
      if (v629)
      {
        v630 = (char *)v629;
        operator delete(v629);
      }
      goto LABEL_776;
    }
    if (*(void *)buf)
    {
      Espresso::dilated_conv_bloated_weights<float>(&v627, *(uint64_t *)buf, v539, v537, a4);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v59, &v627);
      uint64_t v87 = 0;
      std::string::size_type v88 = v627.__r_.__value_.__r.__words[0];
      int v89 = *(_DWORD *)(v627.__r_.__value_.__r.__words[0] + 8);
      do
      {
        v89 *= *(_DWORD *)(v627.__r_.__value_.__r.__words[0] + 12 + v87);
        v87 += 4;
      }
      while (v87 != 12);
      uint64_t v90 = (char *)operator new(0x58uLL);
      *((void *)v90 + 1) = 0;
      *((void *)v90 + 2) = 0;
      *(void *)uint64_t v90 = &unk_1EE389A70;
      uint64_t v91 = *(const unsigned __int8 **)(v88 + 24);
      *((void *)v90 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v90 + 72) = 0u;
      *(_OWORD *)(v90 + 56) = 0u;
      *((_DWORD *)v90 + 8) = 4 * v89;
      *((void *)v90 + 5) = v91;
      v90[48] = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v90 + 1, 1uLL, memory_order_relaxed);
      uint64_t v92 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v91, 4 * v89);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v90);
      uint64_t v93 = [NSNumber numberWithInt:v92];
      [v62 setObject:v93 forKeyedSubscript:@"KernelOffset"];

      int v94 = NSNumber;
      if (v85) {
        uint64_t v95 = 0;
      }
      else {
      v356 = [v94 numberWithUnsignedLong:v95];
      }
      [v62 setObject:v356 forKeyedSubscript:@"KernelIndex"];

      [v62 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v90);
      v357 = (std::__shared_weak_count *)v627.__r_.__value_.__l.__size_;
      if (!v627.__r_.__value_.__l.__size_) {
        goto LABEL_776;
      }
    }
    else
    {
      if (v79)
      {
        Espresso::dilated_conv_bloated_weights<unsigned short>(&v627, v79, v539, v537, a4);
        uint64_t v106 = (std::__shared_weak_count *)v627.__r_.__value_.__l.__size_;
        std::string::size_type v107 = v627.__r_.__value_.__r.__words[0];
        long long v621 = *(_OWORD *)&v627.__r_.__value_.__l.__data_;
        if (v627.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v627.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v59, &v621);
        if (v106) {
          nitro::nitro_function::nitro_function(v106);
        }
        uint64_t v108 = 0;
        int v109 = *(_DWORD *)(v107 + 8);
        do
        {
          v109 *= *(_DWORD *)(v107 + 12 + v108);
          v108 += 4;
        }
        while (v108 != 12);
        uint64_t v110 = (char *)operator new(0x58uLL);
        *((void *)v110 + 2) = 0;
        *((void *)v110 + 1) = 0;
        *(void *)uint64_t v110 = &unk_1EE389A70;
        uint64_t v111 = *(void **)(v107 + 24);
        *((void *)v110 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v110 + 72) = 0u;
        *(_OWORD *)(v110 + 56) = 0u;
        *((_DWORD *)v110 + 8) = 2 * v109;
        *((void *)v110 + 5) = v111;
        v110[48] = 0;
        memcpy(v111, *(const void **)(v107 + 24), 2 * v109);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v110 + 1, 1uLL, memory_order_relaxed);
        uint64_t v112 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v110 + 5), *((int *)v110 + 8));
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v110);
        uint64_t v113 = [NSNumber numberWithInt:v112];
        [v62 setObject:v113 forKeyedSubscript:@"KernelOffset"];

        char v114 = NSNumber;
        if (v85) {
          uint64_t v115 = 0;
        }
        else {
        v392 = [v114 numberWithUnsignedLong:v115];
        }
        [v62 setObject:v392 forKeyedSubscript:@"KernelIndex"];

        [v62 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v110);
      }
      else
      {
        if (!v86
          || !*(void *)v86
          || !*(void *)(v86 + 32) && !*(void *)(v86 + 48) && !*(void *)(v86 + 64) && !*(void *)(v86 + 80))
        {
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("<rdar://problem/36840916> Need proper way of expressing dilated conv to ANEC");
        }
        {
          Espresso::quantized_weights_helper::dequantize_to_float16_2d((Espresso::quantized_weights_helper *)v86, &v627);
        }
        else
        {
          Espresso::quantized_weights_helper::dequantize_to_float16_4d((Espresso::quantized_weights_helper *)v86, &v627);
        }
        uint64_t v106 = (std::__shared_weak_count *)v627.__r_.__value_.__l.__size_;
        std::string::size_type v409 = v627.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 464))(&v627);
        v410 = *(std::__shared_weak_count_vtbl **)(v409 + 16);
        v411 = (std::__shared_weak_count *)operator new(0x60uLL);
        v411->__shared_owners_ = 0;
        v411->__shared_weak_owners_ = 0;
        v411->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D80;
        v411[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36C130;
        *(_OWORD *)&v411[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v411[3].__shared_owners_ = 0u;
        *(_OWORD *)&v411[1].__shared_owners_ = *(_OWORD *)&v627.__r_.__value_.__l.__data_;
        v411[2].__vftable = v410;
        LOBYTE(v411[2].__shared_owners_) = 0;
        Espresso::dilated_conv_bloated_weights<unsigned short>(&__str, (uint64_t)&v411[1], v539, v537, a4);
        long long v412 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        long long v620 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606, v59, &v620);
        if (*((void *)&v412 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v412 + 1));
        }
        uint64_t v413 = 0;
        int v414 = *(_DWORD *)(v412 + 8);
        do
        {
          v414 *= *(_DWORD *)(v412 + 12 + v413);
          v413 += 4;
        }
        while (v413 != 12);
        v415 = (char *)operator new(0x58uLL);
        *((void *)v415 + 2) = 0;
        *((void *)v415 + 1) = 0;
        *(void *)v415 = &unk_1EE389A70;
        v416 = *(void **)(v412 + 24);
        *((void *)v415 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v415 + 72) = 0u;
        *(_OWORD *)(v415 + 56) = 0u;
        *((_DWORD *)v415 + 8) = 2 * v414;
        *((void *)v415 + 5) = v416;
        v415[48] = 0;
        memcpy(v416, *(const void **)(v412 + 24), 2 * v414);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v415 + 1, 1uLL, memory_order_relaxed);
        uint64_t v417 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v415 + 5), *((int *)v415 + 8));
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415);
        v418 = [NSNumber numberWithInt:v417];
        [v62 setObject:v418 forKeyedSubscript:@"KernelOffset"];

        [v62 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
        v419 = NSNumber;
        if (v85) {
          uint64_t v420 = 0;
        }
        else {
        v421 = [v419 numberWithUnsignedLong:v420];
        }
        [v62 setObject:v421 forKeyedSubscript:@"KernelIndex"];

        uint64_t v422 = *(void *)(a1 + 472);
        v423 = *(std::__shared_weak_count **)(v422 + 88);
        *(void *)(v422 + 80) = 0;
        *(void *)(v422 + 88) = 0;
        if (v423) {
          nitro::nitro_function::nitro_function(v423);
        }
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415);
        if (*((void *)&v412 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v412 + 1));
        }
        nitro::nitro_function::nitro_function(v411);
        if (v629)
        {
          v630 = (char *)v629;
          operator delete(v629);
        }
      }
      if (!v106) {
        goto LABEL_776;
      }
      v357 = v106;
    }
    nitro::nitro_function::nitro_function(v357);
LABEL_776:
    if (v80) {
      nitro::nitro_function::nitro_function(v80);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
  }
LABEL_74:
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v542, v41);
  float v43 = v42;
  BOOL v44 = 0;
  if (v541 && HIBYTE(v597) && (_BYTE)v597)
  {
    id v45 = v36;
    uint64_t v46 = v45;
    BOOL v44 = *(__int16 *)(a4 + 96) > 1 || *(__int16 *)(a4 + 98) > 1;
    if (v44)
    {
      long long v48 = [v45 objectForKeyedSubscript:@"KernelType"];
      id v527 = v48;
      if ([v48 isEqualToString:@"Float16"])
      {
        uint64_t v49 = (std::__shared_weak_count *)*((void *)&v608 + 1);
        uint64_t v50 = v608;
        if (*((void *)&v608 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v608 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (!v50) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp16 weights");
        }
        int v51 = *(_DWORD *)(v50 + 8);
        for (uint64_t i = 12; i != 24; i += 4)
          v51 *= *(_DWORD *)(v50 + i);
        uint64_t v53 = (char *)operator new(0x58uLL);
        *((void *)v53 + 1) = 0;
        *((void *)v53 + 2) = 0;
        *(void *)uint64_t v53 = &unk_1EE389A70;
        uint64_t v54 = (const unsigned __int8 **)(v53 + 24);
        uint64_t v55 = *(void *)(v50 + 24);
        *((void *)v53 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_OWORD *)(v53 + 72) = 0u;
        *((_DWORD *)v53 + 8) = 2 * v51;
        *((void *)v53 + 5) = v55;
        v53[48] = 0;
        uint64_t v56 = *(int *)(v50 + 8);
        for (uint64_t j = 12; j != 24; j += 4)
          v56 *= *(int *)(v50 + j);
      }
      else if ([v48 isEqualToString:@"Float32"])
      {
        uint64_t v49 = (std::__shared_weak_count *)*((void *)&v607 + 1);
        uint64_t v50 = v607;
        if (*((void *)&v607 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v607 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (!v50) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp32 weights");
        }
        int v75 = *(_DWORD *)(v50 + 8);
        for (uint64_t k = 12; k != 24; k += 4)
          v75 *= *(_DWORD *)(v50 + k);
        uint64_t v53 = (char *)operator new(0x58uLL);
        *((void *)v53 + 1) = 0;
        *((void *)v53 + 2) = 0;
        *(void *)uint64_t v53 = &unk_1EE389A70;
        uint64_t v54 = (const unsigned __int8 **)(v53 + 24);
        uint64_t v77 = *(void *)(v50 + 24);
        *((void *)v53 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_OWORD *)(v53 + 72) = 0u;
        *((_DWORD *)v53 + 8) = 4 * v75;
        *((void *)v53 + 5) = v77;
        v53[48] = 0;
        uint64_t v56 = *(int *)(v50 + 8);
        for (uint64_t m = 12; m != 24; m += 4)
          v56 *= *(int *)(v50 + m);
      }
      else if ([v48 isEqualToString:@"UInt8"])
      {
        uint64_t v49 = (std::__shared_weak_count *)*((void *)&v609 + 1);
        uint64_t v50 = v609;
        if (*((void *)&v609 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v609 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (!v50) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final uint8 weights");
        }
        int v96 = *(_DWORD *)(v50 + 8);
        for (uint64_t n = 12; n != 24; n += 4)
          v96 *= *(_DWORD *)(v50 + n);
        uint64_t v53 = (char *)operator new(0x58uLL);
        *((void *)v53 + 1) = 0;
        *((void *)v53 + 2) = 0;
        *(void *)uint64_t v53 = &unk_1EE389A70;
        uint64_t v54 = (const unsigned __int8 **)(v53 + 24);
        uint64_t v98 = *(void *)(v50 + 24);
        *((void *)v53 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_OWORD *)(v53 + 72) = 0u;
        *((_DWORD *)v53 + 8) = v96;
        *((void *)v53 + 5) = v98;
        v53[48] = 0;
        uint64_t v56 = *(int *)(v50 + 8);
        for (iuint64_t i = 12; ii != 24; ii += 4)
          v56 *= *(int *)(v50 + ii);
      }
      else
      {
        if (![v48 isEqualToString:@"Int8"])
        {
          if (v48) {
            v522 = (const char *)[v48 UTF8String];
          }
          else {
            v522 = "";
          }
          v627.__r_.__value_.__r.__words[0] = (std::string::size_type)v522;
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid kernel type %s", &v627);
        }
        uint64_t v49 = (std::__shared_weak_count *)*((void *)&v610 + 1);
        uint64_t v50 = v610;
        if (*((void *)&v610 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v610 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (!v50) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final int8 weights");
        }
        int v116 = *(_DWORD *)(v50 + 8);
        for (juint64_t j = 12; jj != 24; jj += 4)
          v116 *= *(_DWORD *)(v50 + jj);
        uint64_t v53 = (char *)operator new(0x58uLL);
        *((void *)v53 + 1) = 0;
        *((void *)v53 + 2) = 0;
        *(void *)uint64_t v53 = &unk_1EE389A70;
        uint64_t v54 = (const unsigned __int8 **)(v53 + 24);
        uint64_t v118 = *(void *)(v50 + 24);
        *((void *)v53 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_OWORD *)(v53 + 72) = 0u;
        *((_DWORD *)v53 + 8) = v116;
        *((void *)v53 + 5) = v118;
        v53[48] = 0;
        uint64_t v56 = *(int *)(v50 + 8);
        for (uint64_t kk = 12; kk != 24; kk += 4)
          v56 *= *(int *)(v50 + kk);
      }
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)&v627, (_DWORD *)v50, a4);
      long long v529 = *(_OWORD *)&v627.__r_.__value_.__l.__data_;
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      int v120 = *(unsigned __int8 *)(a2 + 552);
      uint64_t v121 = NSNumber;
      if (*(unsigned char *)(a2 + 552)) {
        uint64_t v122 = 0;
      }
      else {
      int v123 = [v121 numberWithUnsignedLong:v122];
      }
      [v46 setObject:v123 forKeyedSubscript:@"KernelIndex"];

      BOOL v124 = NSNumber;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v53 + 1, 1uLL, memory_order_relaxed);
      int v125 = objc_msgSend(v124, "numberWithInt:", Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v54[2], *((int *)v54 + 2)));
      [v46 setObject:v125 forKeyedSubscript:@"KernelOffset"];

      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v53);
      if (*((void *)&v529 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v529 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v126 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v529 + 16), *(int *)(v529 + 8));
      if (*((void *)&v529 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v529 + 1));
      }
      unint64_t v127 = [NSNumber numberWithInt:v126];
      [v46 setObject:v127 forKeyedSubscript:@"KernelMaskByteOffset"];

      int v128 = NSNumber;
      if (v120) {
        uint64_t v129 = 0;
      }
      else {
      std::string::size_type v130 = [v128 numberWithUnsignedLong:v129];
      }
      [v46 setObject:v130 forKeyedSubscript:@"KernelMaskIndex"];

      char v131 = [NSNumber numberWithUnsignedLong:v56];
      [v46 setObject:v131 forKeyedSubscript:@"KernelCoeffCount"];

      [v46 setObject:@"Sparse" forKeyedSubscript:@"KernelMode"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v53);
      if (*((void *)&v529 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v529 + 1));
      }
    }
  }
  if (v44 || v541 || !v535) {
    goto LABEL_274;
  }
  id v132 = v36;
  *(_OWORD *)&v627.__r_.__value_.__l.__data_ = 0uLL;
  *(void *)&buf[8] = 0;
  *(void *)long long buf = 0;
  if ((void)v607)
  {
    long long v133 = (std::__shared_weak_count *)*((void *)&v607 + 1);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v607;
    if (*((void *)&v607 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v607 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v134 = Espresso::ANECompilerEngine::compress_sparse_weights<float,4>((uint64_t)&__str, (uint64_t *)&v627, (uint64_t *)buf, v43);
LABEL_249:
    uint64_t v135 = v134;
    if (v133) {
      nitro::nitro_function::nitro_function(v133);
    }
    goto LABEL_251;
  }
  if ((void)v608)
  {
    long long v133 = (std::__shared_weak_count *)*((void *)&v608 + 1);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v608;
    if (*((void *)&v608 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v608 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v134 = Espresso::ANECompilerEngine::compress_sparse_weights<unsigned short,4>((uint64_t)&__str, (uint64_t *)&v627, (uint64_t *)buf, v43);
    goto LABEL_249;
  }
  if ((void)v609)
  {
    long long v133 = (std::__shared_weak_count *)*((void *)&v609 + 1);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v609;
    if (*((void *)&v609 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v609 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v134 = Espresso::ANECompilerEngine::compress_sparse_weights<unsigned char,4>((uint64_t)&__str, (uint64_t *)&v627, (uint64_t *)buf, v43);
    goto LABEL_249;
  }
  if ((void)v610)
  {
    long long v133 = (std::__shared_weak_count *)*((void *)&v610 + 1);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v610;
    if (*((void *)&v610 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v610 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v134 = Espresso::ANECompilerEngine::compress_sparse_weights<signed char,4>((uint64_t)&__str, (uint64_t *)&v627, (uint64_t *)buf, v43);
    goto LABEL_249;
  }
  uint64_t v135 = 0;
LABEL_251:
  std::string::size_type v136 = v627.__r_.__value_.__r.__words[0];
  if (v627.__r_.__value_.__r.__words[0] && (uint64_t v137 = *(void *)buf) != 0)
  {
    int v138 = *(unsigned __int8 *)(a2 + 552);
    unint64_t v139 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
    int v140 = (std::__shared_weak_count *)v627.__r_.__value_.__l.__size_;
    if (v627.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v627.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v141 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v139, *(const unsigned __int8 **)(v136 + 16), *(int *)(v136 + 8));
    if (v140) {
      nitro::nitro_function::nitro_function(v140);
    }
    int v142 = NSNumber;
    if (v138) {
      uint64_t v143 = 0;
    }
    else {
    unint64_t v145 = [v142 numberWithUnsignedLong:v143];
    }
    [v132 setObject:v145 forKeyedSubscript:@"KernelIndex"];

    v146 = [NSNumber numberWithInt:v141];
    [v132 setObject:v146 forKeyedSubscript:@"KernelOffset"];

    v144 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v147 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v139, *(const unsigned __int8 **)(v137 + 16), *(int *)(v137 + 8));
    if (v144) {
      nitro::nitro_function::nitro_function(v144);
    }
    id v148 = [NSNumber numberWithInt:v147];
    [v132 setObject:v148 forKeyedSubscript:@"KernelMaskByteOffset"];

    v149 = NSNumber;
    if (v138) {
      uint64_t v150 = 0;
    }
    else {
    std::string v151 = [v149 numberWithUnsignedLong:v150];
    }
    [v132 setObject:v151 forKeyedSubscript:@"KernelMaskIndex"];

    int v152 = [NSNumber numberWithUnsignedLong:v135];
    [v132 setObject:v152 forKeyedSubscript:@"KernelCoeffCount"];

    [v132 setObject:@"Sparse" forKeyedSubscript:@"KernelMode"];
  }
  else
  {
    v144 = *(std::__shared_weak_count **)&buf[8];
  }
  if (v144) {
    nitro::nitro_function::nitro_function(v144);
  }
  if (v627.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v627.__r_.__value_.__l.__size_);
  }

LABEL_274:
  int v153 = [NSNumber numberWithInt:*(__int16 *)(a4 + 92)];
  v639[0] = v153;
  BOOL v154 = [NSNumber numberWithInt:*(__int16 *)(a4 + 94)];
  v639[1] = v154;
  int v155 = [MEMORY[0x1E4F1C978] arrayWithObjects:v639 count:2];
  [v36 setObject:v155 forKeyedSubscript:@"Step"];

  if (HIBYTE(v597)) {
    BOOL v156 = 0;
  }
  else {
    BOOL v156 = v541;
  }
  if (v156 && !(_BYTE)v597)
  {
    unsigned int v539 = (v539 - 1) * *(__int16 *)(a4 + 96) + 1;
    unsigned int v537 = (v537 - 1) * *(__int16 *)(a4 + 98) + 1;
  }
  int v157 = *(__int16 *)(a4 + 72);
  switch(v157)
  {
    case 4:
      goto LABEL_283;
    case 2:
      goto LABEL_318;
    case 1:
LABEL_283:
      int v158 = v537 + (*(_DWORD *)(*a7 + 12) - 1) * *(__int16 *)(a4 + 94) - *(_DWORD *)(*a6 + 12);
      unsigned int v159 = v158 & ~(v158 >> 31);
      int v160 = v539 + (*(_DWORD *)(*a7 + 8) - 1) * *(__int16 *)(a4 + 92) - *(_DWORD *)(*a6 + 8);
      unsigned int v161 = v160 & ~(v160 >> 31);
      uint64_t v162 = v161 - (v161 >> 1);
      unsigned int v163 = v159 - (v159 >> 1);
      if (*(_WORD *)(a4 + 72) == 1)
      {
        uint64_t v164 = v159 - (v159 >> 1);
        unsigned int v163 = v159 >> 1;
        uint64_t v165 = v161 - (v161 >> 1);
        uint64_t v162 = v161 >> 1;
        if (v159 >> 1) {
          goto LABEL_293;
        }
      }
      else
      {
        uint64_t v164 = v159 >> 1;
        uint64_t v165 = v161 >> 1;
        if (v163) {
          goto LABEL_293;
        }
      }
      break;
    default:
      uint64_t v162 = *(__int16 *)(a4 + 80);
      uint64_t v165 = *(__int16 *)(a4 + 82);
      unsigned int v163 = *(__int16 *)(a4 + 84);
      uint64_t v164 = *(__int16 *)(a4 + 86);
      if (*(_WORD *)(a4 + 84)) {
        goto LABEL_293;
      }
      break;
  }
  if (!v164 && !v162)
  {
    if (!v165) {
      goto LABEL_318;
    }
    uint64_t v164 = 0;
    uint64_t v162 = 0;
    goto LABEL_294;
  }
LABEL_293:
  if ((v163 & 0x80000000) == 0)
  {
LABEL_294:
    long long v166 = objc_msgSend(NSNumber, "numberWithInt:");
    int v167 = 1;
    goto LABEL_296;
  }
  int v167 = 0;
  long long v166 = &unk_1EE3AEE18;
LABEL_296:
  [v36 setObject:v166 forKeyedSubscript:@"PadTop"];
  if (v167) {

  }
  if ((v164 & 0x80000000) != 0)
  {
    std::string v168 = &unk_1EE3AEE18;
  }
  else
  {
    std::string v168 = [NSNumber numberWithInt:v164];
  }
  [v36 setObject:v168 forKeyedSubscript:@"PadBot"];
  if ((v164 & 0x80000000) == 0) {

  }
  if ((v162 & 0x80000000) != 0)
  {
    std::string v169 = &unk_1EE3AEE18;
  }
  else
  {
    std::string v169 = [NSNumber numberWithInt:v162];
  }
  [v36 setObject:v169 forKeyedSubscript:@"PadLeft"];
  if ((v162 & 0x80000000) == 0) {

  }
  if ((v165 & 0x80000000) != 0)
  {
    std::string v170 = &unk_1EE3AEE18;
  }
  else
  {
    std::string v170 = [NSNumber numberWithInt:v165];
  }
  [v36 setObject:v170 forKeyedSubscript:@"PadRight"];
  if ((v165 & 0x80000000) == 0) {

  }
  if (*(_WORD *)(a4 + 74))
  {
    if (*(_WORD *)(a4 + 74) != 1) {
      goto LABEL_318;
    }
    std::string v171 = @"Replication";
  }
  else
  {
    std::string v171 = @"Zero";
  }
  [v36 setObject:v171 forKeyedSubscript:@"PaddingMode"];
LABEL_318:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v627.__r_.__value_.__l.__data_, a5);
  if (v156)
  {
    v172 = [NSNumber numberWithShort:*(__int16 *)(a4 + 96)];
    [v36 setObject:v172 forKeyedSubscript:@"KernelDilationX"];

    std::string v173 = [NSNumber numberWithShort:*(__int16 *)(a4 + 98)];
    [v36 setObject:v173 forKeyedSubscript:@"KernelDilationY"];

    [v36 setObject:v531 forKeyedSubscript:@"Type"];
  }
  std::string v174 = v636;
  v636 = @"Conv";

  objc_storeStrong(&v637, v36);
  uint64_t v175 = (uint64_t)*a3 + 136;
  *(void *)long long buf = &v627;
  std::string v176 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v175, (unsigned __int8 *)&v627, (long long **)buf);
  std::string v178 = (std::__shared_weak_count *)*((void *)v176 + 6);
  if (v178) {
    atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(v638) = v177[41];
  HIDWORD(v638) = v534;
  long long v179 = v595;
  if ((unint64_t)v595 >= v596)
  {
    unint64_t v181 = 0x8E38E38E38E38E39 * (((uint64_t)v595 - v594) >> 4);
    if (v181 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v182 = 0x1C71C71C71C71C72 * ((uint64_t)(v596 - v594) >> 4);
    if (v182 <= v181 + 1) {
      unint64_t v182 = v181 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v596 - v594) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v183 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v183 = v182;
    }
    *((void *)&v641 + 1) = &v596;
    if (v183) {
      unint64_t v183 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v183);
    }
    else {
      uint64_t v184 = 0;
    }
    *(void *)long long buf = v183;
    *(void *)&buf[8] = v183 + 144 * v181;
    *(void *)&buf[16] = *(void *)&buf[8];
    *(void *)&long long v641 = v183 + 144 * v184;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v627);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v594, buf);
    std::string::size_type v180 = v595;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v595, (uint64_t)&v627);
    std::string::size_type v180 = v179 + 6;
  }
  v595 = v180;
  if (v178) {
    nitro::nitro_function::nitro_function(v178);
  }

  if (v634 < 0) {
    operator delete(v633);
  }
  *(void *)long long buf = &v630;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v628;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v627.__r_.__value_.__l.__data_);
  }

  id v185 = (std::__shared_weak_count *)a3[1];
  if (v185) {
    atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v186 = *a7;
  uint64_t v187 = (std::__shared_weak_count *)a7[1];
  if (v187) {
    atomic_fetch_add_explicit(&v187->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v627);
  id v637 = 0;
  v636 = 0;
  uint64_t v638 = 0x100000000;
  uint64_t v188 = *(void *)(a1 + 624);
  uint64_t v189 = *(std::__shared_weak_count **)(a1 + 632);
  if (v189) {
    atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v188 || *(unsigned char *)((*(uint64_t (**)(void))(*(void *)(a1 + 560) + 104))() + 40))
  {
    char v190 = 0;
    if (!v189) {
      goto LABEL_350;
    }
    goto LABEL_349;
  }
  float v222 = *(float *)(v186 + 112);
  *(void *)&long long v621 = v188;
  *((void *)&v621 + 1) = v189;
  if (v189) {
    atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v223 = *(std::__shared_weak_count **)(a1 + 648);
  *(void *)&long long v620 = *(void *)(a1 + 640);
  *((void *)&v620 + 1) = v223;
  if (v223) {
    atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v621, (uint64_t *)&v620, (uint64_t)&v622, v222);
  if (v223) {
    nitro::nitro_function::nitro_function(v223);
  }
  if (v189) {
    nitro::nitro_function::nitro_function(v189);
  }
  uint64_t v224 = *(unsigned int *)(v188 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v618, 2 * v224, 1, 1, 1);
  uint64_t v225 = (int)v224;
  uint64_t v226 = *(void *)(a1 + 640);
  int v227 = v224;
  if (v226) {
    int v227 = *(_DWORD *)(v226 + 8);
  }
  if (!*(unsigned char *)(a2 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v224);
    v500 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    int v549 = v224 - 1;
    if ((int)v224 >= 1)
    {
      for (muint64_t m = 0; mm != v224; ++mm)
      {
        float v502 = *(float *)(*(void *)(v188 + 16) + mm * 4);
        *(float *)&int v503 = ldexp(1.0, -v625) * v502;
        v500[mm] = v503;
      }
    }
    if (v224)
    {
      v504 = *(_WORD **)(v618 + 16);
      do
      {
        int v505 = *v500++;
        _S0 = v505;
        __asm { FCVT            H0, S0 }
        *v504++ = _S0;
        --v225;
      }
      while (v225);
    }
    if (*(void *)(a1 + 640))
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v227);
      uint64_t v508 = *(void *)buf;
      Espresso::blob<unsigned char,1>::make(buf, 2 * v227);
      v546 = *(Espresso::ANECompilerEngine **)buf;
      v509 = *(int **)(v508 + 16);
      if (v227 >= 1)
      {
        for (uint64_t nn = 0; nn != v227; ++nn)
        {
          int v511 = v549;
          if (v549 >= (int)nn) {
            int v511 = nn;
          }
          *(float *)&int v512 = *(float *)(*(void *)(v623 + 16) + 4 * nn)
                          * *(float *)(*(void *)(v622 + 16) + 4 * v511);
          v509[nn] = v512;
          unsigned int v513 = v626;
          unsigned int v514 = v625;
          *(float *)&int v515 = ldexp(1.0, v626 - v625) * *(float *)&v512;
          v509[nn] = v515;
          float v518 = ldexp(1.0, v514 - v513) * *(float *)&v515;
          if (v518 < -127.0 || v518 > 255.0)
          {
            v520 = Espresso::espresso_os_log_subsystem(v516, v517);
            if (os_log_type_enabled(v520, OS_LOG_TYPE_ERROR))
            {
              double v521 = *(float *)&v509[nn];
              *(_DWORD *)long long buf = 134218752;
              *(double *)&uint8_t buf[4] = v518;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v626;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v625;
              LOWORD(v641) = 2048;
              *(double *)((char *)&v641 + 2) = v521;
              _os_log_error_impl(&dword_1920CB000, v520, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }
          }
        }
      }
      if (v227)
      {
        uint64_t v523 = v227;
        v524 = (_WORD *)*((void *)v546 + 2);
        do
        {
          int v525 = *v509++;
          _S0 = v525;
          __asm { FCVT            H0, S0 }
          *v524++ = _S0;
          --v523;
        }
        while (v523);
      }
    }
    v507 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v507);
  }
  unsigned int v228 = v626;
  uint64_t v229 = v618;
  if (v224)
  {
    v230 = *(int **)(v622 + 16);
    v231 = *(_WORD **)(v618 + 16);
    do
    {
      int v232 = *v230++;
      _S0 = v232;
      __asm { FCVT            H0, S0 }
      *v231++ = _S0;
      --v225;
    }
    while (v225);
  }
  if (v226)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v227, 1, 1, 1);
    uint64_t v234 = *(void *)buf;
    v235 = *(std::__shared_weak_count **)&buf[8];
    if (v227)
    {
      uint64_t v236 = v227;
      v237 = *(_WORD **)(*(void *)buf + 16);
      v238 = *(int **)(v623 + 16);
      do
      {
        int v239 = *v238++;
        _S0 = v239;
        __asm { FCVT            H0, S0 }
        *v237++ = _S0;
        --v236;
      }
      while (v236);
    }
  }
  else
  {
    v235 = 0;
    uint64_t v234 = 0;
  }
  int v540 = *(unsigned __int8 *)(a2 + 552);
  v257 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v258 = v619;
  if (v619) {
    atomic_fetch_add_explicit(&v619->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v538 = v235;
  uint64_t v259 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v257, *(const unsigned __int8 **)(v229 + 16), *(int *)(v229 + 8));
  if (v258) {
    nitro::nitro_function::nitro_function(v258);
  }
  v260 = objc_opt_new();
  if (*(unsigned char *)(a2 + 121))
  {
    id v261 = *(id *)(v594 + 128);

    v260 = v261;
  }
  v262 = objc_opt_new();
  v263 = [NSNumber numberWithInt:v224];
  [v262 setObject:v263 forKeyedSubscript:@"ScaleCount"];

  v264 = [NSNumber numberWithInt:v259];
  [v262 setObject:v264 forKeyedSubscript:@"ScaleOffset"];

  v265 = NSNumber;
  if (v540) {
    uint64_t v266 = 0;
  }
  else {
  v267 = [v265 numberWithUnsignedLong:v266];
  }
  [v262 setObject:v267 forKeyedSubscript:@"ScaleIndex"];

  [v262 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
  v268 = [NSNumber numberWithInt:v625];
  [v260 setObject:v268 forKeyedSubscript:@"ScaleShift"];

  if (*(void *)(a1 + 640))
  {
    if (v538) {
      atomic_fetch_add_explicit(&v538->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v269 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v257, *(const unsigned __int8 **)(v234 + 16), *(int *)(v234 + 8));
    if (v538) {
      nitro::nitro_function::nitro_function(v538);
    }
    v270 = [NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 640) + 8)];
    [v262 setObject:v270 forKeyedSubscript:@"BiasCount"];

    v271 = [NSNumber numberWithInt:v269];
    [v262 setObject:v271 forKeyedSubscript:@"BiasOffset"];

    v272 = NSNumber;
    if (v540) {
      uint64_t v273 = 0;
    }
    else {
    v274 = [v272 numberWithUnsignedLong:v273];
    }
    [v262 setObject:v274 forKeyedSubscript:@"BiasIndex"];

    [v262 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    v275 = [NSNumber numberWithInt:v228];
    [v260 setObject:v275 forKeyedSubscript:@"BiasShift"];
  }
  [v260 setObject:v262 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  v276 = v595;
  if (v595 != (std::string *)v594)
  {
    v277 = v595 - 6;
    uint64_t v278 = HIBYTE(v595[-6].__r_.__value_.__r.__words[2]);
    char v279 = v278;
    std::string::size_type v280 = v595[-6].__r_.__value_.__l.__size_;
    if ((v278 & 0x80u) == 0) {
      std::string::size_type v281 = HIBYTE(v595[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v281 = v595[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v282 = buf[23];
    if (buf[23] < 0) {
      uint64_t v282 = *(void *)&buf[8];
    }
    if (v281 == v282)
    {
      if (buf[23] >= 0) {
        v283 = buf;
      }
      else {
        v283 = *(unsigned __int8 **)buf;
      }
      if ((char)v278 < 0)
      {
        data = (const std::string::value_type *)v277->__r_.__value_.__r.__words[0];
        if (memcmp(v277->__r_.__value_.__l.__data_, v283, v595[-6].__r_.__value_.__l.__size_)) {
          goto LABEL_528;
        }
      }
      else if ((_BYTE)v278)
      {
        v284 = v595 - 6;
        while (v284->__r_.__value_.__s.__data_[0] == *v283)
        {
          v284 = (std::string *)((char *)v284 + 1);
          ++v283;
          if (!--v278) {
            goto LABEL_524;
          }
        }
        goto LABEL_525;
      }
LABEL_524:
      std::string::append(v276 - 6, "__@pre_scale_bias");
      char v279 = HIBYTE(v276[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_525:
    if ((v279 & 0x80) == 0)
    {
      long long v323 = *(_OWORD *)&v277->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v276[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v323;
      goto LABEL_529;
    }
    data = v276[-6].__r_.__value_.__l.__data_;
    std::string::size_type v280 = v276[-6].__r_.__value_.__l.__size_;
LABEL_528:
    std::string::__init_copy_ctor_external(&__str, data, v280);
LABEL_529:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v642, &__str, &v649, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  v324 = v646;
  v646 = @"GOC";

  objc_storeStrong(&v647, v260);
  if (!*(unsigned char *)(a2 + 121))
  {
    v325 = v595;
    if ((unint64_t)v595 >= v596)
    {
      unint64_t v327 = 0x8E38E38E38E38E39 * (((uint64_t)v595 - v594) >> 4);
      if (v327 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v328 = 0x1C71C71C71C71C72 * ((uint64_t)(v596 - v594) >> 4);
      if (v328 <= v327 + 1) {
        unint64_t v328 = v327 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v596 - v594) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v329 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v329 = v328;
      }
      *((void *)&v649 + 1) = &v596;
      if (v329) {
        unint64_t v329 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v329);
      }
      else {
        uint64_t v330 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v329;
      __str.__r_.__value_.__l.__size_ = v329 + 144 * v327;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v649 = v329 + 144 * v330;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v594, &__str);
      v326 = v595;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v595, (uint64_t)buf);
      v326 = v325 + 6;
    }
    v595 = v326;
  }

  if (v644 < 0) {
    operator delete(v643);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v642;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v641;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }

  if (v538) {
    nitro::nitro_function::nitro_function(v538);
  }
  if (v619) {
    nitro::nitro_function::nitro_function(v619);
  }
  if (v624) {
    nitro::nitro_function::nitro_function(v624);
  }
  if (*((void *)&v622 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v622 + 1));
  }
  char v190 = 1;
  if (v189) {
LABEL_349:
  }
    nitro::nitro_function::nitro_function(v189);
LABEL_350:

  if (v634 < 0) {
    operator delete(v633);
  }
  *(void *)long long buf = &v630;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v628;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v627.__r_.__value_.__l.__data_);
  }
  if (v187) {
    nitro::nitro_function::nitro_function(v187);
  }
  if (v185) {
    nitro::nitro_function::nitro_function(v185);
  }
  if (v190)
  {
    if (*(_DWORD *)(a4 + 112)) {
LABEL_925:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
    goto LABEL_551;
  }
  char v191 = *(void **)(a1 + 472);
  if (v191 && *v191 && (v191[4] || v191[6] || v191[8] || v191[10]))
  {
    uint64_t v192 = v191[10];
    if (v192)
    {
      uint64_t v193 = *(int *)(v192 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v627, 2 * v193, 1, 1, 1);
      long long v194 = *(_OWORD *)&v627.__r_.__value_.__l.__data_;
      uint64_t v195 = *(const unsigned __int8 **)(v627.__r_.__value_.__r.__words[0] + 16);
      if (v193)
      {
        v196 = *(int **)(*(void *)(*(void *)(a1 + 472) + 80) + 16);
        v197 = *(_WORD **)(v627.__r_.__value_.__r.__words[0] + 16);
        uint64_t v198 = v193;
        do
        {
          int v199 = *v196++;
          _S0 = v199;
          __asm { FCVT            H0, S0 }
          *v197++ = _S0;
          --v198;
        }
        while (v198);
      }
      v204 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      if (*((void *)&v194 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v194 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v195 = *(const unsigned __int8 **)(v194 + 16);
      }
      uint64_t v205 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v204, v195, *(int *)(v194 + 8));
      if (*((void *)&v194 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v194 + 1));
      }
      v206 = objc_opt_new();
      v207 = [NSNumber numberWithUnsignedLong:v193];
      [v206 setObject:v207 forKeyedSubscript:@"ScaleCount"];

      v208 = [NSNumber numberWithInt:v205];
      [v206 setObject:v208 forKeyedSubscript:@"ScaleOffset"];

      v209 = NSNumber;
      if (v532) {
        uint64_t v210 = 0;
      }
      else {
      v285 = [v209 numberWithUnsignedLong:v210];
      }
      [v206 setObject:v285 forKeyedSubscript:@"ScaleIndex"];

      [v206 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1) + 32))
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 448))(&__str);
        if (!__str.__r_.__value_.__r.__words[0])
        {
          v286 = (std::__shared_weak_count *)a3[1];
          v565 = *a3;
          v566 = v286;
          if (v286) {
            atomic_fetch_add_explicit(&v286->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr))(*(void *)(a1 + 560) + 120))(&v627);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v566) {
            nitro::nitro_function::nitro_function(v566);
          }
          unint64_t v287 = v627.__r_.__value_.__r.__words[2];
          v288 = (char *)operator new(0x58uLL);
          *((void *)v288 + 1) = 0;
          *((void *)v288 + 2) = 0;
          *(void *)v288 = &unk_1EE389920;
          std::string::size_type v289 = v627.__r_.__value_.__r.__words[0];
          *((void *)v288 + 3) = &unk_1EE36BEB0;
          *(_OWORD *)(v288 + 56) = 0u;
          *(_OWORD *)(v288 + 72) = 0u;
          *((_DWORD *)v288 + 8) = v287 >> 2;
          *((void *)v288 + 5) = v289;
          v288[48] = 0;
          v290 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v288 + 24);
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v288;
          if (v290)
          {
            nitro::nitro_function::nitro_function(v290);
            if (!__str.__r_.__value_.__r.__words[0]) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
            }
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v627, 4 * v193, 1, 1, 1);
        std::string::size_type v291 = v627.__r_.__value_.__r.__words[0];
        if (v193)
        {
          v292 = *(float **)(v627.__r_.__value_.__r.__words[0] + 16);
          v293 = *(float **)(__str.__r_.__value_.__r.__words[0] + 16);
          v294 = *(float **)(*(void *)(*(void *)(a1 + 472) + 80) + 16);
          uint64_t v295 = v193;
          do
          {
            float v296 = *v293++;
            float v297 = v296;
            float v298 = *v294++;
            *v292++ = v297 / v298;
            --v295;
          }
          while (v295);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v193, 1, 1, 1);
        uint64_t v299 = *(void *)buf;
        v300 = *(const unsigned __int8 **)(*(void *)buf + 16);
        if (v193)
        {
          v301 = *(int **)(v291 + 16);
          v302 = *(_WORD **)(*(void *)buf + 16);
          uint64_t v303 = v193;
          do
          {
            int v304 = *v301++;
            _S0 = v304;
            __asm { FCVT            H0, S0 }
            *v302++ = _S0;
            --v303;
          }
          while (v303);
        }
        v306 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          v300 = *(const unsigned __int8 **)(v299 + 16);
        }
        uint64_t v307 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v204, v300, *(int *)(v299 + 8));
        if (v306) {
          nitro::nitro_function::nitro_function(v306);
        }
        v308 = [NSNumber numberWithUnsignedLong:v193];
        [v206 setObject:v308 forKeyedSubscript:@"BiasCount"];

        v309 = [NSNumber numberWithInt:v307];
        [v206 setObject:v309 forKeyedSubscript:@"BiasOffset"];

        v310 = NSNumber;
        if (v532) {
          uint64_t v311 = 0;
        }
        else {
        v313 = [v310 numberWithUnsignedLong:v311];
        }
        [v206 setObject:v313 forKeyedSubscript:@"BiasIndex"];

        [v206 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
        if (v306) {
          nitro::nitro_function::nitro_function(v306);
        }
        if (v627.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v627.__r_.__value_.__l.__size_);
        }
        if (__str.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
      }
      v314 = objc_opt_new();
      [v314 setObject:v206 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v627.__r_.__value_.__l.__data_, a5);
      v315 = v636;
      v636 = @"GOC";

      objc_storeStrong(&v637, v314);
      v316 = v595;
      if ((unint64_t)v595 >= v596)
      {
        unint64_t v318 = 0x8E38E38E38E38E39 * (((uint64_t)v595 - v594) >> 4);
        if (v318 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v319 = 0x1C71C71C71C71C72 * ((uint64_t)(v596 - v594) >> 4);
        if (v319 <= v318 + 1) {
          unint64_t v319 = v318 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v596 - v594) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v320 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v320 = v319;
        }
        *((void *)&v641 + 1) = &v596;
        if (v320) {
          unint64_t v320 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v320);
        }
        else {
          uint64_t v321 = 0;
        }
        *(void *)long long buf = v320;
        *(void *)&buf[8] = v320 + 144 * v318;
        *(void *)&buf[16] = *(void *)&buf[8];
        *(void *)&long long v641 = v320 + 144 * v321;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v627);
        *(void *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v594, buf);
        v317 = v595;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v595, (uint64_t)&v627);
        v317 = v316 + 6;
      }
      v595 = v317;

      if (v634 < 0) {
        operator delete(v633);
      }
      *(void *)long long buf = &v630;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)long long buf = v628;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v627.__r_.__value_.__l.__data_);
      }

      if (!*((void *)&v194 + 1)) {
        goto LABEL_551;
      }
      v312 = (std::__shared_weak_count *)*((void *)&v194 + 1);
LABEL_550:
      nitro::nitro_function::nitro_function(v312);
      goto LABEL_551;
    }
  }
  if (!*(_DWORD *)(a4 + 112))
  {
    if (!*(_DWORD *)(a4 + 32)) {
      goto LABEL_551;
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 448))(&v627);
    std::string::size_type v241 = v627.__r_.__value_.__r.__words[0];
    if (v627.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v627.__r_.__value_.__l.__size_);
    }
    if (!v241) {
      goto LABEL_551;
    }
    if (*(unsigned char *)(a2 + 121))
    {
      id v242 = *(id *)(v594 + 128);
    }
    else
    {
      id v242 = (id)objc_opt_new();
    }
    v358 = objc_opt_new();
    v359 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
    [v358 setObject:v359 forKeyedSubscript:@"BiasCount"];

    v360 = (std::__shared_weak_count *)a3[1];
    v561 = *a3;
    v562 = v360;
    if (v360) {
      atomic_fetch_add_explicit(&v360->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v627, "blob_biases_f16");
    uint64_t v361 = a1 + 560;
    int v362 = (*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(a1 + 560, &v561);
    if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v627.__r_.__value_.__l.__data_);
    }
    if (v562) {
      nitro::nitro_function::nitro_function(v562);
    }
    if (v362 < 0)
    {
      v374 = (std::__shared_weak_count *)a3[1];
      v555 = *a3;
      v556 = v374;
      if (v374) {
        atomic_fetch_add_explicit(&v374->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v627, "blob_biases");
      uint64_t v364 = (*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v361, &v555);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v627.__r_.__value_.__l.__data_);
      }
      if (v556) {
        nitro::nitro_function::nitro_function(v556);
      }
      v375 = (std::__shared_weak_count *)a3[1];
      v553 = *a3;
      v554 = v375;
      if (v375) {
        atomic_fetch_add_explicit(&v375->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v627, v361, &v553);
      v366 = (Espresso::ANECompilerEngine::compiler *)v627.__r_.__value_.__r.__words[0];
      unint64_t v367 = v627.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      v368 = v554;
      if (!v554) {
        goto LABEL_631;
      }
    }
    else
    {
      v363 = (std::__shared_weak_count *)a3[1];
      v559 = *a3;
      v560 = v363;
      if (v363) {
        atomic_fetch_add_explicit(&v363->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v627, "blob_biases_f16");
      uint64_t v364 = (*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v361, &v559);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v627.__r_.__value_.__l.__data_);
      }
      if (v560) {
        nitro::nitro_function::nitro_function(v560);
      }
      v365 = (std::__shared_weak_count *)a3[1];
      v557 = *a3;
      v558 = v365;
      if (v365) {
        atomic_fetch_add_explicit(&v365->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
      (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v627, v361, &v557);
      v366 = (Espresso::ANECompilerEngine::compiler *)v627.__r_.__value_.__r.__words[0];
      unint64_t v367 = v627.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      v368 = v558;
      if (!v558) {
        goto LABEL_631;
      }
    }
    nitro::nitro_function::nitro_function(v368);
LABEL_631:
    (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 448))(buf);
    if (!*(void *)buf)
    {
      v369 = (char *)operator new(0x58uLL);
      *((void *)v369 + 1) = 0;
      *((void *)v369 + 2) = 0;
      *(void *)v369 = &unk_1EE389920;
      *((void *)v369 + 3) = &unk_1EE36BEB0;
      *(_OWORD *)(v369 + 56) = 0u;
      *(_OWORD *)(v369 + 72) = 0u;
      *((_DWORD *)v369 + 8) = v367 >> 2;
      *((void *)v369 + 5) = v366;
      v369[48] = 0;
      v370 = *(std::__shared_weak_count **)&buf[8];
      *(void *)long long buf = v369 + 24;
      *(void *)&buf[8] = v369;
      if (v370)
      {
        nitro::nitro_function::nitro_function(v370);
        if (!*(void *)buf) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
      }
    }
    v371 = (std::__shared_weak_count *)a3[1];
    v551 = *a3;
    v552 = v371;
    if (v371) {
      atomic_fetch_add_explicit(&v371->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v627, "blob_biases_f16");
    int v372 = (*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v361, &v551);
    if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v627.__r_.__value_.__l.__data_);
    }
    if (v552) {
      nitro::nitro_function::nitro_function(v552);
    }
    if (v372 < 0)
    {
      v376 = *(int **)(*(void *)buf + 16);
      uint64_t v377 = *(int *)(*(void *)buf + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v627, 2 * v377, 1, 1, 1);
      std::string::size_type v378 = v627.__r_.__value_.__r.__words[0];
      v379 = *(const unsigned __int8 **)(v627.__r_.__value_.__r.__words[0] + 16);
      if (v377)
      {
        v380 = *(_WORD **)(v627.__r_.__value_.__r.__words[0] + 16);
        do
        {
          int v381 = *v376++;
          _S0 = v381;
          __asm { FCVT            H0, S0 }
          *v380++ = _S0;
          --v377;
        }
        while (v377);
      }
      v383 = (std::__shared_weak_count *)v627.__r_.__value_.__l.__size_;
      if (v627.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v627.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        v379 = *(const unsigned __int8 **)(v378 + 16);
      }
      uint64_t v364 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v379, *(int *)(v378 + 8));
      if (v383) {
        nitro::nitro_function::nitro_function(v383);
      }
      v384 = NSNumber;
      if (v532) {
        uint64_t v385 = 0;
      }
      else {
      v393 = [v384 numberWithUnsignedLong:v385];
      }
      [v358 setObject:v393 forKeyedSubscript:@"BiasIndex"];

      if (v383) {
        nitro::nitro_function::nitro_function(v383);
      }
    }
    else
    {
      v373 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, v366, (const void *)v367));
      [v358 setObject:v373 forKeyedSubscript:@"BiasIndex"];
    }
    v394 = [NSNumber numberWithInt:v364];
    [v358 setObject:v394 forKeyedSubscript:@"BiasOffset"];

    [v358 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    [v242 setObject:v358 forKeyedSubscript:@"BiasScaleGroupData"];
    if (!*(unsigned char *)(a2 + 121))
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v627.__r_.__value_.__l.__data_, a5);
      v395 = v636;
      v636 = @"GOC";

      objc_storeStrong(&v637, v242);
      v396 = v595;
      if ((unint64_t)v595 >= v596)
      {
        v397 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v594, (uint64_t)&v627);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v595, (uint64_t)&v627);
        v397 = v396 + 6;
      }
      v595 = v397;

      if (v634 < 0) {
        operator delete(v633);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v630;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v628;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v627.__r_.__value_.__l.__data_);
      }
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }

    goto LABEL_551;
  }
  if (*(unsigned char *)(a2 + 121)) {
    goto LABEL_925;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 448))(&v563);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias((uint64_t)&__str, (uint64_t)&v563, *(_DWORD *)(*a7 + 16), *(unsigned __int8 *)(a2 + 384), 0, 0.0);
  if (v564) {
    nitro::nitro_function::nitro_function(v564);
  }
  long long v211 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v213 = __str.__r_.__value_.__r.__words[2];
  v212 = (std::__shared_weak_count *)v649;
  if ((void)v649) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v649 + 8), 1uLL, memory_order_relaxed);
  }
  v214 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  if (*((void *)&v211 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v211 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v215 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v214, *(const unsigned __int8 **)(v211 + 16), *(int *)(v211 + 8));
  if (*((void *)&v211 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v211 + 1));
  }
  if (v212) {
    atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v216 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v214, *(const unsigned __int8 **)(v213 + 16), *(int *)(v213 + 8));
  if (v212) {
    nitro::nitro_function::nitro_function(v212);
  }
  v217 = objc_opt_new();
  v218 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
  [v217 setObject:v218 forKeyedSubscript:@"BiasCount"];

  v219 = [NSNumber numberWithInt:v216];
  [v217 setObject:v219 forKeyedSubscript:@"BiasOffset"];

  v220 = NSNumber;
  if (v532) {
    uint64_t v221 = 0;
  }
  else {
  v243 = [v220 numberWithUnsignedLong:v221];
  }
  [v217 setObject:v243 forKeyedSubscript:@"BiasIndex"];

  [v217 setObject:@"Float32" forKeyedSubscript:@"BiasType"];
  v244 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
  [v217 setObject:v244 forKeyedSubscript:@"ScaleCount"];

  v245 = [NSNumber numberWithInt:v215];
  [v217 setObject:v245 forKeyedSubscript:@"ScaleOffset"];

  v246 = NSNumber;
  if (v532) {
    uint64_t v247 = 0;
  }
  else {
  v248 = [v246 numberWithUnsignedLong:v247];
  }
  [v217 setObject:v248 forKeyedSubscript:@"ScaleIndex"];

  [v217 setObject:@"Float32" forKeyedSubscript:@"ScaleType"];
  v249 = objc_opt_new();
  [v249 setObject:v217 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v627.__r_.__value_.__l.__data_, a5);
  v250 = v636;
  v636 = @"GOC";

  objc_storeStrong(&v637, v249);
  v251 = v595;
  if ((unint64_t)v595 >= v596)
  {
    unint64_t v253 = 0x8E38E38E38E38E39 * (((uint64_t)v595 - v594) >> 4);
    if (v253 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v254 = 0x1C71C71C71C71C72 * ((uint64_t)(v596 - v594) >> 4);
    if (v254 <= v253 + 1) {
      unint64_t v254 = v253 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v596 - v594) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v255 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v255 = v254;
    }
    *((void *)&v641 + 1) = &v596;
    if (v255) {
      unint64_t v255 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v255);
    }
    else {
      uint64_t v256 = 0;
    }
    *(void *)long long buf = v255;
    *(void *)&buf[8] = v255 + 144 * v253;
    *(void *)&buf[16] = *(void *)&buf[8];
    *(void *)&long long v641 = v255 + 144 * v256;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v627);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v594, buf);
    v252 = v595;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v595, (uint64_t)&v627);
    v252 = v251 + 6;
  }
  v595 = v252;

  if (v634 < 0) {
    operator delete(v633);
  }
  *(void *)long long buf = &v630;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v628;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v627.__r_.__value_.__l.__data_);
  }

  if (v212) {
    nitro::nitro_function::nitro_function(v212);
  }
  if (*((void *)&v211 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v211 + 1));
  }
  if (v212) {
    nitro::nitro_function::nitro_function(v212);
  }
  if (*((void *)&v211 + 1))
  {
    v312 = (std::__shared_weak_count *)*((void *)&v211 + 1);
    goto LABEL_550;
  }
LABEL_551:
  if (*(_DWORD *)(a4 + 24))
  {
    if (*(unsigned char *)(a2 + 121))
    {
      id v331 = *(id *)(v594 + 128);
    }
    else
    {
      id v331 = (id)objc_opt_new();
    }
    [v331 setObject:@"ReLU" forKeyedSubscript:@"Type"];
    if (*(unsigned char *)(a2 + 121)) {
      goto LABEL_720;
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v627.__r_.__value_.__l.__data_, a5);
    v332 = v636;
    v636 = @"Neuron";

    objc_storeStrong(&v637, v331);
    v333 = v595;
    if ((unint64_t)v595 >= v596)
    {
      unint64_t v335 = 0x8E38E38E38E38E39 * (((uint64_t)v595 - v594) >> 4);
      if (v335 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v336 = 0x1C71C71C71C71C72 * ((uint64_t)(v596 - v594) >> 4);
      if (v336 <= v335 + 1) {
        unint64_t v336 = v335 + 1;
      }
      v337 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v596 - v594) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v336);
      *((void *)&v641 + 1) = &v596;
      if (v337) {
        v337 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v337);
      }
      else {
        uint64_t v338 = 0;
      }
      *(void *)long long buf = v337;
      *(void *)&buf[8] = &v337[144 * v335];
      *(void *)&buf[16] = *(void *)&buf[8];
      *(void *)&long long v641 = &v337[144 * v338];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v627);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v594, buf);
      v334 = v595;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v595, (uint64_t)&v627);
      v334 = v333 + 6;
    }
    v595 = v334;

    if (v634 < 0) {
      operator delete(v633);
    }
    *(void *)long long buf = &v630;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v628;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(v627.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_720;
    }
    v344 = (void *)v627.__r_.__value_.__r.__words[0];
    goto LABEL_586;
  }
  if (!*(_DWORD *)(a4 + 28))
  {
    if (*(_DWORD *)(a4 + 60) != -1) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    }
    goto LABEL_721;
  }
  if (*(unsigned char *)(a2 + 121))
  {
    id v331 = *(id *)(v594 + 128);
  }
  else
  {
    id v331 = (id)objc_opt_new();
  }
  [v331 setObject:@"Tanh" forKeyedSubscript:@"Type"];
  if (*(unsigned char *)(a2 + 121))
  {
LABEL_720:

LABEL_721:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 560) + 32))(a1 + 560, a2, &v594);
    goto LABEL_722;
  }
  v339 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v627, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v339 + 472, (uint64_t)&v627, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v627.__r_.__value_.__l.__data_);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)*a3 + 472);
  v340 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v342 = v340;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_590;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_590;
    }
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_596:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v627.__r_.__value_.__l.__data_, a5);
    v348 = v636;
    v636 = @"Neuron";

    objc_storeStrong(&v637, v331);
    v349 = v595;
    if ((unint64_t)v595 >= v596)
    {
      unint64_t v352 = 0x8E38E38E38E38E39 * (((uint64_t)v595 - v594) >> 4);
      if (v352 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v353 = 0x1C71C71C71C71C72 * ((uint64_t)(v596 - v594) >> 4);
      if (v353 <= v352 + 1) {
        unint64_t v353 = v352 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v596 - v594) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v354 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v354 = v353;
      }
      *((void *)&v641 + 1) = &v596;
      if (v354) {
        unint64_t v354 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v354);
      }
      else {
        uint64_t v355 = 0;
      }
      *(void *)long long buf = v354;
      *(void *)&buf[8] = v354 + 144 * v352;
      *(void *)&buf[16] = *(void *)&buf[8];
      *(void *)&long long v641 = v354 + 144 * v355;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v627);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v594, buf);
      v350 = v595;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v595, (uint64_t)&v627);
      v350 = v349 + 6;
    }
    v595 = v350;

    if (v634 < 0) {
      operator delete(v633);
    }
    *(void *)long long buf = &v630;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v628;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v627.__r_.__value_.__l.__data_);
    }

    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_720;
    }
    v344 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_586:
    operator delete(v344);
    goto LABEL_720;
  }
LABEL_590:
  if (!Espresso::ANECompilerEngine::is_mix(v340, v341)) {
    goto LABEL_596;
  }
  v345 = (long long *)&v595[-6];
  std::string::append(v595 - 6, "_pre_tanh");
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 560) + 32))(a1 + 560, a2, &v594);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v627, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v346 = v630;
  for (i1 = (char *)v631; i1 != v346; i1 -= 24)
  {
    if (*(i1 - 1) < 0) {
      operator delete(*((void **)i1 - 3));
    }
  }
  v631 = (std::string *)v346;
  if ((unint64_t)v346 >= v632)
  {
    v351 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v630, (uint64_t)v345);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v630, v345);
    v351 = (std::string *)(v346 + 24);
  }
  v631 = v351;
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)(a1 + 560) + 48))(a1 + 560, a2, &v627);

  if (v634 < 0) {
    operator delete(v633);
  }
  *(void *)long long buf = &v630;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v628;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v627.__r_.__value_.__l.__data_);
  }

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

LABEL_722:
  v627.__r_.__value_.__r.__words[0] = (std::string::size_type)&v594;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v627);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&v606);
}

void sub_192720C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  nitro::nitro_function::nitro_function(v22);
  nitro::nitro_function::nitro_function(a10);
  nitro::nitro_function::nitro_function(a11);

  STACK[0x3B0] = (unint64_t)&STACK[0x210];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

id std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(std::string *a1, uint64_t a2)
{
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(a1, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a2);
  a1[5].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(a2 + 120);
  id result = *(id *)(a2 + 128);
  a1[5].__r_.__value_.__l.__size_ = (std::string::size_type)result;
  a1[5].__r_.__value_.__r.__words[2] = *(void *)(a2 + 136);
  return result;
}

uint64_t std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x1C71C71C71C71C7) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v7 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v7 = v3;
  }
  int v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v11 = v7;
  uint64_t v12 = (std::string *)(v7 + 144 * v2);
  unint64_t v14 = v7 + 144 * v8;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v12, a2);
  uint64_t v13 = v12 + 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_192721D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8(Espresso::ANECompilerEngine::final_anec_weights_t *this, Espresso::ANECompilerEngine::ane_kernel *a2, void *a3)
{
  (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *))(*(void *)a2 + 128))(&v7, a2);
  int v5 = operator new(0x60uLL);
  v5[1] = 0;
  v5[2] = 0;
  *int v5 = &unk_1EE3898B0;
  v5[3] = &unk_1EE36BE70;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 2) = v7;
  v5[6] = a3;
  *((unsigned char *)v5 + 56) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = v5 + 3;
  *((void *)this + 9) = v5;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  uint64_t vars8;

  long long v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = v7;
  *((void *)this + 21) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void **)(*a3 + 16);

  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8(this, a2, v9);
}

{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  uint64_t vars8;

  long long v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 23);
  *((void *)this + 22) = v7;
  *((void *)this + 23) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void **)(*a3 + 24);

  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8(this, a2, v9);
}

void sub_192721E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32(Espresso::ANECompilerEngine::final_anec_weights_t *this, Espresso::ANECompilerEngine::ane_kernel *a2, void *a3)
{
  (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *))(*(void *)a2 + 128))(&v7, a2);
  int v5 = operator new(0x60uLL);
  v5[1] = 0;
  v5[2] = 0;
  *int v5 = &unk_1EE3899C8;
  v5[3] = &unk_1EE36BF10;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 2) = v7;
  v5[6] = a3;
  *((unsigned char *)v5 + 56) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = v5 + 3;
  *((void *)this + 3) = v5;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  uint64_t vars8;

  long long v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 13);
  *((void *)this + 12) = v7;
  *((void *)this + 13) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void **)(*a3 + 24);

  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32(this, a2, v9);
}

{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  uint64_t vars8;

  long long v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = v7;
  *((void *)this + 11) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void **)(*a3 + 16);

  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32(this, a2, v9);
}

void sub_192721F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(Espresso::ANECompilerEngine::final_anec_weights_t *this, Espresso::ANECompilerEngine::ane_kernel *a2, void *a3)
{
  (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *))(*(void *)a2 + 128))(&v7, a2);
  int v5 = operator new(0x60uLL);
  v5[1] = 0;
  v5[2] = 0;
  *int v5 = &unk_1EE389D80;
  v5[3] = &unk_1EE36C130;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 2) = v7;
  v5[6] = a3;
  *((unsigned char *)v5 + 56) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = v5 + 3;
  *((void *)this + 5) = v5;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  uint64_t vars8;

  long long v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v7;
  *((void *)this + 17) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void **)(*a3 + 24);

  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(this, a2, v9);
}

{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  uint64_t vars8;

  long long v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = v7;
  *((void *)this + 21) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void **)(*a3 + 16);

  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(this, a2, v9);
}

{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  uint64_t vars8;

  long long v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = v7;
  *((void *)this + 19) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void **)(*a3 + 16);

  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(this, a2, v9);
}

void sub_192722038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE389A70;
  *((void *)v6 + 3) = &unk_1EE36BF70;
  double result = 0.0;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 8) = a3;
  *((void *)v6 + 5) = a2;
  v6[48] = 0;
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(void *a1, uint64_t a2, uint64_t *a3, Espresso::quantized_weights_helper **a4, void *a5, Espresso::quantized_weights_helper ***a6)
{
  v111[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v107 = (id *)a2;
  uint64_t v108 = a1;
  id v106 = a5;
  char v105 = *(unsigned char *)(a2 + 552);
  v104[0] = (Espresso::quantized_weights_helper ***)&v108;
  v104[1] = a6;
  v104[2] = (Espresso::quantized_weights_helper ***)&v107;
  v104[3] = (Espresso::quantized_weights_helper ***)&v106;
  v104[4] = (Espresso::quantized_weights_helper ***)&v105;
  uint64_t v10 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  unint64_t v11 = [v10 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v12 = [v11 objectForKeyedSubscript:@"espresso.anecompiler.always_bloat"];
  int v13 = [v12 BOOLValue];

  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<rdar://problem/39402422> 257a: \"Illegal cog size\" or \"NE kernel blob too large \" assertion when using large convolutions with int8 weights");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
    goto LABEL_10;
  }
  unint64_t v14 = *a4;
  if (*((void *)*a4 + 4) || *((void *)v14 + 6) || *((void *)v14 + 8))
  {
    int v15 = v108;
    if (!v108
      || *(__int16 *)((*(uint64_t (**)(void *))(*v108 + 384))(v108) + 96) <= 1
      && *(__int16 *)((*(uint64_t (**)(void *))(*v15 + 384))(v15) + 98) < 2)
    {
      int v17 = v107;
      Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
      BOOL v18 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
      char is_mix = Espresso::ANECompilerEngine::is_mix(v18, v19);
      int v21 = *a4;
      if (*((void *)*a4 + 4))
      {
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        uint64_t v90 = v22;
        int v23 = Espresso::ANECompilerEngine::is_mix(v18, (NSString *)&v22->__vftable);
        int v25 = Espresso::ANECompilerEngine::is_mix(v18, v24);
        if (v23) {
          BOOL v26 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_fp16_palettes;
        }
        else {
          BOOL v26 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_fp16_palettes;
        }
        uint64_t v27 = (uint64_t)*a4;
        v111[0] = &unk_1EE37C328;
        v111[1] = v17;
        v111[3] = v111;
        if (v25) {
          uint64_t v28 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_fp16_palettes;
        }
        else {
          uint64_t v28 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_fp16_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_f16_weights(v27, v106, (uint64_t)v111, v26, v28, is_mix, (uint64_t)&__p);
        int v29 = v111;
      }
      else if (*((void *)v21 + 8))
      {
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        uint64_t v90 = v30;
        int v31 = Espresso::ANECompilerEngine::is_mix(v18, (NSString *)&v30->__vftable);
        int v33 = Espresso::ANECompilerEngine::is_mix(v18, v32);
        if (v31) {
          uint64_t v34 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_uint8_palettes;
        }
        else {
          uint64_t v34 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_uint8_palettes;
        }
        uint64_t v35 = (uint64_t)*a4;
        v110[0] = &unk_1EE37C328;
        v110[1] = v17;
        v110[3] = v110;
        if (v33) {
          char v36 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_uint8_palettes;
        }
        else {
          char v36 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_uint8_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_uint8_weights(v35, v106, (uint64_t)v110, v34, v36, is_mix, (uint64_t)&__p);
        int v29 = v110;
      }
      else
      {
        if (!*((void *)v21 + 6)) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown lookup table type.");
        }
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        uint64_t v90 = v37;
        int v38 = Espresso::ANECompilerEngine::is_mix(v18, (NSString *)&v37->__vftable);
        int v40 = Espresso::ANECompilerEngine::is_mix(v18, v39);
        if (v38) {
          int v41 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_int8_palettes;
        }
        else {
          int v41 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_int8_palettes;
        }
        uint64_t v42 = (uint64_t)*a4;
        v109[0] = &unk_1EE37C328;
        v109[1] = v17;
        void v109[3] = v109;
        if (v40) {
          float v43 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_int8_palettes;
        }
        else {
          float v43 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_int8_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_int8_weights(v42, v106, (uint64_t)v109, v41, v43, is_mix, (uint64_t)&__p);
        int v29 = v109;
      }
      std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v29);

      goto LABEL_38;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Dilated + LUT");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
    goto LABEL_10;
  }
  if (*((_DWORD *)v14 + 39) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Not 8 bits");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
LABEL_10:
    if (SHIBYTE(v91) < 0)
    {
      int v16 = __p;
LABEL_12:
      operator delete(v16);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if (*((unsigned char *)v14 + 164))
  {
    if (Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(v14))
    {
      uint64_t v44 = v108[59];
      uint64_t v45 = *(void *)(v44 + 80);
      uint64_t v46 = *(std::__shared_weak_count **)(v44 + 88);
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v47 = 0;
      if (v45)
      {
        LODWORD(__p) = 0;
        vDSP_minmgv(*(const float **)(v45 + 16), 1, (float *)&__p, *(int *)(v45 + 8));
        if (*(float *)&__p < 0.000061035) {
          BOOL v47 = 1;
        }
      }
      if (v46) {
        nitro::nitro_function::nitro_function(v46);
      }
      if (!v47)
      {
        std::string::size_type v59 = v108;
        BOOL v60 = (std::__shared_weak_count *)a3[1];
        uint64_t v102 = *a3;
        int v103 = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        uint64_t v61 = (*(uint64_t (**)(void *, uint64_t *, void *, void **))(v59[70] + 88))(v59 + 70, &v102, v59, &__p);
        if (SHIBYTE(v91) < 0) {
          operator delete(__p);
        }
        if (v103) {
          nitro::nitro_function::nitro_function(v103);
        }
        if ((v61 & 0x80000000) != 0)
        {
          uint64_t v67 = *(void *)*a4;
          unint64_t v66 = (std::__shared_weak_count *)*((void *)*a4 + 1);
          if (v66)
          {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v68 = v107;
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v69 = v66;
          }
          else
          {
            uint64_t v69 = 0;
            unint64_t v68 = v107;
          }
          uint64_t v61 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(v68 + 16), *(const unsigned __int8 **)(v67 + 16), *(int *)(v67 + 8));
          if (v69) {
            nitro::nitro_function::nitro_function(v69);
          }
          if (v105) {
            uint64_t weights_file_index = 0;
          }
          else {
          if (v108) {
            long long v81 = (Espresso::ANECompilerEngine::ane_kernel *)(v108 + 70);
          }
          else {
            long long v81 = 0;
          }
          v101[0] = v67;
          v101[1] = v66;
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v81, v101);
          if (v66)
          {
            nitro::nitro_function::nitro_function(v66);
            nitro::nitro_function::nitro_function(v66);
          }
        }
        else
        {
          uint64_t v62 = v108;
          uint64_t v63 = (std::__shared_weak_count *)a3[1];
          uint64_t v99 = *a3;
          id v100 = v63;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v98, "W_S8");
          (*(void (**)(void **__return_ptr))(v62[70] + 120))(&__p);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v98.__r_.__value_.__l.__data_);
          }
          if (v100) {
            nitro::nitro_function::nitro_function(v100);
          }
          uint64_t weights_file_index = Espresso::ANECompilerEngine::get_primary_weights_file_index(v107, (Espresso::ANECompilerEngine::compiler *)__p, v91);
          if (v108) {
            std::string::size_type v65 = (Espresso::ANECompilerEngine::ane_kernel *)(v108 + 70);
          }
          else {
            std::string::size_type v65 = 0;
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v65, __p);
        }
        unsigned int v82 = [NSNumber numberWithInt:v61];
        [v106 setObject:v82 forKeyedSubscript:@"KernelOffset"];

        uint64_t v83 = [NSNumber numberWithUnsignedLong:weights_file_index];
        [v106 setObject:v83 forKeyedSubscript:@"KernelIndex"];

        [v106 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Overflowing");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Not symmetric");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
    }
    goto LABEL_10;
  }
  uint64_t v48 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat");
  std::string::basic_string[abi:ne180100]<0>(&v97, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v48 + 472, (uint64_t)&__p, (uint64_t)&v97, &v98);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v98.__r_.__value_.__l.__size_ == 1)
    {
      uint64_t v49 = (std::string *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_58;
    }
  }
  else if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) == 1)
  {
    uint64_t v49 = &v98;
LABEL_58:
    BOOL v50 = v49->__r_.__value_.__s.__data_[0] == 49;
    goto LABEL_60;
  }
  BOOL v50 = 0;
LABEL_60:
  uint64_t v51 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat_v2");
  std::string::basic_string[abi:ne180100]<0>(v95, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v51 + 472, (uint64_t)&__p, (uint64_t)v95, &v97);
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v97.__r_.__value_.__l.__size_ == 1)
    {
      uint64_t v52 = (std::string *)v97.__r_.__value_.__r.__words[0];
      goto LABEL_69;
    }
LABEL_70:
    BOOL v53 = 0;
    goto LABEL_71;
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) != 1) {
    goto LABEL_70;
  }
  uint64_t v52 = &v97;
LABEL_69:
  BOOL v53 = v52->__r_.__value_.__s.__data_[0] == 49;
LABEL_71:
  Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(*a4, v50, v53, (uint64_t)&__p);
  if (!__p) {
    goto LABEL_82;
  }
  uint64_t v54 = v94;
  v88[0] = v93;
  v88[1] = (uint64_t)v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v88);
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  if (!is_qbias_zero)
  {
LABEL_82:
    std::string::basic_string[abi:ne180100]<0>(v95, "Unsigned / Not symmetric");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)v95);
LABEL_83:
    if (v96 < 0) {
      operator delete(v95[0]);
    }
    if (v94) {
      nitro::nitro_function::nitro_function(v94);
    }
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
    if (v90) {
      nitro::nitro_function::nitro_function(v90);
    }
    goto LABEL_153;
  }
  uint64_t v56 = (const float **)v91;
  unint64_t v57 = v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v58 = 0;
  if (v56)
  {
    LODWORD(v95[0]) = 0;
    vDSP_minmgv(v56[2], 1, (float *)v95, *((int *)v56 + 2));
    if (*(float *)v95 < 0.000061035) {
      BOOL v58 = 1;
    }
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (v58)
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "Unsigned / Overflowing");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)v95);
    goto LABEL_83;
  }
  uint64_t v70 = v108[59];
  int v72 = v91;
  uint64_t v71 = v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v73 = *(std::__shared_weak_count **)(v70 + 88);
  *(void *)(v70 + 80) = v72;
  *(void *)(v70 + 88) = v71;
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  unsigned int v74 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(v107 + 16);
  int v75 = (const unsigned __int8 **)__p;
  int v76 = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v77 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v74, v75[2], *((int *)v75 + 2));
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  uint64_t v78 = [NSNumber numberWithInt:v77];
  [v106 setObject:v78 forKeyedSubscript:@"KernelOffset"];

  [v106 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
  uint64_t v79 = NSNumber;
  if (v105) {
    uint64_t v80 = 0;
  }
  else {
  uint64_t v84 = [v79 numberWithUnsignedLong:v80];
  }
  [v106 setObject:v84 forKeyedSubscript:@"KernelIndex"];

  if (v108) {
    int v85 = (Espresso::ANECompilerEngine::ane_kernel *)(v108 + 70);
  }
  else {
    int v85 = 0;
  }
  uint64_t v86 = v90;
  v87[0] = __p;
  v87[1] = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v85, v87);
  if (v86) {
    nitro::nitro_function::nitro_function(v86);
  }
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
LABEL_153:
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    int v16 = (void *)v98.__r_.__value_.__r.__words[0];
    goto LABEL_12;
  }
LABEL_38:
}

void sub_192722CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(uint64_t a1, uint64_t a2, int a3, int a4, int a5, double a6)
{
  int v12 = 4 * a3;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v31, 4 * a3, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v29, v12, 1, 1, 1);
  uint64_t v13 = v31;
  if (a3 >= 1)
  {
    uint64_t v14 = a3;
    int v15 = *(float **)(v31 + 16);
    int v16 = *(float **)(v29 + 16);
    int v17 = (float *)(*(void *)(*(void *)a2 + 16) + 8);
    do
    {
      double v18 = *(v17 - 2);
      if (a5) {
        double v19 = 0.0;
      }
      else {
        double v19 = *v17;
      }
      if (a5) {
        double v20 = 1.0;
      }
      else {
        double v20 = 1.0 / v17[1];
      }
      double v21 = v20 * v18;
      double v22 = *(v17 - 1) + -(v19 * v20) * v18;
      if (a4)
      {
        double v23 = (a6 + 1.0) / (fabs(v21) + a6);
        if (v21 < 0.0) {
          double v23 = -v23;
        }
        double v22 = v22 * v23;
      }
      float v24 = v21;
      *v15++ = v24;
      float v25 = v22;
      *v16++ = v25;
      v17 += 4;
      --v14;
    }
    while (v14);
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  BOOL v26 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v26;
  uint64_t v28 = v29;
  uint64_t v27 = v30;
  if (v30)
  {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 16) = v28;
    *(void *)(a1 + 24) = v27;
    nitro::nitro_function::nitro_function(v27);
    if (!v26) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 16) = v29;
    *(void *)(a1 + 24) = 0;
    if (!v26) {
      return;
    }
  }

  nitro::nitro_function::nitro_function(v26);
}

void sub_192723104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t(Espresso::ANECompilerEngine::final_anec_weights_t *this)
{
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  int v12 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
}

void std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  unint64_t v3 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void Espresso::blob<unsigned char,1>::make(void *a1, int a2)
{
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<float,4>(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v8 = 0;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  __src = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  signed int v9 = *(_DWORD *)(*(void *)a1 + 8);
  do
  {
    v9 *= *(_DWORD *)(*(void *)a1 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  Espresso::compress_sparse_kernel<float>(*(float **)(*(void *)a1 + 24), v9, &__p, &__src);
  unint64_t v11 = __src;
  uint64_t v10 = v33;
  unint64_t v12 = v33 - (unsigned char *)__src;
  uint64_t v13 = (v33 - (unsigned char *)__src) >> 2;
  float v14 = 1.0 - (float)((float)(unint64_t)v13 / (float)v9);
  int v17 = Espresso::espresso_os_log_subsystem(v15, v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (*(void *)a1) {
      signed int v28 = v9;
    }
    else {
      signed int v28 = 0;
    }
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v12 >> 2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v28;
    *(_WORD *)&buf[14] = 2048;
    double v36 = v14;
    _os_log_debug_impl(&dword_1920CB000, v17, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", buf, 0x18u);
  }

  if (v14 < a4) {
    goto LABEL_11;
  }
  if (v10 == v11)
  {
    double v23 = Espresso::espresso_os_log_subsystem(v18, v19);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1920CB000, v23, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", buf, 2u);
    }

LABEL_11:
    uint64_t v13 = 0;
    goto LABEL_17;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v12 & 0xFFFFFFFC, 1, 1, 1);
  uint64_t v20 = *(void *)buf;
  double v21 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = *(_OWORD *)buf;
  if (v21)
  {
    nitro::nitro_function::nitro_function(v21);
    uint64_t v22 = *a2;
  }
  else
  {
    uint64_t v22 = v20;
  }
  memcpy(*(void **)(v22 + 16), __src, *(int *)(v22 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v30 - __p, 1, 1, 1);
  uint64_t v24 = *(void *)buf;
  float v25 = (std::__shared_weak_count *)a3[1];
  *(_OWORD *)a3 = *(_OWORD *)buf;
  if (v25)
  {
    nitro::nitro_function::nitro_function(v25);
    uint64_t v26 = *a3;
  }
  else
  {
    uint64_t v26 = v24;
  }
  memcpy(*(void **)(v26 + 16), __p, v30 - (unsigned char *)__p);
LABEL_17:
  if (__p)
  {
    unint64_t v30 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    int v33 = __src;
    operator delete(__src);
  }
  return v13;
}

void sub_19272358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<unsigned short,4>(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v8 = 0;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  __src = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  LODWORD(v9) = *(_DWORD *)(*(void *)a1 + 8);
  do
  {
    uint64_t v9 = (*(_DWORD *)(*(void *)a1 + 12 + v8) * v9);
    v8 += 4;
  }
  while (v8 != 12);
  uint64_t v10 = *(void *)(*(void *)a1 + 24);
  if (v9)
  {
    LODWORD(v11) = 0;
    unint64_t v12 = *(short float **)(*(void *)a1 + 24);
    uint64_t v13 = v9;
    do
    {
      short float v14 = *v12++;
      _H1 = fabsl(v14);
      __asm { FCVT            S1, H1 }
      if (_S1 <= 0.00001) {
        unint64_t v11 = v11;
      }
      else {
        unint64_t v11 = (v11 + 1);
      }
      --v13;
    }
    while (v13);
  }
  else
  {
    unint64_t v11 = 0;
  }
  buf[0] = 0;
  std::vector<unsigned char>::__append(&__p, ((v9 - 1) >> 3) + 1, buf);
  std::vector<unsigned short>::resize((char **)&__src, v11);
  if (v9)
  {
    uint64_t v23 = 0;
    unsigned int v24 = 0;
    do
    {
      short float v25 = *(short float *)(v10 + 2 * v23);
      _H2 = fabsl(v25);
      __asm { FCVT            S2, H2 }
      if (_S2 > 0.00001)
      {
        *((short float *)__src + v24++) = v25;
        *((unsigned char *)__p + (v23 >> 3)) |= 1 << (v23 & 7);
      }
      ++v23;
    }
    while (v9 != v23);
  }
  uint64_t v29 = __src;
  signed int v28 = v49;
  unint64_t v30 = v49 - (unsigned char *)__src;
  uint64_t v31 = (v49 - (unsigned char *)__src) >> 1;
  float v32 = 1.0 - (float)((float)(unint64_t)v31 / (float)(int)v9);
  int v33 = Espresso::espresso_os_log_subsystem(v21, v22);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    if (*(void *)a1) {
      int v44 = v9;
    }
    else {
      int v44 = 0;
    }
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v30 >> 1;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v44;
    *(_WORD *)&buf[14] = 2048;
    double v52 = v32;
    _os_log_debug_impl(&dword_1920CB000, v33, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", buf, 0x18u);
  }

  if (v32 < a4) {
    goto LABEL_24;
  }
  if (v28 == v29)
  {
    int v39 = Espresso::espresso_os_log_subsystem(v34, v35);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1920CB000, v39, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", buf, 2u);
    }

LABEL_24:
    uint64_t v31 = 0;
    goto LABEL_30;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v30 & 0xFFFFFFFE, 1, 1, 1);
  uint64_t v36 = *(void *)buf;
  uint64_t v37 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = *(_OWORD *)buf;
  if (v37)
  {
    nitro::nitro_function::nitro_function(v37);
    uint64_t v38 = *a2;
  }
  else
  {
    uint64_t v38 = v36;
  }
  memcpy(*(void **)(v38 + 16), __src, *(int *)(v38 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v46 - __p, 1, 1, 1);
  uint64_t v40 = *(void *)buf;
  int v41 = (std::__shared_weak_count *)a3[1];
  *(_OWORD *)a3 = *(_OWORD *)buf;
  if (v41)
  {
    nitro::nitro_function::nitro_function(v41);
    uint64_t v42 = *a3;
  }
  else
  {
    uint64_t v42 = v40;
  }
  memcpy(*(void **)(v42 + 16), __p, v46 - (unsigned char *)__p);
LABEL_30:
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    uint64_t v49 = __src;
    operator delete(__src);
  }
  return v31;
}

void sub_192723904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<unsigned char,4>(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v8 = 0;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  __src = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  std::string __p = 0;
  LODWORD(v9) = *(_DWORD *)(*(void *)a1 + 8);
  do
  {
    uint64_t v9 = (*(_DWORD *)(*(void *)a1 + 12 + v8) * v9);
    v8 += 4;
  }
  while (v8 != 12);
  uint64_t v10 = *(void *)(*(void *)a1 + 24);
  if (v9)
  {
    LODWORD(v11) = 0;
    unint64_t v12 = *(unsigned __int8 **)(*(void *)a1 + 24);
    uint64_t v13 = v9;
    do
    {
      if (*v12++) {
        unint64_t v11 = (v11 + 1);
      }
      else {
        unint64_t v11 = v11;
      }
      --v13;
    }
    while (v13);
  }
  else
  {
    unint64_t v11 = 0;
  }
  buf[0] = 0;
  std::vector<unsigned char>::__append(&__p, ((v9 - 1) >> 3) + 1, buf);
  int v16 = (const char *)(v11 - (v37 - (unsigned char *)__src));
  if (v11 <= v37 - (unsigned char *)__src)
  {
    if (v11 < v37 - (unsigned char *)__src) {
      uint64_t v37 = (char *)__src + v11;
    }
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)&__src, (size_t)v16);
  }
  if (v9)
  {
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*(unsigned char *)(v10 + v17))
      {
        *((unsigned char *)__src + v18++) = *(unsigned char *)(v10 + v17);
        *((unsigned char *)__p + (v17 >> 3)) |= 1 << (v17 & 7);
      }
      ++v17;
    }
    while (v9 != v17);
  }
  uint64_t v19 = v37 - (unsigned char *)__src;
  float v20 = 1.0 - (float)((float)(unint64_t)(v37 - (unsigned char *)__src) / (float)(int)v9);
  double v21 = Espresso::espresso_os_log_subsystem(v15, v16);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    if (*(void *)a1) {
      int v32 = v9;
    }
    else {
      int v32 = 0;
    }
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v32;
    *(_WORD *)&buf[14] = 2048;
    double v40 = v20;
    _os_log_debug_impl(&dword_1920CB000, v21, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", buf, 0x18u);
  }

  if (v20 < a4) {
    goto LABEL_28;
  }
  if (!v19)
  {
    uint64_t v27 = Espresso::espresso_os_log_subsystem(v22, v23);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1920CB000, v27, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", buf, 2u);
    }

LABEL_28:
    uint64_t v19 = 0;
    goto LABEL_34;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v19, 1, 1, 1);
  uint64_t v24 = *(void *)buf;
  short float v25 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = *(_OWORD *)buf;
  if (v25)
  {
    nitro::nitro_function::nitro_function(v25);
    uint64_t v26 = *a2;
  }
  else
  {
    uint64_t v26 = v24;
  }
  memcpy(*(void **)(v26 + 16), __src, *(int *)(v26 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v34 - __p, 1, 1, 1);
  uint64_t v28 = *(void *)buf;
  uint64_t v29 = (std::__shared_weak_count *)a3[1];
  *(_OWORD *)a3 = *(_OWORD *)buf;
  if (v29)
  {
    nitro::nitro_function::nitro_function(v29);
    uint64_t v30 = *a3;
  }
  else
  {
    uint64_t v30 = v28;
  }
  memcpy(*(void **)(v30 + 16), __p, v34 - (unsigned char *)__p);
LABEL_34:
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    uint64_t v37 = (char *)__src;
    operator delete(__src);
  }
  return v19;
}

void sub_192723C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<signed char,4>(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v8 = 0;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  __src = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::string __p = 0;
  LODWORD(v9) = *(_DWORD *)(*(void *)a1 + 8);
  do
  {
    uint64_t v9 = (*(_DWORD *)(*(void *)a1 + 12 + v8) * v9);
    v8 += 4;
  }
  while (v8 != 12);
  uint64_t v10 = *(void *)(*(void *)a1 + 24);
  if (v9)
  {
    LODWORD(v11) = 0;
    unint64_t v12 = *(char **)(*(void *)a1 + 24);
    uint64_t v13 = v9;
    do
    {
      int v14 = *v12++;
      if (fabsf((float)v14) <= 0.00001) {
        unint64_t v11 = v11;
      }
      else {
        unint64_t v11 = (v11 + 1);
      }
      --v13;
    }
    while (v13);
  }
  else
  {
    unint64_t v11 = 0;
  }
  buf[0] = 0;
  std::vector<unsigned char>::__append(&__p, ((v9 - 1) >> 3) + 1, buf);
  int v16 = (const char *)(v11 - (v38 - (unsigned char *)__src));
  if (v11 <= v38 - (unsigned char *)__src)
  {
    if (v11 < v38 - (unsigned char *)__src) {
      uint64_t v38 = (char *)__src + v11;
    }
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)&__src, (size_t)v16);
  }
  if (v9)
  {
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      char v19 = *(unsigned char *)(v10 + v17);
      if (fabsf((float)v19) > 0.00001)
      {
        *((unsigned char *)__src + v18++) = v19;
        *((unsigned char *)__p + (v17 >> 3)) |= 1 << (v17 & 7);
      }
      ++v17;
    }
    while (v9 != v17);
  }
  uint64_t v20 = v38 - (unsigned char *)__src;
  float v21 = 1.0 - (float)((float)(unint64_t)(v38 - (unsigned char *)__src) / (float)(int)v9);
  uint64_t v22 = Espresso::espresso_os_log_subsystem(v15, v16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    if (*(void *)a1) {
      int v33 = v9;
    }
    else {
      int v33 = 0;
    }
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v20;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v33;
    *(_WORD *)&buf[14] = 2048;
    double v41 = v21;
    _os_log_debug_impl(&dword_1920CB000, v22, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", buf, 0x18u);
  }

  if (v21 < a4) {
    goto LABEL_28;
  }
  if (!v20)
  {
    uint64_t v28 = Espresso::espresso_os_log_subsystem(v23, v24);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1920CB000, v28, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", buf, 2u);
    }

LABEL_28:
    uint64_t v20 = 0;
    goto LABEL_34;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v20, 1, 1, 1);
  uint64_t v25 = *(void *)buf;
  uint64_t v26 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = *(_OWORD *)buf;
  if (v26)
  {
    nitro::nitro_function::nitro_function(v26);
    uint64_t v27 = *a2;
  }
  else
  {
    uint64_t v27 = v25;
  }
  memcpy(*(void **)(v27 + 16), __src, *(int *)(v27 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v35 - __p, 1, 1, 1);
  uint64_t v29 = *(void *)buf;
  uint64_t v30 = (std::__shared_weak_count *)a3[1];
  *(_OWORD *)a3 = *(_OWORD *)buf;
  if (v30)
  {
    nitro::nitro_function::nitro_function(v30);
    uint64_t v31 = *a3;
  }
  else
  {
    uint64_t v31 = v29;
  }
  memcpy(*(void **)(v31 + 16), __p, v35 - (unsigned char *)__p);
LABEL_34:
  if (__p)
  {
    uint64_t v35 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    uint64_t v38 = (char *)__src;
    operator delete(__src);
  }
  return v20;
}

void sub_192723FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  long long v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      long long v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int v14 = &v8[(void)v12];
    int v15 = &v8[(void)v12 + v4];
    int v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    uint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--int v14 = v18;
      }
      while (v7 != v17);
      long long v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<signed char>::__append(unint64_t *a1, size_t a2)
{
  int v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    long long v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      int v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    char v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  unint64_t v6 = a2 - v5;
  long long v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    char v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = v7 - v3;
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v10);
  unint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  int v14 = &v11[2 * v5];
  int v16 = &v11[2 * v15];
  bzero(v14, 2 * v6);
  uint64_t v17 = &v14[2 * v6];
  while (v13 != v12)
  {
    __int16 v18 = *((_WORD *)v13 - 1);
    v13 -= 2;
    *((_WORD *)v14 - 1) = v18;
    v14 -= 2;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void Espresso::compress_sparse_kernel<float>(float *a1, unsigned int a2, void *a3, void *a4)
{
  if (a2)
  {
    LODWORD(v8) = 0;
    uint64_t v9 = a2;
    uint64_t v10 = a1;
    do
    {
      float v11 = *v10++;
      if (fabsf(v11) <= 0.00001) {
        unint64_t v8 = v8;
      }
      else {
        unint64_t v8 = (v8 + 1);
      }
      --v9;
    }
    while (v9);
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v12 = ((a2 - 1) >> 3) + 1;
  char v17 = 0;
  unint64_t v13 = a3[1] - *a3;
  if (v12 <= v13)
  {
    if (v12 < v13) {
      a3[1] = *a3 + v12;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a3, v12 - v13, &v17);
  }
  std::vector<float>::resize(a4, v8);
  if (a2)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    do
    {
      float v16 = a1[v14];
      if (fabsf(v16) > 0.00001)
      {
        *(float *)(*a4 + 4 * v15++) = v16;
        *(unsigned char *)(*a3 + (v14 >> 3)) |= 1 << (v14 & 7);
      }
      ++v14;
    }
    while (a2 != v14);
  }
}

void std::vector<float>::resize(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)a1, a2 - v2);
  }
}

void Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  int v5 = *(__int16 *)(a3 + 96);
  if (v5 <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = *(__int16 *)(a3 + 96);
  }
  if (v5 > 1) {
    int v7 = (*(_DWORD *)(a3 + 48) - 1) * v5 + 1;
  }
  else {
    int v7 = *(_DWORD *)(a3 + 48);
  }
  int v8 = *(__int16 *)(a3 + 98);
  if (v8 > 1) {
    int v9 = (*(_DWORD *)(a3 + 52) - 1) * v8 + 1;
  }
  else {
    int v9 = *(_DWORD *)(a3 + 52);
  }
  int v10 = v9 * v7;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a1, ((a2[5] * a2[4] * v9 * v7 - 1) >> 3) + 1, 1, 1, 1);
  int v11 = a2[5] * a2[4];
  if (v11 >= 1)
  {
    unsigned int v12 = 0;
    int v13 = 0;
    int v14 = a2[2];
    int v15 = a2[3];
    if (v8 <= 1) {
      int v16 = 1;
    }
    else {
      int v16 = v8;
    }
    int v17 = v7 * v16;
    do
    {
      if (v15 >= 1)
      {
        int v18 = 0;
        unsigned int v19 = v12;
        do
        {
          if (v14 >= 1)
          {
            uint64_t v20 = *a1;
            unsigned int v21 = v19;
            int v22 = v14;
            do
            {
              *(unsigned char *)(*(void *)(v20 + 16) + ((unint64_t)v21 >> 3)) |= 1 << (v21 & 7);
              v21 += v6;
              --v22;
            }
            while (v22);
          }
          ++v18;
          v19 += v17;
        }
        while (v18 != v15);
      }
      ++v13;
      v12 += v10;
    }
    while (v13 != v11);
  }
}

void Espresso::blob<unsigned char,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF90;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned char,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF90;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned char,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(Espresso::quantized_weights_helper ****a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = **a1;
  if (v4
  {
    Espresso::quantized_weights_helper::dequantize_to_float16_2d(v4[59], buf);
  }
  else
  {
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(v4[59], buf);
  }
  uint64_t v6 = *(void *)buf;
  int v5 = *(std::__shared_weak_count **)&buf[8];
  int v7 = (Espresso::ANECompilerEngine::final_anec_weights_t *)a1[1];
  int v8 = **a1;
  if (v8) {
    int v9 = (Espresso::ANECompilerEngine::ane_kernel *)(v8 + 70);
  }
  else {
    int v9 = 0;
  }
  uint64_t v23 = *(void *)buf;
  uint64_t v24 = *(void *)&buf[8];
  if (*(void *)&buf[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(v7, v9, &v23);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unsigned int v12 = Espresso::espresso_os_log_subsystem(v10, v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v21 = a2;
    }
    else {
      unsigned int v21 = (uint64_t *)*a2;
    }
    uint64_t v22 = *(int *)(v6 + 8);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v22;
    _os_log_debug_impl(&dword_1920CB000, v12, OS_LOG_TYPE_DEBUG, "[ANEC/handle_quantized_weights] Bloating (%s) W: %zu", buf, 0x16u);
  }

  int v13 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(*a1[2] + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v13, *(const unsigned __int8 **)(v6 + 16), *(int *)(v6 + 8));
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  int v15 = objc_msgSend(NSNumber, "numberWithInt:", v14, v23, v24);
  [*a1[3] setObject:v15 forKeyedSubscript:@"KernelOffset"];

  [*a1[3] setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  int v16 = NSNumber;
  if (*(unsigned char *)a1[4]) {
    uint64_t weights_file_index = 0;
  }
  else {
  int v18 = [v16 numberWithUnsignedLong:weights_file_index];
  }
  [*a1[3] setObject:v18 forKeyedSubscript:@"KernelIndex"];

  unsigned int v19 = (**a1)[59];
  uint64_t v20 = (std::__shared_weak_count *)*((void *)v19 + 11);
  *((void *)v19 + 10) = 0;
  *((void *)v19 + 11) = 0;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192724A94(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(const char *a1)
{
}

void Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data(Espresso::quantized_weights_helper::linear_quantization_data *this)
{
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine24handle_quantized_weightsIPNS0_18convolution_kernelEEEvT_PNS0_8compilerENSt3__110shared_ptrINS_3netEEENS8_INS_24quantized_weights_helperEEEP19NSMutableDictionaryRNS0_20final_anec_weights_tEEUlPKhmE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, const unsigned __int8 **a2, size_t *a3)
{
  unsigned int v4 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(*(void *)(a1 + 8) + 128), *a2, *a3);
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 552)) {
  return v4;
  }
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C328;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37C328;
  result[1] = v3;
  return result;
}

void std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__func()
{
}

void Espresso::blob<signed char,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE70;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<signed char,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE70;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<signed char,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3898B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3898B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::dilated_conv_bloated_weights<signed char>(void *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int &,int &,int &,int &,void>(a1, a3, a4, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  if (*(__int16 *)(a5 + 98) <= 1) {
    int v8 = 1;
  }
  else {
    int v8 = *(__int16 *)(a5 + 98);
  }
  int v9 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16);
  if (v9 >= 1)
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v13 = *a1;
    int v14 = *(_DWORD *)(*a1 + 8);
    uint64_t v16 = *(unsigned int *)(a2 + 8);
    int v15 = *(_DWORD *)(a2 + 12);
    int v17 = *(__int16 *)(a5 + 96);
    if (v17 <= 1) {
      int v17 = 1;
    }
    int v18 = *(_DWORD *)(*a1 + 12) * v14;
    int v19 = v14 * v8;
    do
    {
      if (v15 >= 1)
      {
        int v20 = 0;
        int v21 = v10;
        do
        {
          if ((int)v16 >= 1)
          {
            uint64_t v22 = v12;
            int v23 = v21;
            uint64_t v24 = v16;
            do
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + 24) + v22++);
              *(unsigned char *)(*(void *)(v13 + 24) + v23) = v25;
              v23 += v17;
              --v24;
            }
            while (v24);
            int v12 = v22;
          }
          ++v20;
          v21 += v19;
        }
        while (v20 != v15);
      }
      ++v11;
      v10 += v18;
    }
    while (v11 != v9);
  }
}

void Espresso::dilated_conv_bloated_weights<float>(void *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a1, a3, a4, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  if (*(__int16 *)(a5 + 98) <= 1) {
    int v8 = 1;
  }
  else {
    int v8 = *(__int16 *)(a5 + 98);
  }
  int v9 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16);
  if (v9 >= 1)
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v13 = *a1;
    int v14 = *(_DWORD *)(*a1 + 8);
    uint64_t v16 = *(unsigned int *)(a2 + 8);
    int v15 = *(_DWORD *)(a2 + 12);
    int v17 = *(__int16 *)(a5 + 96);
    if (v17 <= 1) {
      int v17 = 1;
    }
    int v18 = *(_DWORD *)(*a1 + 12) * v14;
    int v19 = v14 * v8;
    do
    {
      if (v15 >= 1)
      {
        int v20 = 0;
        int v21 = v10;
        do
        {
          if ((int)v16 >= 1)
          {
            uint64_t v22 = *(void *)(a2 + 24);
            uint64_t v23 = *(void *)(v13 + 24);
            uint64_t v24 = v12;
            int v25 = v21;
            uint64_t v26 = v16;
            do
            {
              int v27 = *(_DWORD *)(v22 + 4 * v24++);
              *(_DWORD *)(v23 + 4 * v25) = v27;
              v25 += v17;
              --v26;
            }
            while (v26);
            int v12 = v24;
          }
          ++v20;
          v21 += v19;
        }
        while (v20 != v15);
      }
      ++v11;
      v10 += v18;
    }
    while (v11 != v9);
  }
}

void Espresso::dilated_conv_bloated_weights<unsigned short>(void *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(a1, a3, a4, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  if (*(__int16 *)(a5 + 98) <= 1) {
    int v8 = 1;
  }
  else {
    int v8 = *(__int16 *)(a5 + 98);
  }
  int v9 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16);
  if (v9 >= 1)
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v13 = *a1;
    int v14 = *(_DWORD *)(*a1 + 8);
    uint64_t v16 = *(unsigned int *)(a2 + 8);
    int v15 = *(_DWORD *)(a2 + 12);
    int v17 = *(__int16 *)(a5 + 96);
    if (v17 <= 1) {
      int v17 = 1;
    }
    int v18 = *(_DWORD *)(*a1 + 12) * v14;
    int v19 = v14 * v8;
    do
    {
      if (v15 >= 1)
      {
        int v20 = 0;
        int v21 = v10;
        do
        {
          if ((int)v16 >= 1)
          {
            uint64_t v22 = *(void *)(a2 + 24);
            uint64_t v23 = *(void *)(v13 + 24);
            uint64_t v24 = v12;
            int v25 = v21;
            uint64_t v26 = v16;
            do
            {
              __int16 v27 = *(_WORD *)(v22 + 2 * v24++);
              *(_WORD *)(v23 + 2 * v25) = v27;
              v25 += v17;
              --v26;
            }
            while (v26);
            int v12 = v24;
          }
          ++v20;
          v21 += v19;
        }
        while (v20 != v15);
      }
      ++v11;
      v10 += v18;
    }
    while (v11 != v9);
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  int v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1EE3898B0;
  v10[3] = &unk_1EE36BE70;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  size_t v11 = a3 * (uint64_t)a2 * a4 * a5;
  int v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  v10[6] = v12;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1927253B8(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  unsigned int v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(unint64_t a1)
{
  if (a1 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a1);
}

void std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  int v5 = (long long *)*a1;
  unsigned int v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 144;
    v4 -= 9;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::destroy[abi:ne180100](i - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  long long v3 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 80) = v3;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 10) = 0;
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  __n128 result = (__n128)a2[7];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *(__n128 *)(a1 + 112) = result;
  uint64_t v5 = *((void *)a2 + 16);
  *((void *)a2 + 16) = 0;
  *(void *)(a1 + 128) = v5;
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  return result;
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::weights_helper_weights_shape(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 464))();
}

void Espresso::generic_convolution_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = v3;
  *(void *)(a1 + 512) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::generic_convolution_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 520) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 528);
  *(void *)(a1 + 528) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::get_f16_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 800);
  *a2 = *(void *)(this + 792);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 784);
  *a2 = *(void *)(this + 776);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 648);
  *a2 = *(void *)(this + 640);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::ANECompilerEngine::convolution_kernel::set_weights()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob<float,4>::ptr blob");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1927256EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::convolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 776) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 784);
  *(void *)(a1 + 784) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

BOOL Espresso::ANECompilerEngine::validate_size(int a1, int a2, uint64_t a3, uint64_t a4, int64x2_t *a5, int64x2_t *a6)
{
  if (a1 > a2)
  {
    v33[0] = a5;
    v33[1] = a6;
    if (a6) {
      atomic_fetch_add_explicit(&a6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    int v10 = std::string::append(&v24, " = ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v23, a1);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v23;
    }
    else {
      int v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    int v14 = std::string::append(&v25, (const std::string::value_type *)v12, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v26, " > ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v22, a2);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v22;
    }
    else {
      int v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v22.__r_.__value_.__l.__size_;
    }
    int v20 = std::string::append(&v27, (const std::string::value_type *)v18, v19);
    std::string v28 = *v20;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v28, a4, 0);
    Espresso::emit_kernel_validation_warning(v33, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    uint64_t v34 = (void **)&v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v34);
    uint64_t v34 = (void **)&v30;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (a6) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)a6);
    }
  }
  return a1 <= a2;
}

void sub_1927259D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a55);
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECCrossCorrelationLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 696 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        int v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 87;
    }
    while (v6 != a2);
  }
}

void sub_192725B54(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>(float *a1, CFTypeRef *a2, void *a3)
{
  CFHashCode v7 = CFHash(*a2);
  CFHashCode v8 = v7;
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      CFHashCode v3 = v7;
      if (v7 >= v9) {
        CFHashCode v3 = v7 % v9;
      }
    }
    else
    {
      CFHashCode v3 = (v9 - 1) & v7;
    }
    int v12 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v14 = (unint64_t)i[1];
        if (v14 == v8)
        {
          if (CFEqual(i[2], *a2) == 1) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v15 = operator new(0x18uLL);
  *long long v15 = 0;
  v15[1] = v8;
  v15[2] = *a3;
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *((void *)a1 + 1);
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string v22 = operator new(8 * *(void *)&prime);
          std::string v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          std::string v25 = (void *)*((void *)a1 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = a1 + 4;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  void *v25 = *v31;
                  void *v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                std::string v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        CFHashCode v3 = v8 % v9;
      }
      else {
        CFHashCode v3 = v8;
      }
    }
    else
    {
      CFHashCode v3 = (v9 - 1) & v8;
    }
  }
  int v33 = *(void **)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *long long v15 = *v34;
LABEL_72:
    void *v34 = v15;
    goto LABEL_73;
  }
  *long long v15 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v15;
  v33[v3] = a1 + 4;
  if (*v15)
  {
    unint64_t v35 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_192725F60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::convolution_kernel::__set_weight_raw_blob(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(long long *__return_ptr, uint64_t *))(*a1 + 632))(v17, a1);
  unint64_t v11 = (std::__shared_weak_count *)a1[2];
  v16[0] = a1[1];
  v16[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t *))(a1[70] + 136))(a1 + 70);
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, a1 + 59, v17, v16, v12, 1);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 70, (uint64_t *)a3, a4, a5);
}

void sub_1927260B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::convolution_kernel::~convolution_kernel(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  *(void *)this = &unk_1EE342978;
  uint64_t v2 = (Espresso::ANECompilerEngine::convolution_kernel *)((char *)this + 560);
  *((void *)this + 70) = &unk_1EE342C08;
  CFHashCode v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE342978;
  uint64_t v2 = (Espresso::ANECompilerEngine::convolution_kernel *)((char *)this + 560);
  *((void *)this + 70) = &unk_1EE342C08;
  CFHashCode v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

uint64_t non-virtual thunk to'Espresso::ANECompilerEngine::deconvolution_kernel::weights_helper_quantization_axis(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  return 1;
}

uint64_t non-virtual thunk to'Espresso::ANECompilerEngine::deconvolution_kernel::weights_helper_weights_shape(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 70) + 464))();
}

void non-virtual thunk to'Espresso::ANECompilerEngine::deconvolution_kernel::~deconvolution_kernel(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  uint64_t v2 = (void **)((char *)this - 560);
  *((void *)this - 70) = &unk_1EE343D40;
  *(void *)this = &unk_1EE343FD8;
  CFHashCode v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (void **)((char *)this - 560);
  *((void *)this - 70) = &unk_1EE343D40;
  *(void *)this = &unk_1EE343FD8;
  CFHashCode v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::deconvolution_kernel::compile(Espresso::ANECompilerEngine::deconvolution_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::deconvolution_kernel::compile(Espresso::ANECompilerEngine::deconvolution_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  unsigned int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4
    || (CFHashCode v7 = std::__shared_weak_count::lock(v4)) == 0
    || (CFHashCode v8 = (const Espresso::net *)*((void *)a2 + 1)) == 0)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*((void *)v8 + 72)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v31 = (unsigned __int8 *)*((void *)a3 + 6);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, v31, (long long **)&v31);
  unint64_t v11 = (const void *)*((void *)v9 + 5);
  uint8x8_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = (unsigned __int8 *)a3;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, (long long **)&v31);
  double v14 = (const void *)*((void *)v12 + 5);
  __n128 v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v30[0] = v8;
  v30[1] = (const Espresso::net *)v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v15 = *((_OWORD *)this + 28);
  v28[8] = *((_OWORD *)this + 27);
  v28[9] = v15;
  uint64_t v29 = *((void *)this + 58);
  long long v16 = *((_OWORD *)this + 24);
  v28[4] = *((_OWORD *)this + 23);
  v28[5] = v16;
  long long v17 = *((_OWORD *)this + 26);
  v28[6] = *((_OWORD *)this + 25);
  v28[7] = v17;
  long long v18 = *((_OWORD *)this + 20);
  v28[0] = *((_OWORD *)this + 19);
  v28[1] = v18;
  long long v19 = *((_OWORD *)this + 22);
  v28[2] = *((_OWORD *)this + 21);
  v28[3] = v19;
  if (v11
  {
    unint64_t v26 = v20;
    uint8x8_t v27 = v10;
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      int v21 = v10;
      if (!v14) {
        goto LABEL_19;
      }
    }
    else
    {
      int v21 = 0;
      if (!v14) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    int v21 = 0;
    unint64_t v26 = 0;
    uint8x8_t v27 = 0;
    if (!v14)
    {
LABEL_19:
      std::string v23 = 0;
      uint64_t v24 = 0;
      std::string v25 = 0;
      goto LABEL_20;
    }
  }
  if (!v22) {
    goto LABEL_19;
  }
  uint64_t v24 = v22;
  std::string v25 = v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string v23 = v13;
  }
  else
  {
    std::string v23 = 0;
  }
LABEL_20:
  Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::deconvolution_kernel *>((uint64_t)this, (uint64_t)a2, v30, (uint64_t)v28, (id *)a3, (uint64_t *)&v26, (uint64_t *)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  nitro::nitro_function::nitro_function(v7);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  nitro::nitro_function::nitro_function(v7);
}

void sub_192726618(_Unwind_Exception *a1)
{
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  nitro::nitro_function::nitro_function(v1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::deconvolution_kernel *>(uint64_t a1, uint64_t a2, const Espresso::net **a3, uint64_t a4, id *a5, uint64_t *a6, uint64_t *a7)
{
  v696[3] = *(id *)MEMORY[0x1E4F143B8];
  int v572 = *(unsigned __int8 *)(a2 + 552);
  long long v679 = 0u;
  long long v680 = 0u;
  long long v677 = 0u;
  long long v678 = 0u;
  long long v675 = 0u;
  long long v676 = 0u;
  long long v673 = 0u;
  long long v674 = 0u;
  long long v671 = 0u;
  long long v672 = 0u;
  long long v669 = 0u;
  long long v670 = 0u;
  unint64_t v9 = *a3;
  CFHashCode v8 = (std::__shared_weak_count *)a3[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v665, *a6);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v668, v9, (const Espresso::layer_shape *)v665, 1);
  if (__p)
  {
    v667 = __p;
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unint64_t v11 = *a3;
  uint8x8_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v661, *a7);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v664, v11, (const Espresso::layer_shape *)v661, 1);
  if (v662)
  {
    v663 = v662;
    operator delete(v662);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v12 = *a3;
  __n128 v13 = a5[6];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)*a3 + 45), v13))
  {
    *(void *)long long buf = v13;
    double v14 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v12 + 44, v13, (uint64_t)&std::piecewise_construct, (long long **)buf);
    long long v619 = *(_OWORD *)(v14 + 56);
    *(void *)&long long v621 = 0;
    long long v620 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v620, *((const void **)v14 + 9), *((void *)v14 + 10), (uint64_t)(*((void *)v14 + 10) - *((void *)v14 + 9)) >> 2);
    if (DWORD2(v619) == -1) {
      int v15 = 1;
    }
    else {
      int v15 = DWORD2(v619);
    }
    if ((void)v620)
    {
      *((void *)&v620 + 1) = v620;
      operator delete((void *)v620);
    }
    uint64_t v12 = *a3;
  }
  else
  {
    int v15 = 1;
  }
  long long v16 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v12 + 472);
  __int16 v660 = 0;
  v573 = v16;
  Espresso::ANECompilerEngine::query_dilation_options(a4, 1, v15, (char *)&v660 + 1, &v660, v16);
  int v18 = *(_DWORD *)(a4 + 48);
  int v17 = *(_DWORD *)(a4 + 52);
  int v19 = *(__int16 *)(a4 + 96);
  BOOL v20 = v19 < 2;
  int v21 = *(__int16 *)(a4 + 98);
  if (HIBYTE(v660))
  {
    BOOL v22 = v21 < 2;
  }
  else
  {
    BOOL v20 = 1;
    BOOL v22 = 1;
  }
  if (v20) {
    int v23 = *(_DWORD *)(a4 + 48);
  }
  else {
    int v23 = (v18 - 1) * v19 + 1;
  }
  if (v22) {
    int v24 = *(_DWORD *)(a4 + 52);
  }
  else {
    int v24 = (v17 - 1) * v21 + 1;
  }
  unsigned int v576 = v24;
  unsigned int v577 = v23;
  BOOL v25 = v19 >= 2 && v18 > 1 || v21 > 1 && v17 > 1;
  BOOL v582 = v25;
  uint8x8_t v27 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v578 = [v27 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  BOOL v28 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse((uint64_t)*a3 + 472, v578)
     || *(unsigned char *)(a1 + 688) != 0;
  BOOL v575 = v28;
  uint64_t v29 = (uint64_t)a5[6];
  if ((char *)a5[7] - v29 != (unsigned char *)24)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    goto LABEL_975;
  }
  if (*(unsigned __int16 *)(a4 + 92) - 5 <= 0xFFFFFFFB
    || *(unsigned __int16 *)(a4 + 94) - 5 <= 0xFFFFFFFB)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported configuration");
LABEL_975:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v30 = *a6;
  if (!*a6)
  {
    if (*(char *)(v29 + 23) < 0) {
      uint64_t v29 = *(void *)v29;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v29);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v536 = (uint64_t)a5;
    }
    else {
      uint64_t v536 = (uint64_t)*a5;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v536);
  }
  v658 = 0;
  uint64_t v657 = 0;
  unint64_t v659 = 0;
  if (a1
  {
    uint64_t v31 = objc_opt_new();
    [v31 setObject:@"NCHW" forKeyedSubscript:@"Mode"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v619, a5);
    unint64_t v32 = (void *)*((void *)&v626 + 1);
    *((void *)&v626 + 1) = @"Flatten";

    objc_storeStrong((id *)&v627, v31);
    int v33 = v658;
    if ((unint64_t)v658 >= v659)
    {
      unint64_t v35 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
      if (v35 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v36 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v37 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v37 = v36;
      }
      *((void *)&v689 + 1) = &v659;
      if (v37) {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v37);
      }
      else {
        uint64_t v38 = 0;
      }
      *(void *)long long buf = v37;
      *(void *)&buf[8] = v37 + 144 * v35;
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v689 = v37 + 144 * v38;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v619);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, buf);
      uint64_t v34 = v658;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)&v619);
      uint64_t v34 = v33 + 6;
    }
    v658 = v34;

    if (SBYTE7(v625) < 0) {
      operator delete((void *)v624);
    }
    *(void *)long long buf = &v622;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = (char *)&v620 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SBYTE7(v620) < 0) {
      operator delete((void *)v619);
    }
  }
  obuint64_t j = (id)objc_opt_new();
  [obj setObject:@"Dense" forKeyedSubscript:@"KernelMode"];
  if (*(unsigned char *)(a1 + 809))
  {
    [obj setObject:@"Unity" forKeyedSubscript:@"KernelMode"];
    [obj setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  }
  uint64_t v39 = [NSNumber numberWithInt:v577];
  [obj setObject:v39 forKeyedSubscript:@"KernelWidth"];

  double v40 = [NSNumber numberWithInt:v576];
  [obj setObject:v40 forKeyedSubscript:@"KernelHeight"];

  int v41 = *(_DWORD *)(a4 + 116);
  if (v41 >= 2 && v41 == *(_DWORD *)(a4 + 44) && v41 == *(_DWORD *)(a4 + 40))
  {
    [obj setObject:@"ChannelWiseDeConv" forKeyedSubscript:@"Type"];
    uint64_t v42 = @"ChannelWiseDilatedConv";
  }
  else
  {
    [obj setObject:@"DeConv" forKeyedSubscript:@"Type"];
    uint64_t v42 = @"DilatedConv";
  }
  v571 = v42;
  int v574 = *(_DWORD *)(a4 + 116);
  [obj setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"KernelGroupReuse"];
  if (*(unsigned char *)(a1 + 808)) {
    [obj setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"KernelGroupReuse"];
  }
  if (!*(unsigned char *)(a1 + 809))
  {
    BOOL v60 = (std::__shared_weak_count *)a3[1];
    v655 = *a3;
    v656 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v619, "post_scale");
    uint64_t v61 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
    BOOL v62 = ((*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(a1 + 560, &v655) & 0x80000000) == 0
       || *(void *)(a1 + 624) != 0;
    if (SBYTE7(v620) < 0) {
      operator delete((void *)v619);
    }
    if (v656) {
      nitro::nitro_function::nitro_function(v656);
    }
    if ((_BYTE)v660 || !HIBYTE(v660))
    {
LABEL_112:
      std::string::size_type v65 = (std::__shared_weak_count *)a3[1];
      v653 = *a3;
      v654 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v619, "W_S8");
      uint64_t v66 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v61, &v653);
      if ((int)v66 < 0) {
        BOOL v62 = 0;
      }
      if (SBYTE7(v620) < 0) {
        operator delete((void *)v619);
      }
      if (v654) {
        nitro::nitro_function::nitro_function(v654);
      }
      if (v62)
      {
        uint64_t v67 = (std::__shared_weak_count *)a3[1];
        v651 = *a3;
        v652 = v67;
        if (v67) {
          atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_S8");
        (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v619, v61, &v651);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v652) {
          nitro::nitro_function::nitro_function(v652);
        }
        unint64_t v68 = [NSNumber numberWithInt:v66];
        [obj setObject:v68 forKeyedSubscript:@"KernelOffset"];

        uint64_t v69 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v619, (const void *)v620));
        [obj setObject:v69 forKeyedSubscript:@"KernelIndex"];

        [obj setObject:@"Int8" forKeyedSubscript:@"KernelType"];
        if (a1) {
          uint64_t v70 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          uint64_t v70 = 0;
        }
LABEL_130:
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v70, (void *)v619);
        goto LABEL_79;
      }
      uint64_t v71 = (std::__shared_weak_count *)a3[1];
      long long v649 = *a3;
      uint64_t v650 = v71;
      if (v71) {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v619, "W_int8");
      uint64_t v72 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v61, &v649);
      if (SBYTE7(v620) < 0) {
        operator delete((void *)v619);
      }
      if (v650) {
        nitro::nitro_function::nitro_function(v650);
      }
      if ((v72 & 0x80000000) == 0)
      {
        unsigned int v73 = (std::__shared_weak_count *)a3[1];
        id v647 = *a3;
        v648 = v73;
        if (v73) {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_int8");
        (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v619, v61, &v647);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v648) {
          nitro::nitro_function::nitro_function(v648);
        }
        unsigned int v74 = [NSNumber numberWithInt:v72];
        [obj setObject:v74 forKeyedSubscript:@"KernelOffset"];

        int v75 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v619, (const void *)v620));
        [obj setObject:v75 forKeyedSubscript:@"KernelIndex"];

        [obj setObject:@"Int8" forKeyedSubscript:@"KernelType"];
        if (a1) {
          uint64_t v70 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          uint64_t v70 = 0;
        }
        goto LABEL_130;
      }
      uint64_t v101 = (std::__shared_weak_count *)a3[1];
      id v645 = *a3;
      v646 = v101;
      if (v101) {
        atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v619, "blob_weights");
      uint64_t v102 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v61, &v645);
      if (SBYTE7(v620) < 0) {
        operator delete((void *)v619);
      }
      if (v646) {
        nitro::nitro_function::nitro_function(v646);
      }
      if ((v102 & 0x80000000) == 0)
      {
        int v103 = (std::__shared_weak_count *)a3[1];
        v643 = *a3;
        char v644 = v103;
        if (v103) {
          atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
        (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v619, v61, &v643);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v644) {
          nitro::nitro_function::nitro_function(v644);
        }
        int v104 = [NSNumber numberWithInt:v102];
        [obj setObject:v104 forKeyedSubscript:@"KernelOffset"];

        char v105 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v619, (const void *)v620));
        [obj setObject:v105 forKeyedSubscript:@"KernelIndex"];

        [obj setObject:@"Float32" forKeyedSubscript:@"KernelType"];
        if (a1) {
          id v106 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          id v106 = 0;
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v106, (void *)v619);
        goto LABEL_79;
      }
      v419 = (std::__shared_weak_count *)a3[1];
      long long v641 = *a3;
      std::vector<std::string> v642 = v419;
      if (v419) {
        atomic_fetch_add_explicit(&v419->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v619, "blob_weights_f16");
      uint64_t v420 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v61, &v641);
      if (SBYTE7(v620) < 0) {
        operator delete((void *)v619);
      }
      if (v642) {
        nitro::nitro_function::nitro_function(v642);
      }
      if ((v420 & 0x80000000) == 0)
      {
        v421 = (std::__shared_weak_count *)a3[1];
        v639 = *a3;
        v640 = v421;
        if (v421) {
          atomic_fetch_add_explicit(&v421->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
        (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v619, v61, &v639);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v640) {
          nitro::nitro_function::nitro_function(v640);
        }
        uint64_t v422 = [NSNumber numberWithInt:v420];
        [obj setObject:v422 forKeyedSubscript:@"KernelOffset"];

        v423 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v619, (const void *)v620));
        [obj setObject:v423 forKeyedSubscript:@"KernelIndex"];

        [obj setObject:@"Float16" forKeyedSubscript:@"KernelType"];
        if (a1) {
          std::string::size_type v424 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          std::string::size_type v424 = 0;
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v424, (void *)v619);
        goto LABEL_79;
      }
      if (*(void *)(a1 + 792))
      {
        v431 = *(std::__shared_weak_count **)(a1 + 800);
        if (a1) {
          v432 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          v432 = 0;
        }
        v638[0] = *(void *)(a1 + 792);
        v638[1] = v431;
        if (v431) {
          atomic_fetch_add_explicit(&v431->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v432, v638);
        if (v431) {
          nitro::nitro_function::nitro_function(v431);
        }
        uint64_t v433 = 0;
        uint64_t v434 = *(void *)(a1 + 792);
        int v435 = *(_DWORD *)(v434 + 8);
        do
        {
          v435 *= *(_DWORD *)(v434 + 12 + v433);
          v433 += 4;
        }
        while (v433 != 12);
        std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(&v619, *(void *)(v434 + 24), 2 * v435);
        v437 = (std::__shared_weak_count *)*((void *)&v619 + 1);
        uint64_t v436 = v619;
        if (*((void *)&v619 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v619 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v438 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v436 + 16), *(int *)(v436 + 8));
        if (v437) {
          nitro::nitro_function::nitro_function(v437);
        }
        std::string::size_type v439 = [NSNumber numberWithInt:v438];
        [obj setObject:v439 forKeyedSubscript:@"KernelOffset"];

        v440 = NSNumber;
        if (v572) {
          uint64_t weights_file_index = 0;
        }
        else {
        v467 = [v440 numberWithUnsignedLong:weights_file_index];
        }
        [obj setObject:v467 forKeyedSubscript:@"KernelIndex"];

        [obj setObject:@"Float16" forKeyedSubscript:@"KernelType"];
LABEL_850:
        if (!v437) {
          goto LABEL_79;
        }
        int v468 = v437;
        goto LABEL_868;
      }
      (*(void (**)(long long *__return_ptr))(*(void *)a1 + 456))(&v619);
      uint64_t v457 = v619;
      if (*((void *)&v619 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v619 + 1));
      }
      if (v457)
      {
        (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 456))(&v619, a1);
        if (a1) {
          v458 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 560);
        }
        else {
          v458 = 0;
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v458, &v619);
        uint64_t v459 = 0;
        int v460 = *(_DWORD *)(v619 + 8);
        do
        {
          v460 *= *(_DWORD *)(v619 + 12 + v459);
          v459 += 4;
        }
        while (v459 != 12);
        std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(buf, *(void *)(v619 + 24), 4 * v460);
        uint64_t v461 = *(void *)buf;
        v462 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v463 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v461 + 16), *(int *)(v461 + 8));
        if (v462) {
          nitro::nitro_function::nitro_function(v462);
        }
        v464 = [NSNumber numberWithInt:v463];
        [obj setObject:v464 forKeyedSubscript:@"KernelOffset"];

        v465 = NSNumber;
        if (v572) {
          uint64_t v466 = 0;
        }
        else {
        v471 = [v465 numberWithUnsignedLong:v466];
        }
        [obj setObject:v471 forKeyedSubscript:@"KernelIndex"];

        [obj setObject:@"Float32" forKeyedSubscript:@"KernelType"];
        if (v462) {
          nitro::nitro_function::nitro_function(v462);
        }
        int v468 = (std::__shared_weak_count *)*((void *)&v619 + 1);
        if (!*((void *)&v619 + 1)) {
          goto LABEL_79;
        }
LABEL_868:
        nitro::nitro_function::nitro_function(v468);
        goto LABEL_79;
      }
      v469 = *(Espresso::quantized_weights_helper **)(a1 + 472);
      if (v469
        && *(void *)v469
        && (*((void *)v469 + 4) || *((void *)v469 + 6) || *((void *)v469 + 8) || *((void *)v469 + 10)))
      {
        v437 = (std::__shared_weak_count *)a3[1];
        v637[0] = (uint64_t)*a3;
        v637[1] = (uint64_t)v437;
        if (v437)
        {
          atomic_fetch_add_explicit(&v437->__shared_owners_, 1uLL, memory_order_relaxed);
          v469 = *(Espresso::quantized_weights_helper **)(a1 + 472);
        }
        uint64_t v470 = *(atomic_ullong **)(a1 + 480);
        v636[0] = v469;
        v636[1] = (Espresso::quantized_weights_helper *)v470;
        if (v470) {
          atomic_fetch_add_explicit(v470 + 1, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>((void *)a1, a2, v637, v636, obj, (Espresso::quantized_weights_helper ***)&v669);
        if (v470) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v470);
        }
        goto LABEL_850;
      }
      if (!v472)
      {
        char v491 = 0;
        v492 = (const void *)a1;
LABEL_911:
        if (v504)
        {
          int v505 = (unsigned int *)(*(uint64_t (**)(void *))(*(void *)v504 + 384))(v504);
          if (v505[9] == 1)
          {
            uint64_t v507 = *v505;
            vDSP_Length v506 = v505[1];
            uint64_t v508 = (std::__shared_weak_count *)a3[1];
            char v634 = *a3;
            id v635 = v508;
            if (v508) {
              atomic_fetch_add_explicit(&v508->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(buf, "W_8bit");
            (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v619, v61, &v634);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v635) {
              nitro::nitro_function::nitro_function(v635);
            }
            v509 = (std::__shared_weak_count *)a3[1];
            unint64_t v632 = *a3;
            v633 = v509;
            if (v509) {
              atomic_fetch_add_explicit(&v509->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, "Qscale");
            (*(void (**)(unsigned char *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(buf, v61, &v632);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (v633) {
              nitro::nitro_function::nitro_function(v633);
            }
            v510 = (std::__shared_weak_count *)a3[1];
            v630 = *a3;
            v631 = v510;
            if (v510) {
              atomic_fetch_add_explicit(&v510->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v611, "Qbias");
            (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&__str, v61, &v630);
            if (SHIBYTE(v612) < 0) {
              operator delete((void *)v611);
            }
            if (v631) {
              nitro::nitro_function::nitro_function(v631);
            }
            uint64_t v511 = v619;
            if ((void)v619)
            {
              uint64_t v512 = *(void *)buf;
              if (*(void *)buf)
              {
                std::string::size_type v513 = __str.__r_.__value_.__r.__words[0];
                if (__str.__r_.__value_.__r.__words[0])
                {
                  unsigned int v514 = (char *)operator new(0x58uLL);
                  *((void *)v514 + 1) = 0;
                  *((void *)v514 + 2) = 0;
                  *(void *)unsigned int v514 = &unk_1EE389AA8;
                  *((void *)v514 + 3) = &unk_1EE36BF90;
                  *(_OWORD *)(v514 + 56) = 0u;
                  *(_OWORD *)(v514 + 72) = 0u;
                  *((_DWORD *)v514 + 8) = v507;
                  *((_DWORD *)v514 + 9) = v506;
                  *((void *)v514 + 5) = v511;
                  v570 = (std::__shared_weak_count *)v514;
                  v514[48] = 0;
                  int v515 = (char *)operator new(0x58uLL);
                  *((void *)v515 + 1) = 0;
                  *((void *)v515 + 2) = 0;
                  *(void *)int v515 = &unk_1EE389920;
                  *((void *)v515 + 3) = &unk_1EE36BEB0;
                  *(_OWORD *)(v515 + 56) = 0u;
                  *(_OWORD *)(v515 + 72) = 0u;
                  *((_DWORD *)v515 + 8) = v507;
                  *((void *)v515 + 5) = v512;
                  v567 = (std::__shared_weak_count *)v515;
                  v515[48] = 0;
                  v516 = (char *)operator new(0x58uLL);
                  *((void *)v516 + 1) = 0;
                  *((void *)v516 + 2) = 0;
                  *(void *)v516 = &unk_1EE389920;
                  *((void *)v516 + 3) = &unk_1EE36BEB0;
                  *(_OWORD *)(v516 + 56) = 0u;
                  *(_OWORD *)(v516 + 72) = 0u;
                  *((_DWORD *)v516 + 8) = v507;
                  *((void *)v516 + 5) = v513;
                  v564 = v516;
                  v516[48] = 0;
                  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v611, 4 * v507 * v506, 1, 1, 1);
                  uint64_t v517 = v611;
                  if (v507)
                  {
                    unsigned int v518 = 0;
                    uint64_t v519 = 0;
                    uint64_t v520 = 0;
                    uint64_t v521 = 4 * v507;
                    do
                    {
                      v522 = (float *)(*(void *)(v517 + 16) + v519);
                      vDSP_vfltu8((const unsigned __int8 *)(v570[1].__shared_weak_owners_ + v518), 1, v522, 1, v506);
                      vDSP_vsmul(v522, 1, (const float *)(v567[1].__shared_weak_owners_ + v520), v522, 1, v506);
                      vDSP_vsadd(v522, 1, (const float *)(*((void *)v564 + 5) + v520), v522, 1, v506);
                      v520 += 4;
                      v519 += 4 * v506;
                      v518 += v506;
                    }
                    while (v521 != v520);
                  }
                  uint64_t v523 = (std::__shared_weak_count *)*((void *)&v611 + 1);
                  if (*((void *)&v611 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v611 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v524 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v517 + 16), *(int *)(v517 + 8));
                  if (v523) {
                    nitro::nitro_function::nitro_function(v523);
                  }
                  int v525 = objc_msgSend(NSNumber, "numberWithInt:", v524, v564);
                  [obj setObject:v525 forKeyedSubscript:@"KernelOffset"];

                  v526 = NSNumber;
                  if (v572) {
                    uint64_t v527 = 0;
                  }
                  else {
                  v528 = [v526 numberWithUnsignedLong:v527];
                  }
                  [obj setObject:v528 forKeyedSubscript:@"KernelIndex"];

                  [obj setObject:@"Float32" forKeyedSubscript:@"KernelType"];
                  if (v523) {
                    nitro::nitro_function::nitro_function(v523);
                  }
                  nitro::nitro_function::nitro_function(v565);
                  nitro::nitro_function::nitro_function(v567);
                  int v468 = v570;
                  goto LABEL_868;
                }
              }
            }
          }
        }
LABEL_943:
        if ((v491 & 1) == 0) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
        }
        goto LABEL_79;
      }
      v473 = v472;
      (*(void (**)(long long *__return_ptr))(*(void *)v472 + 568))(&v619);
      uint64_t v474 = v619;
      if (!(void)v619) {
        goto LABEL_907;
      }
      vDSP_Length v475 = v473 + 536;
      if (v473[559] < 0)
      {
        uint64_t v494 = *((void *)v473 + 68);
        if (v494 != 4)
        {
          if (v494 != 6) {
            goto LABEL_907;
          }
          if (**(_DWORD **)v475 != 1852399447 || *(_WORD *)(*(void *)v475 + 4) != 14452) {
            goto LABEL_907;
          }
          goto LABEL_901;
        }
        v477 = *(_DWORD **)v475;
      }
      else
      {
        int v476 = v473[559];
        v477 = v473 + 536;
        if (v476 != 4)
        {
          if (v476 != 6) {
            goto LABEL_907;
          }
          if (*(_DWORD *)v475 != 1852399447 || *((_WORD *)v473 + 270) != 14452) {
            goto LABEL_907;
          }
          goto LABEL_901;
        }
      }
      if (*v477 != 947216215)
      {
LABEL_907:
        char v491 = 0;
        goto LABEL_908;
      }
LABEL_901:
      uint64_t v496 = 0;
      int v497 = *(_DWORD *)(v619 + 8);
      do
      {
        v497 *= *(_DWORD *)(v619 + 12 + v496);
        v496 += 4;
      }
      while (v496 != 12);
      v498 = (char *)operator new(0x58uLL);
      *((void *)v498 + 1) = 0;
      *((void *)v498 + 2) = 0;
      *(void *)v498 = &unk_1EE389A70;
      uint64_t v499 = *(const unsigned __int8 **)(v474 + 24);
      *((void *)v498 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v498 + 72) = 0u;
      *(_OWORD *)(v498 + 56) = 0u;
      *((_DWORD *)v498 + 8) = v497;
      *((void *)v498 + 5) = v499;
      v498[48] = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v498 + 1, 1uLL, memory_order_relaxed);
      uint64_t v500 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v499, v497);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v498);
      v501 = [NSNumber numberWithInt:v500];
      [obj setObject:v501 forKeyedSubscript:@"KernelOffset"];

      float v502 = NSNumber;
      if (v572) {
        uint64_t v503 = 0;
      }
      else {
      long long v529 = [v502 numberWithUnsignedLong:v503];
      }
      [obj setObject:v529 forKeyedSubscript:@"KernelIndex"];

      if (v473[559] < 0)
      {
        uint64_t v532 = *((void *)v473 + 68);
        if (v532 != 4)
        {
          if (v532 != 6) {
            goto LABEL_969;
          }
          if (**(_DWORD **)v475 != 1852399447 || *(_WORD *)(*(void *)v475 + 4) != 14452) {
            goto LABEL_969;
          }
LABEL_966:
          int v534 = @"Int8";
          goto LABEL_971;
        }
        vDSP_Length v475 = *(char **)v475;
      }
      else
      {
        int v530 = v473[559];
        if (v530 != 4)
        {
          if (v530 != 6) {
            goto LABEL_969;
          }
          if (*(_DWORD *)v475 != 1852399447 || *((_WORD *)v473 + 270) != 14452) {
            goto LABEL_969;
          }
          goto LABEL_966;
        }
      }
      if (*(_DWORD *)v475 != 947216215)
      {
LABEL_969:
        char v491 = 0;
LABEL_972:
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v498);
LABEL_908:
        if (*((void *)&v619 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v619 + 1));
        }
        v492 = (const void *)a1;
        if (!a1) {
          goto LABEL_943;
        }
        goto LABEL_911;
      }
      int v534 = @"UInt8";
LABEL_971:
      [obj setObject:v534 forKeyedSubscript:@"KernelType"];
      char v491 = 1;
      goto LABEL_972;
    }
    id v63 = obj;
    uint64_t v64 = v63;
    if (*(__int16 *)(a4 + 96) <= 1 && *(__int16 *)(a4 + 98) <= 1)
    {

      goto LABEL_112;
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 456))(buf, a1);
    uint64_t v80 = *(void *)(a1 + 792);
    long long v81 = *(std::__shared_weak_count **)(a1 + 800);
    if (v81) {
      atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v568 = v81;
    if (!(*(void *)buf | v80))
    {
      (*(void (**)(long long *__return_ptr))(*(void *)a1 + 608))(&v619);
      long long v82 = v619;
      long long v619 = 0uLL;
      uint64_t v83 = *(std::__shared_weak_count **)&buf[8];
      *(_OWORD *)long long buf = v82;
      if (v83)
      {
        nitro::nitro_function::nitro_function(v83);
        if (*((void *)&v619 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v619 + 1));
        }
      }
      uint64_t v84 = *(void *)(a1 + 472);
      if (v84)
      {
        int v85 = *(std::__shared_weak_count **)(v84 + 88);
        *(void *)(v84 + 80) = 0;
        *(void *)(v84 + 88) = 0;
        if (v85) {
          nitro::nitro_function::nitro_function(v85);
        }
      }
    }
    int v86 = *(unsigned __int8 *)(a2 + 552);
    uint64_t v87 = *(void *)(a1 + 472);
    if (v87
      && *(void *)v87
      && *(_DWORD *)(v87 + 156) == 8
      && *(unsigned char *)(v87 + 164)
      && !*(void *)(v87 + 32)
      && !*(void *)(v87 + 48)
      && !*(void *)(v87 + 64))
    {
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 464))(&v619, a1);
      uint64_t v479 = **(void **)(a1 + 472);
      std::string::size_type v480 = (std::__shared_weak_count *)operator new(0x60uLL);
      v480->__shared_owners_ = 0;
      v480->__shared_weak_owners_ = 0;
      v480->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3898B0;
      uint64_t v481 = *(std::__shared_weak_count_vtbl **)(v479 + 16);
      v480[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BE70;
      *(_OWORD *)&v480[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v480[3].__shared_owners_ = 0u;
      *(_OWORD *)&v480[1].__shared_owners_ = v619;
      v480[2].__vftable = v481;
      LOBYTE(v480[2].__shared_owners_) = 0;
      Espresso::dilated_conv_bloated_weights<signed char>(&__str, (uint64_t)&v480[1], v577, v576, a4);
      long long v482 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      long long v611 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v61, &v611);
      if (*((void *)&v482 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v482 + 1));
      }
      uint64_t v483 = 0;
      int v484 = *(_DWORD *)(v482 + 8);
      do
      {
        v484 *= *(_DWORD *)(v482 + 12 + v483);
        v483 += 4;
      }
      while (v483 != 12);
      v485 = (char *)operator new(0x58uLL);
      *((void *)v485 + 1) = 0;
      *((void *)v485 + 2) = 0;
      *(void *)v485 = &unk_1EE389A70;
      uint64_t v486 = *(const unsigned __int8 **)(v482 + 24);
      *((void *)v485 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v485 + 72) = 0u;
      *(_OWORD *)(v485 + 56) = 0u;
      *((_DWORD *)v485 + 8) = v484;
      *((void *)v485 + 5) = v486;
      v485[48] = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v485 + 1, 1uLL, memory_order_relaxed);
      uint64_t v487 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v486, v484);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v485);
      uint64_t v488 = [NSNumber numberWithInt:v487];
      [v64 setObject:v488 forKeyedSubscript:@"KernelOffset"];

      uint64_t v489 = NSNumber;
      if (v86) {
        uint64_t v490 = 0;
      }
      else {
      uint64_t v493 = [v489 numberWithUnsignedLong:v490];
      }
      [v64 setObject:v493 forKeyedSubscript:@"KernelIndex"];

      [v64 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v485);
      if (*((void *)&v482 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v482 + 1));
      }
      nitro::nitro_function::nitro_function(v480);
      if (*((void *)&v621 + 1))
      {
        *(void *)&long long v622 = *((void *)&v621 + 1);
        operator delete(*((void **)&v621 + 1));
      }
      goto LABEL_829;
    }
    if (*(void *)buf)
    {
      Espresso::dilated_conv_bloated_weights<float>(&v619, *(uint64_t *)buf, v577, v576, a4);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v61, &v619);
      uint64_t v88 = 0;
      uint64_t v89 = v619;
      int v90 = *(_DWORD *)(v619 + 8);
      do
      {
        v90 *= *(_DWORD *)(v619 + 12 + v88);
        v88 += 4;
      }
      while (v88 != 12);
      uint64_t v91 = (char *)operator new(0x58uLL);
      *((void *)v91 + 1) = 0;
      *((void *)v91 + 2) = 0;
      *(void *)uint64_t v91 = &unk_1EE389A70;
      uint64_t v92 = *(const unsigned __int8 **)(v89 + 24);
      *((void *)v91 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v91 + 72) = 0u;
      *(_OWORD *)(v91 + 56) = 0u;
      *((_DWORD *)v91 + 8) = 4 * v90;
      *((void *)v91 + 5) = v92;
      v91[48] = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v91 + 1, 1uLL, memory_order_relaxed);
      uint64_t v93 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v92, 4 * v90);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v91);
      int v94 = [NSNumber numberWithInt:v93];
      [v64 setObject:v94 forKeyedSubscript:@"KernelOffset"];

      uint64_t v95 = NSNumber;
      if (v86) {
        uint64_t v96 = 0;
      }
      else {
      v389 = [v95 numberWithUnsignedLong:v96];
      }
      [v64 setObject:v389 forKeyedSubscript:@"KernelIndex"];

      [v64 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v91);
      v390 = (std::__shared_weak_count *)*((void *)&v619 + 1);
      if (!*((void *)&v619 + 1)) {
        goto LABEL_829;
      }
    }
    else
    {
      if (v80)
      {
        Espresso::dilated_conv_bloated_weights<unsigned short>(&v619, v80, v577, v576, a4);
        std::string::size_type v107 = (std::__shared_weak_count *)*((void *)&v619 + 1);
        uint64_t v108 = v619;
        v608[0] = v619;
        if (*((void *)&v619 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v619 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v61, v608);
        if (v107) {
          nitro::nitro_function::nitro_function(v107);
        }
        uint64_t v109 = 0;
        int v110 = *(_DWORD *)(v108 + 8);
        do
        {
          v110 *= *(_DWORD *)(v108 + 12 + v109);
          v109 += 4;
        }
        while (v109 != 12);
        uint64_t v111 = (char *)operator new(0x58uLL);
        *((void *)v111 + 2) = 0;
        *((void *)v111 + 1) = 0;
        *(void *)uint64_t v111 = &unk_1EE389A70;
        uint64_t v112 = *(void **)(v108 + 24);
        *((void *)v111 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v111 + 72) = 0u;
        *(_OWORD *)(v111 + 56) = 0u;
        *((_DWORD *)v111 + 8) = 2 * v110;
        *((void *)v111 + 5) = v112;
        v111[48] = 0;
        memcpy(v112, *(const void **)(v108 + 24), 2 * v110);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v111 + 1, 1uLL, memory_order_relaxed);
        uint64_t v113 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v111 + 5), *((int *)v111 + 8));
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v111);
        char v114 = [NSNumber numberWithInt:v113];
        [v64 setObject:v114 forKeyedSubscript:@"KernelOffset"];

        uint64_t v115 = NSNumber;
        if (v86) {
          uint64_t v116 = 0;
        }
        else {
        v425 = [v115 numberWithUnsignedLong:v116];
        }
        [v64 setObject:v425 forKeyedSubscript:@"KernelIndex"];

        [v64 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v111);
      }
      else
      {
        if (!v87
          || !*(void *)v87
          || !*(void *)(v87 + 32) && !*(void *)(v87 + 48) && !*(void *)(v87 + 64) && !*(void *)(v87 + 80))
        {
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("<rdar://problem/36840916> Need proper way of expressing dilated conv to ANEC");
        }
        {
          Espresso::quantized_weights_helper::dequantize_to_float16_2d((Espresso::quantized_weights_helper *)v87, &v619);
        }
        else
        {
          Espresso::quantized_weights_helper::dequantize_to_float16_4d((Espresso::quantized_weights_helper *)v87, &v619);
        }
        std::string::size_type v107 = (std::__shared_weak_count *)*((void *)&v619 + 1);
        uint64_t v442 = v619;
        (*(void (**)(long long *__return_ptr))(*(void *)a1 + 464))(&v619);
        v443 = *(std::__shared_weak_count_vtbl **)(v442 + 16);
        uint64_t v444 = (std::__shared_weak_count *)operator new(0x60uLL);
        v444->__shared_owners_ = 0;
        v444->__shared_weak_owners_ = 0;
        v444->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D80;
        v444[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36C130;
        *(_OWORD *)&v444[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v444[3].__shared_owners_ = 0u;
        *(_OWORD *)&v444[1].__shared_owners_ = v619;
        v444[2].__vftable = v443;
        LOBYTE(v444[2].__shared_owners_) = 0;
        Espresso::dilated_conv_bloated_weights<unsigned short>(&__str, (uint64_t)&v444[1], v577, v576, a4);
        long long v445 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        long long v618 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669, v61, &v618);
        if (*((void *)&v445 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v445 + 1));
        }
        uint64_t v446 = 0;
        int v447 = *(_DWORD *)(v445 + 8);
        do
        {
          v447 *= *(_DWORD *)(v445 + 12 + v446);
          v446 += 4;
        }
        while (v446 != 12);
        uint64_t v448 = (char *)operator new(0x58uLL);
        *((void *)v448 + 2) = 0;
        *((void *)v448 + 1) = 0;
        *(void *)uint64_t v448 = &unk_1EE389A70;
        int v449 = *(void **)(v445 + 24);
        *((void *)v448 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v448 + 72) = 0u;
        *(_OWORD *)(v448 + 56) = 0u;
        *((_DWORD *)v448 + 8) = 2 * v447;
        *((void *)v448 + 5) = v449;
        v448[48] = 0;
        memcpy(v449, *(const void **)(v445 + 24), 2 * v447);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v448 + 1, 1uLL, memory_order_relaxed);
        uint64_t v450 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v448 + 5), *((int *)v448 + 8));
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v448);
        v451 = [NSNumber numberWithInt:v450];
        [v64 setObject:v451 forKeyedSubscript:@"KernelOffset"];

        [v64 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
        uint64_t v452 = NSNumber;
        if (v86) {
          uint64_t v453 = 0;
        }
        else {
        v454 = [v452 numberWithUnsignedLong:v453];
        }
        [v64 setObject:v454 forKeyedSubscript:@"KernelIndex"];

        uint64_t v455 = *(void *)(a1 + 472);
        v456 = *(std::__shared_weak_count **)(v455 + 88);
        *(void *)(v455 + 80) = 0;
        *(void *)(v455 + 88) = 0;
        if (v456) {
          nitro::nitro_function::nitro_function(v456);
        }
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v448);
        if (*((void *)&v445 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v445 + 1));
        }
        nitro::nitro_function::nitro_function(v444);
        if (*((void *)&v621 + 1))
        {
          *(void *)&long long v622 = *((void *)&v621 + 1);
          operator delete(*((void **)&v621 + 1));
        }
      }
      if (!v107) {
        goto LABEL_829;
      }
      v390 = v107;
    }
    nitro::nitro_function::nitro_function(v390);
LABEL_829:
    if (v568) {
      nitro::nitro_function::nitro_function(v568);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
  }
LABEL_79:
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v578, v43);
  float v45 = v44;
  BOOL v46 = 0;
  if (v582 && HIBYTE(v660) && (_BYTE)v660)
  {
    id v47 = obj;
    uint64_t v48 = v47;
    BOOL v46 = *(__int16 *)(a4 + 96) > 1 || *(__int16 *)(a4 + 98) > 1;
    if (v46)
    {
      uint64_t v50 = [v47 objectForKeyedSubscript:@"KernelType"];
      id v566 = v50;
      if ([v50 isEqualToString:@"Float16"])
      {
        uint64_t v51 = (std::__shared_weak_count *)*((void *)&v671 + 1);
        uint64_t v52 = v671;
        if (*((void *)&v671 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v671 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (!v52) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp16 weights");
        }
        int v53 = *(_DWORD *)(v52 + 8);
        for (uint64_t i = 12; i != 24; i += 4)
          v53 *= *(_DWORD *)(v52 + i);
        uint64_t v55 = (char *)operator new(0x58uLL);
        *((void *)v55 + 1) = 0;
        *((void *)v55 + 2) = 0;
        *(void *)uint64_t v55 = &unk_1EE389A70;
        uint64_t v56 = (const unsigned __int8 **)(v55 + 24);
        uint64_t v57 = *(void *)(v52 + 24);
        *((void *)v55 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v55 + 56) = 0u;
        *(_OWORD *)(v55 + 72) = 0u;
        *((_DWORD *)v55 + 8) = 2 * v53;
        *((void *)v55 + 5) = v57;
        v55[48] = 0;
        uint64_t v58 = *(int *)(v52 + 8);
        for (uint64_t j = 12; j != 24; j += 4)
          v58 *= *(int *)(v52 + j);
      }
      else if ([v50 isEqualToString:@"Float32"])
      {
        uint64_t v51 = (std::__shared_weak_count *)*((void *)&v670 + 1);
        uint64_t v52 = v670;
        if (*((void *)&v670 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v670 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (!v52) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp32 weights");
        }
        int v76 = *(_DWORD *)(v52 + 8);
        for (uint64_t k = 12; k != 24; k += 4)
          v76 *= *(_DWORD *)(v52 + k);
        uint64_t v55 = (char *)operator new(0x58uLL);
        *((void *)v55 + 1) = 0;
        *((void *)v55 + 2) = 0;
        *(void *)uint64_t v55 = &unk_1EE389A70;
        uint64_t v56 = (const unsigned __int8 **)(v55 + 24);
        uint64_t v78 = *(void *)(v52 + 24);
        *((void *)v55 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v55 + 56) = 0u;
        *(_OWORD *)(v55 + 72) = 0u;
        *((_DWORD *)v55 + 8) = 4 * v76;
        *((void *)v55 + 5) = v78;
        v55[48] = 0;
        uint64_t v58 = *(int *)(v52 + 8);
        for (uint64_t m = 12; m != 24; m += 4)
          v58 *= *(int *)(v52 + m);
      }
      else if ([v50 isEqualToString:@"UInt8"])
      {
        uint64_t v51 = (std::__shared_weak_count *)*((void *)&v672 + 1);
        uint64_t v52 = v672;
        if (*((void *)&v672 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v672 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (!v52) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final uint8 weights");
        }
        int v97 = *(_DWORD *)(v52 + 8);
        for (uint64_t n = 12; n != 24; n += 4)
          v97 *= *(_DWORD *)(v52 + n);
        uint64_t v55 = (char *)operator new(0x58uLL);
        *((void *)v55 + 1) = 0;
        *((void *)v55 + 2) = 0;
        *(void *)uint64_t v55 = &unk_1EE389A70;
        uint64_t v56 = (const unsigned __int8 **)(v55 + 24);
        uint64_t v99 = *(void *)(v52 + 24);
        *((void *)v55 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v55 + 56) = 0u;
        *(_OWORD *)(v55 + 72) = 0u;
        *((_DWORD *)v55 + 8) = v97;
        *((void *)v55 + 5) = v99;
        v55[48] = 0;
        uint64_t v58 = *(int *)(v52 + 8);
        for (iuint64_t i = 12; ii != 24; ii += 4)
          v58 *= *(int *)(v52 + ii);
      }
      else
      {
        if (![v50 isEqualToString:@"Int8"])
        {
          if (v50) {
            v559 = (const char *)[v50 UTF8String];
          }
          else {
            v559 = "";
          }
          *(void *)&long long v619 = v559;
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid kernel type %s", &v619);
        }
        uint64_t v51 = (std::__shared_weak_count *)*((void *)&v673 + 1);
        uint64_t v52 = v673;
        if (*((void *)&v673 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v673 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (!v52) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final int8 weights");
        }
        int v117 = *(_DWORD *)(v52 + 8);
        for (juint64_t j = 12; jj != 24; jj += 4)
          v117 *= *(_DWORD *)(v52 + jj);
        uint64_t v55 = (char *)operator new(0x58uLL);
        *((void *)v55 + 1) = 0;
        *((void *)v55 + 2) = 0;
        *(void *)uint64_t v55 = &unk_1EE389A70;
        uint64_t v56 = (const unsigned __int8 **)(v55 + 24);
        uint64_t v119 = *(void *)(v52 + 24);
        *((void *)v55 + 3) = &unk_1EE36BF70;
        *(_OWORD *)(v55 + 56) = 0u;
        *(_OWORD *)(v55 + 72) = 0u;
        *((_DWORD *)v55 + 8) = v117;
        *((void *)v55 + 5) = v119;
        v55[48] = 0;
        uint64_t v58 = *(int *)(v52 + 8);
        for (uint64_t kk = 12; kk != 24; kk += 4)
          v58 *= *(int *)(v52 + kk);
      }
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)&v619, (_DWORD *)v52, a4);
      long long v569 = v619;
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      int v121 = *(unsigned __int8 *)(a2 + 552);
      uint64_t v122 = NSNumber;
      if (*(unsigned char *)(a2 + 552)) {
        uint64_t v123 = 0;
      }
      else {
      BOOL v124 = [v122 numberWithUnsignedLong:v123];
      }
      [v48 setObject:v124 forKeyedSubscript:@"KernelIndex"];

      int v125 = NSNumber;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v55 + 1, 1uLL, memory_order_relaxed);
      uint64_t v126 = objc_msgSend(v125, "numberWithInt:", Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v56[2], *((int *)v56 + 2)));
      [v48 setObject:v126 forKeyedSubscript:@"KernelOffset"];

      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55);
      if (*((void *)&v569 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v569 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v127 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v569 + 16), *(int *)(v569 + 8));
      if (*((void *)&v569 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v569 + 1));
      }
      int v128 = [NSNumber numberWithInt:v127];
      [v48 setObject:v128 forKeyedSubscript:@"KernelMaskByteOffset"];

      uint64_t v129 = NSNumber;
      if (v121) {
        uint64_t v130 = 0;
      }
      else {
      char v131 = [v129 numberWithUnsignedLong:v130];
      }
      [v48 setObject:v131 forKeyedSubscript:@"KernelMaskIndex"];

      id v132 = [NSNumber numberWithUnsignedLong:v58];
      [v48 setObject:v132 forKeyedSubscript:@"KernelCoeffCount"];

      [v48 setObject:@"Sparse" forKeyedSubscript:@"KernelMode"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55);
      if (*((void *)&v569 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v569 + 1));
      }
    }
  }
  if (!v46 && !v582 && v575)
  {
    id v133 = obj;
    long long v619 = 0uLL;
    *(void *)&buf[8] = 0;
    *(void *)long long buf = 0;
    if ((void)v670)
    {
      uint64_t v134 = (std::__shared_weak_count *)*((void *)&v670 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v670;
      if (*((void *)&v670 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v670 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v135 = Espresso::ANECompilerEngine::compress_sparse_weights<float,4>((uint64_t)&__str, (uint64_t *)&v619, (uint64_t *)buf, v45);
    }
    else if ((void)v671)
    {
      uint64_t v134 = (std::__shared_weak_count *)*((void *)&v671 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v671;
      if (*((void *)&v671 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v671 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v135 = Espresso::ANECompilerEngine::compress_sparse_weights<unsigned short,4>((uint64_t)&__str, (uint64_t *)&v619, (uint64_t *)buf, v45);
    }
    else if ((void)v672)
    {
      uint64_t v134 = (std::__shared_weak_count *)*((void *)&v672 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v672;
      if (*((void *)&v672 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v672 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v135 = Espresso::ANECompilerEngine::compress_sparse_weights<unsigned char,4>((uint64_t)&__str, (uint64_t *)&v619, (uint64_t *)buf, v45);
    }
    else
    {
      if (!(void)v673)
      {
        uint64_t v136 = 0;
LABEL_255:
        uint64_t v137 = v619;
        if ((void)v619 && (uint64_t v138 = *(void *)buf) != 0)
        {
          int v139 = *(unsigned __int8 *)(a2 + 552);
          int v140 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
          uint64_t v141 = (std::__shared_weak_count *)*((void *)&v619 + 1);
          if (*((void *)&v619 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v619 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v142 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v140, *(const unsigned __int8 **)(v137 + 16), *(int *)(v137 + 8));
          if (v141) {
            nitro::nitro_function::nitro_function(v141);
          }
          uint64_t v143 = NSNumber;
          if (v139) {
            uint64_t v144 = 0;
          }
          else {
          v146 = [v143 numberWithUnsignedLong:v144];
          }
          [v133 setObject:v146 forKeyedSubscript:@"KernelIndex"];

          uint64_t v147 = [NSNumber numberWithInt:v142];
          [v133 setObject:v147 forKeyedSubscript:@"KernelOffset"];

          unint64_t v145 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v148 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v140, *(const unsigned __int8 **)(v138 + 16), *(int *)(v138 + 8));
          if (v145) {
            nitro::nitro_function::nitro_function(v145);
          }
          v149 = [NSNumber numberWithInt:v148];
          [v133 setObject:v149 forKeyedSubscript:@"KernelMaskByteOffset"];

          uint64_t v150 = NSNumber;
          if (v139) {
            uint64_t v151 = 0;
          }
          else {
          int v152 = [v150 numberWithUnsignedLong:v151];
          }
          [v133 setObject:v152 forKeyedSubscript:@"KernelMaskIndex"];

          int v153 = [NSNumber numberWithUnsignedLong:v136];
          [v133 setObject:v153 forKeyedSubscript:@"KernelCoeffCount"];

          [v133 setObject:@"Sparse" forKeyedSubscript:@"KernelMode"];
        }
        else
        {
          unint64_t v145 = *(std::__shared_weak_count **)&buf[8];
        }
        if (v145) {
          nitro::nitro_function::nitro_function(v145);
        }
        if (*((void *)&v619 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v619 + 1));
        }

        goto LABEL_278;
      }
      uint64_t v134 = (std::__shared_weak_count *)*((void *)&v673 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v673;
      if (*((void *)&v673 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v673 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v135 = Espresso::ANECompilerEngine::compress_sparse_weights<signed char,4>((uint64_t)&__str, (uint64_t *)&v619, (uint64_t *)buf, v45);
    }
    uint64_t v136 = v135;
    if (v134) {
      nitro::nitro_function::nitro_function(v134);
    }
    goto LABEL_255;
  }
LABEL_278:
  BOOL v154 = [NSNumber numberWithInt:*(__int16 *)(a4 + 92)];
  v687[0] = v154;
  int v155 = [NSNumber numberWithInt:*(__int16 *)(a4 + 94)];
  v687[1] = v155;
  BOOL v156 = [MEMORY[0x1E4F1C978] arrayWithObjects:v687 count:2];
  [obj setObject:v156 forKeyedSubscript:@"Step"];

  long long v157 = *(_OWORD *)(a4 + 144);
  long long v627 = *(_OWORD *)(a4 + 128);
  long long v628 = v157;
  uint64_t v629 = *(void *)(a4 + 160);
  long long v158 = *(_OWORD *)(a4 + 80);
  long long v623 = *(_OWORD *)(a4 + 64);
  long long v624 = v158;
  long long v159 = *(_OWORD *)(a4 + 112);
  long long v625 = *(_OWORD *)(a4 + 96);
  long long v626 = v159;
  long long v160 = *(_OWORD *)(a4 + 16);
  long long v619 = *(_OWORD *)a4;
  long long v620 = v160;
  long long v161 = *(_OWORD *)(a4 + 48);
  int v162 = HIBYTE(v660);
  BOOL v163 = v582;
  if (!HIBYTE(v660)) {
    BOOL v163 = 0;
  }
  long long v621 = *(_OWORD *)(a4 + 32);
  long long v622 = v161;
  if (v163)
  {
    *(void *)&long long v622 = __PAIR64__(v576, v577);
    LODWORD(v625) = 65537;
  }
  Espresso::abstract_blob_container::shape(buf, *a6);
  int v164 = *(_DWORD *)buf;
  Espresso::abstract_blob_container::shape((char *)&__str, *a6);
  int v165 = HIDWORD(__str.__r_.__value_.__r.__words[0]);
  Espresso::abstract_blob_container::shape((char *)&v611, *a7);
  int v166 = v611;
  Espresso::abstract_blob_container::shape((char *)v608, *a7);
  Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)&v618, (const Espresso::convolution_uniforms *)&v619, v164, v165, v166, SDWORD1(v608[0]));
  uint64_t v167 = v618;
  uint64_t v168 = DWORD1(v618);
  uint64_t v169 = DWORD2(v618);
  uint64_t v170 = HIDWORD(v618);
  if (v609)
  {
    long long v610 = v609;
    operator delete(v609);
  }
  if (v616)
  {
    long long v617 = v616;
    operator delete(v616);
  }
  if (v685)
  {
    v686 = v685;
    operator delete(v685);
  }
  if (v690)
  {
    v691.__begin_ = (std::vector<std::string>::pointer)v690;
    operator delete(v690);
  }
  if (!v169 && !v170 && !v167)
  {
    if (!v168) {
      goto LABEL_320;
    }
    uint64_t v170 = 0;
    uint64_t v167 = 0;
    goto LABEL_296;
  }
  if ((v169 & 0x80000000) == 0)
  {
LABEL_296:
    std::string v171 = [NSNumber numberWithInt:v169];
    int v172 = 1;
    goto LABEL_298;
  }
  int v172 = 0;
  std::string v171 = &unk_1EE3AEE18;
LABEL_298:
  [obj setObject:v171 forKeyedSubscript:@"PadTop"];
  if (v172) {

  }
  if ((v170 & 0x80000000) != 0)
  {
    std::string v173 = &unk_1EE3AEE18;
  }
  else
  {
    std::string v173 = [NSNumber numberWithInt:v170];
  }
  [obj setObject:v173 forKeyedSubscript:@"PadBot"];
  if ((v170 & 0x80000000) == 0) {

  }
  if ((v167 & 0x80000000) != 0)
  {
    std::string v174 = &unk_1EE3AEE18;
  }
  else
  {
    std::string v174 = [NSNumber numberWithInt:v167];
  }
  [obj setObject:v174 forKeyedSubscript:@"PadLeft"];
  if ((v167 & 0x80000000) == 0) {

  }
  if ((v168 & 0x80000000) != 0)
  {
    uint64_t v175 = &unk_1EE3AEE18;
  }
  else
  {
    uint64_t v175 = [NSNumber numberWithInt:v168];
  }
  [obj setObject:v175 forKeyedSubscript:@"PadRight"];
  if ((v168 & 0x80000000) == 0) {

  }
  if (*(_WORD *)(a4 + 74))
  {
    if (*(_WORD *)(a4 + 74) != 1) {
      goto LABEL_320;
    }
    std::string v176 = @"Replication";
  }
  else
  {
    std::string v176 = @"Zero";
  }
  [obj setObject:v176 forKeyedSubscript:@"PaddingMode"];
LABEL_320:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v619, a5);
  BOOL v177 = v582;
  if (v162) {
    BOOL v177 = 0;
  }
  if (v177)
  {
    std::string v178 = [NSNumber numberWithShort:*(__int16 *)(a4 + 96)];
    [obj setObject:v178 forKeyedSubscript:@"KernelDilationX"];

    long long v179 = [NSNumber numberWithShort:*(__int16 *)(a4 + 98)];
    [obj setObject:v179 forKeyedSubscript:@"KernelDilationY"];

    [obj setObject:v571 forKeyedSubscript:@"Type"];
  }
  std::string::size_type v180 = (void *)*((void *)&v626 + 1);
  *((void *)&v626 + 1) = @"Conv";

  objc_storeStrong((id *)&v627, obj);
  uint64_t v181 = (uint64_t)*a3 + 136;
  *(void *)long long buf = &v619;
  unint64_t v182 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v181, (unsigned __int8 *)&v619, (long long **)buf);
  uint64_t v184 = (std::__shared_weak_count *)*((void *)v182 + 6);
  if (v184) {
    atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  DWORD2(v627) = v183[41];
  HIDWORD(v627) = v574;
  id v185 = v658;
  if ((unint64_t)v658 >= v659)
  {
    unint64_t v187 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
    if (v187 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v188 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
    if (v188 <= v187 + 1) {
      unint64_t v188 = v187 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v189 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v189 = v188;
    }
    *((void *)&v689 + 1) = &v659;
    if (v189) {
      unint64_t v189 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v189);
    }
    else {
      uint64_t v190 = 0;
    }
    *(void *)long long buf = v189;
    *(void *)&buf[8] = v189 + 144 * v187;
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v689 = v189 + 144 * v190;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v619);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, buf);
    uint64_t v186 = v658;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)&v619);
    uint64_t v186 = v185 + 6;
  }
  v658 = v186;
  if (v184) {
    nitro::nitro_function::nitro_function(v184);
  }

  if (SBYTE7(v625) < 0) {
    operator delete((void *)v624);
  }
  *(void *)long long buf = &v622;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = (char *)&v620 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SBYTE7(v620) < 0) {
    operator delete((void *)v619);
  }

  long long v191 = *(_OWORD *)(a4 + 144);
  long long v627 = *(_OWORD *)(a4 + 128);
  long long v628 = v191;
  uint64_t v629 = *(void *)(a4 + 160);
  long long v192 = *(_OWORD *)(a4 + 80);
  long long v623 = *(_OWORD *)(a4 + 64);
  long long v624 = v192;
  long long v193 = *(_OWORD *)(a4 + 112);
  long long v625 = *(_OWORD *)(a4 + 96);
  long long v626 = v193;
  long long v194 = *(_OWORD *)(a4 + 16);
  long long v619 = *(_OWORD *)a4;
  long long v620 = v194;
  long long v195 = *(_OWORD *)(a4 + 48);
  BOOL v196 = v582;
  if (!HIBYTE(v660)) {
    BOOL v196 = 0;
  }
  long long v621 = *(_OWORD *)(a4 + 32);
  long long v622 = v195;
  if (v196)
  {
    *(void *)&long long v622 = __PAIR64__(v576, v577);
    LODWORD(v625) = 65537;
  }
  Espresso::abstract_blob_container::shape(buf, *a6);
  int v197 = *(_DWORD *)buf;
  Espresso::abstract_blob_container::shape((char *)&__str, *a6);
  int v198 = HIDWORD(__str.__r_.__value_.__r.__words[0]);
  Espresso::abstract_blob_container::shape((char *)&v611, *a7);
  int v199 = v611;
  Espresso::abstract_blob_container::shape((char *)v608, *a7);
  Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)&v618, (const Espresso::convolution_uniforms *)&v619, v197, v198, v199, SDWORD1(v608[0]));
  if (v609)
  {
    long long v610 = v609;
    operator delete(v609);
  }
  if (v616)
  {
    long long v617 = v616;
    operator delete(v616);
  }
  if (v685)
  {
    v686 = v685;
    operator delete(v685);
  }
  if (v690)
  {
    v691.__begin_ = (std::vector<std::string>::pointer)v690;
    operator delete(v690);
  }
  int v200 = DWORD1(v618);
  if ((HIDWORD(v618) & 0x80000000) != 0 || (DWORD1(v618) & 0x80000000) != 0)
  {
    if ((HIDWORD(v618) & 0x80000000) != 0)
    {
      v201 = objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
      v202 = v695;
      v695 = @"InputView";

      [v201 setObject:@"Height" forKeyedSubscript:@"Dimension"];
      [v201 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"Offset"];
      v203 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 12)];
      [v201 setObject:v203 forKeyedSubscript:@"Size"];

      objc_storeStrong(v696, v201);
      v204 = v658;
      if ((unint64_t)v658 >= v659)
      {
        unint64_t v206 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
        if (v206 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v207 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
        if (v207 <= v206 + 1) {
          unint64_t v207 = v206 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v208 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v208 = v207;
        }
        *((void *)&v684 + 1) = &v659;
        if (v208) {
          unint64_t v208 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v208);
        }
        else {
          uint64_t v209 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v208;
        __str.__r_.__value_.__l.__size_ = v208 + 144 * v206;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v684 = v208 + 144 * v209;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, &__str);
        uint64_t v205 = v658;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)buf);
        uint64_t v205 = v204 + 6;
      }
      v658 = v205;

      if (v693 < 0) {
        operator delete(v692);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v691;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v689;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (v200 < 0)
    {
      uint64_t v210 = objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
      long long v211 = v695;
      v695 = @"InputView";

      [v210 setObject:@"Width" forKeyedSubscript:@"Dimension"];
      [v210 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"Offset"];
      v212 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 8)];
      [v210 setObject:v212 forKeyedSubscript:@"Size"];

      objc_storeStrong(v696, v210);
      std::string::size_type v213 = v658;
      if ((unint64_t)v658 >= v659)
      {
        unint64_t v215 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
        if (v215 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v216 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
        if (v216 <= v215 + 1) {
          unint64_t v216 = v215 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v217 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v217 = v216;
        }
        *((void *)&v684 + 1) = &v659;
        if (v217) {
          unint64_t v217 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v217);
        }
        else {
          uint64_t v218 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v217;
        __str.__r_.__value_.__l.__size_ = v217 + 144 * v215;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v684 = v217 + 144 * v218;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, &__str);
        v214 = v658;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)buf);
        v214 = v213 + 6;
      }
      v658 = v214;

      if (v693 < 0) {
        operator delete(v692);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v691;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v689;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  v219 = (std::__shared_weak_count *)a3[1];
  if (v219) {
    atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v220 = *a7;
  uint64_t v221 = (std::__shared_weak_count *)a7[1];
  if (v221) {
    atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v619);
  *(void *)&long long v627 = 0;
  *((void *)&v626 + 1) = 0;
  *((void *)&v627 + 1) = 0x100000000;
  uint64_t v222 = *(void *)(a1 + 624);
  v223 = *(std::__shared_weak_count **)(a1 + 632);
  if (v223) {
    atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v222 || *(unsigned char *)((*(uint64_t (**)(void))(*(void *)(a1 + 560) + 104))() + 40))
  {
    char v224 = 0;
    if (!v223) {
      goto LABEL_404;
    }
    goto LABEL_403;
  }
  float v257 = *(float *)(v220 + 112);
  *(void *)&v608[0] = v222;
  *((void *)&v608[0] + 1) = v223;
  if (v223) {
    atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v258 = *(std::__shared_weak_count **)(a1 + 648);
  *(void *)&long long v618 = *(void *)(a1 + 640);
  *((void *)&v618 + 1) = v258;
  if (v258) {
    atomic_fetch_add_explicit(&v258->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ane_style_post_scale_bias((uint64_t)v608, (uint64_t *)&v618, (uint64_t)&v611, v257);
  if (v258) {
    nitro::nitro_function::nitro_function(v258);
  }
  if (v223) {
    nitro::nitro_function::nitro_function(v223);
  }
  uint64_t v259 = *(unsigned int *)(v222 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v681, 2 * v259, 1, 1, 1);
  uint64_t v260 = (int)v259;
  uint64_t v261 = *(void *)(a1 + 640);
  int v262 = v259;
  if (v261) {
    int v262 = *(_DWORD *)(v261 + 8);
  }
  if (!*(unsigned char *)(a2 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v259);
    unsigned int v537 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    int objb = v259 - 1;
    if ((int)v259 >= 1)
    {
      for (muint64_t m = 0; mm != v259; ++mm)
      {
        float v539 = *(float *)(*(void *)(v222 + 16) + mm * 4);
        *(float *)&int v540 = ldexp(1.0, -v614) * v539;
        v537[mm] = v540;
      }
    }
    if (v259)
    {
      BOOL v541 = *(_WORD **)(v681 + 16);
      do
      {
        int v542 = *v537++;
        _S0 = v542;
        __asm { FCVT            H0, S0 }
        *v541++ = _S0;
        --v260;
      }
      while (v260);
    }
    if (*(void *)(a1 + 640))
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v262);
      uint64_t v545 = *(void *)buf;
      Espresso::blob<unsigned char,1>::make(buf, 2 * v262);
      uint64_t v586 = *(void *)buf;
      v546 = *(int **)(v545 + 16);
      if (v262 >= 1)
      {
        for (uint64_t nn = 0; nn != v262; ++nn)
        {
          int v548 = objb;
          if (objb >= (int)nn) {
            int v548 = nn;
          }
          *(float *)&int v549 = *(float *)(*(void *)(v612 + 16) + 4 * nn)
                          * *(float *)(*(void *)(v611 + 16) + 4 * v548);
          v546[nn] = v549;
          unsigned int v550 = v615;
          unsigned int v551 = v614;
          *(float *)&int v552 = ldexp(1.0, v615 - v614) * *(float *)&v549;
          v546[nn] = v552;
          float v555 = ldexp(1.0, v551 - v550) * *(float *)&v552;
          if (v555 < -127.0 || v555 > 255.0)
          {
            v557 = Espresso::espresso_os_log_subsystem(v553, v554);
            if (os_log_type_enabled(v557, OS_LOG_TYPE_ERROR))
            {
              double v558 = *(float *)&v546[nn];
              *(_DWORD *)long long buf = 134218752;
              *(double *)&uint8_t buf[4] = v555;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v615;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v614;
              LOWORD(v689) = 2048;
              *(double *)((char *)&v689 + 2) = v558;
              _os_log_error_impl(&dword_1920CB000, v557, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }
          }
        }
      }
      if (v262)
      {
        uint64_t v560 = v262;
        v561 = *(_WORD **)(v586 + 16);
        do
        {
          int v562 = *v546++;
          _S0 = v562;
          __asm { FCVT            H0, S0 }
          *v561++ = _S0;
          --v560;
        }
        while (v560);
      }
    }
    v544 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v544);
  }
  unsigned int v263 = v615;
  uint64_t v264 = v681;
  if (v259)
  {
    v265 = *(int **)(v611 + 16);
    uint64_t v266 = *(_WORD **)(v681 + 16);
    do
    {
      int v267 = *v265++;
      _S0 = v267;
      __asm { FCVT            H0, S0 }
      *v266++ = _S0;
      --v260;
    }
    while (v260);
  }
  unsigned int v580 = v263;
  if (v261)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v262, 1, 1, 1);
    uint64_t v269 = *(void *)buf;
    v583 = *(std::__shared_weak_count **)&buf[8];
    if (v262)
    {
      uint64_t v270 = v262;
      v271 = *(_WORD **)(*(void *)buf + 16);
      v272 = *(int **)(v612 + 16);
      do
      {
        int v273 = *v272++;
        _S0 = v273;
        __asm { FCVT            H0, S0 }
        *v271++ = _S0;
        --v270;
      }
      while (v270);
    }
  }
  else
  {
    v583 = 0;
    uint64_t v269 = 0;
  }
  int v291 = *(unsigned __int8 *)(a2 + 552);
  v292 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v293 = v682;
  if (v682) {
    atomic_fetch_add_explicit(&v682->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v294 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v292, *(const unsigned __int8 **)(v264 + 16), *(int *)(v264 + 8));
  if (v293) {
    nitro::nitro_function::nitro_function(v293);
  }
  id obja = (id)objc_opt_new();
  if (*(unsigned char *)(a2 + 121))
  {
    id v295 = *(id *)(v657 + 128);

    id obja = v295;
  }
  float v296 = objc_opt_new();
  float v297 = [NSNumber numberWithInt:v259];
  [v296 setObject:v297 forKeyedSubscript:@"ScaleCount"];

  float v298 = [NSNumber numberWithInt:v294];
  [v296 setObject:v298 forKeyedSubscript:@"ScaleOffset"];

  uint64_t v299 = NSNumber;
  if (v291) {
    uint64_t v300 = 0;
  }
  else {
  v301 = [v299 numberWithUnsignedLong:v300];
  }
  [v296 setObject:v301 forKeyedSubscript:@"ScaleIndex"];

  [v296 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
  v302 = [NSNumber numberWithInt:v614];
  [obja setObject:v302 forKeyedSubscript:@"ScaleShift"];

  if (*(void *)(a1 + 640))
  {
    if (v583) {
      atomic_fetch_add_explicit(&v583->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v303 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v292, *(const unsigned __int8 **)(v269 + 16), *(int *)(v269 + 8));
    if (v583) {
      nitro::nitro_function::nitro_function(v583);
    }
    int v304 = [NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 640) + 8)];
    [v296 setObject:v304 forKeyedSubscript:@"BiasCount"];

    v305 = [NSNumber numberWithInt:v303];
    [v296 setObject:v305 forKeyedSubscript:@"BiasOffset"];

    v306 = NSNumber;
    if (v291) {
      uint64_t v307 = 0;
    }
    else {
    v308 = [v306 numberWithUnsignedLong:v307];
    }
    [v296 setObject:v308 forKeyedSubscript:@"BiasIndex"];

    [v296 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    v309 = [NSNumber numberWithInt:v580];
    [obja setObject:v309 forKeyedSubscript:@"BiasShift"];
  }
  [obja setObject:v296 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  v310 = v658;
  if (v658 != (std::string *)v657)
  {
    uint64_t v311 = v658 - 6;
    uint64_t v312 = HIBYTE(v658[-6].__r_.__value_.__r.__words[2]);
    char v313 = v312;
    std::string::size_type size = v658[-6].__r_.__value_.__l.__size_;
    if ((v312 & 0x80u) == 0) {
      std::string::size_type v315 = HIBYTE(v658[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v315 = v658[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v316 = buf[23];
    if (buf[23] < 0) {
      uint64_t v316 = *(void *)&buf[8];
    }
    if (v315 == v316)
    {
      if (buf[23] >= 0) {
        v317 = buf;
      }
      else {
        v317 = *(unsigned __int8 **)buf;
      }
      if ((char)v312 < 0)
      {
        data = (const std::string::value_type *)v311->__r_.__value_.__r.__words[0];
        if (memcmp(v311->__r_.__value_.__l.__data_, v317, v658[-6].__r_.__value_.__l.__size_)) {
          goto LABEL_582;
        }
      }
      else if ((_BYTE)v312)
      {
        unint64_t v318 = v658 - 6;
        while (v318->__r_.__value_.__s.__data_[0] == *v317)
        {
          unint64_t v318 = (std::string *)((char *)v318 + 1);
          ++v317;
          if (!--v312) {
            goto LABEL_578;
          }
        }
        goto LABEL_579;
      }
LABEL_578:
      std::string::append(v310 - 6, "__@pre_scale_bias");
      char v313 = HIBYTE(v310[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_579:
    if ((v313 & 0x80) == 0)
    {
      long long v356 = *(_OWORD *)&v311->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v310[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v356;
      goto LABEL_583;
    }
    data = v310[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v310[-6].__r_.__value_.__l.__size_;
LABEL_582:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_583:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v691, &__str, &v684, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  v357 = v695;
  v695 = @"GOC";

  objc_storeStrong(v696, obja);
  if (!*(unsigned char *)(a2 + 121))
  {
    v358 = v658;
    if ((unint64_t)v658 >= v659)
    {
      unint64_t v360 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
      if (v360 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v361 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
      if (v361 <= v360 + 1) {
        unint64_t v361 = v360 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v362 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v362 = v361;
      }
      *((void *)&v684 + 1) = &v659;
      if (v362) {
        unint64_t v362 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v362);
      }
      else {
        uint64_t v363 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v362;
      __str.__r_.__value_.__l.__size_ = v362 + 144 * v360;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v684 = v362 + 144 * v363;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, &__str);
      v359 = v658;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)buf);
      v359 = v358 + 6;
    }
    v658 = v359;
  }

  if (v693 < 0) {
    operator delete(v692);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v691;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v689;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }

  if (v583) {
    nitro::nitro_function::nitro_function(v583);
  }
  if (v682) {
    nitro::nitro_function::nitro_function(v682);
  }
  if (v613) {
    nitro::nitro_function::nitro_function(v613);
  }
  if (*((void *)&v611 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v611 + 1));
  }
  char v224 = 1;
  if (v223) {
LABEL_403:
  }
    nitro::nitro_function::nitro_function(v223);
LABEL_404:

  if (SBYTE7(v625) < 0) {
    operator delete((void *)v624);
  }
  *(void *)long long buf = &v622;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = (char *)&v620 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SBYTE7(v620) < 0) {
    operator delete((void *)v619);
  }
  if (v221) {
    nitro::nitro_function::nitro_function(v221);
  }
  if (v219) {
    nitro::nitro_function::nitro_function(v219);
  }
  if (v224)
  {
    if (*(_DWORD *)(a4 + 112)) {
LABEL_983:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
    goto LABEL_604;
  }
  uint64_t v225 = *(void **)(a1 + 472);
  if (v225 && *v225 && (v225[4] || v225[6] || v225[8] || v225[10]))
  {
    uint64_t v226 = v225[10];
    if (v226)
    {
      uint64_t v227 = *(int *)(v226 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v619, 2 * v227, 1, 1, 1);
      uint64_t v229 = (std::__shared_weak_count *)*((void *)&v619 + 1);
      uint64_t v228 = v619;
      v230 = *(const unsigned __int8 **)(v619 + 16);
      if (v227)
      {
        v231 = *(int **)(*(void *)(*(void *)(a1 + 472) + 80) + 16);
        int v232 = *(_WORD **)(v619 + 16);
        uint64_t v233 = v227;
        do
        {
          int v234 = *v231++;
          _S0 = v234;
          __asm { FCVT            H0, S0 }
          *v232++ = _S0;
          --v233;
        }
        while (v233);
      }
      int v239 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      if (v229)
      {
        atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
        v230 = *(const unsigned __int8 **)(v228 + 16);
      }
      uint64_t v240 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v239, v230, *(int *)(v228 + 8));
      if (v229) {
        nitro::nitro_function::nitro_function(v229);
      }
      std::string::size_type v241 = objc_opt_new();
      id v242 = [NSNumber numberWithUnsignedLong:v227];
      [v241 setObject:v242 forKeyedSubscript:@"ScaleCount"];

      v243 = [NSNumber numberWithInt:v240];
      [v241 setObject:v243 forKeyedSubscript:@"ScaleOffset"];

      v244 = NSNumber;
      if (v572) {
        uint64_t v245 = 0;
      }
      else {
      unint64_t v319 = [v244 numberWithUnsignedLong:v245];
      }
      [v241 setObject:v319 forKeyedSubscript:@"ScaleIndex"];

      [v241 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1) + 32))
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 448))(&__str);
        if (!__str.__r_.__value_.__r.__words[0])
        {
          unint64_t v320 = (std::__shared_weak_count *)a3[1];
          long long v606 = *a3;
          long long v607 = v320;
          if (v320) {
            atomic_fetch_add_explicit(&v320->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(long long *__return_ptr))(*(void *)(a1 + 560) + 120))(&v619);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v607) {
            nitro::nitro_function::nitro_function(v607);
          }
          unint64_t v321 = v620;
          v322 = (char *)operator new(0x58uLL);
          *((void *)v322 + 1) = 0;
          *((void *)v322 + 2) = 0;
          *(void *)v322 = &unk_1EE389920;
          uint64_t v323 = v619;
          *((void *)v322 + 3) = &unk_1EE36BEB0;
          *(_OWORD *)(v322 + 56) = 0u;
          *(_OWORD *)(v322 + 72) = 0u;
          *((_DWORD *)v322 + 8) = v321 >> 2;
          *((void *)v322 + 5) = v323;
          v322[48] = 0;
          v324 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v322 + 24);
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v322;
          if (v324)
          {
            nitro::nitro_function::nitro_function(v324);
            if (!__str.__r_.__value_.__r.__words[0]) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
            }
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v619, 4 * v227, 1, 1, 1);
        uint64_t v325 = v619;
        if (v227)
        {
          v326 = *(float **)(v619 + 16);
          unint64_t v327 = *(float **)(__str.__r_.__value_.__r.__words[0] + 16);
          unint64_t v328 = *(float **)(*(void *)(*(void *)(a1 + 472) + 80) + 16);
          uint64_t v329 = v227;
          do
          {
            float v330 = *v327++;
            float v331 = v330;
            float v332 = *v328++;
            *v326++ = v331 / v332;
            --v329;
          }
          while (v329);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v227, 1, 1, 1);
        uint64_t v333 = *(void *)buf;
        v334 = *(const unsigned __int8 **)(*(void *)buf + 16);
        if (v227)
        {
          unint64_t v335 = *(int **)(v325 + 16);
          unint64_t v336 = *(_WORD **)(*(void *)buf + 16);
          uint64_t v337 = v227;
          do
          {
            int v338 = *v335++;
            _S0 = v338;
            __asm { FCVT            H0, S0 }
            *v336++ = _S0;
            --v337;
          }
          while (v337);
        }
        v340 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          v334 = *(const unsigned __int8 **)(v333 + 16);
        }
        uint64_t v341 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v239, v334, *(int *)(v333 + 8));
        if (v340) {
          nitro::nitro_function::nitro_function(v340);
        }
        v342 = [NSNumber numberWithUnsignedLong:v227];
        [v241 setObject:v342 forKeyedSubscript:@"BiasCount"];

        v343 = [NSNumber numberWithInt:v341];
        [v241 setObject:v343 forKeyedSubscript:@"BiasOffset"];

        v344 = NSNumber;
        if (v572) {
          uint64_t v345 = 0;
        }
        else {
        v346 = [v344 numberWithUnsignedLong:v345];
        }
        [v241 setObject:v346 forKeyedSubscript:@"BiasIndex"];

        [v241 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
        if (v340) {
          nitro::nitro_function::nitro_function(v340);
        }
        if (*((void *)&v619 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v619 + 1));
        }
        if (__str.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
      }
      v347 = objc_opt_new();
      [v347 setObject:v241 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v619, a5);
      v348 = (void *)*((void *)&v626 + 1);
      *((void *)&v626 + 1) = @"GOC";

      objc_storeStrong((id *)&v627, v347);
      v349 = v658;
      if ((unint64_t)v658 >= v659)
      {
        unint64_t v351 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
        if (v351 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v352 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
        if (v352 <= v351 + 1) {
          unint64_t v352 = v351 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v353 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v353 = v352;
        }
        *((void *)&v689 + 1) = &v659;
        if (v353) {
          unint64_t v353 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v353);
        }
        else {
          uint64_t v354 = 0;
        }
        *(void *)long long buf = v353;
        *(void *)&buf[8] = v353 + 144 * v351;
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        *(void *)&long long v689 = v353 + 144 * v354;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v619);
        *(void *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, buf);
        v350 = v658;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)&v619);
        v350 = v349 + 6;
      }
      v658 = v350;

      if (SBYTE7(v625) < 0) {
        operator delete((void *)v624);
      }
      *(void *)long long buf = &v622;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)long long buf = (char *)&v620 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SBYTE7(v620) < 0) {
        operator delete((void *)v619);
      }

      if (!v229) {
        goto LABEL_604;
      }
LABEL_603:
      nitro::nitro_function::nitro_function(v229);
      goto LABEL_604;
    }
  }
  if (!*(_DWORD *)(a4 + 112))
  {
    if (!*(_DWORD *)(a4 + 32)) {
      goto LABEL_604;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 448))(&v619);
    uint64_t v275 = v619;
    if (*((void *)&v619 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v619 + 1));
    }
    if (!v275) {
      goto LABEL_604;
    }
    if (*(unsigned char *)(a2 + 121))
    {
      id v276 = *(id *)(v657 + 128);
    }
    else
    {
      id v276 = (id)objc_opt_new();
    }
    v391 = objc_opt_new();
    v392 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
    [v391 setObject:v392 forKeyedSubscript:@"BiasCount"];

    v393 = (std::__shared_weak_count *)a3[1];
    v602 = *a3;
    v603 = v393;
    if (v393) {
      atomic_fetch_add_explicit(&v393->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v619, "blob_biases_f16");
    uint64_t v394 = a1 + 560;
    int v395 = (*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(a1 + 560, &v602);
    if (SBYTE7(v620) < 0) {
      operator delete((void *)v619);
    }
    if (v603) {
      nitro::nitro_function::nitro_function(v603);
    }
    if (v395 < 0)
    {
      v407 = (std::__shared_weak_count *)a3[1];
      unint64_t v596 = *a3;
      __int16 v597 = v407;
      if (v407) {
        atomic_fetch_add_explicit(&v407->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v619, "blob_biases");
      uint64_t v397 = (*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v394, &v596);
      if (SBYTE7(v620) < 0) {
        operator delete((void *)v619);
      }
      if (v597) {
        nitro::nitro_function::nitro_function(v597);
      }
      v408 = (std::__shared_weak_count *)a3[1];
      uint64_t v594 = *a3;
      v595 = v408;
      if (v408) {
        atomic_fetch_add_explicit(&v408->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(long long *__return_ptr, uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v619, v394, &v594);
      v399 = (Espresso::ANECompilerEngine::compiler *)v619;
      unint64_t v400 = v620;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v401 = v595;
      if (!v595) {
        goto LABEL_684;
      }
    }
    else
    {
      v396 = (std::__shared_weak_count *)a3[1];
      v600 = *a3;
      v601 = v396;
      if (v396) {
        atomic_fetch_add_explicit(&v396->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v619, "blob_biases_f16");
      uint64_t v397 = (*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v394, &v600);
      if (SBYTE7(v620) < 0) {
        operator delete((void *)v619);
      }
      if (v601) {
        nitro::nitro_function::nitro_function(v601);
      }
      v398 = (std::__shared_weak_count *)a3[1];
      v598 = *a3;
      v599 = v398;
      if (v398) {
        atomic_fetch_add_explicit(&v398->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
      (*(void (**)(long long *__return_ptr, uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 120))(&v619, v394, &v598);
      v399 = (Espresso::ANECompilerEngine::compiler *)v619;
      unint64_t v400 = v620;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v401 = v599;
      if (!v599) {
        goto LABEL_684;
      }
    }
    nitro::nitro_function::nitro_function(v401);
LABEL_684:
    (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 448))(buf);
    if (!*(void *)buf)
    {
      int v402 = (char *)operator new(0x58uLL);
      *((void *)v402 + 1) = 0;
      *((void *)v402 + 2) = 0;
      *(void *)int v402 = &unk_1EE389920;
      *((void *)v402 + 3) = &unk_1EE36BEB0;
      *(_OWORD *)(v402 + 56) = 0u;
      *(_OWORD *)(v402 + 72) = 0u;
      *((_DWORD *)v402 + 8) = v400 >> 2;
      *((void *)v402 + 5) = v399;
      v402[48] = 0;
      std::string::size_type v403 = *(std::__shared_weak_count **)&buf[8];
      *(void *)long long buf = v402 + 24;
      *(void *)&buf[8] = v402;
      if (v403)
      {
        nitro::nitro_function::nitro_function(v403);
        if (!*(void *)buf) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
      }
    }
    v404 = (std::__shared_weak_count *)a3[1];
    v592 = *a3;
    v593 = v404;
    if (v404) {
      atomic_fetch_add_explicit(&v404->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v619, "blob_biases_f16");
    int v405 = (*(uint64_t (**)(uint64_t, const Espresso::net **))(*(void *)(a1 + 560) + 88))(v394, &v592);
    if (SBYTE7(v620) < 0) {
      operator delete((void *)v619);
    }
    if (v593) {
      nitro::nitro_function::nitro_function(v593);
    }
    if (v405 < 0)
    {
      std::string::size_type v409 = *(int **)(*(void *)buf + 16);
      uint64_t v410 = *(int *)(*(void *)buf + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v619, 2 * v410, 1, 1, 1);
      uint64_t v411 = v619;
      long long v412 = *(const unsigned __int8 **)(v619 + 16);
      if (v410)
      {
        uint64_t v413 = *(_WORD **)(v619 + 16);
        do
        {
          int v414 = *v409++;
          _S0 = v414;
          __asm { FCVT            H0, S0 }
          *v413++ = _S0;
          --v410;
        }
        while (v410);
      }
      v416 = (std::__shared_weak_count *)*((void *)&v619 + 1);
      if (*((void *)&v619 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v619 + 1) + 8), 1uLL, memory_order_relaxed);
        long long v412 = *(const unsigned __int8 **)(v411 + 16);
      }
      uint64_t v397 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v412, *(int *)(v411 + 8));
      if (v416) {
        nitro::nitro_function::nitro_function(v416);
      }
      uint64_t v417 = NSNumber;
      if (v572) {
        uint64_t v418 = 0;
      }
      else {
      uint64_t v426 = [v417 numberWithUnsignedLong:v418];
      }
      [v391 setObject:v426 forKeyedSubscript:@"BiasIndex"];

      if (v416) {
        nitro::nitro_function::nitro_function(v416);
      }
    }
    else
    {
      v406 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, v399, (const void *)v400));
      [v391 setObject:v406 forKeyedSubscript:@"BiasIndex"];
    }
    int v427 = [NSNumber numberWithInt:v397];
    [v391 setObject:v427 forKeyedSubscript:@"BiasOffset"];

    [v391 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    [v276 setObject:v391 forKeyedSubscript:@"BiasScaleGroupData"];
    if (!*(unsigned char *)(a2 + 121))
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v619, a5);
      uint64_t v428 = (void *)*((void *)&v626 + 1);
      *((void *)&v626 + 1) = @"GOC";

      objc_storeStrong((id *)&v627, v276);
      v429 = v658;
      if ((unint64_t)v658 >= v659)
      {
        uint64_t v430 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v657, (uint64_t)&v619);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)&v619);
        uint64_t v430 = v429 + 6;
      }
      v658 = v430;

      if (SBYTE7(v625) < 0) {
        operator delete((void *)v624);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v622;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v620 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SBYTE7(v620) < 0) {
        operator delete((void *)v619);
      }
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }

    goto LABEL_604;
  }
  if (*(unsigned char *)(a2 + 121)) {
    goto LABEL_983;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 448))(&v604);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias((uint64_t)&__str, (uint64_t)&v604, *(_DWORD *)(*a7 + 16), *(unsigned __int8 *)(a2 + 384), 0, 0.0);
  if (v605) {
    nitro::nitro_function::nitro_function(v605);
  }
  uint64_t v229 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  std::string::size_type v246 = __str.__r_.__value_.__r.__words[0];
  if (__str.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v247 = __str.__r_.__value_.__r.__words[2];
  v248 = (std::__shared_weak_count *)v684;
  if ((void)v684) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v684 + 8), 1uLL, memory_order_relaxed);
  }
  v249 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  if (v229) {
    atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v250 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v249, *(const unsigned __int8 **)(v246 + 16), *(int *)(v246 + 8));
  if (v229) {
    nitro::nitro_function::nitro_function(v229);
  }
  if (v248) {
    atomic_fetch_add_explicit(&v248->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v251 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v249, *(const unsigned __int8 **)(v247 + 16), *(int *)(v247 + 8));
  if (v248) {
    nitro::nitro_function::nitro_function(v248);
  }
  v252 = objc_opt_new();
  unint64_t v253 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
  [v252 setObject:v253 forKeyedSubscript:@"BiasCount"];

  unint64_t v254 = [NSNumber numberWithInt:v251];
  [v252 setObject:v254 forKeyedSubscript:@"BiasOffset"];

  unint64_t v255 = NSNumber;
  if (v572) {
    uint64_t v256 = 0;
  }
  else {
  v277 = [v255 numberWithUnsignedLong:v256];
  }
  [v252 setObject:v277 forKeyedSubscript:@"BiasIndex"];

  [v252 setObject:@"Float32" forKeyedSubscript:@"BiasType"];
  uint64_t v278 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
  [v252 setObject:v278 forKeyedSubscript:@"ScaleCount"];

  char v279 = [NSNumber numberWithInt:v250];
  [v252 setObject:v279 forKeyedSubscript:@"ScaleOffset"];

  std::string::size_type v280 = NSNumber;
  if (v572) {
    uint64_t v281 = 0;
  }
  else {
  uint64_t v282 = [v280 numberWithUnsignedLong:v281];
  }
  [v252 setObject:v282 forKeyedSubscript:@"ScaleIndex"];

  [v252 setObject:@"Float32" forKeyedSubscript:@"ScaleType"];
  v283 = objc_opt_new();
  [v283 setObject:v252 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v619, a5);
  v284 = (void *)*((void *)&v626 + 1);
  *((void *)&v626 + 1) = @"GOC";

  objc_storeStrong((id *)&v627, v283);
  v285 = v658;
  if ((unint64_t)v658 >= v659)
  {
    unint64_t v287 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
    if (v287 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v288 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
    if (v288 <= v287 + 1) {
      unint64_t v288 = v287 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v289 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v289 = v288;
    }
    *((void *)&v689 + 1) = &v659;
    if (v289) {
      unint64_t v289 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v289);
    }
    else {
      uint64_t v290 = 0;
    }
    *(void *)long long buf = v289;
    *(void *)&buf[8] = v289 + 144 * v287;
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v689 = v289 + 144 * v290;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v619);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, buf);
    v286 = v658;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)&v619);
    v286 = v285 + 6;
  }
  v658 = v286;

  if (SBYTE7(v625) < 0) {
    operator delete((void *)v624);
  }
  *(void *)long long buf = &v622;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = (char *)&v620 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SBYTE7(v620) < 0) {
    operator delete((void *)v619);
  }

  if (v248) {
    nitro::nitro_function::nitro_function(v248);
  }
  if (v229) {
    nitro::nitro_function::nitro_function(v229);
  }
  if (v248) {
    nitro::nitro_function::nitro_function(v248);
  }
  if (v229) {
    goto LABEL_603;
  }
LABEL_604:
  if (*(_DWORD *)(a4 + 24))
  {
    if (*(unsigned char *)(a2 + 121))
    {
      id v364 = *(id *)(v657 + 128);
    }
    else
    {
      id v364 = (id)objc_opt_new();
    }
    [v364 setObject:@"ReLU" forKeyedSubscript:@"Type"];
    if (*(unsigned char *)(a2 + 121)) {
      goto LABEL_773;
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v619, a5);
    v365 = (void *)*((void *)&v626 + 1);
    *((void *)&v626 + 1) = @"Neuron";

    objc_storeStrong((id *)&v627, v364);
    v366 = v658;
    if ((unint64_t)v658 >= v659)
    {
      unint64_t v368 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
      if (v368 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v369 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
      if (v369 <= v368 + 1) {
        unint64_t v369 = v368 + 1;
      }
      v370 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v369);
      *((void *)&v689 + 1) = &v659;
      if (v370) {
        v370 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v370);
      }
      else {
        uint64_t v371 = 0;
      }
      *(void *)long long buf = v370;
      *(void *)&buf[8] = &v370[144 * v368];
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v689 = &v370[144 * v371];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v619);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, buf);
      unint64_t v367 = v658;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)&v619);
      unint64_t v367 = v366 + 6;
    }
    v658 = v367;

    if (SBYTE7(v625) < 0) {
      operator delete((void *)v624);
    }
    *(void *)long long buf = &v622;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = (char *)&v620 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SBYTE7(v620) & 0x80000000) == 0) {
      goto LABEL_773;
    }
    uint64_t v377 = (void *)v619;
    goto LABEL_639;
  }
  if (!*(_DWORD *)(a4 + 28))
  {
    if (*(_DWORD *)(a4 + 60) != -1) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    }
    goto LABEL_774;
  }
  if (*(unsigned char *)(a2 + 121))
  {
    id v364 = *(id *)(v657 + 128);
  }
  else
  {
    id v364 = (id)objc_opt_new();
  }
  [v364 setObject:@"Tanh" forKeyedSubscript:@"Type"];
  if (*(unsigned char *)(a2 + 121))
  {
LABEL_773:

LABEL_774:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 560) + 32))(a1 + 560, a2, &v657);
    goto LABEL_775;
  }
  int v372 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v619, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v372 + 472, (uint64_t)&v619, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SBYTE7(v620) < 0) {
    operator delete((void *)v619);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)*a3 + 472);
  v373 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v375 = v373;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_643;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_643;
    }
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_649:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v619, a5);
    int v381 = (void *)*((void *)&v626 + 1);
    *((void *)&v626 + 1) = @"Neuron";

    objc_storeStrong((id *)&v627, v364);
    v382 = v658;
    if ((unint64_t)v658 >= v659)
    {
      unint64_t v385 = 0x8E38E38E38E38E39 * (((uint64_t)v658 - v657) >> 4);
      if (v385 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v386 = 0x1C71C71C71C71C72 * ((uint64_t)(v659 - v657) >> 4);
      if (v386 <= v385 + 1) {
        unint64_t v386 = v385 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v659 - v657) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v387 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v387 = v386;
      }
      *((void *)&v689 + 1) = &v659;
      if (v387) {
        unint64_t v387 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v387);
      }
      else {
        uint64_t v388 = 0;
      }
      *(void *)long long buf = v387;
      *(void *)&buf[8] = v387 + 144 * v385;
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v689 = v387 + 144 * v388;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v619);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v657, buf);
      v383 = v658;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v658, (uint64_t)&v619);
      v383 = v382 + 6;
    }
    v658 = v383;

    if (SBYTE7(v625) < 0) {
      operator delete((void *)v624);
    }
    *(void *)long long buf = &v622;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = (char *)&v620 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SBYTE7(v620) < 0) {
      operator delete((void *)v619);
    }

    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_773;
    }
    uint64_t v377 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_639:
    operator delete(v377);
    goto LABEL_773;
  }
LABEL_643:
  if (!Espresso::ANECompilerEngine::is_mix(v373, v374)) {
    goto LABEL_649;
  }
  std::string::size_type v378 = (long long *)&v658[-6];
  std::string::append(v658 - 6, "_pre_tanh");
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 560) + 32))(a1 + 560, a2, &v657);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((std::string *)&v619, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  uint64_t v380 = *((void *)&v622 + 1);
  unint64_t v379 = v622;
  while (v380 != v379)
  {
    if (*(char *)(v380 - 1) < 0) {
      operator delete(*(void **)(v380 - 24));
    }
    v380 -= 24;
  }
  *((void *)&v622 + 1) = v379;
  if (v379 >= (unint64_t)v623)
  {
    v384 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v622, (uint64_t)v378);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v622, v378);
    v384 = (std::string *)(v379 + 24);
  }
  *((void *)&v622 + 1) = v384;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)(a1 + 560) + 48))(a1 + 560, a2, &v619);

  if (SBYTE7(v625) < 0) {
    operator delete((void *)v624);
  }
  *(void *)long long buf = &v622;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = (char *)&v620 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SBYTE7(v620) < 0) {
    operator delete((void *)v619);
  }

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

LABEL_775:
  *(void *)&long long v619 = &v657;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v619);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&v669);
}

void sub_19272C440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  nitro::nitro_function::nitro_function(v66);
  if (a66) {
    nitro::nitro_function::nitro_function(a66);
  }

  STACK[0x508] = (unint64_t)&STACK[0x360];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x508]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(void *a1, uint64_t a2, uint64_t *a3, Espresso::quantized_weights_helper **a4, void *a5, Espresso::quantized_weights_helper ***a6)
{
  v111[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v107 = (id *)a2;
  uint64_t v108 = a1;
  id v106 = a5;
  char v105 = *(unsigned char *)(a2 + 552);
  v104[0] = (Espresso::quantized_weights_helper ***)&v108;
  v104[1] = a6;
  v104[2] = (Espresso::quantized_weights_helper ***)&v107;
  v104[3] = (Espresso::quantized_weights_helper ***)&v106;
  v104[4] = (Espresso::quantized_weights_helper ***)&v105;
  uint8x8_t v10 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  unint64_t v11 = [v10 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v12 = [v11 objectForKeyedSubscript:@"espresso.anecompiler.always_bloat"];
  int v13 = [v12 BOOLValue];

  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<rdar://problem/39402422> 257a: \"Illegal cog size\" or \"NE kernel blob too large \" assertion when using large convolutions with int8 weights");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
    goto LABEL_10;
  }
  double v14 = *a4;
  if (*((void *)*a4 + 4) || *((void *)v14 + 6) || *((void *)v14 + 8))
  {
    int v15 = v108;
    if (!v108
      || *(__int16 *)((*(uint64_t (**)(void *))(*v108 + 384))(v108) + 96) <= 1
      && *(__int16 *)((*(uint64_t (**)(void *))(*v15 + 384))(v15) + 98) < 2)
    {
      int v17 = v107;
      Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
      int v18 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
      char is_mix = Espresso::ANECompilerEngine::is_mix(v18, v19);
      int v21 = *a4;
      if (*((void *)*a4 + 4))
      {
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        int v90 = v22;
        int v23 = Espresso::ANECompilerEngine::is_mix(v18, (NSString *)&v22->__vftable);
        int v25 = Espresso::ANECompilerEngine::is_mix(v18, v24);
        if (v23) {
          unint64_t v26 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_fp16_palettes;
        }
        else {
          unint64_t v26 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_fp16_palettes;
        }
        uint64_t v27 = (uint64_t)*a4;
        v111[0] = &unk_1EE37C380;
        v111[1] = v17;
        v111[3] = v111;
        if (v25) {
          BOOL v28 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_fp16_palettes;
        }
        else {
          BOOL v28 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_fp16_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_f16_weights(v27, v106, (uint64_t)v111, v26, v28, is_mix, (uint64_t)&__p);
        uint64_t v29 = v111;
      }
      else if (*((void *)v21 + 8))
      {
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        int v90 = v30;
        int v31 = Espresso::ANECompilerEngine::is_mix(v18, (NSString *)&v30->__vftable);
        int v33 = Espresso::ANECompilerEngine::is_mix(v18, v32);
        if (v31) {
          uint64_t v34 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_uint8_palettes;
        }
        else {
          uint64_t v34 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_uint8_palettes;
        }
        uint64_t v35 = (uint64_t)*a4;
        v110[0] = &unk_1EE37C380;
        v110[1] = v17;
        v110[3] = v110;
        if (v33) {
          unint64_t v36 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_uint8_palettes;
        }
        else {
          unint64_t v36 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_uint8_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_uint8_weights(v35, v106, (uint64_t)v110, v34, v36, is_mix, (uint64_t)&__p);
        uint64_t v29 = v110;
      }
      else
      {
        if (!*((void *)v21 + 6)) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown lookup table type.");
        }
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        int v90 = v37;
        int v38 = Espresso::ANECompilerEngine::is_mix(v18, (NSString *)&v37->__vftable);
        int v40 = Espresso::ANECompilerEngine::is_mix(v18, v39);
        if (v38) {
          int v41 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_int8_palettes;
        }
        else {
          int v41 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_int8_palettes;
        }
        uint64_t v42 = (uint64_t)*a4;
        v109[0] = &unk_1EE37C380;
        v109[1] = v17;
        void v109[3] = v109;
        if (v40) {
          float v43 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_int8_palettes;
        }
        else {
          float v43 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_int8_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_int8_weights(v42, v106, (uint64_t)v109, v41, v43, is_mix, (uint64_t)&__p);
        uint64_t v29 = v109;
      }
      std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v29);

      goto LABEL_38;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Dilated + LUT");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
    goto LABEL_10;
  }
  if (*((_DWORD *)v14 + 39) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Not 8 bits");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
LABEL_10:
    if (SHIBYTE(v91) < 0)
    {
      long long v16 = __p;
LABEL_12:
      operator delete(v16);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if (*((unsigned char *)v14 + 164))
  {
    if (Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(v14))
    {
      uint64_t v44 = v108[59];
      uint64_t v45 = *(void *)(v44 + 80);
      BOOL v46 = *(std::__shared_weak_count **)(v44 + 88);
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v47 = 0;
      if (v45)
      {
        LODWORD(__p) = 0;
        vDSP_minmgv(*(const float **)(v45 + 16), 1, (float *)&__p, *(int *)(v45 + 8));
        if (*(float *)&__p < 0.000061035) {
          BOOL v47 = 1;
        }
      }
      if (v46) {
        nitro::nitro_function::nitro_function(v46);
      }
      if (!v47)
      {
        std::string::size_type v59 = v108;
        BOOL v60 = (std::__shared_weak_count *)a3[1];
        uint64_t v102 = *a3;
        int v103 = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        uint64_t v61 = (*(uint64_t (**)(void *, uint64_t *, void *, void **))(v59[70] + 88))(v59 + 70, &v102, v59, &__p);
        if (SHIBYTE(v91) < 0) {
          operator delete(__p);
        }
        if (v103) {
          nitro::nitro_function::nitro_function(v103);
        }
        if ((v61 & 0x80000000) != 0)
        {
          uint64_t v67 = *(void *)*a4;
          uint64_t v66 = (std::__shared_weak_count *)*((void *)*a4 + 1);
          if (v66)
          {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v68 = v107;
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v69 = v66;
          }
          else
          {
            uint64_t v69 = 0;
            unint64_t v68 = v107;
          }
          uint64_t v61 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(v68 + 16), *(const unsigned __int8 **)(v67 + 16), *(int *)(v67 + 8));
          if (v69) {
            nitro::nitro_function::nitro_function(v69);
          }
          if (v105) {
            uint64_t weights_file_index = 0;
          }
          else {
          if (v108) {
            long long v81 = (Espresso::ANECompilerEngine::ane_kernel *)(v108 + 70);
          }
          else {
            long long v81 = 0;
          }
          v101[0] = v67;
          v101[1] = v66;
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v81, v101);
          if (v66)
          {
            nitro::nitro_function::nitro_function(v66);
            nitro::nitro_function::nitro_function(v66);
          }
        }
        else
        {
          BOOL v62 = v108;
          id v63 = (std::__shared_weak_count *)a3[1];
          uint64_t v99 = *a3;
          id v100 = v63;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v98, "W_S8");
          (*(void (**)(void **__return_ptr))(v62[70] + 120))(&__p);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v98.__r_.__value_.__l.__data_);
          }
          if (v100) {
            nitro::nitro_function::nitro_function(v100);
          }
          uint64_t weights_file_index = Espresso::ANECompilerEngine::get_primary_weights_file_index(v107, (Espresso::ANECompilerEngine::compiler *)__p, v91);
          if (v108) {
            std::string::size_type v65 = (Espresso::ANECompilerEngine::ane_kernel *)(v108 + 70);
          }
          else {
            std::string::size_type v65 = 0;
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v65, __p);
        }
        long long v82 = [NSNumber numberWithInt:v61];
        [v106 setObject:v82 forKeyedSubscript:@"KernelOffset"];

        uint64_t v83 = [NSNumber numberWithUnsignedLong:weights_file_index];
        [v106 setObject:v83 forKeyedSubscript:@"KernelIndex"];

        [v106 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Overflowing");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Not symmetric");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)&__p);
    }
    goto LABEL_10;
  }
  uint64_t v48 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat");
  std::string::basic_string[abi:ne180100]<0>(&v97, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v48 + 472, (uint64_t)&__p, (uint64_t)&v97, &v98);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v98.__r_.__value_.__l.__size_ == 1)
    {
      uint64_t v49 = (std::string *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_58;
    }
  }
  else if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) == 1)
  {
    uint64_t v49 = &v98;
LABEL_58:
    BOOL v50 = v49->__r_.__value_.__s.__data_[0] == 49;
    goto LABEL_60;
  }
  BOOL v50 = 0;
LABEL_60:
  uint64_t v51 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat_v2");
  std::string::basic_string[abi:ne180100]<0>(v95, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v51 + 472, (uint64_t)&__p, (uint64_t)v95, &v97);
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v97.__r_.__value_.__l.__size_ == 1)
    {
      uint64_t v52 = (std::string *)v97.__r_.__value_.__r.__words[0];
      goto LABEL_69;
    }
LABEL_70:
    BOOL v53 = 0;
    goto LABEL_71;
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) != 1) {
    goto LABEL_70;
  }
  uint64_t v52 = &v97;
LABEL_69:
  BOOL v53 = v52->__r_.__value_.__s.__data_[0] == 49;
LABEL_71:
  Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(*a4, v50, v53, (uint64_t)&__p);
  if (!__p) {
    goto LABEL_82;
  }
  uint64_t v54 = v94;
  v88[0] = v93;
  v88[1] = (uint64_t)v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v88);
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  if (!is_qbias_zero)
  {
LABEL_82:
    std::string::basic_string[abi:ne180100]<0>(v95, "Unsigned / Not symmetric");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)v95);
LABEL_83:
    if (v96 < 0) {
      operator delete(v95[0]);
    }
    if (v94) {
      nitro::nitro_function::nitro_function(v94);
    }
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
    if (v90) {
      nitro::nitro_function::nitro_function(v90);
    }
    goto LABEL_153;
  }
  uint64_t v56 = (const float **)v91;
  uint64_t v57 = v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v58 = 0;
  if (v56)
  {
    LODWORD(v95[0]) = 0;
    vDSP_minmgv(v56[2], 1, (float *)v95, *((int *)v56 + 2));
    if (*(float *)v95 < 0.000061035) {
      BOOL v58 = 1;
    }
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (v58)
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "Unsigned / Overflowing");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v104, (uint64_t *)v95);
    goto LABEL_83;
  }
  uint64_t v70 = v108[59];
  uint64_t v72 = v91;
  uint64_t v71 = v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v73 = *(std::__shared_weak_count **)(v70 + 88);
  *(void *)(v70 + 80) = v72;
  *(void *)(v70 + 88) = v71;
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  unsigned int v74 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(v107 + 16);
  int v75 = (const unsigned __int8 **)__p;
  int v76 = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v77 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v74, v75[2], *((int *)v75 + 2));
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  uint64_t v78 = [NSNumber numberWithInt:v77];
  [v106 setObject:v78 forKeyedSubscript:@"KernelOffset"];

  [v106 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
  uint64_t v79 = NSNumber;
  if (v105) {
    uint64_t v80 = 0;
  }
  else {
  uint64_t v84 = [v79 numberWithUnsignedLong:v80];
  }
  [v106 setObject:v84 forKeyedSubscript:@"KernelIndex"];

  if (v108) {
    int v85 = (Espresso::ANECompilerEngine::ane_kernel *)(v108 + 70);
  }
  else {
    int v85 = 0;
  }
  int v86 = v90;
  v87[0] = __p;
  v87[1] = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v85, v87);
  if (v86) {
    nitro::nitro_function::nitro_function(v86);
  }
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
LABEL_153:
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v16 = (void *)v98.__r_.__value_.__r.__words[0];
    goto LABEL_12;
  }
LABEL_38:
}

void sub_19272E0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(Espresso::quantized_weights_helper ****a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = **a1;
  if (v4
  {
    Espresso::quantized_weights_helper::dequantize_to_float16_2d(v4[59], buf);
  }
  else
  {
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(v4[59], buf);
  }
  uint64_t v6 = *(void *)buf;
  uint64_t v5 = *(std::__shared_weak_count **)&buf[8];
  CFHashCode v7 = (Espresso::ANECompilerEngine::final_anec_weights_t *)a1[1];
  CFHashCode v8 = **a1;
  if (v8) {
    unint64_t v9 = (Espresso::ANECompilerEngine::ane_kernel *)(v8 + 70);
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v23 = *(void *)buf;
  uint64_t v24 = *(void *)&buf[8];
  if (*(void *)&buf[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(v7, v9, &v23);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v12 = Espresso::espresso_os_log_subsystem(v10, v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v21 = a2;
    }
    else {
      int v21 = (uint64_t *)*a2;
    }
    uint64_t v22 = *(int *)(v6 + 8);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v22;
    _os_log_debug_impl(&dword_1920CB000, v12, OS_LOG_TYPE_DEBUG, "[ANEC/handle_quantized_weights] Bloating (%s) W: %zu", buf, 0x16u);
  }

  int v13 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(*a1[2] + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v13, *(const unsigned __int8 **)(v6 + 16), *(int *)(v6 + 8));
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  int v15 = objc_msgSend(NSNumber, "numberWithInt:", v14, v23, v24);
  [*a1[3] setObject:v15 forKeyedSubscript:@"KernelOffset"];

  [*a1[3] setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  long long v16 = NSNumber;
  if (*(unsigned char *)a1[4]) {
    uint64_t weights_file_index = 0;
  }
  else {
  int v18 = [v16 numberWithUnsignedLong:weights_file_index];
  }
  [*a1[3] setObject:v18 forKeyedSubscript:@"KernelIndex"];

  int v19 = (**a1)[59];
  BOOL v20 = (std::__shared_weak_count *)*((void *)v19 + 11);
  *((void *)v19 + 10) = 0;
  *((void *)v19 + 11) = 0;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_19272E5F0(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine24handle_quantized_weightsIPNS0_20deconvolution_kernelEEEvT_PNS0_8compilerENSt3__110shared_ptrINS_3netEEENS8_INS_24quantized_weights_helperEEEP19NSMutableDictionaryRNS0_20final_anec_weights_tEEUlPKhmE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, const unsigned __int8 **a2, size_t *a3)
{
  unsigned int v4 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(*(void *)(a1 + 8) + 128), *a2, *a3);
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 552)) {
  return v4;
  }
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C380;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37C380;
  result[1] = v3;
  return result;
}

void std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__func()
{
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::weights_helper_quantization_axis(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  return 1;
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::weights_helper_weights_shape(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 464))();
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::get_f16_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 800);
  *a2 = *(void *)(this + 792);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::ANECompilerEngine::deconvolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 792) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 800);
  *(void *)(a1 + 800) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 784);
  *a2 = *(void *)(this + 776);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 648);
  *a2 = *(void *)(this + 640);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::ANECompilerEngine::deconvolution_kernel::set_weights()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob<float,4>::ptr blob");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19272E87C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::deconvolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 776) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 784);
  *(void *)(a1 + 784) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::ANECompilerEngine::deconvolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 640) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 648);
  *(void *)(a1 + 648) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

const char *Espresso::generic_deconvolution_kernel::kernel_type_str(Espresso::generic_deconvolution_kernel *this)
{
  return "deconvolution";
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

void Espresso::ANECompilerEngine::deconvolution_kernel::__set_weight_raw_blob(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(long long *__return_ptr, uint64_t *))(*a1 + 632))(v17, a1);
  unint64_t v11 = (std::__shared_weak_count *)a1[2];
  v16[0] = a1[1];
  v16[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t *))(*a1 + 640))(a1);
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, a1 + 59, v17, v16, v12, 1);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 70, (uint64_t *)a3, a4, a5);
}

void sub_19272EA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::deconvolution_kernel::~deconvolution_kernel(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  *(void *)this = &unk_1EE343D40;
  uint64_t v2 = (Espresso::ANECompilerEngine::deconvolution_kernel *)((char *)this + 560);
  *((void *)this + 70) = &unk_1EE343FD8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE343D40;
  uint64_t v2 = (Espresso::ANECompilerEngine::deconvolution_kernel *)((char *)this + 560);
  *((void *)this + 70) = &unk_1EE343FD8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::general_concat_kernel::~general_concat_kernel(Espresso::ANECompilerEngine::general_concat_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::general_concat_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::general_concat_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::general_concat_kernel::compile(Espresso::ANECompilerEngine::general_concat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::general_concat_kernel::compile(Espresso::ANECompilerEngine::general_concat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v138 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  v153[0] = a3[6];
  unint64_t v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v153[0], (long long **)v153)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v137 = v9;
  v153[0] = a3;
  uint8x8_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)v153);
  uint64_t v130 = v7;
  uint64_t v134 = this;
  uint64_t v12 = *((void *)v10 + 5);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  obuint64_t j = v12;
  char v131 = a3;
  id v132 = a2;
  int v139 = v11;
  double v14 = (unsigned __int8 *)a3[6];
  __n128 v13 = (unsigned __int8 *)a3[7];
  if (v14 == v13)
  {
    int v17 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    long long v16 = 0;
    int v17 = 0;
    do
    {
      *(void *)long long buf = v14;
      int v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v14, (long long **)buf);
      int v19 = (_OWORD *)*((void *)v18 + 5);
      if (v19
      {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v21 = v19[11];
        *(_OWORD *)int v153 = v19[10];
        long long v154 = v21;
        nitro::nitro_function::nitro_function(v20);
      }
      else
      {
        long long v22 = v19[11];
        *(_OWORD *)int v153 = v19[10];
        long long v154 = v22;
      }
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v24 = (v16 - v17) >> 5;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v15 - (void)v17) >> 4 > v25) {
          unint64_t v25 = (uint64_t)(v15 - (void)v17) >> 4;
        }
        if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v26);
        }
        else {
          uint64_t v27 = 0;
        }
        BOOL v28 = (_OWORD *)(v26 + 32 * v24);
        *BOOL v28 = *(_OWORD *)v153;
        v28[1] = v154;
        if (v16 == v17)
        {
          int v31 = (char *)(v26 + 32 * v24);
        }
        else
        {
          unint64_t v29 = v26 + 32 * v24;
          do
          {
            long long v30 = *((_OWORD *)v16 - 1);
            int v31 = (char *)(v29 - 32);
            *(_OWORD *)(v29 - 32) = *((_OWORD *)v16 - 2);
            *(_OWORD *)(v29 - 16) = v30;
            v16 -= 32;
            v29 -= 32;
          }
          while (v16 != v17);
        }
        unint64_t v15 = v26 + 32 * v27;
        long long v16 = (char *)(v28 + 2);
        if (v17) {
          operator delete(v17);
        }
        int v17 = v31;
      }
      else
      {
        long long v23 = v154;
        *(_OWORD *)long long v16 = *(_OWORD *)v153;
        *((_OWORD *)v16 + 1) = v23;
        v16 += 32;
      }
      v14 += 24;
    }
    while (v14 != v13);
  }
  Espresso::abstract_blob_container::shape((char *)v153, obj);
  if (v154 == 1) {
    int v32 = 4;
  }
  else {
    int v32 = 5;
  }
  if (DWORD1(v154) == -1) {
    int v33 = v32;
  }
  else {
    int v33 = DWORD1(v154);
  }
  if (__p)
  {
    v156[0] = __p;
    operator delete(__p);
  }
  uint64_t v34 = (Espresso::ANECompilerEngine *)((v33 & (*((int *)this + 70) >> 31)) + *((_DWORD *)this + 70));
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  v142[0] = 0;
  if (*((unsigned char *)this + 284))
  {
    ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v34, v33, *(unsigned char *)(v130 + 1281));
  }
  else
  {
    ANECAxisForNDAxis = @"Height";
    switch((int)v34)
    {
      case 0:
        ANECAxisForNDAxis = @"Width";
        break;
      case 1:
        break;
      case 2:
        if (v33 == 5 && *(unsigned char *)(v130 + 1281)) {
          goto LABEL_114;
        }
        goto LABEL_117;
      case 3:
        ANECAxisForNDAxis = @"Batch";
        if (v33 == 5 && *(unsigned char *)(v130 + 1281)) {
LABEL_117:
        }
          ANECAxisForNDAxis = @"Channel";
        break;
      case 4:
        if (v33 == 5 && *(unsigned char *)(v130 + 1281)) {
          ANECAxisForNDAxis = @"Batch";
        }
        else {
LABEL_114:
        }
          ANECAxisForNDAxis = @"Depth";
        break;
      default:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
  }
  unint64_t v36 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v153, v131);
  if (v153 != v131) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v156, (std::string *)v131[6], (std::string *)v131[7], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v131[7] - (unsigned char *)v131[6]) >> 3));
  }
  [v36 setObject:ANECAxisForNDAxis forKeyedSubscript:@"Dimension"];
  unint64_t v37 = v160;
  long long v160 = @"Concat";

  if (*((unsigned char *)v134 + 285)) {
    [v36 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"Interleaved"];
  }
  objc_storeStrong(v161, v36);
  unint64_t v38 = 0x8E38E38E38E38E39 * (((uint64_t)v141 - v140) >> 4);
  if (v38 + 1 > 0x1C71C71C71C71C7) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v39 = 0x1C71C71C71C71C72 * ((v142[0] - v140) >> 4);
  if (v39 <= v38 + 1) {
    unint64_t v39 = v38 + 1;
  }
  if (0x8E38E38E38E38E39 * ((v142[0] - v140) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v40 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v40 = v39;
  }
  *((void *)&v163 + 1) = v142;
  if (v40) {
    unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v40);
  }
  else {
    uint64_t v41 = 0;
  }
  *(void *)long long buf = v40;
  *(void *)&buf[8] = v40 + 16 * (((uint64_t)v141 - v140) >> 4);
  *(void *)&uint8_t buf[16] = *(void *)&buf[8];
  *(void *)&long long v163 = v40 + 144 * v41;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v153);
  *(void *)&buf[16] += 144;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v140, buf);
  uint64_t v42 = v141;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  uint64_t v141 = v42;

  if (v158 < 0) {
    operator delete(v157);
  }
  *(void *)long long buf = v156;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = (char *)&v154 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SBYTE7(v154) < 0) {
    operator delete(v153[0]);
  }

  atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v139) {
    atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v153);
  long long v160 = 0;
  v161[0] = 0;
  v161[1] = (id)0x100000000;
  uint64_t v43 = *((void *)v134 + 44);
  uint64_t v44 = (std::__shared_weak_count *)*((void *)v134 + 45);
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v43 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)v134 + 36) + 104))() + 40))
  {
    float v45 = *(float *)(obj + 112);
    v146[0] = v43;
    v146[1] = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v46 = (std::__shared_weak_count *)*((void *)v134 + 47);
    v145[0] = *((void *)v134 + 46);
    v145[1] = (uint64_t)v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v146, v145, (uint64_t)&v147, v45);
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    uint64_t v47 = *(unsigned int *)(v43 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v143, 2 * v47, 1, 1, 1);
    uint64_t v48 = (int)v47;
    uint64_t v49 = *((void *)v134 + 46);
    int v50 = v47;
    if (v49) {
      int v50 = *(_DWORD *)(v49 + 8);
    }
    if (!*((unsigned char *)v132 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v47);
      id v100 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v47 >= 1)
      {
        for (uint64_t i = 0; i != v47; ++i)
        {
          float v102 = *(float *)(*(void *)(v43 + 16) + i * 4);
          *(float *)&int v103 = ldexp(1.0, -v151) * v102;
          v100[i] = v103;
        }
      }
      if (v47)
      {
        int v104 = *(_WORD **)(v143 + 16);
        do
        {
          int v105 = *v100++;
          _S0 = v105;
          __asm { FCVT            H0, S0 }
          *v104++ = _S0;
          --v48;
        }
        while (v48);
      }
      if (*((void *)v134 + 46))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v50);
        uint64_t v108 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v50);
        uint64_t v133 = *(void *)buf;
        uint64_t v109 = *(int **)(v108 + 16);
        if (v50 >= 1)
        {
          for (uint64_t j = 0; j != v50; ++j)
          {
            if ((int)v47 - 1 >= (int)j) {
              int v111 = j;
            }
            else {
              int v111 = v47 - 1;
            }
            *(float *)&int v112 = *(float *)(*(void *)(v149 + 16) + 4 * j)
                            * *(float *)(*(void *)(v147 + 16) + 4 * v111);
            v109[j] = v112;
            unsigned int v113 = v151;
            unsigned int v114 = v152;
            *(float *)&int v115 = ldexp(1.0, v152 - v151) * *(float *)&v112;
            v109[j] = v115;
            float v118 = ldexp(1.0, v113 - v114) * *(float *)&v115;
            if (v118 < -127.0 || v118 > 255.0)
            {
              int v120 = Espresso::espresso_os_log_subsystem(v116, v117);
              if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
              {
                double v121 = *(float *)&v109[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v118;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v152;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v151;
                LOWORD(v163) = 2048;
                *(double *)((char *)&v163 + 2) = v121;
                _os_log_error_impl(&dword_1920CB000, v120, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v50)
        {
          uint64_t v122 = v50;
          uint64_t v123 = *(_WORD **)(v133 + 16);
          do
          {
            int v124 = *v109++;
            _S0 = v124;
            __asm { FCVT            H0, S0 }
            *v123++ = _S0;
            --v122;
          }
          while (v122);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v126 = v152;
    uint64_t v51 = v143;
    if (v47)
    {
      uint64_t v52 = *(int **)(v147 + 16);
      BOOL v53 = *(_WORD **)(v143 + 16);
      do
      {
        int v54 = *v52++;
        _S0 = v54;
        __asm { FCVT            H0, S0 }
        *v53++ = _S0;
        --v48;
      }
      while (v48);
    }
    if (v49)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v50, 1, 1, 1);
      uint64_t v129 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v127 = *(void *)buf;
      if (v50)
      {
        uint64_t v60 = v50;
        uint64_t v61 = *(_WORD **)(*(void *)buf + 16);
        BOOL v62 = *(int **)(v149 + 16);
        do
        {
          int v63 = *v62++;
          _S0 = v63;
          __asm { FCVT            H0, S0 }
          *v61++ = _S0;
          --v60;
        }
        while (v60);
      }
    }
    else
    {
      uint64_t v129 = 0;
      uint64_t v127 = 0;
    }
    int v128 = *((unsigned __int8 *)v132 + 552);
    std::string::size_type v65 = v144;
    if (v144) {
      atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v66 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)v132 + 128), *(const unsigned __int8 **)(v51 + 16), *(int *)(v51 + 8));
    if (v65) {
      nitro::nitro_function::nitro_function(v65);
    }
    id obja = objc_opt_new();
    if (*((unsigned char *)v132 + 121))
    {
      id v67 = *(id *)(v140 + 128);

      id obja = v67;
    }
    unint64_t v68 = objc_opt_new();
    uint64_t v69 = [NSNumber numberWithInt:v47];
    [v68 setObject:v69 forKeyedSubscript:@"ScaleCount"];

    uint64_t v70 = [NSNumber numberWithInt:v66];
    [v68 setObject:v70 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v71 = NSNumber;
    if (v128) {
      uint64_t weights_file_index = 0;
    }
    else {
    unsigned int v73 = [v71 numberWithUnsignedLong:weights_file_index];
    }
    [v68 setObject:v73 forKeyedSubscript:@"ScaleIndex"];

    [v68 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    unsigned int v74 = [NSNumber numberWithInt:v151];
    [obja setObject:v74 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)v134 + 46))
    {
      if (v129) {
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v75 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)v132 + 128), *(const unsigned __int8 **)(v127 + 16), *(int *)(v127 + 8));
      if (v129) {
        nitro::nitro_function::nitro_function(v129);
      }
      int v76 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)v134 + 46) + 8)];
      [v68 setObject:v76 forKeyedSubscript:@"BiasCount"];

      uint64_t v77 = [NSNumber numberWithInt:v75];
      [v68 setObject:v77 forKeyedSubscript:@"BiasOffset"];

      uint64_t v78 = NSNumber;
      if (v128) {
        uint64_t v79 = 0;
      }
      else {
      uint64_t v80 = [v78 numberWithUnsignedLong:v79];
      }
      [v68 setObject:v80 forKeyedSubscript:@"BiasIndex"];

      [v68 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      long long v81 = [NSNumber numberWithInt:v126];
      [obja setObject:v81 forKeyedSubscript:@"BiasShift"];
    }
    [obja setObject:v68 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, v131);
    long long v82 = v141;
    if (v141 == (std::string *)v140) {
      goto LABEL_144;
    }
    uint64_t v83 = v141 - 6;
    uint64_t v84 = HIBYTE(v141[-6].__r_.__value_.__r.__words[2]);
    char v85 = v84;
    std::string::size_type size = v141[-6].__r_.__value_.__l.__size_;
    if ((v84 & 0x80u) == 0) {
      std::string::size_type v87 = HIBYTE(v141[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v87 = v141[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v88 = buf[23];
    if (buf[23] < 0) {
      uint64_t v88 = *(void *)&buf[8];
    }
    if (v87 != v88) {
      goto LABEL_138;
    }
    if (buf[23] >= 0) {
      uint64_t v89 = buf;
    }
    else {
      uint64_t v89 = *(unsigned __int8 **)buf;
    }
    if ((char)v84 < 0)
    {
      data = (const std::string::value_type *)v83->__r_.__value_.__r.__words[0];
      if (memcmp(v83->__r_.__value_.__l.__data_, v89, v141[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_141;
      }
    }
    else if ((_BYTE)v84)
    {
      int v90 = v141 - 6;
      while (v90->__r_.__value_.__s.__data_[0] == *v89)
      {
        int v90 = (std::string *)((char *)v90 + 1);
        ++v89;
        if (!--v84) {
          goto LABEL_137;
        }
      }
      goto LABEL_138;
    }
LABEL_137:
    std::string::append(v82 - 6, "__@pre_scale_bias");
    char v85 = HIBYTE(v82[-6].__r_.__value_.__r.__words[2]);
LABEL_138:
    if ((v85 & 0x80) == 0)
    {
      long long v92 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v82[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v92;
      goto LABEL_142;
    }
    data = v82[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v82[-6].__r_.__value_.__l.__size_;
LABEL_141:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_142:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v164, &__str, &v171, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_144:
    uint64_t v93 = v168;
    uint64_t v168 = @"GOC";

    objc_storeStrong(&v169, obja);
    if (!*((unsigned char *)v132 + 121))
    {
      int v94 = v141;
      if ((unint64_t)v141 >= v142[0])
      {
        unint64_t v96 = 0x8E38E38E38E38E39 * (((uint64_t)v141 - v140) >> 4);
        if (v96 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v97 = 0x1C71C71C71C71C72 * ((v142[0] - v140) >> 4);
        if (v97 <= v96 + 1) {
          unint64_t v97 = v96 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v142[0] - v140) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v98 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v98 = v97;
        }
        *((void *)&v171 + 1) = v142;
        if (v98) {
          unint64_t v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v98);
        }
        else {
          uint64_t v99 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v98;
        __str.__r_.__value_.__l.__size_ = v98 + 144 * v96;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v171 = v98 + 144 * v99;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v140, &__str);
        uint64_t v95 = v141;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v141, (uint64_t)buf);
        uint64_t v95 = v94 + 6;
      }
      uint64_t v141 = v95;
    }

    if (v166 < 0) {
      operator delete(v165);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v164;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }

    if (v129) {
      nitro::nitro_function::nitro_function(v129);
    }
    if (v144) {
      nitro::nitro_function::nitro_function(v144);
    }
    if (v150) {
      nitro::nitro_function::nitro_function(v150);
    }
    if (v148) {
      nitro::nitro_function::nitro_function(v148);
    }
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }

  if (v158 < 0) {
    operator delete(v157);
  }
  *(void *)long long buf = v156;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = (char *)&v154 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SBYTE7(v154) < 0) {
    operator delete(v153[0]);
  }
  if (v139) {
    nitro::nitro_function::nitro_function(v139);
  }
  nitro::nitro_function::nitro_function(v138);
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)v134 + 36) + 32))((uint64_t)v134 + 288, v132, &v140);
  v153[0] = &v140;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v153);
  if (v17) {
    operator delete(v17);
  }
  if (v139) {
    nitro::nitro_function::nitro_function(v139);
  }
  if (v137) {
    nitro::nitro_function::nitro_function(v137);
  }
  nitro::nitro_function::nitro_function(v138);
}

void sub_19272FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,std::__shared_weak_count *a21,char a22,uint64_t a23,uint64_t a24,void **a25)
{
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  nitro::nitro_function::nitro_function(a20);
  a25 = (void **)&a22;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a25);
  if (v25) {
    operator delete(v25);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  _Unwind_Resume(a1);
}

__CFString *Espresso::ANECompilerEngine::GetANECAxisForNDAxis(Espresso::ANECompilerEngine *this, uint64_t a2, char a3)
{
  if ((this & 0x80000000) == 0)
  {
    int v3 = a2 + ~this;
    __n128 result = @"Height";
    switch(v3)
    {
      case 0:
        return @"Width";
      case 1:
        return result;
      case 2:
        if (a2 != 5 || (a3 & 1) == 0) {
          return @"Channel";
        }
        return @"Depth";
      case 3:
        __n128 result = @"Batch";
        if (a2 == 5 && (a3 & 1) != 0) {
          return @"Channel";
        }
        return result;
      case 4:
        if (a2 == 5 && (a3 & 1) != 0) {
          return @"Batch";
        }
        else {
          return @"Depth";
        }
      default:
        break;
    }
  }
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
}

void Espresso::ANECompilerEngine::general_concat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::general_concat_kernel::~general_concat_kernel(Espresso::ANECompilerEngine::general_concat_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::general_concat_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::general_concat_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::concat_kernel::~concat_kernel(Espresso::ANECompilerEngine::concat_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::concat_kernel *)((char *)this - 344);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::concat_kernel *)((char *)this - 344);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::concat_kernel::compile(Espresso::ANECompilerEngine::concat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::concat_kernel::compile(Espresso::ANECompilerEngine::concat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v122 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v156.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v156.__r_.__value_.__l.__data_, (long long **)&v156);
  uint8x8_t v10 = (_DWORD *)*((void *)v8 + 5);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  double v121 = v9;
  unint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)&v156);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  uint64_t v118 = *((void *)v11 + 5);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v120 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v126, (id *)a3);
  __n128 v13 = v133;
  uint64_t v133 = @"Concat";

  Espresso::abstract_blob_container::shape((char *)&v156, (uint64_t)v10);
  BOOL v15 = HIDWORD(v156.__r_.__value_.__r.__words[2]) == -1 || SHIDWORD(v156.__r_.__value_.__r.__words[2]) > 3;
  if (__p)
  {
    v159[0] = __p;
    operator delete(__p);
  }
  long long v16 = (unsigned __int8 *)*((void *)a3 + 6);
  int v17 = (unsigned __int8 *)*((void *)a3 + 7);
  if (v15)
  {
    for (; v16 != v17; v16 += 24)
    {
      v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      int v18 = (_DWORD *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, v16, (long long **)&v156)+ 5);
      if (v18[2] != v10[2] || v18[3] != v10[3] || v18[5] != v10[5] || v18[6] != v10[6])
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Dimensions don't match");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    Espresso::abstract_blob_container::shape((char *)&v156, (uint64_t)v10);
    unsigned int v19 = HIDWORD(v156.__r_.__value_.__r.__words[2]);
    if (LODWORD(v156.__r_.__value_.__r.__words[2]) == 1) {
      int v20 = 4;
    }
    else {
      int v20 = 5;
    }
    if (HIDWORD(v156.__r_.__value_.__r.__words[2]) == -1) {
      unsigned int v19 = v20;
    }
    if (v19 > 5) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
    if (*(unsigned char *)(v7 + 1281)) {
      _ZF = v19 == 5;
    }
    else {
      _ZF = 0;
    }
    if (_ZF) {
      long long v22 = @"Depth";
    }
    else {
      long long v22 = @"Channel";
    }
    if (__p)
    {
      v159[0] = __p;
      operator delete(__p);
    }
    long long v23 = v120;
    [v120 setObject:v22 forKeyedSubscript:@"Dimension"];
  }
  else
  {
    for (; v16 != v17; v16 += 24)
    {
      v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      uint64_t v24 = (_DWORD *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, v16, (long long **)&v156)+ 5);
      if (v24[3] != v10[3] || v24[4] != v10[4] || v24[5] != v10[5] || v24[6] != v10[6])
      {
        uint64_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v84, "Dimensions don't match");
        __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    long long v23 = v120;
    [v120 setObject:@"Width" forKeyedSubscript:@"Dimension"];
  }
  objc_storeStrong(v134, v23);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v156, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v126);
  long long v163 = v133;
  id v164 = v134[0];
  uint64_t v165 = (uint64_t)v134[1];
  int v124 = 0;
  unint64_t v125 = 0;
  uint64_t v123 = 0;
  *(void *)long long buf = &v123;
  buf[8] = 0;
  uint64_t v123 = (std::string *)operator new(0x90uLL);
  int v124 = v123;
  unint64_t v125 = (unint64_t)&v123[6];
  int v124 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v125, (uint64_t)&v156, (uint64_t)&__str, (uint64_t)v123);

  if (v161 < 0) {
    operator delete(v160);
  }
  *(void *)long long buf = v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
  atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v156);
  id v164 = 0;
  long long v163 = 0;
  uint64_t v165 = 0x100000000;
  uint64_t v25 = *((void *)this + 51);
  unint64_t v26 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v25 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 43) + 104))() + 40))
  {
    float v27 = *(float *)(v118 + 112);
    v138[0] = v25;
    v138[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v28 = (std::__shared_weak_count *)*((void *)this + 54);
    v137[0] = *((void *)this + 53);
    v137[1] = (uint64_t)v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v138, v137, (uint64_t)&v139, v27);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    uint64_t v29 = *(unsigned int *)(v25 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v135, 2 * v29, 1, 1, 1);
    uint64_t v30 = (int)v29;
    uint64_t v31 = *((void *)this + 53);
    int v32 = v29;
    if (v31) {
      int v32 = *(_DWORD *)(v31 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      int obja = v32;
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v29);
      char v85 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v86 = v29 - 1;
      if ((int)v29 >= 1)
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          float v88 = *(float *)(*(void *)(v25 + 16) + i * 4);
          *(float *)&int v89 = ldexp(1.0, -v143) * v88;
          v85[i] = v89;
        }
      }
      if (v29)
      {
        int v90 = *(_WORD **)(v135 + 16);
        do
        {
          int v91 = *v85++;
          _S0 = v91;
          __asm { FCVT            H0, S0 }
          *v90++ = _S0;
          --v30;
        }
        while (v30);
      }
      if (*((void *)this + 53))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * obja);
        uint64_t v94 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * obja);
        uint64_t v115 = *(void *)buf;
        uint64_t v95 = *(int **)(v94 + 16);
        if (obja >= 1)
        {
          for (uint64_t j = 0; j != obja; ++j)
          {
            if (v86 >= (int)j) {
              int v97 = j;
            }
            else {
              int v97 = v86;
            }
            *(float *)&int v98 = *(float *)(*(void *)(v141 + 16) + 4 * j) * *(float *)(*(void *)(v139 + 16) + 4 * v97);
            v95[j] = v98;
            unsigned int v99 = v144;
            unsigned int v100 = v143;
            *(float *)&int v101 = ldexp(1.0, v144 - v143) * *(float *)&v98;
            v95[j] = v101;
            float v104 = ldexp(1.0, v100 - v99) * *(float *)&v101;
            if (v104 < -127.0 || v104 > 255.0)
            {
              id v106 = Espresso::espresso_os_log_subsystem(v102, v103);
              if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
              {
                double v107 = *(float *)&v95[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v104;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v144;
                __int16 v146 = 1024;
                int v147 = v143;
                __int16 v148 = 2048;
                double v149 = v107;
                _os_log_error_impl(&dword_1920CB000, v106, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (obja)
        {
          uint64_t v108 = obja;
          uint64_t v109 = *(_WORD **)(v115 + 16);
          do
          {
            int v110 = *v95++;
            _S0 = v110;
            __asm { FCVT            H0, S0 }
            *v109++ = _S0;
            --v108;
          }
          while (v108);
        }
      }
      uint64_t v93 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(v93);
    }
    unsigned int v33 = v144;
    uint64_t v34 = v135;
    if (v29)
    {
      uint64_t v35 = *(int **)(v139 + 16);
      unint64_t v36 = *(_WORD **)(v135 + 16);
      do
      {
        int v37 = *v35++;
        _S0 = v37;
        __asm { FCVT            H0, S0 }
        *v36++ = _S0;
        --v30;
      }
      while (v30);
    }
    if (v31)
    {
      int v42 = v32;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v32, 1, 1, 1);
      uint64_t v43 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v112 = *(void *)buf;
      if (v42)
      {
        uint64_t v44 = v42;
        float v45 = *(_WORD **)(*(void *)buf + 16);
        BOOL v46 = *(int **)(v141 + 16);
        do
        {
          int v47 = *v46++;
          _S0 = v47;
          __asm { FCVT            H0, S0 }
          *v45++ = _S0;
          --v44;
        }
        while (v44);
      }
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v112 = 0;
    }
    int v114 = *((unsigned __int8 *)a2 + 552);
    uint64_t v49 = v136;
    if (v136) {
      atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v113 = v43;
    uint64_t v50 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v34 + 16), *(int *)(v34 + 8));
    if (v49) {
      nitro::nitro_function::nitro_function(v49);
    }
    obuint64_t j = (id)objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v51 = (id)v123[5].__r_.__value_.__l.__size_;

      obuint64_t j = v51;
    }
    uint64_t v119 = objc_opt_new();
    uint64_t v52 = [NSNumber numberWithInt:v29];
    [v119 setObject:v52 forKeyedSubscript:@"ScaleCount"];

    BOOL v53 = [NSNumber numberWithInt:v50];
    [v119 setObject:v53 forKeyedSubscript:@"ScaleOffset"];

    int v54 = NSNumber;
    if (v114) {
      uint64_t weights_file_index = 0;
    }
    else {
    uint64_t v56 = [v54 numberWithUnsignedLong:weights_file_index];
    }
    [v119 setObject:v56 forKeyedSubscript:@"ScaleIndex"];

    [v119 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v57 = [NSNumber numberWithInt:v143];
    [obj setObject:v57 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 53))
    {
      if (v113) {
        atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v58 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v112 + 16), *(int *)(v112 + 8));
      if (v113) {
        nitro::nitro_function::nitro_function(v113);
      }
      std::string::size_type v59 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 53) + 8)];
      [v119 setObject:v59 forKeyedSubscript:@"BiasCount"];

      uint64_t v60 = [NSNumber numberWithInt:v58];
      [v119 setObject:v60 forKeyedSubscript:@"BiasOffset"];

      uint64_t v61 = NSNumber;
      if (v114) {
        uint64_t v62 = 0;
      }
      else {
      int v63 = [v61 numberWithUnsignedLong:v62];
      }
      [v119 setObject:v63 forKeyedSubscript:@"BiasIndex"];

      [v119 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v64 = [NSNumber numberWithInt:v33];
      [obj setObject:v64 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v119 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    std::string::size_type v65 = v124;
    if (v124 == v123) {
      goto LABEL_120;
    }
    uint64_t v66 = v124 - 6;
    uint64_t v67 = HIBYTE(v124[-6].__r_.__value_.__r.__words[2]);
    char v68 = v67;
    std::string::size_type size = v124[-6].__r_.__value_.__l.__size_;
    if ((v67 & 0x80u) == 0) {
      std::string::size_type v70 = HIBYTE(v124[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v70 = v124[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v71 = HIBYTE(v147);
    if (v147 < 0) {
      uint64_t v71 = *(void *)&buf[8];
    }
    if (v70 != v71) {
      goto LABEL_114;
    }
    if (v147 >= 0) {
      uint64_t v72 = buf;
    }
    else {
      uint64_t v72 = *(unsigned __int8 **)buf;
    }
    if ((char)v67 < 0)
    {
      data = (const std::string::value_type *)v66->__r_.__value_.__r.__words[0];
      if (memcmp(v66->__r_.__value_.__l.__data_, v72, v124[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_117;
      }
    }
    else if ((_BYTE)v67)
    {
      unsigned int v73 = v124 - 6;
      while (v73->__r_.__value_.__s.__data_[0] == *v72)
      {
        unsigned int v73 = (std::string *)((char *)v73 + 1);
        ++v72;
        if (!--v67) {
          goto LABEL_113;
        }
      }
      goto LABEL_114;
    }
LABEL_113:
    std::string::append(v65 - 6, "__@pre_scale_bias");
    char v68 = HIBYTE(v65[-6].__r_.__value_.__r.__words[2]);
LABEL_114:
    if ((v68 & 0x80) == 0)
    {
      long long v75 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v65[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v75;
      goto LABEL_118;
    }
    data = v65[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v65[-6].__r_.__value_.__l.__size_;
LABEL_117:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_118:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v150, &__str, &v167, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_120:
    int v76 = v154;
    long long v154 = @"GOC";

    objc_storeStrong(&v155, obj);
    if (!*((unsigned char *)a2 + 121))
    {
      uint64_t v77 = v124;
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v79 = 0x8E38E38E38E38E39 * (((char *)v124 - (char *)v123) >> 4);
        if (v79 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v80 = 0x1C71C71C71C71C72 * ((uint64_t)(v125 - (void)v123) >> 4);
        if (v80 <= v79 + 1) {
          unint64_t v80 = v79 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v125 - (void)v123) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v81 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v81 = v80;
        }
        *((void *)&v167 + 1) = &v125;
        if (v81) {
          unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v81);
        }
        else {
          uint64_t v82 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v81;
        __str.__r_.__value_.__l.__size_ = v81 + 144 * v79;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v167 = v81 + 144 * v82;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v123, &__str);
        uint64_t v78 = v124;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v124, (uint64_t)buf);
        uint64_t v78 = v77 + 6;
      }
      int v124 = v78;
    }

    if (v152 < 0) {
      operator delete(v151);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v147) < 0) {
      operator delete(*(void **)buf);
    }

    if (v113) {
      nitro::nitro_function::nitro_function(v113);
    }
    if (v136) {
      nitro::nitro_function::nitro_function(v136);
    }
    if (v142) {
      nitro::nitro_function::nitro_function(v142);
    }
    if (v140) {
      nitro::nitro_function::nitro_function(v140);
    }
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }

  if (v161 < 0) {
    operator delete(v160);
  }
  *(void *)long long buf = v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  nitro::nitro_function::nitro_function(v122);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 43) + 32))((char *)this + 344, a2, &v123);
  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);

  if (v131 < 0) {
    operator delete(v130);
  }
  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  if (v127 < 0) {
    operator delete(v126[0]);
  }

  if (v121) {
    nitro::nitro_function::nitro_function(v121);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v121) {
    nitro::nitro_function::nitro_function(v121);
  }
  nitro::nitro_function::nitro_function(v122);
}

void sub_192731120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  nitro::nitro_function::nitro_function(a20);
  a53 = (uint64_t)&a21;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a24);

  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)(a4 + v7), a2 + v7);
      v7 += 144;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void Espresso::ANECompilerEngine::concat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::concat_kernel::~concat_kernel(Espresso::ANECompilerEngine::concat_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::concat_kernel *)((char *)this + 344));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::concat_kernel *)((char *)this + 344));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::flatten_kernel::~flatten_kernel(Espresso::ANECompilerEngine::flatten_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::flatten_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::flatten_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::flatten_kernel::compile(Espresso::ANECompilerEngine::flatten_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::flatten_kernel::compile(Espresso::ANECompilerEngine::flatten_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v133 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  __str.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
  uint64_t v11 = *((void *)v9 + 5);
  uint8x8_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v132 = v10;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (long long **)&__str);
  __n128 v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  uint64_t v129 = (float *)*((void *)v12 + 5);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v139);
  id v145 = 0;
  id v146 = 0;
  uint64_t v147 = 0x100000000;
  double v14 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
  id v15 = v167;
  id v167 = @"Flatten";

  int v16 = *((_DWORD *)this + 70);
  if (v16)
  {
    if (v16 != 1)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::unsupported_configuration_error::unsupported_configuration_error(exception);
    }
    int v17 = @"NHWC";
  }
  else
  {
    int v17 = @"NCHW";
  }
  [v14 setObject:v17 forKeyedSubscript:@"Mode"];
  objc_storeStrong(&v168, v14);
  std::string::operator=(&v139, &__str);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v140, v159, v160, 0xAAAAAAAAAAAAAAABLL * (((char *)v160 - (char *)v159) >> 3));
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v141, v161, v162, 0xAAAAAAAAAAAAAAABLL * (((char *)v162 - (char *)v161) >> 3));
  v141[6] = v163;
  std::string::operator=(&v142, &__p);
  int v143 = v165;
  objc_storeStrong(&v144, obj);
  objc_storeStrong(&v145, v167);
  objc_storeStrong(&v146, v168);
  uint64_t v147 = v169;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)long long buf = &v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

  uint64_t v137 = 0;
  unint64_t v138 = 0;
  uint64_t v136 = 0;
  if (*(int *)(v11 + 8) <= 1 && *(int *)(v11 + 12) < 2)
  {
    int v20 = 1;
  }
  else
  {
    long long v160 = (std::string *)&v138;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(1uLL);
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0];
    id v159 = (std::string *)(__str.__r_.__value_.__r.__words[0] + 144 * v18);
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__data_, (uint64_t)&v139);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v136, &__str);
    unsigned int v19 = v137;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    int v20 = 0;
    uint64_t v137 = v19;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)v134, *((void *)a2 + 4) + 120 * *((int *)a3 + 18) + 56);
  long long v21 = v135;
  if (v135)
  {
    char v22 = *((unsigned char *)a3 + 23);
    if (v22 >= 0) {
      uint64_t v23 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v23 = *((void *)a3 + 1);
    }
    if (v22 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
    }
    do
    {
      uint64_t v25 = *((unsigned __int8 *)v21 + 39);
      if ((v25 & 0x80u) == 0) {
        uint64_t v26 = *((unsigned __int8 *)v21 + 39);
      }
      else {
        uint64_t v26 = v21[3];
      }
      if (v26 == v23)
      {
        float v27 = (const void **)(v21 + 2);
        if ((v25 & 0x80) != 0)
        {
          if (!memcmp(*v27, v24, v21[3])) {
            goto LABEL_41;
          }
        }
        else
        {
          if (!*((unsigned char *)v21 + 39)) {
            goto LABEL_41;
          }
          BOOL v28 = v24;
          while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v28)
          {
            float v27 = (const void **)((char *)v27 + 1);
            BOOL v28 = (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)((char *)v28 + 1);
            if (!--v25) {
              goto LABEL_41;
            }
          }
        }
      }
      long long v21 = (uint64_t *)*v21;
    }
    while (v21);
  }
  if (v20)
  {
LABEL_41:
    uint64_t v29 = objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    id v30 = v167;
    id v167 = @"GOC";

    uint64_t v31 = objc_opt_new();
    [v29 setObject:v31 forKeyedSubscript:@"BiasScaleGroupData"];
    int v32 = [NSNumber numberWithShort:0];
    [v29 setObject:v32 forKeyedSubscript:@"BiasScalar"];

    objc_storeStrong(&v168, v29);
    unsigned int v33 = v137;
    if ((unint64_t)v137 >= v138)
    {
      unint64_t v35 = 0x8E38E38E38E38E39 * (((uint64_t)v137 - v136) >> 4);
      if (v35 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v36 = 0x1C71C71C71C71C72 * ((uint64_t)(v138 - v136) >> 4);
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v138 - v136) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v37 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v37 = v36;
      }
      *((void *)&v171 + 1) = &v138;
      if (v37) {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v37);
      }
      else {
        uint64_t v38 = 0;
      }
      *(void *)long long buf = v37;
      *(void *)&buf[8] = v37 + 144 * v35;
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v171 = v37 + 144 * v38;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__str);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v136, buf);
      uint64_t v34 = v137;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v137, (uint64_t)&__str);
      uint64_t v34 = v33 + 6;
    }
    uint64_t v137 = v34;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)long long buf = &v161;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = &v159;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__str);
  id v167 = 0;
  id v168 = 0;
  uint64_t v169 = 0x100000000;
  uint64_t v39 = *((void *)this + 44);
  unint64_t v40 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v39 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 36) + 104))() + 40))
  {
    float v41 = v129[28];
    v151[0] = v39;
    v151[1] = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v42 = (std::__shared_weak_count *)*((void *)this + 47);
    v150[0] = *((void *)this + 46);
    v150[1] = (uint64_t)v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v151, v150, (uint64_t)&v152, v41);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    uint64_t v43 = *(unsigned int *)(v39 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v148, 2 * v43, 1, 1, 1);
    uint64_t v44 = (int)v43;
    uint64_t v45 = *((void *)this + 46);
    int v46 = v43;
    if (v45) {
      int v46 = *(_DWORD *)(v45 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v178, 4 * v43);
      int v98 = *(int **)(v178.__r_.__value_.__r.__words[0] + 16);
      int v131 = v43 - 1;
      if ((int)v43 >= 1)
      {
        for (uint64_t i = 0; i != v43; ++i)
        {
          float v100 = *(float *)(*(void *)(v39 + 16) + i * 4);
          *(float *)&int v101 = ldexp(1.0, -v156) * v100;
          v98[i] = v101;
        }
      }
      if (v43)
      {
        float v102 = *(_WORD **)(v148 + 16);
        do
        {
          int v103 = *v98++;
          _S0 = v103;
          __asm { FCVT            H0, S0 }
          *v102++ = _S0;
          --v44;
        }
        while (v44);
      }
      if (*((void *)this + 46))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v46);
        uint64_t v106 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v46);
        uint64_t v128 = *(void *)buf;
        double v107 = *(int **)(v106 + 16);
        if (v46 >= 1)
        {
          for (uint64_t j = 0; j != v46; ++j)
          {
            int v109 = v131;
            if (v131 >= (int)j) {
              int v109 = j;
            }
            *(float *)&int v110 = *(float *)(*(void *)(v154 + 16) + 4 * j)
                            * *(float *)(*(void *)(v152 + 16) + 4 * v109);
            v107[j] = v110;
            unsigned int v111 = v157;
            unsigned int v112 = v156;
            *(float *)&int v113 = ldexp(1.0, v157 - v156) * *(float *)&v110;
            v107[j] = v113;
            float v116 = ldexp(1.0, v112 - v111) * *(float *)&v113;
            if (v116 < -127.0 || v116 > 255.0)
            {
              uint64_t v118 = Espresso::espresso_os_log_subsystem(v114, v115);
              if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
              {
                double v119 = *(float *)&v107[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v116;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v157;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v156;
                LOWORD(v171) = 2048;
                *(double *)((char *)&v171 + 2) = v119;
                _os_log_error_impl(&dword_1920CB000, v118, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v46)
        {
          uint64_t v120 = v46;
          double v121 = *(_WORD **)(v128 + 16);
          do
          {
            int v122 = *v107++;
            _S0 = v122;
            __asm { FCVT            H0, S0 }
            *v121++ = _S0;
            --v120;
          }
          while (v120);
        }
      }
      int v105 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(v105);
    }
    unsigned int v47 = v157;
    uint64_t v48 = v148;
    if (v43)
    {
      uint64_t v49 = *(int **)(v152 + 16);
      uint64_t v50 = *(_WORD **)(v148 + 16);
      do
      {
        int v51 = *v49++;
        _S0 = v51;
        __asm { FCVT            H0, S0 }
        *v50++ = _S0;
        --v44;
      }
      while (v44);
    }
    unsigned int v124 = v47;
    if (v45)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v46, 1, 1, 1);
      uint64_t v125 = *(void *)buf;
      unsigned int v126 = *(std::__shared_weak_count **)&buf[8];
      if (v46)
      {
        uint64_t v57 = v46;
        uint64_t v58 = *(_WORD **)(*(void *)buf + 16);
        std::string::size_type v59 = *(int **)(v154 + 16);
        do
        {
          int v60 = *v59++;
          _S0 = v60;
          __asm { FCVT            H0, S0 }
          *v58++ = _S0;
          --v57;
        }
        while (v57);
      }
    }
    else
    {
      uint64_t v125 = 0;
      unsigned int v126 = 0;
    }
    int v127 = *((unsigned __int8 *)a2 + 552);
    uint64_t v62 = v149;
    if (v149) {
      atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v63 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v48 + 16), *(int *)(v48 + 8));
    if (v62) {
      nitro::nitro_function::nitro_function(v62);
    }
    id v130 = (id)objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v64 = *(id *)(v136 + 128);

      id v130 = v64;
    }
    std::string::size_type v65 = objc_opt_new();
    uint64_t v66 = [NSNumber numberWithInt:v43];
    [v65 setObject:v66 forKeyedSubscript:@"ScaleCount"];

    uint64_t v67 = [NSNumber numberWithInt:v63];
    [v65 setObject:v67 forKeyedSubscript:@"ScaleOffset"];

    char v68 = NSNumber;
    if (v127) {
      uint64_t weights_file_index = 0;
    }
    else {
    std::string::size_type v70 = [v68 numberWithUnsignedLong:weights_file_index];
    }
    [v65 setObject:v70 forKeyedSubscript:@"ScaleIndex"];

    [v65 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v71 = [NSNumber numberWithInt:v156];
    [v130 setObject:v71 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 46))
    {
      if (v126) {
        atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v72 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v125 + 16), *(int *)(v125 + 8));
      if (v126) {
        nitro::nitro_function::nitro_function(v126);
      }
      unsigned int v73 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 46) + 8)];
      [v65 setObject:v73 forKeyedSubscript:@"BiasCount"];

      unsigned int v74 = [NSNumber numberWithInt:v72];
      [v65 setObject:v74 forKeyedSubscript:@"BiasOffset"];

      long long v75 = NSNumber;
      if (v127) {
        uint64_t v76 = 0;
      }
      else {
      uint64_t v77 = [v75 numberWithUnsignedLong:v76];
      }
      [v65 setObject:v77 forKeyedSubscript:@"BiasIndex"];

      [v65 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v78 = [NSNumber numberWithInt:v124];
      [v130 setObject:v78 forKeyedSubscript:@"BiasShift"];
    }
    [v130 setObject:v65 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    unint64_t v79 = v137;
    if (v137 == (std::string *)v136) {
      goto LABEL_126;
    }
    unint64_t v80 = v137 - 6;
    uint64_t v81 = HIBYTE(v137[-6].__r_.__value_.__r.__words[2]);
    char v82 = v81;
    std::string::size_type size = v137[-6].__r_.__value_.__l.__size_;
    if ((v81 & 0x80u) == 0) {
      std::string::size_type v84 = HIBYTE(v137[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v84 = v137[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v85 = buf[23];
    if (buf[23] < 0) {
      uint64_t v85 = *(void *)&buf[8];
    }
    if (v84 != v85) {
      goto LABEL_120;
    }
    if (buf[23] >= 0) {
      int v86 = buf;
    }
    else {
      int v86 = *(unsigned __int8 **)buf;
    }
    if ((char)v81 < 0)
    {
      data = (const std::string::value_type *)v80->__r_.__value_.__r.__words[0];
      if (memcmp(v80->__r_.__value_.__l.__data_, v86, v137[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_123;
      }
    }
    else if ((_BYTE)v81)
    {
      std::string::size_type v87 = v137 - 6;
      while (v87->__r_.__value_.__s.__data_[0] == *v86)
      {
        std::string::size_type v87 = (std::string *)((char *)v87 + 1);
        ++v86;
        if (!--v81) {
          goto LABEL_119;
        }
      }
      goto LABEL_120;
    }
LABEL_119:
    std::string::append(v79 - 6, "__@pre_scale_bias");
    char v82 = HIBYTE(v79[-6].__r_.__value_.__r.__words[2]);
LABEL_120:
    if ((v82 & 0x80) == 0)
    {
      long long v89 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v178.__r_.__value_.__r.__words[2] = v79[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v89;
      goto LABEL_124;
    }
    data = v79[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v79[-6].__r_.__value_.__l.__size_;
LABEL_123:
    std::string::__init_copy_ctor_external(&v178, data, size);
LABEL_124:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v172, &v178, &v179, 1uLL);
    if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v178.__r_.__value_.__l.__data_);
    }
LABEL_126:
    int v90 = v176;
    std::string v176 = @"GOC";

    objc_storeStrong(&v177, v130);
    if (!*((unsigned char *)a2 + 121))
    {
      int v91 = v137;
      if ((unint64_t)v137 >= v138)
      {
        unint64_t v93 = 0x8E38E38E38E38E39 * (((uint64_t)v137 - v136) >> 4);
        if (v93 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v94 = 0x1C71C71C71C71C72 * ((uint64_t)(v138 - v136) >> 4);
        if (v94 <= v93 + 1) {
          unint64_t v94 = v93 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v138 - v136) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v95 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v95 = v94;
        }
        *((void *)&v179 + 1) = &v138;
        if (v95) {
          unint64_t v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v95);
        }
        else {
          uint64_t v96 = 0;
        }
        v178.__r_.__value_.__r.__words[0] = v95;
        v178.__r_.__value_.__l.__size_ = v95 + 144 * v93;
        v178.__r_.__value_.__r.__words[2] = v178.__r_.__value_.__l.__size_;
        *(void *)&long long v179 = v95 + 144 * v96;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v178.__r_.__value_.__l.__size_, (uint64_t)buf);
        v178.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v136, &v178);
        long long v92 = v137;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v178);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v137, (uint64_t)buf);
        long long v92 = v91 + 6;
      }
      uint64_t v137 = v92;
    }

    if (v174 < 0) {
      operator delete(v173);
    }
    v178.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v178);
    v178.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v178);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }

    if (v126) {
      nitro::nitro_function::nitro_function(v126);
    }
    if (v149) {
      nitro::nitro_function::nitro_function(v149);
    }
    if (v155) {
      nitro::nitro_function::nitro_function(v155);
    }
    if (v153) {
      nitro::nitro_function::nitro_function(v153);
    }
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)long long buf = &v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  nitro::nitro_function::nitro_function(v133);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 36) + 32))((char *)this + 288, a2, &v136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);

  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v132) {
    nitro::nitro_function::nitro_function(v132);
  }
  nitro::nitro_function::nitro_function(v133);
}

void sub_1927326E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,id a28)
{
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  nitro::nitro_function::nitro_function(a19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a20);
  a20 = (void **)&a25;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a20);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a28);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::flatten_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  if (*(void *)a3 == *(void *)(a3 + 8) || *(void *)(a3 + 24) == *(void *)(a3 + 32))
  {
    uint64_t v5 = a2[1];
    v84[0] = *a2;
    v84[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v56, "[Unsupported flatten] Detected zero input or zero output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v56, a3, 0);
    Espresso::emit_kernel_validation_warning(v84, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 280) != 2)
  {
    uint64_t v8 = *(void **)(a3 + 48);
    __p.__r_.__value_.__r.__words[0] = *(void *)(*v8 + 224 * *(void *)(a3 + 72) + 112);
    unint64_t v9 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v8 + 6), __p.__r_.__value_.__l.__data_, (long long **)&__p);
    uint64_t v11 = (char *)v9[7];
    uint8x8_t v10 = (char *)v9[8];
    if ((unint64_t)(v10 - v11) >= 9)
    {
      uint64_t v5 = a2[1];
      v82[0] = *a2;
      v82[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v56, "[Unsupported flatten] Flatten output cannot have more than one consumer");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v56, a3, 1);
      Espresso::emit_kernel_validation_warning(v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_10;
    }
    if (v11 == v10)
    {
      uint64_t v5 = a2[1];
      v81[0] = *a2;
      v81[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v56, "[Unsupported flatten] Flatten output cannot be empty");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v56, a3, 1);
      Espresso::emit_kernel_validation_warning(v81, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_10;
    }
    uint64_t v12 = *(uint64_t **)(a3 + 48);
    uint64_t v13 = *(void *)v11;
    uint64_t v14 = *v12;
    uint64_t v15 = *v12 + 224 * *(void *)v11;
    int v16 = (uint64_t *)(v15 + 48);
    int v17 = *(char *)(v15 + 71);
    int v18 = *(unsigned __int8 *)(v15 + 71);
    if (v17 < 0)
    {
      if (v16[1] != 13)
      {
        uint64_t v26 = v14 + 224 * v13;
        long long v21 = *(void **)(v26 + 112);
        if (*(void *)(v26 + 120) - (void)v21 != 24) {
          goto LABEL_53;
        }
        goto LABEL_44;
      }
      unsigned int v19 = (uint64_t *)*v16;
    }
    else
    {
      unsigned int v19 = v16;
      if (v18 != 13)
      {
        uint64_t v20 = v14 + 224 * v13;
        long long v21 = *(void **)(v20 + 112);
        if (*(void *)(v20 + 120) - (void)v21 != 24) {
          goto LABEL_53;
        }
        goto LABEL_41;
      }
    }
    uint64_t v22 = *v19;
    uint64_t v23 = *(uint64_t *)((char *)v19 + 5);
    if (v22 == 0x72705F72656E6E69 && v23 == 0x746375646F72705FLL)
    {
      __asm { FMOV            V0.2S, #1.0 }
      __int16 v65 = 1;
      long long v66 = 0uLL;
      __int16 v67 = 0;
      uint64_t v68 = 0x1000100010001;
      int v69 = 0;
      int v71 = 1;
      int v78 = 0;
      char v79 = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      memset(&__p, 0, sizeof(__p));
      v59[0] = 0;
      v59[1] = 1;
      long long v70 = xmmword_192DCA230;
      uint64_t v72 = 0;
      unint64_t v63 = 0xFFFFFFFF00000000;
      uint64_t v64 = _D0;
      int v73 = 0x10000;
      int v76 = 0;
      __int16 v77 = 1;
      unint64_t v36 = *(int **)a3;
      int v37 = **(_DWORD **)a3;
      v62[0] = v37;
      int v38 = v36[1];
      v62[1] = v38;
      int v61 = v36[2];
      int v39 = *(_DWORD *)(*(void *)(a3 + 24) + 8);
      int v60 = v39;
      if (v37 > 104 || v38 >= 30)
      {
        uint64_t v5 = a2[1];
        v57[0] = *a2;
        v57[1] = v5;
        if (v5) {
          atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
        }
        std::to_string(&v52, v37);
        int v42 = std::string::insert(&v52, 0, "Flatten dimensions too large ");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        uint64_t v44 = std::string::append(&v53, "x");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v51, v38);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v46 = &v51;
        }
        else {
          int v46 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v51.__r_.__value_.__l.__size_;
        }
        uint64_t v48 = std::string::append(&v54, (const std::string::value_type *)v46, size);
        std::string v55 = *v48;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v56, (long long *)&v55, a3, 0);
        Espresso::emit_kernel_validation_warning(v57, (Espresso::base_kernel::validate_for_engine_warning_t *)&v56);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v56);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_17;
        }
        uint64_t v6 = (void *)v52.__r_.__value_.__r.__words[0];
        goto LABEL_16;
      }
      unint64_t v40 = (std::__shared_weak_count *)a2[1];
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      is_valid_kernel_input_std::string::size_type size = Espresso::is_valid_kernel_input_size((uint64_t)&__p, (uint64_t *)a3, 0);
      if (v40) {
        nitro::nitro_function::nitro_function(v40);
      }
      if (!is_valid_kernel_input_size)
      {
        uint64_t v5 = a2[1];
        v50[0] = *a2;
        v50[1] = v5;
        if (v5) {
          atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
        }
        std::to_string(&v54, v38 * v37 * v39);
        uint64_t v49 = std::string::insert(&v54, 0, "kernel input size too large for flatten layerRoughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
        std::string v55 = *v49;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v56, (long long *)&v55, a3, 0);
        Espresso::emit_kernel_validation_warning(v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&v56);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v56);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_17;
        }
        uint64_t v6 = (void *)v54.__r_.__value_.__r.__words[0];
        goto LABEL_16;
      }
      return 1;
    }
    uint64_t v25 = v14 + 224 * v13;
    long long v21 = *(void **)(v25 + 112);
    if (*(void *)(v25 + 120) - (void)v21 != 24) {
      goto LABEL_53;
    }
    if ((v18 & 0x80) == 0)
    {
LABEL_41:
      if (v18 != 16) {
        goto LABEL_53;
      }
      goto LABEL_46;
    }
LABEL_44:
    if (v16[1] == 16)
    {
      int v16 = (uint64_t *)*v16;
LABEL_46:
      BOOL v28 = (uint64_t *)*v16;
      uint64_t v27 = v16[1];
      if (v28 != (uint64_t *)0x5F747865746E6F63 || v27 != 0x726566736E617274) {
        goto LABEL_53;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      id v30 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v12 + 6), v21, (long long **)&__p);
      uint64_t v31 = (void *)v30[7];
      if (v30[8] - (void)v31 != 8
        || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(**(void **)(a3 + 48) + 224 * *v31 + 48), "inner_product"))
      {
        goto LABEL_53;
      }
      return 1;
    }
LABEL_53:
    uint64_t v5 = a2[1];
    v80[0] = *a2;
    v80[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v56, "[Unsupported flatten]Flatten only supported before inner product");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v56, a3, 0);
    Espresso::emit_kernel_validation_warning(v80, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_10;
  }
  uint64_t v5 = a2[1];
  v83[0] = *a2;
  v83[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "[Unsupported flatten] Only FLATTEN_NCHW_ND flatten mode is supported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v56, a3, 0);
  Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_10:
  if (*(void *)((char *)&v66 + 6)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)((char *)&v66 + 6));
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_17;
  }
  uint64_t v6 = (void *)v56.__r_.__value_.__r.__words[0];
LABEL_16:
  operator delete(v6);
LABEL_17:
  if (v5) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  }
  return 0;
}

void sub_1927330A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a43);
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::flatten_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::flatten_kernel::~flatten_kernel(Espresso::ANECompilerEngine::flatten_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::flatten_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::flatten_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::reshape_kernel::~reshape_kernel(Espresso::ANECompilerEngine::reshape_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::reshape_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::reshape_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::reshape_kernel::compile(NSString *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::reshape_kernel::compile(NSString *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  v80[0] = *MEMORY[0x1E4F143B8];
  long long v66 = 0;
  __int16 v67 = 0;
  unsigned int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4
    || (__int16 v67 = std::__shared_weak_count::lock(v4), (v46 = v67) == 0)
    || (uint64_t v7 = (const Espresso::net *)*((void *)a2 + 1), (v66 = v7) == 0))
  {
    int v37 = "Inconsistent state: null network";
    goto LABEL_64;
  }
  if (!*((void *)v7 + 72))
  {
    int v37 = "Inconsistent state: blob_storage";
LABEL_64:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v37);
  }
  v52[0] = a3[6];
  uint64_t v8 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)v52[0], (long long **)v52)+ 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v41 = a2;
  int v42 = v8;
  v52[0] = a3;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)a3, (long long **)v52);
  uint64_t v11 = (const void *)*((void *)v9 + 5);
  uint8x8_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (unsigned __int8 *)a3[6];
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a3[7] - v12) >> 3) >= 2) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported number of input blobs for reshape/unflatten");
  }
  v52[0] = a3[6];
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, v12, (long long **)v52);
  uint64_t v15 = *((void *)v13 + 5);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v43 = v14;
  unsigned int v16 = *((_DWORD *)a3 + 26);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v7 + 472);
  uint64_t v44 = v40 = (char *)(this + 40);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v49, this + 40, v44);
  Espresso::abstract_blob_container::shape((char *)v52, (uint64_t)v11);
  Espresso::abstract_blob_container::shape((char *)&v70, v15);
  if (v72)
  {
    v73[0] = v72;
    operator delete(v72);
  }
  if (__p)
  {
    v56[0] = __p;
    operator delete(__p);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  long long v45 = this;
  if (v63[0])
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v52, a3);
    int v17 = v60;
    int v60 = @"Reshape";

    int v18 = objc_opt_new();
    uint64_t v20 = 0;
    if (v10 && v19)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v20 = v10;
    }
    int v39 = v20;
    uint64_t v21 = v19[41];
    uint64_t v23 = v19[42];
    uint64_t v22 = v19[43];
    uint64_t v24 = v19[44];
    uint64_t v25 = [NSNumber numberWithInt:v19[40]];
    [v18 setObject:v25 forKeyedSubscript:@"ReshapedBatch"];

    uint64_t v26 = [NSNumber numberWithInt:v23];
    [v18 setObject:v26 forKeyedSubscript:@"ReshapedDepth"];

    uint64_t v27 = [NSNumber numberWithInt:v21];
    [v18 setObject:v27 forKeyedSubscript:@"ReshapedChannel"];

    BOOL v28 = [NSNumber numberWithInt:v22];
    [v18 setObject:v28 forKeyedSubscript:@"ReshapedHeight"];

    uint64_t v29 = [NSNumber numberWithInt:v24];
    [v18 setObject:v29 forKeyedSubscript:@"ReshapedWidth"];

    objc_storeStrong(&v61, v18);
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v70, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v52);
    __int16 v77 = v60;
    id v78 = v61;
    uint64_t v79 = v62;
    uint64_t v50 = 0;
    std::string v51 = 0;
    uint64_t v49 = 0;
    uint64_t v68 = &v49;
    char v69 = 0;
    uint64_t v49 = (std::__shared_weak_count *)operator new(0x90uLL);
    uint64_t v50 = v49;
    std::string v51 = v49 + 6;
    uint64_t v50 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v51, (uint64_t)&v70, (uint64_t)v80, (uint64_t)v49);

    if (v75 < 0) {
      operator delete(v74);
    }
    uint64_t v68 = (std::__shared_weak_count **)v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    uint64_t v68 = (std::__shared_weak_count **)v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    v48[0] = v11;
    v48[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::reshape_kernel *>(v45, v41, a3, (uint64_t)v48, (uint64_t *)&v49);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    nitro::nitro_function::nitro_function(v46);
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::__shared_weak_count **))(*(void *)v40 + 32))(v40, v41, &v49);
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }

    if (v58 < 0) {
      operator delete(v57);
    }
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (v53 < 0) {
      operator delete(v52[0]);
    }
  }
  else
  {
    id v30 = objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v52, a3);
    uint64_t v31 = v60;
    int v60 = @"Unflatten";

    int v32 = *((_DWORD *)this + 76);
    if (v32)
    {
      if (v32 != 1)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::unsupported_configuration_error::unsupported_configuration_error(exception);
      }
      unsigned int v33 = @"NHWC";
    }
    else
    {
      unsigned int v33 = @"NCHW";
    }
    [v30 setObject:v33 forKeyedSubscript:@"Mode"];
    uint64_t v34 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
    [v30 setObject:v34 forKeyedSubscript:@"DestinationWidth"];

    unint64_t v35 = [NSNumber numberWithInt:*((unsigned int *)this + 71)];
    [v30 setObject:v35 forKeyedSubscript:@"DestinationHeight"];

    unint64_t v36 = [NSNumber numberWithInt:*((unsigned int *)this + 72)];
    [v30 setObject:v36 forKeyedSubscript:@"DestinationChannels"];

    objc_storeStrong(&v61, v30);
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v70, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v52);
    __int16 v77 = v60;
    id v78 = v61;
    uint64_t v79 = v62;
    uint64_t v50 = 0;
    std::string v51 = 0;
    uint64_t v49 = 0;
    uint64_t v68 = &v49;
    char v69 = 0;
    uint64_t v49 = (std::__shared_weak_count *)operator new(0x90uLL);
    uint64_t v50 = v49;
    std::string v51 = v49 + 6;
    uint64_t v50 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v51, (uint64_t)&v70, (uint64_t)v80, (uint64_t)v49);

    if (v75 < 0) {
      operator delete(v74);
    }
    uint64_t v68 = (std::__shared_weak_count **)v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    uint64_t v68 = (std::__shared_weak_count **)v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    v47[0] = v11;
    v47[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::reshape_kernel *>(this, v41, a3, (uint64_t)v47, (uint64_t *)&v49);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    nitro::nitro_function::nitro_function(v46);
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::__shared_weak_count **))(*(void *)v40 + 32))(v40, v41, &v49);
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);

    if (v58 < 0) {
      operator delete(v57);
    }
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (v53 < 0) {
      operator delete(v52[0]);
    }
  }
  if (v65 < 0) {
    operator delete(v64);
  }

  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  nitro::nitro_function::nitro_function(v46);
}

void sub_192733BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,id a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  __cxa_free_exception(v49);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a25);

  if (a49 < 0) {
    operator delete(__p);
  }

  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  nitro::nitro_function::nitro_function(a17);
  _Unwind_Resume(a1);
}

void anonymous namespace'::EligibleForPureReshape(uint64_t a1, const Espresso::net **a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  v65[2] = *MEMORY[0x1E4F143B8];
  id v14 = a5;
  if (*(_DWORD *)(a3 + 24))
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "reshape_kernel: Only FLATTEN_NCHW unsupported on this arch.");
    goto LABEL_30;
  }
  uint64_t v15 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v58, "early_arch_extended_reshape");
  unsigned int v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v15 + 472, &v58);
  if (SHIBYTE(v59) < 0) {
    operator delete(v58);
  }
  if ((void *)((char *)*a2 + 480) == v16) {
    goto LABEL_29;
  }
  int v17 = v16 + 7;
  int v18 = *((char *)v16 + 79);
  if (v18 < 0)
  {
    if (v16[8] == 1)
    {
      int v17 = (void *)*v17;
      goto LABEL_11;
    }
LABEL_29:
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "reshape_kernel: extended reshape on this architecture requires 'early_arch_extended_reshape' network property.");
    goto LABEL_30;
  }
  if (v18 != 1) {
    goto LABEL_29;
  }
LABEL_11:
  if (*(unsigned char *)v17 != 49) {
    goto LABEL_29;
  }
  if (*(_DWORD *)(a7 + 16) == *(_DWORD *)(a6 + 16) && *(_DWORD *)(a7 + 12) == *(_DWORD *)(a6 + 12))
  {
    ANECReshapeLayerDescInitialize();
    ANECTensorDescInitialize();
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v20 = *a2;
    unsigned int v19 = (std::__shared_weak_count *)a2[1];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v21 = *(_OWORD *)(a7 + 16);
    v50[0] = *(_OWORD *)a7;
    v50[1] = v21;
    uint64_t v22 = *(const void **)(a7 + 40);
    uint64_t v51 = *(void *)(a7 + 32);
    std::string __p = 0;
    char v53 = 0;
    uint64_t v54 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v22, *(void *)(a7 + 48), (uint64_t)(*(void *)(a7 + 48) - (void)v22) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v55, v20, (const Espresso::layer_shape *)v50, 1);
    if (__p)
    {
      char v53 = __p;
      operator delete(__p);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    uint64_t v24 = *a2;
    uint64_t v23 = (std::__shared_weak_count *)a2[1];
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v25 = *(_OWORD *)(a6 + 16);
    v44[0] = *(_OWORD *)a6;
    v44[1] = v25;
    uint64_t v26 = *(const void **)(a6 + 40);
    uint64_t v45 = *(void *)(a6 + 32);
    int v46 = 0;
    unsigned int v47 = 0;
    uint64_t v48 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v26, *(void *)(a6 + 48), (uint64_t)(*(void *)(a6 + 48) - (void)v26) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v49, v24, (const Espresso::layer_shape *)v44, 1);
    if (v46)
    {
      unsigned int v47 = v46;
      operator delete(v46);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (a8 < 8 && ((0x97u >> a8) & 1) != 0)
    {
      uint64_t v27 = off_1E5746F00[a8];
      *(void *)&long long v28 = v55[3];
      *((void *)&v28 + 1) = v55[4];
      long long v60 = v28;
      char v58 = v27;
      uint64_t v61 = v55[2];
      *(void *)&long long v28 = v55[0];
      *((void *)&v28 + 1) = v55[1];
      long long v59 = v28;
      *(void *)&long long v28 = v49[0];
      *((void *)&v28 + 1) = v49[1];
      long long v29 = v28;
      *(void *)&long long v28 = v49[3];
      *((void *)&v28 + 1) = v49[4];
      long long v62 = v29;
      long long v63 = v28;
      uint64_t v64 = v49[2];
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v55, v14)
        && Espresso::ANECompilerEngine::blob_shape_ane_compatible(v49, v14))
      {
        int v30 = ANECValidateReshapeLayer();
        if (v30)
        {
          Espresso::ANECompilerEngine::violations_from_alternates<ANECReshapeLayerDescAlternate>((uint64_t)v43, v56, v57);
          std::to_string(&v41, v30);
          uint64_t v31 = std::string::insert(&v41, 0, "reshape_kernel: ANECValidateReshapeLayer failed with status ");
          long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v42.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v39, (uint64_t)v43);
          if ((v40 & 0x80u) == 0) {
            unsigned int v33 = v39;
          }
          else {
            unsigned int v33 = (void **)v39[0];
          }
          if ((v40 & 0x80u) == 0) {
            std::string::size_type v34 = v40;
          }
          else {
            std::string::size_type v34 = (std::string::size_type)v39[1];
          }
          unint64_t v35 = std::string::append(&v42, (const std::string::value_type *)v33, v34);
          std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
          v65[0] = v35->__r_.__value_.__l.__size_;
          *(void *)((char *)v65 + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
          char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 23) = *(void *)((char *)v65 + 7);
          uint64_t v38 = v65[0];
          *(void *)(a1 + 8) = v36;
          *(void *)(a1 + 16) = v38;
          *(unsigned char *)(a1 + 31) = v37;
          if ((char)v40 < 0) {
            operator delete(v39[0]);
          }
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v43);
        }
        else
        {
          *(unsigned char *)a1 = 1;
          std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "");
        }
      }
      else
      {
        *(unsigned char *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "reshape_kernel: tensor exceed ANE limits.");
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "reshape_kernel: invalid compute path for input.");
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "reshape_kernel: Reshape does not preserve n and seq, required on this arch.");
  }
LABEL_30:
}

void sub_192734288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::reshape_kernel *>(void *a1, unsigned char *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v115);
  id v122 = 0;
  id v123 = 0;
  uint64_t v124 = 0x100000000;
  uint64_t v10 = a1[48];
  unint64_t v9 = (std::__shared_weak_count *)a1[49];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && !*(unsigned char *)((*(uint64_t (**)(void))(a1[40] + 104))() + 40))
  {
    float v11 = *(float *)(*(void *)a4 + 112);
    v108[0] = v10;
    v108[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)a1[51];
    v107[0] = a1[50];
    v107[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v108, v107, (uint64_t)&v109, v11);
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    uint64_t v13 = *(unsigned int *)(v10 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v105, 2 * v13, 1, 1, 1);
    uint64_t v14 = (int)v13;
    uint64_t v15 = a1[50];
    int v16 = v13;
    if (v15) {
      int v16 = *(_DWORD *)(v15 + 8);
    }
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v13);
      int v71 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v72 = v13 - 1;
      if ((int)v13 >= 1)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          float v74 = *(float *)(*(void *)(v10 + 16) + i * 4);
          *(float *)&int v75 = ldexp(1.0, -v113) * v74;
          v71[i] = v75;
        }
      }
      if (v13)
      {
        id v76 = *(_WORD **)(v105 + 16);
        do
        {
          int v77 = *v71++;
          _S0 = v77;
          __asm { FCVT            H0, S0 }
          *v76++ = _S0;
          --v14;
        }
        while (v14);
      }
      if (a1[50])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v16);
        uint64_t v80 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v16);
        uint64_t v101 = *(void *)buf;
        uint64_t v81 = *(int **)(v80 + 16);
        if (v16 >= 1)
        {
          for (uint64_t j = 0; j != v16; ++j)
          {
            if (v72 >= (int)j) {
              int v83 = j;
            }
            else {
              int v83 = v72;
            }
            float v84 = *(float *)(*(void *)(v111 + 16) + 4 * j) * *(float *)(*(void *)(v109 + 16) + 4 * v83);
            uint64_t v85 = (float *)&v81[j];
            float *v85 = v84;
            unsigned int v86 = v113;
            unsigned int v87 = v114;
            float v88 = ldexp(1.0, v114 - v113) * v84;
            float *v85 = v88;
            float v91 = ldexp(1.0, v86 - v87) * v88;
            if (v91 < -127.0 || v91 > 255.0)
            {
              unint64_t v93 = Espresso::espresso_os_log_subsystem(v89, v90);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
              {
                double v94 = *(float *)&v81[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v91;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v114;
                __int16 v126 = 1024;
                int v127 = v113;
                __int16 v128 = 2048;
                double v129 = v94;
                _os_log_error_impl(&dword_1920CB000, v93, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v16)
        {
          uint64_t v95 = v16;
          uint64_t v96 = *(_WORD **)(v101 + 16);
          do
          {
            int v97 = *v81++;
            _S0 = v97;
            __asm { FCVT            H0, S0 }
            *v96++ = _S0;
            --v95;
          }
          while (v95);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v17 = v114;
    uint64_t v18 = v105;
    if (v13)
    {
      unsigned int v19 = *(int **)(v109 + 16);
      uint64_t v20 = *(_WORD **)(v105 + 16);
      do
      {
        int v21 = *v19++;
        _S0 = v21;
        __asm { FCVT            H0, S0 }
        *v20++ = _S0;
        --v14;
      }
      while (v14);
    }
    unsigned int v99 = v17;
    if (v15)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v16, 1, 1, 1);
      uint64_t v27 = *(void *)buf;
      float v102 = *(std::__shared_weak_count **)&buf[8];
      if (v16)
      {
        uint64_t v28 = v16;
        long long v29 = *(_WORD **)(*(void *)buf + 16);
        int v30 = *(int **)(v111 + 16);
        do
        {
          int v31 = *v30++;
          _S0 = v31;
          __asm { FCVT            H0, S0 }
          *v29++ = _S0;
          --v28;
        }
        while (v28);
      }
    }
    else
    {
      float v102 = 0;
      uint64_t v27 = 0;
    }
    int v100 = a2[552];
    unsigned int v33 = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v18 + 16), *(int *)(v18 + 8));
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    obuint64_t j = objc_opt_new();
    if (a5 && a2[121])
    {
      id v35 = *(id *)(*a5 + 128);

      obuint64_t j = v35;
    }
    std::string::size_type v36 = objc_opt_new();
    char v37 = [NSNumber numberWithInt:v13];
    [v36 setObject:v37 forKeyedSubscript:@"ScaleCount"];

    uint64_t v38 = [NSNumber numberWithInt:v34];
    [v36 setObject:v38 forKeyedSubscript:@"ScaleOffset"];

    int v39 = NSNumber;
    if (v100) {
      uint64_t weights_file_index = 0;
    }
    else {
    std::string v41 = [v39 numberWithUnsignedLong:weights_file_index];
    }
    [v36 setObject:v41 forKeyedSubscript:@"ScaleIndex"];

    [v36 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    std::string v42 = [NSNumber numberWithInt:v113];
    [obj setObject:v42 forKeyedSubscript:@"ScaleShift"];

    if (a1[50])
    {
      if (v102) {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v43 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v27 + 16), *(int *)(v27 + 8));
      if (v102) {
        nitro::nitro_function::nitro_function(v102);
      }
      uint64_t v44 = [NSNumber numberWithInt:*(unsigned int *)(a1[50] + 8)];
      [v36 setObject:v44 forKeyedSubscript:@"BiasCount"];

      uint64_t v45 = [NSNumber numberWithInt:v43];
      [v36 setObject:v45 forKeyedSubscript:@"BiasOffset"];

      int v46 = NSNumber;
      if (v100) {
        uint64_t v47 = 0;
      }
      else {
      uint64_t v48 = [v46 numberWithUnsignedLong:v47];
      }
      [v36 setObject:v48 forKeyedSubscript:@"BiasIndex"];

      [v36 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v49 = [NSNumber numberWithInt:v99];
      [obj setObject:v49 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v36 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    uint64_t v50 = a5[1];
    if (v50 == *a5) {
      goto LABEL_68;
    }
    uint64_t v51 = (const void **)(v50 - 144);
    uint64_t v52 = *(unsigned __int8 *)(v50 - 121);
    char v53 = v52;
    std::string::size_type v54 = *(void *)(v50 - 136);
    if ((v52 & 0x80u) == 0) {
      uint64_t v55 = *(unsigned __int8 *)(v50 - 121);
    }
    else {
      uint64_t v55 = *(void *)(v50 - 136);
    }
    uint64_t v56 = HIBYTE(v127);
    if (v127 < 0) {
      uint64_t v56 = *(void *)&buf[8];
    }
    if (v55 != v56) {
      goto LABEL_62;
    }
    if (v127 >= 0) {
      uint64_t v57 = buf;
    }
    else {
      uint64_t v57 = *(unsigned __int8 **)buf;
    }
    if ((char)v52 < 0)
    {
      long long v59 = (const std::string::value_type *)*v51;
      if (memcmp(*v51, v57, *(void *)(v50 - 136))) {
        goto LABEL_65;
      }
    }
    else if ((_BYTE)v52)
    {
      char v58 = (unsigned __int8 *)(v50 - 144);
      while (*v58 == *v57)
      {
        ++v58;
        ++v57;
        if (!--v52) {
          goto LABEL_61;
        }
      }
      goto LABEL_62;
    }
LABEL_61:
    std::string::append((std::string *)(v50 - 144), "__@pre_scale_bias");
    char v53 = *(unsigned char *)(v50 - 121);
LABEL_62:
    if ((v53 & 0x80) == 0)
    {
      long long v60 = *(_OWORD *)v51;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v50 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v60;
      goto LABEL_66;
    }
    long long v59 = *(const std::string::value_type **)(v50 - 144);
    std::string::size_type v54 = *(void *)(v50 - 136);
LABEL_65:
    std::string::__init_copy_ctor_external(&__str, v59, v54);
LABEL_66:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v130, &__str, &v137, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_68:
    uint64_t v61 = v134;
    uint64_t v134 = @"GOC";

    objc_storeStrong(&v135, obj);
    if (a2[121]) {
      BOOL v62 = a5 != 0;
    }
    else {
      BOOL v62 = 0;
    }
    if (!v62)
    {
      if (a5)
      {
        unint64_t v63 = a5[2];
        unint64_t v64 = a5[1];
        if (v64 >= v63)
        {
          unint64_t v66 = 0x8E38E38E38E38E39 * ((uint64_t)(v64 - *a5) >> 4);
          if (v66 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v67 = 0x8E38E38E38E38E39 * ((uint64_t)(v63 - *a5) >> 4);
          uint64_t v68 = 2 * v67;
          if (2 * v67 <= v66 + 1) {
            uint64_t v68 = v66 + 1;
          }
          if (v67 >= 0xE38E38E38E38E3) {
            unint64_t v69 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v69 = v68;
          }
          *((void *)&v137 + 1) = a5 + 2;
          if (v69) {
            unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          __str.__r_.__value_.__r.__words[0] = v69;
          __str.__r_.__value_.__l.__size_ = v69 + 144 * v66;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(void *)&long long v137 = v69 + 144 * v70;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          uint64_t v65 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          uint64_t v65 = v64 + 144;
          a5[1] = v65;
        }
        a5[1] = v65;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v132 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v127) < 0) {
      operator delete(*(void **)buf);
    }

    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
    if (v112) {
      nitro::nitro_function::nitro_function(v112);
    }
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }

  if (v120 < 0) {
    operator delete(v119);
  }
  *(void *)long long buf = &v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v116 < 0) {
    operator delete(v115);
  }
}

void sub_192734DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  int v30 = *(std::__shared_weak_count **)(v28 - 152);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&a22);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a27);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECReshapeLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 624 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        uint64_t v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 78;
    }
    while (v6 != a2);
  }
}

void sub_192735068(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v5 = **(void **)(a3 + 48) + 224 * *(void *)(a3 + 72);
  uint64_t v6 = *(void *)(v5 + 136);
  uint64_t v7 = *(void *)(v5 + 144);
  uint64_t v8 = (void **)(v5 + 136);
  if (v7 - v6 == 24)
  {
    uint64_t v9 = *(void *)a3;
    if (*(void *)(a3 + 8) == *(void *)a3) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    long long v11 = *(_OWORD *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 + 32);
    long long __p = *(_OWORD *)v9;
    long long v58 = v11;
    uint64_t v59 = v12;
    long long v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v60, *(const void **)(v9 + 40), *(void *)(v9 + 48), (uint64_t)(*(void *)(v9 + 48) - *(void *)(v9 + 40)) >> 2);
    uint64_t v13 = *(void *)(a3 + 24);
    if (*(void *)(a3 + 32) == v13) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    long long v14 = *(_OWORD *)(v13 + 16);
    uint64_t v15 = *(void *)(v13 + 32);
    v52[0] = *(_OWORD *)v13;
    v52[1] = v14;
    uint64_t v53 = v15;
    std::string::size_type v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v54, *(const void **)(v13 + 40), *(void *)(v13 + 48), (uint64_t)(*(void *)(v13 + 48) - *(void *)(v13 + 40)) >> 2);
    uint64_t v16 = *(void *)(a3 + 48);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    unsigned int v17 = *(std::__shared_weak_count **)(v16 + 80);
    if (v17 && (uint64_t v51 = std::__shared_weak_count::lock(v17)) != 0)
    {
      uint64_t v18 = *(const Espresso::net **)(v16 + 72);
      uint64_t v50 = v18;
    }
    else
    {
      uint64_t v18 = 0;
    }
    int v21 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v18 + 472);
    unsigned int v22 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v18, 0);
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v63, (NSString *)(a1 + 320), v21);
    if (v63.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v63.__r_.__value_.__l.__size_);
    }
    if (v47[0]) {
      goto LABEL_22;
    }
    uint64_t v23 = a2[1];
    v46[0] = *a2;
    v46[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, &v48, a3, 1);
    Espresso::emit_kernel_validation_warning(v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
    if (v66) {
      nitro::nitro_function::nitro_function(v66);
    }
    v43[0] = v65;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
    v43[0] = v64;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (v23) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v23);
    }
    if ((void)__p != 0x100000001)
    {
      int v30 = *a2;
      int v31 = a2[1];
      v45[0] = v30;
      v45[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "Invalid input blob shape for resize/unflatten");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, (long long *)v43, a3, 0);
      Espresso::emit_kernel_validation_warning(v45, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
      goto LABEL_53;
    }
    if (LODWORD(v52[0]) == 1 || SLODWORD(v52[0]) >= 9)
    {
      long long v32 = *a2;
      int v31 = a2[1];
      v42[0] = v32;
      v42[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "Unflatten output width must be between 2 and 8");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, (long long *)v43, a3, 0);
      Espresso::emit_kernel_validation_warning(v42, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
      goto LABEL_53;
    }
    uint64_t v24 = *v8;
    long long v25 = *(void **)(a3 + 48);
    uint64_t v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v25 + 3), *v8);
    if (v25 + 4 == v26)
    {
LABEL_61:
      uint64_t v20 = 0;
      goto LABEL_62;
    }
    uint64_t v27 = *v25 + 224 * v26[7];
    uint64_t v28 = (void *)(v27 + 48);
    int v29 = *(char *)(v27 + 71);
    if (v29 < 0)
    {
      if (v28[1] != 13)
      {
LABEL_50:
        std::string::size_type v36 = *a2;
        int v31 = a2[1];
        v41[0] = v36;
        v41[1] = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v43, "Reshape/unflatten only supported after inner product");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, (long long *)v43, a3, 0);
        Espresso::emit_kernel_validation_warning(v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
LABEL_53:
        if (v66) {
          nitro::nitro_function::nitro_function(v66);
        }
        uint64_t v68 = (void **)v65;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v68);
        uint64_t v68 = (void **)v64;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v68);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
LABEL_57:
        if (v44 < 0) {
          operator delete(v43[0]);
        }
        if (v31) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v31);
        }
        goto LABEL_61;
      }
      uint64_t v28 = (void *)*v28;
    }
    else if (v29 != 13)
    {
      goto LABEL_50;
    }
    unsigned int v33 = (void *)*v28;
    uint64_t v34 = *(void *)((char *)v28 + 5);
    if (v33 == (void *)0x72705F72656E6E69 && v34 == 0x746375646F72705FLL)
    {
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      uint64_t v38 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v25 + 6), v24, (long long **)&v63);
      if (v38[8] - v38[7] < 0x10uLL)
      {
LABEL_22:
        uint64_t v20 = 1;
LABEL_62:
        if (v49 < 0) {
          operator delete((void *)v48);
        }

        if (v51) {
          nitro::nitro_function::nitro_function(v51);
        }
        if (v54)
        {
          uint64_t v55 = v54;
          operator delete(v54);
        }
        if (v60)
        {
          uint64_t v61 = v60;
          operator delete(v60);
        }
        return v20;
      }
      int v39 = *a2;
      int v31 = a2[1];
      v40[0] = v39;
      v40[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "Reshape/unflatten output has more than one consumer");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, (long long *)v43, a3, 0);
      Espresso::emit_kernel_validation_warning(v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
      goto LABEL_57;
    }
    goto LABEL_50;
  }
  unsigned int v19 = a2[1];
  v67[0] = *a2;
  v67[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Unsupported number of input blobs for reshape/unflatten");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, &__p, a3, 0);
  Espresso::emit_kernel_validation_warning(v67, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  *(void *)&v52[0] = v65;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
  *(void *)&v52[0] = v64;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v58) < 0) {
    operator delete((void *)__p);
  }
  if (v19) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v19);
  }
  return 0;
}

void sub_192735604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v54 - 200));
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (a32 < 0) {
    operator delete(a27);
  }

  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a51) {
    operator delete(a51);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::reshape_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::reshape_kernel::~reshape_kernel(Espresso::ANECompilerEngine::reshape_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::reshape_kernel *)((char *)this + 320));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::reshape_kernel *)((char *)this + 320));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::batchnorm_kernel::~batchnorm_kernel(Espresso::ANECompilerEngine::batchnorm_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::batchnorm_kernel *)((char *)this - 400);
  *((void *)this - 50) = &unk_1EE341440;
  *(void *)this = &unk_1EE3415F8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_batchnorm_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::batchnorm_kernel *)((char *)this - 400);
  *((void *)this - 50) = &unk_1EE341440;
  *(void *)this = &unk_1EE3415F8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::batchnorm_kernel::compile(Espresso::ANECompilerEngine::batchnorm_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::batchnorm_kernel::compile(Espresso::ANECompilerEngine::batchnorm_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v193 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  *(void *)long long buf = *((void *)a3 + 6);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, *(unsigned __int8 **)buf, (long long **)buf)+ 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v187 = v8;
  *(void *)long long buf = a3;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)buf);
  long long v11 = (void *)*((void *)v9 + 5);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  obuint64_t j = *((unsigned __int8 *)a2 + 552);
  uint64_t v195 = 0;
  BOOL v196 = 0;
  v197[0] = 0;
  long long v192 = v10;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  uint64_t v12 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  long long v191 = (id *)a3;
  unint64_t v188 = v12;
  if (*((_DWORD *)this + 77) && *((_DWORD *)this + 78) == 1 && (Espresso::ANECompilerEngine::is_mix(v12, v13) & 1) == 0)
  {
    long long v14 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (!v14 || (uint64_t v15 = std::__shared_weak_count::lock(v14)) == 0 || (v16 = *((void *)a2 + 1)) == 0) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
    }
    if (!*(void *)(v16 + 576)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
    }
    unsigned int v17 = v11;
    uint64_t v18 = v16 + 136;
    *(void *)long long buf = *((void *)a3 + 6);
    unsigned int v19 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16 + 136, *(unsigned __int8 **)buf, (long long **)buf)+ 6);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)long long buf = a3;
    uint64_t v20 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (unsigned __int8 *)a3, (long long **)buf)+ 6);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = objc_opt_new();
    if (*((_DWORD *)this + 94) == 3)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)@"Width";
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)@"Height";
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)@"Depth";
      [MEMORY[0x1E4F1C978] arrayWithObjects:&__str count:3];
    }
    else
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)@"Width";
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)@"Height";
      [MEMORY[0x1E4F1C978] arrayWithObjects:&__str count:2];
    unsigned int v22 = };
    [v21 setObject:v22 forKeyedSubscript:@"Dimension"];

    _S0 = *((_DWORD *)this + 79);
    __asm { FCVT            H0, S0 }
    uint64_t v28 = [NSNumber numberWithShort:(__int16)_S0];
    [v21 setObject:v28 forKeyedSubscript:@"Epsilon"];

    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    int v29 = v215;
    unint64_t v215 = @"InstanceNormalization";

    objc_storeStrong(v216, v21);
    unint64_t v30 = 0x8E38E38E38E38E39 * (((uint64_t)v196 - v195) >> 4);
    if (v30 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0x1C71C71C71C71C72 * ((v197[0] - v195) >> 4);
    if (v31 <= v30 + 1) {
      unint64_t v31 = v30 + 1;
    }
    if (0x8E38E38E38E38E39 * ((v197[0] - v195) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v32 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v32 = v31;
    }
    *((void *)&v218 + 1) = v197;
    if (v32) {
      unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v32);
    }
    else {
      uint64_t v33 = 0;
    }
    *(void *)unint64_t v217 = v32;
    *(void *)&v217[8] = v32 + 16 * (((uint64_t)v196 - v195) >> 4);
    *(void *)&v217[16] = *(void *)&v217[8];
    *(void *)&long long v218 = v32 + 144 * v33;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v217[8], (uint64_t)buf);
    *(void *)&v217[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v195, v217);
    uint64_t v34 = v196;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v217);
    BOOL v196 = v34;

    if (v213 < 0) {
      operator delete(__p);
    }
    *(void *)unint64_t v217 = v211;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
    *(void *)unint64_t v217 = v210;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
    if (v209 < 0) {
      operator delete(*(void **)buf);
    }

    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    nitro::nitro_function::nitro_function(v15);
    uint64_t v10 = v192;
    long long v11 = v17;
  }
  id v185 = (float *)v11;
  if (v10 && v35)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v36 = v35[41];
    nitro::nitro_function::nitro_function(v10);
  }
  else
  {
    uint64_t v36 = v35[41];
  }
  if (*((void *)this + 77))
  {
    float v37 = *((float *)this + 93);
    uint64_t v38 = (std::__shared_weak_count *)*((void *)this + 78);
    v194[0] = *((void *)this + 77);
    v194[1] = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v39 = v37 > 0.00000001 && *((unsigned char *)a2 + 384) != 0;
    Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias((uint64_t)&__str, (uint64_t)v194, v36, v39, *((_DWORD *)this + 78) == 1, *((float *)this + 93));
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    long long v40 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    if (__str.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type v41 = __str.__r_.__value_.__r.__words[2];
    std::string v42 = (std::__shared_weak_count *)v226;
    if ((void)v226) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v226 + 8), 1uLL, memory_order_relaxed);
    }
    if (*((void *)&v40 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v43 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v40 + 16), *(int *)(v40 + 8));
    if (*((void *)&v40 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v40 + 1));
    }
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v44 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v41 + 16), *(int *)(v41 + 8));
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (v37 > 0.00000001)
    {
      uint64_t v50 = objc_opt_new();
      uint64_t v51 = [NSNumber numberWithInt:v36];
      [v50 setObject:v51 forKeyedSubscript:@"BiasCount"];

      uint64_t v52 = [NSNumber numberWithInt:v44];
      [v50 setObject:v52 forKeyedSubscript:@"BiasOffset"];

      uint64_t v53 = NSNumber;
      if (obj) {
        uint64_t weights_file_index = 0;
      }
      else {
      unint64_t v64 = [v53 numberWithUnsignedLong:weights_file_index];
      }
      [v50 setObject:v64 forKeyedSubscript:@"BiasIndex"];

      [v50 setObject:@"Float32" forKeyedSubscript:@"BiasType"];
      uint64_t v65 = [NSNumber numberWithInt:v36];
      [v50 setObject:v65 forKeyedSubscript:@"ScaleCount"];

      unint64_t v66 = [NSNumber numberWithInt:v43];
      [v50 setObject:v66 forKeyedSubscript:@"ScaleOffset"];

      unint64_t v67 = NSNumber;
      if (obj) {
        uint64_t v68 = 0;
      }
      else {
      unint64_t v69 = [v67 numberWithUnsignedLong:v68];
      }
      [v50 setObject:v69 forKeyedSubscript:@"ScaleIndex"];

      [v50 setObject:@"Float32" forKeyedSubscript:@"ScaleType"];
      uint64_t v70 = objc_opt_new();
      [v70 setObject:v50 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, v191);
      int v71 = v215;
      unint64_t v215 = @"GOC";

      objc_storeStrong(v216, v70);
      int v72 = v196;
      if ((unint64_t)v196 >= v197[0])
      {
        unint64_t v74 = 0x8E38E38E38E38E39 * (((uint64_t)v196 - v195) >> 4);
        if (v74 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v75 = 0x1C71C71C71C71C72 * ((v197[0] - v195) >> 4);
        if (v75 <= v74 + 1) {
          unint64_t v75 = v74 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v197[0] - v195) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v76 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v76 = v75;
        }
        *((void *)&v218 + 1) = v197;
        if (v76) {
          unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v76);
        }
        else {
          uint64_t v77 = 0;
        }
        *(void *)unint64_t v217 = v76;
        *(void *)&v217[8] = v76 + 144 * v74;
        *(void *)&v217[16] = *(void *)&v217[8];
        *(void *)&long long v218 = v76 + 144 * v77;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v217[8], (uint64_t)buf);
        *(void *)&v217[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v195, v217);
        int v73 = v196;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v217);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v196, (uint64_t)buf);
        int v73 = v72 + 6;
      }
      BOOL v196 = v73;

      if (v213 < 0) {
        operator delete(__p);
      }
      *(void *)unint64_t v217 = v211;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      *(void *)unint64_t v217 = v210;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      if (v209 < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      uint64_t v45 = objc_opt_new();
      int v46 = [NSNumber numberWithInt:v36];
      [v45 setObject:v46 forKeyedSubscript:@"ScaleCount"];

      uint64_t v47 = [NSNumber numberWithInt:v43];
      [v45 setObject:v47 forKeyedSubscript:@"ScaleOffset"];

      long long v48 = NSNumber;
      if (obj) {
        uint64_t v49 = 0;
      }
      else {
      uint64_t v55 = [v48 numberWithUnsignedLong:v49];
      }
      [v45 setObject:v55 forKeyedSubscript:@"ScaleIndex"];

      [v45 setObject:@"Float32" forKeyedSubscript:@"ScaleType"];
      uint64_t v56 = objc_opt_new();
      [v56 setObject:v45 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, v191);
      uint64_t v57 = v215;
      unint64_t v215 = @"GOC";

      objc_storeStrong(v216, v56);
      long long v58 = v196;
      if ((unint64_t)v196 >= v197[0])
      {
        unint64_t v60 = 0x8E38E38E38E38E39 * (((uint64_t)v196 - v195) >> 4);
        if (v60 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v61 = 0x1C71C71C71C71C72 * ((v197[0] - v195) >> 4);
        if (v61 <= v60 + 1) {
          unint64_t v61 = v60 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v197[0] - v195) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v62 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v62 = v61;
        }
        *((void *)&v218 + 1) = v197;
        if (v62) {
          unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v62);
        }
        else {
          uint64_t v63 = 0;
        }
        *(void *)unint64_t v217 = v62;
        *(void *)&v217[8] = v62 + 144 * v60;
        *(void *)&v217[16] = *(void *)&v217[8];
        *(void *)&long long v218 = v62 + 144 * v63;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v217[8], (uint64_t)buf);
        *(void *)&v217[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v195, v217);
        uint64_t v59 = v196;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v217);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v196, (uint64_t)buf);
        uint64_t v59 = v58 + 6;
      }
      BOOL v196 = v59;

      if (v213 < 0) {
        operator delete(__p);
      }
      *(void *)unint64_t v217 = v211;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      *(void *)unint64_t v217 = v210;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      if (v209 < 0) {
        operator delete(*(void **)buf);
      }

      LODWORD(__C) = 0;
      vDSP_minmgv(*(const float **)(v40 + 16), 1, (float *)&__C, (unint64_t)*(int *)(v40 + 8) >> 2);
      if (*(float *)&__C < 0.0001)
      {
        uint64_t v80 = Espresso::espresso_os_log_subsystem(v78, v79);
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_debug_impl(&dword_1920CB000, v80, OS_LOG_TYPE_DEBUG, "Applying workaround for rdar://problem/48794950", buf, 2u);
        }

        uint64_t v81 = objc_opt_new();
        [v81 setObject:@"Avg" forKeyedSubscript:@"Type"];
        [v81 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"KernelWidth"];
        [v81 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"KernelHeight"];
        [v81 setObject:&unk_1EE3AF088 forKeyedSubscript:@"Step"];
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, v191);
        char v82 = v215;
        unint64_t v215 = @"Pooling";

        objc_storeStrong(v216, v81);
        int v83 = v196;
        if ((unint64_t)v196 >= v197[0])
        {
          unint64_t v85 = 0x8E38E38E38E38E39 * (((uint64_t)v196 - v195) >> 4);
          if (v85 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v86 = 0x1C71C71C71C71C72 * ((v197[0] - v195) >> 4);
          if (v86 <= v85 + 1) {
            unint64_t v86 = v85 + 1;
          }
          if (0x8E38E38E38E38E39 * ((v197[0] - v195) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v87 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v87 = v86;
          }
          *((void *)&v218 + 1) = v197;
          if (v87) {
            unint64_t v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v87);
          }
          else {
            uint64_t v88 = 0;
          }
          *(void *)unint64_t v217 = v87;
          *(void *)&v217[8] = v87 + 144 * v85;
          *(void *)&v217[16] = *(void *)&v217[8];
          *(void *)&long long v218 = v87 + 144 * v88;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v217[8], (uint64_t)buf);
          *(void *)&v217[16] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v195, v217);
          float v84 = v196;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v217);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v196, (uint64_t)buf);
          float v84 = v83 + 6;
        }
        BOOL v196 = v84;

        if (v213 < 0) {
          operator delete(__p);
        }
        *(void *)unint64_t v217 = v211;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
        *(void *)unint64_t v217 = v210;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
        if (v209 < 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v50 = objc_opt_new();
      long long v89 = [NSNumber numberWithInt:v36];
      [v50 setObject:v89 forKeyedSubscript:@"BiasCount"];

      int v90 = [NSNumber numberWithInt:v44];
      [v50 setObject:v90 forKeyedSubscript:@"BiasOffset"];

      float v91 = NSNumber;
      if (obj) {
        uint64_t v92 = 0;
      }
      else {
      unint64_t v93 = [v91 numberWithUnsignedLong:v92];
      }
      [v50 setObject:v93 forKeyedSubscript:@"BiasIndex"];

      [v50 setObject:@"Float32" forKeyedSubscript:@"BiasType"];
      uint64_t v70 = objc_opt_new();
      [v70 setObject:v50 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, v191);
      double v94 = v215;
      unint64_t v215 = @"GOC";

      objc_storeStrong(v216, v70);
      uint64_t v95 = v196;
      if ((unint64_t)v196 >= v197[0])
      {
        unint64_t v97 = 0x8E38E38E38E38E39 * (((uint64_t)v196 - v195) >> 4);
        if (v97 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v98 = 0x1C71C71C71C71C72 * ((v197[0] - v195) >> 4);
        if (v98 <= v97 + 1) {
          unint64_t v98 = v97 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v197[0] - v195) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v99 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v99 = v98;
        }
        *((void *)&v218 + 1) = v197;
        if (v99) {
          unint64_t v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v99);
        }
        else {
          uint64_t v100 = 0;
        }
        *(void *)unint64_t v217 = v99;
        *(void *)&v217[8] = v99 + 144 * v97;
        *(void *)&v217[16] = *(void *)&v217[8];
        *(void *)&long long v218 = v99 + 144 * v100;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v217[8], (uint64_t)buf);
        *(void *)&v217[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v195, v217);
        uint64_t v96 = v196;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v217);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v196, (uint64_t)buf);
        uint64_t v96 = v95 + 6;
      }
      BOOL v196 = v96;

      if (v213 < 0) {
        operator delete(__p);
      }
      *(void *)unint64_t v217 = v211;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      *(void *)unint64_t v217 = v210;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      if (v209 < 0) {
        operator delete(*(void **)buf);
      }
    }

    uint64_t v10 = v192;
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (*((void *)&v40 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v40 + 1));
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (*((void *)&v40 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v40 + 1));
    }
  }
  atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)buf);
  unint64_t v215 = 0;
  v216[0] = 0;
  v216[1] = (id)0x100000000;
  uint64_t v101 = *((void *)this + 58);
  float v102 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v102) {
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v101 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 50) + 104))() + 40))
  {
    float v103 = v185[28];
    v201[0] = v101;
    v201[1] = v102;
    if (v102) {
      atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v104 = (std::__shared_weak_count *)*((void *)this + 61);
    v200[0] = *((void *)this + 60);
    v200[1] = (uint64_t)v104;
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v201, v200, (uint64_t)&__C, v103);
    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    uint64_t v105 = *(unsigned int *)(v101 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v198, 2 * v105, 1, 1, 1);
    uint64_t v106 = (int)v105;
    uint64_t v107 = *((void *)this + 60);
    int v108 = v105;
    if (v107) {
      int v108 = *(_DWORD *)(v107 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v105);
      unsigned int v157 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v105 >= 1)
      {
        for (uint64_t i = 0; i != v105; ++i)
        {
          float v159 = *(float *)(*(void *)(v101 + 16) + i * 4);
          *(float *)&int v160 = ldexp(1.0, -v206) * v159;
          v157[i] = v160;
        }
      }
      if (v105)
      {
        char v161 = *(_WORD **)(v198 + 16);
        do
        {
          int v162 = *v157++;
          _S0 = v162;
          __asm { FCVT            H0, S0 }
          *v161++ = _S0;
          --v106;
        }
        while (v106);
      }
      if (*((void *)this + 60))
      {
        Espresso::blob<unsigned char,1>::make(v217, 4 * v108);
        uint64_t v165 = *(void *)v217;
        Espresso::blob<unsigned char,1>::make(v217, 2 * v108);
        uint64_t v184 = *(void *)v217;
        char v166 = *(int **)(v165 + 16);
        if (v108 >= 1)
        {
          for (uint64_t j = 0; j != v108; ++j)
          {
            if ((int)v105 - 1 >= (int)j) {
              int v168 = j;
            }
            else {
              int v168 = v105 - 1;
            }
            *(float *)&int v169 = *(float *)(*(void *)(v204 + 16) + 4 * j)
                            * *(float *)(*(void *)(__C + 16) + 4 * v168);
            v166[j] = v169;
            unsigned int v170 = v206;
            unsigned int v171 = v207;
            *(float *)&int v172 = ldexp(1.0, v207 - v206) * *(float *)&v169;
            v166[j] = v172;
            float v175 = ldexp(1.0, v170 - v171) * *(float *)&v172;
            if (v175 < -127.0 || v175 > 255.0)
            {
              id v177 = Espresso::espresso_os_log_subsystem(v173, v174);
              if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
              {
                double v178 = *(float *)&v166[j];
                *(_DWORD *)unint64_t v217 = 134218752;
                *(double *)&v217[4] = v175;
                *(_WORD *)&v217[12] = 1024;
                *(_DWORD *)&v217[14] = v207;
                *(_WORD *)&v217[18] = 1024;
                *(_DWORD *)&v217[20] = v206;
                LOWORD(v218) = 2048;
                *(double *)((char *)&v218 + 2) = v178;
                _os_log_error_impl(&dword_1920CB000, v177, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", v217, 0x22u);
              }
            }
          }
        }
        if (v108)
        {
          uint64_t v179 = v108;
          uint64_t v180 = *(_WORD **)(v184 + 16);
          do
          {
            int v181 = *v166++;
            _S0 = v181;
            __asm { FCVT            H0, S0 }
            *v180++ = _S0;
            --v179;
          }
          while (v179);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v109 = v207;
    uint64_t v110 = v198;
    if (v105)
    {
      uint64_t v111 = *(int **)(__C + 16);
      unsigned int v112 = *(_WORD **)(v198 + 16);
      do
      {
        int v113 = *v111++;
        _S0 = v113;
        __asm { FCVT            H0, S0 }
        *v112++ = _S0;
        --v106;
      }
      while (v106);
    }
    if (v107)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(v217, 2 * v108, 1, 1, 1);
      uint64_t v115 = *(void *)v217;
      uint64_t v186 = *(std::__shared_weak_count **)&v217[8];
      if (v108)
      {
        uint64_t v116 = v108;
        uint64_t v117 = *(_WORD **)(*(void *)v217 + 16);
        uint64_t v118 = *(int **)(v204 + 16);
        do
        {
          int v119 = *v118++;
          _S0 = v119;
          __asm { FCVT            H0, S0 }
          *v117++ = _S0;
          --v116;
        }
        while (v116);
      }
    }
    else
    {
      uint64_t v186 = 0;
      uint64_t v115 = 0;
    }
    int v121 = *((unsigned __int8 *)a2 + 552);
    id v122 = v199;
    if (v199) {
      atomic_fetch_add_explicit(&v199->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v123 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v110 + 16), *(int *)(v110 + 8));
    if (v122) {
      nitro::nitro_function::nitro_function(v122);
    }
    id obja = (id)objc_opt_new();
    uint64_t v183 = v115;
    if (*((unsigned char *)a2 + 121))
    {
      id v124 = *(id *)(v195 + 128);

      id obja = v124;
    }
    uint64_t v125 = objc_opt_new();
    __int16 v126 = [NSNumber numberWithInt:v105];
    [v125 setObject:v126 forKeyedSubscript:@"ScaleCount"];

    int v127 = [NSNumber numberWithInt:v123];
    [v125 setObject:v127 forKeyedSubscript:@"ScaleOffset"];

    __int16 v128 = NSNumber;
    if (v121) {
      uint64_t v129 = 0;
    }
    else {
    std::vector<std::string> v130 = [v128 numberWithUnsignedLong:v129];
    }
    [v125 setObject:v130 forKeyedSubscript:@"ScaleIndex"];

    [v125 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    int v131 = [NSNumber numberWithInt:v206];
    [obja setObject:v131 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 60))
    {
      if (v186) {
        atomic_fetch_add_explicit(&v186->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v132 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v183 + 16), *(int *)(v183 + 8));
      if (v186) {
        nitro::nitro_function::nitro_function(v186);
      }
      id v133 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 60) + 8)];
      [v125 setObject:v133 forKeyedSubscript:@"BiasCount"];

      uint64_t v134 = [NSNumber numberWithInt:v132];
      [v125 setObject:v134 forKeyedSubscript:@"BiasOffset"];

      id v135 = NSNumber;
      if (v121) {
        uint64_t v136 = 0;
      }
      else {
      long long v137 = [v135 numberWithUnsignedLong:v136];
      }
      [v125 setObject:v137 forKeyedSubscript:@"BiasIndex"];

      [v125 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v138 = [NSNumber numberWithInt:v109];
      [obja setObject:v138 forKeyedSubscript:@"BiasShift"];
    }
    [obja setObject:v125 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v217, v191);
    std::string v139 = v196;
    if (v196 == (std::string *)v195) {
      goto LABEL_223;
    }
    uint64_t v140 = v196 - 6;
    uint64_t v141 = HIBYTE(v196[-6].__r_.__value_.__r.__words[2]);
    char v142 = v141;
    std::string::size_type size = v196[-6].__r_.__value_.__l.__size_;
    if ((v141 & 0x80u) == 0) {
      std::string::size_type v144 = HIBYTE(v196[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v144 = v196[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v145 = v217[23];
    if (v217[23] < 0) {
      uint64_t v145 = *(void *)&v217[8];
    }
    if (v144 != v145) {
      goto LABEL_217;
    }
    if (v217[23] >= 0) {
      id v146 = v217;
    }
    else {
      id v146 = *(unsigned __int8 **)v217;
    }
    if ((char)v141 < 0)
    {
      data = (const std::string::value_type *)v140->__r_.__value_.__r.__words[0];
      if (memcmp(v140->__r_.__value_.__l.__data_, v146, v196[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_220;
      }
    }
    else if ((_BYTE)v141)
    {
      uint64_t v147 = v196 - 6;
      while (v147->__r_.__value_.__s.__data_[0] == *v146)
      {
        uint64_t v147 = (std::string *)((char *)v147 + 1);
        ++v146;
        if (!--v141) {
          goto LABEL_216;
        }
      }
      goto LABEL_217;
    }
LABEL_216:
    std::string::append(v139 - 6, "__@pre_scale_bias");
    char v142 = HIBYTE(v139[-6].__r_.__value_.__r.__words[2]);
LABEL_217:
    if ((v142 & 0x80) == 0)
    {
      long long v149 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v139[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v149;
      goto LABEL_221;
    }
    data = v139[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v139[-6].__r_.__value_.__l.__size_;
LABEL_220:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_221:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v219, &__str, &v226, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_223:
    std::vector<std::string> v150 = v223;
    v223 = @"GOC";

    objc_storeStrong(&v224, obja);
    if (!*((unsigned char *)a2 + 121))
    {
      unsigned int v151 = v196;
      if ((unint64_t)v196 >= v197[0])
      {
        unint64_t v153 = 0x8E38E38E38E38E39 * (((uint64_t)v196 - v195) >> 4);
        if (v153 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v154 = 0x1C71C71C71C71C72 * ((v197[0] - v195) >> 4);
        if (v154 <= v153 + 1) {
          unint64_t v154 = v153 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v197[0] - v195) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v155 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v155 = v154;
        }
        *((void *)&v226 + 1) = v197;
        if (v155) {
          unint64_t v155 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v155);
        }
        else {
          uint64_t v156 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v155;
        __str.__r_.__value_.__l.__size_ = v155 + 144 * v153;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v226 = v155 + 144 * v156;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)v217);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v195, &__str);
        uint64_t v152 = v196;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v196, (uint64_t)v217);
        uint64_t v152 = v151 + 6;
      }
      BOOL v196 = v152;
    }

    if (v221 < 0) {
      operator delete(v220);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((v217[23] & 0x80000000) != 0) {
      operator delete(*(void **)v217);
    }

    if (v186) {
      nitro::nitro_function::nitro_function(v186);
    }
    if (v199) {
      nitro::nitro_function::nitro_function(v199);
    }
    if (v205) {
      nitro::nitro_function::nitro_function(v205);
    }
    if (v203) {
      nitro::nitro_function::nitro_function(v203);
    }
  }
  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }

  if (v213 < 0) {
    operator delete(__p);
  }
  *(void *)unint64_t v217 = v211;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
  *(void *)unint64_t v217 = v210;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
  if (v209 < 0) {
    operator delete(*(void **)buf);
  }
  if (v192) {
    nitro::nitro_function::nitro_function(v192);
  }
  nitro::nitro_function::nitro_function(v193);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 50) + 32))((char *)this + 400, a2, &v195);

  *(void *)long long buf = &v195;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v192) {
    nitro::nitro_function::nitro_function(v192);
  }
  if (v187) {
    nitro::nitro_function::nitro_function(v187);
  }
  nitro::nitro_function::nitro_function(v193);
}

void sub_192737454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  nitro::nitro_function::nitro_function(a19);

  a25 = (void **)&a22;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a25);
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  nitro::nitro_function::nitro_function(a19);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::batchnorm_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 624);
  *a2 = *(void *)(this + 616);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::ANECompilerEngine::batchnorm_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 616) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 624);
  *(void *)(a1 + 624) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::ANECompilerEngine::batchnorm_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (Espresso::generic_batchnorm_kernel::supports_weight_key(a1, a2)
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

void Espresso::ANECompilerEngine::batchnorm_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_batchnorm_kernel::__set_weight_raw_blob((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
  (*(void (**)(long long *__return_ptr, void *))(a1[50] + 128))(v17, a1 + 50);
  long long v11 = (std::__shared_weak_count *)a1[2];
  v16[0] = a1[1];
  v16[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(a1[50] + 136))(a1 + 50);
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, v12, a3, (char *)a4, a5, a6, a1 + 48, v17, v16, v12, 1);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (__p)
  {
    unsigned int v19 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 50, (uint64_t *)a3, a4, a5);
}

void sub_192737B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::batchnorm_kernel::~batchnorm_kernel(Espresso::ANECompilerEngine::batchnorm_kernel *this)
{
  *(void *)this = &unk_1EE341440;
  uint64_t v2 = (Espresso::ANECompilerEngine::batchnorm_kernel *)((char *)this + 400);
  *((void *)this + 50) = &unk_1EE3415F8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341440;
  uint64_t v2 = (Espresso::ANECompilerEngine::batchnorm_kernel *)((char *)this + 400);
  *((void *)this + 50) = &unk_1EE3415F8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::general_padding_kernel::~general_padding_kernel(Espresso::ANECompilerEngine::general_padding_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::general_padding_kernel *)((char *)this - 360);
  *((void *)this - 45) = &unk_1EE3457F0;
  *(void *)this = &unk_1EE345958;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::general_padding_kernel *)((char *)this - 360);
  *((void *)this - 45) = &unk_1EE3457F0;
  *(void *)this = &unk_1EE345958;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::general_padding_kernel::compile(Espresso::ANECompilerEngine::general_padding_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::general_padding_kernel::compile(Espresso::ANECompilerEngine::general_padding_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v271 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v5 = std::__shared_weak_count::lock(v4)) == 0 || (v6 = (void *)*((void *)a2 + 1), v205 = v5, !v6)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!v6[72]) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v7 = (uint64_t)(v6 + 17);
  uint64_t v8 = (_OWORD *)((char *)a3 + 48);
  v220[0] = *((void **)a3 + 6);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v6 + 17), (unsigned __int8 *)v220[0], (long long **)v220);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  lpsrc = (void *)*((void *)v9 + 5);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v220[0] = a3;
  long long v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v6 + 17), (unsigned __int8 *)a3, (long long **)v220);
  obuint64_t j = v6;
  uint64_t v204 = v10;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  uint64_t v197 = *((void *)v11 + 5);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v206 = v12;
  uint64_t v236 = 0;
  v235 = 0;
  unint64_t v237 = 0;
  double v14 = (unsigned __int8 *)*((void *)a3 + 6);
  for (uint64_t i = (unsigned __int8 *)*((void *)a3 + 7); v14 != i; v14 += 24)
  {
    v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    int32x2_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v14, (long long **)&v259);
    Espresso::abstract_blob_container::shape((char *)v220, *((void *)v15 + 5));
    uint64_t v16 = v236;
    if ((unint64_t)v236 >= v237)
    {
      int64_t v19 = (v236 - v235) >> 6;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v21 = v237 - (void)v235;
      if ((uint64_t)(v237 - (void)v235) >> 5 > v20) {
        unint64_t v20 = v21 >> 5;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      p_unint64_t shared_weak_owners = &v237;
      uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v22);
      std::string::size_type v24 = (std::string::size_type)&v23[64 * v19];
      v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      v259.__r_.__value_.__l.__size_ = v24;
      uint64_t v260 = &v23[64 * v25];
      long long v26 = *(_OWORD *)&v220[2];
      uint64_t v27 = v220[4];
      *(_OWORD *)std::string::size_type v24 = *(_OWORD *)v220;
      *(_OWORD *)(v24 + 16) = v26;
      *(void *)(v24 + 32) = v27;
      *(void *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_OWORD *)(v24 + 40) = *(_OWORD *)&v220[5];
      *(void **)(v24 + 56) = v220[7];
      memset(&v220[5], 0, 24);
      v259.__r_.__value_.__r.__words[2] = v24 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v235, &v259);
      uint64_t v28 = (long long *)v236;
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v259);
      uint64_t v236 = (char *)v28;
      if (v220[5])
      {
        v220[6] = v220[5];
        operator delete(v220[5]);
      }
    }
    else
    {
      long long v17 = *(_OWORD *)&v220[2];
      uint64_t v18 = v220[4];
      *(_OWORD *)uint64_t v236 = *(_OWORD *)v220;
      *((_OWORD *)v16 + 1) = v17;
      *((void *)v16 + 4) = v18;
      *((void *)v16 + 5) = 0;
      *((void *)v16 + 6) = 0;
      *((void *)v16 + 7) = 0;
      *(_OWORD *)(v16 + 40) = *(_OWORD *)&v220[5];
      *((void **)v16 + 7) = v220[7];
      memset(&v220[5], 0, 24);
      uint64_t v236 = v16 + 64;
    }
  }
  int v232 = 0;
  uint64_t v233 = 0;
  unint64_t v234 = 0;
  uint64_t v229 = 0;
  v230 = 0;
  unint64_t v231 = 0;
  v230 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v229, (uint64_t)a3);
  v259.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  int v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a3, (long long **)&v259);
  Espresso::abstract_blob_container::shape((char *)v220, *((void *)v29 + 5));
  unint64_t v30 = v233;
  if ((unint64_t)v233 >= v234)
  {
    int64_t v33 = (v233 - v232) >> 6;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 58) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = v234 - (void)v232;
    if ((uint64_t)(v234 - (void)v232) >> 5 > v34) {
      unint64_t v34 = v35 >> 5;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v36 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v34;
    }
    p_unint64_t shared_weak_owners = &v234;
    float v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v36);
    std::string::size_type v38 = (std::string::size_type)&v37[64 * v33];
    v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    v259.__r_.__value_.__l.__size_ = v38;
    uint64_t v260 = &v37[64 * v39];
    long long v40 = *(_OWORD *)&v220[2];
    std::string::size_type v41 = v220[4];
    *(_OWORD *)std::string::size_type v38 = *(_OWORD *)v220;
    *(_OWORD *)(v38 + 16) = v40;
    *(void *)(v38 + 32) = v41;
    *(void *)(v38 + 40) = 0;
    *(void *)(v38 + 48) = 0;
    *(void *)(v38 + 56) = 0;
    *(_OWORD *)(v38 + 40) = *(_OWORD *)&v220[5];
    *(void **)(v38 + 56) = v220[7];
    memset(&v220[5], 0, 24);
    v259.__r_.__value_.__r.__words[2] = v38 + 64;
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v232, &v259);
    std::string v42 = (long long *)v233;
    std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v259);
    uint64_t v233 = (char *)v42;
    if (v220[5])
    {
      v220[6] = v220[5];
      operator delete(v220[5]);
    }
  }
  else
  {
    long long v31 = *(_OWORD *)&v220[2];
    unint64_t v32 = v220[4];
    *(_OWORD *)uint64_t v233 = *(_OWORD *)v220;
    *((_OWORD *)v30 + 1) = v31;
    *((void *)v30 + 4) = v32;
    *((void *)v30 + 5) = 0;
    *((void *)v30 + 6) = 0;
    *((void *)v30 + 7) = 0;
    *(_OWORD *)(v30 + 40) = *(_OWORD *)&v220[5];
    *((void **)v30 + 7) = v220[7];
    memset(&v220[5], 0, 24);
    uint64_t v233 = v30 + 64;
  }
  uint64_t v43 = *((void *)a3 + 3);
  for (uint64_t j = *((void *)a3 + 4); v43 != j; v43 += 24)
  {
    uint64_t v45 = v230;
    if ((unint64_t)v230 >= v231)
    {
      uint64_t v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v229, v43);
    }
    else
    {
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v230, *(const std::string::value_type **)v43, *(void *)(v43 + 8));
      }
      else
      {
        long long v46 = *(_OWORD *)v43;
        v230->__r_.__value_.__r.__words[2] = *(void *)(v43 + 16);
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
      }
      uint64_t v47 = v45 + 1;
    }
    v230 = v47;
    v259.__r_.__value_.__r.__words[0] = v43;
    long long v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)v43, (long long **)&v259);
    Espresso::abstract_blob_container::shape((char *)v220, *((void *)v48 + 5));
    uint64_t v49 = v233;
    if ((unint64_t)v233 >= v234)
    {
      int64_t v52 = (v233 - v232) >> 6;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v54 = v234 - (void)v232;
      if ((uint64_t)(v234 - (void)v232) >> 5 > v53) {
        unint64_t v53 = v54 >> 5;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v55 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      p_unint64_t shared_weak_owners = &v234;
      uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v55);
      std::string::size_type v57 = (std::string::size_type)&v56[64 * v52];
      v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
      v259.__r_.__value_.__l.__size_ = v57;
      uint64_t v260 = &v56[64 * v58];
      long long v59 = *(_OWORD *)&v220[2];
      unint64_t v60 = v220[4];
      *(_OWORD *)std::string::size_type v57 = *(_OWORD *)v220;
      *(_OWORD *)(v57 + 16) = v59;
      *(void *)(v57 + 32) = v60;
      *(void *)(v57 + 40) = 0;
      *(void *)(v57 + 48) = 0;
      *(void *)(v57 + 56) = 0;
      *(_OWORD *)(v57 + 40) = *(_OWORD *)&v220[5];
      *(void **)(v57 + 56) = v220[7];
      memset(&v220[5], 0, 24);
      v259.__r_.__value_.__r.__words[2] = v57 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v232, &v259);
      unint64_t v61 = (long long *)v233;
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v259);
      uint64_t v233 = (char *)v61;
      if (v220[5])
      {
        v220[6] = v220[5];
        operator delete(v220[5]);
      }
    }
    else
    {
      long long v50 = *(_OWORD *)&v220[2];
      uint64_t v51 = v220[4];
      *(_OWORD *)uint64_t v233 = *(_OWORD *)v220;
      *((_OWORD *)v49 + 1) = v50;
      *((void *)v49 + 4) = v51;
      *((void *)v49 + 5) = 0;
      *((void *)v49 + 6) = 0;
      *((void *)v49 + 7) = 0;
      *(_OWORD *)(v49 + 40) = *(_OWORD *)&v220[5];
      *((void **)v49 + 7) = v220[7];
      memset(&v220[5], 0, 24);
      uint64_t v233 = v49 + 64;
    }
  }
  int v222 = 0;
  long long v221 = 0u;
  memset(v220, 0, sizeof(v220));
  uint64_t v223 = 0;
  uint64_t v224 = 0;
  __int16 v225 = 0;
  char v226 = 1;
  memset(v227, 0, sizeof(v227));
  memset(v228, 0, sizeof(v228));
  std::operator+<char>();
  unint64_t v62 = std::string::append(&v259, "_general_padding");
  uint64_t v63 = (void *)v62->__r_.__value_.__r.__words[0];
  *(void *)long long buf = v62->__r_.__value_.__l.__size_;
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&v62->__r_.__value_.__r.__words[1] + 7);
  char v64 = HIBYTE(v62->__r_.__value_.__r.__words[2]);
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v220[2]) < 0) {
    operator delete(v220[0]);
  }
  v220[0] = v63;
  v220[1] = *(void **)buf;
  *(void **)((char *)&v220[1] + 7) = *(void **)&buf[7];
  HIBYTE(v220[2]) = v64;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  MEMORY[0x192FF0F50](&v220[6], "general_padding");
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v228, (long long *)v232, (long long *)v233, (v233 - v232) >> 6);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v228[3], (long long *)v235, (long long *)v236, (v236 - v235) >> 6);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v227, v229, v230, 0xAAAAAAAAAAAAAAABLL * (((char *)v230 - (char *)v229) >> 3));
  if ((_OWORD *)((char *)&v227[1] + 8) != v8) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v227[1] + 8, *((std::string **)a3 + 6), *((std::string **)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 3));
  }
  uint64_t v65 = (char *)operator new(0x70uLL);
  unint64_t v66 = (std::__shared_weak_count *)v65;
  *((void *)v65 + 1) = 0;
  *((void *)v65 + 2) = 0;
  *(void *)uint64_t v65 = &unk_1EE381D50;
  *(_OWORD *)(v65 + 24) = 0u;
  unint64_t v67 = (uint64_t *)(v65 + 24);
  *(_OWORD *)(v65 + 40) = 0u;
  *(_OWORD *)(v65 + 56) = 0u;
  *((void *)v65 + 6) = v65 + 56;
  *((void *)v65 + 10) = 0;
  *((void *)v65 + 9) = v65 + 80;
  *((void *)v65 + 12) = 0;
  *((void *)v65 + 13) = 0;
  *((void *)v65 + 11) = 0;
  uint64_t v68 = (std::__shared_weak_count_vtbl *)*((void *)a2 + 1);
  uint64_t v69 = *((void *)a2 + 2);
  if (v69)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 16), 1uLL, memory_order_relaxed);
    uint64_t v70 = (std::__shared_weak_count *)*((void *)v65 + 13);
    v66[4].__vftable = v68;
    v66[4].__shared_owners_ = v69;
    if (v70) {
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  else
  {
    *((void *)v65 + 12) = v68;
    *((void *)v65 + 13) = 0;
  }
  unint64_t shared_weak_owners = v66[1].__shared_weak_owners_;
  unint64_t shared_owners = v66[1].__shared_owners_;
  if (shared_owners >= shared_weak_owners)
  {
    uint64_t v74 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(shared_owners - *v67) >> 5);
    if ((unint64_t)(v74 + 1) > 0x124924924924924) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v75 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(shared_weak_owners - *v67) >> 5);
    uint64_t v76 = 2 * v75;
    if (2 * v75 <= v74 + 1) {
      uint64_t v76 = v74 + 1;
    }
    if (v75 >= 0x92492492492492) {
      unint64_t v77 = 0x124924924924924;
    }
    else {
      unint64_t v77 = v76;
    }
    p_unint64_t shared_weak_owners = (unint64_t *)&v66[1].__shared_weak_owners_;
    if (v77) {
      unint64_t v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(v77);
    }
    else {
      uint64_t v78 = 0;
    }
    v259.__r_.__value_.__r.__words[0] = v77;
    v259.__r_.__value_.__l.__size_ = v77 + 224 * v74;
    v259.__r_.__value_.__r.__words[2] = v259.__r_.__value_.__l.__size_;
    uint64_t v260 = (char *)(v77 + 224 * v78);
    Espresso::kernel_info_t::kernel_info_t((std::string *)v259.__r_.__value_.__l.__size_, (const Espresso::kernel_info_t *)v220);
    v259.__r_.__value_.__r.__words[2] += 224;
    std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer(v67, &v259);
    unint64_t v73 = v66[1].__shared_owners_;
    std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer((uint64_t)&v259);
  }
  else
  {
    Espresso::kernel_info_t::kernel_info_t((std::string *)v66[1].__shared_owners_, (const Espresso::kernel_info_t *)v220);
    unint64_t v73 = shared_owners + 224;
    v66[1].__shared_owners_ = shared_owners + 224;
  }
  v66[1].__shared_owners_ = v73;
  long long v217 = 0u;
  memset(v216, 0, sizeof(v216));
  int v218 = 1;
  uint64_t v219 = 0;
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)v216, (long long *)v235, (long long *)v236, (v236 - v235) >> 6);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)&v216[1] + 1, (long long *)v232, (long long *)v233, (v233 - v232) >> 6);
  atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v79 = (std::__shared_weak_count *)*((void *)&v217 + 1);
  *(void *)&long long v217 = v67;
  *((void *)&v217 + 1) = v66;
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  int v218 = *((_DWORD *)this + 148);
  uint64_t v219 = 0;
  uint64_t v80 = *(long long **)v8;
  if (*(char *)(*(void *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)v80, *((void *)v80 + 1));
  }
  else
  {
    long long v81 = *v80;
    v215.__r_.__value_.__r.__words[2] = *((void *)v80 + 2);
    *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v81;
  }
  long long v211 = objc_opt_new();
  if (lpsrc)
  {
    if (v204)
    {
      if (v82)
      {
        atomic_fetch_add_explicit(&v204->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v204);
      }
    }
  }
  if (*((_WORD *)this + 140)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported padding mode.");
  }
  uint64_t v83 = *((__int16 *)this + 144);
  uint64_t v84 = *((__int16 *)this + 145);
  uint64_t v85 = *((__int16 *)this + 146);
  uint64_t v86 = *((__int16 *)this + 147);
  uint64_t v87 = *((__int16 *)this + 149);
  uint64_t v88 = *((__int16 *)this + 148);
  BOOL v200 = (v88 | v87) != 0;
  if (v88 | v87) {
    uint64_t v89 = 3;
  }
  else {
    uint64_t v89 = 2;
  }
  lpsrca = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v89];
  int v90 = objc_opt_new();
  [v90 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  unint64_t v91 = *((unsigned __int16 *)this + 141);
  if (v91 >= 4) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected padding fill mode.");
  }
  [v90 setObject:*((void *)&off_1E5746EA0 + v91) forKeyedSubscript:@"PaddingMode"];
  [lpsrca setObject:v90 atIndexedSubscript:0];

  uint64_t v92 = objc_opt_new();
  [v92 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  unint64_t v93 = *((unsigned __int16 *)this + 141);
  if (v93 >= 4) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected padding fill mode.");
  }
  [v92 setObject:*((void *)&off_1E5746EA0 + v93) forKeyedSubscript:@"PaddingMode"];
  [lpsrca setObject:v92 atIndexedSubscript:1];

  if (*((_WORD *)this + 141))
  {
    [NSNumber numberWithShort:0];
  }
  else
  {
    _S0 = *((_DWORD *)this + 71);
    __asm { FCVT            H0, S0 }
    [NSNumber numberWithShort:(__int16)_S0];
  double v94 = };
  [v211 setObject:v94 forKeyedSubscript:@"BackgroundValue"];

  unint64_t v99 = [NSNumber numberWithInt:v83];
  [v211 setObject:v99 forKeyedSubscript:@"PadLeft"];

  uint64_t v100 = [NSNumber numberWithInt:v84];
  [v211 setObject:v100 forKeyedSubscript:@"PadRight"];

  uint64_t v101 = [NSNumber numberWithInt:v85];
  [v211 setObject:v101 forKeyedSubscript:@"PadTop"];

  float v102 = [NSNumber numberWithInt:v86];
  [v211 setObject:v102 forKeyedSubscript:@"PadBot"];

  if (*((void *)&v216[0] + 1) == *(void *)&v216[0]) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v103 = *(_DWORD *)(*(void *)&v216[0] + 20);
  if (v103 == -1)
  {
    if (*(_DWORD *)(*(void *)&v216[0] + 16) == 1) {
      unsigned int v103 = 4;
    }
    else {
      unsigned int v103 = 5;
    }
  }
  else if (v103 >= 6)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to determine 3d padding axis.");
  }
  _ZF = v103 != 5 || obj[1281] == 0;
  int v105 = !_ZF;
  if (_ZF)
  {
    unsigned int v109 = [NSNumber numberWithInt:v88];
    [v211 setObject:v109 forKeyedSubscript:@"PadChannelFront"];

    uint64_t v110 = [NSNumber numberWithInt:v87];
    [v211 setObject:v110 forKeyedSubscript:@"PadChannelBack"];

    [v211 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadFront"];
    int v108 = @"PadBack";
  }
  else
  {
    uint64_t v106 = [NSNumber numberWithInt:v88];
    [v211 setObject:v106 forKeyedSubscript:@"PadFront"];

    uint64_t v107 = [NSNumber numberWithInt:v87];
    [v211 setObject:v107 forKeyedSubscript:@"PadBack"];

    [v211 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadChannelFront"];
    int v108 = @"PadChannelBack";
  }
  [v211 setObject:&unk_1EE3AEE18 forKeyedSubscript:v108];
  [v211 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadBatchFront"];
  [v211 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadBatchBack"];
  if (v200)
  {
    if (v105)
    {
      uint64_t v111 = objc_opt_new();
      [v111 setObject:@"Depth" forKeyedSubscript:@"Coordinate"];
      unint64_t v112 = *((unsigned __int16 *)this + 141);
      if (v112 >= 4) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected padding fill mode.");
      }
    }
    else
    {
      uint64_t v111 = objc_opt_new();
      [v111 setObject:@"Channel" forKeyedSubscript:@"Coordinate"];
      unint64_t v112 = *((unsigned __int16 *)this + 141);
      if (v112 >= 4) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected padding fill mode.");
      }
    }
    [v111 setObject:*((void *)&off_1E5746EA0 + v112) forKeyedSubscript:@"PaddingMode"];
    [lpsrca setObject:v111 atIndexedSubscript:2];
  }
  [v211 setObject:lpsrca forKeyedSubscript:@"PaddingInfo"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v259.__r_.__value_.__l.__data_, (id *)a3);
  v212 = 0;
  char v213 = 0;
  unint64_t v214 = 0;
  *(void *)long long buf = &v212;
  uint8_t buf[8] = 0;
  v212 = (std::string *)operator new(0x90uLL);
  char v213 = v212;
  unint64_t v214 = (unint64_t)&v212[6];
  char v213 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v214, (uint64_t)&v259, (uint64_t)&__str, (uint64_t)v212);

  if (v264 < 0) {
    operator delete(v263);
  }
  *(void *)long long buf = v262;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v260;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  std::string::pointer data = v212[5].__r_.__value_.__l.__data_;
  v212[5].__r_.__value_.__r.__words[0] = (std::string::size_type)@"Padding";

  objc_storeStrong((id *)&v212[5].__r_.__value_.__l.__size_, v211);
  atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v206) {
    atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v259);
  id v267 = 0;
  id v266 = 0;
  uint64_t v268 = 0x100000000;
  uint64_t v115 = *((void *)this + 53);
  unsigned int v114 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v115 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 45) + 104))() + 40))
  {
    float v116 = *(float *)(v197 + 112);
    v241[0] = v115;
    v241[1] = v114;
    if (v114) {
      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v117 = (std::__shared_weak_count *)*((void *)this + 56);
    v240[0] = *((void *)this + 55);
    v240[1] = (uint64_t)v117;
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v241, v240, (uint64_t)&v242, v116);
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
    if (v114) {
      nitro::nitro_function::nitro_function(v114);
    }
    uint64_t v118 = *(unsigned int *)(v115 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v238, 2 * v118, 1, 1, 1);
    uint64_t v119 = (int)v118;
    uint64_t v120 = *((void *)this + 55);
    int v121 = v118;
    if (v120) {
      int v121 = *(_DWORD *)(v120 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v118);
      unsigned int v170 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v118 >= 1)
      {
        for (uint64_t k = 0; k != v118; ++k)
        {
          float v172 = *(float *)(*(void *)(v115 + 16) + k * 4);
          *(float *)&int v173 = ldexp(1.0, -v246) * v172;
          v170[k] = v173;
        }
      }
      if (v118)
      {
        char v174 = *(_WORD **)(v238 + 16);
        do
        {
          int v175 = *v170++;
          _S0 = v175;
          __asm { FCVT            H0, S0 }
          *v174++ = _S0;
          --v119;
        }
        while (v119);
      }
      if (*((void *)this + 55))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v121);
        uint64_t v178 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v121);
        uint64_t v199 = *(void *)buf;
        uint64_t v179 = *(int **)(v178 + 16);
        if (v121 >= 1)
        {
          for (uint64_t m = 0; m != v121; ++m)
          {
            int v181 = v118 - 1;
            if ((int)v118 - 1 >= (int)m) {
              int v181 = m;
            }
            *(float *)&int v182 = *(float *)(*(void *)(v244 + 16) + 4 * m)
                            * *(float *)(*(void *)(v242 + 16) + 4 * v181);
            v179[m] = v182;
            unsigned int v183 = v247;
            unsigned int v184 = v246;
            *(float *)&int v185 = ldexp(1.0, v247 - v246) * *(float *)&v182;
            v179[m] = v185;
            float v188 = ldexp(1.0, v184 - v183) * *(float *)&v185;
            if (v188 < -127.0 || v188 > 255.0)
            {
              uint64_t v190 = Espresso::espresso_os_log_subsystem(v186, v187);
              if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
              {
                double v191 = *(float *)&v179[m];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v188;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v247;
                __int16 v249 = 1024;
                int v250 = v246;
                __int16 v251 = 2048;
                double v252 = v191;
                _os_log_error_impl(&dword_1920CB000, v190, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v121)
        {
          uint64_t v192 = v121;
          long long v193 = *(_WORD **)(v199 + 16);
          do
          {
            int v194 = *v179++;
            _S0 = v194;
            __asm { FCVT            H0, S0 }
            *v193++ = _S0;
            --v192;
          }
          while (v192);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v196 = v247;
    uint64_t v122 = v238;
    if (v118)
    {
      uint64_t v123 = *(int **)(v242 + 16);
      id v124 = *(_WORD **)(v238 + 16);
      do
      {
        int v125 = *v123++;
        _S0 = v125;
        __asm { FCVT            H0, S0 }
        *v124++ = _S0;
        --v119;
      }
      while (v119);
    }
    if (v120)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v121, 1, 1, 1);
      v201 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v198 = *(void *)buf;
      if (v121)
      {
        uint64_t v127 = v121;
        __int16 v128 = *(_WORD **)(*(void *)buf + 16);
        uint64_t v129 = *(int **)(v244 + 16);
        do
        {
          int v130 = *v129++;
          _S0 = v130;
          __asm { FCVT            H0, S0 }
          *v128++ = _S0;
          --v127;
        }
        while (v127);
      }
    }
    else
    {
      v201 = 0;
      uint64_t v198 = 0;
    }
    int v132 = *((unsigned __int8 *)a2 + 552);
    id v133 = (Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128);
    uint64_t v134 = v239;
    if (v239) {
      atomic_fetch_add_explicit(&v239->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v135 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v133, *(const unsigned __int8 **)(v122 + 16), *(int *)(v122 + 8));
    int v136 = v132;
    if (v134) {
      nitro::nitro_function::nitro_function(v134);
    }
    id obja = (id)objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v137 = (id)v212[5].__r_.__value_.__l.__size_;

      id obja = v137;
    }
    uint64_t v138 = objc_opt_new();
    std::string v139 = [NSNumber numberWithInt:v118];
    [v138 setObject:v139 forKeyedSubscript:@"ScaleCount"];

    uint64_t v140 = [NSNumber numberWithInt:v135];
    [v138 setObject:v140 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v141 = NSNumber;
    if (v136) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v143 = [v141 numberWithUnsignedLong:weights_file_index];
    }
    [v138 setObject:v143 forKeyedSubscript:@"ScaleIndex"];

    [v138 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    std::string::size_type v144 = [NSNumber numberWithInt:v246];
    [obja setObject:v144 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 55))
    {
      if (v201) {
        atomic_fetch_add_explicit(&v201->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v145 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v133, *(const unsigned __int8 **)(v198 + 16), *(int *)(v198 + 8));
      if (v201) {
        nitro::nitro_function::nitro_function(v201);
      }
      id v146 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 55) + 8)];
      [v138 setObject:v146 forKeyedSubscript:@"BiasCount"];

      uint64_t v147 = [NSNumber numberWithInt:v145];
      [v138 setObject:v147 forKeyedSubscript:@"BiasOffset"];

      uint64_t v148 = NSNumber;
      if (v136) {
        uint64_t v149 = 0;
      }
      else {
      std::vector<std::string> v150 = [v148 numberWithUnsignedLong:v149];
      }
      [v138 setObject:v150 forKeyedSubscript:@"BiasIndex"];

      [v138 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      unsigned int v151 = [NSNumber numberWithInt:v196];
      [obja setObject:v151 forKeyedSubscript:@"BiasShift"];
    }
    [obja setObject:v138 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    uint64_t v152 = v213;
    if (v213 == v212) {
      goto LABEL_183;
    }
    unint64_t v153 = v213 - 6;
    uint64_t v154 = HIBYTE(v213[-6].__r_.__value_.__r.__words[2]);
    char v155 = v154;
    std::string::size_type size = v213[-6].__r_.__value_.__l.__size_;
    if ((v154 & 0x80u) == 0) {
      std::string::size_type v157 = HIBYTE(v213[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v157 = v213[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v158 = HIBYTE(v250);
    if (v250 < 0) {
      uint64_t v158 = *(void *)&buf[8];
    }
    if (v157 != v158) {
      goto LABEL_177;
    }
    if (v250 >= 0) {
      float v159 = buf;
    }
    else {
      float v159 = *(unsigned __int8 **)buf;
    }
    if ((char)v154 < 0)
    {
      char v161 = (const std::string::value_type *)v153->__r_.__value_.__r.__words[0];
      if (memcmp(v153->__r_.__value_.__l.__data_, v159, v213[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_180;
      }
    }
    else if ((_BYTE)v154)
    {
      int v160 = v213 - 6;
      while (v160->__r_.__value_.__s.__data_[0] == *v159)
      {
        int v160 = (std::string *)((char *)v160 + 1);
        ++v159;
        if (!--v154) {
          goto LABEL_176;
        }
      }
      goto LABEL_177;
    }
LABEL_176:
    std::string::append(v152 - 6, "__@pre_scale_bias");
    char v155 = HIBYTE(v152[-6].__r_.__value_.__r.__words[2]);
LABEL_177:
    if ((v155 & 0x80) == 0)
    {
      long long v162 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v152[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v162;
      goto LABEL_181;
    }
    char v161 = v152[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v152[-6].__r_.__value_.__l.__size_;
LABEL_180:
    std::string::__init_copy_ctor_external(&__str, v161, size);
LABEL_181:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v253, &__str, &v270, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_183:
    int v163 = v257;
    float v257 = @"GOC";

    objc_storeStrong(&v258, obja);
    if (!*((unsigned char *)a2 + 121))
    {
      id v164 = v213;
      if ((unint64_t)v213 >= v214)
      {
        unint64_t v166 = 0x8E38E38E38E38E39 * (((char *)v213 - (char *)v212) >> 4);
        if (v166 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v167 = 0x1C71C71C71C71C72 * ((uint64_t)(v214 - (void)v212) >> 4);
        if (v167 <= v166 + 1) {
          unint64_t v167 = v166 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v214 - (void)v212) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v168 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v168 = v167;
        }
        *((void *)&v270 + 1) = &v214;
        if (v168) {
          unint64_t v168 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v168);
        }
        else {
          uint64_t v169 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v168;
        __str.__r_.__value_.__l.__size_ = v168 + 144 * v166;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v270 = v168 + 144 * v169;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v212, &__str);
        uint64_t v165 = v213;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v213, (uint64_t)buf);
        uint64_t v165 = v164 + 6;
      }
      char v213 = v165;
    }

    if (v255 < 0) {
      operator delete(v254);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v253;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v250) < 0) {
      operator delete(*(void **)buf);
    }

    if (v201) {
      nitro::nitro_function::nitro_function(v201);
    }
    if (v239) {
      nitro::nitro_function::nitro_function(v239);
    }
    if (v245) {
      nitro::nitro_function::nitro_function(v245);
    }
    if (v243) {
      nitro::nitro_function::nitro_function(v243);
    }
  }
  if (v114) {
    nitro::nitro_function::nitro_function(v114);
  }

  if (v264 < 0) {
    operator delete(v263);
  }
  *(void *)long long buf = v262;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v260;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if (v206) {
    nitro::nitro_function::nitro_function(v206);
  }
  nitro::nitro_function::nitro_function(v205);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 45) + 32))((char *)this + 360, a2, &v212);
  v259.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);

  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v217 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v217 + 1));
  }
  v259.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216[1] + 8;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
  v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v216;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
  nitro::nitro_function::nitro_function(v66);
  Espresso::kernel_info_t::~kernel_info_t((Espresso::kernel_info_t *)v220);
  v220[0] = &v229;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v220);
  v220[0] = &v232;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v220);
  v220[0] = &v235;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v220);
  if (v206) {
    nitro::nitro_function::nitro_function(v206);
  }
  if (v204) {
    nitro::nitro_function::nitro_function(v204);
  }
  nitro::nitro_function::nitro_function(v205);
}

void sub_192739828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  nitro::nitro_function::nitro_function(a15);
  STACK[0x270] = (unint64_t)&a22;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);

  if (a30 < 0) {
    operator delete(__p);
  }
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((Espresso::base_kernel::validate_for_engine_args_t *)&a32);
  nitro::nitro_function::nitro_function(v72);
  Espresso::kernel_info_t::~kernel_info_t((Espresso::kernel_info_t *)&a42);
  a42 = (uint64_t)&a70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  a42 = (uint64_t)&a72;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  a42 = (uint64_t)&STACK[0x200];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  if (a16)
  {
    nitro::nitro_function::nitro_function(a16);
    if (!a14)
    {
LABEL_7:
      if (!a15) {
LABEL_12:
      }
        _Unwind_Resume(a1);
LABEL_11:
      nitro::nitro_function::nitro_function(a15);
      goto LABEL_12;
    }
  }
  else if (!a14)
  {
    goto LABEL_7;
  }
  nitro::nitro_function::nitro_function(a14);
  if (!a15) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void std::__shared_ptr_emplace<Espresso::net_info_ir_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381D50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::net_info_ir_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::ANECompilerEngine::general_padding_kernel::reflective_padding_requires_transform(Espresso::ANECompilerEngine::general_padding_kernel *this)
{
  return 1;
}

BOOL Espresso::ANECompilerEngine::general_padding_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v112[2] = *MEMORY[0x1E4F143B8];
  if (*(void *)a3 == *(void *)(a3 + 8) || *(void *)(a3 + 24) == *(void *)(a3 + 32)) {
    return 0;
  }
  uint64_t v6 = *(long long **)(**(void **)(a3 + 48) + 224 * *(void *)(a3 + 72) + 136);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v68.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 8);
  unint64_t v61 = *(int64x2_t **)a2;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a3 + 48);
  long long v11 = *(std::__shared_weak_count **)(v10 + 80);
  if (v11 && (uint64_t v12 = std::__shared_weak_count::lock(v11)) != 0)
  {
    __n128 v13 = v12;
    char v14 = 0;
    uint64_t v15 = *(void *)(v10 + 72);
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    __n128 v13 = 0;
    uint64_t v15 = 0;
    char v14 = 1;
  }
  uint64_t v16 = *(void *)a3;
  uint64_t v17 = *(void *)(*(void *)a3 + 32);
  long long v18 = *(_OWORD *)(*(void *)a3 + 16);
  v81[0] = *(_OWORD *)*(void *)a3;
  v81[1] = v18;
  uint64_t v82 = v17;
  long long __p = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  unint64_t v66 = v9;
  uint64_t v63 = v13;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v86, (const Espresso::net *)v15, (const Espresso::layer_shape *)v81, 1);
  if (__p)
  {
    uint64_t v84 = __p;
    operator delete(__p);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if ((v14 & 1) == 0) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *(void *)(a3 + 24);
  uint64_t v20 = *(void *)(v19 + 32);
  long long v21 = *(_OWORD *)(v19 + 16);
  v75[0] = *(_OWORD *)v19;
  v75[1] = v21;
  uint64_t v76 = v20;
  unint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, *(const void **)(v19 + 40), *(void *)(v19 + 48), (uint64_t)(*(void *)(v19 + 48) - *(void *)(v19 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v80, (const Espresso::net *)v15, (const Espresso::layer_shape *)v75, 1);
  if (v77)
  {
    uint64_t v78 = v77;
    operator delete(v77);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v15 + 360), &v68))
  {
    unint64_t v97 = &v68;
    unint64_t v22 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v15 + 352), &v68, (uint64_t)&std::piecewise_construct, (long long **)&v97);
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)(v22 + 56);
    unint64_t v102 = 0;
    unsigned int v103 = 0;
    v101.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v101.__r_.__value_.__r.__words[2], *((const void **)v22 + 9), *((void *)v22 + 10), (uint64_t)(*((void *)v22 + 10) - *((void *)v22 + 9)) >> 2);
    if (LODWORD(v101.__r_.__value_.__r.__words[1]) == -1) {
      int v23 = 1;
    }
    else {
      int v23 = v101.__r_.__value_.__r.__words[1];
    }
    if (v101.__r_.__value_.__r.__words[2])
    {
      unint64_t v102 = v101.__r_.__value_.__r.__words[2];
      operator delete((void *)v101.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    int v23 = *(_DWORD *)(a3 + 64);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v15 + 472);
  char v64 = v65 = v14;
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v69, (NSString *)(a1 + 360), v64);
  if (*(_WORD *)(a1 + 280)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported padding mode.");
  }
  unint64_t v24 = *(unsigned __int16 *)(a1 + 282);
  if (v24 > 3) {
    std::string::size_type v25 = 0;
  }
  else {
    std::string::size_type v25 = *((void *)&off_1E5746EA0 + v24);
  }
  unint64_t v62 = (int64x2_t **)a2;
  if (v87 < 6)
  {
    if (*(unsigned char *)(v15 + 1281)) {
      BOOL v26 = v87 == 5;
    }
    else {
      BOOL v26 = 0;
    }
    uint64_t v27 = @"Channel";
    if (v26) {
      uint64_t v27 = @"Depth";
    }
    long long v59 = v27;
    unsigned int v60 = v23;
    if (v24 > 3) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *((void *)&off_1E5746EA0 + v24);
    }
    int v29 = *(__int16 *)(a1 + 298);
    int v30 = *(__int16 *)(a1 + 296);
    unsigned int v31 = *(__int16 *)(a1 + 292);
    unsigned int v32 = *(__int16 *)(a1 + 294);
    int v33 = *(__int16 *)(a1 + 288);
    int v34 = *(__int16 *)(a1 + 290);
    ANECPadLayerDescInitialize();
    unint64_t v102 = __PAIR64__(v32, v31);
    unsigned int v103 = @"Width";
    std::string::size_type v104 = v25;
    v105[0] = v33;
    v105[1] = v34;
    std::string::size_type v35 = 2;
    if (v30 | v29) {
      std::string::size_type v35 = 3;
    }
    v101.__r_.__value_.__r.__words[0] = v35;
    v101.__r_.__value_.__l.__size_ = (std::string::size_type)@"Height";
    v101.__r_.__value_.__r.__words[2] = v25;
    if (v30 | v29)
    {
      uint64_t v106 = v59;
      uint64_t v107 = v28;
      int v108 = v30;
      int v109 = v29;
    }
    int v36 = 0;
    if (!*(_WORD *)(a1 + 282)) {
      int v36 = *(_DWORD *)(a1 + 284);
    }
    int v111 = v36;
    ANECTensorDescInitialize();
    if (v60 < 8 && ((0x97u >> v60) & 1) != 0)
    {
      long long v40 = off_1E5746F00[v60];
      *(void *)&long long v41 = v86[3];
      *((void *)&v41 + 1) = v86[4];
      long long v99 = v41;
      unint64_t v97 = v40;
      uint64_t v100 = v86[2];
      *(void *)&long long v41 = v86[0];
      *((void *)&v41 + 1) = v86[1];
      long long v98 = v41;
      uint64_t v96 = 0;
      uint64_t v95 = 0;
      int v42 = ANECValidatePadLayer();
      if (v42)
      {
        uint64_t v43 = v96;
        uint64_t v44 = v95;
        memset(v93, 0, sizeof(v93));
        int v94 = 1065353216;
        if (v96)
        {
          uint64_t v45 = 0;
          long long v46 = (CFTypeRef *)(v95 + 8);
          do
          {
            uint64_t v47 = (unint64_t *)(v44 + 720 * v45);
            if (*v47)
            {
              unint64_t v48 = 0;
              uint64_t v49 = v46;
              do
              {
                std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)v93, v49, v49);
                ++v48;
                ++v49;
              }
              while (v48 < *v47);
            }
            ++v45;
            v46 += 90;
          }
          while (v45 != v43);
        }
        std::to_string(&v90, v42);
        long long v50 = std::string::insert(&v90, 0, "ANECValidatePadLayer check failed with status ");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        int64_t v52 = std::string::append(&v91, ". ");
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v88, (uint64_t)v93);
        if ((v89 & 0x80u) == 0) {
          uint64_t v54 = v88;
        }
        else {
          uint64_t v54 = (void **)v88[0];
        }
        if ((v89 & 0x80u) == 0) {
          std::string::size_type v55 = v89;
        }
        else {
          std::string::size_type v55 = (std::string::size_type)v88[1];
        }
        uint64_t v56 = std::string::append(&v92, (const std::string::value_type *)v54, v55);
        std::string::size_type v57 = (void *)v56->__r_.__value_.__r.__words[0];
        v112[0] = v56->__r_.__value_.__l.__size_;
        *(void *)((char *)v112 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
        char v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v71 = 0;
        *(void *)&v73[7] = *(void *)((char *)v112 + 7);
        int v72 = v57;
        *(void *)unint64_t v73 = v112[0];
        char v74 = v58;
        if ((char)v89 < 0) {
          operator delete(v88[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v93);
      }
      else
      {
        unsigned __int8 v71 = 1;
        std::string::basic_string[abi:ne180100]<0>(&v72, "");
      }
    }
    else
    {
      unsigned __int8 v71 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v72, "Input tensor format invalid.");
    }
  }
  else
  {
    unsigned __int8 v71 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v72, "Failed getting axis for 3rd padding dimension.");
  }
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  int v37 = v71;
  BOOL v8 = v71 != 0;
  if (!v71)
  {
    unint64_t v97 = v61;
    *(void *)&long long v98 = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v101, (long long *)&v72, a3, 1);
    Espresso::emit_kernel_validation_warning((int64x2_t **)&v97, (Espresso::base_kernel::validate_for_engine_warning_t *)&v101);
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
    *(void *)&v93[0] = v105;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
    *(void *)&v93[0] = &v102;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (v66) {
      nitro::nitro_function::nitro_function(v66);
    }
  }
  if (v74 < 0) {
    operator delete(v72);
  }

  if ((v65 & 1) == 0) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  if (!v37)
  {
    std::string::size_type v38 = v62[1];
    v67[0] = *v62;
    v67[1] = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v97, "General padding does not validate as standalone layer");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v101, (long long *)&v97, a3, 0);
    Espresso::emit_kernel_validation_warning(v67, (Espresso::base_kernel::validate_for_engine_warning_t *)&v101);
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
    *(void *)&v81[0] = v105;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v81);
    *(void *)&v81[0] = &v102;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v81);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v98) < 0) {
      operator delete(v97);
    }
    if (v38) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38);
    }
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_19273A50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, int a15, char a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a75);
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }

  if ((a16 & 1) == 0) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::general_padding_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::general_padding_kernel::~general_padding_kernel(Espresso::ANECompilerEngine::general_padding_kernel *this)
{
  *(void *)this = &unk_1EE3457F0;
  uint64_t v2 = (Espresso::ANECompilerEngine::general_padding_kernel *)((char *)this + 360);
  *((void *)this + 45) = &unk_1EE345958;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3457F0;
  uint64_t v2 = (Espresso::ANECompilerEngine::general_padding_kernel *)((char *)this + 360);
  *((void *)this + 45) = &unk_1EE345958;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::tensor_zero_pad_kernel::~tensor_zero_pad_kernel(Espresso::ANECompilerEngine::tensor_zero_pad_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::tensor_zero_pad_kernel *)((char *)this - 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::tensor_zero_pad_kernel *)((char *)this - 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::tensor_zero_pad_kernel::compile(Espresso::ANECompilerEngine::tensor_zero_pad_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::tensor_zero_pad_kernel::compile(Espresso::ANECompilerEngine::tensor_zero_pad_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

uint64_t Espresso::ANECompilerEngine::tensor_zero_pad_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(*(void *)(a3 + 48) + 80);
  if (v6) {
    long long v7 = std::__shared_weak_count::lock(v6);
  }
  else {
    long long v7 = 0;
  }
  uint64_t v8 = *(void *)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  if (*(void *)a3 == v9 || *(void *)(a3 + 24) == *(void *)(a3 + 32))
  {
LABEL_85:
    uint64_t v18 = 0;
    goto LABEL_86;
  }
  if (v9 - v8 != 64)
  {
    long long v11 = *a2;
    uint64_t v12 = a2[1];
    v52[0] = v11;
    v52[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: only one input is supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
    Espresso::emit_kernel_validation_warning(v52, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
    goto LABEL_52;
  }
  switch(*(_DWORD *)(v8 + 20))
  {
    case 0xFFFFFFFF:
      if (*(_DWORD *)(v8 + 16) == 1) {
        goto LABEL_9;
      }
      goto LABEL_17;
    case 1:
      if (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 292))
      {
        int v10 = 1;
        goto LABEL_38;
      }
      unint64_t v24 = *a2;
      uint64_t v12 = a2[1];
      v45[0] = v24;
      v45[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: no paddings in width/height");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
      Espresso::emit_kernel_validation_warning(v45, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
      goto LABEL_80;
    case 2:
      if (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 292) || *(_DWORD *)(a1 + 296) || *(_DWORD *)(a1 + 300))
      {
        int v10 = 2;
        goto LABEL_38;
      }
      uint64_t v28 = *a2;
      uint64_t v12 = a2[1];
      v44[0] = v28;
      v44[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: no paddings in width/height");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
      Espresso::emit_kernel_validation_warning(v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
      goto LABEL_80;
    case 3:
      if (*(_DWORD *)(a1 + 296) || *(_DWORD *)(a1 + 300) || *(_DWORD *)(a1 + 304) || *(_DWORD *)(a1 + 308))
      {
        int v10 = 3;
        goto LABEL_38;
      }
      uint64_t v27 = *a2;
      uint64_t v12 = a2[1];
      v43[0] = v27;
      v43[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: no paddings in width/height");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
      Espresso::emit_kernel_validation_warning(v43, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
      goto LABEL_80;
    case 4:
LABEL_9:
      if (*(_DWORD *)(a1 + 304) || *(_DWORD *)(a1 + 308) || *(_DWORD *)(a1 + 312) || *(_DWORD *)(a1 + 316))
      {
        int v10 = 4;
        goto LABEL_38;
      }
      std::string::size_type v25 = *a2;
      uint64_t v12 = a2[1];
      v42[0] = v25;
      v42[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: no paddings in width/height");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
      Espresso::emit_kernel_validation_warning(v42, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
      goto LABEL_80;
    case 5:
LABEL_17:
      if (!*(_DWORD *)(a1 + 312) && !*(_DWORD *)(a1 + 316) && !*(_DWORD *)(a1 + 320) && !*(_DWORD *)(a1 + 324))
      {
        BOOL v26 = *a2;
        uint64_t v12 = a2[1];
        v41[0] = v26;
        v41[1] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: no paddings in width/height");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
        Espresso::emit_kernel_validation_warning(v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
        goto LABEL_80;
      }
      int v10 = 5;
LABEL_38:
      if (*(unsigned char *)(a1 + 544)
        && (*(_DWORD *)(a1 + 288) && *(_DWORD *)(a1 + 292)
         || *(_DWORD *)(a1 + 296) && *(_DWORD *)(a1 + 300)
         || *(_DWORD *)(a1 + 304) && *(_DWORD *)(a1 + 308)
         || *(_DWORD *)(a1 + 312) && *(_DWORD *)(a1 + 316)
         || *(_DWORD *)(a1 + 320) && *(_DWORD *)(a1 + 324)))
      {
        char v14 = *a2;
        uint64_t v12 = a2[1];
        v39[0] = v14;
        v39[1] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: if pad_to_given_size_mode is True, only one pad value on a given dimension can be non-zero");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
        Espresso::emit_kernel_validation_warning(v39, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
LABEL_52:
        if (v51) {
          nitro::nitro_function::nitro_function(v51);
        }
        long long v53 = (void **)&v50;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v53);
        long long v53 = (void **)&v49;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v53);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
LABEL_81:
        if (v47 < 0) {
          operator delete((void *)v46);
        }
        if (v12) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
        }
        goto LABEL_85;
      }
      if (v10 == 5)
      {
        if (*(_DWORD *)(a1 + 288)
          || *(_DWORD *)(a1 + 292)
          || *(_DWORD *)(a1 + 296)
          || *(_DWORD *)(a1 + 300)
          || *(_DWORD *)(a1 + 304)
          || *(_DWORD *)(a1 + 308))
        {
          uint64_t v16 = *a2;
          uint64_t v12 = a2[1];
          v36[0] = v16;
          v36[1] = v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: only l/r/t/b padding is supported");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
          Espresso::emit_kernel_validation_warning(v36, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
          goto LABEL_80;
        }
      }
      else if (v10 == 4)
      {
        if (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 292) || *(_DWORD *)(a1 + 296) || *(_DWORD *)(a1 + 300))
        {
          uint64_t v17 = *a2;
          uint64_t v12 = a2[1];
          v37[0] = v17;
          v37[1] = v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: only l/r/t/b padding is supported");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
          Espresso::emit_kernel_validation_warning(v37, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
          goto LABEL_80;
        }
      }
      else if (v10 == 3 && (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 292)))
      {
        uint64_t v15 = *a2;
        uint64_t v12 = a2[1];
        v38[0] = v15;
        v38[1] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: only l/r/t/b padding is supported");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
        Espresso::emit_kernel_validation_warning(v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
LABEL_80:
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
        goto LABEL_81;
      }
      long long v20 = *(_OWORD *)(v8 + 16);
      uint64_t v21 = *(void *)(v8 + 32);
      v31[0] = *(_OWORD *)v8;
      v31[1] = v20;
      uint64_t v32 = v21;
      long long __p = 0;
      int v34 = 0;
      uint64_t v35 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v8 + 40), *(void *)(v8 + 48), (uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 2);
      Espresso::ANECompilerEngine::tensor_zero_pad_kernel::decomposition_to_general_padding(&v48, a1 + 280, (uint64_t)v31, a1 + 8, *(_DWORD *)(a3 + 64));
      if (__p)
      {
        int v34 = __p;
        operator delete(__p);
      }
      std::string::size_type v22 = v48.__r_.__value_.__r.__words[0];
      int v23 = (std::__shared_weak_count *)a2[1];
      int v29 = *a2;
      int v30 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = (*(uint64_t (**)(std::string::size_type, int64x2_t **, uint64_t))(*(void *)v22 + 200))(v22, &v29, a3);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (v48.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v48.__r_.__value_.__l.__size_);
      }
LABEL_86:
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      return v18;
    default:
      __n128 v13 = *a2;
      uint64_t v12 = a2[1];
      v40[0] = v13;
      v40[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v46, "tensor_zero_pad_kernel: rank < 1 or > 5 is not is supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, &v46, a3, 0);
      Espresso::emit_kernel_validation_warning(v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
      goto LABEL_52;
  }
}

void sub_19273AF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v19 - 184));
  if (*(char *)(v19 - 185) < 0) {
    operator delete(*(void **)(v19 - 208));
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::tensor_zero_pad_kernel::decomposition_to_general_padding(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v24 = a5;
  *a1 = 0;
  a1[1] = 0;
  long long v8 = *(_OWORD *)(a3 + 16);
  v18[0] = *(_OWORD *)a3;
  v18[1] = v8;
  uint64_t v9 = *(const void **)(a3 + 40);
  uint64_t v19 = *(void *)(a3 + 32);
  long long __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v9, *(void *)(a3 + 48), (uint64_t)(*(void *)(a3 + 48) - (void)v9) >> 2);
  Espresso::ANECompilerEngine::tensor_zero_pad_kernel::get_padding_params((uint64_t)v23, a2, (uint64_t)v18);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  Espresso::abstract_engine_factory::shared(&v15);
  uint64_t v10 = v15;
  std::string::basic_string[abi:ne180100]<0>(v13, "general_padding");
  int v12 = (***(uint64_t (****)(void))(*(void *)a4 + 8))(*(void *)(*(void *)a4 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a4, (uint64_t)v13, (uint64_t)v23, &v12);
  long long v11 = v17;
  long long v17 = 0uLL;
  *(_OWORD *)a1 = v11;
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_19273B1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::tensor_zero_pad_kernel::get_padding_params(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(result + 60) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)__n128 result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  switch(*(_DWORD *)(a3 + 20))
  {
    case 0xFFFFFFFF:
      if (*(_DWORD *)(a3 + 16) != 1) {
        goto LABEL_11;
      }
      goto LABEL_3;
    case 1:
      int v10 = *(_DWORD *)(a2 + 8);
      if (!*(unsigned char *)(a2 + 264))
      {
        *(_WORD *)(result + 8) = v10;
        int v17 = *(_DWORD *)(a2 + 12);
        goto LABEL_41;
      }
      if (v10 >= 1) {
        *(_WORD *)(result + 8) = v10 - *(_WORD *)a3;
      }
      int v6 = *(_DWORD *)(a2 + 12);
      goto LABEL_39;
    case 2:
      int v11 = *(_DWORD *)(a2 + 8);
      if (!*(unsigned char *)(a2 + 264))
      {
        *(_WORD *)(result + 12) = v11;
        int v20 = *(_DWORD *)(a2 + 16);
        *(_WORD *)(result + 14) = *(_DWORD *)(a2 + 12);
        *(_WORD *)(result + 8) = v20;
        int v17 = *(_DWORD *)(a2 + 20);
        goto LABEL_41;
      }
      if (v11 >= 1) {
        *(_WORD *)(result + 12) = v11 - *(_WORD *)(a3 + 4);
      }
      int v12 = *(_DWORD *)(a2 + 12);
      if (v12 >= 1) {
        *(_WORD *)(result + 14) = v12 - *(_WORD *)(a3 + 4);
      }
      int v13 = *(_DWORD *)(a2 + 16);
      if (v13 >= 1) {
        *(_WORD *)(result + 8) = v13 - *(_WORD *)a3;
      }
      int v6 = *(_DWORD *)(a2 + 20);
      goto LABEL_39;
    case 3:
      int v14 = *(_DWORD *)(a2 + 16);
      if (!*(unsigned char *)(a2 + 264))
      {
        *(_WORD *)(result + 12) = v14;
        int v21 = *(_DWORD *)(a2 + 24);
        *(_WORD *)(result + 14) = *(_DWORD *)(a2 + 20);
        *(_WORD *)(result + 8) = v21;
        int v17 = *(_DWORD *)(a2 + 28);
        goto LABEL_41;
      }
      if (v14 >= 1) {
        *(_WORD *)(result + 12) = v14 - *(_WORD *)(a3 + 4);
      }
      int v15 = *(_DWORD *)(a2 + 20);
      if (v15 >= 1) {
        *(_WORD *)(result + 14) = v15 - *(_WORD *)(a3 + 4);
      }
      int v16 = *(_DWORD *)(a2 + 24);
      if (v16 >= 1) {
        *(_WORD *)(result + 8) = v16 - *(_WORD *)a3;
      }
      int v6 = *(_DWORD *)(a2 + 28);
      goto LABEL_39;
    case 4:
LABEL_3:
      int v3 = *(_DWORD *)(a2 + 24);
      if (!*(unsigned char *)(a2 + 264))
      {
        *(_WORD *)(result + 12) = v3;
        int v18 = *(_DWORD *)(a2 + 32);
        *(_WORD *)(result + 14) = *(_DWORD *)(a2 + 28);
        *(_WORD *)(result + 8) = v18;
        int v17 = *(_DWORD *)(a2 + 36);
        goto LABEL_41;
      }
      if (v3 >= 1) {
        *(_WORD *)(result + 12) = v3 - *(_WORD *)(a3 + 4);
      }
      int v4 = *(_DWORD *)(a2 + 28);
      if (v4 >= 1) {
        *(_WORD *)(result + 14) = v4 - *(_WORD *)(a3 + 4);
      }
      int v5 = *(_DWORD *)(a2 + 32);
      if (v5 >= 1) {
        *(_WORD *)(result + 8) = v5 - *(_WORD *)a3;
      }
      int v6 = *(_DWORD *)(a2 + 36);
      goto LABEL_39;
    case 5:
LABEL_11:
      int v7 = *(_DWORD *)(a2 + 32);
      if (!*(unsigned char *)(a2 + 264))
      {
        *(_WORD *)(result + 12) = v7;
        int v19 = *(_DWORD *)(a2 + 40);
        *(_WORD *)(result + 14) = *(_DWORD *)(a2 + 36);
        *(_WORD *)(result + 8) = v19;
        int v17 = *(_DWORD *)(a2 + 44);
        goto LABEL_41;
      }
      if (v7 >= 1) {
        *(_WORD *)(result + 12) = v7 - *(_WORD *)(a3 + 4);
      }
      int v8 = *(_DWORD *)(a2 + 36);
      if (v8 >= 1) {
        *(_WORD *)(result + 14) = v8 - *(_WORD *)(a3 + 4);
      }
      int v9 = *(_DWORD *)(a2 + 40);
      if (v9 >= 1) {
        *(_WORD *)(result + 8) = v9 - *(_WORD *)a3;
      }
      int v6 = *(_DWORD *)(a2 + 44);
LABEL_39:
      if (v6 >= 1)
      {
        int v17 = v6 - *(_DWORD *)a3;
LABEL_41:
        *(_WORD *)(result + 10) = v17;
      }
      return result;
    default:
      return result;
  }
}

void Espresso::ANECompilerEngine::tensor_zero_pad_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::tensor_zero_pad_kernel::~tensor_zero_pad_kernel(Espresso::ANECompilerEngine::tensor_zero_pad_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::tensor_zero_pad_kernel *)((char *)this + 552));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::tensor_zero_pad_kernel *)((char *)this + 552));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::upsample_kernel::~upsample_kernel(Espresso::ANECompilerEngine::upsample_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::upsample_kernel *)((char *)this - 352);
  *((void *)this - 44) = &unk_1EE341240;
  *(void *)this = &unk_1EE3413A0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::upsample_kernel *)((char *)this - 352);
  *((void *)this - 44) = &unk_1EE341240;
  *(void *)this = &unk_1EE3413A0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::upsample_kernel::compile(Espresso::ANECompilerEngine::upsample_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::upsample_kernel::compile(Espresso::ANECompilerEngine::upsample_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v37 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0)
  {
    int v34 = "Inconsistent state: null network";
    goto LABEL_70;
  }
  if (!*(void *)(v7 + 576))
  {
    int v34 = "Inconsistent state: blob_storage";
LABEL_70:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v34);
  }
  v38[0] = a3[6];
  int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v38[0], (long long **)v38);
  int v10 = (const void *)*((void *)v8 + 5);
  int v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v36 = v9;
  v38[0] = a3;
  int v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)v38)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v11;
  if (*((unsigned char *)this + 304))
  {
    float v12 = *((float *)this + 77);
    float v13 = *((float *)this + 78);
  }
  else
  {
    float v12 = (float)*((int *)this + 71);
    float v13 = (float)*((int *)this + 72);
  }
  int v14 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  uint64_t v50 = 0;
  long long v51 = 0;
  unint64_t v52 = 0;
  if (v10) {
  else
  }
    int v15 = 0;
  Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step((uint64_t)v47, (uint64_t)this, v14, (uint64_t)v15 + 160, *((_DWORD *)this + 146), v12, v13);
  if (v47[0]) {
    goto LABEL_43;
  }
  if ((Espresso::ANECompilerEngine::upsample_kernel::needs_nearest_pow2_workaround(this, (NSString *)v14) & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Workaround is needed but it is not available");
  }
  if (!Espresso::ANECompilerEngine::upsample_kernel::needs_nearest_pow2_workaround(this, (NSString *)v14))
  {
LABEL_43:
    BOOL v26 = Espresso::ANECompilerEngine::upsample_kernel::create_anec_unit(this, v12, v13);
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v38, a3);
    uint64_t v27 = v45;
    uint64_t v45 = @"Resize";

    objc_storeStrong(v46, v26);
    uint64_t v28 = v51;
    if ((unint64_t)v51 >= v52)
    {
      unint64_t v30 = 0x8E38E38E38E38E39 * (((uint64_t)v51 - v50) >> 4);
      if (v30 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v31 = 0x1C71C71C71C71C72 * ((uint64_t)(v52 - v50) >> 4);
      if (v31 <= v30 + 1) {
        unint64_t v31 = v30 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v52 - v50) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v32 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v32 = v31;
      }
      std::string::size_type v57 = &v52;
      if (v32) {
        unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v32);
      }
      else {
        uint64_t v33 = 0;
      }
      long long v53 = (void **)v32;
      uint64_t v54 = (std::string *)(v32 + 144 * v30);
      std::string::size_type v55 = v54;
      unint64_t v56 = v32 + 144 * v33;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v54, (uint64_t)v38);
      v55 += 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v50, &v53);
      int v29 = v51;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v53);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v51, (uint64_t)v38);
      int v29 = v28 + 6;
    }
    long long v51 = v29;

    if (v43 < 0) {
      operator delete(__p);
    }
    long long v53 = (void **)v41;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v53);
    long long v53 = (void **)v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v53);
    if (v39 < 0) {
      operator delete(v38[0]);
    }
  }
  else
  {
    int v16 = (int)v12;
    if ((int)v12 >= 2)
    {
      do
      {
        if ((v16 & 3) != 0)
        {
          if (v16)
          {
            int v17 = 0;
            goto LABEL_25;
          }
          int v17 = Espresso::ANECompilerEngine::upsample_kernel::create_anec_unit(this, 2.0, 2.0);
          char v18 = 1;
        }
        else
        {
          int v17 = Espresso::ANECompilerEngine::upsample_kernel::create_anec_unit(this, 4.0, 4.0);
          char v18 = 2;
        }
        int v16 = v16 >> v18;
LABEL_25:
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v38, a3);
        int v19 = v45;
        uint64_t v45 = @"Resize";

        objc_storeStrong(v46, v17);
        int v20 = v51;
        if ((unint64_t)v51 >= v52)
        {
          unint64_t v22 = 0x8E38E38E38E38E39 * (((uint64_t)v51 - v50) >> 4);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(v52 - v50) >> 4) > v23) {
            unint64_t v23 = 0x1C71C71C71C71C72 * ((uint64_t)(v52 - v50) >> 4);
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v52 - v50) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v24 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v24 = v23;
          }
          std::string::size_type v57 = &v52;
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          long long v53 = (void **)v24;
          uint64_t v54 = (std::string *)(v24 + 144 * v22);
          std::string::size_type v55 = v54;
          unint64_t v56 = v24 + 144 * v25;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v54, (uint64_t)v38);
          v55 += 6;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v50, &v53);
          int v21 = v51;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v53);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v51, (uint64_t)v38);
          int v21 = v20 + 6;
        }
        long long v51 = v21;

        if (v43 < 0) {
          operator delete(__p);
        }
        long long v53 = (void **)v41;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v53);
        long long v53 = (void **)v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v53);
        if (v39 < 0) {
          operator delete(v38[0]);
        }
      }
      while (v16 > 1);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 44) + 32))((char *)this + 352, a2, &v50);
  if (v49 < 0) {
    operator delete(v48);
  }
  v38[0] = &v50;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);

  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  nitro::nitro_function::nitro_function(v37);
}

void sub_19273BBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v41 - 144);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a16);

  if (a40 < 0) {
    operator delete(__p);
  }
  a16 = v41 - 168;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);

  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::upsample_kernel::needs_nearest_pow2_workaround(Espresso::ANECompilerEngine::upsample_kernel *this, NSString *a2)
{
  uint64_t result = Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)a2, a2);
  if (result)
  {
    if (*((unsigned char *)this + 304)) {
      return 0;
    }
    *(float *)v4.i32 = (float)*((int *)this + 71);
    return (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_f32((float32x4_t)vdupq_lane_s32(v4, 0), (float32x4_t)xmmword_192DCA360))) & 1) != 0
        && *(float *)v4.i32 == (float)*((int *)this + 72)
        && *((_DWORD *)this + 73) == 0;
  }
  return result;
}

id Espresso::ANECompilerEngine::upsample_kernel::create_anec_unit(Espresso::ANECompilerEngine::upsample_kernel *this, float a2, float a3)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  int v6 = objc_opt_new();
  *(float *)&double v7 = a2;
  int v8 = [NSNumber numberWithFloat:v7];
  [v6 setObject:v8 forKeyedSubscript:@"ScaleFactorX"];

  *(float *)&double v9 = a3;
  int v10 = [NSNumber numberWithFloat:v9];
  [v6 setObject:v10 forKeyedSubscript:@"ScaleFactorY"];

  int v11 = objc_opt_new();
  [v11 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  if (*((_DWORD *)this + 73)) {
    float v12 = @"Linear";
  }
  else {
    float v12 = @"NearestNeighbor";
  }
  [v11 setObject:v12 forKeyedSubscript:@"SamplingMethod"];
  float v13 = objc_opt_new();
  [v13 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  if (*((_DWORD *)this + 73)) {
    int v14 = @"Linear";
  }
  else {
    int v14 = @"NearestNeighbor";
  }
  [v13 setObject:v14 forKeyedSubscript:@"SamplingMethod"];
  v27[0] = v11;
  v27[1] = v13;
  int v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:2];
  [v6 setObject:v15 forKeyedSubscript:@"SamplingMethodInfo"];
  int v16 = *((_DWORD *)this + 73);
  if (v16)
  {
    if (*((_DWORD *)this + 75) == 1)
    {
      int v17 = objc_opt_new();
      char v18 = objc_opt_new();
      [v17 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
      [v18 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
      [v18 setObject:@"Default" forKeyedSubscript:@"SamplingGridMode"];
      [v17 setObject:@"Default" forKeyedSubscript:@"SamplingGridMode"];
      v25[0] = v17;
      v25[1] = v18;
      int v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:2];
      [v6 setObject:v19 forKeyedSubscript:@"SamplingGridInfo"];
    }
    else
    {
      if (v16 != 1) {
        goto LABEL_27;
      }
      int v17 = objc_opt_new();
      char v18 = objc_opt_new();
      [v17 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
      [v18 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
      if (*((_DWORD *)this + 74)) {
        int v21 = @"AlignedCorners";
      }
      else {
        int v21 = @"UnalignedCorners";
      }
      [v17 setObject:v21 forKeyedSubscript:@"SamplingGridMode"];
      if (*((_DWORD *)this + 74)) {
        unint64_t v22 = @"AlignedCorners";
      }
      else {
        unint64_t v22 = @"UnalignedCorners";
      }
      [v18 setObject:v22 forKeyedSubscript:@"SamplingGridMode"];
      v24[0] = v17;
      v24[1] = v18;
      int v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:2];
      [v6 setObject:v19 forKeyedSubscript:@"SamplingGridInfo"];
    }
  }
  else
  {
    int v17 = objc_opt_new();
    char v18 = objc_opt_new();
    if (a2 == 2.0 && a3 == 2.0 || a2 == 3.0 && a3 == 3.0 || a2 == 4.0 && a3 == 4.0)
    {
      int v20 = @"UnalignedCorners";
      [v17 setObject:@"UnalignedCorners" forKeyedSubscript:@"SamplingGridMode"];
    }
    else if (*((unsigned char *)this + 316))
    {
      int v20 = @"OffsetDefault";
      [v17 setObject:@"OffsetDefault" forKeyedSubscript:@"SamplingGridMode"];
    }
    else
    {
      int v20 = @"OffsetDefaultWithNominalScale";
      [v17 setObject:@"OffsetDefaultWithNominalScale" forKeyedSubscript:@"SamplingGridMode"];
    }
    [v18 setObject:v20 forKeyedSubscript:@"SamplingGridMode"];
    [v17 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
    [v18 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
    v26[0] = v17;
    v26[1] = v18;
    int v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:2];
    [v6 setObject:v19 forKeyedSubscript:@"SamplingGridInfo"];
  }

LABEL_27:

  return v6;
}

void sub_19273C1F0(_Unwind_Exception *a1)
{
  int v8 = v7;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECResizeLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    double v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      int v8 = (unint64_t *)(a3 + 664 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        int v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 83;
    }
    while (v6 != a2);
  }
}

void sub_19273C388(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::upsample_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::upsample_kernel::~upsample_kernel(Espresso::ANECompilerEngine::upsample_kernel *this)
{
  *(void *)this = &unk_1EE341240;
  uint64_t v2 = (Espresso::ANECompilerEngine::upsample_kernel *)((char *)this + 352);
  *((void *)this + 44) = &unk_1EE3413A0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341240;
  uint64_t v2 = (Espresso::ANECompilerEngine::upsample_kernel *)((char *)this + 352);
  *((void *)this + 44) = &unk_1EE3413A0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::load_constant_kernel::~load_constant_kernel(Espresso::ANECompilerEngine::load_constant_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::load_constant_kernel *)((char *)this - 384);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_load_constant_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::load_constant_kernel *)((char *)this - 384);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::load_constant_kernel::compile(Espresso::ANECompilerEngine::load_constant_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
}

void Espresso::ANECompilerEngine::load_constant_kernel::compile(Espresso::ANECompilerEngine::load_constant_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 43);
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing constant_blob for load_constant");
  }
  uint64_t v60 = 0;
  unint64_t v61 = 0;
  v46[0] = 0;
  v46[1] = 0;
  (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v4 + 40))(v4, v46, &v60);
  if (v46[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v46[1]);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)v58, *((void *)a2 + 4) + 120 * SLODWORD(a3[3].__r_.__value_.__l.__data_) + 56);
  double v7 = v59;
  if (v59)
  {
    char v8 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (v8 >= 0) {
      size_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = a3->__r_.__value_.__l.__size_;
    }
    if (v8 >= 0) {
      int v10 = a3;
    }
    else {
      int v10 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    do
    {
      uint64_t v11 = *((unsigned __int8 *)v7 + 39);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *((unsigned __int8 *)v7 + 39);
      }
      else {
        uint64_t v12 = v7[3];
      }
      if (v12 == size)
      {
        float v13 = (const void **)(v7 + 2);
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*v13, v10, v7[3]))
          {
LABEL_31:
            std::string::size_type v57 = 0;
            long long __str = 0u;
            long long __str_16 = 0u;
            unint64_t v22 = v46;
            std::string::basic_string[abi:ne180100]((uint64_t)v46, size + 17);
            if (v47 < 0) {
              unint64_t v22 = (void **)v46[0];
            }
            if (size)
            {
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v23 = a3;
              }
              else {
                unint64_t v23 = (std::string *)a3->__r_.__value_.__r.__words[0];
              }
              memmove(v22, v23, size);
            }
            strcpy((char *)v22 + size, "___constoutput___");
            if (SBYTE7(__str_16) < 0) {
              operator delete((void *)__str);
            }
            long long __str = *(_OWORD *)v46;
            *(void *)&long long __str_16 = v47;
            uint64_t v25 = v60;
            unint64_t v24 = v61;
            if (v61) {
              atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            BOOL v26 = v57;
            *((void *)&__str_16 + 1) = v25;
            std::string::size_type v57 = v24;
            if (v26) {
              nitro::nitro_function::nitro_function(v26);
            }
            if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v27 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v27 = a3->__r_.__value_.__l.__size_;
            }
            uint64_t v28 = &v64;
            std::string::basic_string[abi:ne180100]((uint64_t)&v64, v27 + 17);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v28 = (std::string *)v64.__r_.__value_.__r.__words[0];
            }
            if (v27)
            {
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v29 = a3;
              }
              else {
                int v29 = (std::string *)a3->__r_.__value_.__r.__words[0];
              }
              memmove(v28, v29, v27);
            }
            strcpy((char *)v28 + v27, "___constoutput___");
            unint64_t v30 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a2 + 272, &v43, &v64);
            unint64_t v31 = (char *)*v30;
            if (!*v30)
            {
              unint64_t v32 = (uint64_t **)v30;
              unint64_t v31 = (char *)operator new(0x60uLL);
              v46[1] = (char *)a2 + 280;
              *(std::string *)(v31 + 32) = v64;
              memset(&v64, 0, sizeof(v64));
              *(_OWORD *)(v31 + 56) = 0u;
              *(_OWORD *)(v31 + 72) = 0u;
              *((void *)v31 + 11) = 0;
              LOBYTE(v47) = 1;
              std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a2 + 34, (uint64_t)v43, v32, (uint64_t *)v31);
              v46[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v46);
            }
            std::string::operator=((std::string *)(v31 + 56), (const std::string *)&__str);
            uint64_t v34 = *((void *)&__str_16 + 1);
            uint64_t v33 = v57;
            if (v57) {
              atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v35 = (std::__shared_weak_count *)*((void *)v31 + 11);
            *((void *)v31 + 10) = v34;
            *((void *)v31 + 11) = v33;
            if (v35) {
              nitro::nitro_function::nitro_function(v35);
            }
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v64.__r_.__value_.__l.__data_);
            }
            int v36 = objc_opt_new();
            int v37 = [NSNumber numberWithShort:15360];
            [v36 setObject:v37 forKeyedSubscript:@"ScaleScalar"];

            std::string::size_type v38 = [NSNumber numberWithShort:0];
            [v36 setObject:v38 forKeyedSubscript:@"BiasScalar"];

            [v36 removeObjectForKey:@"BiasScaleGroupData"];
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v46, (id *)&a3->__r_.__value_.__l.__data_);
            if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v39 = a3->__r_.__value_.__l.__size_;
            }
            long long v40 = &v64;
            std::string::basic_string[abi:ne180100]((uint64_t)&v64, v39 + 17);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v40 = (std::string *)v64.__r_.__value_.__r.__words[0];
            }
            if (v39)
            {
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v41 = a3;
              }
              else {
                uint64_t v41 = (std::string *)a3->__r_.__value_.__r.__words[0];
              }
              memmove(v40, v41, v39);
            }
            strcpy((char *)v40 + v39, "___constoutput___");
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v49, &v64, &v65, 1uLL);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v64.__r_.__value_.__l.__data_);
            }
            int v42 = v53;
            long long v53 = @"GOC";

            objc_storeStrong(v54, v36);
            Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v64, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v46);
            uint64_t v69 = v53;
            id v70 = v54[0];
            id v71 = v54[1];
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v43 = 0;
            unint64_t v62 = (void **)&v43;
            char v63 = 0;
            char v43 = (char *)operator new(0x90uLL);
            uint64_t v44 = (uint64_t)v43;
            uint64_t v45 = v43 + 144;
            uint64_t v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v45, (uint64_t)&v64, (uint64_t)&v72, (uint64_t)v43);

            if (v67 < 0) {
              operator delete(v66[4]);
            }
            unint64_t v62 = v66;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v62);
            unint64_t v62 = (void **)&v65;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v62);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v64.__r_.__value_.__l.__data_);
            }
            (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, char **))(*((void *)this + 48)
                                                                                             + 32))((char *)this + 384, a2, &v43);
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);

            if (v51 < 0) {
              operator delete(__p);
            }
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            if (SHIBYTE(v47) < 0) {
              operator delete(v46[0]);
            }

            goto LABEL_83;
          }
        }
        else
        {
          if (!*((unsigned char *)v7 + 39)) {
            goto LABEL_31;
          }
          int v14 = v10;
          while (*(unsigned __int8 *)v13 == v14->__r_.__value_.__s.__data_[0])
          {
            float v13 = (const void **)((char *)v13 + 1);
            int v14 = (std::string *)((char *)v14 + 1);
            if (!--v11) {
              goto LABEL_31;
            }
          }
        }
      }
      double v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  std::string::size_type v57 = 0;
  long long __str = 0u;
  long long __str_16 = 0u;
  std::string::operator=((std::string *)&__str, a3);
  uint64_t v16 = v60;
  int v15 = v61;
  if (v61) {
    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = v57;
  *((void *)&__str_16 + 1) = v16;
  std::string::size_type v57 = v15;
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  v46[0] = a3;
  char v18 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, a3, (long long **)v46);
  std::string::operator=((std::string *)(v18 + 56), (const std::string *)&__str);
  uint64_t v20 = *((void *)&__str_16 + 1);
  int v19 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v21 = (std::__shared_weak_count *)*((void *)v18 + 11);
  *((void *)v18 + 10) = v20;
  *((void *)v18 + 11) = v19;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
LABEL_83:
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (SBYTE7(__str_16) < 0) {
    operator delete((void *)__str);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v58);
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
}

void sub_19273CC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  *(void *)(v41 - 216) = v39;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 216));
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a15);

  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a33);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a39);
  char v43 = *(std::__shared_weak_count **)(v41 - 240);
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  int v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x60uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    char v8 = (std::string *)(v6 + 32);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((void *)v6 + 11) = 0;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19273CDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

const char *Espresso::generic_load_constant_kernel::kernel_type_str(Espresso::generic_load_constant_kernel *this)
{
  return "load_constant";
}

uint64_t Espresso::ANECompilerEngine::load_constant_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if ((Espresso::generic_load_constant_kernel::supports_weight_key(a1, a2) & 1) != 0
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

void Espresso::ANECompilerEngine::load_constant_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_load_constant_kernel::__set_weight_raw_blob((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
  (*(void (**)(long long *__return_ptr, void *))(a1[48] + 128))(v17, a1 + 48);
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  v16[0] = a1[1];
  v16[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(a1[48] + 136))(a1 + 48);
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, v12, a3, (char *)a4, a5, a6, a1 + 41, v17, v16, v12, 1);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 48, (uint64_t *)a3, a4, a5);
}

void sub_19273D034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::load_constant_kernel::~load_constant_kernel(Espresso::ANECompilerEngine::load_constant_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::load_constant_kernel *)((char *)this + 384));
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::load_constant_kernel *)((char *)this + 384));

  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::crop_kernel::~crop_kernel(Espresso::ANECompilerEngine::crop_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::crop_kernel *)((char *)this - 296);
  *((void *)this - 37) = &unk_1EE33E8E0;
  *(void *)this = &unk_1EE33EA40;
  int v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::crop_kernel *)((char *)this - 296);
  *((void *)this - 37) = &unk_1EE33E8E0;
  *(void *)this = &unk_1EE33EA40;
  int v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::crop_kernel::compile(Espresso::ANECompilerEngine::crop_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::crop_kernel::compile(Espresso::ANECompilerEngine::crop_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (double v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  *(void *)&long long v59 = *((void *)a3 + 6);
  long long v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v59, (long long **)&v59);
  uint64_t v12 = *((void *)v10 + 5);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v59 = a3;
  __n128 v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)&v59);
  uint64_t v14 = *((void *)v13 + 5);
  int32x2_t v15 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v66 = _D0;
  long long v68 = 0uLL;
  __int16 v69 = 0;
  uint64_t v70 = 0x1000100010001;
  int v83 = 0;
  char v84 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  long long v59 = 0uLL;
  uint64_t v61 = 0;
  uint64_t v62 = 1;
  int v71 = 0;
  uint64_t v72 = 0;
  uint64_t v76 = 0;
  __int16 v78 = 1;
  __int16 v77 = 0;
  uint64_t v60 = 0;
  int v81 = 0;
  __int16 v82 = 1;
  long long v65 = xmmword_192DCA370;
  __int16 v67 = 0;
  int16x4_t v21 = vsub_s16((int16x4_t)0x1000100010001, vmovn_s32(*(int32x4_t *)((char *)this + 280)));
  *(int16x4_t *)((char *)&v68 + 6) = v21;
  int v22 = *(_DWORD *)(v12 + 16);
  int v75 = 1;
  int v73 = 0;
  int v74 = v22;
  uint64_t v23 = *(unsigned int *)(v14 + 16);
  int v63 = *(_DWORD *)(v14 + 16);
  int v64 = v22;
  uint64_t v24 = *((void *)this + 64);
  if (v24)
  {
    int16x4_t v47 = v21;
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v24 + 384))(v24) + 48) == 3
      && *(_DWORD *)((*(uint64_t (**)(void))(**((void **)this + 64) + 384))(*((void *)this + 64)) + 52) == 3
      && *(unsigned __int16 *)((*(uint64_t (**)(void))(**((void **)this + 64) + 384))(*((void *)this + 64))
                             + 80) == v47.u16[0]
      && *(unsigned __int16 *)((*(uint64_t (**)(void))(**((void **)this + 64) + 384))(*((void *)this + 64))
                             + 82) == v47.u16[1]
      && *(unsigned __int16 *)((*(uint64_t (**)(void))(**((void **)this + 64) + 384))(*((void *)this + 64))
                             + 84) == v47.u16[2]
      && *(unsigned __int16 *)((*(uint64_t (**)(void))(**((void **)this + 64) + 384))(*((void *)this + 64))
                             + 86) == v47.u16[3]
      && *(_DWORD *)((*(uint64_t (**)(void))(**((void **)this + 64) + 384))(*((void *)this + 64)) + 116) == v22)
    {
LABEL_19:
      uint64_t v26 = *((void *)this + 64);
      if (v26) {
        goto LABEL_52;
      }
      goto LABEL_20;
    }
    uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 65);
    *((_OWORD *)this + 32) = 0u;
    if (v25)
    {
      nitro::nitro_function::nitro_function(v25);
      goto LABEL_19;
    }
  }
LABEL_20:
  std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,std::allocator<Espresso::ANECompilerEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>(&v58, (uint64_t *)this + 1, &v59);
  uint64_t v27 = v58;
  uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 65);
  *((_OWORD *)this + 32) = v58;
  if (v28)
  {
    nitro::nitro_function::nitro_function(v28);
    uint64_t v29 = *((void *)this + 64);
  }
  else
  {
    uint64_t v29 = v27;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v29 + 472))(&v58);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 64) + 488))(&v56);
  if ((int)v23 >= 1)
  {
    uint64_t v30 = 0;
    int v31 = 0;
    uint64_t v32 = *(void *)(v56 + 16);
    do
    {
      int v33 = 0;
      *(_DWORD *)(v32 + 4 * v30) = 0;
      uint64_t v34 = *(void *)(v58 + 24);
      do
      {
        uint64_t v35 = v34 + 4 * (v31 + v33);
        *(_DWORD *)uint64_t v35 = 0;
        if (v33 == 3) {
          float v36 = 1.0;
        }
        else {
          float v36 = 0.0;
        }
        *(float *)(v35 + 4) = v36;
        *(_DWORD *)(v35 + 8) = 0;
        v33 += 3;
      }
      while (v33 != 9);
      v31 += 9;
      ++v30;
    }
    while (v30 != v23);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v54, v58 + 8);
  uint64_t v37 = 0;
  std::string::size_type v38 = *(int **)(v58 + 24);
  uint64_t v39 = v54;
  long long v40 = *(_WORD **)(v54 + 24);
  uint64_t v41 = *(int *)(v58 + 8);
  do
  {
    v41 *= *(int *)(v58 + 12 + v37);
    v37 += 4;
  }
  while (v37 != 12);
  for (; v41; --v41)
  {
    int v42 = *v38++;
    _S0 = v42;
    __asm { FCVT            H0, S0 }
    *v40++ = _S0;
  }
  uint64_t v44 = *((void *)this + 64);
  uint64_t v45 = v55;
  uint64_t v52 = v39;
  long long v53 = v55;
  if (v55) {
    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v50 = 0;
  char v51 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v44 + 544))(v44, &v52, &v50);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  uint64_t v46 = *((void *)this + 64);
  uint64_t v48 = v56;
  std::vector<std::string> v49 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v46 + 392))(v46, &v48);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (*((void *)&v58 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v58 + 1));
  }
  uint64_t v26 = *((void *)this + 64);
LABEL_52:
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *))(*(void *)v26 + 624))(v26, a2, a3);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_19273D80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22)
  {
    nitro::nitro_function::nitro_function(a22);
    if (!v24)
    {
LABEL_9:
      if (!v23) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  else if (!v24)
  {
    goto LABEL_9;
  }
  nitro::nitro_function::nitro_function(v24);
  if (!v23)
  {
LABEL_10:
    if (!v22) {
LABEL_16:
    }
      _Unwind_Resume(exception_object);
LABEL_15:
    nitro::nitro_function::nitro_function(v22);
    goto LABEL_16;
  }
LABEL_14:
  nitro::nitro_function::nitro_function(v23);
  if (!v22) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384F30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::ANECompilerEngine::crop_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, void *a3)
{
  int v5 = (void *)a3[6];
  if (*(void *)(*v5 + 224 * a3[9] + 144) - *(void *)(*v5 + 224 * a3[9] + 136) != 24)
  {
    long long v10 = a2[1];
    v57[0] = *a2;
    v57[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v50, "ANE crop kernel doesn't support more than 1 input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, &v50, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v57, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
    if (v56) {
      nitro::nitro_function::nitro_function(v56);
    }
    v44[0] = (void **)v55;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v44);
    v44[0] = (void **)v54;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v44);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (v52 < 0) {
      operator delete((void *)v50);
    }
    if (v10) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v10);
    }
    return 0;
  }
  double v7 = (std::__shared_weak_count *)v5[10];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = (const Espresso::net *)v5[9];
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v11 = *a3;
  uint64_t v12 = *(void *)(*a3 + 32);
  long long v13 = *(_OWORD *)(*a3 + 16);
  v45[0] = *(_OWORD *)*a3;
  v45[1] = v13;
  uint64_t v46 = v12;
  long long __p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v11 + 40), *(void *)(v11 + 48), (uint64_t)(*(void *)(v11 + 48) - *(void *)(v11 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v50, v9, (const Espresso::layer_shape *)v45, 1);
  if (__p)
  {
    uint64_t v48 = __p;
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v14 = a3[6];
  int32x2_t v15 = *(std::__shared_weak_count **)(v14 + 80);
  if (v15)
  {
    uint64_t v16 = std::__shared_weak_count::lock(v15);
    if (v16) {
      int v17 = *(const Espresso::net **)(v14 + 72);
    }
    else {
      int v17 = 0;
    }
  }
  else
  {
    int v17 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v18 = a3[3];
  uint64_t v19 = *(void *)(v18 + 32);
  long long v20 = *(_OWORD *)(v18 + 16);
  v39[0] = *(_OWORD *)v18;
  v39[1] = v20;
  uint64_t v40 = v19;
  uint64_t v41 = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v41, *(const void **)(v18 + 40), *(void *)(v18 + 48), (uint64_t)(*(void *)(v18 + 48) - *(void *)(v18 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v44, v17, (const Espresso::layer_shape *)v39, 1);
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  int v21 = a1[70];
  int v22 = a1[71];
  if (v21 > 0 || v22 >= 1)
  {
    uint64_t v37 = 1;
    int v38 = 1;
    unsigned int v34 = 0;
    int v35 = v21;
    int v36 = v51 - v22;
    Espresso::ANECompilerEngine::slice_kernel::supported_by_hw((uint64_t)v31, (uint64_t)&v50, &v34, *((_DWORD *)a3 + 16));
    if (!v31[0])
    {
      uint64_t v26 = *a2;
      uint64_t v27 = a2[1];
      v30[0] = v26;
      v30[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)v32, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v30, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
      goto LABEL_47;
    }
    if (v33 < 0) {
      operator delete(v32[0]);
    }
  }
  int v23 = a1[72];
  int v24 = a1[73];
  uint64_t result = 1;
  if (v23 <= 0 && v24 < 1) {
    return result;
  }
  uint64_t v37 = 1;
  int v38 = 1;
  unsigned int v34 = 1;
  int v35 = v23;
  int v36 = HIDWORD(v50) - v24;
  Espresso::ANECompilerEngine::slice_kernel::supported_by_hw((uint64_t)v31, (uint64_t)&v50, &v34, *((_DWORD *)a3 + 16));
  if (!v31[0])
  {
    uint64_t v28 = *a2;
    uint64_t v27 = a2[1];
    v29[0] = v28;
    v29[1] = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)v32, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v29, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
LABEL_47:
    if (v56) {
      nitro::nitro_function::nitro_function(v56);
    }
    long long v58 = (void **)v55;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v58);
    long long v58 = (void **)v54;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v58);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (v27) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v27);
    }
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    return 0;
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  return 1;
}

void sub_19273DD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v43 - 200));
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::slice_kernel::supported_by_hw(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  unsigned int v8 = a3[3];
  BOOL v9 = v8 == 4 || v8 == 2;
  unsigned int v10 = *a3;
  BOOL v11 = v9 && v10 == 2;
  BOOL v12 = v11 && (*(unsigned char *)(a2 + 4) & 1) == 0 && *(_DWORD *)(a2 + 28) != 0;
  char v13 = v8 == 1 || v12;
  if (v10 < 3 && a3[4] == 0) {
    char v15 = v13;
  }
  else {
    char v15 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  unsigned int v16 = *a3;
  if (*a3 == 2)
  {
    BOOL v18 = 0;
    int v17 = *(_DWORD *)(a2 + 4);
  }
  else if (v16 == 1)
  {
    BOOL v18 = 0;
    int v17 = *(_DWORD *)(a2 + 12);
  }
  else if (v16)
  {
    MEMORY[0x192FF0F50](__p, "Invalid slice axis");
    int v17 = 0;
    char v15 = 0;
    BOOL v18 = *a3 == 0;
  }
  else
  {
    int v17 = *(_DWORD *)(a2 + 16);
    BOOL v18 = 1;
  }
  int v19 = a3[2];
  int v20 = (v17 & ((int)a3[1] >> 31)) + a3[1];
  if (v19 > 0) {
    int v17 = 0;
  }
  if (v17 + v19 > v20) {
    char v21 = v15;
  }
  else {
    char v21 = 0;
  }
  if (!v18) {
    goto LABEL_48;
  }
  BOOL v22 = a4 == 4 || a4 == 2;
  BOOL v23 = v22;
  int v24 = v22 ? 63 : 31;
  if ((v20 & v24) == 0) {
    goto LABEL_48;
  }
  BOOL v9 = !v23;
  unint64_t v25 = 12;
  if (!v9) {
    unint64_t v25 = 28;
  }
  if (v25 < v20)
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Unsupported crop along left edge.");
  }
  else
  {
LABEL_48:
    if (v21)
    {
      *(unsigned char *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
    }
    else
    {
      *(unsigned char *)a1 = 0;
      uint64_t v26 = (std::string *)(a1 + 8);
      if (SHIBYTE(v28) < 0)
      {
        std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v26->__r_.__value_.__r.__words[2] = v28;
      }
    }
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19273DFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::crop_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::crop_kernel::~crop_kernel(Espresso::ANECompilerEngine::crop_kernel *this)
{
  *(void *)this = &unk_1EE33E8E0;
  uint64_t v2 = (Espresso::ANECompilerEngine::crop_kernel *)((char *)this + 296);
  *((void *)this + 37) = &unk_1EE33EA40;
  int v3 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE33E8E0;
  uint64_t v2 = (Espresso::ANECompilerEngine::crop_kernel *)((char *)this + 296);
  *((void *)this + 37) = &unk_1EE33EA40;
  int v3 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::copy_kernel::~copy_kernel(Espresso::ANECompilerEngine::copy_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::copy_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::copy_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::copy_kernel::compile(Espresso::ANECompilerEngine::copy_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::copy_kernel::compile(Espresso::ANECompilerEngine::copy_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v109 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  v143.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  BOOL v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v143.__r_.__value_.__l.__data_, (long long **)&v143)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v106 = v9;
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  unsigned int v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (long long **)&v143);
  uint64_t v11 = *((void *)v10 + 5);
  BOOL v12 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v13 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v113, (id *)a3);
  uint64_t v14 = v120;
  uint64_t v120 = @"GOC";

  uint64_t v107 = objc_opt_new();
  [v13 setObject:v107 forKeyedSubscript:@"BiasScaleGroupData"];
  char v15 = [NSNumber numberWithShort:0];
  [v13 setObject:v15 forKeyedSubscript:@"BiasScalar"];

  unsigned int v16 = [NSNumber numberWithShort:15360];
  [v13 setObject:v16 forKeyedSubscript:@"ScaleScalar"];

  [v13 removeObjectForKey:@"BiasScaleGroupData"];
  objc_storeStrong(v121, v13);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v143, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v113);
  uint64_t v149 = v120;
  id v150 = v121[0];
  uint64_t v151 = (uint64_t)v121[1];
  int v111 = 0;
  unint64_t v112 = 0;
  uint64_t v110 = 0;
  *(void *)long long buf = &v110;
  uint8_t buf[8] = 0;
  uint64_t v110 = (std::string *)operator new(0x90uLL);
  int v111 = v110;
  unint64_t v112 = (unint64_t)&v110[6];
  int v111 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v112, (uint64_t)&v143, (uint64_t)&__str, (uint64_t)v110);

  if (v147 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v143);
  id v150 = 0;
  uint64_t v149 = 0;
  uint64_t v151 = 0x100000000;
  uint64_t v18 = *((void *)this + 44);
  int v17 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v108 = v17;
  if (v18 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 36) + 104))() + 40))
  {
    float v19 = *(float *)(v11 + 112);
    v125[0] = v18;
    v125[1] = v108;
    if (v108) {
      atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v20 = (std::__shared_weak_count *)*((void *)this + 47);
    v124[0] = *((void *)this + 46);
    v124[1] = (uint64_t)v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v125, v124, (uint64_t)&v126, v19);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    if (v108) {
      nitro::nitro_function::nitro_function(v108);
    }
    uint64_t v21 = *(unsigned int *)(v18 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v122, 2 * v21, 1, 1, 1);
    uint64_t v22 = (int)v21;
    uint64_t v23 = *((void *)this + 46);
    int v24 = v21;
    if (v23) {
      int v24 = *(_DWORD *)(v23 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v21);
      int v74 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v21 >= 1)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          float v76 = *(float *)(*(void *)(v18 + 16) + i * 4);
          *(float *)&int v77 = ldexp(1.0, -v130) * v76;
          v74[i] = v77;
        }
      }
      if (v21)
      {
        __int16 v78 = *(_WORD **)(v122 + 16);
        do
        {
          int v79 = *v74++;
          _S0 = v79;
          __asm { FCVT            H0, S0 }
          *v78++ = _S0;
          --v22;
        }
        while (v22);
      }
      if (*((void *)this + 46))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v24);
        uint64_t v82 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v24);
        uint64_t v102 = *(void *)buf;
        int v83 = *(int **)(v82 + 16);
        if (v24 >= 1)
        {
          for (uint64_t j = 0; j != v24; ++j)
          {
            int v85 = v21 - 1;
            if ((int)v21 - 1 >= (int)j) {
              int v85 = j;
            }
            *(float *)&int v86 = *(float *)(*(void *)(v128 + 16) + 4 * j) * *(float *)(*(void *)(v126 + 16) + 4 * v85);
            v83[j] = v86;
            unsigned int v87 = v131;
            unsigned int v88 = v130;
            *(float *)&int v89 = ldexp(1.0, v131 - v130) * *(float *)&v86;
            v83[j] = v89;
            float v92 = ldexp(1.0, v88 - v87) * *(float *)&v89;
            if (v92 < -127.0 || v92 > 255.0)
            {
              int v94 = Espresso::espresso_os_log_subsystem(v90, v91);
              if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
              {
                double v95 = *(float *)&v83[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v92;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v131;
                __int16 v133 = 1024;
                int v134 = v130;
                __int16 v135 = 2048;
                double v136 = v95;
                _os_log_error_impl(&dword_1920CB000, v94, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v24)
        {
          uint64_t v96 = v24;
          unint64_t v97 = *(_WORD **)(v102 + 16);
          do
          {
            int v98 = *v83++;
            _S0 = v98;
            __asm { FCVT            H0, S0 }
            *v97++ = _S0;
            --v96;
          }
          while (v96);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v100 = v131;
    uint64_t v25 = v122;
    if (v21)
    {
      uint64_t v26 = *(int **)(v126 + 16);
      uint64_t v27 = *(_WORD **)(v122 + 16);
      do
      {
        int v28 = *v26++;
        _S0 = v28;
        __asm { FCVT            H0, S0 }
        *v27++ = _S0;
        --v22;
      }
      while (v22);
    }
    if (v23)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v24, 1, 1, 1);
      uint64_t v101 = *(void *)buf;
      unsigned int v103 = *(std::__shared_weak_count **)&buf[8];
      if (v24)
      {
        uint64_t v34 = v24;
        int v35 = *(_WORD **)(*(void *)buf + 16);
        int v36 = *(int **)(v128 + 16);
        do
        {
          int v37 = *v36++;
          _S0 = v37;
          __asm { FCVT            H0, S0 }
          *v35++ = _S0;
          --v34;
        }
        while (v34);
      }
    }
    else
    {
      uint64_t v101 = 0;
      unsigned int v103 = 0;
    }
    int v104 = *((unsigned __int8 *)a2 + 552);
    uint64_t v39 = v123;
    if (v123) {
      atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v25 + 16), *(int *)(v25 + 8));
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    obuint64_t j = objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v41 = (id)v110[5].__r_.__value_.__l.__size_;

      obuint64_t j = v41;
    }
    int v42 = objc_opt_new();
    uint64_t v43 = [NSNumber numberWithInt:v21];
    [v42 setObject:v43 forKeyedSubscript:@"ScaleCount"];

    uint64_t v44 = [NSNumber numberWithInt:v40];
    [v42 setObject:v44 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v45 = NSNumber;
    if (v104) {
      uint64_t weights_file_index = 0;
    }
    else {
    int16x4_t v47 = [v45 numberWithUnsignedLong:weights_file_index];
    }
    [v42 setObject:v47 forKeyedSubscript:@"ScaleIndex"];

    [v42 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v48 = [NSNumber numberWithInt:v130];
    [obj setObject:v48 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 46))
    {
      if (v103) {
        atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v49 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v101 + 16), *(int *)(v101 + 8));
      if (v103) {
        nitro::nitro_function::nitro_function(v103);
      }
      long long v50 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 46) + 8)];
      [v42 setObject:v50 forKeyedSubscript:@"BiasCount"];

      int v51 = [NSNumber numberWithInt:v49];
      [v42 setObject:v51 forKeyedSubscript:@"BiasOffset"];

      char v52 = NSNumber;
      if (v104) {
        uint64_t v53 = 0;
      }
      else {
      uint64_t v54 = [v52 numberWithUnsignedLong:v53];
      }
      [v42 setObject:v54 forKeyedSubscript:@"BiasIndex"];

      [v42 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      std::string::size_type v55 = [NSNumber numberWithInt:v100];
      [obj setObject:v55 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v42 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    uint64_t v56 = v111;
    if (v111 == v110) {
      goto LABEL_81;
    }
    std::string::size_type v57 = v111 - 6;
    uint64_t v58 = HIBYTE(v111[-6].__r_.__value_.__r.__words[2]);
    char v59 = v58;
    std::string::size_type size = v111[-6].__r_.__value_.__l.__size_;
    if ((v58 & 0x80u) == 0) {
      std::string::size_type v61 = HIBYTE(v111[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v61 = v111[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v62 = HIBYTE(v134);
    if (v134 < 0) {
      uint64_t v62 = *(void *)&buf[8];
    }
    if (v61 != v62) {
      goto LABEL_75;
    }
    if (v134 >= 0) {
      int v63 = buf;
    }
    else {
      int v63 = *(unsigned __int8 **)buf;
    }
    if ((char)v58 < 0)
    {
      std::string::pointer data = (const std::string::value_type *)v57->__r_.__value_.__r.__words[0];
      if (memcmp(v57->__r_.__value_.__l.__data_, v63, v111[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_78;
      }
    }
    else if ((_BYTE)v58)
    {
      int v64 = v111 - 6;
      while (v64->__r_.__value_.__s.__data_[0] == *v63)
      {
        int v64 = (std::string *)((char *)v64 + 1);
        ++v63;
        if (!--v58) {
          goto LABEL_74;
        }
      }
      goto LABEL_75;
    }
LABEL_74:
    std::string::append(v56 - 6, "__@pre_scale_bias");
    char v59 = HIBYTE(v56[-6].__r_.__value_.__r.__words[2]);
LABEL_75:
    if ((v59 & 0x80) == 0)
    {
      long long v66 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v56[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
      goto LABEL_79;
    }
    std::string::pointer data = v56[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v56[-6].__r_.__value_.__l.__size_;
LABEL_78:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_79:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v137, &__str, &v153, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_81:
    __int16 v67 = v141;
    uint64_t v141 = @"GOC";

    objc_storeStrong(&v142, obj);
    if (!*((unsigned char *)a2 + 121))
    {
      long long v68 = v111;
      if ((unint64_t)v111 >= v112)
      {
        unint64_t v70 = 0x8E38E38E38E38E39 * (((char *)v111 - (char *)v110) >> 4);
        if (v70 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v71 = 0x1C71C71C71C71C72 * ((uint64_t)(v112 - (void)v110) >> 4);
        if (v71 <= v70 + 1) {
          unint64_t v71 = v70 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v112 - (void)v110) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v72 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v72 = v71;
        }
        *((void *)&v153 + 1) = &v112;
        if (v72) {
          unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v72);
        }
        else {
          uint64_t v73 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v72;
        __str.__r_.__value_.__l.__size_ = v72 + 144 * v70;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v153 = v72 + 144 * v73;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v110, &__str);
        __int16 v69 = v111;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v111, (uint64_t)buf);
        __int16 v69 = v68 + 6;
      }
      int v111 = v69;
    }

    if (v139 < 0) {
      operator delete(v138);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v134) < 0) {
      operator delete(*(void **)buf);
    }

    if (v103) {
      nitro::nitro_function::nitro_function(v103);
    }
    if (v123) {
      nitro::nitro_function::nitro_function(v123);
    }
    if (v129) {
      nitro::nitro_function::nitro_function(v129);
    }
    if (v127) {
      nitro::nitro_function::nitro_function(v127);
    }
  }
  if (v108) {
    nitro::nitro_function::nitro_function(v108);
  }

  if (v147 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  nitro::nitro_function::nitro_function(v109);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 36) + 32))((char *)this + 288, a2, &v110);
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);

  if (v118 < 0) {
    operator delete(v117);
  }
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
  if (v114 < 0) {
    operator delete(v113[0]);
  }

  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v106) {
    nitro::nitro_function::nitro_function(v106);
  }
  nitro::nitro_function::nitro_function(v109);
}

void sub_19273EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53)
{
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  nitro::nitro_function::nitro_function(a20);
  a53 = (void **)&a21;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a53);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a24);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  nitro::nitro_function::nitro_function(a20);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::copy_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_copy_kernel::kernel_type_str(Espresso::generic_copy_kernel *this)
{
  return "copy";
}

void Espresso::ANECompilerEngine::copy_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::copy_kernel::~copy_kernel(Espresso::ANECompilerEngine::copy_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::copy_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::copy_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::reduce_kernel::~reduce_kernel(Espresso::ANECompilerEngine::reduce_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::reduce_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::reduce_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::reduce_kernel::compile(Espresso::ANECompilerEngine::reduce_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::reduce_kernel::compile(Espresso::ANECompilerEngine::reduce_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  v210[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v174 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  float v172 = a2;
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  v188[0] = a3[6];
  BOOL v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v188[0], (long long **)v188)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v171 = v9;
  v188[0] = a3;
  unsigned int v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (long long **)v188);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  obuint64_t j = (float *)*((void *)v10 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v173 = v11;
  uint64_t v175 = 0;
  std::string v176 = 0;
  v177[0] = 0;
  unsigned int v12 = *((_DWORD *)this + 70);
  if (v12 >= 2)
  {
    if (v12 - 11 >= 2)
    {
      if (v12 != 9) {
        goto LABEL_119;
      }
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v188, a3);
      uint64_t v23 = objc_opt_new();
      objc_storeStrong(&v196, v23);
      int v24 = v195;
      uint64_t v195 = @"Reduction";

      [v23 setObject:@"Max" forKeyedSubscript:@"Type"];
      if (*((_DWORD *)this + 72) != 4) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported axis mode for reduce operation.");
      }
      [v23 setObject:@"Channel" forKeyedSubscript:@"Dimension"];
      unint64_t v42 = 0x8E38E38E38E38E39 * (((uint64_t)v176 - v175) >> 4);
      if (v42 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v43 = 0x1C71C71C71C71C72 * ((v177[0] - v175) >> 4);
      if (v43 <= v42 + 1) {
        unint64_t v43 = v42 + 1;
      }
      if (0x8E38E38E38E38E39 * ((v177[0] - v175) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v44 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v44 = v43;
      }
      *((void *)&v203 + 1) = v177;
      if (v44) {
        unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v44);
      }
      else {
        uint64_t v45 = 0;
      }
      *(void *)long long buf = v44;
      *(void *)&uint8_t buf[8] = v44 + 16 * (((uint64_t)v176 - v175) >> 4);
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v203 = v44 + 144 * v45;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v188);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v175, buf);
      int v51 = v176;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      std::string v176 = v51;

      goto LABEL_115;
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v188, a3);
    char v13 = objc_opt_new();
    objc_storeStrong(&v196, v13);
    uint64_t v14 = v195;
    uint64_t v195 = @"ArgMinMax";

    switch(*((_DWORD *)this + 72))
    {
      case 1:
        if (*((_DWORD *)this + 70) == 11) {
          char v15 = @"SpatialArgMax";
        }
        else {
          char v15 = @"SpatialArgMin";
        }
        [v13 setObject:v15 forKeyedSubscript:@"Mode"];
        unsigned int v16 = NSNumber;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
        int v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
        Espresso::abstract_blob_container::shape(buf, *((void *)v17 + 5));
        uint64_t v18 = [v16 numberWithInt:*(unsigned int *)buf];
        [v13 setObject:v18 forKeyedSubscript:@"KernelWidth"];

        if (__p)
        {
          v205.__begin_ = (std::vector<std::string>::pointer)__p;
          operator delete(__p);
        }
        [v13 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"KernelHeight"];
        float v19 = &unk_1EE3AF0A0;
        goto LABEL_43;
      case 2:
        if (*((_DWORD *)this + 70) == 11) {
          uint64_t v34 = @"SpatialArgMax";
        }
        else {
          uint64_t v34 = @"SpatialArgMin";
        }
        [v13 setObject:v34 forKeyedSubscript:@"Mode"];
        [v13 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"KernelWidth"];
        int v35 = NSNumber;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
        int v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
        Espresso::abstract_blob_container::shape(buf, *((void *)v36 + 5));
        int v37 = [v35 numberWithInt:*(unsigned int *)&buf[4]];
        [v13 setObject:v37 forKeyedSubscript:@"KernelHeight"];

        if (__p)
        {
          v205.__begin_ = (std::vector<std::string>::pointer)__p;
          operator delete(__p);
        }
        float v19 = &unk_1EE3AF0B8;
        goto LABEL_43;
      case 3:
        if (*((_DWORD *)this + 70) == 11) {
          uint64_t v25 = @"SpatialArgMax";
        }
        else {
          uint64_t v25 = @"SpatialArgMin";
        }
        [v13 setObject:v25 forKeyedSubscript:@"Mode"];
        uint64_t v26 = NSNumber;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
        uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
        Espresso::abstract_blob_container::shape(buf, *((void *)v27 + 5));
        int v28 = [v26 numberWithInt:*(unsigned int *)buf];
        [v13 setObject:v28 forKeyedSubscript:@"KernelWidth"];

        if (__p)
        {
          v205.__begin_ = (std::vector<std::string>::pointer)__p;
          operator delete(__p);
        }
        uint64_t v29 = NSNumber;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
        uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
        Espresso::abstract_blob_container::shape(buf, *((void *)v30 + 5));
        int v31 = [v29 numberWithInt:*(unsigned int *)&buf[4]];
        [v13 setObject:v31 forKeyedSubscript:@"KernelHeight"];

        if (__p)
        {
          v205.__begin_ = (std::vector<std::string>::pointer)__p;
          operator delete(__p);
        }
        float v19 = &unk_1EE3AF0D0;
LABEL_43:
        [v13 setObject:v19 forKeyedSubscript:@"Step"];
        [v13 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadTop"];
        [v13 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadBot"];
        uint64_t v32 = (__CFString *)&unk_1EE3AEE18;
        [v13 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadLeft"];
        char v33 = @"PadRight";
        break;
      case 4:
        if (*((_DWORD *)this + 70) == 11) {
          uint64_t v32 = @"ChannelArgMax";
        }
        else {
          uint64_t v32 = @"ChannelArgMin";
        }
        char v33 = @"Mode";
        break;
      default:
        Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported reduction axis");
    }
    [v13 setObject:v32 forKeyedSubscript:v33];
    unint64_t v38 = 0x8E38E38E38E38E39 * (((uint64_t)v176 - v175) >> 4);
    if (v38 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v39 = 0x1C71C71C71C71C72 * ((v177[0] - v175) >> 4);
    if (v39 <= v38 + 1) {
      unint64_t v39 = v38 + 1;
    }
    if (0x8E38E38E38E38E39 * ((v177[0] - v175) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v40 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v40 = v39;
    }
    *((void *)&v203 + 1) = v177;
    if (v40) {
      unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v40);
    }
    else {
      uint64_t v41 = 0;
    }
    *(void *)long long buf = v40;
    *(void *)&uint8_t buf[8] = v40 + 16 * (((uint64_t)v176 - v175) >> 4);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v203 = v40 + 144 * v41;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v188);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v175, buf);
    long long v50 = v176;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
LABEL_114:
    std::string v176 = v50;

LABEL_115:
    if (v193 < 0) {
      operator delete(v192);
    }
    *(void *)long long buf = v191;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v190;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v189 < 0) {
      operator delete(v188[0]);
    }
    goto LABEL_119;
  }
  int v20 = *((_DWORD *)this + 72);
  if (v20 == 3) {
    goto LABEL_97;
  }
  if (v20 == 7 || v20 == 4)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v188, a3);
    uint64_t v21 = objc_opt_new();
    objc_storeStrong(&v196, v21);
    [v21 setObject:@"Conv" forKeyedSubscript:@"Type"];
    [v21 setObject:@"Unity" forKeyedSubscript:@"KernelMode"];
    [v21 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"KernelWidth"];
    [v21 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"KernelHeight"];
    [v21 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
    [v21 setObject:&unk_1EE3AF0E8 forKeyedSubscript:@"Step"];
    [v21 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadTop"];
    [v21 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadBot"];
    [v21 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadLeft"];
    [v21 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadRight"];
    [v21 setObject:@"Zero" forKeyedSubscript:@"PaddingMode"];
    uint64_t v22 = v195;
    uint64_t v195 = @"Conv";

    uint64_t v197 = 0x100000001;
    unint64_t v46 = 0x8E38E38E38E38E39 * (((uint64_t)v176 - v175) >> 4);
    if (v46 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v47 = 0x1C71C71C71C71C72 * ((v177[0] - v175) >> 4);
    if (v47 <= v46 + 1) {
      unint64_t v47 = v46 + 1;
    }
    if (0x8E38E38E38E38E39 * ((v177[0] - v175) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v48 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v48 = v47;
    }
    *((void *)&v203 + 1) = v177;
    if (v48) {
      unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v48);
    }
    else {
      uint64_t v49 = 0;
    }
    *(void *)long long buf = v48;
    *(void *)&uint8_t buf[8] = v48 + 16 * (((uint64_t)v176 - v175) >> 4);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v203 = v48 + 144 * v49;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v188);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v175, buf);
    char v52 = v176;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    std::string v176 = v52;
    if (*((_DWORD *)this + 70) == 1)
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
      uint64_t v53 = objc_opt_new();
      uint64_t v54 = v208;
      unint64_t v208 = @"Float16";

      objc_storeStrong(v210, v53);
      std::string::size_type v55 = v209;
      char v209 = @"GOC";

      int v182 = (unsigned __int8 *)a3[6];
      uint64_t v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v182, (long long **)&v182);
      Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v56 + 5));
      float v57 = (float)SLODWORD(__str.__r_.__value_.__r.__words[1]);
      if (v200)
      {
        v201 = v200;
        operator delete(v200);
      }
      _S0 = 1.0 / v57;
      __asm { FCVT            H0, S0 }
      int v63 = [NSNumber numberWithShort:SLOWORD(_S0)];
      [v53 setObject:v63 forKeyedSubscript:@"ScaleScalar"];

      int v64 = v176;
      if ((unint64_t)v176 >= v177[0])
      {
        unint64_t v66 = 0x8E38E38E38E38E39 * (((uint64_t)v176 - v175) >> 4);
        if (v66 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v67 = 0x1C71C71C71C71C72 * ((v177[0] - v175) >> 4);
        if (v67 <= v66 + 1) {
          unint64_t v67 = v66 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v177[0] - v175) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v68 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v68 = v67;
        }
        *((void *)&v199 + 1) = v177;
        if (v68) {
          unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v68);
        }
        else {
          uint64_t v69 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v68;
        __str.__r_.__value_.__l.__size_ = v68 + 144 * v66;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v199 = v68 + 144 * v69;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v175, &__str);
        long long v65 = v176;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v176, (uint64_t)buf);
        long long v65 = v64 + 6;
      }
      std::string v176 = v65;

      if (v207 < 0) {
        operator delete(v206);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (v193 < 0) {
      operator delete(v192);
    }
    *(void *)long long buf = v191;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v190;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v189 < 0) {
      operator delete(v188[0]);
    }
    if (v20 == 7)
    {
LABEL_97:
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v188, a3);
      char v13 = objc_opt_new();
      unint64_t v70 = v194;
      int v194 = @"Float16";

      objc_storeStrong(&v196, v13);
      if (*((_DWORD *)this + 70) != 1) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported axis mode for reduce operation.");
      }
      [v13 setObject:@"Avg" forKeyedSubscript:@"Type"];
      unint64_t v71 = NSNumber;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
      unint64_t v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
      Espresso::abstract_blob_container::shape(buf, *((void *)v72 + 5));
      uint64_t v73 = [v71 numberWithInt:*(unsigned int *)&buf[4]];
      [v13 setObject:v73 forKeyedSubscript:@"KernelHeight"];

      if (__p)
      {
        v205.__begin_ = (std::vector<std::string>::pointer)__p;
        operator delete(__p);
      }
      int v74 = NSNumber;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
      int v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
      Espresso::abstract_blob_container::shape(buf, *((void *)v75 + 5));
      float v76 = [v74 numberWithInt:*(unsigned int *)buf];
      [v13 setObject:v76 forKeyedSubscript:@"KernelWidth"];

      if (__p)
      {
        v205.__begin_ = (std::vector<std::string>::pointer)__p;
        operator delete(__p);
      }
      [v13 setObject:&unk_1EE3AF100 forKeyedSubscript:@"Step"];
      int v77 = v195;
      uint64_t v195 = @"Pooling";

      __int16 v78 = v176;
      if ((unint64_t)v176 >= v177[0])
      {
        unint64_t v79 = 0x8E38E38E38E38E39 * (((uint64_t)v176 - v175) >> 4);
        if (v79 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v80 = 0x1C71C71C71C71C72 * ((v177[0] - v175) >> 4);
        if (v80 <= v79 + 1) {
          unint64_t v80 = v79 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v177[0] - v175) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v81 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v81 = v80;
        }
        *((void *)&v203 + 1) = v177;
        if (v81) {
          unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v81);
        }
        else {
          uint64_t v82 = 0;
        }
        *(void *)long long buf = v81;
        *(void *)&uint8_t buf[8] = v81 + 144 * v79;
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        *(void *)&long long v203 = v81 + 144 * v82;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v188);
        *(void *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v175, buf);
        long long v50 = v176;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v176, (uint64_t)v188);
        long long v50 = v78 + 6;
      }
      goto LABEL_114;
    }
  }
LABEL_119:
  atomic_fetch_add_explicit(&v174->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v173) {
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v188);
  uint64_t v195 = 0;
  id v196 = 0;
  uint64_t v197 = 0x100000000;
  uint64_t v83 = *((void *)this + 49);
  char v84 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v83 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 41) + 104))() + 40))
  {
    float v85 = obj[28];
    v181[0] = v83;
    v181[1] = v84;
    if (v84) {
      atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v86 = (std::__shared_weak_count *)*((void *)this + 52);
    v180[0] = *((void *)this + 51);
    v180[1] = (uint64_t)v86;
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v181, v180, (uint64_t)&v182, v85);
    if (v86) {
      nitro::nitro_function::nitro_function(v86);
    }
    if (v84) {
      nitro::nitro_function::nitro_function(v84);
    }
    uint64_t v87 = *(unsigned int *)(v83 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v178, 2 * v87, 1, 1, 1);
    uint64_t v88 = (int)v87;
    uint64_t v89 = *((void *)this + 51);
    int v90 = v87;
    if (v89) {
      int v90 = *(_DWORD *)(v89 + 8);
    }
    if (!*((unsigned char *)v172 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v87);
      char v139 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v87 >= 1)
      {
        for (uint64_t i = 0; i != v87; ++i)
        {
          float v141 = *(float *)(*(void *)(v83 + 16) + i * 4);
          *(float *)&int v142 = ldexp(1.0, -v186) * v141;
          v139[i] = v142;
        }
      }
      if (v87)
      {
        std::string v143 = *(_WORD **)(v178 + 16);
        do
        {
          int v144 = *v139++;
          _S0 = v144;
          __asm { FCVT            H0, S0 }
          *v143++ = _S0;
          --v88;
        }
        while (v88);
      }
      if (*((void *)this + 51))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v90);
        uint64_t v147 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v90);
        uint64_t v167 = *(void *)buf;
        id v148 = *(int **)(v147 + 16);
        if (v90 >= 1)
        {
          for (uint64_t j = 0; j != v90; ++j)
          {
            if ((int)v87 - 1 >= (int)j) {
              int v150 = j;
            }
            else {
              int v150 = v87 - 1;
            }
            *(float *)&int v151 = *(float *)(*(void *)(v184 + 16) + 4 * j)
                            * *(float *)(*((void *)v182 + 2) + 4 * v150);
            v148[j] = v151;
            unsigned int v153 = v186;
            int v152 = v187;
            *(float *)&int v154 = ldexp(1.0, v187 - v186) * *(float *)&v151;
            v148[j] = v154;
            float v157 = ldexp(1.0, v153 - v152) * *(float *)&v154;
            if (v157 < -127.0 || v157 > 255.0)
            {
              float v159 = Espresso::espresso_os_log_subsystem(v155, v156);
              if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              {
                double v160 = *(float *)&v148[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v157;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v187;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v186;
                LOWORD(v203) = 2048;
                *(double *)((char *)&v203 + 2) = v160;
                _os_log_error_impl(&dword_1920CB000, v159, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v90)
        {
          uint64_t v161 = v90;
          long long v162 = *(_WORD **)(v167 + 16);
          do
          {
            int v163 = *v148++;
            _S0 = v163;
            __asm { FCVT            H0, S0 }
            *v162++ = _S0;
            --v161;
          }
          while (v161);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    LODWORD(v165) = v187;
    uint64_t v91 = v178;
    if (v87)
    {
      float v92 = (int *)*((void *)v182 + 2);
      unint64_t v93 = *(_WORD **)(v178 + 16);
      do
      {
        int v94 = *v92++;
        _S0 = v94;
        __asm { FCVT            H0, S0 }
        *v93++ = _S0;
        --v88;
      }
      while (v88);
    }
    if (v89)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v90, 1, 1, 1);
      uint64_t v96 = *(void *)buf;
      unint64_t v168 = *(std::__shared_weak_count **)&buf[8];
      if (v90)
      {
        uint64_t v97 = v90;
        int v98 = *(_WORD **)(*(void *)buf + 16);
        long long v99 = *(int **)(v184 + 16);
        do
        {
          int v100 = *v99++;
          _S0 = v100;
          __asm { FCVT            H0, S0 }
          *v98++ = _S0;
          --v97;
        }
        while (v97);
      }
    }
    else
    {
      unint64_t v168 = 0;
      uint64_t v96 = 0;
    }
    int v102 = *((unsigned __int8 *)v172 + 552);
    unsigned int v103 = (Espresso::ANECompilerEngine::compiler *)((char *)v172 + 128);
    int v104 = v179;
    if (v179) {
      atomic_fetch_add_explicit(&v179->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v105 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v103, *(const unsigned __int8 **)(v91 + 16), *(int *)(v91 + 8));
    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
    id obja = (id)objc_opt_new();
    if (*((unsigned char *)v172 + 121))
    {
      id v106 = *(id *)(v175 + 128);

      id obja = v106;
    }
    uint64_t v107 = objc_opt_new();
    int v108 = [NSNumber numberWithInt:v87];
    [v107 setObject:v108 forKeyedSubscript:@"ScaleCount"];

    int v109 = [NSNumber numberWithInt:v105];
    [v107 setObject:v109 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v110 = NSNumber;
    if (v102) {
      uint64_t weights_file_index = 0;
    }
    else {
    unint64_t v112 = objc_msgSend(v110, "numberWithUnsignedLong:", weights_file_index, v165);
    }
    [v107 setObject:v112 forKeyedSubscript:@"ScaleIndex"];

    [v107 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    int v113 = [NSNumber numberWithInt:v186];
    [obja setObject:v113 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 51))
    {
      if (v168) {
        atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v114 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v103, *(const unsigned __int8 **)(v96 + 16), *(int *)(v96 + 8));
      if (v168) {
        nitro::nitro_function::nitro_function(v168);
      }
      uint64_t v115 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 51) + 8)];
      [v107 setObject:v115 forKeyedSubscript:@"BiasCount"];

      uint64_t v116 = [NSNumber numberWithInt:v114];
      [v107 setObject:v116 forKeyedSubscript:@"BiasOffset"];

      uint64_t v117 = NSNumber;
      if (v102) {
        uint64_t v118 = 0;
      }
      else {
      id v119 = [v117 numberWithUnsignedLong:v118];
      }
      [v107 setObject:v119 forKeyedSubscript:@"BiasIndex"];

      [v107 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v120 = [NSNumber numberWithInt:v166];
      [obja setObject:v120 forKeyedSubscript:@"BiasShift"];
    }
    [obja setObject:v107 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    int v121 = v176;
    if (v176 == (std::string *)v175) {
      goto LABEL_187;
    }
    uint64_t v122 = v176 - 6;
    uint64_t v123 = HIBYTE(v176[-6].__r_.__value_.__r.__words[2]);
    char v124 = v123;
    std::string::size_type size = v176[-6].__r_.__value_.__l.__size_;
    if ((v123 & 0x80u) == 0) {
      std::string::size_type v126 = HIBYTE(v176[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v126 = v176[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v127 = buf[23];
    if (buf[23] < 0) {
      uint64_t v127 = *(void *)&buf[8];
    }
    if (v126 != v127) {
      goto LABEL_181;
    }
    if (buf[23] >= 0) {
      uint64_t v128 = buf;
    }
    else {
      uint64_t v128 = *(unsigned __int8 **)buf;
    }
    if ((char)v123 < 0)
    {
      std::string::pointer data = (const std::string::value_type *)v122->__r_.__value_.__r.__words[0];
      if (memcmp(v122->__r_.__value_.__l.__data_, v128, v176[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_184;
      }
    }
    else if ((_BYTE)v123)
    {
      uint64_t v129 = v176 - 6;
      while (v129->__r_.__value_.__s.__data_[0] == *v128)
      {
        uint64_t v129 = (std::string *)((char *)v129 + 1);
        ++v128;
        if (!--v123) {
          goto LABEL_180;
        }
      }
      goto LABEL_181;
    }
LABEL_180:
    std::string::append(v121 - 6, "__@pre_scale_bias");
    char v124 = HIBYTE(v121[-6].__r_.__value_.__r.__words[2]);
LABEL_181:
    if ((v124 & 0x80) == 0)
    {
      long long v131 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v121[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v131;
      goto LABEL_185;
    }
    std::string::pointer data = v121[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v121[-6].__r_.__value_.__l.__size_;
LABEL_184:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_185:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v205, &__str, &v199, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_187:
    int v132 = v209;
    char v209 = @"GOC";

    objc_storeStrong(v210, obja);
    if (!*((unsigned char *)v172 + 121))
    {
      __int16 v133 = v176;
      if ((unint64_t)v176 >= v177[0])
      {
        unint64_t v135 = 0x8E38E38E38E38E39 * (((uint64_t)v176 - v175) >> 4);
        if (v135 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v136 = 0x1C71C71C71C71C72 * ((v177[0] - v175) >> 4);
        if (v136 <= v135 + 1) {
          unint64_t v136 = v135 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v177[0] - v175) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v137 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v137 = v136;
        }
        *((void *)&v199 + 1) = v177;
        if (v137) {
          unint64_t v137 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v137);
        }
        else {
          uint64_t v138 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v137;
        __str.__r_.__value_.__l.__size_ = v137 + 144 * v135;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v199 = v137 + 144 * v138;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v175, &__str);
        int v134 = v176;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v176, (uint64_t)buf);
        int v134 = v133 + 6;
      }
      std::string v176 = v134;
    }

    if (v207 < 0) {
      operator delete(v206);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }

    if (v168) {
      nitro::nitro_function::nitro_function(v168);
    }
    if (v179) {
      nitro::nitro_function::nitro_function(v179);
    }
    if (v185) {
      nitro::nitro_function::nitro_function(v185);
    }
    if (v183) {
      nitro::nitro_function::nitro_function(v183);
    }
  }
  if (v84) {
    nitro::nitro_function::nitro_function(v84);
  }

  if (v193 < 0) {
    operator delete(v192);
  }
  *(void *)long long buf = v191;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v190;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v189 < 0) {
    operator delete(v188[0]);
  }
  if (v173) {
    nitro::nitro_function::nitro_function(v173);
  }
  nitro::nitro_function::nitro_function(v174);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 41) + 32))((char *)this + 328, v172, &v175);
  v188[0] = &v175;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v188);
  if (v173) {
    nitro::nitro_function::nitro_function(v173);
  }
  if (v171) {
    nitro::nitro_function::nitro_function(v171);
  }
  nitro::nitro_function::nitro_function(v174);
}

void sub_192740CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  nitro::nitro_function::nitro_function(a17);
  a21 = (uint64_t)&a18;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  nitro::nitro_function::nitro_function(a17);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::reduce_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, int *a3)
{
  if (*(void *)a3 != *((void *)a3 + 1))
  {
    uint64_t v6 = (_OWORD *)*((void *)a3 + 6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        BOOL v9 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((void *)v6 + 9);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    BOOL v9 = 0;
LABEL_15:
    int v10 = *(_DWORD *)(a1 + 288);
    BOOL v11 = v10 == 1;
    if (v10 == 4) {
      BOOL v11 = 1;
    }
    int v12 = *(_DWORD *)(a1 + 280);
    if (v12 == 9 || v12 == 0) {
      BOOL v11 = v10 == 4;
    }
    if (v12 != 1) {
      goto LABEL_42;
    }
    std::string::basic_string[abi:ne180100]<0>(v157, "experimental.ane.reduce_mean_spatial");
    std::string::basic_string[abi:ne180100]<0>(v198, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v9 + 472, (uint64_t)v157, (uint64_t)v198, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v14 = __p.__r_.__value_.__l.__size_ == 1 && *__p.__r_.__value_.__l.__data_ == 49;
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1 && __p.__r_.__value_.__s.__data_[0] == 49;
    }
    if ((v198[23] & 0x80000000) != 0) {
      operator delete(*(void **)v198);
    }
    if (SBYTE7(v158) < 0) {
      operator delete(v157[0]);
    }
    BOOL v11 = v10 == 4;
    if (v14)
    {
      if (v10 != 4 && (*(_DWORD *)(a1 + 288) & 0xFFFFFFFB) != 3) {
        goto LABEL_39;
      }
    }
    else
    {
LABEL_42:
      if (!v11)
      {
LABEL_39:
        char v15 = *a2;
        unsigned int v16 = a2[1];
        v173[0] = v15;
        v173[1] = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v157, "reduce_kernel: SUM/AVG only support K, AVG support for XY or XYK requires opt-in.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v157, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v173, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_197:
        if (v196) {
          nitro::nitro_function::nitro_function(v196);
        }
        *(void *)uint64_t v198 = v195;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
        *(void *)uint64_t v198 = v194;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v158) < 0) {
          operator delete(v157[0]);
        }
        if (v16) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v16);
        }
        goto LABEL_205;
      }
    }
    unsigned int v17 = *(_DWORD *)(a1 + 280);
    if (v17 > 0xC || ((1 << v17) & 0x1A03) == 0)
    {
      int v64 = *a2;
      unsigned int v16 = a2[1];
      v172[0] = v64;
      v172[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v157, "reduce_kernel: only reduce modes of ARGMAX, ARGMIN, MAX, SUM, AVG supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v157, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v172, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_197;
    }
    uint64_t v18 = *(void *)a3;
    int v19 = *(_DWORD *)(a1 + 288);
    if (v19 != 3 && v19 != 7)
    {
      if (v19 == 4)
      {
        if (v17 == 9) {
          int v20 = 4097;
        }
        else {
          int v20 = 2049;
        }
        if (*(_DWORD *)(v18 + 8) >= v20) {
          goto LABEL_194;
        }
LABEL_184:
        if (v17 == 9 && *(_DWORD *)(a1 + 288) == 4)
        {
          int v98 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
          unsigned int v99 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v9, 0);
          if (v99 >= 8 || ((0x97u >> v99) & 1) == 0)
          {
            int v100 = *a2;
            uint64_t v101 = a2[1];
            v169[0] = v100;
            v169[1] = v101;
            if (v101) {
              atomic_fetch_add_explicit(&v101->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v157, "reduce_kernel: invalid compute path for reduction input");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v157, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v169, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            if (SBYTE7(v158) < 0) {
              operator delete(v157[0]);
            }
            if (v101) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v101);
            }
LABEL_260:

            goto LABEL_205;
          }
          id v119 = off_1E5746F00[v99];
          ANECTensorDescInitialize();
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v120 = *(_OWORD *)(v18 + 16);
          uint64_t v121 = *(void *)(v18 + 32);
          v163[0] = *(_OWORD *)v18;
          v163[1] = v120;
          uint64_t v164 = v121;
          uint64_t v165 = 0;
          unsigned int v166 = 0;
          uint64_t v167 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v165, *(const void **)(v18 + 40), *(void *)(v18 + 48), (uint64_t)(*(void *)(v18 + 48) - *(void *)(v18 + 40)) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v168, v9, (const Espresso::layer_shape *)v163, 1);
          if (v165)
          {
            unsigned int v166 = v165;
            operator delete(v165);
          }
          if (v8) {
            nitro::nitro_function::nitro_function(v8);
          }
          *(void *)&long long v122 = SHIDWORD(v168.__r_.__value_.__r.__words[1]);
          *((void *)&v122 + 1) = SLODWORD(v168.__r_.__value_.__r.__words[2]);
          *(_OWORD *)&v198[24] = v122;
          *(void *)uint64_t v198 = v119;
          long long v199 = (void *)SLODWORD(v168.__r_.__value_.__r.__words[1]);
          *(void *)&long long v122 = SLODWORD(v168.__r_.__value_.__l.__data_);
          *((void *)&v122 + 1) = SHIDWORD(v168.__r_.__value_.__r.__words[0]);
          *(_OWORD *)&v198[8] = v122;
          ANECReductionLayerDescInitialize();
          v157[0] = @"Max";
          v157[1] = @"Bypass";
          *((void *)&v158 + 1) = 1;
          float v159 = @"Channel";
          v190.__r_.__value_.__r.__words[0] = 0;
          v189.__r_.__value_.__r.__words[0] = 0;
          Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&__p, (NSString *)(a1 + 328), v98);
          int v123 = ANECValidateReductionLayer();
          if (__p.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          if (v123)
          {
            char v124 = a2[1];
            v156[0] = *a2;
            v156[1] = v124;
            if (v124) {
              atomic_fetch_add_explicit(&v124->i64[1], 1uLL, memory_order_relaxed);
            }
            std::to_string(&v192, v123);
            int v125 = std::string::insert(&v192, 0, "reduce_kernel: ANECValidateReductionLayer failed with status");
            std::string v155 = *v125;
            v125->__r_.__value_.__l.__size_ = 0;
            v125->__r_.__value_.__r.__words[2] = 0;
            v125->__r_.__value_.__r.__words[0] = 0;
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v155, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v156, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v155.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v192.__r_.__value_.__l.__data_);
            }
            if (v124) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v124);
            }
            Espresso::ANECompilerEngine::violations_from_alternates<ANECReductionLayerDescAlternate>((uint64_t)&v155, (uint64_t)v190.__r_.__value_.__l.__data_, (uint64_t)v189.__r_.__value_.__l.__data_);
            std::string::size_type v126 = (uint64_t **)v155.__r_.__value_.__r.__words[2];
            if (v155.__r_.__value_.__r.__words[2])
            {
              do
              {
                uint64_t v127 = a2[1];
                v154[0] = *a2;
                v154[1] = v127;
                if (v127) {
                  atomic_fetch_add_explicit(&v127->i64[1], 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v192, (char *)[v126[2] UTF8String]);
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v192, (uint64_t)a3, 0);
                Espresso::emit_kernel_validation_warning(v154, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
                if (v196) {
                  nitro::nitro_function::nitro_function(v196);
                }
                v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v195;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
                v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v192.__r_.__value_.__l.__data_);
                }
                if (v127) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v127);
                }
                std::string::size_type v126 = (uint64_t **)*v126;
              }
              while (v126);
            }
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v155);
            goto LABEL_260;
          }
        }
        uint64_t v103 = 1;
        if (!v8) {
          return v103;
        }
        goto LABEL_206;
      }
      if (*(int *)v18 <= 2048 && *(_DWORD *)(v18 + 4) == 1 && *(_DWORD *)(v18 + 8) == 1) {
        goto LABEL_184;
      }
LABEL_194:
      int v102 = *a2;
      unsigned int v16 = a2[1];
      v170[0] = v102;
      v170[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v157, "reduce_kernel: invalid reduce bottom shape");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v157, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v170, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_197;
    }
    BOOL v22 = v19 != 7 || *(_DWORD *)(v18 + 8) < 2049;
    if (v18 == *((void *)a3 + 1) || (uint64_t v23 = (_OWORD *)*((void *)a3 + 3), v23 == *((_OWORD **)a3 + 4)))
    {
LABEL_182:
      if (v22)
      {
        unsigned int v17 = *(_DWORD *)(a1 + 280);
        goto LABEL_184;
      }
      goto LABEL_194;
    }
    int v25 = *(_DWORD *)v18;
    int v24 = *(_DWORD *)(v18 + 4);
    long long v26 = v23[1];
    uint64_t v27 = (__CFString *)*((void *)v23 + 4);
    *(_OWORD *)float v157 = *v23;
    long long v158 = v26;
    float v159 = v27;
    double v160 = 0;
    uint64_t v161 = 0;
    uint64_t v162 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v160, *((const void **)v23 + 5), *((void *)v23 + 6), (uint64_t)(*((void *)v23 + 6) - *((void *)v23 + 5)) >> 2);
    uint64_t v28 = *(void *)a3;
    uint64_t v29 = *(void *)(*(void *)a3 + 32);
    long long v30 = *(_OWORD *)(*(void *)a3 + 16);
    *(_OWORD *)uint64_t v198 = *(_OWORD *)*(void *)a3;
    *(_OWORD *)&v198[16] = v30;
    *(void *)&v198[32] = v29;
    long long v199 = 0;
    BOOL v200 = 0;
    uint64_t v201 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v199, *(const void **)(v28 + 40), *(void *)(v28 + 48), (uint64_t)(*(void *)(v28 + 48) - *(void *)(v28 + 40)) >> 2);
    int v31 = *(_DWORD *)v198;
    if (~*(_DWORD *)v198 + LODWORD(v157[0]) + v25 < 1)
    {
      int v65 = *(_DWORD *)&v198[4];
      if (~*(_DWORD *)&v198[4] + HIDWORD(v157[0]) + v24 < 1)
      {
        if (*(int *)v198 >= v25)
        {
          if (*(int *)&v198[4] >= v24)
          {
            float v141 = (void *)*((void *)a3 + 6);
            int v142 = *(long long **)(*v141 + 224 * *((void *)a3 + 9) + 136);
            if (*((char *)v142 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)v142, *((void *)v142 + 1));
              float v141 = (void *)*((void *)a3 + 6);
            }
            else
            {
              long long v143 = *v142;
              v155.__r_.__value_.__r.__words[2] = *((void *)v142 + 2);
              *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v143;
            }
            int v144 = (std::__shared_weak_count *)v141[10];
            if (v144 && (uint64_t v145 = std::__shared_weak_count::lock(v144)) != 0)
            {
              unsigned int v153 = v145;
              uint64_t v146 = v141[9];
            }
            else
            {
              uint64_t v146 = 0;
              unsigned int v153 = 0;
            }
            Espresso::ANECompilerEngine::ane_arch_allow_network_override(v146 + 472);
            int v152 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
            uint64_t v147 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v146 + 360), &v155);
            if (a3[16] <= 1) {
              int v149 = 1;
            }
            else {
              int v149 = a3[16];
            }
            if (v147)
            {
              v168.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
              int v150 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v146 + 352), &v155, (uint64_t)&std::piecewise_construct, (long long **)&v168);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v150 + 56);
              v194[1] = 0;
              __p.__r_.__value_.__r.__words[2] = 0;
              v194[0] = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v150 + 9), *((void *)v150 + 10), (uint64_t)(*((void *)v150 + 10) - *((void *)v150 + 9)) >> 2);
              if (LODWORD(__p.__r_.__value_.__r.__words[1]) == -1) {
                int v149 = 1;
              }
              else {
                int v149 = __p.__r_.__value_.__r.__words[1];
              }
              int v151 = v152;
              if (__p.__r_.__value_.__r.__words[2])
              {
                v194[0] = *((void *)&__p.__r_.__value_.__l + 2);
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
            }
            else
            {
              int v151 = v152;
            }
            if (v149 == 1) {
              Espresso::ANECompilerEngine::is_mix(v151, v148);
            }

            if (v153) {
              nitro::nitro_function::nitro_function(v153);
            }
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v155.__r_.__value_.__l.__data_);
            }
            LOBYTE(v32) = 1;
LABEL_177:
            if (v199)
            {
              BOOL v200 = v199;
              operator delete(v199);
            }
            if (v160)
            {
              uint64_t v161 = v160;
              operator delete(v160);
            }
            if ((v32 & 1) == 0)
            {
              uint64_t v105 = *a2;
              unsigned int v16 = a2[1];
              v171[0] = v105;
              v171[1] = v16;
              if (v16) {
                atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(v157, "reduce_kernel: invalid reduce bottom shape for spatial reduce.");
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v157, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(v171, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
              goto LABEL_197;
            }
            goto LABEL_182;
          }
          uint64_t v32 = a2[1];
          v175[0] = *a2;
          v175[1] = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->i64[1], 1uLL, memory_order_relaxed);
          }
          std::to_string(&v189, v65);
          uint64_t v128 = std::string::insert(&v189, 0, "Input height ");
          long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          v190.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          unsigned int v130 = std::string::append(&v190, " plus vertical padding ");
          long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
          v191.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v131;
          v130->__r_.__value_.__l.__size_ = 0;
          v130->__r_.__value_.__r.__words[2] = 0;
          v130->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v188, 0);
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v132 = &v188;
          }
          else {
            int v132 = (std::string *)v188.__r_.__value_.__r.__words[0];
          }
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v188.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v188.__r_.__value_.__l.__size_;
          }
          int v134 = std::string::append(&v191, (const std::string::value_type *)v132, size);
          long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
          v192.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v135;
          v134->__r_.__value_.__l.__size_ = 0;
          v134->__r_.__value_.__r.__words[2] = 0;
          v134->__r_.__value_.__r.__words[0] = 0;
          unint64_t v136 = std::string::append(&v192, " is less than the kernel height ");
          long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          v168.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v187, v24);
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v138 = &v187;
          }
          else {
            uint64_t v138 = (std::string *)v187.__r_.__value_.__r.__words[0];
          }
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v139 = v187.__r_.__value_.__l.__size_;
          }
          id v140 = std::string::append(&v168, (const std::string::value_type *)v138, v139);
          std::string v155 = *v140;
          v140->__r_.__value_.__l.__size_ = 0;
          v140->__r_.__value_.__r.__words[2] = 0;
          v140->__r_.__value_.__r.__words[0] = 0;
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v155, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v175, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        }
        else
        {
          uint64_t v32 = a2[1];
          v176[0] = *a2;
          v176[1] = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->i64[1], 1uLL, memory_order_relaxed);
          }
          std::to_string(&v189, v31);
          id v106 = std::string::insert(&v189, 0, "Input width ");
          long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          v190.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          int v108 = std::string::append(&v190, " plus horizontal padding ");
          long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v191.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v188, 0);
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v110 = &v188;
          }
          else {
            uint64_t v110 = (std::string *)v188.__r_.__value_.__r.__words[0];
          }
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v111 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v111 = v188.__r_.__value_.__l.__size_;
          }
          unint64_t v112 = std::string::append(&v191, (const std::string::value_type *)v110, v111);
          long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v192.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          uint64_t v114 = std::string::append(&v192, " is less than the kernel width ");
          long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v168.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v187, v25);
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v116 = &v187;
          }
          else {
            uint64_t v116 = (std::string *)v187.__r_.__value_.__r.__words[0];
          }
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v117 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v117 = v187.__r_.__value_.__l.__size_;
          }
          uint64_t v118 = std::string::append(&v168, (const std::string::value_type *)v116, v117);
          std::string v155 = *v118;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v155, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v176, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          if (v196) {
            nitro::nitro_function::nitro_function(v196);
          }
          v186.__r_.__value_.__r.__words[0] = (std::string::size_type)v195;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
          v186.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v187.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v168.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v192.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v188.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v191.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v190.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_175:
          if (v32)
          {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32);
            LOBYTE(v32) = 0;
          }
          goto LABEL_177;
        }
        uint64_t v97 = (void *)v189.__r_.__value_.__r.__words[0];
LABEL_174:
        operator delete(v97);
        goto LABEL_175;
      }
      uint64_t v32 = a2[1];
      v177[0] = *a2;
      v177[1] = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->i64[1], 1uLL, memory_order_relaxed);
      }
      std::to_string(&v183, v65);
      unint64_t v66 = std::string::insert(&v183, 0, "Declared bottom pad less than derived value for src_h=");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v184.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      unint64_t v68 = std::string::append(&v184, " dst_h=");
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v182, SHIDWORD(v157[0]));
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v70 = &v182;
      }
      else {
        unint64_t v70 = (std::string *)v182.__r_.__value_.__r.__words[0];
      }
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v71 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v71 = v182.__r_.__value_.__l.__size_;
      }
      unint64_t v72 = std::string::append(&v185, (const std::string::value_type *)v70, v71);
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v186.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      int v74 = std::string::append(&v186, " stride_y=");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v187.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v181, 1);
      if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v76 = &v181;
      }
      else {
        float v76 = (std::string *)v181.__r_.__value_.__r.__words[0];
      }
      if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v77 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v77 = v181.__r_.__value_.__l.__size_;
      }
      __int16 v78 = std::string::append(&v187, (const std::string::value_type *)v76, v77);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v188.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      unint64_t v80 = std::string::append(&v188, " Ny=");
      long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v189.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v180, v24);
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v82 = &v180;
      }
      else {
        uint64_t v82 = (std::string *)v180.__r_.__value_.__r.__words[0];
      }
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v83 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v83 = v180.__r_.__value_.__l.__size_;
      }
      char v84 = std::string::append(&v189, (const std::string::value_type *)v82, v83);
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v190.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      int v86 = std::string::append(&v190, " pad_t=");
      long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v191.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v179, 0);
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v88 = &v179;
      }
      else {
        uint64_t v88 = (std::string *)v179.__r_.__value_.__r.__words[0];
      }
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v89 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v89 = v179.__r_.__value_.__l.__size_;
      }
      int v90 = std::string::append(&v191, (const std::string::value_type *)v88, v89);
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v192.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      float v92 = std::string::append(&v192, " pad_b");
      long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v168.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v178, 0);
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v94 = &v178;
      }
      else {
        int v94 = (std::string *)v178.__r_.__value_.__r.__words[0];
      }
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v95 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v95 = v178.__r_.__value_.__l.__size_;
      }
      uint64_t v96 = std::string::append(&v168, (const std::string::value_type *)v94, v95);
      std::string v155 = *v96;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v155, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v177, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    else
    {
      uint64_t v32 = a2[1];
      v197[0] = *a2;
      v197[1] = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->i64[1], 1uLL, memory_order_relaxed);
      }
      std::to_string(&v183, v31);
      char v33 = std::string::insert(&v183, 0, "Declared right pad less than derived value for src_w=");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v184.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      int v35 = std::string::append(&v184, " dst_w=");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v182, (int)v157[0]);
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v37 = &v182;
      }
      else {
        int v37 = (std::string *)v182.__r_.__value_.__r.__words[0];
      }
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v182.__r_.__value_.__l.__size_;
      }
      unint64_t v39 = std::string::append(&v185, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v186.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      uint64_t v41 = std::string::append(&v186, " stride_x=");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v187.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v181, 1);
      if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v43 = &v181;
      }
      else {
        unint64_t v43 = (std::string *)v181.__r_.__value_.__r.__words[0];
      }
      if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v44 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v44 = v181.__r_.__value_.__l.__size_;
      }
      uint64_t v45 = std::string::append(&v187, (const std::string::value_type *)v43, v44);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v188.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      unint64_t v47 = std::string::append(&v188, " Nx=");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v189.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v180, v25);
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v49 = &v180;
      }
      else {
        uint64_t v49 = (std::string *)v180.__r_.__value_.__r.__words[0];
      }
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v50 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v50 = v180.__r_.__value_.__l.__size_;
      }
      int v51 = std::string::append(&v189, (const std::string::value_type *)v49, v50);
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v190.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      uint64_t v53 = std::string::append(&v190, " pad_l=");
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v191.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v179, 0);
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v55 = &v179;
      }
      else {
        std::string::size_type v55 = (std::string *)v179.__r_.__value_.__r.__words[0];
      }
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v56 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v56 = v179.__r_.__value_.__l.__size_;
      }
      float v57 = std::string::append(&v191, (const std::string::value_type *)v55, v56);
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v192.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      char v59 = std::string::append(&v192, " pad_r=");
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v168.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v178, 0);
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v61 = &v178;
      }
      else {
        std::string::size_type v61 = (std::string *)v178.__r_.__value_.__r.__words[0];
      }
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v62 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v62 = v178.__r_.__value_.__l.__size_;
      }
      int v63 = std::string::append(&v168, (const std::string::value_type *)v61, v62);
      std::string v155 = *v63;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v155, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v197, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    if (v196) {
      nitro::nitro_function::nitro_function(v196);
    }
    v202[0] = (void **)v195;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v202);
    v202[0] = (void **)v194;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v202);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v155.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v178.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v168.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v192.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v179.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v190.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v180.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v189.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v188.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v187.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v186.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v182.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v184.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_175;
    }
    uint64_t v97 = (void *)v183.__r_.__value_.__r.__words[0];
    goto LABEL_174;
  }
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  v174[0] = *a2;
  v174[1] = (int64x2_t *)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v157, "reduce_kernel: detected zero bottom blob");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v157, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v174, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v196) {
    nitro::nitro_function::nitro_function(v196);
  }
  *(void *)uint64_t v198 = v195;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
  *(void *)uint64_t v198 = v194;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v158) < 0) {
    operator delete(v157[0]);
  }
LABEL_205:
  uint64_t v103 = 0;
  if (v8) {
LABEL_206:
  }
    nitro::nitro_function::nitro_function(v8);
  return v103;
}

void sub_192742554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  uint64_t v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(void *)(v27 - 128) = v29;
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECReductionLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 656 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        int v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 82;
    }
    while (v6 != a2);
  }
}

void sub_192742B5C(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::reduce_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::reduce_kernel::~reduce_kernel(Espresso::ANECompilerEngine::reduce_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::reduce_kernel *)((char *)this + 328));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::reduce_kernel *)((char *)this + 328));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::dev_op_kernel::~dev_op_kernel(Espresso::ANECompilerEngine::dev_op_kernel *this)
{
  uint64_t v1 = (void **)((char *)this - 416);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  void **v1;
  uint64_t vars8;

  uint64_t v1 = (void **)((char *)this - 416);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v1);
}

void Espresso::ANECompilerEngine::dev_op_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::dev_op_kernel::~dev_op_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::ane_kernel *)(this + 52));
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::ane_kernel *)(this + 52));

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::broadcast_kernel::~broadcast_kernel(Espresso::ANECompilerEngine::broadcast_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::broadcast_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::broadcast_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::broadcast_kernel::compile(Espresso::ANECompilerEngine::broadcast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::broadcast_kernel::compile(Espresso::ANECompilerEngine::broadcast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4
    || (std::string::size_type v111 = std::__shared_weak_count::lock(v4)) == 0
    || (uint64_t v7 = (Espresso::ANECompilerEngine *)*((void *)a2 + 1)) == 0)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*((void *)v7 + 72)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v152.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)v152.__r_.__value_.__l.__data_, (long long **)&v152)+ 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v109 = v8;
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)a3, (long long **)&v152);
  uint64_t v11 = *((void *)v9 + 5);
  int v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v121, (id *)a3);
  v152.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  char v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)v152.__r_.__value_.__l.__data_, (long long **)&v152);
  Espresso::abstract_blob_container::shape(v115, *((void *)v13 + 5));
  if (Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(v7, v14))
  {
    if (*((int *)this + 74) >= 2 && v118 == 1 || *((int *)this + 73) >= 2 && v117 == 1) {
      goto LABEL_141;
    }
  }
  else if (*((int *)this + 74) > 0 || *((int *)this + 73) > 0 || *((int *)this + 71) > 0 || *((int *)this + 70) > 0)
  {
LABEL_141:
    long long v75 = "Unsupported axis for broadcast.";
    goto LABEL_144;
  }
  if (v116 != 1 || *((_DWORD *)this + 72) > *((_DWORD *)this + 134))
  {
    long long v75 = "Unsupported channel count for broadcast.";
LABEL_144:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(v75);
  }
  [v12 setObject:@"Conv" forKeyedSubscript:@"Type"];
  [v12 setObject:@"Unity" forKeyedSubscript:@"KernelMode"];
  [v12 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"KernelWidth"];
  [v12 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"KernelHeight"];
  if (*((_DWORD *)a3 + 26) == 1) {
    char v15 = @"Float16";
  }
  else {
    char v15 = @"Int8";
  }
  [v12 setObject:v15 forKeyedSubscript:@"KernelType"];
  [v12 setObject:&unk_1EE3AF118 forKeyedSubscript:@"Step"];
  [v12 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadTop"];
  [v12 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadBot"];
  [v12 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadLeft"];
  [v12 setObject:&unk_1EE3AEE18 forKeyedSubscript:@"PadRight"];
  [v12 setObject:@"Zero" forKeyedSubscript:@"PaddingMode"];
  unsigned int v16 = v128;
  uint64_t v128 = @"Conv";

  LODWORD(v130) = *((_DWORD *)this + 72);
  HIDWORD(v130) = 1;
  objc_storeStrong(&v129, v12);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v152, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v121);
  long long v158 = v128;
  id v159 = v129;
  uint64_t v160 = v130;
  long long v113 = 0;
  unint64_t v114 = 0;
  unint64_t v112 = 0;
  *(void *)long long buf = &v112;
  uint8_t buf[8] = 0;
  unint64_t v112 = (std::string *)operator new(0x90uLL);
  long long v113 = v112;
  unint64_t v114 = (unint64_t)&v112[6];
  long long v113 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v114, (uint64_t)&v152, (uint64_t)&__str, (uint64_t)v112);

  if (v156 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v154;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v152);
  id v159 = 0;
  long long v158 = 0;
  uint64_t v160 = 0x100000000;
  uint64_t v18 = *((void *)this + 48);
  unsigned int v17 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 40) + 104))() + 40))
  {
    float v19 = *(float *)(v11 + 112);
    v134[0] = v18;
    v134[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v20 = (std::__shared_weak_count *)*((void *)this + 51);
    v133[0] = *((void *)this + 50);
    v133[1] = (uint64_t)v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v134, v133, (uint64_t)&v135, v19);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    uint64_t v21 = *(unsigned int *)(v18 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v131, 2 * v21, 1, 1, 1);
    uint64_t v22 = (int)v21;
    uint64_t v23 = *((void *)this + 50);
    int v24 = v21;
    if (v23) {
      int v24 = *(_DWORD *)(v23 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      int v107 = v24;
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v21);
      float v76 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v21 >= 1)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          float v78 = *(float *)(*(void *)(v18 + 16) + i * 4);
          *(float *)&int v79 = ldexp(1.0, -v139) * v78;
          v76[i] = v79;
        }
      }
      if (v21)
      {
        unint64_t v80 = *(_WORD **)(v131 + 16);
        do
        {
          int v81 = *v76++;
          _S0 = v81;
          __asm { FCVT            H0, S0 }
          *v80++ = _S0;
          --v22;
        }
        while (v22);
      }
      if (*((void *)this + 50))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v107);
        uint64_t v84 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v107);
        uint64_t v104 = *(void *)buf;
        long long v85 = *(int **)(v84 + 16);
        if (v107 >= 1)
        {
          for (uint64_t j = 0; j != v107; ++j)
          {
            int v87 = v21 - 1;
            if ((int)v21 - 1 >= (int)j) {
              int v87 = j;
            }
            *(float *)&int v88 = *(float *)(*(void *)(v137 + 16) + 4 * j) * *(float *)(*(void *)(v135 + 16) + 4 * v87);
            v85[j] = v88;
            unsigned int v89 = v140;
            unsigned int v90 = v139;
            *(float *)&int v91 = ldexp(1.0, v140 - v139) * *(float *)&v88;
            v85[j] = v91;
            float v94 = ldexp(1.0, v90 - v89) * *(float *)&v91;
            if (v94 < -127.0 || v94 > 255.0)
            {
              uint64_t v96 = Espresso::espresso_os_log_subsystem(v92, v93);
              if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
              {
                double v97 = *(float *)&v85[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v94;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v140;
                __int16 v142 = 1024;
                int v143 = v139;
                __int16 v144 = 2048;
                double v145 = v97;
                _os_log_error_impl(&dword_1920CB000, v96, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v107)
        {
          uint64_t v98 = v107;
          unsigned int v99 = *(_WORD **)(v104 + 16);
          do
          {
            int v100 = *v85++;
            _S0 = v100;
            __asm { FCVT            H0, S0 }
            *v99++ = _S0;
            --v98;
          }
          while (v98);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v25 = v140;
    uint64_t v26 = v131;
    if (v21)
    {
      uint64_t v27 = *(int **)(v135 + 16);
      uint64_t v28 = *(_WORD **)(v131 + 16);
      do
      {
        int v29 = *v27++;
        _S0 = v29;
        __asm { FCVT            H0, S0 }
        *v28++ = _S0;
        --v22;
      }
      while (v22);
    }
    unsigned int v102 = v25;
    if (v23)
    {
      int v35 = v24;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v24, 1, 1, 1);
      id v106 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v103 = *(void *)buf;
      if (v35)
      {
        uint64_t v36 = v35;
        int v37 = *(_WORD **)(*(void *)buf + 16);
        std::string::size_type v38 = *(int **)(v137 + 16);
        do
        {
          int v39 = *v38++;
          _S0 = v39;
          __asm { FCVT            H0, S0 }
          *v37++ = _S0;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      id v106 = 0;
      uint64_t v103 = 0;
    }
    int v105 = *((unsigned __int8 *)a2 + 552);
    uint64_t v41 = v132;
    if (v132) {
      atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v42 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v26 + 16), *(int *)(v26 + 8));
    if (v41) {
      nitro::nitro_function::nitro_function(v41);
    }
    obuint64_t j = objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v43 = (id)v112[5].__r_.__value_.__l.__size_;

      obuint64_t j = v43;
    }
    uint64_t v110 = objc_opt_new();
    std::string::size_type v44 = [NSNumber numberWithInt:v21];
    [v110 setObject:v44 forKeyedSubscript:@"ScaleCount"];

    uint64_t v45 = [NSNumber numberWithInt:v42];
    [v110 setObject:v45 forKeyedSubscript:@"ScaleOffset"];

    long long v46 = NSNumber;
    if (v105) {
      uint64_t weights_file_index = 0;
    }
    else {
    long long v48 = [v46 numberWithUnsignedLong:weights_file_index];
    }
    [v110 setObject:v48 forKeyedSubscript:@"ScaleIndex"];

    [v110 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v49 = [NSNumber numberWithInt:v139];
    [obj setObject:v49 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 50))
    {
      if (v106) {
        atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v50 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v103 + 16), *(int *)(v103 + 8));
      if (v106) {
        nitro::nitro_function::nitro_function(v106);
      }
      int v51 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 50) + 8)];
      [v110 setObject:v51 forKeyedSubscript:@"BiasCount"];

      long long v52 = [NSNumber numberWithInt:v50];
      [v110 setObject:v52 forKeyedSubscript:@"BiasOffset"];

      uint64_t v53 = NSNumber;
      if (v105) {
        uint64_t v54 = 0;
      }
      else {
      std::string::size_type v55 = [v53 numberWithUnsignedLong:v54];
      }
      [v110 setObject:v55 forKeyedSubscript:@"BiasIndex"];

      [v110 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      std::string::size_type v56 = [NSNumber numberWithInt:v102];
      [obj setObject:v56 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v110 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    float v57 = v113;
    if (v113 == v112) {
      goto LABEL_96;
    }
    long long v58 = v113 - 6;
    uint64_t v59 = HIBYTE(v113[-6].__r_.__value_.__r.__words[2]);
    char v60 = v59;
    std::string::size_type size = v113[-6].__r_.__value_.__l.__size_;
    if ((v59 & 0x80u) == 0) {
      std::string::size_type v62 = HIBYTE(v113[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v62 = v113[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v63 = HIBYTE(v143);
    if (v143 < 0) {
      uint64_t v63 = *(void *)&buf[8];
    }
    if (v62 != v63) {
      goto LABEL_90;
    }
    if (v143 >= 0) {
      int v64 = buf;
    }
    else {
      int v64 = *(unsigned __int8 **)buf;
    }
    if ((char)v59 < 0)
    {
      std::string::pointer data = (const std::string::value_type *)v58->__r_.__value_.__r.__words[0];
      if (memcmp(v58->__r_.__value_.__l.__data_, v64, v113[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_93;
      }
    }
    else if ((_BYTE)v59)
    {
      int v65 = v113 - 6;
      while (v65->__r_.__value_.__s.__data_[0] == *v64)
      {
        int v65 = (std::string *)((char *)v65 + 1);
        ++v64;
        if (!--v59) {
          goto LABEL_89;
        }
      }
      goto LABEL_90;
    }
LABEL_89:
    std::string::append(v57 - 6, "__@pre_scale_bias");
    char v60 = HIBYTE(v57[-6].__r_.__value_.__r.__words[2]);
LABEL_90:
    if ((v60 & 0x80) == 0)
    {
      long long v67 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v57[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v67;
      goto LABEL_94;
    }
    std::string::pointer data = v57[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v57[-6].__r_.__value_.__l.__size_;
LABEL_93:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_94:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v146, &__str, &v162, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_96:
    unint64_t v68 = v150;
    int v150 = @"GOC";

    objc_storeStrong(&v151, obj);
    if (!*((unsigned char *)a2 + 121))
    {
      long long v69 = v113;
      if ((unint64_t)v113 >= v114)
      {
        unint64_t v71 = 0x8E38E38E38E38E39 * (((char *)v113 - (char *)v112) >> 4);
        if (v71 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v72 = 0x1C71C71C71C71C72 * ((uint64_t)(v114 - (void)v112) >> 4);
        if (v72 <= v71 + 1) {
          unint64_t v72 = v71 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v114 - (void)v112) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v73 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v73 = v72;
        }
        *((void *)&v162 + 1) = &v114;
        if (v73) {
          unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v73);
        }
        else {
          uint64_t v74 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v73;
        __str.__r_.__value_.__l.__size_ = v73 + 144 * v71;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v162 = v73 + 144 * v74;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v112, &__str);
        unint64_t v70 = v113;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v113, (uint64_t)buf);
        unint64_t v70 = v69 + 6;
      }
      long long v113 = v70;
    }

    if (v148 < 0) {
      operator delete(v147);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v143) < 0) {
      operator delete(*(void **)buf);
    }

    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
    if (v132) {
      nitro::nitro_function::nitro_function(v132);
    }
    if (v138) {
      nitro::nitro_function::nitro_function(v138);
    }
    if (v136) {
      nitro::nitro_function::nitro_function(v136);
    }
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }

  if (v156 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v154;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v111);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 40) + 32))((char *)this + 320, a2, &v112);
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  if (v119)
  {
    long long v120 = v119;
    operator delete(v119);
  }

  if (v126 < 0) {
    operator delete(v125);
  }
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  if (v122 < 0) {
    operator delete(v121[0]);
  }

  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v109) {
    nitro::nitro_function::nitro_function(v109);
  }
  nitro::nitro_function::nitro_function(v111);
}

void sub_192743CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,id a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  nitro::nitro_function::nitro_function(a20);
  a61 = (uint64_t)&a21;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a32);

  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  nitro::nitro_function::nitro_function(a20);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::broadcast_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_broadcast_kernel::kernel_type_str(Espresso::generic_broadcast_kernel *this)
{
  return "broadcast";
}

BOOL Espresso::generic_broadcast_kernel::has_dynamic_top_shape(Espresso::generic_broadcast_kernel *this, unint64_t a2)
{
  return a2 >= 2 && *((unsigned char *)this + 312) != 0;
}

uint64_t Espresso::ANECompilerEngine::broadcast_kernel::is_valid_for_engine(int *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3[6];
  int v5 = *(std::__shared_weak_count **)(v4 + 80);
  if (!v5
    || (unint64_t v9 = std::__shared_weak_count::lock(v5)) == 0
    || (int v10 = *(Espresso::ANECompilerEngine **)(v4 + 72)) == 0)
  {
    Espresso::throw_exception_selector<Espresso::generic_error>("Null pointer in broadcast validation");
  }
  uint64_t v11 = (_DWORD *)*a3;
  if (Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(v10, v8))
  {
    if (a1[74] >= 2 && v11[4] == 1 || a1[73] >= 2 && v11[3] == 1)
    {
      int v12 = *(int64x2_t **)a2;
      uint64_t v13 = *(void *)(a2 + 8);
      v29[0] = v12;
      v29[1] = (int64x2_t *)v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v23, "Cannot broadcast along seq or batch");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v29, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_19:
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      long long v30 = (void **)&v27;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v30);
      long long v30 = (void **)&v26;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_23;
    }
  }
  else if (a1[74] > 0 || a1[73] > 0 || a1[71] > 0 || a1[70] >= 1)
  {
    BOOL v14 = *(int64x2_t **)a2;
    uint64_t v13 = *(void *)(a2 + 8);
    v22[0] = v14;
    v22[1] = (int64x2_t *)v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "Cannot broadcast along seq, n, h, w");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v22, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_19;
  }
  if (v11[2] != 1)
  {
    unsigned int v17 = *(int64x2_t **)a2;
    uint64_t v13 = *(void *)(a2 + 8);
    v21[0] = v17;
    v21[1] = (int64x2_t *)v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "Bottom number of channels has to be 1.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_19;
  }
  if (a1[72] > a1[134])
  {
    unsigned int v16 = *(int64x2_t **)a2;
    uint64_t v13 = *(void *)(a2 + 8);
    v20[0] = v16;
    v20[1] = (int64x2_t *)v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "Channel broadcast size exceeds limit");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v20, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_19;
  }
  if (a1[77] != 1)
  {
    uint64_t v13 = 1;
    goto LABEL_27;
  }
  uint64_t v18 = *(int64x2_t **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  v19[0] = v18;
  v19[1] = (int64x2_t *)v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "nd_mode not supported for broadcast.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v19, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_23:
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v13)
  {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    uint64_t v13 = 0;
  }
LABEL_27:
  nitro::nitro_function::nitro_function(v9);
  return v13;
}

void sub_1927442F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a23);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  nitro::nitro_function::nitro_function(v23);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::broadcast_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::broadcast_kernel::~broadcast_kernel(Espresso::ANECompilerEngine::broadcast_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::broadcast_kernel *)((char *)this + 320));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::broadcast_kernel *)((char *)this + 320));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::softmax_kernel::~softmax_kernel(Espresso::ANECompilerEngine::softmax_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::softmax_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::softmax_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::softmax_kernel::compile(Espresso::ANECompilerEngine::softmax_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::softmax_kernel::compile(Espresso::ANECompilerEngine::softmax_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

uint64_t Espresso::ANECompilerEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v4 = a3[6];
  int v5 = *(std::__shared_weak_count **)(v4 + 80);
  if (!v5 || (v8 = std::__shared_weak_count::lock(v5)) == 0 || (uint64_t v9 = *(void *)(v4 + 72)) == 0) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Null pointer in softmax validation");
  }
  int v10 = *(unsigned __int8 *)(a1 + 304) | *(unsigned __int8 *)(a1 + 306);
  if (!*(_DWORD *)(a1 + 300))
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "experimental.ane.enable_scenenet_optimizations");
    std::string::basic_string[abi:ne180100]<0>(v27, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v9 + 472, (uint64_t)&v29, (uint64_t)v27, &__p);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(v27, "allowSoftmaxApproximation");
    std::string::basic_string[abi:ne180100]<0>(v25, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v9 + 472, (uint64_t)v27, (uint64_t)v25, &v29);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 1) {
        goto LABEL_32;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_32;
      }
      p_p = &__p;
    }
    if (p_p->__r_.__value_.__s.__data_[0] == 49)
    {
      BOOL v15 = 1;
      char v16 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      goto LABEL_37;
    }
LABEL_32:
    char v16 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if (v29.__r_.__value_.__l.__size_ != 1)
      {
        BOOL v18 = 0;
LABEL_51:
        operator delete(v17);
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_52;
        }
        goto LABEL_44;
      }
    }
    else
    {
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) != 1)
      {
        BOOL v18 = 0;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_52;
        }
LABEL_44:
        if (!v18) {
          goto LABEL_6;
        }
LABEL_45:
        uint64_t v13 = 1;
        goto LABEL_46;
      }
      unsigned int v17 = &v29;
    }
    BOOL v15 = v17->__r_.__value_.__s.__data_[0] == 49;
LABEL_37:
    if (*(int *)(*a3 + 8) > 4096) {
      BOOL v15 = 0;
    }
    if (v10) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v15;
    }
    if ((v16 & 0x80) == 0)
    {
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_44;
      }
LABEL_52:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v18) {
        goto LABEL_6;
      }
      goto LABEL_45;
    }
    unsigned int v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
    goto LABEL_51;
  }
  if (!v10) {
    goto LABEL_45;
  }
LABEL_6:
  uint64_t v11 = *a2;
  int v12 = a2[1];
  v24[0] = v11;
  v24[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "Softmax unsupported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v24, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  v27[0] = (void **)&v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v27);
  v27[0] = (void **)&v21;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v12) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
  }
  uint64_t v13 = 0;
LABEL_46:
  nitro::nitro_function::nitro_function(v8);
  return v13;
}

void sub_19274479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  nitro::nitro_function::nitro_function(v34);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::softmax_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::softmax_kernel::~softmax_kernel(Espresso::ANECompilerEngine::softmax_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::softmax_kernel *)((char *)this + 312));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::softmax_kernel *)((char *)this + 312));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::cast_kernel::~cast_kernel(Espresso::ANECompilerEngine::cast_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::cast_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::cast_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::cast_kernel::compile(Espresso::ANECompilerEngine::cast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::cast_kernel::compile(Espresso::ANECompilerEngine::cast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

const char *Espresso::generic_cast_kernel::kernel_type_str(Espresso::generic_cast_kernel *this)
{
  return "cast";
}

BOOL Espresso::ANECompilerEngine::cast_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v9 = v8;
    char v10 = 0;
    uint64_t v11 = *(uint64_t ***)(v6 + 72);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    char v10 = 1;
  }
  uint64_t v12 = *a3;
  uint64_t v13 = *(void *)(*a3 + 32);
  long long v14 = *(_OWORD *)(*a3 + 16);
  v42[0] = *(_OWORD *)*a3;
  v42[1] = v14;
  uint64_t v43 = v13;
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v44, *(const void **)(v12 + 40), *(void *)(v12 + 48), (uint64_t)(*(void *)(v12 + 48) - *(void *)(v12 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v47, (const Espresso::net *)v11, (const Espresso::layer_shape *)v42, 1);
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if ((v10 & 1) == 0) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = a3[3];
  uint64_t v16 = *(void *)(v15 + 32);
  long long v17 = *(_OWORD *)(v15 + 16);
  v36[0] = *(_OWORD *)v15;
  v36[1] = v17;
  uint64_t v37 = v16;
  std::string __p = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v41, (const Espresso::net *)v11, (const Espresso::layer_shape *)v36, 1);
  if (__p)
  {
    int v39 = __p;
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  BOOL v18 = *(long long **)(*(void *)a3[6] + 224 * a3[9] + 136);
  if (*((char *)v18 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    v35.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v19;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v11[45], &v35))
  {
    uint64_t v32 = &v35;
    int v20 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11 + 44, &v35, (uint64_t)&std::piecewise_construct, (long long **)&v32);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 56);
    v28[0] = 0;
    v28[1] = 0;
    v27.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27.__r_.__value_.__r.__words[2], *((const void **)v20 + 9), *((void *)v20 + 10), (uint64_t)(*((void *)v20 + 10) - *((void *)v20 + 9)) >> 2);
    if (v27.__r_.__value_.__r.__words[2])
    {
      v28[0] = *((void *)&v27.__r_.__value_.__l + 2);
      operator delete((void *)v27.__r_.__value_.__r.__words[2]);
    }
  }
  unsigned int v21 = *(_DWORD *)(a1 + 280);
  if (v21 <= 4 && ((1 << v21) & 0x16) != 0)
  {
    LOBYTE(v32) = 1;
LABEL_24:
    uint64_t v22 = "Success";
    goto LABEL_25;
  }
  if (!v21 && *(unsigned char *)(*(void *)a3[6] + 224 * a3[9] + 104))
  {
    LOBYTE(v32) = 1;
    goto LABEL_24;
  }
  LOBYTE(v32) = 0;
  uint64_t v22 = "Destination compute_path has to be among FP16, Int8 and Uint8";
LABEL_25:
  std::string::basic_string[abi:ne180100]<0>(v33, v22);
  int v23 = v32;
  if (!(_BYTE)v32)
  {
    char v24 = *a2;
    unsigned int v25 = a2[1];
    v31[0] = v24;
    v31[1] = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v27, (long long *)v33, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v31, (Espresso::base_kernel::validate_for_engine_warning_t *)&v27);
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    long long v48 = (void **)&v29;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v48);
    long long v48 = (void **)v28;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v48);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v25) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v25);
    }
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (v10) {
      return v23 != 0;
    }
    goto LABEL_38;
  }
  if ((v10 & 1) == 0) {
LABEL_38:
  }
    nitro::nitro_function::nitro_function(v9);
  return v23 != 0;
}

void sub_192744D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a9);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if ((v47 & 1) == 0) {
    nitro::nitro_function::nitro_function(v45);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::cast_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::cast_kernel::~cast_kernel(Espresso::ANECompilerEngine::cast_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::cast_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::cast_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::tile_kernel::~tile_kernel(Espresso::ANECompilerEngine::tile_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::tile_kernel *)((char *)this - 304);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::tile_kernel *)((char *)this - 304);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::tile_kernel::compile(Espresso::ANECompilerEngine::tile_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::tile_kernel::compile(Espresso::ANECompilerEngine::tile_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

uint64_t Espresso::ANECompilerEngine::tile_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a1 + 292) > 1 || *(int *)(a1 + 296) >= 2)
  {
    uint64_t v6 = a2[1];
    v35[0] = *a2;
    v35[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "tile_kernel: tiling not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v37, &__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v35, (Espresso::base_kernel::validate_for_engine_warning_t *)v37);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    uint64_t v32 = (void **)v40;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v32);
    uint64_t v32 = (void **)&v37[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v32);
    if ((v37[23] & 0x80000000) != 0) {
      operator delete(*(void **)v37);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)__p);
    }
    goto LABEL_19;
  }
  uint64_t v7 = *(long long **)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 >= 0x41uLL)
  {
    uint64_t v6 = a2[1];
    v34[0] = *a2;
    v34[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "tile_kernel: dynamic tile not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v37, &__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v34, (Espresso::base_kernel::validate_for_engine_warning_t *)v37);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    uint64_t v32 = (void **)v40;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v32);
    uint64_t v32 = (void **)&v37[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v32);
    if ((v37[23] & 0x80000000) != 0) {
      operator delete(*(void **)v37);
    }
    if (SHIBYTE(v26) < 0)
    {
      operator delete((void *)__p);
      if (!v6) {
        return 0;
      }
      goto LABEL_20;
    }
LABEL_19:
    if (!v6) {
      return 0;
    }
LABEL_20:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
    return 0;
  }
  long long v30 = *(_OWORD *)(a1 + 280);
  int v31 = *(_DWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v37, "bottom");
  std::string::basic_string[abi:ne180100]<0>(&__p, "top");
  Espresso::ANECompilerEngine::tile_kernel::concat_decomposition((std::string::size_type)&v32, a1 + 8, (int *)&v30, (int *)v7, (uint64_t)v37, (uint64_t)&__p, *(_DWORD *)(a3 + 64));
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)__p);
  }
  if ((v37[23] & 0x80000000) != 0) {
    operator delete(*(void **)v37);
  }
  char v10 = v32;
  uint64_t v11 = v33;
  if (v32 == v33)
  {
LABEL_42:
    uint64_t v8 = 1;
  }
  else
  {
    while (1)
    {
      long long __p = 0uLL;
      uint64_t v26 = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&__p, *(long long **)a3, *(long long **)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 6);
      memset(v27, 0, 24);
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v27, *(long long **)(a3 + 24), *(long long **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6);
      uint64_t v12 = *(std::__shared_weak_count **)(a3 + 56);
      void v27[3] = *(void *)(a3 + 48);
      char v28 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(a3 + 64);
      if (v10 + 2 != (void **)&__p) {
        std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)&__p, (long long *)v10[2], (long long *)v10[3], ((unsigned char *)v10[3] - (unsigned char *)v10[2]) >> 6);
      }
      long long v13 = *(_OWORD *)(v10 + 5);
      long long v14 = *(_OWORD *)(v10 + 7);
      std::string::size_type v38 = v10[9];
      *(_OWORD *)uint64_t v37 = v13;
      *(_OWORD *)&v37[16] = v14;
      v40[0] = 0;
      v40[1] = 0;
      int v39 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v39, v10[10], (uint64_t)v10[11], ((unsigned char *)v10[11] - (unsigned char *)v10[10]) >> 2);
      std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>(v27, (long long *)v37, &v41, 1uLL);
      if (v39)
      {
        v40[0] = v39;
        operator delete(v39);
      }
      uint64_t v15 = *v10;
      uint64_t v16 = (std::__shared_weak_count *)a2[1];
      int v23 = *a2;
      char v24 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v17 = (*(uint64_t (**)(void *, int64x2_t **, long long *))(*(void *)v15 + 200))(v15, &v23, &__p);
      if (v24) {
        nitro::nitro_function::nitro_function(v24);
      }
      if ((v17 & 1) == 0) {
        break;
      }
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      *(void *)uint64_t v37 = v27;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
      *(void *)uint64_t v37 = &__p;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
      v10 += 19;
      if (v10 == v11) {
        goto LABEL_42;
      }
    }
    BOOL v18 = *a2;
    long long v19 = a2[1];
    v22[0] = v18;
    v22[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "tile_kernel: decomposition error ^");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v37, (long long *)v20, a3, 0);
    Espresso::emit_kernel_validation_warning(v22, (Espresso::base_kernel::validate_for_engine_warning_t *)v37);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    uint64_t v36 = (void **)v40;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v36);
    uint64_t v36 = (void **)&v37[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v36);
    if ((v37[23] & 0x80000000) != 0) {
      operator delete(*(void **)v37);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v19) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v19);
    }
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    *(void *)uint64_t v37 = v27;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
    *(void *)uint64_t v37 = &__p;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
    uint64_t v8 = 0;
  }
  *(void *)uint64_t v37 = &v32;
  std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v8;
}

void sub_192745414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v38 - 224));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((Espresso::base_kernel::validate_for_engine_args_t *)&a20);
  *(void *)(v38 - 224) = &a37;
  std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 224));
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::tile_kernel::concat_decomposition(std::string::size_type a1, uint64_t a2, int *a3, int *a4, uint64_t a5, uint64_t a6, int a7)
{
  v152[0] = *MEMORY[0x1E4F143B8];
  int v136 = a7;
  int v12 = *a3;
  if (*a3 == 1)
  {
    int v13 = a3[1];
    if (v13 == 1 && a3[2] == 1)
    {
      LODWORD(v138) = 0;
      uint64_t v132 = 0;
      *(_OWORD *)&v130[48] = 0u;
      long long v131 = 0u;
      long long v129 = 0u;
      memset(v130, 0, 28);
      *(void *)&long long v14 = 0x100000001;
      *((void *)&v14 + 1) = 0x100000001;
      *(_OWORD *)&v130[28] = v14;
      *(_DWORD *)&v130[44] = -1;
      long long v133 = 0u;
      long long v134 = 0u;
      long long v135 = 0u;
      Espresso::abstract_engine_factory::shared(&v128);
      uint64_t v15 = v128.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v141, "copy");
      LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v15, a2, (uint64_t)v141, (uint64_t)&v138, (int *)&__str);
      long long v16 = *(_OWORD *)&v137.__first_;
      *(_OWORD *)&v137.__first_ = 0uLL;
      char v17 = (std::__shared_weak_count *)*((void *)&v129 + 1);
      long long v129 = v16;
      if (v17)
      {
        nitro::nitro_function::nitro_function(v17);
        if (v137.__begin_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v137.__begin_);
        }
      }
      if ((v141[23] & 0x80000000) != 0) {
        operator delete(*(void **)v141);
      }
      if (v128.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v128.__r_.__value_.__l.__size_);
      }
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v141, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else
      {
        *(_OWORD *)float v141 = *(_OWORD *)a5;
        *(void *)&v141[16] = *(void *)(a5 + 16);
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v133, (std::string *)v141, (long long *)&v141[24], 1uLL);
      if ((v141[23] & 0x80000000) != 0) {
        operator delete(*(void **)v141);
      }
      long long v100 = *((_OWORD *)a4 + 1);
      *(_OWORD *)float v141 = *(_OWORD *)a4;
      *(_OWORD *)&v141[16] = v100;
      uint64_t v101 = (const void *)*((void *)a4 + 5);
      std::string::size_type v142 = *((void *)a4 + 4);
      int v143 = 0;
      __int16 v144 = 0;
      uint64_t v145 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v143, v101, *((void *)a4 + 6), (uint64_t)(*((void *)a4 + 6) - (void)v101) >> 2);
      std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)v130, (long long *)v141, &v146, 1uLL);
      if (v143)
      {
        __int16 v144 = v143;
        operator delete(v143);
      }
      std::string::operator=((std::string *)((char *)&v134 + 8), (const std::string *)a6);
      long long v102 = *((_OWORD *)a4 + 1);
      *(_OWORD *)&v130[24] = *(_OWORD *)a4;
      *(_OWORD *)&v130[40] = v102;
      *(void *)&v130[56] = *((void *)a4 + 4);
      if (&v130[24] != (unsigned char *)a4) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v131, *((char **)a4 + 5), *((void *)a4 + 6), (uint64_t)(*((void *)a4 + 6) - *((void *)a4 + 5)) >> 2);
      }
      Espresso::ANECompilerEngine::decomposition_node::decomposition_node((Espresso::ANECompilerEngine::decomposition_node *)v141, (const Espresso::ANECompilerEngine::decomposition_node *)&v129);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      v137.__first_ = (std::__split_buffer<std::string>::pointer)a1;
      LOBYTE(v137.__begin_) = 0;
      uint64_t v103 = (char *)operator new(0x98uLL);
      *(void *)a1 = v103;
      *(void *)(a1 + 8) = v103;
      *(void *)(a1 + 16) = v103 + 152;
      *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>(a1 + 16, (uint64_t)v141, (uint64_t)v152, (uint64_t)v103);
      if (v151 < 0) {
        operator delete(v150);
      }
      v137.__first_ = (std::__split_buffer<std::string>::pointer)v149;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
      if (v147)
      {
        char v148 = v147;
        operator delete(v147);
      }
      v137.__first_ = (std::__split_buffer<std::string>::pointer)&v141[16];
      uint64_t v104 = (void ***)&v137;
LABEL_190:
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v104);
      if (*(void *)&v141[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v141[8]);
      }
      if (SHIBYTE(v135) < 0) {
        operator delete(*((void **)&v134 + 1));
      }
      *(void *)float v141 = &v133;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v141);
      if ((void)v131)
      {
        *((void *)&v131 + 1) = v131;
        operator delete((void *)v131);
      }
      *(void *)float v141 = v130;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v141);
      if (*((void *)&v129 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v129 + 1));
      }
      return;
    }
    int v18 = *a4;
    goto LABEL_20;
  }
  int v18 = *a4;
  if (v12 < 2 || v18 == 1)
  {
    int v13 = a3[1];
LABEL_20:
    int v20 = a4[1];
    if (v13 < 2 || v20 == 1)
    {
      int v22 = a3[2];
      int v23 = a4[2];
      if (v22 < 2 || v23 == 1)
      {
        int v25 = a3[3];
        int v26 = a4[3];
        if (v25 < 2 || v26 == 1)
        {
          int v27 = a3[4];
          int v28 = a4[4];
          if (v27 < 2 || v28 == 1)
          {
            LOBYTE(v137.__end_cap_.__value_) = 0;
            HIDWORD(v137.__end_cap_.__value_) = 0;
            LOBYTE(v137.__end_cap_.__value_) = 0;
            int v105 = v18 * v12;
            if (v12 <= 1) {
              int v106 = -1;
            }
            else {
              int v106 = v105;
            }
            if (v13 <= 1) {
              int v107 = -1;
            }
            else {
              int v107 = v20 * v13;
            }
            v137.__first_ = (std::__split_buffer<std::string>::pointer)__PAIR64__(v107, v106);
            int v108 = v23 * v22;
            if (v22 <= 1) {
              int v108 = -1;
            }
            int v109 = v26 * v25;
            if (v25 <= 1) {
              int v109 = -1;
            }
            v137.__begin_ = (std::__split_buffer<std::string>::pointer)__PAIR64__(v109, v108);
            unsigned int v110 = v28 * v27;
            if (v27 <= 1) {
              unsigned int v110 = -1;
            }
            v137.__end_ = (std::__split_buffer<std::string>::pointer)(v110 | 0xFFFFFFFF00000000);
            uint64_t v132 = 0;
            *(_OWORD *)&v130[48] = 0u;
            long long v131 = 0u;
            long long v129 = 0u;
            memset(v130, 0, 28);
            *(void *)&long long v111 = 0x100000001;
            *((void *)&v111 + 1) = 0x100000001;
            *(_OWORD *)&v130[28] = v111;
            *(_DWORD *)&v130[44] = -1;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            Espresso::abstract_engine_factory::shared(&v138);
            uint64_t v112 = v138;
            std::string::basic_string[abi:ne180100]<0>(v141, "broadcast");
            LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v112, a2, (uint64_t)v141, (uint64_t)&v137, (int *)&__str);
            long long v113 = *(_OWORD *)&v128.__r_.__value_.__l.__data_;
            *(_OWORD *)&v128.__r_.__value_.__l.__data_ = 0uLL;
            unint64_t v114 = (std::__shared_weak_count *)*((void *)&v129 + 1);
            long long v129 = v113;
            if (v114)
            {
              nitro::nitro_function::nitro_function(v114);
              if (v128.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v128.__r_.__value_.__l.__size_);
              }
            }
            if ((v141[23] & 0x80000000) != 0) {
              operator delete(*(void **)v141);
            }
            if (v139) {
              nitro::nitro_function::nitro_function(v139);
            }
            if (*(char *)(a5 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v141, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
            }
            else
            {
              *(_OWORD *)float v141 = *(_OWORD *)a5;
              *(void *)&v141[16] = *(void *)(a5 + 16);
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v133, (std::string *)v141, (long long *)&v141[24], 1uLL);
            if ((v141[23] & 0x80000000) != 0) {
              operator delete(*(void **)v141);
            }
            long long v115 = *((_OWORD *)a4 + 1);
            *(_OWORD *)float v141 = *(_OWORD *)a4;
            *(_OWORD *)&v141[16] = v115;
            int v116 = (const void *)*((void *)a4 + 5);
            std::string::size_type v142 = *((void *)a4 + 4);
            int v143 = 0;
            __int16 v144 = 0;
            uint64_t v145 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v143, v116, *((void *)a4 + 6), (uint64_t)(*((void *)a4 + 6) - (void)v116) >> 2);
            std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)v130, (long long *)v141, &v146, 1uLL);
            if (v143)
            {
              __int16 v144 = v143;
              operator delete(v143);
            }
            std::string::operator=((std::string *)((char *)&v134 + 8), (const std::string *)a6);
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v129 + 64))(v141);
            uint64_t v117 = *(void *)(*(void *)v141 + 32);
            long long v118 = *(_OWORD *)(*(void *)v141 + 16);
            *(_OWORD *)&v130[24] = **(_OWORD **)v141;
            *(_OWORD *)&v130[40] = v118;
            *(void *)&v130[56] = v117;
            if (&v130[24] != *(unsigned char **)v141) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v131, *(char **)(*(void *)v141 + 40), *(void *)(*(void *)v141 + 48), (uint64_t)(*(void *)(*(void *)v141 + 48) - *(void *)(*(void *)v141 + 40)) >> 2);
            }
            v128.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
            Espresso::ANECompilerEngine::decomposition_node::decomposition_node((Espresso::ANECompilerEngine::decomposition_node *)v141, (const Espresso::ANECompilerEngine::decomposition_node *)&v129);
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
            v128.__r_.__value_.__r.__words[0] = a1;
            v128.__r_.__value_.__s.__data_[8] = 0;
            id v119 = (char *)operator new(0x98uLL);
            *(void *)a1 = v119;
            *(void *)(a1 + 8) = v119;
            *(void *)(a1 + 16) = v119 + 152;
            *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>(a1 + 16, (uint64_t)v141, (uint64_t)v152, (uint64_t)v119);
            if (v151 < 0) {
              operator delete(v150);
            }
            v128.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
            if (v147)
            {
              char v148 = v147;
              operator delete(v147);
            }
            v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141[16];
            uint64_t v104 = (void ***)&v128;
            goto LABEL_190;
          }
        }
      }
    }
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v128 = *(std::string *)a5;
  }
  long long v29 = *((_OWORD *)a4 + 1);
  *(_OWORD *)float v141 = *(_OWORD *)a4;
  *(_OWORD *)&v141[16] = v29;
  long long v30 = (const void *)*((void *)a4 + 5);
  std::string::size_type v142 = *((void *)a4 + 4);
  int v143 = 0;
  __int16 v144 = 0;
  uint64_t v145 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v143, v30, *((void *)a4 + 6), (uint64_t)(*((void *)a4 + 6) - (void)v30) >> 2);
  uint64_t v31 = 0;
  uint64_t v32 = (std::__shared_weak_count *)(((unint64_t)a3[1] << 32) | 1);
  unint64_t v33 = ((unint64_t)a3[2] << 32) | 2;
  unint64_t v138 = (unint64_t)*a3 << 32;
  unsigned int v139 = v32;
  unint64_t v140 = v33;
  do
  {
    char v34 = &v138 + v31;
    unint64_t v35 = *((unsigned int *)v34 + 1);
    if ((int)v35 < 2) {
      goto LABEL_140;
    }
    int v36 = *(_DWORD *)v34;
    uint64_t v132 = 0;
    *(_OWORD *)&v130[48] = 0u;
    long long v131 = 0u;
    long long v129 = 0u;
    memset(v130, 0, 28);
    *(void *)&long long v37 = 0x100000001;
    *((void *)&v37 + 1) = 0x100000001;
    *(_OWORD *)&v130[28] = v37;
    *(_DWORD *)&v130[44] = -1;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    if (*(char *)(a6 + 23) >= 0) {
      size_t v38 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      size_t v38 = *(void *)(a6 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v137, v38 + 7);
    if (SHIBYTE(v137.__end_) >= 0) {
      first = &v137;
    }
    else {
      first = v137.__first_;
    }
    if (v38)
    {
      if (*(char *)(a6 + 23) >= 0) {
        uint64_t v40 = (const void *)a6;
      }
      else {
        uint64_t v40 = *(const void **)a6;
      }
      memmove(first, v40, v38);
    }
    strcpy((char *)first + v38, "__@axis");
    std::to_string(&v126, v36);
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v41 = &v126;
    }
    else {
      long long v41 = (std::string *)v126.__r_.__value_.__r.__words[0];
    }
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v126.__r_.__value_.__l.__size_;
    }
    uint64_t v43 = std::string::append((std::string *)&v137, (const std::string::value_type *)v41, size);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v126.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v137.__end_) < 0) {
      operator delete(v137.__first_);
    }
    __int16 v125 = 0;
    int v124 = v36;
    Espresso::abstract_engine_factory::shared(&v122);
    uint64_t v45 = v122;
    std::string::basic_string[abi:ne180100]<0>(&v137, "general_concat");
    int v121 = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v45, a2, (uint64_t)&v137, (uint64_t)&v124, &v121);
    long long v46 = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = 0uLL;
    char v47 = (std::__shared_weak_count *)*((void *)&v129 + 1);
    long long v129 = v46;
    if (v47)
    {
      nitro::nitro_function::nitro_function(v47);
      if (v126.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v126.__r_.__value_.__l.__size_);
      }
    }
    if (SHIBYTE(v137.__end_) < 0) {
      operator delete(v137.__first_);
    }
    if (v123) {
      nitro::nitro_function::nitro_function(v123);
    }
    long long v48 = (std::string *)*((void *)&v133 + 1);
    unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v133 + 1) - v133) >> 3);
    unint64_t v50 = v35 - v49;
    if (v35 > v49)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - *((void *)&v133 + 1)) >> 3) < v50)
      {
        v137.__end_cap_.__value_ = (std::allocator<std::string> *)&v134;
        unint64_t v51 = 0x5555555555555556 * ((uint64_t)(v134 - v133) >> 3);
        if (v51 <= v35) {
          unint64_t v51 = v35;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - v133) >> 3) >= 0x555555555555555) {
          unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v52 = v51;
        }
        uint64_t v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v52);
        uint64_t v54 = v53 + v49;
        v137.__first_ = v53;
        v137.__begin_ = v54;
        v137.__end_ = v54;
        v137.__end_cap_.__value_ = &v53[v55];
        std::string::size_type v56 = &v53[v35];
        uint64_t v57 = 24 * v35 - 24 * v49;
        do
        {
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v54, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v58 = *(_OWORD *)&v128.__r_.__value_.__l.__data_;
            v54->__r_.__value_.__r.__words[2] = v128.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v58;
          }
          ++v54;
          v57 -= 24;
        }
        while (v57);
        v137.__end_ = v56;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v133, &v137);
        std::__split_buffer<std::string>::~__split_buffer(&v137);
        goto LABEL_92;
      }
      uint64_t v59 = *((void *)&v133 + 1) + 24 * v50;
      uint64_t v60 = 24 * v35 - 8 * ((uint64_t)(*((void *)&v133 + 1) - v133) >> 3);
      do
      {
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v48, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v61 = *(_OWORD *)&v128.__r_.__value_.__l.__data_;
          v48->__r_.__value_.__r.__words[2] = v128.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v61;
        }
        ++v48;
        v60 -= 24;
      }
      while (v60);
      goto LABEL_91;
    }
    if (v35 < v49)
    {
      uint64_t v59 = v133 + 24 * v35;
      while (v48 != (std::string *)v59)
      {
        if (SHIBYTE(v48[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48[-1].__r_.__value_.__l.__data_);
        }
        --v48;
      }
LABEL_91:
      *((void *)&v133 + 1) = v59;
    }
LABEL_92:
    uint64_t v62 = *(void *)&v130[8];
    unint64_t v63 = (uint64_t)(*(void *)&v130[8] - *(void *)v130) >> 6;
    if (v35 <= v63)
    {
      if (v35 < v63)
      {
        unint64_t v73 = *(void *)v130 + (v35 << 6);
        while (v62 != v73)
        {
          uint64_t v74 = *(void **)(v62 - 24);
          if (v74)
          {
            *(void *)(v62 - 16) = v74;
            operator delete(v74);
          }
          v62 -= 64;
        }
        *(void *)&v130[8] = v73;
      }
    }
    else if (v35 - v63 <= (uint64_t)(*(void *)&v130[16] - *(void *)&v130[8]) >> 6)
    {
      unint64_t v75 = *(void *)&v130[8] + ((v35 - v63) << 6);
      unint64_t v76 = (v35 << 6) - (v63 << 6);
      do
      {
        long long v77 = *(_OWORD *)v141;
        long long v78 = *(_OWORD *)&v141[16];
        *(void *)(v62 + 32) = v142;
        *(_OWORD *)uint64_t v62 = v77;
        *(_OWORD *)(v62 + 16) = v78;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 40) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v62 + 40), v143, (uint64_t)v144, (v144 - v143) >> 2);
        v62 += 64;
        v76 -= 64;
      }
      while (v76);
      *(void *)&v130[8] = v75;
    }
    else
    {
      v137.__end_cap_.__value_ = (std::allocator<std::string> *)&v130[16];
      unint64_t v64 = (uint64_t)(*(void *)&v130[16] - *(void *)v130) >> 5;
      if (v64 <= v35) {
        unint64_t v64 = v35;
      }
      if (*(void *)&v130[16] - *(void *)v130 >= 0x7FFFFFFFFFFFFFC0uLL) {
        unint64_t v65 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v64;
      }
      unint64_t v66 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v65);
      long long v67 = (std::string *)((char *)v66 + 64 * v63);
      v137.__first_ = v66;
      v137.__begin_ = v67;
      v137.__end_ = v67;
      v137.__end_cap_.__value_ = (std::string *)((char *)v66 + 64 * v68);
      long long v69 = (std::string *)((char *)v66 + 64 * v35);
      unint64_t v70 = (v35 << 6) - (v63 << 6);
      do
      {
        long long v71 = *(_OWORD *)v141;
        long long v72 = *(_OWORD *)&v141[16];
        v67[1].__r_.__value_.__l.__size_ = v142;
        *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v71;
        *(_OWORD *)&v67->__r_.__value_.__r.__words[2] = v72;
        v67[2].__r_.__value_.__r.__words[0] = 0;
        v67[2].__r_.__value_.__l.__size_ = 0;
        v67[1].__r_.__value_.__r.__words[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v67[1].__r_.__value_.__r.__words[2], v143, (uint64_t)v144, (v144 - v143) >> 2);
        long long v67 = (std::string *)((char *)v67 + 64);
        v70 -= 64;
      }
      while (v70);
      v137.__end_ = v69;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)v130, &v137);
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v137);
    }
    std::string::operator=((std::string *)((char *)&v134 + 8), &__str);
    (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(void *)v129 + 64))(&v137);
    std::string::size_type v79 = v137.__first_[1].__r_.__value_.__l.__size_;
    long long v80 = *(_OWORD *)&v137.__first_->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v130[24] = *(_OWORD *)&v137.__first_->__r_.__value_.__l.__data_;
    *(_OWORD *)&v130[40] = v80;
    *(void *)&v130[56] = v79;
    if (&v130[24] != (unsigned char *)v137.__first_) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v131, (char *)v137.__first_[1].__r_.__value_.__r.__words[2], (uint64_t)v137.__first_[2].__r_.__value_.__l.__data_, (uint64_t)(v137.__first_[2].__r_.__value_.__r.__words[0] - v137.__first_[1].__r_.__value_.__r.__words[2]) >> 2);
    }
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    unint64_t v82 = *(void *)(a1 + 8);
    unint64_t v81 = *(void *)(a1 + 16);
    if (v82 >= v81)
    {
      unint64_t v84 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v82 - *(void *)a1) >> 3);
      unint64_t v85 = v84 + 1;
      if (v84 + 1 > 0x1AF286BCA1AF286) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v86 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v81 - *(void *)a1) >> 3);
      if (2 * v86 > v85) {
        unint64_t v85 = 2 * v86;
      }
      if (v86 >= 0xD79435E50D7943) {
        unint64_t v87 = 0x1AF286BCA1AF286;
      }
      else {
        unint64_t v87 = v85;
      }
      v137.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
      if (v87)
      {
        if (v87 > 0x1AF286BCA1AF286) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v88 = (std::string *)operator new(152 * v87);
      }
      else
      {
        int v88 = 0;
      }
      v137.__first_ = v88;
      v137.__begin_ = (std::string *)((char *)v88 + 152 * v84);
      v137.__end_ = v137.__begin_;
      v137.__end_cap_.__value_ = (std::string *)((char *)v88 + 152 * v87);
      Espresso::ANECompilerEngine::decomposition_node::decomposition_node((Espresso::ANECompilerEngine::decomposition_node *)v137.__begin_, (const Espresso::ANECompilerEngine::decomposition_node *)&v129);
      std::__split_buffer<std::string>::pointer begin = v137.__begin_;
      std::__split_buffer<std::string>::pointer end = (std::__split_buffer<std::string>::pointer)((char *)v137.__end_ + 152);
      v137.__end_ = (std::__split_buffer<std::string>::pointer)((char *)v137.__end_ + 152);
      uint64_t v91 = *(void *)a1;
      unint64_t v90 = *(void *)(a1 + 8);
      if (v90 == *(void *)a1)
      {
        int64x2_t v98 = vdupq_n_s64(v90);
      }
      else
      {
        uint64_t v92 = 0;
        do
        {
          long long v93 = (char *)begin + v92;
          uint64_t v94 = v90 + v92;
          *(_OWORD *)(v93 - 152) = *(_OWORD *)(v90 + v92 - 152);
          *(void *)(v94 - 152) = 0;
          *(void *)(v94 - 144) = 0;
          *((void *)v93 - 17) = 0;
          *((void *)v93 - 16) = 0;
          *((void *)v93 - 15) = 0;
          *(_OWORD *)(v93 - 136) = *(_OWORD *)(v90 + v92 - 136);
          *((void *)v93 - 15) = *(void *)(v90 + v92 - 120);
          *(void *)(v94 - 136) = 0;
          *(void *)(v94 - 128) = 0;
          *(void *)(v94 - 120) = 0;
          long long v95 = *(_OWORD *)(v90 + v92 - 96);
          uint64_t v96 = *(void *)(v90 + v92 - 80);
          *((_OWORD *)v93 - 7) = *(_OWORD *)(v90 + v92 - 112);
          *((_OWORD *)v93 - 6) = v95;
          *((void *)v93 - 10) = v96;
          *((void *)v93 - 9) = 0;
          *((void *)v93 - 8) = 0;
          *((void *)v93 - 7) = 0;
          *(_OWORD *)(v93 - 72) = *(_OWORD *)(v90 + v92 - 72);
          *((void *)v93 - 7) = *(void *)(v90 + v92 - 56);
          *(void *)(v94 - 72) = 0;
          *(void *)(v94 - 64) = 0;
          *(void *)(v94 - 56) = 0;
          *((void *)v93 - 6) = 0;
          *((void *)v93 - 5) = 0;
          *((void *)v93 - 4) = 0;
          *((_OWORD *)v93 - 3) = *(_OWORD *)(v90 + v92 - 48);
          *((void *)v93 - 4) = *(void *)(v90 + v92 - 32);
          *(void *)(v94 - 48) = 0;
          *(void *)(v94 - 40) = 0;
          *(void *)(v94 - 32) = 0;
          long long v97 = *(_OWORD *)(v90 + v92 - 24);
          *((void *)v93 - 1) = *(void *)(v90 + v92 - 8);
          *(_OWORD *)(v93 - 24) = v97;
          *(void *)(v94 - 16) = 0;
          *(void *)(v94 - 8) = 0;
          *(void *)(v94 - 24) = 0;
          v92 -= 152;
        }
        while (v90 + v92 != v91);
        std::__split_buffer<std::string>::pointer begin = (std::__split_buffer<std::string>::pointer)((char *)begin + v92);
        int64x2_t v98 = *(int64x2_t *)a1;
        std::__split_buffer<std::string>::pointer end = v137.__end_;
      }
      *(void *)a1 = begin;
      *(void *)(a1 + 8) = end;
      *(int64x2_t *)&v137.__begin_ = v98;
      unsigned int v99 = *(std::string **)(a1 + 16);
      *(void *)(a1 + 16) = v137.__end_cap_.__value_;
      v137.__end_cap_.__value_ = v99;
      v137.__first_ = (std::__split_buffer<std::string>::pointer)v98.i64[0];
      std::__split_buffer<Espresso::ANECompilerEngine::decomposition_node>::~__split_buffer((uint64_t)&v137);
    }
    else
    {
      Espresso::ANECompilerEngine::decomposition_node::decomposition_node(*(Espresso::ANECompilerEngine::decomposition_node **)(a1 + 8), (const Espresso::ANECompilerEngine::decomposition_node *)&v129);
      std::__split_buffer<std::string>::pointer end = (std::__split_buffer<std::string>::pointer)(v82 + 152);
      *(void *)(a1 + 8) = v82 + 152;
    }
    *(void *)(a1 + 8) = end;
    std::string::operator=(&v128, &__str);
    *(_OWORD *)float v141 = *(_OWORD *)&v130[24];
    *(_OWORD *)&v141[16] = *(_OWORD *)&v130[40];
    std::string::size_type v142 = *(void *)&v130[56];
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v143, (char *)v131, *((uint64_t *)&v131 + 1), (uint64_t)(*((void *)&v131 + 1) - v131) >> 2);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v135) < 0) {
      operator delete(*((void **)&v134 + 1));
    }
    v137.__first_ = (std::__split_buffer<std::string>::pointer)&v133;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
    if ((void)v131)
    {
      *((void *)&v131 + 1) = v131;
      operator delete((void *)v131);
    }
    v137.__first_ = (std::__split_buffer<std::string>::pointer)v130;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
    if (*((void *)&v129 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v129 + 1));
    }
LABEL_140:
    ++v31;
  }
  while (v31 != 3);
  std::string::operator=((std::string *)(*(void *)(a1 + 8) - 24), (const std::string *)a6);
  if (v143)
  {
    __int16 v144 = v143;
    operator delete(v143);
  }
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
}

void sub_1927464C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__pa,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__split_buffer<std::string> *a56)
{
}

void std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  int v5 = a2;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *a1;
  if (a4 > (a1[2] - *a1) >> 6)
  {
    std::vector<Espresso::layer_shape>::__vdeallocate(a1);
    uint64_t v9 = a1[2] - *a1;
    uint64_t v10 = v9 >> 5;
    if ((unint64_t)(v9 >> 5) <= 1) {
      uint64_t v10 = 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(v7, v5, a3, a1[1]);
    goto LABEL_10;
  }
  uint64_t v13 = a1[1];
  if (a4 > (v13 - v8) >> 6)
  {
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), a2, a3, a1[1]);
LABEL_10:
    a1[1] = v12;
    return;
  }
  if (a2 != a3)
  {
    do
    {
      long long v14 = *v5;
      long long v15 = v5[1];
      *(void *)(v8 + 32) = *((void *)v5 + 4);
      *(_OWORD *)uint64_t v8 = v14;
      *(_OWORD *)(v8 + 16) = v15;
      if (v5 != (long long *)v8) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v8 + 40), *((char **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
      }
      v5 += 4;
      v8 += 64;
    }
    while (v5 != a3);
    uint64_t v13 = a1[1];
  }
  while (v13 != v8)
  {
    long long v16 = *(void **)(v13 - 24);
    if (v16)
    {
      *(void *)(v13 - 16) = v16;
      operator delete(v16);
    }
    v13 -= 64;
  }
  a1[1] = v8;
}

void sub_192746854(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  uint64_t v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 16);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

Espresso::ANECompilerEngine::decomposition_node *Espresso::ANECompilerEngine::decomposition_node::decomposition_node(Espresso::ANECompilerEngine::decomposition_node *this, const Espresso::ANECompilerEngine::decomposition_node *a2)
{
  *(void *)this = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((void *)this + 2, *((long long **)a2 + 2), *((long long **)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 6);
  long long v5 = *(_OWORD *)((char *)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 56);
  uint64_t v7 = *((void *)a2 + 9);
  *((void *)this + 10) = 0;
  *((void *)this + 9) = v7;
  *(_OWORD *)((char *)this + 56) = v6;
  *(_OWORD *)((char *)this + 40) = v5;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)this + 13, *((void *)a2 + 13), *((void *)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3));
  uint64_t v8 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 8);
    *((void *)this + 18) = *((void *)a2 + 18);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_192746A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v6 = *(std::__shared_weak_count **)(v2 + 8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      Espresso::ANECompilerEngine::decomposition_node::decomposition_node((Espresso::ANECompilerEngine::decomposition_node *)(a4 + v7), (const Espresso::ANECompilerEngine::decomposition_node *)(a2 + v7));
      v7 += 152;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void Espresso::ANECompilerEngine::decomposition_node::~decomposition_node(void **this)
{
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  uint64_t v4 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = this[10];
  if (v2)
  {
    this[11] = v2;
    operator delete(v2);
  }
  uint64_t v4 = this + 2;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v3 = (std::__shared_weak_count *)this[1];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

uint64_t std::__split_buffer<Espresso::ANECompilerEngine::decomposition_node>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100](i - 152);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::ANECompilerEngine::tile_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::tile_kernel::~tile_kernel(Espresso::ANECompilerEngine::tile_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::tile_kernel *)((char *)this + 304));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::tile_kernel *)((char *)this + 304));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::tunneled_ane_op_kernel::~tunneled_ane_op_kernel(Espresso::ANECompilerEngine::tunneled_ane_op_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::tunneled_ane_op_kernel *)((char *)this - 560);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(void *)uint64_t v1 = &unk_1EE356848;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(v2 - 280));
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::tunneled_ane_op_kernel *)((char *)this - 560);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(void *)uint64_t v1 = &unk_1EE356848;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(v2 - 280));

  Espresso::base_kernel::~base_kernel(v1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::tunneled_ane_op_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_tunneled_ane_op_kernel::kernel_type_str(Espresso::generic_tunneled_ane_op_kernel *this)
{
  return "tunneled_ane_op";
}

uint64_t Espresso::ANECompilerEngine::tunneled_ane_op_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::ANECompilerEngine::tunneled_ane_op_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::tunneled_ane_op_kernel::~tunneled_ane_op_kernel(Espresso::ANECompilerEngine::tunneled_ane_op_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::tunneled_ane_op_kernel *)((char *)this + 560));
  *(void *)this = &unk_1EE356848;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::ANECompilerEngine::tunneled_ane_op_kernel *)((char *)this + 280));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::tunneled_ane_op_kernel *)((char *)this + 560));
  *(void *)this = &unk_1EE356848;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::ANECompilerEngine::tunneled_ane_op_kernel *)((char *)this + 280));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::~tunneled_ane_unit_kernel(Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *)((char *)this - 456);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(void *)uint64_t v1 = &unk_1EE3569A0;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t((void **)(v2 - 176));
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *)((char *)this - 456);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(void *)uint64_t v1 = &unk_1EE3569A0;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t((void **)(v2 - 176));

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::compile(int **this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::compile(int **this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4
    || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0
    || (uint64_t v8 = (const Espresso::net *)*((void *)a2 + 1)) == 0)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*((void *)v8 + 72)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)*((void *)a3 + 6);
  uint64_t v137 = (uint64_t)v8 + 136;
  long long v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)__v.__first_, (long long **)&__v)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)a3;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v137, (unsigned __int8 *)a3, (long long **)&__v);
  uint64_t v12 = *((void *)v10 + 5);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v135 = v11;
  uint64_t v176 = 0;
  id v177 = 0;
  unint64_t v178 = 0;
  memset(&v175, 0, sizeof(v175));
  std::vector<std::string>::reserve(&v175, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 3));
  long long v131 = a2;
  uint64_t v133 = v12;
  long long v134 = v9;
  unsigned int v139 = v7;
  uint64_t v13 = *((void *)a3 + 6);
  int v136 = (Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *)this;
  if (*((void *)a3 + 7) == v13)
  {
    long long v14 = 0;
    long long v15 = 0;
  }
  else
  {
    unint64_t v138 = 0;
    long long v14 = 0;
    long long v15 = 0;
    unint64_t v16 = 0;
    do
    {
      __v.__first_ = (std::__split_buffer<std::string>::pointer)(v13 + 24 * v16);
      char v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v137, (unsigned __int8 *)__v.__first_, (long long **)&__v);
      uint64_t v18 = *((void *)v17 + 5);
      long long v19 = (std::__shared_weak_count *)*((void *)v17 + 6);
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      Espresso::abstract_blob_container::shape(v172, v18);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v140, v8, (const Espresso::layer_shape *)v172, 1);
      if (__p)
      {
        char v174 = __p;
        operator delete(__p);
      }
      nitro::nitro_function::nitro_function(v139);
      int v20 = this[41];
      if (v16 >= ((char *)this[42] - (char *)v20) >> 5) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (LOBYTE(v20[8 * v16]))
      {
        memset(&v179, 0, sizeof(v179));
      }
      else
      {
        if (*(_DWORD *)&v140[28] == -1 || *(_DWORD *)&v140[28] == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__v, "DNCHW");
        }
        else
        {
          if (*(_DWORD *)&v140[28]) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel encountered unexpected layout from espresso.");
          }
          std::string::basic_string[abi:ne180100]<0>(&__v, "NCDHW");
        }
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
      }
      char v21 = v177;
      if ((unint64_t)v177 >= v178)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v177 - v176) >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v178 - v176) >> 3) > v24) {
          unint64_t v24 = 0x5555555555555556 * ((uint64_t)(v178 - v176) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - v176) >> 3) >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v24;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v178;
        int v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v25);
        int v27 = v26 + v23;
        __v.__first_ = v26;
        __v.__begin_ = v27;
        __v.__end_cap_.__value_ = &v26[v28];
        *int v27 = v179;
        __v.__end_ = v27 + 1;
        std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v176, &__v);
        int v22 = v177;
        std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&__v);
      }
      else
      {
        *id v177 = v179;
        int v22 = v21 + 1;
      }
      id v177 = v22;
      if ((unint64_t)v14 >= v138)
      {
        uint64_t v30 = (v14 - v15) >> 5;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 59) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v138 - (void)v15) >> 4 > v31) {
          unint64_t v31 = (uint64_t)(v138 - (void)v15) >> 4;
        }
        if (v138 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32) {
          unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v32);
        }
        else {
          uint64_t v33 = 0;
        }
        char v34 = (_OWORD *)(v32 + 32 * v30);
        _OWORD *v34 = *(_OWORD *)v140;
        v34[1] = *(_OWORD *)&v140[16];
        if (v14 == v15)
        {
          long long v37 = (char *)(v32 + 32 * v30);
        }
        else
        {
          unint64_t v35 = v32 + 32 * v30;
          do
          {
            long long v36 = *((_OWORD *)v14 - 1);
            long long v37 = (char *)(v35 - 32);
            *(_OWORD *)(v35 - 32) = *((_OWORD *)v14 - 2);
            *(_OWORD *)(v35 - 16) = v36;
            v14 -= 32;
            v35 -= 32;
          }
          while (v14 != v15);
        }
        unint64_t v138 = v32 + 32 * v33;
        long long v14 = (char *)(v34 + 2);
        if (v15) {
          operator delete(v15);
        }
        long long v15 = v37;
      }
      else
      {
        long long v29 = *(_OWORD *)&v140[16];
        *(_OWORD *)long long v14 = *(_OWORD *)v140;
        *((_OWORD *)v14 + 1) = v29;
        v14 += 32;
      }
      if (v177[-1].__r_.__value_.__l.__size_ == v177[-1].__r_.__value_.__r.__words[0])
      {
        uint64_t v50 = *((void *)a3 + 6) + 24 * v16;
        std::vector<std::string>::pointer end = v175.__end_;
        if (v175.__end_ >= v175.__end_cap_.__value_)
        {
          uint64_t v57 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v175, v50);
        }
        else
        {
          if (*(char *)(v50 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v175.__end_, *(const std::string::value_type **)v50, *(void *)(v50 + 8));
          }
          else
          {
            long long v52 = *(_OWORD *)v50;
            v175.__end_->__r_.__value_.__r.__words[2] = *(void *)(v50 + 16);
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v52;
          }
          uint64_t v57 = end + 1;
        }
        v175.__end_ = v57;
      }
      else
      {
        size_t v38 = v8;
        if (*((char *)a3 + 23) >= 0) {
          size_t v39 = *((unsigned __int8 *)a3 + 23);
        }
        else {
          size_t v39 = *((void *)a3 + 1);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v179, v39 + 29);
        if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v40 = &v179;
        }
        else {
          uint64_t v40 = (std::string *)v179.__r_.__value_.__r.__words[0];
        }
        if (v39)
        {
          if (*((char *)a3 + 23) >= 0) {
            long long v41 = a3;
          }
          else {
            long long v41 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
          }
          memmove(v40, v41, v39);
        }
        strcpy((char *)v40 + v39, "__generated_bottom_transpose_");
        std::to_string(&v169, v16);
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v42 = &v169;
        }
        else {
          uint64_t v42 = (std::string *)v169.__r_.__value_.__r.__words[0];
        }
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v169.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v169.__r_.__value_.__l.__size_;
        }
        long long v44 = std::string::append(&v179, (const std::string::value_type *)v42, size);
        uint64_t v45 = (char *)v44->__r_.__value_.__r.__words[0];
        *(void *)&long long v182 = v44->__r_.__value_.__l.__size_;
        *(void *)((char *)&v182 + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
        char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::vector<std::string>::pointer v47 = v175.__end_;
        if (v175.__end_ >= v175.__end_cap_.__value_)
        {
          unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)v175.__end_ - (char *)v175.__begin_) >> 3);
          unint64_t v54 = v53 + 1;
          if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v175.__end_cap_.__value_ - (char *)v175.__begin_) >> 3) > v54) {
            unint64_t v54 = 0x5555555555555556 * (((char *)v175.__end_cap_.__value_ - (char *)v175.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v175.__end_cap_.__value_ - (char *)v175.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v55 = v54;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v175.__end_cap_;
          if (v55) {
            unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v55);
          }
          else {
            uint64_t v56 = 0;
          }
          unint64_t v58 = v55 + 24 * v53;
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v55;
          __v.__begin_ = (std::__split_buffer<std::string>::pointer)v58;
          __v.__end_cap_.__value_ = (std::string *)(v55 + 24 * v56);
          uint64_t v59 = v182;
          *(void *)unint64_t v58 = v45;
          *(void *)(v58 + 8) = v59;
          *(void *)(v58 + 15) = *(void *)((char *)&v182 + 7);
          *(unsigned char *)(v58 + 23) = v46;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)(v58 + 24);
          std::vector<std::string>::__swap_out_circular_buffer(&v175, &__v);
          unint64_t v49 = v175.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          this = (int **)v136;
        }
        else
        {
          std::string::size_type v48 = v182;
          v175.__end_->__r_.__value_.__l.__data_ = v45;
          v47->__r_.__value_.__l.__size_ = v48;
          *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v182 + 7);
          *((unsigned char *)&v47->__r_.__value_.__s + 23) = v46;
          unint64_t v49 = v47 + 1;
        }
        v175.__end_ = v49;
        uint64_t v8 = v38;
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v169.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v179.__r_.__value_.__l.__data_);
        }
      }
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      ++v16;
      uint64_t v13 = *((void *)a3 + 6);
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)a3 + 7) - v13) >> 3));
  }
  atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_blob_container::shape(v166, v133);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v169, v8, (const Espresso::layer_shape *)v166, 1);
  if (v167)
  {
    std::string v168 = v167;
    operator delete(v167);
  }
  nitro::nitro_function::nitro_function(v139);
  uint64_t v60 = this[44];
  if (this[45] == v60) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  memset(&__v, 0, 24);
  unint64_t v61 = *v60;
  if (v61 == -1)
  {
    std::string::operator=((std::string *)&__v, (const std::string *)(v60 + 2));
  }
  else
  {
    uint64_t v62 = this[41];
    if (v61 >= ((char *)this[42] - (char *)v62) >> 5) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    if (LOBYTE(v62[8 * v61]))
    {
      if (v61 >= (v14 - v15) >> 5) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v63 = *(_DWORD *)&v15[32 * v61 + 28] + 1;
      if (v63 >= 3) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel encountered unexpected layout from espresso.");
      }
      MEMORY[0x192FF0F50](&__v, off_1E5746EE8[v63]);
    }
    else
    {
      std::string::operator=((std::string *)&__v, (const std::string *)&v62[8 * v61 + 2]);
    }
  }
  memset(v140, 0, 24);
  if ((v171 + 1) >= 3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel encountered unexpected layout from espresso top.");
  }
  MEMORY[0x192FF0F50](v140, off_1E5746EE8[v171 + 1]);
  if ((v140[23] & 0x80000000) != 0) {
    operator delete(*(void **)v140);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  unint64_t v165 = 0;
  uint64_t v64 = *((void *)a3 + 6);
  uint64_t v65 = *((void *)a3 + 7);
  if (v65 != v64)
  {
    unint64_t v66 = 0;
    unint64_t v67 = 0;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v177 - v176) >> 3) <= v67) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (*(void *)(v176 + v66 + 8) != *(void *)(v176 + v66))
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v175.__end_ - (char *)v175.__begin_) >> 3) <= v67) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&__v, v64 + v66, &v175.__begin_[v66 / 0x18], *((_DWORD *)a3 + 18), 1, @"Float16", (unsigned int **)(v176 + v66), (std::string *)((char *)a3 + 80));
        uint64_t v68 = v164;
        if ((unint64_t)v164 >= v165)
        {
          unint64_t v74 = 0x8E38E38E38E38E39 * (((uint64_t)v164 - v163) >> 4);
          unint64_t v75 = v74 + 1;
          if (v74 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(v165 - v163) >> 4) > v75) {
            unint64_t v75 = 0x1C71C71C71C71C72 * ((uint64_t)(v165 - v163) >> 4);
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v165 - v163) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v76 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v76 = v75;
          }
          *(void *)&v140[32] = &v165;
          long long v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v76);
          long long v78 = &v77[144 * v74];
          *(void *)unint64_t v140 = v77;
          *(void *)&v140[8] = v78;
          *(void *)&unsigned char v140[24] = &v77[144 * v79];
          long long v80 = *(_OWORD *)&__v.__first_;
          *((void *)v78 + 2) = __v.__end_;
          *(_OWORD *)long long v78 = v80;
          memset(&__v, 0, 24);
          *((void *)v78 + 3) = 0;
          *((void *)v78 + 4) = 0;
          *((void *)v78 + 5) = 0;
          *(std::__compressed_pair<std::string *> *)(v78 + 24) = __v.__end_cap_;
          *((void *)v78 + 5) = v153;
          __v.__end_cap_.__value_ = 0;
          __v.__end_cap_.__value_ = 0;
          std::string::size_type v153 = 0;
          *((void *)v78 + 6) = 0;
          *((void *)v78 + 7) = 0;
          *((void *)v78 + 8) = 0;
          *((_OWORD *)v78 + 3) = v154;
          *((void *)v78 + 8) = v155;
          long long v154 = 0uLL;
          std::string::size_type v155 = 0;
          *((_DWORD *)v78 + 18) = v156;
          long long v81 = v157;
          *((void *)v78 + 12) = v158;
          *((_OWORD *)v78 + 5) = v81;
          std::string::size_type v158 = 0;
          long long v157 = 0uLL;
          *((_DWORD *)v78 + 26) = v159;
          long long v82 = v160;
          long long v160 = 0uLL;
          *((_OWORD *)v78 + 7) = v82;
          id v83 = v161;
          id v161 = 0;
          *((void *)v78 + 16) = v83;
          *((void *)v78 + 17) = v162;
          *(void *)&v140[16] = v78 + 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v163, v140);
          unint64_t v73 = v164;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v140);
        }
        else
        {
          long long v69 = *(_OWORD *)&__v.__first_;
          v164->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
          v68[1].__r_.__value_.__r.__words[0] = 0;
          *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
          __v.__first_ = 0;
          __v.__begin_ = 0;
          v68[1].__r_.__value_.__l.__size_ = 0;
          v68[1].__r_.__value_.__r.__words[2] = 0;
          *(std::__compressed_pair<std::string *> *)&v68[1].__r_.__value_.__l.__data_ = __v.__end_cap_;
          __v.__end_cap_.__value_ = 0;
          __v.__end_cap_.__value_ = 0;
          v68[1].__r_.__value_.__r.__words[2] = v153;
          v68[2].__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v153 = 0;
          v68[2].__r_.__value_.__l.__size_ = 0;
          v68[2].__r_.__value_.__r.__words[2] = 0;
          *(_OWORD *)&v68[2].__r_.__value_.__l.__data_ = v154;
          v68[2].__r_.__value_.__r.__words[2] = v155;
          long long v154 = 0uLL;
          std::string::size_type v155 = 0;
          LODWORD(v68[3].__r_.__value_.__l.__data_) = v156;
          long long v70 = v157;
          v68[4].__r_.__value_.__r.__words[0] = v158;
          *(_OWORD *)&v68[3].__r_.__value_.__r.__words[1] = v70;
          std::string::size_type v158 = 0;
          long long v157 = 0uLL;
          LODWORD(v68[4].__r_.__value_.__r.__words[1]) = v159;
          long long v71 = v160;
          long long v160 = 0uLL;
          __v.__end_ = 0;
          *(_OWORD *)&v68[4].__r_.__value_.__r.__words[2] = v71;
          std::string::size_type v72 = (std::string::size_type)v161;
          id v161 = 0;
          v68[5].__r_.__value_.__l.__size_ = v72;
          v68[5].__r_.__value_.__r.__words[2] = v162;
          unint64_t v73 = v68 + 6;
        }
        uint64_t v164 = v73;

        if (SHIBYTE(v158) < 0) {
          operator delete((void *)v157);
        }
        *(void *)unint64_t v140 = &v154;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v140);
        *(void *)unint64_t v140 = &__v.__end_cap_;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v140);
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        uint64_t v64 = *((void *)a3 + 6);
        uint64_t v65 = *((void *)a3 + 7);
      }
      ++v67;
      v66 += 24;
    }
    while (v67 < 0xAAAAAAAAAAAAAAABLL * ((v65 - v64) >> 3));
  }
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string __str = *(std::string *)a3;
  }
  unint64_t v84 = (char *)v136 + 424;
  if ((*((char *)v136 + 447) & 0x80000000) == 0)
  {
    int v85 = *((unsigned __int8 *)v136 + 447);
    if (v85 != 4)
    {
      if (v85 != 5)
      {
        if (v85 != 7) {
          goto LABEL_224;
        }
        goto LABEL_147;
      }
      goto LABEL_154;
    }
LABEL_161:
    if (*(_DWORD *)v84 != 947154505) {
      goto LABEL_224;
    }
    unint64_t v90 = @"Int8";
    int v91 = 2;
    goto LABEL_163;
  }
  uint64_t v86 = *((void *)v136 + 54);
  if (v86 == 4)
  {
    unint64_t v84 = *(char **)v84;
    goto LABEL_161;
  }
  if (v86 != 5)
  {
    if (v86 != 7) {
      goto LABEL_224;
    }
    unint64_t v84 = *(char **)v84;
LABEL_147:
    int v87 = *(_DWORD *)v84;
    int v88 = *(_DWORD *)(v84 + 3);
    if (v87 != 1634692166 || v88 != 909210721) {
      goto LABEL_224;
    }
    unint64_t v90 = @"Float16";
    int v91 = 1;
    goto LABEL_163;
  }
  unint64_t v84 = *(char **)v84;
LABEL_154:
  int v92 = *(_DWORD *)v84;
  int v93 = v84[4];
  if (v92 != 1953384789 || v93 != 56) {
LABEL_224:
  }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("tunneled_ane_unit_kernel has invalid output_type data.");
  unint64_t v90 = @"UInt8";
  int v91 = 4;
LABEL_163:
  uint64_t v96 = (void *)*((void *)&v182 + 1);
  long long v95 = (void *)v182;
  if (*((void *)&v182 + 1) != (void)v182) {
    std::string::append(&__str, "__tunneled_intermediate");
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__v.__first_, (id *)a3);
  long long v97 = (void *)((char *)v136 + 376);
  if (*((char *)v136 + 399) < 0) {
    long long v97 = (void *)*v97;
  }
  uint64_t v98 = objc_msgSend(NSString, "stringWithUTF8String:", v97, v131);
  unsigned int v99 = (void *)*((void *)&v160 + 1);
  *((void *)&v160 + 1) = v98;

  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v154, v175.__begin_, v175.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v175.__end_ - (char *)v175.__begin_) >> 3));
  std::string::operator=((std::string *)&__v, &__str);
  int v159 = v91;
  long long v100 = (void *)v160;
  *(void *)&long long v160 = v90;

  int v101 = *((char *)v136 + 423);
  if (v101 >= 0) {
    long long v102 = (char *)v136 + 400;
  }
  else {
    long long v102 = (char *)*((void *)v136 + 50);
  }
  if (v101 >= 0) {
    uint64_t v103 = *((unsigned __int8 *)v136 + 423);
  }
  else {
    uint64_t v103 = *((void *)v136 + 51);
  }
  uint64_t v104 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v102 length:v103];
  *(void *)unint64_t v140 = 0;
  int v105 = [MEMORY[0x1E4F28F98] propertyListWithData:v104 options:2 format:0 error:v140];
  id v106 = *(id *)v140;
  if (!v105) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("tunneled_ane_unit_kernel has invalid plist data.");
  }

  id v107 = v161;
  id v161 = v105;

  int v108 = v164;
  if ((unint64_t)v164 >= v165)
  {
    unint64_t v110 = 0x8E38E38E38E38E39 * (((uint64_t)v164 - v163) >> 4);
    if (v110 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v111 = 0x1C71C71C71C71C72 * ((uint64_t)(v165 - v163) >> 4);
    if (v111 <= v110 + 1) {
      unint64_t v111 = v110 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v165 - v163) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v112 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v112 = v111;
    }
    *(void *)&v140[32] = &v165;
    if (v112) {
      unint64_t v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v112);
    }
    else {
      uint64_t v113 = 0;
    }
    *(void *)unint64_t v140 = v112;
    *(void *)&v140[8] = v112 + 144 * v110;
    *(void *)&v140[16] = *(void *)&v140[8];
    *(void *)&unsigned char v140[24] = v112 + 144 * v113;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v140[8], (uint64_t)&__v);
    *(void *)&v140[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v163, v140);
    int v109 = v164;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v140);
    uint64_t v96 = (void *)*((void *)&v182 + 1);
    long long v95 = (void *)v182;
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v164, (uint64_t)&__v);
    int v109 = v108 + 6;
  }
  uint64_t v164 = v109;
  if (v96 != v95)
  {
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)v140, (uint64_t)&__str, (const std::string *)a3, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)&v182, (std::string *)((char *)a3 + 80));
    unint64_t v114 = v164;
    if ((unint64_t)v164 >= v165)
    {
      unint64_t v120 = 0x8E38E38E38E38E39 * (((uint64_t)v164 - v163) >> 4);
      unint64_t v121 = v120 + 1;
      if (v120 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x1C71C71C71C71C72 * ((uint64_t)(v165 - v163) >> 4) > v121) {
        unint64_t v121 = 0x1C71C71C71C71C72 * ((uint64_t)(v165 - v163) >> 4);
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v165 - v163) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v122 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v122 = v121;
      }
      std::string v181 = &v165;
      uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v122);
      std::string::size_type v124 = (std::string::size_type)&v123[144 * v120];
      v179.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
      v179.__r_.__value_.__l.__size_ = v124;
      std::string v180 = &v123[144 * v125];
      long long v126 = *(_OWORD *)v140;
      *(void *)(v124 + 16) = *(void *)&v140[16];
      *(_OWORD *)std::string::size_type v124 = v126;
      memset(v140, 0, 24);
      *(void *)(v124 + 24) = 0;
      *(void *)(v124 + 32) = 0;
      *(void *)(v124 + 40) = 0;
      *(_OWORD *)(v124 + 24) = *(_OWORD *)&v140[24];
      *(void *)(v124 + 40) = v141;
      *(void *)&unsigned char v140[24] = 0;
      *(void *)&v140[32] = 0;
      std::string::size_type v141 = 0;
      *(void *)(v124 + 48) = 0;
      *(void *)(v124 + 56) = 0;
      *(void *)(v124 + 64) = 0;
      *(_OWORD *)(v124 + 48) = v142;
      *(void *)(v124 + 64) = v143;
      long long v142 = 0uLL;
      std::string::size_type v143 = 0;
      *(_DWORD *)(v124 + 72) = v144;
      long long v127 = *(_OWORD *)v145;
      *(void *)(v124 + 96) = v146;
      *(_OWORD *)(v124 + 80) = v127;
      v145[1] = 0;
      std::string::size_type v146 = 0;
      v145[0] = 0;
      *(_DWORD *)(v124 + 104) = v147;
      long long v128 = v148;
      long long v148 = 0uLL;
      *(_OWORD *)(v124 + 112) = v128;
      id v129 = v149;
      id v149 = 0;
      *(void *)(v124 + 128) = v129;
      *(void *)(v124 + 136) = v150;
      v179.__r_.__value_.__r.__words[2] = v124 + 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v163, &v179);
      id v119 = v164;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v179);
    }
    else
    {
      long long v115 = *(_OWORD *)v140;
      v164->__r_.__value_.__r.__words[2] = *(void *)&v140[16];
      v114[1].__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)&v114->__r_.__value_.__l.__data_ = v115;
      *(_OWORD *)unint64_t v140 = 0uLL;
      v114[1].__r_.__value_.__l.__size_ = 0;
      v114[1].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v114[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v140[24];
      v114[1].__r_.__value_.__r.__words[2] = v141;
      v114[2].__r_.__value_.__r.__words[0] = 0;
      memset(&v140[16], 0, 24);
      std::string::size_type v141 = 0;
      v114[2].__r_.__value_.__l.__size_ = 0;
      v114[2].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v114[2].__r_.__value_.__l.__data_ = v142;
      v114[2].__r_.__value_.__r.__words[2] = v143;
      long long v142 = 0uLL;
      LODWORD(v114[3].__r_.__value_.__l.__data_) = v144;
      long long v116 = *(_OWORD *)v145;
      v114[4].__r_.__value_.__r.__words[0] = v146;
      *(_OWORD *)&v114[3].__r_.__value_.__r.__words[1] = v116;
      v145[1] = 0;
      std::string::size_type v146 = 0;
      std::string::size_type v143 = 0;
      v145[0] = 0;
      LODWORD(v114[4].__r_.__value_.__r.__words[1]) = v147;
      long long v117 = v148;
      long long v148 = 0uLL;
      *(_OWORD *)&v114[4].__r_.__value_.__r.__words[2] = v117;
      std::string::size_type v118 = (std::string::size_type)v149;
      id v149 = 0;
      v114[5].__r_.__value_.__l.__size_ = v118;
      v114[5].__r_.__value_.__r.__words[2] = v150;
      id v119 = v114 + 6;
    }
    uint64_t v164 = v119;

    if (SHIBYTE(v146) < 0) {
      operator delete(v145[0]);
    }
    v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v179);
    v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v179);
    if ((v140[23] & 0x80000000) != 0) {
      operator delete(*(void **)v140);
    }
    uint64_t v130 = (void *)v164[-2].__r_.__value_.__r.__words[2];
    v164[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)v90;

    LODWORD(v164[-2].__r_.__value_.__r.__words[1]) = v91;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*((void *)v136 + 57) + 24))((uint64_t)v136 + 456, v132, &v163);

  if (SHIBYTE(v158) < 0) {
    operator delete((void *)v157);
  }
  *(void *)unint64_t v140 = &v154;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v140);
  *(void *)unint64_t v140 = &__v.__end_cap_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v140);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v163;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v95) {
    operator delete(v95);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v175;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v15) {
    operator delete(v15);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v176;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v135) {
    nitro::nitro_function::nitro_function(v135);
  }
  if (v134) {
    nitro::nitro_function::nitro_function(v134);
  }
  nitro::nitro_function::nitro_function(v139);
}

void sub_19274826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  a43 = &a61;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  uint64_t v64 = *(void **)(v62 - 128);
  if (v64) {
    operator delete(v64);
  }
  *(void *)(v62 - 128) = v62 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 128));
  if (v61) {
    operator delete(v61);
  }
  *(void *)(v62 - 224) = v62 - 200;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 224));
  if (a12)
  {
    nitro::nitro_function::nitro_function(a12);
    if (!a11)
    {
LABEL_9:
      if (!a18) {
LABEL_14:
      }
        _Unwind_Resume(a1);
LABEL_13:
      nitro::nitro_function::nitro_function(a18);
      goto LABEL_14;
    }
  }
  else if (!a11)
  {
    goto LABEL_9;
  }
  nitro::nitro_function::nitro_function(a11);
  if (!a18) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

std::string::const_reference anonymous namespace'::enum_layout_from_string(uint64_t a1, std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size != 5) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel got layout string that is not size 5.");
  }
  for (std::string::size_type i = 0; i != 5; ++i)
  {
    std::string::const_reference result = std::string::at(this, i);
    int v7 = *result;
    if (v7 <= 71)
    {
      if (v7 == 67)
      {
        int v8 = 2;
      }
      else
      {
        if (v7 != 68) {
LABEL_18:
        }
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel got layout string with bad character.");
        int v8 = 1;
      }
    }
    else
    {
      switch(v7)
      {
        case 'H':
          int v8 = 3;
          break;
        case 'N':
          int v8 = 0;
          break;
        case 'W':
          int v8 = 4;
          break;
        default:
          goto LABEL_18;
      }
    }
    *(_DWORD *)(a1 + 4 * i) = v8;
  }
  return result;
}

void anonymous namespace'::transposes_from_layout_conversion(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 >= 6) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel got out of range rank.");
  }
  if (a4 <= 1) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = a4;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<Espresso::net *>::reserve((void **)a1, v7);
  uint64_t v8 = 1;
  do
  {
    uint64_t v9 = *(unsigned int *)(a2 + 4 * (v7 - v8));
    uint64_t v10 = *(unsigned int *)(a3 + 4 * (v7 - v8));
    if (v9 != v10)
    {
      uint64_t v12 = *(uint64_t **)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      if ((unint64_t)v12 >= v11)
      {
        long long v14 = *(uint64_t **)a1;
        uint64_t v15 = ((uint64_t)v12 - *(void *)a1) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        int v20 = (uint64_t *)(v18 + 8 * v15);
        *int v20 = v9 | (v10 << 32);
        uint64_t v13 = v20 + 1;
        if (v12 != v14)
        {
          do
          {
            uint64_t v21 = *--v12;
            *--int v20 = v21;
          }
          while (v12 != v14);
          uint64_t v12 = *(uint64_t **)a1;
        }
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = v18 + 8 * v19;
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        uint64_t *v12 = v9 | (v10 << 32);
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 8) = v13;
    }
  }
  while (v7 != v8++);
  Espresso::ANECompilerEngine::fill_unpaired_transposes(a1);
}

void sub_192748744(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::tunneled_ane_unit_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_tunneled_ane_unit_kernel::kernel_type_str(Espresso::generic_tunneled_ane_unit_kernel *this)
{
  return "tunneled_ane_unit";
}

uint64_t Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 48);
  long long v6 = *(std::__shared_weak_count **)(v5 + 80);
  if (v6)
  {
    unint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(v5 + 72);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  uint64_t v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  int is_mix = Espresso::ANECompilerEngine::is_mix(v9, v10);
  if (is_mix)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    v21[0] = v12;
    v21[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "Tunneled units may rely on transpose for layout conversion.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, a3, 0);
    Espresso::emit_kernel_validation_warning(v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    int v22 = (void **)&v19;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v22);
    int v22 = (void **)&v18;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
  }

  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return is_mix ^ 1u;
}

void sub_1927488C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }

  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::~tunneled_ane_unit_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::ane_kernel *)(this + 57));
  *this = &unk_1EE3569A0;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::ane_kernel *)(this + 57));
  *this = &unk_1EE3569A0;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::plane_rw_kernel::~plane_rw_kernel(Espresso::ANECompilerEngine::plane_rw_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::plane_rw_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::plane_rw_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::plane_rw_kernel::compile(Espresso::ANECompilerEngine::plane_rw_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3)
{
}

void Espresso::ANECompilerEngine::plane_rw_kernel::compile(Espresso::ANECompilerEngine::plane_rw_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = this;
  uint64_t v6 = *((unsigned int *)this + 71);
  if (v6)
  {
    uint64_t v7 = 1;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a3[4] - (unsigned char *)a3[3]) >> 3);
    uint64_t v7 = v8 + 1;
    if (v8 == -1) {
      return;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = &v32;
  do
  {
    unint64_t v11 = objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v24.__r_.__value_.__l.__data_, v3);
    objc_storeStrong(v10, v11);
    uint64_t v12 = v31;
    if (v6)
    {
      unint64_t v31 = @"PlaneWriter";

      uint64_t v13 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v5 + 71)];
      [v11 setObject:v13 forKeyedSubscript:@"Output4CCFormat"];
    }
    else
    {
      unint64_t v31 = @"PlaneReader";

      long long v14 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v5 + 70)];
      [v11 setObject:v14 forKeyedSubscript:@"Input4CCFormat"];

      uint64_t v15 = [NSNumber numberWithUnsignedLong:v9];
      [v11 setObject:v15 forKeyedSubscript:@"PlaneIndex"];

      if (v9) {
        std::string::operator=(&v24, (const std::string *)(v25 + 24 * v9 - 24));
      }
      char v16 = v10;
      uint64_t v17 = v7;
      uint64_t v18 = v5;
      uint64_t v19 = v6;
      int v20 = a2;
      uint64_t v21 = v3;
      uint64_t v23 = v25;
      for (uint64_t i = v26; i != v23; i -= 24)
      {
        if (*(char *)(i - 1) < 0) {
          operator delete(*(void **)(i - 24));
        }
      }
      uint64_t v26 = v23;
      uint64_t v3 = v21;
      a2 = v20;
      uint64_t v6 = v19;
      uint64_t v5 = v18;
      uint64_t v7 = v17;
      uint64_t v10 = v16;
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v24);

    if (v29 < 0) {
      operator delete(__p);
    }
    v33[0] = (void **)&v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
    v33[0] = (void **)&v25;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }

    ++v9;
  }
  while (v9 != v7);
}

void sub_192748D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::plane_rw_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_plane_rw_kernel::kernel_type_str(Espresso::generic_plane_rw_kernel *this)
{
  return "plane_rw";
}

uint64_t Espresso::ANECompilerEngine::plane_rw_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    unint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  int v11 = *(_DWORD *)(a1 + 280);
  if (Espresso::ANECompilerEngine::is_mix(v10, v12))
  {
    long long v14 = *a2;
    uint64_t v15 = a2[1];
    v49[0] = v14;
    v49[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "Plane rw kernel is not supported on this architecture of ANEs due to ANE driver lacking support for multi-planar inputs.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v43, a3, 0);
    Espresso::emit_kernel_validation_warning(v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_45:
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    uint64_t v50 = (void **)&v47;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
    uint64_t v50 = (void **)&v46;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_49;
  }
  if (!(*(_DWORD *)(a1 + 284) | v11))
  {
    uint64_t v28 = *a2;
    uint64_t v15 = a2[1];
    v42[0] = v28;
    v42[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "Plane rw kernel must be configured for either read or write.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v43, a3, 0);
    Espresso::emit_kernel_validation_warning(v42, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_45;
  }
  char v16 = (int *)(a1 + 280);
  if (!v11) {
    char v16 = (int *)(a1 + 284);
  }
  int v17 = *v16;
  unsigned int v18 = *v16 & 0xFFFFFFEF;
  LODWORD(v24) = v17 == 2016686640
              || v18 == 875704422
              || v17 == 2019963440
              || v18 == 875836518
              || v17 == 1882468912
              || v17 == 1885745712;
  if (v17 == 1882468912 || v17 == 1886859824 || v17 == 1885745712)
  {
    uint64_t v27 = *a2;
    uint64_t v15 = a2[1];
    v41[0] = v27;
    v41[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "Plane rw kernel does not support packed (3 10 bit values in 32 bits) formats.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v43, a3, 0);
    Espresso::emit_kernel_validation_warning(v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_45;
  }
  int is_mix_c = Espresso::ANECompilerEngine::is_mix_c(v10, v13);
  if (!is_mix_c || v11)
  {
    if (!Espresso::ANECompilerEngine::is_mix_c(v10, v31))
    {
      if ((v17 & 0xFFFFEFFF) == 0x26386630) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v24;
      }
      if (v17 > 875836533)
      {
        if (v17 <= 1886859823)
        {
          if (v17 == 875836534) {
            goto LABEL_54;
          }
          int v34 = 1885745712;
        }
        else
        {
          if (v17 == 1886859824 || v17 == 2016686640) {
            goto LABEL_54;
          }
          int v34 = 2019963440;
        }
      }
      else if (v17 <= 875704421)
      {
        if (v17 == 641230384) {
          goto LABEL_54;
        }
        int v34 = 641234480;
      }
      else
      {
        if (v17 == 875704422 || v17 == 875704438) {
          goto LABEL_54;
        }
        int v34 = 875836518;
      }
      if (v17 == v34) {
        goto LABEL_54;
      }
      long long v37 = *a2;
      uint64_t v15 = a2[1];
      v38[0] = v37;
      v38[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "Plane rw kernel is not supported for this code.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v43, a3, 0);
      Espresso::emit_kernel_validation_warning(v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      goto LABEL_52;
    }
    uint64_t v24 = 1;
    if (v17 > 1885745711)
    {
      if (v17 > 2016686639)
      {
        if (v17 == 2016686640) {
          goto LABEL_54;
        }
        int v33 = 2019963440;
      }
      else
      {
        if (v17 == 1885745712) {
          goto LABEL_54;
        }
        int v33 = 1886859824;
      }
    }
    else if (v17 > 875836517)
    {
      if (v17 == 875836518) {
        goto LABEL_54;
      }
      int v33 = 875836534;
    }
    else
    {
      if (v17 == 875704422) {
        goto LABEL_54;
      }
      int v33 = 875704438;
    }
    if (v17 != v33)
    {
      long long v36 = *a2;
      uint64_t v15 = a2[1];
      v39[0] = v36;
      v39[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "Plane rw kernel is not supported on this architecture of ANEs due to  lack of support for configured 4cc code. No multiplanar compression eligible.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v43, a3, 0);
      Espresso::emit_kernel_validation_warning(v39, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_102;
    }
  }
  else
  {
    uint64_t v24 = 1;
    if (v17 > 1885745711)
    {
      if (v17 > 2016686639)
      {
        if (v17 == 2016686640) {
          goto LABEL_54;
        }
        int v32 = 2019963440;
      }
      else
      {
        if (v17 == 1885745712) {
          goto LABEL_54;
        }
        int v32 = 1886859824;
      }
    }
    else if (v17 > 875836517)
    {
      if (v17 == 875836518) {
        goto LABEL_54;
      }
      int v32 = 875836534;
    }
    else
    {
      if (v17 == 875704422) {
        goto LABEL_54;
      }
      int v32 = 875704438;
    }
    if (v17 != v32)
    {
      unint64_t v35 = *a2;
      uint64_t v15 = a2[1];
      v40[0] = v35;
      v40[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "Plane rw kernel is not supported on this architecture of ANEs due to  lacking support for 4cc compressed outputs.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v43, a3, 0);
      Espresso::emit_kernel_validation_warning(v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_102:
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_49:
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      uint64_t v24 = 0;
LABEL_52:
      if (v15) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v15);
      }
    }
  }
LABEL_54:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v24;
}

void sub_192749310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a25);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }

  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::plane_rw_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::plane_rw_kernel::~plane_rw_kernel(Espresso::ANECompilerEngine::plane_rw_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::plane_rw_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::plane_rw_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::fill_kernel::~fill_kernel(Espresso::ANECompilerEngine::fill_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::fill_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::fill_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::fill_kernel::compile(Espresso::ANECompilerEngine::fill_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::fill_kernel::compile(Espresso::ANECompilerEngine::fill_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

uint64_t Espresso::ANECompilerEngine::fill_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    int v31 = *(_DWORD *)(a1 + 312);
    long long v8 = *(_OWORD *)(a1 + 296);
    v30[0] = *(_OWORD *)(a1 + 280);
    v30[1] = v8;
    std::string::basic_string[abi:ne180100]<0>(v36, "top");
    Espresso::ANECompilerEngine::fill_kernel::decomposition(&v32, a1 + 8, (uint64_t)v30, (const void **)v36, *(_DWORD *)(a3 + 64));
    if ((v36[23] & 0x80000000) != 0) {
      operator delete(*(void **)v36);
    }
    uint64_t v9 = v32;
    uint64_t v10 = v33;
    if (v32 == v33)
    {
LABEL_30:
      uint64_t v6 = 1;
    }
    else
    {
      while (1)
      {
        long long __p = 0uLL;
        uint64_t v26 = 0;
        std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&__p, *(long long **)a3, *(long long **)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 6);
        memset(v27, 0, 24);
        std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v27, *(long long **)(a3 + 24), *(long long **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6);
        int v11 = *(std::__shared_weak_count **)(a3 + 56);
        void v27[3] = *(void *)(a3 + 48);
        uint64_t v28 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v29 = *(_OWORD *)(a3 + 64);
        if (v9 + 2 != (void **)&__p) {
          std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)&__p, (long long *)v9[2], (long long *)v9[3], ((unsigned char *)v9[3] - (unsigned char *)v9[2]) >> 6);
        }
        long long v12 = *(_OWORD *)(v9 + 5);
        long long v13 = *(_OWORD *)(v9 + 7);
        long long v37 = v9[9];
        *(_OWORD *)long long v36 = v12;
        *(_OWORD *)&v36[16] = v13;
        v39[0] = 0;
        v39[1] = 0;
        size_t v38 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v38, v9[10], (uint64_t)v9[11], ((unsigned char *)v9[11] - (unsigned char *)v9[10]) >> 2);
        std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>(v27, (long long *)v36, &v40, 1uLL);
        if (v38)
        {
          v39[0] = v38;
          operator delete(v38);
        }
        long long v14 = *v9;
        uint64_t v15 = (std::__shared_weak_count *)a2[1];
        uint64_t v23 = *a2;
        uint64_t v24 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v16 = (*(uint64_t (**)(void *, int64x2_t **, long long *))(*(void *)v14 + 200))(v14, &v23, &__p);
        if (v24) {
          nitro::nitro_function::nitro_function(v24);
        }
        if ((v16 & 1) == 0) {
          break;
        }
        if (v28) {
          nitro::nitro_function::nitro_function(v28);
        }
        *(void *)long long v36 = v27;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
        *(void *)long long v36 = &__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
        v9 += 19;
        if (v9 == v10) {
          goto LABEL_30;
        }
      }
      int v17 = *a2;
      unsigned int v18 = a2[1];
      v22[0] = v17;
      v22[1] = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v20, "fill_kernel: decomposition error ^");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v36, (long long *)v20, a3, 0);
      Espresso::emit_kernel_validation_warning(v22, (Espresso::base_kernel::validate_for_engine_warning_t *)v36);
      if (v41) {
        nitro::nitro_function::nitro_function(v41);
      }
      unint64_t v35 = (void **)v39;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v35);
      unint64_t v35 = (void **)&v36[24];
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v35);
      if ((v36[23] & 0x80000000) != 0) {
        operator delete(*(void **)v36);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      if (v18) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v18);
      }
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      *(void *)long long v36 = v27;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
      *(void *)long long v36 = &__p;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
      uint64_t v6 = 0;
    }
    *(void *)long long v36 = &v32;
    std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  }
  else
  {
    uint64_t v5 = a2[1];
    v34[0] = *a2;
    v34[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "fill_kernel: dynamic fill not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v36, &__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v34, (Espresso::base_kernel::validate_for_engine_warning_t *)v36);
    if (v41) {
      nitro::nitro_function::nitro_function(v41);
    }
    int v32 = (void **)v39;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v32);
    int v32 = (void **)&v36[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v32);
    if ((v36[23] & 0x80000000) != 0) {
      operator delete(*(void **)v36);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)__p);
    }
    if (v5) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
    }
    return 0;
  }
  return v6;
}

void sub_19274990C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v40 - 224));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((Espresso::base_kernel::validate_for_engine_args_t *)&a20);
  *(void *)(v40 - 224) = &a39;
  std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 224));
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::fill_kernel::decomposition(void *a1, uint64_t a2, uint64_t a3, const void **a4, int a5)
{
  v83[1] = *MEMORY[0x1E4F143B8];
  int v70 = a5;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  long long v67 = v9;
  int v10 = *(_DWORD *)(a3 + 24);
  int v68 = 1;
  int v69 = v10;
  if (*((char *)a4 + 23) >= 0) {
    size_t v11 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v11 = (size_t)a4[1];
  }
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v11 + 8);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*((char *)a4 + 23) >= 0) {
      long long v13 = a4;
    }
    else {
      long long v13 = *a4;
    }
    memmove(p_str, v13, v11);
  }
  strcpy((char *)p_str + v11, "__@const");
  uint64_t v62 = 0;
  *(_OWORD *)&v60[48] = 0u;
  long long v61 = 0u;
  long long v59 = 0u;
  memset(v60, 0, 28);
  *(void *)&long long v14 = 0x100000001;
  *((void *)&v14 + 1) = 0x100000001;
  *(_OWORD *)&v60[28] = v14;
  *(_DWORD *)&v60[44] = -1;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  Espresso::abstract_engine_factory::shared(&v49);
  uint64_t v15 = v49;
  std::string::basic_string[abi:ne180100]<0>(v72, "load_constant");
  LODWORD(v71) = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v15, a2, (uint64_t)v72, (uint64_t)&v67, (int *)&v71);
  long long v16 = v42;
  long long v42 = 0uLL;
  int v17 = (std::__shared_weak_count *)*((void *)&v59 + 1);
  long long v59 = v16;
  if (v17)
  {
    nitro::nitro_function::nitro_function(v17);
    if (*((void *)&v42 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  if ((v72[23] & 0x80000000) != 0) {
    operator delete(*(void **)v72);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v57, 1, 1, 1, 1);
  uint64_t v18 = v57;
  **(_DWORD **)(v57 + 24) = *(_DWORD *)a3;
  uint64_t v19 = (_DWORD *)v59;
  if ((void)v59
  {
    int v20 = (std::__shared_weak_count *)*((void *)&v59 + 1);
    if (*((void *)&v59 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v20 = 0;
  }
  char v21 = v58;
  v56[0] = v18;
  v56[1] = v58;
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::generic_load_constant_kernel::set_constant_blob(v19, (uint64_t)v56);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v63, 0, 0, 0);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)v60, 0, 0, 0);
  std::string::operator=((std::string *)((char *)&v64 + 8), &__str);
  long long v42 = 0uLL;
  *(void *)uint64_t v43 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v59 + 64))(v72);
  uint64_t v22 = *(void *)(*(void *)v72 + 32);
  long long v23 = *(_OWORD *)(*(void *)v72 + 16);
  *(_OWORD *)&v60[24] = **(_OWORD **)v72;
  *(_OWORD *)&v60[40] = v23;
  *(void *)&v60[56] = v22;
  if (&v60[24] != *(unsigned char **)v72) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v61, *(char **)(*(void *)v72 + 40), *(void *)(*(void *)v72 + 48), (uint64_t)(*(void *)(*(void *)v72 + 48) - *(void *)(*(void *)v72 + 40)) >> 2);
  }
  unint64_t v49 = (void **)v72;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
  unint64_t v49 = (void **)&v42;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
  int v24 = *(_DWORD *)(a3 + 4);
  int v25 = *(_DWORD *)(a3 + 8);
  if (v24 <= 1 && v25 <= 1 && *(int *)(a3 + 12) <= 1 && *(int *)(a3 + 16) <= 1 && *(int *)(a3 + 20) < 2)
  {
    std::string::operator=((std::string *)((char *)&v64 + 8), (const std::string *)a4);
    Espresso::ANECompilerEngine::decomposition_node::decomposition_node((Espresso::ANECompilerEngine::decomposition_node *)v72, (const Espresso::ANECompilerEngine::decomposition_node *)&v59);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(void *)&long long v42 = a1;
    BYTE8(v42) = 0;
    size_t v38 = (char *)operator new(0x98uLL);
    *a1 = v38;
    a1[1] = v38;
    a1[2] = v38 + 152;
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>((uint64_t)(a1 + 2), (uint64_t)v72, (uint64_t)v82, (uint64_t)v38);
    if (v81 < 0) {
      operator delete(v80[3]);
    }
    *(void *)&long long v42 = v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    if (v78)
    {
      uint64_t v79 = v78;
      operator delete(v78);
    }
    *(void *)&long long v42 = &v72[16];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    long long v37 = *(std::__shared_weak_count **)&v72[8];
    if (*(void *)&v72[8]) {
      goto LABEL_65;
    }
  }
  else
  {
    char v53 = 0;
    int v54 = 0;
    char v55 = 0;
    unint64_t v49 = (void **)__PAIR64__(v25, v24);
    uint64_t v50 = *(std::__shared_weak_count **)(a3 + 12);
    int v51 = *(_DWORD *)(a3 + 20);
    int v52 = -1;
    uint64_t v45 = 0;
    *(_OWORD *)&v43[48] = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v42 = 0u;
    memset(v43, 0, 28);
    *(void *)&long long v26 = 0x100000001;
    *((void *)&v26 + 1) = 0x100000001;
    *(_OWORD *)&v43[28] = v26;
    *(_DWORD *)&v43[44] = -1;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    Espresso::abstract_engine_factory::shared(&v40);
    uint64_t v27 = v40;
    std::string::basic_string[abi:ne180100]<0>(v72, "broadcast");
    int v39 = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v27, a2, (uint64_t)v72, (uint64_t)&v49, &v39);
    long long v28 = v71;
    long long v71 = 0uLL;
    long long v29 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    long long v42 = v28;
    if (v29)
    {
      nitro::nitro_function::nitro_function(v29);
      if (*((void *)&v71 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v71 + 1));
      }
    }
    if ((v72[23] & 0x80000000) != 0) {
      operator delete(*(void **)v72);
    }
    if (v41) {
      nitro::nitro_function::nitro_function(v41);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v72, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)std::string::size_type v72 = __str;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v46, (std::string *)v72, (long long *)&v72[24], 1uLL);
    if ((v72[23] & 0x80000000) != 0) {
      operator delete(*(void **)v72);
    }
    *(_OWORD *)std::string::size_type v72 = *(_OWORD *)&v60[24];
    *(_OWORD *)&v72[16] = *(_OWORD *)&v60[40];
    uint64_t v73 = *(void *)&v60[56];
    unint64_t v74 = 0;
    unint64_t v75 = 0;
    uint64_t v76 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v74, (const void *)v61, *((uint64_t *)&v61 + 1), (uint64_t)(*((void *)&v61 + 1) - v61) >> 2);
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)v43, (long long *)v72, &v77, 1uLL);
    if (v74)
    {
      unint64_t v75 = v74;
      operator delete(v74);
    }
    std::string::operator=((std::string *)((char *)&v47 + 8), (const std::string *)a4);
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v42 + 64))(v72);
    uint64_t v30 = *(void *)(*(void *)v72 + 32);
    long long v31 = *(_OWORD *)(*(void *)v72 + 16);
    *(_OWORD *)&v43[24] = **(_OWORD **)v72;
    *(_OWORD *)&unsigned char v43[40] = v31;
    *(void *)&v43[56] = v30;
    if (&v43[24] != *(unsigned char **)v72) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)__p, *(char **)(*(void *)v72 + 40), *(void *)(*(void *)v72 + 48), (uint64_t)(*(void *)(*(void *)v72 + 48) - *(void *)(*(void *)v72 + 40)) >> 2);
    }
    *(void *)&long long v71 = v72;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    Espresso::ANECompilerEngine::decomposition_node::decomposition_node((Espresso::ANECompilerEngine::decomposition_node *)v72, (const Espresso::ANECompilerEngine::decomposition_node *)&v59);
    Espresso::ANECompilerEngine::decomposition_node::decomposition_node((Espresso::ANECompilerEngine::decomposition_node *)v82, (const Espresso::ANECompilerEngine::decomposition_node *)&v42);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(void *)&long long v71 = a1;
    BYTE8(v71) = 0;
    int v32 = (char *)operator new(0x130uLL);
    *a1 = v32;
    a1[1] = v32;
    a1[2] = v32 + 304;
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>((uint64_t)(a1 + 2), (uint64_t)v72, (uint64_t)v83, (uint64_t)v32);
    unint64_t v33 = 304;
    do
    {
      int v34 = (void **)&v72[v33];
      if ((char)v72[v33 - 1] < 0) {
        operator delete(*(v34 - 3));
      }
      *(void *)&long long v71 = v34 - 6;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      unint64_t v35 = *(v34 - 9);
      if (v35)
      {
        __str.__r_.__value_.__r.__words[v33 / 8 + 1] = (std::string::size_type)v35;
        operator delete(v35);
      }
      *(void *)&long long v71 = (char *)&v61 + v33 + 8;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      long long v36 = *(std::__shared_weak_count **)((char *)&v61 + v33);
      if (v36) {
        nitro::nitro_function::nitro_function(v36);
      }
      v33 -= 152;
    }
    while (v33);
    if (SHIBYTE(v48) < 0) {
      operator delete(*((void **)&v47 + 1));
    }
    *(void *)std::string::size_type v72 = &v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(void *)std::string::size_type v72 = v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    long long v37 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1)) {
LABEL_65:
    }
      nitro::nitro_function::nitro_function(v37);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(*((void **)&v64 + 1));
  }
  *(void *)std::string::size_type v72 = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  if ((void)v61)
  {
    *((void *)&v61 + 1) = v61;
    operator delete((void *)v61);
  }
  *(void *)std::string::size_type v72 = v60;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  if (*((void *)&v59 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v59 + 1));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_19274A23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v73 + 8) = v74;
  std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100](&a15);
  Espresso::ANECompilerEngine::decomposition_node::~decomposition_node(&a72);
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  Espresso::ANECompilerEngine::decomposition_node::~decomposition_node(&a43);
  if (a67 < 0) {
    operator delete(*(void **)(v75 + 152));
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::fill_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::fill_kernel::~fill_kernel(Espresso::ANECompilerEngine::fill_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::fill_kernel *)((char *)this + 320));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::fill_kernel *)((char *)this + 320));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::space_to_batch_kernel::~space_to_batch_kernel(Espresso::ANECompilerEngine::space_to_batch_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::space_to_batch_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::space_to_batch_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::space_to_batch_kernel::compile(Espresso::ANECompilerEngine::space_to_batch_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::space_to_batch_kernel::compile(Espresso::ANECompilerEngine::space_to_batch_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v22[0] = a3[6];
  int v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v22[0], (long long **)v22)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v22[0] = a3;
  size_t v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v22)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v12 = objc_opt_new();
  uint64_t v31 = 0;
  int v32 = 0;
  unint64_t v33 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v22, a3);
  long long v13 = v29;
  if (*((unsigned char *)this + 316)) {
    long long v29 = @"BatchToSpace";
  }
  else {
    long long v29 = @"SpaceToBatch";
  }

  long long v14 = [NSNumber numberWithInt:*((unsigned int *)this + 71)];
  [v12 setObject:v14 forKeyedSubscript:@"FactorX"];

  uint64_t v15 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
  [v12 setObject:v15 forKeyedSubscript:@"FactorY"];

  [v12 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"FactorZ"];
  objc_storeStrong(&v30, v12);
  long long v16 = v32;
  if ((unint64_t)v32 >= v33)
  {
    unint64_t v18 = 0x8E38E38E38E38E39 * (((uint64_t)v32 - v31) >> 4);
    if (v18 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0x1C71C71C71C71C72 * ((uint64_t)(v33 - v31) >> 4);
    if (v19 <= v18 + 1) {
      unint64_t v19 = v18 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v33 - v31) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v20 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v20 = v19;
    }
    size_t v38 = &v33;
    if (v20) {
      unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    int v34 = (void **)v20;
    unint64_t v35 = (std::string *)(v20 + 144 * v18);
    long long v36 = v35;
    unint64_t v37 = v20 + 144 * v21;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v35, (uint64_t)v22);
    v36 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v31, &v34);
    int v17 = v32;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v32, (uint64_t)v22);
    int v17 = v16 + 6;
  }
  int v32 = v17;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 40) + 32))((char *)this + 320, a2, &v31);

  if (v27 < 0) {
    operator delete(__p);
  }
  int v34 = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
  int v34 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  v22[0] = &v31;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_19274A910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  nitro::nitro_function::nitro_function(v27);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::space_to_batch_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_space_to_batch_kernel::kernel_type_str(Espresso::generic_space_to_batch_kernel *this)
{
  return "space_to_batch";
}

BOOL Espresso::ANECompilerEngine::space_to_batch_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, _OWORD **a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = (const Espresso::net *)*((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  int v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  int v11 = *((_DWORD *)*a3 + 5);
  if (v11 == 4 || v11 == -1 && *((_DWORD *)*a3 + 4) == 1)
  {
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v12 = a3[3];
    uint64_t v13 = *((void *)v12 + 4);
    long long v14 = v12[1];
    v37[0] = *v12;
    v37[1] = v14;
    uint64_t v38 = v13;
    long long __p = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v12 + 5), *((void *)v12 + 6), (uint64_t)(*((void *)v12 + 6) - *((void *)v12 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v42, v9, (const Espresso::layer_shape *)v37, 1);
    if (__p)
    {
      uint64_t v40 = __p;
      operator delete(__p);
    }
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *a3;
    uint64_t v16 = *((void *)*a3 + 4);
    long long v17 = (*a3)[1];
    v31[0] = **a3;
    v31[1] = v17;
    uint64_t v32 = v16;
    unint64_t v33 = 0;
    int v34 = 0;
    uint64_t v35 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, *((const void **)v15 + 5), *((void *)v15 + 6), (uint64_t)(*((void *)v15 + 6) - *((void *)v15 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v36, v9, (const Espresso::layer_shape *)v31, 1);
    if (v33)
    {
      int v34 = v33;
      operator delete(v33);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    id v18 = v10;
    if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v18, v19))
    {
      char v28 = 0;
      std::string::basic_string[abi:ne180100]<0>(v29, "space_to_batch not supported on this architecture because of limitations with batch size.");
    }
    else if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v36, v18))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v42, v18))
      {
        int v23 = a1[71];
        if ((v23 & 1) != 0 && v23 % 3)
        {
          char v28 = 0;
          std::string::basic_string[abi:ne180100]<0>(v29, "space_to_batch block shape width must be a multiple of 2 or 3");
        }
        else if (a1[72])
        {
          char v28 = 0;
          std::string::basic_string[abi:ne180100]<0>(v29, "3d space_to_batch is not supported on ANE");
        }
        else if (a1[73] || a1[74] || a1[75] || a1[76] || a1[77] || a1[78])
        {
          char v28 = 0;
          std::string::basic_string[abi:ne180100]<0>(v29, "space_to_batch kernel does not support padding/crop");
        }
        else
        {
          char v28 = 1;
          std::string::basic_string[abi:ne180100]<0>(v29, "Success");
        }
      }
      else
      {
        char v28 = 0;
        std::string::basic_string[abi:ne180100]<0>(v29, "Output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      char v28 = 0;
      std::string::basic_string[abi:ne180100]<0>(v29, "Input blob dimensions exceed ANE limit.");
    }

    BOOL v22 = v28 != 0;
    if (!v28)
    {
      uint64_t v24 = *a2;
      uint64_t v25 = a2[1];
      v27[0] = v24;
      v27[1] = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v44, (long long *)v29, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v27, (Espresso::base_kernel::validate_for_engine_warning_t *)&v44);
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      unint64_t v49 = (void **)v46;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
      unint64_t v49 = (void **)v45;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (v25) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v25);
      }
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
  else
  {
    unint64_t v20 = *a2;
    uint64_t v21 = a2[1];
    v48[0] = v20;
    v48[1] = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v42, "Only rank-4 inputs to space_to_batch are supported on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v44, (long long *)v42, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&v44);
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
    v36[0] = (void **)v46;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v36);
    v36[0] = (void **)v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    if (v21) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v21);
    }
    BOOL v22 = 0;
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v22;
}

void sub_19274AE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  _Unwind_Resume(a1);
}

void sub_19274AF28()
{
  if (!v0) {
    JUMPOUT(0x19274AF20);
  }
  JUMPOUT(0x19274AF18);
}

void Espresso::ANECompilerEngine::space_to_batch_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::space_to_batch_kernel::~space_to_batch_kernel(Espresso::ANECompilerEngine::space_to_batch_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::space_to_batch_kernel *)((char *)this + 320));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::space_to_batch_kernel *)((char *)this + 320));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::space_to_depth_kernel::~space_to_depth_kernel(Espresso::ANECompilerEngine::space_to_depth_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::space_to_depth_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::space_to_depth_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::space_to_depth_kernel::compile(Espresso::ANECompilerEngine::space_to_depth_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::space_to_depth_kernel::compile(Espresso::ANECompilerEngine::space_to_depth_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v23[0] = a3[6];
  int v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v23[0], (long long **)v23)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v23[0] = a3;
  int v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v23)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v12 = objc_opt_new();
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  unint64_t v34 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v23, a3);
  uint64_t v13 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
  [v12 setObject:v13 forKeyedSubscript:@"FactorX"];

  long long v14 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
  [v12 setObject:v14 forKeyedSubscript:@"FactorY"];

  [v12 setObject:&unk_1EE3AEE00 forKeyedSubscript:@"FactorZ"];
  uint64_t v15 = v30;
  if (*((_DWORD *)this + 71) == 1) {
    uint64_t v16 = @"PixelShuffle";
  }
  else {
    uint64_t v16 = @"PixelUnshuffle";
  }
  char v30 = v16;

  objc_storeStrong(&v31, v12);
  long long v17 = v33;
  if ((unint64_t)v33 >= v34)
  {
    unint64_t v19 = 0x8E38E38E38E38E39 * (((uint64_t)v33 - v32) >> 4);
    if (v19 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0x1C71C71C71C71C72 * ((uint64_t)(v34 - v32) >> 4);
    if (v20 <= v19 + 1) {
      unint64_t v20 = v19 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v34 - v32) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v21 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v21 = v20;
    }
    int v39 = &v34;
    if (v21) {
      unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v35 = (void **)v21;
    long long v36 = (std::string *)(v21 + 144 * v19);
    unint64_t v37 = v36;
    unint64_t v38 = v21 + 144 * v22;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v36, (uint64_t)v23);
    v37 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v32, &v35);
    id v18 = v33;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v35);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v33, (uint64_t)v23);
    id v18 = v17 + 6;
  }
  unint64_t v33 = v18;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 37) + 32))((char *)this + 296, a2, &v32);

  if (v28 < 0) {
    operator delete(__p);
  }
  uint64_t v35 = (void **)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
  uint64_t v35 = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  v23[0] = &v32;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_19274B3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v31 - 120);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  nitro::nitro_function::nitro_function(v27);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::space_to_depth_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6 = *((void *)a3 + 6);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  int v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *((void *)a3 + 3);
  uint64_t v12 = *(void *)(v11 + 32);
  long long v13 = *(_OWORD *)(v11 + 16);
  v38[0] = *(_OWORD *)v11;
  v38[1] = v13;
  uint64_t v39 = v12;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v40, *(const void **)(v11 + 40), *(void *)(v11 + 48), (uint64_t)(*(void *)(v11 + 48) - *(void *)(v11 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v43, v9, (const Espresso::layer_shape *)v38, 1);
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)a3;
  uint64_t v15 = *(void *)(*(void *)a3 + 32);
  long long v16 = *(_OWORD *)(*(void *)a3 + 16);
  v32[0] = *(_OWORD *)*(void *)a3;
  v32[1] = v16;
  uint64_t v33 = v15;
  long long __p = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v14 + 40), *(void *)(v14 + 48), (uint64_t)(*(void *)(v14 + 48) - *(void *)(v14 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v37, v9, (const Espresso::layer_shape *)v32, 1);
  if (__p)
  {
    uint64_t v35 = __p;
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unsigned int v17 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, 0);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v30, (NSString *)(a1 + 296), v10);
  Espresso::ANECompilerEngine::space_to_depth_kernel::pixel_shuffle_or_unshuffle_supported((uint64_t)v27, (uint64_t)v30, v17, v10, (uint64_t)v37, v43, (int *)(a1 + 280));
  int v18 = v27[0];
  if (!v27[0])
  {
    unint64_t v19 = *a2;
    unint64_t v20 = a2[1];
    v26[0] = v19;
    v26[1] = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v22, &v28, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v26, (Espresso::base_kernel::validate_for_engine_warning_t *)&v22);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    std::string v44 = (void **)&v24;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v44);
    std::string v44 = (void **)&v23;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v44);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (v20) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v20);
    }
  }
  if (v29 < 0) {
    operator delete((void *)v28);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v18 != 0;
}

void sub_19274B6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a9);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }

  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  _Unwind_Resume(a1);
}

void sub_19274B794()
{
  if (!v0) {
    JUMPOUT(0x19274B78CLL);
  }
  JUMPOUT(0x19274B784);
}

void Espresso::ANECompilerEngine::space_to_depth_kernel::pixel_shuffle_or_unshuffle_supported(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, uint64_t a5, _DWORD *a6, int *a7)
{
  _OWORD v31[2] = *MEMORY[0x1E4F143B8];
  id v12 = a4;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible((_DWORD *)a5, v12))
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
    goto LABEL_10;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(a6, v12))
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Output blob dimensions exceed ANE limit.");
    goto LABEL_10;
  }
  if (a7[2] != 1)
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "space_to_depth_kernel only supports pixel shuffle/unshuffle mode.");
    goto LABEL_10;
  }
  if (a3 >= 8 || ((0x97u >> a3) & 1) == 0)
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Pixel (un)shuffle: invalid compute path.");
    goto LABEL_10;
  }
  long long v13 = off_1E5746F00[a3];
  ANECTensorDescInitialize();
  char v27 = v13;
  uint64_t v14 = *(void *)(a5 + 12);
  *(void *)&long long v15 = (int)v14;
  *((void *)&v15 + 1) = SHIDWORD(v14);
  long long v29 = v15;
  uint64_t v30 = *(int *)(a5 + 8);
  *(void *)&long long v15 = (int)*(void *)a5;
  *((void *)&v15 + 1) = (int)HIDWORD(*(void *)a5);
  long long v28 = v15;
  if (a7[1] != 1)
  {
    ANECPixelUnshuffleLayerDescInitialize();
    ANECExpansionFactorInitialize();
    uint64_t v24 = *a7;
    uint64_t v25 = v24;
    uint64_t v26 = 1;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    if (ANECValidatePixelUnshuffleLayer())
    {
      Espresso::ANECompilerEngine::violations_from_alternates<ANECPixelUnshuffleLayerDescAlternate>((uint64_t)v21, v23, v22);
      Espresso::ANECompilerEngine::format_validation_violations((uint64_t)&__p, (uint64_t)v21);
      long long v16 = std::string::insert(&__p, 0, "ANECValidatePixelUnshuffleLayer returned invalid: ");
      goto LABEL_16;
    }
LABEL_19:
    *(unsigned char *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
    goto LABEL_10;
  }
  ANECPixelShuffleLayerDescInitialize();
  ANECExpansionFactorInitialize();
  uint64_t v24 = *a7;
  uint64_t v25 = v24;
  uint64_t v26 = 1;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!ANECValidatePixelShuffleLayer()) {
    goto LABEL_19;
  }
  Espresso::ANECompilerEngine::violations_from_alternates<ANECPixelShuffleLayerDescAlternate>((uint64_t)v21, v23, v22);
  Espresso::ANECompilerEngine::format_validation_violations((uint64_t)&__p, (uint64_t)v21);
  long long v16 = std::string::insert(&__p, 0, "ANECValidatePixelShuffleLayer returned invalid: ");
LABEL_16:
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
  v31[0] = v16->__r_.__value_.__l.__size_;
  *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 23) = *(void *)((char *)v31 + 7);
  uint64_t v19 = v31[0];
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v19;
  *(unsigned char *)(a1 + 31) = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v21);
LABEL_10:
}

void sub_19274BA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECPixelShuffleLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 608 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        int v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 76;
    }
    while (v6 != a2);
  }
}

void sub_19274BB80(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECPixelUnshuffleLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 608 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        int v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 76;
    }
    while (v6 != a2);
  }
}

void sub_19274BC44(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::space_to_depth_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::space_to_depth_kernel::~space_to_depth_kernel(Espresso::ANECompilerEngine::space_to_depth_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::space_to_depth_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::space_to_depth_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::degamma_kernel::~degamma_kernel(Espresso::ANECompilerEngine::degamma_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::degamma_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::degamma_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::degamma_kernel::compile(Espresso::ANECompilerEngine::degamma_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::degamma_kernel::compile(Espresso::ANECompilerEngine::degamma_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v20[0] = a3[6];
  int v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v20[0], (long long **)v20)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v20[0] = a3;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v20)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v12 = objc_opt_new();
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v20, a3);
  long long v13 = v27;
  char v27 = @"Neuron";

  [v12 setObject:@"Degamma" forKeyedSubscript:@"Type"];
  objc_storeStrong(&v28, v12);
  uint64_t v14 = v30;
  if ((unint64_t)v30 >= v31)
  {
    unint64_t v16 = 0x8E38E38E38E38E39 * (((uint64_t)v30 - v29) >> 4);
    if (v16 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = 0x1C71C71C71C71C72 * ((uint64_t)(v31 - v29) >> 4);
    if (v17 <= v16 + 1) {
      unint64_t v17 = v16 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v31 - v29) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v18 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v36 = &v31;
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v32 = (void **)v18;
    uint64_t v33 = (std::string *)(v18 + 144 * v16);
    unint64_t v34 = v33;
    unint64_t v35 = v18 + 144 * v19;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v33, (uint64_t)v20);
    v34 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v29, &v32);
    long long v15 = v30;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v32);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v30, (uint64_t)v20);
    long long v15 = v14 + 6;
  }
  uint64_t v30 = v15;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 36) + 32))((char *)this + 288, a2, &v29);

  if (v25 < 0) {
    operator delete(__p);
  }
  uint64_t v32 = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  uint64_t v32 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  v20[0] = &v29;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_19274C084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v13 - 104);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)(v13 - 128);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::degamma_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_degamma_kernel::kernel_type_str(Espresso::generic_degamma_kernel *this)
{
  return "degamma";
}

BOOL Espresso::ANECompilerEngine::degamma_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _OWORD **a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  int v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  uint64_t v11 = a3[6];
  id v12 = (std::__shared_weak_count *)*((void *)v11 + 10);
  if (v12)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    if (v13) {
      uint64_t v14 = (const Espresso::net *)*((void *)v11 + 9);
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  long long v15 = a3[3];
  uint64_t v16 = *((void *)v15 + 4);
  long long v17 = v15[1];
  v44[0] = *v15;
  v44[1] = v17;
  uint64_t v45 = v16;
  long long v46 = 0;
  long long v47 = 0;
  uint64_t v48 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, *((const void **)v15 + 5), *((void *)v15 + 6), (uint64_t)(*((void *)v15 + 6) - *((void *)v15 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v49, v14, (const Espresso::layer_shape *)v44, 1);
  if (v46)
  {
    long long v47 = v46;
    operator delete(v46);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  unint64_t v18 = a3[6];
  uint64_t v19 = (std::__shared_weak_count *)*((void *)v18 + 10);
  if (v19)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v19);
    if (v20) {
      char v21 = (const Espresso::net *)*((void *)v18 + 9);
    }
    else {
      char v21 = 0;
    }
  }
  else
  {
    char v21 = 0;
    unint64_t v20 = 0;
  }
  uint64_t v22 = *a3;
  uint64_t v23 = *((void *)*a3 + 4);
  long long v24 = (*a3)[1];
  v38[0] = **a3;
  v38[1] = v24;
  uint64_t v39 = v23;
  std::string __p = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v22 + 5), *((void *)v22 + 6), (uint64_t)(*((void *)v22 + 6) - *((void *)v22 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v43, v21, (const Espresso::layer_shape *)v38, 1);
  if (__p)
  {
    uint64_t v41 = __p;
    operator delete(__p);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  id v25 = v10;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v43, v25))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v49, v25))
    {
      if (*(_DWORD *)(a1 + 280))
      {
        unsigned __int8 v35 = 0;
        std::string::basic_string[abi:ne180100]<0>(v36, "ANE Degamma only supports default gamma of 2.2.");
      }
      else
      {
        unsigned __int8 v35 = 1;
        std::string::basic_string[abi:ne180100]<0>(v36, "Success");
      }
    }
    else
    {
      unsigned __int8 v35 = 0;
      std::string::basic_string[abi:ne180100]<0>(v36, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    unsigned __int8 v35 = 0;
    std::string::basic_string[abi:ne180100]<0>(v36, "Input blob dimensions exceed ANE limit.");
  }

  int v26 = v35;
  if (!v35)
  {
    char v27 = *a2;
    id v28 = a2[1];
    v34[0] = v27;
    v34[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v30, (long long *)v36, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v34, (Espresso::base_kernel::validate_for_engine_warning_t *)&v30);
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    uint64_t v50 = (void **)&v32;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
    uint64_t v50 = (void **)&v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (v28) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v28);
    }
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v26 != 0;
}

void sub_19274C42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::degamma_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::degamma_kernel::~degamma_kernel(Espresso::ANECompilerEngine::degamma_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::degamma_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::degamma_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::transpose_kernel::~transpose_kernel(Espresso::ANECompilerEngine::transpose_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::transpose_kernel *)((char *)this - 304);
  *((void *)this - 38) = &unk_1EE341A98;
  *(void *)this = &unk_1EE341BF8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::transpose_kernel *)((char *)this - 304);
  *((void *)this - 38) = &unk_1EE341A98;
  *(void *)this = &unk_1EE341BF8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::transpose_kernel::compile(Espresso::ANECompilerEngine::transpose_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::transpose_kernel::compile(Espresso::ANECompilerEngine::transpose_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v21[0] = a3[6];
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v21[0], (long long **)v21);
  uint64_t v11 = *((void *)v9 + 5);
  int v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v21[0] = a3;
  id v12 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)v21)+ 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape((char *)v21, v11);
  if (v22 == 1) {
    int v13 = 4;
  }
  else {
    int v13 = 5;
  }
  if (v23 == -1) {
    int v14 = v13;
  }
  else {
    int v14 = v23;
  }
  if (__p)
  {
    v26[0] = __p;
    operator delete(__p);
  }
  if (*((void *)this + 65))
  {
    int v15 = 1;
  }
  else if (v14 == 5)
  {
    int v15 = *(unsigned char *)(v8 + 1281) == 0;
  }
  else
  {
    int v15 = -1;
  }
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)v21, (unsigned int *)this + 70, (uint64_t)a3, v15);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = &v16;
  char v20 = 0;
  uint64_t v16 = (char *)operator new(0x90uLL);
  uint64_t v17 = (uint64_t)v16;
  unint64_t v18 = v16 + 144;
  uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v18, (uint64_t)v21, (uint64_t)&v31, (uint64_t)v16);

  if (v27 < 0) {
    operator delete((void *)v26[4]);
  }
  uint64_t v19 = (char **)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  uint64_t v19 = (char **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  if (SHIBYTE(v23) < 0) {
    operator delete(v21[0]);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, char **))(*((void *)this + 38) + 32))((char *)this + 304, a2, &v16);
  v21[0] = &v16;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_19274C92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  nitro::nitro_function::nitro_function(v6);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::transpose_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::transpose_kernel::~transpose_kernel(Espresso::ANECompilerEngine::transpose_kernel *this)
{
  *(void *)this = &unk_1EE341A98;
  uint64_t v2 = (Espresso::ANECompilerEngine::transpose_kernel *)((char *)this + 304);
  *((void *)this + 38) = &unk_1EE341BF8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341A98;
  uint64_t v2 = (Espresso::ANECompilerEngine::transpose_kernel *)((char *)this + 304);
  *((void *)this + 38) = &unk_1EE341BF8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

double Espresso::ANECompilerEngine::flatten_kernel::flatten_kernel(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(unsigned char *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE340000;
  *(void *)(v5 + 288) = &unk_1EE340160;
  *(void *)(v5 + 280) = *a3;
  return result;
}

__n128 Espresso::ANECompilerEngine::general_padding_kernel::general_padding_kernel(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v7 + 340) = 0u;
  *(_OWORD *)(v7 + 312) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 280) = 0u;
  *(_OWORD *)(v7 + 296) = 0u;
  char v8 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v7 + 496) = 0u;
  *(_OWORD *)(v7 + 512) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(unsigned char *)(v7 + 416) = 0;
  *(_OWORD *)(v7 + 424) = 0u;
  *(_OWORD *)(v7 + 440) = 0u;
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(unsigned char *)(v7 + 488) = 0;
  *(_DWORD *)(v7 + 528) = 1065353216;
  *(_WORD *)(v7 + 536) = 0;
  *(unsigned char *)(v7 + 538) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v7 + 540) = _D1;
  *(unsigned char *)(v7 + 548) = 0;
  *(_OWORD *)(v7 + 552) = 0u;
  *(unsigned char *)(v7 + 568) = v8;
  *(void *)uint64_t v7 = &unk_1EE3457F0;
  *(void *)(v7 + 360) = &unk_1EE345958;
  *(_OWORD *)(v7 + 576) = 0u;
  *(_DWORD *)(v7 + 592) = a3;
  *(_OWORD *)(v7 + 280) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v15 = *(_OWORD *)(a4 + 32);
  long long v16 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v7 + 340) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v7 + 312) = v15;
  *(_OWORD *)(v7 + 328) = v16;
  *(__n128 *)(v7 + 296) = result;
  return result;
}

uint64_t Espresso::ANECompilerEngine::tensor_zero_pad_kernel::tensor_zero_pad_kernel(uint64_t a1, uint64_t *a2, const void *a3)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *(_OWORD *)(v6 + 100) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(_OWORD *)(v6 + 132) = 0u;
  *(_OWORD *)(v6 + 148) = 0u;
  *(_OWORD *)(v6 + 164) = 0u;
  *(_OWORD *)(v6 + 180) = 0u;
  *(_OWORD *)(v6 + 196) = 0u;
  *(_OWORD *)(v6 + 212) = 0u;
  *(_OWORD *)(v6 + 228) = 0u;
  *(_OWORD *)(v6 + 244) = 0u;
  *(_OWORD *)(v6 + 4) = 0u;
  *(void *)(v6 + 257) = 0;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(unsigned char *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(unsigned char *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 720) = 1065353216;
  *(_WORD *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 730) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 732) = _D1;
  *(unsigned char *)(a1 + 740) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(unsigned char *)(a1 + 760) = v7;
  *(void *)a1 = &unk_1EE345E08;
  *(void *)(a1 + 552) = &unk_1EE345F68;
  memcpy((void *)v6, a3, 0x109uLL);
  return a1;
}

void ___ZN8Espresso17ANECompilerEngine22tensor_zero_pad_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2 = *(void *)(a2->i64[0] + 8);
  if (v2 == *(void *)(a1 + 32))
  {
    int v5 = (***(uint64_t (****)(void))(v2 + 8))(*(void *)(v2 + 8));
    uint64_t v6 = *(void *)(a1 + 40);
    unint64_t v7 = a2[3].i32[2];
    int v55 = *(_DWORD *)(*(void *)(*(void *)(v6 + 32) + 16 * v7) + 12);
    int v56 = v5;
    char v8 = (uint64_t **)(v6 + 184);
    unint64_t v58 = v7;
    v48[0] = *((long long **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 56, v7, &v58)+ 3);
    uint64_t v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void *)v48[0], v48);
    long long v10 = *(_OWORD *)(v9 + 72);
    long long v49 = *(_OWORD *)(v9 + 56);
    long long v50 = v10;
    uint64_t v11 = (const void *)*((void *)v9 + 12);
    uint64_t v51 = *((void *)v9 + 11);
    int v52 = 0;
    char v53 = 0;
    uint64_t v54 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v52, v11, *((void *)v9 + 13), (uint64_t)(*((void *)v9 + 13) - (void)v11) >> 2);
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)a2->i64[0] + 320))();
    v43[0] = v49;
    v43[1] = v50;
    uint64_t v44 = v51;
    std::string __p = 0;
    long long v46 = 0;
    uint64_t v47 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v52, (uint64_t)v53, (v53 - (unsigned char *)v52) >> 2);
    Espresso::ANECompilerEngine::tensor_zero_pad_kernel::get_padding_params((uint64_t)v48, v12, (uint64_t)v43);
    if (__p)
    {
      long long v46 = __p;
      operator delete(__p);
    }
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    LODWORD(v58) = a2[3].i32[2];
    long long v59 = 0uLL;
    unint64_t v13 = a2[2].u64[1];
    if (v13 >= a2[3].i64[0])
    {
      uint64_t v14 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v58);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v58);
      uint64_t v14 = v13 + 72;
      a2[2].i64[1] = v13 + 72;
    }
    a2[2].i64[1] = v14;
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    if (*((void *)&v59 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v59 + 1));
    }
    Espresso::abstract_engine_factory::shared(&v39);
    uint64_t v15 = v39;
    uint64_t v16 = a2->i64[0];
    std::string::basic_string[abi:ne180100]<0>(v37, "general_padding");
    Espresso::abstract_engine_factory::make_kernel_priv(v15, v16 + 8, (uint64_t)v37, (uint64_t)v48, &v56);
    std::string::basic_string[abi:ne180100]<0>(&__str, "general_padding");
    uint64_t v17 = a2[1].i64[0];
    uint64_t v18 = *(void *)(a1 + 40) + 56;
    unint64_t v19 = a2[3].i32[2];
    unint64_t v35 = v19;
    char v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, v19, &v35);
    uint64_t v21 = *(void *)(a1 + 40) + 96;
    unint64_t v22 = a2[3].i32[2];
    unint64_t v34 = v22;
    int v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v22, &v34);
    LODWORD(v58) = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    uint64_t v24 = (char *)operator new(0xF8uLL);
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)uint64_t v24 = &unk_1EE389DF0;
    *((void *)v24 + 3) = &unk_1EE36C758;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 120) = 0u;
    *(_OWORD *)(v24 + 136) = 0u;
    *(_OWORD *)(v24 + 152) = 0u;
    *(_OWORD *)(v24 + 161) = 0u;
    *((_OWORD *)v24 + 13) = 0u;
    *((_OWORD *)v24 + 14) = 0u;
    *((void *)v24 + 30) = 0;
    *(void *)&long long v59 = v24 + 24;
    *((void *)&v59 + 1) = v24;
    uint64_t v25 = v41;
    int v26 = v42;
    if (v42)
    {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      char v27 = (std::__shared_weak_count *)*((void *)v24 + 12);
      *((void *)v24 + 11) = v25;
      *((void *)v24 + 12) = v26;
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
    }
    else
    {
      *((void *)v24 + 11) = v41;
      *((void *)v24 + 12) = 0;
    }
    std::string::operator=((std::string *)(v59 + 16), (const std::string *)(v17 + 16));
    std::string::operator=((std::string *)(v59 + 40), &__str);
    int v28 = (***(uint64_t (****)(void))(*(void *)(v41 + 8) + 8))(*(void *)(*(void *)(v41 + 8) + 8));
    uint64_t v29 = v59;
    *(_DWORD *)(v59 + 8) = v28;
    uint64_t v30 = a2[1].i64[0];
    if (v30)
    {
      *(_DWORD *)(v29 + 12) = *(_DWORD *)(v30 + 12);
      if (*(char *)(v30 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v30 + 200), *(void *)(v30 + 208));
      }
      else {
        std::string v57 = *(std::string *)(v30 + 200);
      }
      std::string::operator=((std::string *)(v29 + 200), &v57);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v31 = *(void *)(a2[4].i64[0] + 32);
      if (*(void *)(a2[4].i64[0] + 40) != v31) {
        *(_DWORD *)(v29 + 12) = *(_DWORD *)(*(void *)v31 + 12);
      }
    }
    if (&v60 != (long long *)(v20 + 3)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v60, (std::string *)v20[3], (std::string *)v20[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
    }
    if ((void *)((char *)&v61 + 8) != v23 + 3) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v61 + 8, (std::string *)v23[3], (std::string *)v23[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23[4] - v23[3]) >> 3));
    }
    LODWORD(v58) = a2[3].i32[2];
    unint64_t v32 = a2[2].u64[1];
    if (v32 >= a2[3].i64[0])
    {
      uint64_t v33 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v58);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v58);
      uint64_t v33 = v32 + 72;
      a2[2].i64[1] = v32 + 72;
    }
    a2[2].i64[1] = v33;
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    if (*((void *)&v59 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v59 + 1));
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if (v52)
    {
      char v53 = v52;
      operator delete(v52);
    }
  }
}

void sub_19274D30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v26 - 120));
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  int v28 = *(void **)(v26 - 184);
  if (v28)
  {
    *(void *)(v26 - 176) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::crop_kernel::crop_kernel(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(unsigned char *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(unsigned char *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(unsigned char *)(v5 + 474) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 476) = _D1;
  *(unsigned char *)(v5 + 484) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(unsigned char *)(v5 + 504) = v6;
  *(void *)uint64_t v5 = &unk_1EE33E8E0;
  *(void *)(v5 + 296) = &unk_1EE33EA40;
  *(_OWORD *)(v5 + 512) = 0u;
  __n128 result = *a3;
  *(__n128 *)(v5 + 280) = *a3;
  return result;
}

__n128 Espresso::ANECompilerEngine::broadcast_kernel::broadcast_kernel(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v7 + 280) = -1;
  *(void *)(v7 + 288) = -1;
  *(void *)(v7 + 296) = 0xFFFFFFFF00000001;
  *(unsigned char *)(v7 + 304) = 0;
  *(_DWORD *)(v7 + 308) = 0;
  *(unsigned char *)(v7 + 312) = 0;
  char v8 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_OWORD *)(v7 + 360) = 0u;
  *(unsigned char *)(v7 + 376) = 0;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  *(_OWORD *)(v7 + 432) = 0u;
  *(unsigned char *)(v7 + 448) = 0;
  *(_DWORD *)(v7 + 488) = 1065353216;
  *(_WORD *)(v7 + 496) = 0;
  *(unsigned char *)(v7 + 498) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v7 + 500) = _D1;
  *(unsigned char *)(v7 + 508) = 0;
  *(_OWORD *)(v7 + 512) = 0u;
  *(unsigned char *)(v7 + 528) = v8;
  *(void *)uint64_t v7 = &unk_1EE341698;
  *(void *)(v7 + 320) = &unk_1EE3417F8;
  *(_DWORD *)(v7 + 532) = a3;
  *(_DWORD *)(v7 + 536) = 0x4000;
  __n128 result = *(__n128 *)a4;
  long long v15 = *(_OWORD *)(a4 + 16);
  *(unsigned char *)(v7 + 312) = *(unsigned char *)(a4 + 32);
  *(__n128 *)(v7 + 280) = result;
  *(_OWORD *)(v7 + 296) = v15;
  return result;
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a3[1] - *a3 != 64 || a3[3] == a3[4]) {
    return 0;
  }
  uint64_t v6 = a3[6];
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    char v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    char v8 = 0;
  }
  uint64_t v11 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  __int16 v58 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  __int16 v61 = 0;
  uint64_t v62 = 0x1000100010001;
  int v63 = 0;
  int v65 = 1;
  int v72 = 0;
  char v73 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  memset(v51, 0, 32);
  v51[4] = 1;
  long long v64 = xmmword_192DCA230;
  uint64_t v66 = 0;
  unint64_t v56 = 0xFFFFFFFF00000000;
  uint64_t v57 = _D0;
  int v67 = 0x10000;
  int v70 = 0;
  __int16 v71 = 1;
  uint64_t v17 = *a3;
  int v18 = *(_DWORD *)*a3;
  int v19 = *(_DWORD *)(*a3 + 4);
  int v54 = v18;
  int v55 = v19;
  int v20 = *(_DWORD *)(v17 + 8);
  uint64_t v21 = a3[3];
  int v22 = *(_DWORD *)(v21 + 8);
  int v52 = v22;
  int v53 = v20;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = a3[3];
  }
  long long v23 = *(_OWORD *)(v21 + 16);
  uint64_t v24 = *(void *)(v21 + 32);
  v45[0] = *(_OWORD *)v21;
  v45[1] = v23;
  uint64_t v46 = v24;
  std::string __p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v21 + 40), *(void *)(v21 + 48), (uint64_t)(*(void *)(v21 + 48) - *(void *)(v21 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v50, v9, (const Espresso::layer_shape *)v45, 1);
  if (__p)
  {
    uint64_t v48 = __p;
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v50, v11))
  {
    uint64_t v29 = *(int64x2_t **)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    v44[0] = v29;
    v44[1] = (int64x2_t *)v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v38, *(_DWORD *)a3[3]);
    uint64_t v30 = std::string::insert(&v38, 0, "Output size too large for inner_product layer: ");
    std::string v39 = *v30;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v40, (long long *)&v39, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&v40);
    goto LABEL_35;
  }
  uint64_t v25 = (_DWORD *)a3[3];
  if (v25[1] != 1 || *v25 != 1)
  {
    uint64_t v26 = *(void **)(a1 + 440);
    if (v26)
    {
      if (*v26 && (v26[4] || v26[6] || v26[8] || v26[10]))
      {
        char v27 = *(int64x2_t **)a2;
        uint64_t v10 = *(void *)(a2 + 8);
        v37[0] = v27;
        v37[1] = (int64x2_t *)v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v39, "Quantized / palletized weights are not supported with matmul based inner product.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v40, (long long *)&v39, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v37, (Espresso::base_kernel::validate_for_engine_warning_t *)&v40);
        if (v43) {
          nitro::nitro_function::nitro_function(v43);
        }
        v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_44;
        }
        int v28 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_43:
        operator delete(v28);
LABEL_44:
        if (!v10) {
          goto LABEL_48;
        }
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v10);
        goto LABEL_47;
      }
    }
  }
  if (*(_DWORD *)(a1 + 336))
  {
LABEL_47:
    uint64_t v10 = 0;
    goto LABEL_48;
  }
  unint64_t v32 = *(std::__shared_weak_count **)(a2 + 8);
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  is_valid_kernel_input_std::string::size_type size = Espresso::is_valid_kernel_input_size((uint64_t)v51, a3, 0);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (!is_valid_kernel_input_size)
  {
    unint64_t v34 = *(int64x2_t **)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    v36[0] = v34;
    v36[1] = (int64x2_t *)v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v38, v19 * v18 * v22);
    unint64_t v35 = std::string::insert(&v38, 0, "kernel input size too large for inner_product layerRoughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
    std::string v39 = *v35;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v40, (long long *)&v39, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v36, (Espresso::base_kernel::validate_for_engine_warning_t *)&v40);
LABEL_35:
    if (v43) {
      nitro::nitro_function::nitro_function(v43);
    }
    uint64_t v74 = (void **)v42;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v74);
    uint64_t v74 = (void **)v41;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v74);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    int v28 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_43;
  }
  uint64_t v10 = 1;
LABEL_48:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v10;
}

void sub_19274DA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a27);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }

  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  _Unwind_Resume(a1);
}

void sub_19274DB00()
{
  if (!v0) {
    JUMPOUT(0x19274DAF8);
  }
  JUMPOUT(0x19274DAF0);
}

BOOL Espresso::ANECompilerEngine::slice_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v5 = (void *)a3[6];
  if (*(void *)(*v5 + 224 * a3[9] + 144) - *(void *)(*v5 + 224 * a3[9] + 136) == 24)
  {
    uint64_t v7 = (std::__shared_weak_count *)v5[10];
    if (v7 && (char v8 = std::__shared_weak_count::lock(v7)) != 0)
    {
      uint64_t v9 = v8;
      char v10 = 0;
      uint64_t v11 = (uint64_t **)v5[9];
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      char v10 = 1;
    }
    uint64_t v14 = *a3;
    uint64_t v15 = *(void *)(*a3 + 32);
    long long v16 = *(_OWORD *)(*a3 + 16);
    v37[0] = *(_OWORD *)*a3;
    v37[1] = v16;
    uint64_t v38 = v15;
    std::string v39 = 0;
    std::string v40 = 0;
    uint64_t v41 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v39, *(const void **)(v14 + 40), *(void *)(v14 + 48), (uint64_t)(*(void *)(v14 + 48) - *(void *)(v14 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, (const Espresso::net *)v11, (const Espresso::layer_shape *)v37, 1);
    if (v39)
    {
      std::string v40 = v39;
      operator delete(v39);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    if ((v10 & 1) == 0) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = a3[3];
    uint64_t v18 = *(void *)(v17 + 32);
    long long v19 = *(_OWORD *)(v17 + 16);
    v31[0] = *(_OWORD *)v17;
    v31[1] = v19;
    uint64_t v32 = v18;
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v36, (const Espresso::net *)v11, (const Espresso::layer_shape *)v31, 1);
    if (v33)
    {
      unint64_t v34 = v33;
      operator delete(v33);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    int v20 = *((_DWORD *)a3 + 16);
    uint64_t v21 = *(long long **)(*(void *)a3[6] + 224 * a3[9] + 136);
    if (*((char *)v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v21, *((void *)v21 + 1));
    }
    else
    {
      long long v22 = *v21;
      v30.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v11[45], &v30))
    {
      char v27 = &v30;
      long long v23 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11 + 44, &v30, (uint64_t)&std::piecewise_construct, (long long **)&v27);
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)(v23 + 56);
      v45[0] = 0;
      v45[1] = 0;
      v44.__r_.__value_.__r.__words[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v44.__r_.__value_.__r.__words[2], *((const void **)v23 + 9), *((void *)v23 + 10), (uint64_t)(*((void *)v23 + 10) - *((void *)v23 + 9)) >> 2);
      int v20 = LODWORD(v44.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(v44.__r_.__value_.__r.__words[1]);
      if (v44.__r_.__value_.__r.__words[2])
      {
        v45[0] = *((void *)&v44.__r_.__value_.__l + 2);
        operator delete((void *)v44.__r_.__value_.__r.__words[2]);
      }
    }
    Espresso::ANECompilerEngine::slice_kernel::supported_by_hw((uint64_t)&v27, (uint64_t)__p, (unsigned int *)(a1 + 280), v20);
    BOOL v12 = (_BYTE)v27 != 0;
    if (!(_BYTE)v27)
    {
      uint64_t v24 = *a2;
      uint64_t v25 = a2[1];
      v26[0] = v24;
      v26[1] = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v44, &v28, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v26, (Espresso::base_kernel::validate_for_engine_warning_t *)&v44);
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      uint64_t v49 = (void **)v46;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
      uint64_t v49 = (void **)v45;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (v25) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v25);
      }
    }
    if (v29 < 0) {
      operator delete((void *)v28);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    BOOL result = v12;
    if (v10) {
      return result;
    }
LABEL_14:
    nitro::nitro_function::nitro_function(v9);
    return v12;
  }
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  v48[0] = *a2;
  v48[1] = (int64x2_t *)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Invalid number of inputs, only slice operations with 1 input are supported on ANE");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v44, (long long *)__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&v44);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  v36[0] = (void **)v46;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v36);
  v36[0] = (void **)v45;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v36);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  BOOL v12 = 0;
  BOOL result = 0;
  if (v9) {
    goto LABEL_14;
  }
  return result;
}

void sub_19274DED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v53 - 224));
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if ((v52 & 1) == 0) {
    nitro::nitro_function::nitro_function(v50);
  }
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::cast_kernel::cast_kernel(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(unsigned char *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE33E4E0;
  *(void *)(v5 + 288) = &unk_1EE33E640;
  *(void *)(v5 + 280) = *a3;
  return result;
}

double Espresso::ANECompilerEngine::tunneled_ane_op_kernel::tunneled_ane_op_kernel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel(a1, a2, a4);
  char v6 = *(unsigned char *)(*a2 + 123);
  double result = 0.0;
  *(_OWORD *)(v5 + 696) = 0u;
  *(_OWORD *)(v5 + 712) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_OWORD *)(v5 + 600) = 0u;
  *(unsigned char *)(v5 + 616) = 0;
  *(_OWORD *)(v5 + 624) = 0u;
  *(_OWORD *)(v5 + 640) = 0u;
  *(_OWORD *)(v5 + 656) = 0u;
  *(_OWORD *)(v5 + 672) = 0u;
  *(unsigned char *)(v5 + 688) = 0;
  *(_DWORD *)(v5 + 728) = 1065353216;
  *(_WORD *)(v5 + 736) = 0;
  *(unsigned char *)(v5 + 738) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 740) = _D1;
  *(unsigned char *)(v5 + 748) = 0;
  *(_OWORD *)(v5 + 752) = 0u;
  *(unsigned char *)(v5 + 768) = v6;
  *(void *)uint64_t v5 = &unk_1EE346008;
  *(void *)(v5 + 560) = &unk_1EE346168;
  return result;
}

uint64_t Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  uint64_t v6 = v5 + 280;
  *(_DWORD *)(v5 + 336) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  uint64_t v7 = (std::string *)(v5 + 344);
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_DWORD *)(v5 + 328) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(void *)(v5 + 552) = 0;
  *(void *)uint64_t v5 = &unk_1EE365D08;
  if (v5 + 280 != a3)
  {
    std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>((void *)(v5 + 280), *(char **)a3, *(char **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
    std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>((void *)(a1 + 304), *(char **)(a3 + 24), *(char **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
  }
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a3 + 56);
  std::string::operator=(v7, (const std::string *)(a3 + 64));
  std::string::operator=((std::string *)(a1 + 368), (const std::string *)(a3 + 88));
  std::string::operator=((std::string *)(a1 + 392), (const std::string *)(a3 + 112));
  if (v6 != a3)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 416, *(std::string **)(a3 + 136), *(std::string **)(a3 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 144) - *(void *)(a3 + 136)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 440, *(std::string **)(a3 + 160), *(std::string **)(a3 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 168) - *(void *)(a3 + 160)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 464, *(std::string **)(a3 + 184), *(std::string **)(a3 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 192) - *(void *)(a3 + 184)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 488, *(std::string **)(a3 + 208), *(std::string **)(a3 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 216) - *(void *)(a3 + 208)) >> 3));
    uint64_t v9 = *(void *)(a3 + 232);
    uint64_t v8 = *(void *)(a3 + 240);
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v9) >> 3);
    uint64_t v11 = *(void *)(a1 + 528);
    uint64_t v12 = *(void *)(a1 + 512);
    if (0x4EC4EC4EC4EC4EC5 * ((v11 - v12) >> 3) >= v10)
    {
      if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 520) - v12) >> 3) >= v10)
      {
        long long v23 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *>(*(std::string **)(a3 + 232), *(std::string **)(a3 + 240), *(std::string **)(a1 + 512));
        for (uint64_t i = *(void *)(a1 + 520);
              (std::string *)i != v23;
              std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](i))
        {
          i -= 104;
        }
        *(void *)(a1 + 520) = v23;
        goto LABEL_25;
      }
      long long v22 = (std::string *)(v9 + 8 * ((*(void *)(a1 + 520) - v12) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *>(*(std::string **)(a3 + 232), v22, *(std::string **)(a1 + 512));
      uint64_t v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::foreign_network_weight_file_t>,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*>(a1 + 528, (uint64_t)v22, v8, *(void *)(a1 + 520));
    }
    else
    {
      if (v12)
      {
        unint64_t v13 = (void **)(a1 + 512);
        uint64_t v14 = *(void *)(a1 + 520);
        uint64_t v15 = *(void **)(a1 + 512);
        if (v14 != v12)
        {
          do
          {
            v14 -= 104;
            std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](v14);
          }
          while (v14 != v12);
          uint64_t v15 = *v13;
        }
        *(void *)(a1 + 520) = v12;
        operator delete(v15);
        uint64_t v11 = 0;
        std::__shared_weak_count *v13 = 0;
        *(void *)(a1 + 520) = 0;
        *(void *)(a1 + 528) = 0;
      }
      if (v10 > 0x276276276276276) {
        goto LABEL_27;
      }
      unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * (v11 >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v10) {
        uint64_t v17 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v9) >> 3);
      }
      unint64_t v18 = v16 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v17;
      if (v18 > 0x276276276276276) {
LABEL_27:
      }
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(v18);
      *(void *)(a1 + 512) = v19;
      *(void *)(a1 + 520) = v19;
      *(void *)(a1 + 528) = &v19[104 * v20];
      uint64_t v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::foreign_network_weight_file_t>,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*>(a1 + 528, v9, v8, (uint64_t)v19);
    }
    *(void *)(a1 + 520) = v21;
LABEL_25:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 536, *(std::string **)(a3 + 256), *(std::string **)(a3 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 264) - *(void *)(a3 + 256)) >> 3));
  }
  return a1;
}

void sub_19274E484(_Unwind_Exception *a1)
{
  *(void *)(v1 + 520) = v2;
  Espresso::kernel_with_uniforms<Espresso::tunneled_ane_op_params_t>::~kernel_with_uniforms(v1);
  _Unwind_Resume(a1);
}

void Espresso::kernel_with_uniforms<Espresso::tunneled_ane_op_params_t>::~kernel_with_uniforms(uint64_t a1)
{
  *(void *)a1 = &unk_1EE356848;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(a1 + 280));

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

void Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(Espresso::tunneled_ane_op_params_t *this)
{
  uint64_t v7 = (void **)((char *)this + 256);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v2 = *((void *)this + 29);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 30);
    uint64_t v4 = (void *)*((void *)this + 29);
    if (v3 != v2)
    {
      do
      {
        v3 -= 104;
        std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 29);
    }
    *((void *)this + 30) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void **)((char *)this + 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v6;
    operator delete(v6);
  }
}

void std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_23:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    double result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    void v7[2] = &result[3 * v13];
    size_t v14 = a3 - v6;
    if (v14) {
      double result = memmove(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    unint64_t v18 = (void *)*result;
LABEL_21:
    double result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    unint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v15 = &v9[v14];
  return result;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      LODWORD(this[1].__r_.__value_.__l.__data_) = v5[1].__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
      std::string::operator=((std::string *)((char *)this + 56), (std::string *)((char *)v5 + 56));
      std::string::operator=((std::string *)((char *)this + 80), (std::string *)((char *)v5 + 80));
      this = (std::string *)((char *)this + 104);
      uint64_t v5 = (std::string *)((char *)v5 + 104);
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::foreign_network_weight_file_t>,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *(void *)(v8 + 16) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v8 = v10;
      }
      *(_DWORD *)(a4 + v7 + 24) = *(_DWORD *)(a2 + v7 + 24);
      uint64_t v11 = (const std::string::value_type **)(a2 + v7 + 32);
      if (*(char *)(a2 + v7 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7 + 32), *v11, *(void *)(a2 + v7 + 40));
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        *(void *)(a4 + v7 + 48) = *(void *)(a2 + v7 + 48);
        *(_OWORD *)(a4 + v7 + 32) = v12;
      }
      uint64_t v13 = (const std::string::value_type **)(a2 + v7 + 56);
      if (*(char *)(a2 + v7 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7 + 56), *v13, *(void *)(a2 + v7 + 64));
      }
      else
      {
        long long v14 = *(_OWORD *)v13;
        *(void *)(a4 + v7 + 72) = *(void *)(a2 + v7 + 72);
        *(_OWORD *)(a4 + v7 + 56) = v14;
      }
      uint64_t v15 = (std::string *)(a4 + v7 + 80);
      unint64_t v16 = (const std::string::value_type **)(a2 + v7 + 80);
      if (*(char *)(a2 + v7 + 103) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *v16, *(void *)(a2 + v7 + 88));
      }
      else
      {
        long long v17 = *(_OWORD *)v16;
        *(void *)(a4 + v7 + 96) = *(void *)(a2 + v7 + 96);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
      }
      v7 += 104;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_19274E9D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  while (v2 != v1)
  {
    v2 -= 104;
    std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

double Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::tunneled_ane_unit_kernel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel(a1, a2, a4);
  char v6 = *(unsigned char *)(*a2 + 123);
  double result = 0.0;
  *(_OWORD *)(v5 + 592) = 0u;
  *(_OWORD *)(v5 + 608) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(unsigned char *)(v5 + 512) = 0;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(unsigned char *)(v5 + 584) = 0;
  *(_DWORD *)(v5 + 624) = 1065353216;
  *(_WORD *)(v5 + 632) = 0;
  *(unsigned char *)(v5 + 634) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 636) = _D1;
  *(unsigned char *)(v5 + 644) = 0;
  *(_OWORD *)(v5 + 648) = 0u;
  *(unsigned char *)(v5 + 664) = v6;
  *(void *)uint64_t v5 = &unk_1EE346CD8;
  *(void *)(v5 + 456) = &unk_1EE346E38;
  return result;
}

uint64_t Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_OWORD *)(v5 + 156) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)a1 = &unk_1EE367CF0;
  if (v5 == a3) {
    goto LABEL_52;
  }
  std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>((void *)v5, *(char **)a3, *(char **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>((void *)(a1 + 304), *(char **)(a3 + 24), *(char **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
  uint64_t v7 = *(const std::string **)(a3 + 48);
  uint64_t v6 = *(void *)(a3 + 56);
  unint64_t v8 = (v6 - (uint64_t)v7) >> 5;
  uint64_t v9 = *(void *)(a1 + 344);
  long long v10 = *(std::string **)(a1 + 328);
  if (v8 <= (v9 - (uint64_t)v10) >> 5)
  {
    unint64_t v16 = *(std::string **)(a1 + 336);
    unint64_t v17 = ((char *)v16 - (char *)v10) >> 5;
    if (v17 >= v8)
    {
      if (v7 != (const std::string *)v6)
      {
        do
        {
          long long v22 = v10;
          std::string::value_type v24 = v7->__r_.__value_.__s.__data_[0];
          long long v23 = (const std::string *)&v7->__r_.__value_.__r.__words[1];
          v10->__r_.__value_.__s.__data_[0] = v24;
          uint64_t v25 = (std::string *)&v10->__r_.__value_.__r.__words[1];
          std::string::operator=(v25, v23);
          uint64_t v7 = v23 + 1;
          long long v10 = v25 + 1;
        }
        while (v7 != (const std::string *)v6);
        long long v10 = (std::string *)((char *)v22 + 32);
        unint64_t v16 = *(std::string **)(a1 + 336);
      }
      while (v16 != v10)
      {
        if (SHIBYTE(v16[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16[-1].__r_.__value_.__l.__data_);
        }
        unint64_t v16 = (std::string *)((char *)v16 - 32);
      }
      *(void *)(a1 + 336) = v10;
      goto LABEL_27;
    }
    uint64_t v18 = (uint64_t)v7 + 32 * v17;
    if (v16 != v10)
    {
      do
      {
        std::string::value_type v20 = v7->__r_.__value_.__s.__data_[0];
        long long v19 = (const std::string *)&v7->__r_.__value_.__r.__words[1];
        v10->__r_.__value_.__s.__data_[0] = v20;
        uint64_t v21 = (std::string *)&v10->__r_.__value_.__r.__words[1];
        std::string::operator=(v21, v19);
        uint64_t v7 = v19 + 1;
        long long v10 = v21 + 1;
      }
      while (v7 != (const std::string *)v18);
      long long v10 = *(std::string **)(a1 + 336);
    }
    uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_bottom_layout_t>,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*>(a1 + 344, v18, v6, (uint64_t)v10);
  }
  else
  {
    if (v10)
    {
      std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100]((uint64_t *)(a1 + 328));
      operator delete(*(void **)(a1 + 328));
      uint64_t v9 = 0;
      *(void *)(a1 + 328) = 0;
      *(void *)(a1 + 336) = 0;
      *(void *)(a1 + 344) = 0;
    }
    if (v6 - (void)v7 < 0) {
      goto LABEL_53;
    }
    uint64_t v11 = v9 >> 4;
    if (v9 >> 4 <= v8) {
      uint64_t v11 = (v6 - (uint64_t)v7) >> 5;
    }
    unint64_t v12 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v11;
    if (v12 >> 59) {
LABEL_53:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v12);
    *(void *)(a1 + 328) = v13;
    *(void *)(a1 + 336) = v13;
    *(void *)(a1 + 344) = &v13[32 * v14];
    uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_bottom_layout_t>,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*>(a1 + 344, (uint64_t)v7, v6, (uint64_t)v13);
  }
  *(void *)(a1 + 336) = v15;
LABEL_27:
  char v27 = *(const std::string **)(a3 + 72);
  uint64_t v26 = *(void *)(a3 + 80);
  unint64_t v28 = (v26 - (uint64_t)v27) >> 5;
  uint64_t v29 = *(void *)(a1 + 368);
  std::string v30 = *(std::string **)(a1 + 352);
  if (v28 > (v29 - (uint64_t)v30) >> 5)
  {
    if (v30)
    {
      std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100]((uint64_t *)(a1 + 352));
      operator delete(*(void **)(a1 + 352));
      uint64_t v29 = 0;
      *(void *)(a1 + 352) = 0;
      *(void *)(a1 + 360) = 0;
      *(void *)(a1 + 368) = 0;
    }
    if (v26 - (void)v27 < 0) {
      goto LABEL_54;
    }
    uint64_t v31 = v29 >> 4;
    if (v29 >> 4 <= v28) {
      uint64_t v31 = (v26 - (uint64_t)v27) >> 5;
    }
    unint64_t v32 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v31;
    if (v32 >> 59) {
LABEL_54:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v32);
    *(void *)(a1 + 352) = v33;
    *(void *)(a1 + 360) = v33;
    *(void *)(a1 + 368) = &v33[32 * v34];
    uint64_t v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*>(a1 + 368, (uint64_t)v27, v26, (uint64_t)v33);
LABEL_43:
    *(void *)(a1 + 360) = v35;
    goto LABEL_52;
  }
  uint64_t v36 = *(std::string **)(a1 + 360);
  unint64_t v37 = ((char *)v36 - (char *)v30) >> 5;
  if (v37 < v28)
  {
    uint64_t v38 = (uint64_t)v27 + 32 * v37;
    if (v36 != v30)
    {
      do
      {
        int data = (int)v27->__r_.__value_.__l.__data_;
        std::string v39 = (const std::string *)&v27->__r_.__value_.__r.__words[1];
        LODWORD(v30->__r_.__value_.__l.__data_) = data;
        uint64_t v41 = (std::string *)&v30->__r_.__value_.__r.__words[1];
        std::string::operator=(v41, v39);
        char v27 = v39 + 1;
        std::string v30 = v41 + 1;
      }
      while (v27 != (const std::string *)v38);
      std::string v30 = *(std::string **)(a1 + 360);
    }
    uint64_t v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*>(a1 + 368, v38, v26, (uint64_t)v30);
    goto LABEL_43;
  }
  if (v27 != (const std::string *)v26)
  {
    do
    {
      uint64_t v42 = v30;
      int v44 = (int)v27->__r_.__value_.__l.__data_;
      char v43 = (const std::string *)&v27->__r_.__value_.__r.__words[1];
      LODWORD(v30->__r_.__value_.__l.__data_) = v44;
      uint64_t v45 = (std::string *)&v30->__r_.__value_.__r.__words[1];
      std::string::operator=(v45, v43);
      char v27 = v43 + 1;
      std::string v30 = v45 + 1;
    }
    while (v27 != (const std::string *)v26);
    std::string v30 = (std::string *)((char *)v42 + 32);
    uint64_t v36 = *(std::string **)(a1 + 360);
  }
  while (v36 != v30)
  {
    if (SHIBYTE(v36[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36[-1].__r_.__value_.__l.__data_);
    }
    uint64_t v36 = (std::string *)((char *)v36 - 32);
  }
  *(void *)(a1 + 360) = v30;
LABEL_52:
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a3 + 96));
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a3 + 120));
  std::string::operator=((std::string *)(a1 + 424), (const std::string *)(a3 + 144));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a3 + 168);
  return a1;
}

void sub_19274EEAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 360) = v2;
  Espresso::kernel_with_uniforms<Espresso::tunneled_ane_unit_params_t>::~kernel_with_uniforms((void **)v1);
  _Unwind_Resume(a1);
}

void Espresso::kernel_with_uniforms<Espresso::tunneled_ane_unit_params_t>::~kernel_with_uniforms(void **a1)
{
  *a1 = &unk_1EE3569A0;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(a1 + 35);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

void Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  uint64_t v4 = this + 9;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = this + 6;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = *this;
  if (*this)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(_DWORD *)uint64_t v4 = *((_DWORD *)v6 - 2);
      unint64_t v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      uint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_19274F14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 32;
    }
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_bottom_layout_t>,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(unsigned char *)uint64_t v4 = *((unsigned char *)v6 - 8);
      unint64_t v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      uint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_19274F27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double Espresso::ANECompilerEngine::plane_rw_kernel::plane_rw_kernel(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 875704422;
  *(void *)uint64_t v5 = &unk_1EE35A6B0;
  *(void *)(v5 + 280) = *a3;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(unsigned char *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE340E40;
  *(void *)(v5 + 288) = &unk_1EE340FA0;
  return result;
}

__n128 Espresso::ANECompilerEngine::fill_kernel::fill_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 296) = 0x100000000;
  *(_OWORD *)(v5 + 280) = 0u;
  *(void *)(v5 + 304) = 0xFFFFFFFFLL;
  *(unsigned char *)(v5 + 312) = 1;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(unsigned char *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(unsigned char *)(v5 + 448) = 0;
  *(_DWORD *)(v5 + 488) = 1065353216;
  *(_WORD *)(v5 + 496) = 0;
  *(unsigned char *)(v5 + 498) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 500) = _D1;
  *(unsigned char *)(v5 + 508) = 0;
  *(_OWORD *)(v5 + 512) = 0u;
  *(unsigned char *)(v5 + 528) = v6;
  *(void *)uint64_t v5 = &unk_1EE33EAE0;
  *(void *)(v5 + 320) = &unk_1EE33EC40;
  __n128 result = *(__n128 *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  *(unsigned char *)(v5 + 312) = *(unsigned char *)(a3 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v13;
  return result;
}

__n128 Espresso::ANECompilerEngine::space_to_batch_kernel::space_to_batch_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 309) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(unsigned char *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(unsigned char *)(v5 + 448) = 0;
  *(_DWORD *)(v5 + 488) = 1065353216;
  *(_WORD *)(v5 + 496) = 0;
  *(unsigned char *)(v5 + 498) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 500) = _D1;
  *(unsigned char *)(v5 + 508) = 0;
  *(_OWORD *)(v5 + 512) = 0u;
  *(unsigned char *)(v5 + 528) = v6;
  *(void *)uint64_t v5 = &unk_1EE3451F0;
  *(void *)(v5 + 320) = &unk_1EE345350;
  __n128 result = *(__n128 *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  *(void *)(v5 + 309) = *(void *)(a3 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v13;
  return result;
}

double Espresso::ANECompilerEngine::space_to_depth_kernel::space_to_depth_kernel(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v7 + 280) = 2;
  char v8 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(unsigned char *)(v7 + 352) = 0;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(unsigned char *)(v7 + 424) = 0;
  *(_DWORD *)(v7 + 464) = 1065353216;
  *(_WORD *)(v7 + 472) = 0;
  *(unsigned char *)(v7 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v7 + 476) = result;
  *(unsigned char *)(v7 + 484) = 0;
  *(void *)(v7 + 488) = 0;
  *(void *)(v7 + 496) = 0;
  *(unsigned char *)(v7 + 504) = v8;
  *(void *)uint64_t v7 = &unk_1EE3453F0;
  *(void *)(v7 + 296) = &unk_1EE345550;
  *(void *)(v7 + 280) = a3;
  *(_DWORD *)(v7 + 288) = a4;
  return result;
}

double Espresso::ANECompilerEngine::degamma_kernel::degamma_kernel(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(unsigned char *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE33FE00;
  *(void *)(v5 + 288) = &unk_1EE33FF60;
  *(_DWORD *)(v5 + 280) = a3;
  return result;
}

uint64_t Espresso::keys_translation::cpp_compute_path_from_c_api(int a1)
{
  if (a1 <= 131079)
  {
    if (a1 == 65552)
    {
      return 1;
    }
    else
    {
      if (a1 != 65568) {
        goto LABEL_13;
      }
      return 0;
    }
  }
  else
  {
    switch(a1)
    {
      case 0x20008:
        return 2;
      case 0x40008:
        return 4;
      case 0x80000:
        return 5;
      default:
LABEL_13:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v6, a1);
        uint64_t v4 = std::string::insert(&v6, 0, "Not supported storage_type: ");
        long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
        v4->__r_.__value_.__l.__size_ = 0;
        v4->__r_.__value_.__r.__words[2] = 0;
        v4->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v7);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
}

void sub_19274F840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::cpp_quant_weight_mem_from_c_api(uint64_t result)
{
  int v1 = result;
  if (result >= 3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v5, v1);
    uint64_t v3 = std::string::insert(&v5, 0, "Unsupported quantized weight memory type: ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v6.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v6);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -6;
  }
  return result;
}

void sub_19274F97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path(Espresso::keys_translation *this)
{
  int v1 = (int)this;
  if (this >= 6 || ((0x37u >> (char)this) & 1) == 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, v1);
    long long v4 = std::string::insert(&v6, 0, "Not supported: ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return dword_192DCE7D8[this];
}

void sub_19274FB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::c_api_storage_type_from_name(unsigned __int16 *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a1 + 23);
    if (v2 != 2)
    {
      if (v2 != 4) {
        goto LABEL_22;
      }
      uint64_t result = 65552;
      int v4 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 == 842223686) {
        return 65568;
      }
      goto LABEL_10;
    }
    uint64_t result = 131080;
    if (*a1 == 14419) {
      return result;
    }
    int v6 = *a1;
    std::string v7 = a1;
LABEL_17:
    if (v6 == 14421) {
      return 262152;
    }
    if (*v7 != 22600) {
      goto LABEL_22;
    }
    return 0x80000;
  }
  uint64_t v5 = *((void *)a1 + 1);
  if (v5 == 2)
  {
    uint64_t result = 131080;
    std::string v7 = *(_WORD **)a1;
    if (**(_WORD **)a1 == 14419) {
      return result;
    }
    int v6 = (unsigned __int16)*v7;
    goto LABEL_17;
  }
  if (v5 != 4) {
    goto LABEL_22;
  }
  uint64_t result = 65552;
  if (**(_DWORD **)a1 == 842223686) {
    return 65568;
  }
  int v4 = **(_DWORD **)a1;
LABEL_10:
  if (v4 != 909201478)
  {
LABEL_22:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19274FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

__n128 std::deque<Espresso::basic_block::walk_status>::push_back(void *a1, __n128 *a2)
{
  int v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 32 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x100)
    {
      a1[4] = v8 - 256;
      uint64_t v12 = *(void *)v5;
      long long v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
          int v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          int v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            int v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          long long v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            int v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          std::string::value_type v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            int v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            int v22 = (char *)a1[1];
          }
          int v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)int v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    std::string::value_type v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      char v27 = operator new(0x1000uLL);
      unint64_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v55 = (uint64_t *)a1[1];
          unint64_t v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            unint64_t v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            uint64_t v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)uint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          __int16 v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        uint64_t v62 = (char *)a1[1];
        int v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v63[-*a1] >> 2;
            }
            uint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v97);
            long long v100 = &v98[8 * (v97 >> 2)];
            int v101 = (uint64_t *)a1[1];
            int v63 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              int v63 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              uint64_t v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)uint64_t v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            id v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v63;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              int v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            __int16 v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            int v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)int v63 = v64;
      }
      else
      {
        *(void *)int v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    std::string v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    uint64_t v32 = v31;
    uint64_t v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v110 = v34;
    uint64_t v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v110;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v74);
      uint64_t v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v107 = v36;
      long long v110 = v38;
      operator delete(v30);
      long long v36 = v107;
    }
    long long v38 = v110;
LABEL_56:
    *(void *)uint64_t v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      long long v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        long long v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          uint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v85);
          uint64_t v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            int v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            int v91 = v79;
            int v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)int v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v108 = v36;
            long long v112 = v38;
            operator delete(v78);
            long long v36 = v108;
            long long v38 = v112;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          uint64_t v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            long long v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v36 + 1);
            uint64_t v111 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v109;
            *(void *)&long long v38 = v111;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        uint64_t v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    long long v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  __n128 result = *a2;
  *(__n128 *)(*(void *)&v5[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  ++a1[5];
  return result;
}

void sub_19275027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<Espresso::basic_block::walk_status>::~deque[abi:ne180100](uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      int v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 256;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__value_func<void ()(Espresso::basic_block::walk_status const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t Espresso::basic_block::is_blob_defined_in_predecessors(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*(void *)(a1 + 192) + 240), a2);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE37E378;
  v6[1] = a3;
  v6[2] = a2;
  v6[3] = &v20;
  void v27[3] = v6;
  std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::__clone((uint64_t)v6);
  uint64_t v29 = v7;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  v23.n128_u64[0] = a1;
  v23.n128_u32[2] = 0;
  std::deque<Espresso::basic_block::walk_status>::push_back(v25, &v23);
  v23.n128_u64[1] = 0;
  uint64_t v24 = 0;
  v23.n128_u64[0] = (unint64_t)&v23.n128_u64[1];
  uint64_t v8 = *((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    do
    {
      long long v22 = *(_OWORD *)(*(void *)(*((void *)&v25[0] + 1) + (((unint64_t)v26 >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * v26);
      *(void *)&long long v26 = v26 + 1;
      *((void *)&v26 + 1) = v8 - 1;
      if ((unint64_t)v26 >= 0x200)
      {
        operator delete(**((void ***)&v25[0] + 1));
        *((void *)&v25[0] + 1) += 8;
        *(void *)&long long v26 = v26 - 256;
      }
      if (SDWORD2(v22) >= 1)
      {
        if (!v29) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, long long *))(*(void *)v29 + 48))(v29, &v22);
      }
      for (uint64_t i = *(void **)(v22 + 128); i; uint64_t i = (void *)*i)
      {
        unint64_t v10 = i[2];
        unint64_t v11 = v23.n128_u64[1];
        uint64_t v12 = &v23.n128_u64[1];
        uint64_t v13 = &v23.n128_u64[1];
        if (v23.n128_u64[1])
        {
          uint64_t v14 = (void *)v23.n128_u64[1];
          do
          {
            unint64_t v15 = v14[4];
            if (v10 >= v15)
            {
              if (v15 >= v10) {
                goto LABEL_24;
              }
              ++v14;
            }
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (unint64_t *)v11;
              unint64_t v16 = *(void *)(v11 + 32);
              if (v10 >= v16) {
                break;
              }
              unint64_t v11 = *v13;
              uint64_t v12 = v13;
              if (!*v13) {
                goto LABEL_20;
              }
            }
            if (v16 >= v10) {
              break;
            }
            unint64_t v11 = v13[1];
            if (!v11)
            {
              uint64_t v12 = v13 + 1;
              goto LABEL_20;
            }
          }
        }
        else
        {
LABEL_20:
          uint64_t v17 = (uint64_t *)operator new(0x28uLL);
          v17[4] = v10;
          *uint64_t v17 = 0;
          v17[1] = 0;
          long long v17[2] = (uint64_t)v13;
          unint64_t *v12 = (unint64_t)v17;
          if (*(void *)v23.n128_u64[0])
          {
            v23.n128_u64[0] = *(void *)v23.n128_u64[0];
            uint64_t v17 = (uint64_t *)*v12;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v23.n128_u64[1], v17);
          ++v24;
        }
        v21.n128_u64[0] = v10;
        v21.n128_u32[2] = DWORD2(v22) + 1;
        std::deque<Espresso::basic_block::walk_status>::push_back(v25, &v21);
LABEL_24:
        ;
      }
      uint64_t v8 = *((void *)&v26 + 1);
    }
    while (*((void *)&v26 + 1));
    uint64_t v18 = (void *)v23.n128_u64[1];
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::__tree<int>::destroy(v18);
  std::deque<Espresso::basic_block::walk_status>::~deque[abi:ne180100]((uint64_t)v25);
  std::__function::__value_func<void ()(Espresso::basic_block::walk_status const&)>::~__value_func[abi:ne180100](v28);
  std::__function::__value_func<void ()(Espresso::basic_block::walk_status const&)>::~__value_func[abi:ne180100](v27);
  return v20;
}

void sub_1927506A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::deque<Espresso::basic_block::walk_status>::~deque[abi:ne180100]((uint64_t)&a19);
  std::__function::__value_func<void ()(Espresso::basic_block::walk_status const&)>::~__value_func[abi:ne180100]((void *)(v26 - 104));
  std::__function::__value_func<void ()(Espresso::basic_block::walk_status const&)>::~__value_func[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK8Espresso11basic_block31is_blob_defined_in_predecessorsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_13unordered_mapIS7_PS0_NS1_4hashIS7_EENS1_8equal_toIS7_EENS5_INS1_4pairIS8_SB_EEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

unint64_t std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::operator()(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v4);
  int8x8_t v7 = (int8x8_t)v5[1];
  if (v7)
  {
    unint64_t v8 = result;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = result;
      if (result >= *(void *)&v7) {
        unint64_t v11 = result % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & result;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*v5 + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v8 == v14)
        {
          unint64_t result = std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v4);
          if (result)
          {
            if (*((void *)i + 5) == *a2) {
              **(unsigned char **)(a1 + 24) = 1;
            }
            return result;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
          }
          else
          {
            v14 &= *(void *)&v7 - 1;
          }
          if (v14 != v11) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37E378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &unk_1EE37E378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::~__func()
{
}

void *Espresso::basic_block::debug_name(Espresso::basic_block *this, uint64_t a2)
{
  uint64_t v2 = a2;
  do
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a2)
    {
      unint64_t v10 = "<empty>";
      return std::string::basic_string[abi:ne180100]<0>(this, v10);
    }
    uint64_t v3 = *(void **)(v2 + 16);
    uint64_t v4 = *v3;
    unint64_t v5 = (void *)(*v3 + 40);
    int v6 = *(char *)(*v3 + 63);
    if (v6 < 0)
    {
      if (*(void *)(v4 + 48) != 11) {
        break;
      }
      unint64_t v5 = (void *)*v5;
    }
    else if (v6 != 11)
    {
      break;
    }
    int8x8_t v7 = (void *)*v5;
    uint64_t v8 = *(void *)((char *)v5 + 3);
  }
  while (v7 == (void *)0x747269765F696870 && v8 == 0x6C6175747269765FLL);
  unint64_t v10 = (char *)v3[2];
  if (v10 != (char *)v3[3])
  {
    if ((v10[23] & 0x80000000) == 0) {
      return std::string::basic_string[abi:ne180100]<0>(this, v10);
    }
    goto LABEL_17;
  }
  unint64_t v10 = (char *)(v4 + 16);
  if (*(char *)(v4 + 39) < 0) {
LABEL_17:
  }
    unint64_t v10 = *(char **)v10;
  return std::string::basic_string[abi:ne180100]<0>(this, v10);
}

void Espresso::rnn_arch_kernel_montreal::__launch_cell_gru(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v32, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v30, *(void **)a8, *(std::__shared_weak_count **)(a8 + 8));
  unint64_t v16 = *(int **)(v30 + 24);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v30, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
  uint64_t v17 = *(char **)(v30 + 24);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  uint64_t v18 = *(void *)(v32 + 24);
  uint64_t v19 = *(_DWORD **)a5;
  if ((a9 & a6) == 0xFFFFFFFF)
  {
    if (v19[5] != 1)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Batch size != 1 not supported");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    int v20 = *(_DWORD *)(*(void *)a7 + 12) * *(_DWORD *)(*(void *)a7 + 8);
    v18 += 4 * v19[2] * a6 * v19[3] * v19[4];
    v17 += 4 * v20 * a9 * *(_DWORD *)(*(void *)a7 + 16) + 4 * v20 * a10;
  }
  uint64_t v21 = *(int *)(a4 + 76);
  if (!a1[110]) {
    Espresso::rnn_arch_kernel_montreal::init_montreal((Espresso::rnn_arch_kernel_montreal *)a1);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v30, 1, 1, v21, 1);
  v34[0] = v18;
  int v22 = MRLModelStatePieceSize((void *)a1[111], 0);
  __n128 v23 = (_DWORD *)MRLModelStatePieceData((void *)a1[111], 0);
  if (v22 >= 1)
  {
    uint64_t v24 = v22;
    uint64_t v25 = v16;
    do
    {
      int v26 = *v25++;
      *v23++ = v26;
      --v24;
    }
    while (v24);
  }
  MRLModelStateRestore(a1[110], a1[111]);
  MRLModelRecognizeVectorsIncremental(a1[110], a1[111], (uint64_t)v34, v17);
  MRLModelStateSave(a1[110], a1[111]);
  char v27 = (const void *)MRLModelStatePieceData((void *)a1[111], 0);
  size_t v28 = 4 * v21;
  memcpy(v17, v27, v28);
  memcpy(v16, v27, v28);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
}

void sub_192750C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_arch_kernel_montreal::init_montreal(Espresso::rnn_arch_kernel_montreal *this)
{
}

void sub_192751DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  int v6 = *v5;
  if (!*v5)
  {
    int8x8_t v7 = (uint64_t **)v5;
    int v6 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 7) = 0;
    *((void *)v6 + 8) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t espresso_to_montreal_activation(int a1)
{
  if (a1 >= 7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, a1);
    uint64_t v4 = std::string::insert(&v6, 0, "Unsupported nonlinearity ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return dword_192DCEB1C[a1];
}

void sub_1927520EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void Espresso::rnn_arch_kernel_montreal::__launch_cell_rnn(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v32, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v30, *(void **)a8, *(std::__shared_weak_count **)(a8 + 8));
  unint64_t v16 = *(int **)(v30 + 24);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v30, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
  uint64_t v17 = *(char **)(v30 + 24);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  uint64_t v18 = *(void *)(v32 + 24);
  uint64_t v19 = *(_DWORD **)a5;
  if ((a9 & a6) == 0xFFFFFFFF)
  {
    if (v19[5] != 1)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Batch size != 1 not supported");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    int v20 = *(_DWORD *)(*(void *)a7 + 12) * *(_DWORD *)(*(void *)a7 + 8);
    v18 += 4 * v19[2] * a6 * v19[3] * v19[4];
    v17 += 4 * v20 * a9 * *(_DWORD *)(*(void *)a7 + 16) + 4 * v20 * a10;
  }
  uint64_t v21 = *(int *)(a4 + 76);
  if (!a1[110]) {
    Espresso::rnn_arch_kernel_montreal::init_montreal((Espresso::rnn_arch_kernel_montreal *)a1);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v30, 1, 1, v21, 1);
  v34[0] = v18;
  int v22 = MRLModelStatePieceSize((void *)a1[111], 0);
  __n128 v23 = (_DWORD *)MRLModelStatePieceData((void *)a1[111], 0);
  if (v22 >= 1)
  {
    uint64_t v24 = v22;
    uint64_t v25 = v16;
    do
    {
      int v26 = *v25++;
      *v23++ = v26;
      --v24;
    }
    while (v24);
  }
  MRLModelStateRestore(a1[110], a1[111]);
  MRLModelRecognizeVectorsIncremental(a1[110], a1[111], (uint64_t)v34, *(char **)(v30 + 24));
  MRLModelStateSave(a1[110], a1[111]);
  char v27 = (const void *)MRLModelStatePieceData((void *)a1[111], 0);
  size_t v28 = 4 * v21;
  memcpy(v17, v27, v28);
  memcpy(v16, v27, v28);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
}

void sub_1927523B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_arch_kernel_montreal::__launch_cell_lstm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v39, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v37, *(void **)a8, *(std::__shared_weak_count **)(a8 + 8));
  uint64_t v17 = *(int **)(v37 + 24);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v37, *(void **)a9, *(std::__shared_weak_count **)(a9 + 8));
  uint64_t v18 = *(int **)(v37 + 24);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v37, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
  uint64_t v19 = *(char **)(v37 + 24);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  uint64_t v20 = *(void *)(v39 + 24);
  uint64_t v21 = *(_DWORD **)a5;
  if ((a10 & a6) == 0xFFFFFFFF)
  {
    if (v21[5] != 1)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Batch size != 1 not supported");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    int v22 = *(_DWORD *)(*(void *)a7 + 12) * *(_DWORD *)(*(void *)a7 + 8);
    v20 += 4 * v21[2] * a6 * v21[3] * v21[4];
    v19 += 4 * v22 * a10 * *(_DWORD *)(*(void *)a7 + 16) + 4 * v22 * a11;
  }
  uint64_t v23 = *(int *)(a4 + 76);
  if (!a1[110]) {
    Espresso::rnn_arch_kernel_montreal::init_montreal((Espresso::rnn_arch_kernel_montreal *)a1);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v37, 1, 1, 4 * v23, 1);
  v41[0] = v20;
  int v24 = MRLModelStatePieceSize((void *)a1[111], 0);
  int v25 = MRLModelStatePieceSize((void *)a1[111], 1);
  int v26 = (_DWORD *)MRLModelStatePieceData((void *)a1[111], 0);
  if (v24 >= 1)
  {
    uint64_t v27 = v24;
    size_t v28 = v17;
    do
    {
      int v29 = *v28++;
      *v26++ = v29;
      --v27;
    }
    while (v27);
  }
  uint64_t v30 = (_DWORD *)MRLModelStatePieceData((void *)a1[111], 1);
  if (v25 >= 1)
  {
    uint64_t v31 = v25;
    uint64_t v32 = v18;
    do
    {
      int v33 = *v32++;
      *v30++ = v33;
      --v31;
    }
    while (v31);
  }
  MRLModelStateRestore(a1[110], a1[111]);
  MRLModelRecognizeVectorsIncremental(a1[110], a1[111], (uint64_t)v41, *(char **)(v37 + 24));
  MRLModelStateSave(a1[110], a1[111]);
  long long v34 = (const void *)MRLModelStatePieceData((void *)a1[111], 0);
  uint64_t v35 = (const void *)MRLModelStatePieceData((void *)a1[111], 1);
  memcpy(v19, v34, 4 * v23);
  memcpy(v17, v34, 4 * v23);
  memcpy(v18, v35, 4 * v23);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
}

void sub_1927526F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_arch_kernel_montreal::__set_weights_finalize(uint64_t a1)
{
  int v1 = *(void **)(a1 + 464);
  uint64_t v2 = (void *)(a1 + 472);
  if (v1 != (void *)(a1 + 472))
  {
    uint64_t v4 = (void *)(a1 + 8);
    long long v5 = (uint64_t **)(a1 + 280);
    while (1)
    {
      std::string v6 = (Espresso::quantized_weights_helper *)v1[7];
      std::string v7 = (std::__shared_weak_count *)v1[8];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v6
        || !*(void *)v6
        || !*((void *)v6 + 4) && !*((void *)v6 + 6) && !*((void *)v6 + 8) && !*((void *)v6 + 10))
      {
        break;
      }
      if (*(_DWORD *)(a1 + 304)) {
        Espresso::quantized_weights_helper::dequantize_to_float32_4d(v6, &v14);
      }
      else {
        Espresso::quantized_weights_helper::dequantize_to_float32_4d_lstm(v6, &v14);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v13, v4, &v14);
      unint64_t v16 = (long long *)(v1 + 4);
      uint64_t v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, v1 + 4, &v16);
      uint64_t v9 = (std::__shared_weak_count *)v8[8];
      *(_OWORD *)(v8 + 7) = v13;
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      unint64_t v10 = (void *)v1[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (void *)v1[2];
          BOOL v12 = *v11 == (void)v1;
          int v1 = v11;
        }
        while (!v12);
      }
      int v1 = v11;
      if (v11 == v2) {
        return;
      }
    }
    if (v7)
    {
      nitro::nitro_function::nitro_function(v7);
    }
  }
}

void sub_192752900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_arch_kernel_montreal::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, std::string *a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  if (a6 && (uint64_t v50 = *a6) != 0)
  {
    unint64_t v10 = (std::__shared_weak_count *)a6[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v50 = 0;
  }
  int v11 = *(_DWORD *)(a1 + 380);
  int v12 = *(_DWORD *)(a1 + 384);
  if (*(_DWORD *)(a1 + 304)) {
    int v13 = *(_DWORD *)(a1 + 380);
  }
  else {
    int v13 = 4 * v11;
  }
  v55[0] = 0;
  v55[1] = 0;
  uint64_t v54 = v55;
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_x");
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v14 + 14) = v12;
  *((_DWORD *)v14 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_x_reverse");
  unint64_t v15 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v15 + 14) = v12;
  *((_DWORD *)v15 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_h");
  unint64_t v16 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v16 + 14) = v11;
  *((_DWORD *)v16 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_h_reverse");
  uint64_t v17 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v17 + 14) = v11;
  *((_DWORD *)v17 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_z");
  uint64_t v18 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v18 + 14) = v12;
  *((_DWORD *)v18 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_r");
  uint64_t v19 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v19 + 14) = v12;
  *((_DWORD *)v19 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_o");
  uint64_t v20 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v20 + 14) = v12;
  *((_DWORD *)v20 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_z");
  uint64_t v21 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v21 + 14) = v11;
  *((_DWORD *)v21 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_r");
  int v22 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v22 + 14) = v11;
  *((_DWORD *)v22 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_o");
  uint64_t v23 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v23 + 14) = v11;
  *((_DWORD *)v23 + 15) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "b");
  int v24 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v24 + 14) = v13;
  *((_DWORD *)v24 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
  int v25 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v25 + 14) = v13;
  *((_DWORD *)v25 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "p");
  int v26 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v26 + 14) = 3 * v11;
  *((_DWORD *)v26 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "p_reverse");
  uint64_t v27 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v27 + 14) = 3 * v11;
  *((_DWORD *)v27 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_z");
  size_t v28 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v28 + 14) = v13;
  *((_DWORD *)v28 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_r");
  int v29 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v29 + 14) = v13;
  *((_DWORD *)v29 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_o");
  uint64_t v30 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v30 + 14) = v13;
  *((_DWORD *)v30 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_z");
  uint64_t v31 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v31 + 14) = v13;
  *((_DWORD *)v31 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_r");
  uint64_t v32 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v32 + 14) = v13;
  *((_DWORD *)v32 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_o");
  int v33 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v54, &__p, (uint64_t)&__p);
  *((_DWORD *)v33 + 14) = v13;
  *((_DWORD *)v33 + 15) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v34 = (uint64_t)a6;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = (uint64_t *)v54;
  if (v54 == v55)
  {
LABEL_90:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  while (1)
  {
    if (*((char *)v35 + 55) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v35[4], v35[5]);
    }
    else {
      std::string __p = *(std::string *)(v35 + 4);
    }
    uint64_t v36 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v36 & 0x80u) == 0) {
      std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
    }
    if (size != v38) {
      goto LABEL_71;
    }
    uint64_t v39 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v36 & 0x80) != 0)
    {
      if (memcmp(a3->__r_.__value_.__l.__data_, v39, a3->__r_.__value_.__l.__size_)) {
        goto LABEL_71;
      }
    }
    else if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
    {
      unint64_t v40 = a3;
      while (v40->__r_.__value_.__s.__data_[0] == v39->__r_.__value_.__s.__data_[0])
      {
        unint64_t v40 = (std::string *)((char *)v40 + 1);
        uint64_t v39 = (std::string *)((char *)v39 + 1);
        if (!--v36) {
          goto LABEL_72;
        }
      }
LABEL_71:
      BOOL v41 = Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob((_DWORD *)a1, a2, a3, a4, a5, v34);
      goto LABEL_81;
    }
LABEL_72:
    int v42 = *((_DWORD *)v35 + 14);
    int v43 = *((_DWORD *)v35 + 15);
    v57[0] = v50;
    v57[1] = (uint64_t)v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v58, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v57, v42, v43, 1, 1, (a4 & 0x3F) == 0);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v56, (void *)(a1 + 8), &v58);
    uint64_t v60 = a3;
    int v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), a3, (long long **)&v60);
    uint64_t v45 = (std::__shared_weak_count *)v44[8];
    *(_OWORD *)(v44 + 7) = v56;
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    BOOL v41 = 1;
LABEL_81:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v41) {
      break;
    }
    uint64_t v46 = (char *)v35[1];
    if (v46)
    {
      do
      {
        uint64_t v47 = (char **)v46;
        uint64_t v46 = *(char **)v46;
      }
      while (v46);
    }
    else
    {
      do
      {
        uint64_t v47 = (char **)v35[2];
        BOOL v48 = *v47 == (char *)v35;
        uint64_t v35 = (uint64_t *)v47;
      }
      while (!v48);
    }
    uint64_t v35 = (uint64_t *)v47;
    if (v47 == v55) {
      goto LABEL_90;
    }
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v55[0]);
    nitro::nitro_function::nitro_function(v10);
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v55[0]);
  }
}

void sub_1927530A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a22);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_kernel_montreal::__launch(_DWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4)
{
  if (a1[110] == 1 && a1[113] == 1 && !a1[76])
  {
    uint64_t v4 = (*a4)[1];
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (*a3)[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }

  Espresso::generic_rnn_arch_kernel_impl::__launch((uint64_t)a1, a2, a3, a4);
}

void sub_192753DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19)
{
  std::mutex::unlock(&globalMutex(void)::mutex);
  if (v19) {
    operator delete(v19);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_kernel_montreal::~rnn_arch_kernel_montreal(Espresso::rnn_arch_kernel_montreal *this)
{
  Espresso::montreal_base::~montreal_base((Espresso::rnn_arch_kernel_montreal *)((char *)this + 880));
  Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::montreal_base::~montreal_base((Espresso::rnn_arch_kernel_montreal *)((char *)this + 880));

  Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(this);
}

void Espresso::montreal_base::~montreal_base(Espresso::montreal_base *this)
{
  uint64_t v2 = (char **)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)this;
    if (!*(void *)this) {
      goto LABEL_6;
    }
    MRLModelStateRelease(v3, v2);
  }
  if (*(void *)this) {
    MRLModelRelease(*(void *)this);
  }
LABEL_6:
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

double __espresso_tmp_enable_montreal_block_invoke_3@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(void *a1, uint64_t *a2, long long *a3)
{
  std::string v6 = operator new(0x388uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE381AE8;
  long long v15 = a3[6];
  long long v16 = a3[7];
  *(_OWORD *)uint64_t v17 = a3[8];
  *(_OWORD *)&v17[12] = *(long long *)((char *)a3 + 140);
  long long v11 = a3[2];
  long long v12 = a3[3];
  long long v13 = a3[4];
  long long v14 = a3[5];
  long long v9 = *a3;
  long long v10 = a3[1];
  Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 3), a2);
  v6[62] = 0;
  v6[63] = 0;
  v6[61] = v6 + 62;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  *((_DWORD *)v6 + 160) = 0;
  v7[39] = 0u;
  v7[40] = 0u;
  v7[41] = 0u;
  v7[42] = 0u;
  v7[43] = 0u;
  v7[44] = 0u;
  v7[45] = 0u;
  v7[46] = 0u;
  v7[47] = 0u;
  v7[48] = 0u;
  v7[49] = 0u;
  v7[50] = 0u;
  v7[51] = 0u;
  *((_DWORD *)v6 + 214) = 1065353216;
  *((_OWORD *)v6 + 54) = 0u;
  *((_OWORD *)v6 + 55) = 0u;
  *((_DWORD *)v6 + 224) = 1065353216;
  v6[3] = &unk_1EE32ABD0;
  *(_OWORD *)((char *)v7 + 442) = *(_OWORD *)&v17[10];
  v7[26] = v16;
  v7[27] = *(_OWORD *)v17;
  v7[24] = v14;
  v7[25] = v15;
  v7[22] = v12;
  v7[23] = v13;
  double result = *(double *)&v10;
  v7[20] = v10;
  v7[21] = v11;
  v7[19] = v9;
  *a1 = v7;
  a1[1] = v6;
  return result;
}

void sub_192754148(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::rnn_arch_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rnn_arch_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381AE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rnn_arch_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381AE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double __espresso_tmp_enable_montreal_block_invoke_2@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void __espresso_tmp_enable_montreal_block_invoke(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  int v6 = *((_DWORD *)a2 + 34);
  BOOL v7 = v6 != 1
    || *((_DWORD *)a2 + 37) != 1
    || *(_DWORD *)a2
    || *((_DWORD *)a2 + 1) == *((_DWORD *)a2 + 10)
    && *((_DWORD *)a2 + 4) == *((_DWORD *)a2 + 13)
    && *((_DWORD *)a2 + 7) == *((_DWORD *)a2 + 16);
  if (*((_DWORD *)a2 + 35)) {
    goto LABEL_24;
  }
  int v8 = *((_DWORD *)a2 + 23);
  if (v8) {
    BOOL v9 = v8 == 5;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = v9;
  if (*((_DWORD *)a2 + 27)) {
    BOOL v7 = 0;
  }
  BOOL v11 = v6 != 1 || *(_DWORD *)a2 == 2;
  BOOL v12 = v11 || v10 == 0;
  if (v12 || !v7)
  {
    long long v15 = operator new(0x3B8uLL);
    v15[1] = 0;
    v15[2] = 0;
    *long long v15 = &unk_1EE388148;
    long long v16 = a2[7];
    long long v34 = a2[6];
    long long v35 = v16;
    v36[0] = a2[8];
    *(_OWORD *)((char *)v36 + 12) = *(long long *)((char *)a2 + 140);
    long long v17 = a2[3];
    long long v30 = a2[2];
    long long v31 = v17;
    long long v18 = a2[5];
    long long v32 = a2[4];
    long long v33 = v18;
    long long v19 = a2[1];
    long long v28 = *a2;
    long long v29 = v19;
    Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::kernel_with_uniforms_((uint64_t)(v15 + 3), a1);
    v15[62] = 0;
    v15[63] = 0;
    v15[61] = v15 + 62;
    *((_OWORD *)v15 + 32) = 0u;
    *((_OWORD *)v15 + 33) = 0u;
    *((_OWORD *)v15 + 34) = 0u;
    *((_OWORD *)v15 + 35) = 0u;
    *((_OWORD *)v15 + 36) = 0u;
    *((_OWORD *)v15 + 37) = 0u;
    *((_OWORD *)v15 + 38) = 0u;
    *((_OWORD *)v15 + 39) = 0u;
    *((_DWORD *)v15 + 160) = 0;
    v20[39] = 0u;
    v20[40] = 0u;
    v20[41] = 0u;
    v20[42] = 0u;
    v20[43] = 0u;
    v20[44] = 0u;
    v20[45] = 0u;
    v20[46] = 0u;
    v20[47] = 0u;
    v20[48] = 0u;
    v20[49] = 0u;
    v20[50] = 0u;
    v20[51] = 0u;
    *((_DWORD *)v15 + 214) = 1065353216;
    *((_OWORD *)v15 + 54) = 0u;
    *((_OWORD *)v15 + 55) = 0u;
    *((_DWORD *)v15 + 224) = 1065353216;
    long long v21 = v29;
    v20[19] = v28;
    v20[20] = v21;
    long long v22 = v33;
    v20[23] = v32;
    unsigned char v20[24] = v22;
    long long v23 = v31;
    v20[21] = v30;
    v20[22] = v23;
    *(_OWORD *)((char *)v20 + 442) = *(_OWORD *)((char *)v36 + 10);
    long long v24 = v36[0];
    long long v25 = v34;
    v20[26] = v35;
    v20[27] = v24;
    v20[25] = v25;
    *(_OWORD *)((char *)v20 + 908) = 0u;
    v20[55] = 0u;
    v20[56] = 0u;
    v15[3] = &unk_1EE35CDA0;
    *((_DWORD *)v15 + 237) = 70;
    *(void *)&long long v14 = v20;
    *((void *)&v14 + 1) = v15;
  }
  else
  {
LABEL_24:
    std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v28, a1, a2);
    long long v14 = v28;
  }
  *a3 = v14;
}

void sub_192754440(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::rnn_arch_kernel_montreal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rnn_arch_kernel_montreal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388148;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rnn_arch_kernel_montreal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::zephyr::value_t::defining_node(Espresso::zephyr::value_t *this)
{
  return *((void *)this + 10);
}

uint64_t Espresso::zephyr::value_t::uses(Espresso::zephyr::value_t *this)
{
  return (uint64_t)this + 56;
}

BOOL Espresso::zephyr::value_t::has_any_use(Espresso::zephyr::value_t *this)
{
  return *((void *)this + 7) != *((void *)this + 8);
}

BOOL Espresso::zephyr::value_t::has_one_use(Espresso::zephyr::value_t *this)
{
  return *((void *)this + 8) - *((void *)this + 7) == 16;
}

void Espresso::zephyr::value_t::replace_uses(Espresso::zephyr::value_t *this, Espresso::zephyr::value_t *a2)
{
  for (uint64_t i = *((void *)this + 7); i != *((void *)this + 8); uint64_t i = *((void *)this + 7))
    Espresso::zephyr::node_t::replace_input_at(*(Espresso::zephyr::node_t **)i, *(void *)(i + 8), a2);
}

void Espresso::zephyr::value_t::replace_uses_if (uint64_t a1, Espresso::zephyr::value_t *a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned char **)(a1 + 56);
  uint64_t v3 = *(unsigned char **)(a1 + 64);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v5 >> 4);
    memmove(v8, v4, v5);
    if (16 * (v5 >> 4))
    {
      BOOL v9 = &v8[16 * (v5 >> 4)];
      int v10 = v8;
      do
      {
        BOOL v11 = *(Espresso::zephyr::node_t **)v10;
        unint64_t v12 = *((void *)v10 + 1);
        v14[0] = *(void *)v10;
        v14[1] = v12;
        uint64_t v13 = *(void *)(a3 + 24);
        if (!v13) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if ((*(unsigned int (**)(uint64_t, void *))(*(void *)v13 + 48))(v13, v14)) {
          Espresso::zephyr::node_t::replace_input_at(v11, v12, a2);
        }
        v10 += 16;
      }
      while (v10 != v9);
    }
    if (v8) {
      operator delete(v8);
    }
  }
}

void sub_192754660(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::SerDes::generic_serdes_object::serialize_from_string(uint64_t a1, const std::string *a2)
{
  std::istringstream::basic_istringstream[abi:ne180100](v4, a2);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 280))(a1, v4);
  v4[0] = *MEMORY[0x1E4FBA410];
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  v4[2] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x192FF15B0](&v6);
}

void sub_1927547C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::SerDes::generic_serdes_object::serialize_to_string(Espresso::SerDes::generic_serdes_object *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(Espresso::SerDes::generic_serdes_object *, void *))(*(void *)this + 288))(this, v3);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FF15B0](&v5);
}

void sub_192754938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::serialize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  id v5 = 0;
  uint64_t v2 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v1 options:1 error:&v5];
  id v3 = v5;
  id v4 = v2;
  [v4 bytes];
  [v4 length];
  std::ostream::write();
}

void sub_1927549E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_string_array(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = (uint64_t *)*a2;
  }
  id v11 = [NSString stringWithUTF8String:v5];
  uint64_t v6 = objc_opt_new();
  BOOL v7 = *a3;
  int v8 = a3[1];
  while (v7 != v8)
  {
    BOOL v9 = v7;
    if (*((char *)v7 + 23) < 0) {
      BOOL v9 = (uint64_t *)*v7;
    }
    int v10 = [NSString stringWithUTF8String:v9];
    [v6 addObject:v10];

    v7 += 3;
  }
  [*(id *)(a1 + 24) setObject:v6 forKeyedSubscript:v11];
}

void sub_192754AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_uint32_array(uint64_t a1, uint64_t *a2, unsigned int **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = (uint64_t *)*a2;
  }
  id v10 = [NSString stringWithUTF8String:v5];
  uint64_t v6 = objc_opt_new();
  BOOL v7 = *a3;
  int v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      BOOL v9 = [NSNumber numberWithUnsignedInteger:*v7];
      [v6 addObject:v9];

      ++v7;
    }
    while (v7 != v8);
  }
  [*(id *)(a1 + 24) setObject:v6 forKeyedSubscript:v10];
}

void sub_192754BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_int_array(uint64_t a1, uint64_t *a2, int **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = (uint64_t *)*a2;
  }
  id v10 = [NSString stringWithUTF8String:v5];
  uint64_t v6 = objc_opt_new();
  BOOL v7 = *a3;
  int v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      BOOL v9 = [NSNumber numberWithInteger:*v7];
      [v6 addObject:v9];

      ++v7;
    }
    while (v7 != v8);
  }
  [*(id *)(a1 + 24) setObject:v6 forKeyedSubscript:v10];
}

void sub_192754CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_double(uint64_t a1, uint64_t *a2, double *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = (uint64_t *)*a2;
  }
  id v9 = [NSString stringWithUTF8String:v5];
  double v6 = *a3;
  if (*a3 == INFINITY)
  {
    BOOL v7 = "inf";
LABEL_8:
    int v8 = objc_msgSend(NSString, "stringWithUTF8String:", v7, v6);
    [*(id *)(a1 + 24) setObject:v8 forKeyedSubscript:v9];
    goto LABEL_9;
  }
  if (v6 == -INFINITY)
  {
    BOOL v7 = "-inf";
    goto LABEL_8;
  }
  int v8 = objc_msgSend(NSNumber, "numberWithDouble:");
  [*(id *)(a1 + 24) setObject:v8 forKeyedSubscript:v9];
LABEL_9:
}

void sub_192754E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_longlong(uint64_t a1, uint64_t *a2, void *a3)
{
  id v7 = [NSNumber numberWithLongLong:*a3];
  if (*((char *)a2 + 23) >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = (uint64_t *)*a2;
  }
  double v6 = [NSString stringWithUTF8String:v5];
  [*(id *)(a1 + 24) setObject:v7 forKeyedSubscript:v6];
}

void sub_192754ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_ushort(uint64_t a1, uint64_t *a2, unsigned __int16 *a3)
{
  id v7 = [NSNumber numberWithUnsignedShort:*a3];
  if (*((char *)a2 + 23) >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = (uint64_t *)*a2;
  }
  double v6 = [NSString stringWithUTF8String:v5];
  [*(id *)(a1 + 24) setObject:v7 forKeyedSubscript:v6];
}

void sub_192754F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_short(uint64_t a1, uint64_t *a2, __int16 *a3)
{
  id v7 = [NSNumber numberWithShort:*a3];
  if (*((char *)a2 + 23) >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = (uint64_t *)*a2;
  }
  double v6 = [NSString stringWithUTF8String:v5];
  [*(id *)(a1 + 24) setObject:v7 forKeyedSubscript:v6];
}

void sub_192755030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::get_string_array(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  id v5 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  double v6 = v5;
  if (!v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v22 = (std::string *)a2;
    }
    else {
      long long v22 = *(std::string **)a2;
    }
    __v.__first_ = v22;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Deserialization tag %s not found", &__v);
  }
  uint64_t v7 = [v5 count];
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      objc_msgSend(v6, "objectAtIndexedSubscript:", i, __p[0]);
      id v9 = objc_claimAutoreleasedReturnValue();
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v9 UTF8String]);
      unint64_t v10 = *(void *)(a3 + 8);
      unint64_t v11 = *(void *)(a3 + 16);
      if (v10 >= v11)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)a3) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a3) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        long long v18 = (std::string *)(v16 + 24 * v13);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v16;
        __v.__begin_ = v18;
        __v.__end_cap_.__value_ = (std::string *)(v16 + 24 * v17);
        long long v19 = *(_OWORD *)__p;
        v18->__r_.__value_.__r.__words[2] = v24;
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        __p[1] = 0;
        std::string::size_type v24 = 0;
        __p[0] = 0;
        __v.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v20 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v21 = SHIBYTE(v24);
        *(void *)(a3 + 8) = v20;
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v12 = *(_OWORD *)__p;
        *(void *)(v10 + 16) = v24;
        *(_OWORD *)unint64_t v10 = v12;
        __p[1] = 0;
        std::string::size_type v24 = 0;
        __p[0] = 0;
        *(void *)(a3 + 8) = v10 + 24;
      }
    }
  }
}

void sub_192755230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::get_uint32_array(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  id v5 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  id v22 = v5;
  if (!v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    uint64_t v23 = v21;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Deserialization tag %s not found", &v23);
  }
  uint64_t v6 = [v5 count];
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    id v9 = 0;
    for (uint64_t i = 0; i != v6; ++i)
    {
      unint64_t v11 = objc_msgSend(v22, "objectAtIndexedSubscript:", i, v22);
      int v12 = [v11 unsignedIntValue];
      int v13 = v12;
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v15 = (v9 - v7) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v8 - (void)v7) >> 1 > v16) {
          unint64_t v16 = (uint64_t)(v8 - (void)v7) >> 1;
        }
        if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        long long v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)long long v19 = v13;
        unint64_t v14 = v19 + 4;
        while (v9 != v7)
        {
          int v20 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        unint64_t v8 = v17 + 4 * v18;
        *a3 = v19;
        a3[1] = v14;
        a3[2] = (char *)v8;
        if (v7) {
          operator delete(v7);
        }
        uint64_t v7 = v19;
      }
      else
      {
        *(_DWORD *)id v9 = v12;
        unint64_t v14 = v9 + 4;
      }
      a3[1] = v14;

      id v9 = v14;
    }
  }
}

void sub_192755418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::get_int_array(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  id v5 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  id v22 = v5;
  if (!v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    uint64_t v23 = v21;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Deserialization tag %s not found", &v23);
  }
  uint64_t v6 = [v5 count];
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    for (uint64_t i = 0; i != v6; ++i)
    {
      unint64_t v11 = objc_msgSend(v22, "objectAtIndexedSubscript:", i, v22);
      int v12 = [v11 intValue];
      int v13 = v12;
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v15 = (v9 - v7) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v8 - (void)v7) >> 1 > v16) {
          unint64_t v16 = (uint64_t)(v8 - (void)v7) >> 1;
        }
        if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        long long v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)long long v19 = v13;
        unint64_t v14 = v19 + 4;
        while (v9 != v7)
        {
          int v20 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        unint64_t v8 = v17 + 4 * v18;
        *a3 = v19;
        a3[1] = v14;
        a3[2] = (char *)v8;
        if (v7) {
          operator delete(v7);
        }
        uint64_t v7 = v19;
      }
      else
      {
        *(_DWORD *)uint64_t v9 = v12;
        unint64_t v14 = v9 + 4;
      }
      a3[1] = v14;

      uint64_t v9 = v14;
    }
  }
}

void sub_1927555E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::serdes_object_json_objc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389E28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::serdes_object_json_objc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double Espresso::SerDes::serdes_object_json_objc::get_double(uint64_t a1, uint64_t a2)
{
  id v3 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  if (!v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v10 = std::string::append(&v12, "\" not found");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = (const char *)[v3 UTF8String];
    size_t v5 = strlen(v4);
    double v6 = Espresso::SerDes::generic_serdes_object::try_parse_special_double_val(a2, (uint64_t)v4, v5);
  }
  else
  {
    [v3 doubleValue];
  }
  double v7 = v6;

  return v7;
}

void sub_1927557D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_longlong(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  id v3 = v2;
  if (!v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    double v7 = std::string::append(&v9, "\" not found");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = [v2 longLongValue];

  return v4;
}

void sub_192755938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_ushort(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  id v3 = v2;
  if (!v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    double v7 = std::string::append(&v9, "\" not found");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = [v2 unsignedShortValue];

  return v4;
}

void sub_192755A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void Espresso::SerDes::serdes_object_json_objc::clone_empty(void *a1@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso6SerDes23serdes_object_json_objcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v4);
  id v3 = (std::__shared_weak_count *)v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v3);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385C88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSGraphEngine::Kernels::flatten_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) - *(void *)a3 != 64 || *(void *)(a3 + 32) - *(void *)(a3 + 24) != 64)
  {
    long long v11 = a2[1];
    v23[0] = *a2;
    v23[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "[Dispatch::MPSGraph::flatten_kernel] unsupported: invalid number of inputs or outputs.  Only 1 & 1 supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v17, a3, 0);
    Espresso::emit_kernel_validation_warning(v23, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    v13[0] = v21;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
    v13[0] = v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    goto LABEL_36;
  }
  if (*(_DWORD *)(a1 + 280) != 2)
  {
    long long v11 = a2[1];
    v16[0] = *a2;
    v16[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "[Dispatch::MPSGraph::flatten_kernel] unsupported: only mode FLATTEN_NCHW_ND is supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v17, a3, 0);
    Espresso::emit_kernel_validation_warning(v16, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    v13[0] = v21;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
    v13[0] = v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18) < 0)
    {
      operator delete(v17[0]);
      if (!v11) {
        return 0;
      }
      goto LABEL_37;
    }
LABEL_36:
    if (!v11) {
      return 0;
    }
LABEL_37:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11);
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v17, *(const Espresso::layer_shape **)a3, 0);
  unint64_t v6 = *(unsigned int *)(a1 + 284);
  BOOL v7 = (v6 & 0x80000000) == 0 && v18 > v6;
  uint64_t v8 = v7;
  if (!v7)
  {
    std::string v9 = *a2;
    std::string v10 = a2[1];
    v15[0] = v9;
    v15[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "[Dispatch::MPSGraph::flatten_kernel] unsupported: nd_axis < 0 or nd_axis >= input rank");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v13, a3, 0);
    Espresso::emit_kernel_validation_warning(v15, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    std::string::size_type v24 = (void **)v21;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v24);
    std::string::size_type v24 = (void **)v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v10);
    }
  }
  return v8;
}

void sub_192755EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a26);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::flatten_kernel::~flatten_kernel(Espresso::MPSGraphEngine::Kernels::flatten_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void sub_1927561AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_26generic_elementwise_kernelENS_25generic_activation_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  size_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DDA0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DDA0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZL17fuse_add_and_reluRN8Espresso6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::operator()(uint64_t a1, uint64_t *a2, Espresso::zephyr::node_t **a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  matched = Espresso::zephyr::match_simple_eltwise_binop(*a2, 0);
  if (!matched)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    std::string v13 = Espresso::espresso_os_log_subsystem(0, v6);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      goto LABEL_18;
    }
    int v16 = 136315650;
    unint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
    __int16 v18 = 1024;
    int v19 = 23;
    __int16 v20 = 2080;
    uint64_t v21 = "ke";
LABEL_17:
    _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v16, 0x1Cu);
    goto LABEL_18;
  }
  uint64_t v7 = matched;
  uint64_t v8 = (Espresso *)Espresso::zephyr::match_simple_activation((uint64_t)v4, 0);
  if (!v8)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    std::string v13 = Espresso::espresso_os_log_subsystem(0, v9);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      goto LABEL_18;
    }
    int v16 = 136315650;
    unint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
    __int16 v18 = 1024;
    int v19 = 25;
    __int16 v20 = 2080;
    uint64_t v21 = "ka";
    goto LABEL_17;
  }
  if (*(void *)(v3 + 128) - *(void *)(v3 + 120) == 16)
  {
    *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v7 + 320))(v7) + 4) = 1;
    std::string v10 = (Espresso::zephyr::value_t **)*((void *)v4 + 12);
    if (*((Espresso::zephyr::value_t ***)v4 + 13) == v10) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    Espresso::zephyr::node_t::replace_output_at(v3, 0, *v10);
    long long v11 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v4);
    if (!Espresso::zephyr::match_verbose) {
      return 1;
    }
    std::string v13 = Espresso::espresso_os_log_subsystem(v11, v12);
    uint64_t v14 = 1;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v16 = 136315394;
      unint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
      __int16 v18 = 1024;
      int v19 = 33;
      _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_19;
  }
  if (!Espresso::zephyr::match_verbose) {
    return 0;
  }
  std::string v13 = Espresso::espresso_os_log_subsystem(v8, v9);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315650;
    unint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
    __int16 v18 = 1024;
    int v19 = 26;
    __int16 v20 = 2080;
    uint64_t v21 = "t0.node->inputs().size() == 2";
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v14 = 0;
LABEL_19:

  return v14;
}

uint64_t std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3798E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE3798E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__func()
{
}

void sub_192756AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__value_func[abi:ne180100]((void *)(v2 - 72));
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target_type()
{
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZL16quantize_gathersRN8Espresso6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  v10[0] = &unk_1EE37E588;
  v10[1] = &v9;
  long long v11 = v10;
  uint64_t v2 = v9 + 112;
  uint64_t v3 = (uint64_t *)(v9 + 120);
  uint64_t v4 = *(void *)(v9 + 120);
  if (v4 == v9 + 112)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      int v6 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v11, *(void *)(v4 + 16));
      uint64_t v7 = (uint64_t *)(v4 + 8);
      if (v6) {
        uint64_t v7 = v3;
      }
      v5 |= v6;
      uint64_t v4 = *v7;
    }
    while (*v7 != v2);
  }
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v10);
  return v5 & 1;
}

void sub_192756C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZL16quantize_gathersRN8Espresso6zephyr10function_tEENK3$_0clEPNS0_15ordered_block_tEEUlPNS0_6node_tEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(void *)(*(void *)a2 + 128) - *(void *)(*(void *)a2 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v9 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 44;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  uint64_t v4 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*(void *)a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v9 = Espresso::espresso_os_log_subsystem(0, v5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 47;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "k";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  int v6 = v4;
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  if (!v7[8])
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 50;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "p.is_lookup";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  if (v7[7])
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 51;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "!p.has_prelu";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_35:

      return 0;
    }
    return 0;
  }
  if (v7[3])
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 52;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "!p.has_relu";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  if (v7[4])
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 53;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "!p.has_tanh";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  if (v7[9])
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 54;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "!p.quantization_mode";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  vDSP_Length v13 = *v7;
  vDSP_Length v12 = v7[1];
  (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v6 + 416))(&v164, v6);
  uint64_t v14 = (Espresso *)(*(void *(**)(uint64_t *__return_ptr, void *))(*(void *)v6 + 408))(&v162, v6);
  float __C = 0.0;
  if (v162) {
    vDSP_maxv(*(const float **)(v162 + 16), 1, &__C, *(int *)(v162 + 8));
  }
  if (v164)
  {
    if (v162 && fabsf(__C) >= 1.0e-12)
    {
      if (Espresso::zephyr::match_verbose)
      {
        std::string::size_type v118 = Espresso::espresso_os_log_subsystem(v14, v15);
        if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 62;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "!b || fabsf(max_b) < 1e-12";
          _os_log_impl(&dword_1920CB000, v118, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_216;
      }
    }
    else
    {
      if (v13 > 4)
      {
        int v16 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
        if (*((Espresso::zephyr::value_t ***)v2 + 16) == v16) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        Espresso::zephyr::need_shape((Espresso::zephyr *)&v159, *v16);
        uint64_t v19 = v159;
        if (!v159 || (int v20 = *(_DWORD *)(v159 + 20), v20 == -1) || v20 >= 4)
        {
          if (Espresso::zephyr::match_verbose)
          {
            id v119 = Espresso::espresso_os_log_subsystem(v17, v18);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 66;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "shape_ptr && shape_ptr->rank() <= 3";
              _os_log_impl(&dword_1920CB000, v119, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_225;
          }
        }
        else
        {
          if (v20 > 1)
          {
            uint64_t v21 = (Espresso::zephyr::value_t **)*((void *)v2 + 12);
            if (*((Espresso::zephyr::value_t ***)v2 + 13) == v21) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            vDSP_Length __M = v12;
            Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v21);
            uint64_t v22 = *(void *)(*(void *)buf + 32);
            long long v23 = *(_OWORD *)(*(void *)buf + 16);
            v154[0] = **(_OWORD **)buf;
            v154[1] = v23;
            uint64_t v155 = v22;
            int v156 = 0;
            long long v157 = 0;
            uint64_t v158 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v156, *(const void **)(*(void *)buf + 40), *(void *)(*(void *)buf + 48), (uint64_t)(*(void *)(*(void *)buf + 48) - *(void *)(*(void *)buf + 40)) >> 2);
            if (*(void *)&buf[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
            }
            long long v24 = *(_OWORD *)(v19 + 16);
            uint64_t v25 = *(void *)(v19 + 32);
            v149[0] = *(_OWORD *)v19;
            v149[1] = v24;
            uint64_t v150 = v25;
            char v151 = 0;
            std::string v152 = 0;
            uint64_t v153 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v151, *(const void **)(v19 + 40), *(void *)(v19 + 48), (uint64_t)(*(void *)(v19 + 48) - *(void *)(v19 + 40)) >> 2);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v147, *(_DWORD *)(v164 + 12), *(_DWORD *)(v164 + 8), 1, 1);
            uint64_t v124 = v147;
            vDSP_mtrans(*(const float **)(v164 + 16), 1, *(float **)(v147 + 16), 1, v12, v13);
            std::string __p = 0;
            uint64_t v145 = 0;
            uint64_t v26 = 4 * v13;
            unint64_t v146 = 0;
            std::vector<float>::reserve(&__p, 4 * v13);
            int v122 = v13;
            std::vector<float>::vector(&v142, v12);
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            vDSP_Length v121 = v12 >> 2;
            uint64_t v120 = 3 * (v12 >> 2);
            do
            {
              if (v12)
              {
                long long v29 = (_DWORD *)(*(void *)(v124 + 16) + v27);
                long long v30 = v142;
                do
                {
                  *v30++ = *v29;
                  long long v29 = (_DWORD *)((char *)v29 + v26);
                  --v12;
                }
                while (v12);
              }
              std::__sort<std::__less<float,float> &,float *>();
              float v31 = *(float *)v142;
              float v32 = *((float *)v142 + v121);
              float v33 = *((float *)v142 + v120);
              float v34 = *(v143 - 1);
              uint64_t v36 = v145;
              unint64_t v35 = v146;
              if ((unint64_t)v145 >= v146)
              {
                std::string::size_type v38 = (float *)__p;
                uint64_t v39 = ((char *)v145 - (unsigned char *)__p) >> 2;
                unint64_t v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62) {
                  goto LABEL_233;
                }
                uint64_t v41 = v146 - (void)__p;
                if ((uint64_t)(v146 - (void)__p) >> 1 > v40) {
                  unint64_t v40 = v41 >> 1;
                }
                BOOL v42 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v42) {
                  unint64_t v43 = v40;
                }
                if (v43)
                {
                  unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v43);
                  std::string::size_type v38 = (float *)__p;
                  uint64_t v36 = v145;
                }
                else
                {
                  uint64_t v44 = 0;
                }
                uint64_t v45 = (float *)(v43 + 4 * v39);
                float *v45 = v31;
                uint64_t v37 = v45 + 1;
                while (v36 != v38)
                {
                  int v46 = *((_DWORD *)v36-- - 1);
                  *((_DWORD *)v45-- - 1) = v46;
                }
                unint64_t v35 = v43 + 4 * v44;
                std::string __p = v45;
                uint64_t v145 = v37;
                unint64_t v146 = v35;
                if (v38)
                {
                  operator delete(v38);
                  unint64_t v35 = v146;
                }
              }
              else
              {
                *uint64_t v145 = v31;
                uint64_t v37 = v36 + 1;
              }
              uint64_t v145 = v37;
              if ((unint64_t)v37 >= v35)
              {
                BOOL v48 = (float *)__p;
                uint64_t v49 = ((char *)v37 - (unsigned char *)__p) >> 2;
                unint64_t v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 62) {
                  goto LABEL_233;
                }
                uint64_t v51 = v35 - (void)__p;
                if (v51 >> 1 > v50) {
                  unint64_t v50 = v51 >> 1;
                }
                BOOL v42 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v42) {
                  unint64_t v52 = v50;
                }
                if (v52)
                {
                  unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v52);
                  BOOL v48 = (float *)__p;
                  uint64_t v37 = v145;
                }
                else
                {
                  uint64_t v53 = 0;
                }
                uint64_t v54 = (float *)(v52 + 4 * v49);
                *uint64_t v54 = v32;
                uint64_t v47 = v54 + 1;
                while (v37 != v48)
                {
                  int v55 = *((_DWORD *)v37-- - 1);
                  *((_DWORD *)v54-- - 1) = v55;
                }
                unint64_t v35 = v52 + 4 * v53;
                std::string __p = v54;
                uint64_t v145 = v47;
                unint64_t v146 = v35;
                if (v48)
                {
                  operator delete(v48);
                  unint64_t v35 = v146;
                }
              }
              else
              {
                *uint64_t v37 = v32;
                uint64_t v47 = v37 + 1;
              }
              uint64_t v145 = v47;
              if ((unint64_t)v47 >= v35)
              {
                uint64_t v57 = (float *)__p;
                uint64_t v58 = ((char *)v47 - (unsigned char *)__p) >> 2;
                unint64_t v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62) {
                  goto LABEL_233;
                }
                uint64_t v60 = v35 - (void)__p;
                if (v60 >> 1 > v59) {
                  unint64_t v59 = v60 >> 1;
                }
                BOOL v42 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v42) {
                  unint64_t v61 = v59;
                }
                if (v61)
                {
                  unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v61);
                  uint64_t v57 = (float *)__p;
                  uint64_t v47 = v145;
                }
                else
                {
                  uint64_t v62 = 0;
                }
                int v63 = (float *)(v61 + 4 * v58);
                *int v63 = v33;
                long long v56 = v63 + 1;
                while (v47 != v57)
                {
                  int v64 = *((_DWORD *)v47-- - 1);
                  *((_DWORD *)v63-- - 1) = v64;
                }
                unint64_t v35 = v61 + 4 * v62;
                std::string __p = v63;
                uint64_t v145 = v56;
                unint64_t v146 = v35;
                if (v57)
                {
                  operator delete(v57);
                  unint64_t v35 = v146;
                }
              }
              else
              {
                *uint64_t v47 = v33;
                long long v56 = v47 + 1;
              }
              uint64_t v145 = v56;
              if ((unint64_t)v56 >= v35)
              {
                uint64_t v66 = (float *)__p;
                uint64_t v67 = ((char *)v56 - (unsigned char *)__p) >> 2;
                unint64_t v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 62) {
LABEL_233:
                }
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                uint64_t v69 = v35 - (void)__p;
                if (v69 >> 1 > v68) {
                  unint64_t v68 = v69 >> 1;
                }
                BOOL v42 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v42) {
                  unint64_t v70 = v68;
                }
                if (v70)
                {
                  unint64_t v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v70);
                  uint64_t v66 = (float *)__p;
                  long long v56 = v145;
                }
                else
                {
                  uint64_t v71 = 0;
                }
                int64_t v72 = (float *)(v70 + 4 * v67);
                float *v72 = v34;
                uint64_t v65 = v72 + 1;
                while (v56 != v66)
                {
                  int v73 = *((_DWORD *)v56-- - 1);
                  *((_DWORD *)v72-- - 1) = v73;
                }
                std::string __p = v72;
                uint64_t v145 = v65;
                unint64_t v146 = v70 + 4 * v71;
                if (v66) {
                  operator delete(v66);
                }
              }
              else
              {
                float *v56 = v34;
                uint64_t v65 = v56 + 1;
              }
              vDSP_Length v12 = __M;
              uint64_t v145 = v65;
              if (__M)
              {
                uint64_t v74 = *(void *)(v124 + 16);
                vDSP_Length v75 = __M;
                do
                {
                  float v76 = *(float *)(v74 + v27);
                  if (v76 >= v32)
                  {
                    double v79 = (float)((float)((float)(v76 - v33) / (float)(v34 - v33)) * 63.0) + 0.5;
                    unsigned int v80 = (int)v79 & ~((int)v79 >> 31);
                    if (v80 >= 0x3F) {
                      unsigned int v80 = 63;
                    }
                    int v78 = v80 | 0xC0;
                    double v81 = (float)((float)((float)(v76 - v32) / (float)(v33 - v32)) * 128.0) + 0.5;
                    unsigned int v82 = (int)v81 & ~((int)v81 >> 31);
                    if (v82 >= 0x80) {
                      unsigned int v82 = 128;
                    }
                    int v83 = v82 + 64;
                    if (v76 < v33) {
                      int v78 = v83;
                    }
                  }
                  else
                  {
                    double v77 = (float)((float)((float)(v76 - v31) / (float)(v32 - v31)) * 64.0) + 0.5;
                    int v78 = (int)v77 & ~((int)v77 >> 31);
                    if (v78 >= 0x40) {
                      int v78 = 64;
                    }
                  }
                  *(float *)(v74 + v27) = (float)v78;
                  v74 += v26;
                  --v75;
                }
                while (v75);
              }
              ++v28;
              v27 += 4;
            }
            while (v28 != v13);
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int const*&,void>(&v140, (int *)(v164 + 8));
            uint64_t v84 = v140;
            vDSP_vfixu8(*(const float **)(v147 + 16), 1, *(unsigned __int8 **)(v140 + 16), 1, *(int *)(v147 + 12) * (uint64_t)*(int *)(v147 + 8));
            memset(v176, 0, sizeof(v176));
            long long v175 = 0u;
            long long v174 = 0u;
            long long v173 = 0u;
            memset(&buf[4], 0, 64);
            int v177 = 2;
            *(_DWORD *)long long buf = -1;
            Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(&v132, *(void *)(*((void *)v2 + 1) + 8), (uint64_t)buf);
            unint64_t v85 = Espresso::zephyr::function_t::new_detached_node(*((void *)v2 + 3), (uint64_t)v2 + 144);
            uint64_t v86 = (uint64_t *)*((void *)v2 + 15);
            if (*((uint64_t **)v2 + 16) == v86) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v87 = v85;
            uint64_t v88 = *((void *)v2 + 3);
            uint64_t v89 = *v86;
            size_t v90 = *(unsigned __int8 *)(*v86 + 55);
            if ((v90 & 0x80u) == 0) {
              size_t v91 = v90;
            }
            else {
              size_t v91 = *(void *)(v89 + 40);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v166, v91 + 8);
            if ((SBYTE7(v167) & 0x80u) == 0) {
              int v92 = &v166;
            }
            else {
              int v92 = (long long *)v166;
            }
            if (v91)
            {
              if (*(char *)(v89 + 55) >= 0) {
                uint64_t v93 = (const void *)(v89 + 32);
              }
              else {
                uint64_t v93 = *(const void **)(v89 + 32);
              }
              uint64_t v94 = v92;
              memmove(v92, v93, v91);
              int v92 = v94;
            }
            strcpy((char *)v92 + v91, "_squeeze");
            long long v95 = Espresso::zephyr::function_t::new_value(v88, (uint64_t)&v166);
            if (SBYTE7(v167) < 0) {
              operator delete((void *)v166);
            }
            uint64_t v96 = *((void *)v87 + 1);
            uint64_t v97 = v132;
            uint64_t v98 = v133;
            if (v133) {
              atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v99 = *(std::__shared_weak_count **)(v96 + 16);
            *(void *)(v96 + 8) = v97;
            *(void *)(v96 + 16) = v98;
            if (v99) {
              nitro::nitro_function::nitro_function(v99);
            }
            long long v100 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
            if (*((Espresso::zephyr::value_t ***)v2 + 16) == v100) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v87, *v100);
            Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v87, (Espresso::zephyr::value_t *)v95);
            Espresso::zephyr::node_t::replace_input_at(v2, 0, (Espresso::zephyr::value_t *)v95);
            Espresso::zephyr::ordered_block_t::insert_node_before(*a1[1], (Espresso::zephyr::node_t *)v87, v2);
            if (v98) {
              nitro::nitro_function::nitro_function(v98);
            }
            uint64_t v139 = 0x800000000;
            v138[0] = v122;
            v138[1] = __M;
            Espresso::zephyr::make_kernel<Espresso::generic_quantized_gather_kernel,Espresso::zephyr::node_t,Espresso::quantized_gather_params_t>(&v136, *(void *)(*((void *)v2 + 1) + 8), (uint64_t)v138);
            uint64_t v101 = v136;
            long long v166 = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(buf, "Q_meta");
            (*(void (**)(uint64_t, long long *, unsigned char *, void *, int64_t, void))(*(void *)v101
                                                                                                 + 168))(v101, &v166, buf, __p, (char *)v145 - (unsigned char *)__p, 0);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (*((void *)&v166 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v166 + 1));
            }
            long long v166 = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(buf, "weights_u8");
            (*(void (**)(uint64_t, long long *, unsigned char *, void, uint64_t, void))(*(void *)v101 + 168))(v101, &v166, buf, *(void *)(v84 + 16), *(int *)(v84 + 12) * (uint64_t)*(int *)(v84 + 8), 0);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (*((void *)&v166 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v166 + 1));
            }
            uint64_t v102 = *((void *)v2 + 1);
            uint64_t v103 = v137;
            if (v137) {
              atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v104 = *(std::__shared_weak_count **)(v102 + 16);
            *(void *)(v102 + 8) = v101;
            *(void *)(v102 + 16) = v103;
            if (v104) {
              nitro::nitro_function::nitro_function(v104);
            }
            uint64_t v105 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
            if (*((Espresso::zephyr::value_t ***)v2 + 16) == v105) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            Espresso::zephyr::need_shape((Espresso::zephyr *)&v134, *v105);
            id v106 = (const Espresso::layer_shape *)v134;
            uint64_t v107 = *(void *)(v134 + 32);
            long long v108 = *(_OWORD *)(v134 + 16);
            long long v166 = *(_OWORD *)v134;
            long long v167 = v108;
            uint64_t v168 = v107;
            std::string v169 = 0;
            uint64_t v171 = 0;
            unsigned int v170 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v169, *(const void **)(v134 + 40), *(void *)(v134 + 48), (uint64_t)(*(void *)(v134 + 48) - *(void *)(v134 + 40)) >> 2);
            memset(&v131, 0, sizeof(v131));
            id v129 = &v131;
            char v130 = 0;
            v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
            v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
            v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 64;
            v131.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v131.__r_.__value_.__r.__words[2], &v166, (long long *)buf, (uint64_t)v131.__r_.__value_.__l.__data_);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(void *)v101 + 64))(&v132, v101, &v131);
            uint64_t v109 = *(void *)(v132 + 32);
            long long v110 = *(_OWORD *)(v132 + 16);
            *(_OWORD *)long long buf = *(_OWORD *)v132;
            *(_OWORD *)&uint8_t buf[16] = v110;
            *(void *)&unsigned char buf[32] = v109;
            memset(&buf[40], 0, 24);
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], *(const void **)(v132 + 40), *(void *)(v132 + 48), (uint64_t)(*(void *)(v132 + 48) - *(void *)(v132 + 40)) >> 2);
            id v129 = (std::string *)&v132;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
            id v129 = &v131;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
            if (v169)
            {
              unsigned int v170 = v169;
              operator delete(v169);
            }
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v132, (const Espresso::layer_shape *)v149, 0);
            uint64_t v111 = (const char *)&v166;
            Espresso::layer_nd_shape::repr((std::string *)&v166, (uint64_t)&v132);
            if (SBYTE7(v167) < 0) {
              uint64_t v111 = (const char *)v166;
            }
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v129, v106, 0);
            long long v112 = &v131;
            Espresso::layer_nd_shape::repr(&v131, (uint64_t)&v129);
            if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v112 = (std::string *)v131.__r_.__value_.__r.__words[0];
            }
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v127, (const Espresso::layer_shape *)buf, 0);
            uint64_t v113 = &v128;
            Espresso::layer_nd_shape::repr(&v128, (uint64_t)v127);
            if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v113 = (std::string *)v128.__r_.__value_.__r.__words[0];
            }
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v125, (const Espresso::layer_shape *)v154, 0);
            Espresso::layer_nd_shape::repr(&v126, (uint64_t)v125);
            if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v114 = &v126;
            }
            else {
              unint64_t v114 = (std::string *)v126.__r_.__value_.__r.__words[0];
            }
            printf("sq_in=%s in=%s new=%s old=%s\n", v111, (const char *)v112, (const char *)v113, (const char *)v114);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v126.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v128.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v131.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v167) < 0) {
              operator delete((void *)v166);
            }
            if (*(void *)&buf[40])
            {
              *(void *)&buf[48] = *(void *)&buf[40];
              operator delete(*(void **)&buf[40]);
            }
            long long v116 = (Espresso *)v135;
            if (v135) {
              nitro::nitro_function::nitro_function(v135);
            }
            if (v103) {
              nitro::nitro_function::nitro_function(v103);
            }
            if (Espresso::zephyr::match_verbose)
            {
              long long v117 = Espresso::espresso_os_log_subsystem(v116, v115);
              if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 176;
                _os_log_impl(&dword_1920CB000, v117, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
              }
            }
            if (v141) {
              nitro::nitro_function::nitro_function(v141);
            }
            if (v142)
            {
              std::string::size_type v143 = (float *)v142;
              operator delete(v142);
            }
            if (__p)
            {
              uint64_t v145 = (float *)__p;
              operator delete(__p);
            }
            if (v148) {
              nitro::nitro_function::nitro_function(v148);
            }
            if (v151)
            {
              std::string v152 = v151;
              operator delete(v151);
            }
            if (v156)
            {
              long long v157 = v156;
              operator delete(v156);
            }
            uint64_t v10 = 1;
            goto LABEL_227;
          }
          if (Espresso::zephyr::match_verbose)
          {
            id v119 = Espresso::espresso_os_log_subsystem(v17, v18);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 67;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "shape_ptr && shape_ptr->rank() >= 2";
              _os_log_impl(&dword_1920CB000, v119, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
LABEL_225:
          }
        }
        uint64_t v10 = 0;
LABEL_227:
        if (v160) {
          nitro::nitro_function::nitro_function(v160);
        }
        goto LABEL_218;
      }
      if (Espresso::zephyr::match_verbose)
      {
        std::string::size_type v118 = Espresso::espresso_os_log_subsystem(v14, v15);
        if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 63;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "p.nC >= 5";
          _os_log_impl(&dword_1920CB000, v118, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
LABEL_216:
      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    std::string::size_type v118 = Espresso::espresso_os_log_subsystem(v14, v15);
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 61;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "W_const";
      _os_log_impl(&dword_1920CB000, v118, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_216;
  }
  uint64_t v10 = 0;
LABEL_218:
  if (v163) {
    nitro::nitro_function::nitro_function(v163);
  }
  if (v165) {
    nitro::nitro_function::nitro_function(v165);
  }
  return v10;
}

void sub_192758178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a30 = (uint64_t)&a36;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = (uint64_t)&a33;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  unint64_t v70 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v70;
    operator delete(v70);
  }
  if (a40) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a40);
  }
  if (a42) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a42);
  }
  if (a46) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a46);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a54) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a54);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  if (STACK[0x200]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x200]);
  }
  if (STACK[0x218]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x218]);
  }
  if (STACK[0x228]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2);
    char v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = &v4[4 * v6];
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v9 != *a1)
    {
      uint64_t v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int const*&,void>(void *a1, int *a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE389AA8;
  *((void *)v4 + 3) = &unk_1EE36BF90;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  int v5 = *a2;
  int v6 = a2[1];
  *((_DWORD *)v4 + 8) = *a2;
  *((_DWORD *)v4 + 9) = v6;
  size_t v7 = v6 * (uint64_t)v5;
  uint64_t v8 = Espresso::kern_alloc_uninitialized((Espresso *)v7);
  bzero(v8, v7);
  *((void *)v4 + 5) = v8;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_1927585B4(_Unwind_Exception *a1)
{
  unint64_t shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    uint64_t v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_19275871C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::zephyr::make_kernel<Espresso::generic_quantized_gather_kernel,Espresso::zephyr::node_t,Espresso::quantized_gather_params_t>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_gather");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    uint64_t v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192758888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37E588;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37E588;
  result[1] = v3;
  return result;
}

void std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379888;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE379888;
  result[1] = v3;
  return result;
}

void std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__func()
{
}

uint64_t Espresso::abstract_blob_container::set_reference_to()
{
  return 0;
}

uint64_t Espresso::abstract_blob_container::resize_without_realloc()
{
  return 0;
}

BOOL Espresso::HXEngine::blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v7, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v7);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v5 != 0;
}

void sub_192758A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::HXEngine::blob_container::raw_size(Espresso::HXEngine::blob_container *this)
{
  if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(void *)this + 32))(this) == 4) {
    return *((int *)this + 3) * (uint64_t)*((int *)this + 2) * *((int *)this + 4);
  }
  else {
    return 0;
  }
}

uint64_t Espresso::HXEngine::blob_container::__copy_to_raw(CVPixelBufferRef *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *((_DWORD *)a1 + 2);
  int v6 = *((_DWORD *)a1 + 3);
  if ((*((unsigned int (**)(CVPixelBufferRef *))*a1 + 4))(a1) != 4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not supported");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v7 = (char *)Espresso::HXEngine::blob_container::util_lock_pixel_buffer((Espresso::HXEngine::blob_container *)a1, a1[21], 1uLL);
  int v9 = *((_DWORD *)a1 + 3);
  if (v9 >= 1)
  {
    int v10 = 0;
    int v11 = *((_DWORD *)a1 + 2);
    do
    {
      if (v11 >= 1)
      {
        int v12 = 0;
        int v13 = *((_DWORD *)a1 + 4);
        uint64_t v14 = v7;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v15 = 0;
            int v16 = v12;
            do
            {
              *(unsigned char *)(a3 + v16 + v10 * *((_DWORD *)a1 + 2)) = v14[v15];
              int v13 = *((_DWORD *)a1 + 4);
              ++v15;
              v16 += v6 * v5;
            }
            while ((int)v15 < v13);
            v14 += v15;
            int v11 = *((_DWORD *)a1 + 2);
          }
          ++v12;
        }
        while (v12 < v11);
        int v9 = *((_DWORD *)a1 + 3);
      }
      v7 += v8;
      ++v10;
    }
    while (v10 < v9);
  }
  unint64_t v17 = a1[21];

  return Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(v17, (__CVBuffer *)1);
}

void sub_192758C30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *Espresso::HXEngine::blob_container::util_lock_pixel_buffer(Espresso::HXEngine::blob_container *this, CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  if (!pixelBuffer)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Pixel buffer not initialized");
    goto LABEL_7;
  }
  if (CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags)
    || (Espresso::HXEngine::blob_container::stride_in_bytes(this),
        (double result = CVPixelBufferGetBaseAddress(pixelBuffer)) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot lock pixel buffer");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_192758D08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(Espresso::HXEngine::blob_container *this, __CVBuffer *a2)
{
  if (!this)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Pixel buffer not initialized");
    goto LABEL_6;
  }
  uint64_t result = CVPixelBufferUnlockBaseAddress(this, (CVPixelBufferLockFlags)a2);
  if (result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot unlock pixel buffer");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_192758DA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::blob_container::stride_in_bytes(Espresso::HXEngine::blob_container *this)
{
  if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(void *)this + 32))(this) == 5)
  {
    int v2 = 2 * *((_DWORD *)this + 2) * *((_DWORD *)this + 4);
  }
  else
  {
    if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(void *)this + 32))(this) != 4)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid parameter");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v2 = *((_DWORD *)this + 4) * *((_DWORD *)this + 2);
  }
  return (v2 + 63) & 0xFFFFFFC0;
}

void sub_192758E94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::blob_container::unsafe_opaque_raw_pointer(Espresso::HXEngine::blob_container *this)
{
  return *((void *)this + 21);
}

uint64_t Espresso::abstract_blob_container::can_arbitrarily_resize(Espresso::abstract_blob_container *this)
{
  return 0;
}

uint64_t Espresso::HXEngine::blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8);
  int v6 = (char *)Espresso::HXEngine::blob_container::util_lock_pixel_buffer((Espresso::HXEngine::blob_container *)a1, *(CVPixelBufferRef *)(a1 + 168), 0);
  uint64_t v8 = v7;
  float v9 = *(float *)(a1 + 112);
  float v10 = ldexpf(1.0, *(_DWORD *)(a1 + 164));
  int v11 = *(_DWORD *)(a1 + 116);
  char v12 = *(_DWORD *)(a1 + 160);
  int v13 = -1 << v12;
  int v14 = -1 << (v12 - 1);
  BOOL v15 = v11 == 0;
  if (v11) {
    int v16 = v14;
  }
  else {
    int v16 = v13;
  }
  if (v15) {
    signed int v17 = 0;
  }
  else {
    signed int v17 = v14;
  }
  int v18 = ~v16;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) == 5 && !*(_DWORD *)(a1 + 116))
  {
    int v41 = *(_DWORD *)(a1 + 12);
    if (v41 >= 1)
    {
      int v42 = 0;
      int v43 = 0;
      int v44 = *(_DWORD *)(a1 + 8);
      do
      {
        if (v44 >= 1)
        {
          int v45 = 0;
          uint64_t v46 = *(unsigned int *)(a1 + 16);
          uint64_t v47 = *a3;
          int v48 = v42;
          uint64_t v49 = v6;
          do
          {
            if ((int)v46 >= 1)
            {
              uint64_t v50 = *(void *)(v47 + 24);
              int v51 = v48;
              uint64_t v52 = v46;
              do
              {
                signed int v53 = llroundf(v9 * (float)(v10 * *(float *)(v50 + 4 * v51)));
                if (v53 >= v18) {
                  signed int v53 = v18;
                }
                if (v17 > v53) {
                  LOWORD(v53) = v17;
                }
                *v49++ = v53;
                v51 += v5;
                --v52;
              }
              while (v52);
            }
            ++v45;
            ++v48;
          }
          while (v45 != v44);
        }
        v6 += v8;
        ++v43;
        v42 += v44;
      }
      while (v43 != v41);
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) == 5 && *(_DWORD *)(a1 + 116) == 1)
  {
    int v19 = *(_DWORD *)(a1 + 12);
    if (v19 >= 1)
    {
      int v20 = 0;
      int v21 = 0;
      int v22 = *(_DWORD *)(a1 + 8);
      do
      {
        if (v22 >= 1)
        {
          int v23 = 0;
          uint64_t v24 = *(unsigned int *)(a1 + 16);
          uint64_t v25 = *a3;
          int v26 = v20;
          uint64_t v27 = v6;
          do
          {
            if ((int)v24 >= 1)
            {
              uint64_t v28 = *(void *)(v25 + 24);
              int v29 = v26;
              uint64_t v30 = v24;
              do
              {
                signed int v31 = llroundf(v9 * (float)(v10 * *(float *)(v28 + 4 * v29)));
                if (v31 >= v18) {
                  signed int v31 = v18;
                }
                if (v17 > v31) {
                  LOWORD(v31) = v17;
                }
                *v27++ = v31;
                v29 += v5;
                --v30;
              }
              while (v30);
            }
            ++v23;
            ++v26;
          }
          while (v23 != v22);
        }
        v6 += v8;
        ++v21;
        v20 += v22;
      }
      while (v21 != v19);
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) == 4 && !*(_DWORD *)(a1 + 116))
  {
    int v54 = *(_DWORD *)(a1 + 12);
    if (v54 >= 1)
    {
      int v55 = 0;
      int v56 = *(_DWORD *)(a1 + 8);
      do
      {
        if (v56 >= 1)
        {
          int v57 = 0;
          int v58 = *(_DWORD *)(a1 + 16);
          unint64_t v59 = v6;
          do
          {
            if (v58 >= 1)
            {
              uint64_t v60 = 0;
              int v61 = v57;
              do
              {
                signed int v62 = llroundf(v9 * (float)(v10
                                          * *(float *)(*(void *)(*a3 + 24) + 4 * (v61 + v55 * *(_DWORD *)(a1 + 8)))));
                if (v18 < v62) {
                  signed int v62 = v18;
                }
                if (v17 > v62) {
                  LOBYTE(v62) = v17;
                }
                v59[v60] = v62;
                int v58 = *(_DWORD *)(a1 + 16);
                ++v60;
                v61 += v5;
              }
              while ((int)v60 < v58);
              v59 += v60;
              int v56 = *(_DWORD *)(a1 + 8);
            }
            ++v57;
          }
          while (v57 < v56);
          int v54 = *(_DWORD *)(a1 + 12);
        }
        v6 += v8;
        ++v55;
      }
      while (v55 < v54);
    }
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) != 4 || *(_DWORD *)(a1 + 116) != 1)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid parameter");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v32 = *(_DWORD *)(a1 + 12);
    if (v32 >= 1)
    {
      int v33 = 0;
      int v34 = *(_DWORD *)(a1 + 8);
      do
      {
        if (v34 >= 1)
        {
          int v35 = 0;
          int v36 = *(_DWORD *)(a1 + 16);
          uint64_t v37 = v6;
          do
          {
            if (v36 >= 1)
            {
              uint64_t v38 = 0;
              int v39 = v35;
              do
              {
                int v40 = llroundf((float)((float)(v10 * *(float *)(*(void *)(*a3 + 24) + 4 * (v39 + v33 * *(_DWORD *)(a1 + 8))))* v9)+ 128.0);
                if (v40 >= 255) {
                  int v40 = 255;
                }
                v37[v38] = v40 & ~(v40 >> 31);
                int v36 = *(_DWORD *)(a1 + 16);
                ++v38;
                v39 += v5;
              }
              while ((int)v38 < v36);
              v37 += v38;
              int v34 = *(_DWORD *)(a1 + 8);
            }
            ++v35;
          }
          while (v35 < v34);
          int v32 = *(_DWORD *)(a1 + 12);
        }
        v6 += v8;
        ++v33;
      }
      while (v33 < v32);
    }
  }
  int v63 = *(Espresso::HXEngine::blob_container **)(a1 + 168);

  return Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(v63, 0);
}

void sub_192759324(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::blob_container::__copy_to_host(Espresso::HXEngine::blob_container *this, uint64_t a2, uint64_t *a3)
{
  if (!*a3)
  {
    (*(void (**)(long long *__return_ptr, Espresso::HXEngine::blob_container *))(*(void *)this + 56))(&v67, this);
    long long v38 = v67;
    long long v67 = 0uLL;
    int v39 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v38;
    if (v39)
    {
      nitro::nitro_function::nitro_function(v39);
      if (*((void *)&v67 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v67 + 1));
      }
    }
  }
  int v5 = *((_DWORD *)this + 2);
  int v6 = *((_DWORD *)this + 3);
  uint64_t v7 = (unsigned __int16 *)Espresso::HXEngine::blob_container::util_lock_pixel_buffer(this, *((CVPixelBufferRef *)this + 21), 1uLL);
  uint64_t v9 = v8;
  float v10 = ldexpf(1.0, -*((_DWORD *)this + 41));
  float v11 = 1.0 / *((float *)this + 28);
  if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(void *)this + 32))(this) == 5
    && !*((_DWORD *)this + 29))
  {
    int v40 = *((_DWORD *)this + 3);
    if (v40 >= 1)
    {
      int v41 = 0;
      int v42 = 0;
      int v43 = *((_DWORD *)this + 2);
      do
      {
        if (v43 >= 1)
        {
          int v44 = 0;
          uint64_t v45 = *((unsigned int *)this + 4);
          uint64_t v46 = *a3;
          int v47 = v41;
          int v48 = v7;
          do
          {
            if ((int)v45 >= 1)
            {
              uint64_t v49 = *(void *)(v46 + 24);
              int v50 = v47;
              uint64_t v51 = v45;
              do
              {
                unsigned int v52 = *v48++;
                *(float *)(v49 + 4 * v50) = v11 * (float)(v10 * (float)v52);
                v50 += v6 * v5;
                --v51;
              }
              while (v51);
            }
            ++v44;
            ++v47;
          }
          while (v44 != v43);
        }
        uint64_t v7 = (unsigned __int16 *)((char *)v7 + v9);
        ++v42;
        v41 += v43;
      }
      while (v42 != v40);
    }
  }
  else if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(void *)this + 32))(this) == 4 {
         && !*((_DWORD *)this + 29))
  }
  {
    int v53 = *((_DWORD *)this + 3);
    if (v53 >= 1)
    {
      int v54 = 0;
      int v55 = 0;
      int v56 = *((_DWORD *)this + 2);
      do
      {
        if (v56 >= 1)
        {
          int v57 = 0;
          uint64_t v58 = *((unsigned int *)this + 4);
          uint64_t v59 = *a3;
          int v60 = v54;
          int v61 = (unsigned __int8 *)v7;
          do
          {
            if ((int)v58 >= 1)
            {
              uint64_t v62 = *(void *)(v59 + 24);
              int v63 = v60;
              uint64_t v64 = v58;
              do
              {
                unsigned int v65 = *v61++;
                *(float *)(v62 + 4 * v63) = v11 * (float)(v10 * (float)v65);
                v63 += v6 * v5;
                --v64;
              }
              while (v64);
            }
            ++v57;
            ++v60;
          }
          while (v57 != v56);
        }
        uint64_t v7 = (unsigned __int16 *)((char *)v7 + v9);
        ++v55;
        v54 += v56;
      }
      while (v55 != v53);
    }
  }
  else if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(void *)this + 32))(this) == 5 {
         && *((_DWORD *)this + 29) == 1)
  }
  {
    int v12 = *((_DWORD *)this + 3);
    if (v12 >= 1)
    {
      int v13 = 0;
      int v14 = 0;
      int v15 = *((_DWORD *)this + 2);
      do
      {
        if (v15 >= 1)
        {
          int v16 = 0;
          uint64_t v17 = *((unsigned int *)this + 4);
          uint64_t v18 = *a3;
          int v19 = v13;
          int v20 = (__int16 *)v7;
          do
          {
            if ((int)v17 >= 1)
            {
              uint64_t v21 = *(void *)(v18 + 24);
              int v22 = v19;
              uint64_t v23 = v17;
              do
              {
                int v24 = *v20++;
                *(float *)(v21 + 4 * v22) = v11 * (float)(v10 * (float)v24);
                v22 += v6 * v5;
                --v23;
              }
              while (v23);
            }
            ++v16;
            ++v19;
          }
          while (v16 != v15);
        }
        uint64_t v7 = (unsigned __int16 *)((char *)v7 + v9);
        ++v14;
        v13 += v15;
      }
      while (v14 != v12);
    }
  }
  else if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(void *)this + 32))(this) == 4 {
         && *((_DWORD *)this + 29) == 1)
  }
  {
    int v25 = *((_DWORD *)this + 3);
    if (v25 >= 1)
    {
      int v26 = 0;
      int v27 = 0;
      int v28 = *((_DWORD *)this + 2);
      do
      {
        if (v28 >= 1)
        {
          int v29 = 0;
          uint64_t v30 = *((unsigned int *)this + 4);
          uint64_t v31 = *a3;
          int v32 = v26;
          int v33 = (unsigned __int8 *)v7;
          do
          {
            if ((int)v30 >= 1)
            {
              uint64_t v34 = *(void *)(v31 + 24);
              int v35 = v32;
              uint64_t v36 = v30;
              do
              {
                unsigned int v37 = *v33++;
                *(float *)(v34 + 4 * v35) = (float)(v10 * (float)(v11 * -127.0))
                                            + (float)((float)(v10 * (float)v37) * v11);
                v35 += v6 * v5;
                --v36;
              }
              while (v36);
            }
            ++v29;
            ++v32;
          }
          while (v29 != v28);
        }
        uint64_t v7 = (unsigned __int16 *)((char *)v7 + v9);
        ++v27;
        v26 += v28;
      }
      while (v27 != v25);
    }
  }
  return Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(*((Espresso::HXEngine::blob_container **)this + 21), (__CVBuffer *)1);
}

uint64_t Espresso::HXEngine::blob_container::compute_path(Espresso::HXEngine::blob_container *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t Espresso::HXEngine::blob_container::platform(Espresso::HXEngine::blob_container *this)
{
  return 5;
}

void Espresso::HXEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, const void **a3)
{
  if (*(int *)(a1 + 24) >= 2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v32, *(_DWORD *)(a1 + 24));
    uint64_t v23 = std::string::insert(&v32, 0, "Seq ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    int v25 = std::string::append(&v33, "not supported");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*a3) {
  else
  }
    int v5 = 0;
  int v6 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (v5)
  {
    BOOL v7 = v5[88] != 0;
    uint64_t v9 = *((void *)v5 + 13);
    uint64_t v8 = *((void *)v5 + 14);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    float v10 = *(std::__shared_weak_count **)(a1 + 184);
    *(void *)(a1 + 176) = v9;
    *(void *)(a1 + 184) = v8;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  int v11 = *(_DWORD *)(a1 + 20);
  if (v11 >= 2)
  {
    int v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Batch > 1 not supported by HX Engine");
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v12 = *(__CVBuffer **)(a1 + 168);
  if (v12)
  {
    CVPixelBufferRelease(v12);
    int v11 = *(_DWORD *)(a1 + 20);
  }
  *(void *)(a1 + 168) = 0;
  if (*(_DWORD *)(a1 + 16) * v11 * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24))
  {
    *(void *)(a1 + 192) = 0;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) != 5
      && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) != 4)
    {
      int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      std::to_string(&v33, v29);
      uint64_t v30 = std::string::insert(&v33, 0, "Invalid parameter ");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v28, &v34);
      __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v13 = *(_DWORD *)(a1 + 12);
    uint64_t v14 = v13
        * (uint64_t)(int)Espresso::HXEngine::blob_container::stride_in_bytes((Espresso::HXEngine::blob_container *)a1);
    *(void *)(a1 + 192) = v14;
    if (v7)
    {
      *((void *)v5 + 12) = v14;
    }
    else if ((***(unsigned int (****)(void))(*(void *)(a1 + 72) + 8))(*(void *)(*(void *)(a1 + 72) {
                                                                                                  + 8)) == 6)
    }
    {
      Espresso::HXEngine::blob_container::force_allocate((CVPixelBufferRef)a1, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void sub_192759AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v29 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

CVPixelBufferRef Espresso::HXEngine::blob_container::force_allocate(CVPixelBufferRef this, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, BOOL a7, unsigned int a8)
{
  if (!*((void *)this + 21))
  {
    CVPixelBufferRef v8 = this;
    this = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)((*((_DWORD *)this + 4) * *((_DWORD *)this + 2) + 63) & 0xFFFFFFC0), *((_DWORD *)this + 3), 10, a4, a5, a6, a7, a8, v9, HIDWORD(v9), v10, v11);
    *((void *)v8 + 21) = this;
  }
  return this;
}

void Espresso::HXEngine::blob_container::~blob_container(Espresso::HXEngine::blob_container *this)
{
  Espresso::HXEngine::blob_container::~blob_container(this);

  JUMPOUT(0x192FF16B0);
}

{
  __CVBuffer *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE36F248;
  int v2 = (__CVBuffer *)*((void *)this + 21);
  if (v2) {
    CVPixelBufferRelease(v2);
  }
  *((void *)this + 21) = 0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

uint64_t Espresso::HXEngine::blob_container::blob_container(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = Espresso::abstract_blob_container::abstract_blob_container(a1, a2);
  *(void *)uint64_t v5 = &unk_1EE36F248;
  *(_DWORD *)(v5 + 160) = 8;
  *(_OWORD *)(v5 + 164) = 0u;
  *(_OWORD *)(v5 + 180) = 0u;
  *(_DWORD *)(v5 + 196) = 0;
  *(_DWORD *)(v5 + 200) = a3;
  if (a3 == 2 || a3 == 4)
  {
    *(void *)(a1 + 160) = 8;
    *(_DWORD *)(a1 + 200) = 4;
  }
  else
  {
    if (a3 != 5)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v10, *(_DWORD *)(a1 + 200));
      CVPixelBufferRef v8 = std::string::insert(&v10, 0, "Invalid compute path for hx: ");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v11);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(void *)(a1 + 160) = 0x800000010;
  }
  return a1;
}

void sub_192759DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      int v25 = (std::__shared_weak_count *)*((void *)v21 + 23);
      if (v25) {
        nitro::nitro_function::nitro_function(v25);
      }
      Espresso::abstract_blob_container::~abstract_blob_container(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(_DWORD *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2 != 4)
    {
      if (v2 != 10) {
        return 0;
      }
      a1 = *(_DWORD **)a1;
      goto LABEL_8;
    }
    int v6 = **(_DWORD **)a1;
    return v6 == 944987991;
  }
  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 4)
  {
    int v6 = *a1;
    return v6 == 944987991;
  }
  if (v1 != 10) {
    return 0;
  }
LABEL_8:
  if (*(void *)a1 == 0x6163735F74736F70 && *((_WORD *)a1 + 4) == 25964) {
    return 1;
  }
  return *(void *)a1 == 0x61727478655F7868 && *((_WORD *)a1 + 4) == 26207;
}

void *Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob(void *result, _DWORD *a2, const void *a3, size_t a4)
{
  int v6 = result;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    int v7 = *((unsigned __int8 *)a2 + 23);
    if (v7 != 4)
    {
      if (v7 != 10) {
        return result;
      }
      goto LABEL_8;
    }
    int v14 = *a2;
LABEL_23:
    if (v14 != 944987991) {
      return result;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v110, a4, 1, 1, 1);
    std::string::size_type v17 = v110.__r_.__value_.__r.__words[0];
    unsigned int v18 = (std::__shared_weak_count *)*((void *)v6 + 3);
    *((_OWORD *)v6 + 1) = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    if (v18)
    {
      nitro::nitro_function::nitro_function(v18);
      std::string::size_type v13 = *((void *)v6 + 2);
    }
    else
    {
      std::string::size_type v13 = v17;
    }
    if (*(_DWORD *)(v13 + 8) != a4)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v20 = a4;
      unsigned int v21 = exception;
      std::to_string(&v103, v20);
      int v22 = std::string::insert(&v103, 0, "Unexpected size s=");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      long long v24 = std::string::append(&v104, "/blob=");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, *(int *)(*((void *)v6 + 2) + 8));
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v26 = &v102;
      }
      else {
        long long v26 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v102.__r_.__value_.__l.__size_;
      }
      int v28 = std::string::append(&v105, (const std::string::value_type *)v26, size);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v99, " @ ");
      if ((v101 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)&v99;
      }
      else {
        uint64_t v30 = v99;
      }
      if ((v101 & 0x80u) == 0) {
        std::string::size_type v31 = v101;
      }
      else {
        std::string::size_type v31 = v100;
      }
      std::string v32 = std::string::append(&v106, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::string v34 = std::string::append(&v107, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/HXEngine/HXBlobContainer.mm");
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v96, ":");
      if ((v98 & 0x80u) == 0) {
        uint64_t v36 = (const std::string::value_type *)&v96;
      }
      else {
        uint64_t v36 = v96;
      }
      if ((v98 & 0x80u) == 0) {
        std::string::size_type v37 = v98;
      }
      else {
        std::string::size_type v37 = v97;
      }
      long long v38 = std::string::append(&v108, v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v109.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v95, 752);
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v40 = &v95;
      }
      else {
        int v40 = (std::string *)v95.__r_.__value_.__r.__words[0];
      }
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v41 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v41 = v95.__r_.__value_.__l.__size_;
      }
      int v42 = std::string::append(&v109, (const std::string::value_type *)v40, v41);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v21, &v110);
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_83;
  }
  uint64_t v8 = *((void *)a2 + 1);
  if (v8 == 4)
  {
    int v14 = **(_DWORD **)a2;
    goto LABEL_23;
  }
  if (v8 != 10) {
    return result;
  }
  a2 = *(_DWORD **)a2;
LABEL_8:
  if (*(void *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v110, (unint64_t)(int)a4 >> 2, 1, 1, 1);
    std::string::size_type v15 = v110.__r_.__value_.__r.__words[0];
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v6 + 1);
    *(_OWORD *)int v6 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    if (v16)
    {
      nitro::nitro_function::nitro_function(v16);
      std::string::size_type v13 = *(void *)v6;
    }
    else
    {
      std::string::size_type v13 = v15;
    }
    if (a4 != 4 * *(int *)(v13 + 8))
    {
      int v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v45 = a4;
      uint64_t v46 = v44;
      std::to_string(&v103, v45);
      int v47 = std::string::insert(&v103, 0, "Unexpected size s=");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      uint64_t v49 = std::string::append(&v104, "/blob=");
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 4 * *(int *)(*(void *)v6 + 8));
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v51 = &v102;
      }
      else {
        uint64_t v51 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v52 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v52 = v102.__r_.__value_.__l.__size_;
      }
      int v53 = std::string::append(&v105, (const std::string::value_type *)v51, v52);
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v99, " @ ");
      if ((v101 & 0x80u) == 0) {
        int v55 = (const std::string::value_type *)&v99;
      }
      else {
        int v55 = v99;
      }
      if ((v101 & 0x80u) == 0) {
        std::string::size_type v56 = v101;
      }
      else {
        std::string::size_type v56 = v100;
      }
      int v57 = std::string::append(&v106, v55, v56);
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      uint64_t v59 = std::string::append(&v107, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/HXEngine/HXBlobContainer.mm");
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v96, ":");
      if ((v98 & 0x80u) == 0) {
        int v61 = (const std::string::value_type *)&v96;
      }
      else {
        int v61 = v96;
      }
      if ((v98 & 0x80u) == 0) {
        std::string::size_type v62 = v98;
      }
      else {
        std::string::size_type v62 = v97;
      }
      int v63 = std::string::append(&v108, v61, v62);
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v109.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v95, 748);
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v65 = &v95;
      }
      else {
        unsigned int v65 = (std::string *)v95.__r_.__value_.__r.__words[0];
      }
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v66 = v95.__r_.__value_.__l.__size_;
      }
      long long v67 = std::string::append(&v109, (const std::string::value_type *)v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v46, &v110);
      __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_83;
  }
  if (*(void *)a2 == 0x61727478655F7868 && *((_WORD *)a2 + 4) == 26207)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v110, (unint64_t)(int)a4 >> 2, 1, 1, 1);
    std::string::size_type v11 = v110.__r_.__value_.__r.__words[0];
    int v12 = (std::__shared_weak_count *)*((void *)v6 + 5);
    *((_OWORD *)v6 + 2) = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *((void *)v6 + 4);
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a4 != 4 * *(int *)(v13 + 8))
    {
      unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v71 = a4;
      int64_t v72 = v70;
      std::to_string(&v103, v71);
      int v73 = std::string::insert(&v103, 0, "Unexpected size s=");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      vDSP_Length v75 = std::string::append(&v104, "/blob=");
      long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 4 * *(int *)(*((void *)v6 + 4) + 8));
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v77 = &v102;
      }
      else {
        double v77 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v78 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v78 = v102.__r_.__value_.__l.__size_;
      }
      double v79 = std::string::append(&v105, (const std::string::value_type *)v77, v78);
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v99, " @ ");
      if ((v101 & 0x80u) == 0) {
        double v81 = (const std::string::value_type *)&v99;
      }
      else {
        double v81 = v99;
      }
      if ((v101 & 0x80u) == 0) {
        std::string::size_type v82 = v101;
      }
      else {
        std::string::size_type v82 = v100;
      }
      int v83 = std::string::append(&v106, v81, v82);
      long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      unint64_t v85 = std::string::append(&v107, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/HXEngine/HXBlobContainer.mm");
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v96, ":");
      if ((v98 & 0x80u) == 0) {
        uint64_t v87 = (const std::string::value_type *)&v96;
      }
      else {
        uint64_t v87 = v96;
      }
      if ((v98 & 0x80u) == 0) {
        std::string::size_type v88 = v98;
      }
      else {
        std::string::size_type v88 = v97;
      }
      uint64_t v89 = std::string::append(&v108, v87, v88);
      long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v109.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v95, 756);
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v91 = &v95;
      }
      else {
        size_t v91 = (std::string *)v95.__r_.__value_.__r.__words[0];
      }
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v92 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v92 = v95.__r_.__value_.__l.__size_;
      }
      uint64_t v93 = std::string::append(&v109, (const std::string::value_type *)v91, v92);
      long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v72, &v110);
      __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_83:
    uint64_t v69 = *(void **)(v13 + 16);
    return memcpy(v69, a3, a4);
  }
  return result;
}

void sub_19275A6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (v60) {
    __cxa_free_exception(v59);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  std::string v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)std::string v10 = &unk_1EE389840;
  *((void *)v10 + 3) = &unk_1EE36BE30;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  size_t v11 = a3 * (uint64_t)a2 * a4 * a5;
  int v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_19275A9A8(_Unwind_Exception *a1)
{
  unint64_t shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<signed char,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE30;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<signed char,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE30;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<signed char,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389840;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::HXEngine::hx_quantization_converter_helper::get_conv_weights(Espresso::HXEngine::hx_quantization_converter_helper *this, Espresso::generic_convolution_kernel *a2, uint64_t a3)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (*((void *)a2 + 2) && *(void *)a2 && *((void *)a2 + 4) && *((void *)a2 + 6))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 384))(a3);
    int v7 = *(_DWORD *)(v6 + 24);
    vDSP_Length v8 = *(int *)(v6 + 40);
    std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(v43, *(_DWORD *)(*((void *)a2 + 2) + 8), 1, 1, 1);
    uint64_t v9 = v8;
    uint64_t v41 = *(void *)v43;
    *((_OWORD *)this + 3) = *(_OWORD *)v43;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(v43, v8, 1, 1, 1);
    uint64_t v40 = *(void *)v43;
    *((_OWORD *)this + 2) = *(_OWORD *)v43;
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(v43, v8, 1, 1, 1);
    uint64_t v39 = *(void *)v43;
    *((_OWORD *)this + 1) = *(_OWORD *)v43;
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(v43, v8, 1, 1, 1);
    uint64_t v38 = *(void *)v43;
    *(_OWORD *)this = *(_OWORD *)v43;
    uint64_t v11 = *((void *)a2 + 4);
    uint64_t v10 = *((void *)a2 + 5);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)this + 8) = v11;
    *((void *)this + 9) = v10;
    uint64_t v12 = *(void *)(*((void *)a2 + 2) + 16);
    (*(void (**)(int *__return_ptr, uint64_t))(*(void *)a3 + 464))(v43, a3);
    int v13 = v43[3];
    if (v43[3] >= 1)
    {
      int v14 = 0;
      uint64_t v15 = 0;
      int v16 = v43[0];
      int v17 = v43[1];
      int v18 = v43[2];
      int v19 = v43[1] * v43[0] * v43[2];
      do
      {
        if (v18 >= 1)
        {
          for (int i = 0; i < v18; ++i)
          {
            if (v17 >= 1)
            {
              for (int j = 0; j < v17; ++j)
              {
                if (v16 >= 1)
                {
                  uint64_t v22 = 0;
                  do
                  {
                    *(unsigned char *)(*(void *)(v41 + 16) + i + v19 * v14 + ((int)v22 + j * v16) * v43[2]) = *(unsigned char *)(v12 + v15 + v22);
                    int v16 = v43[0];
                    ++v22;
                  }
                  while ((int)v22 < v43[0]);
                  v15 += v22;
                  int v17 = v43[1];
                }
              }
              int v18 = v43[2];
            }
          }
          int v13 = v43[3];
        }
        ++v14;
      }
      while (v14 < v13);
    }
    uint64_t v24 = *((void *)a2 + 6);
    long long v23 = (std::__shared_weak_count *)*((void *)a2 + 7);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v25 = **(float **)(*((void *)a2 + 4) + 16);
    if (v7) {
      float v26 = 0.0;
    }
    else {
      float v26 = 127.0 / v25;
    }
    float __C = 0.0;
    vDSP_maxv(*(const float **)(*(void *)a2 + 16), 1, &__C, v8);
    int v27 = vcvtmd_s64_f64(log2(4096.0 / __C));
    if (v27 >= 20) {
      int v27 = 20;
    }
    if (v27 <= 8) {
      int v28 = 8;
    }
    else {
      int v28 = v27;
    }
    double v29 = ldexp(1.0, v28);
    if ((int)v8 >= 1)
    {
      uint64_t v30 = *(float **)(*(void *)a2 + 16);
      std::string::size_type v31 = *(int **)(v40 + 16);
      std::string v32 = *(_DWORD **)(v39 + 16);
      long long v33 = *(float **)(v24 + 16);
      std::string v34 = *(_DWORD **)(v38 + 16);
      do
      {
        float v35 = *v30++;
        *v31++ = v28;
        *v32++ = vcvtpd_s64_f64(v29 * v35);
        float v36 = *v33++;
        float v37 = v29 * 0.5 + (float)(v26 + v36) * (v29 * v25);
        *v34++ = llroundf(v37);
        --v9;
      }
      while (v9);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (__p)
    {
      unint64_t v45 = __p;
      operator delete(__p);
    }
  }
}

void sub_19275AF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (__p) {
    operator delete(__p);
  }
  Espresso::HXEngine::hx_quantization_converter_helper::conv_hx_weights::~conv_hx_weights(v25);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389C30;
  *((void *)v10 + 3) = &unk_1EE36C070;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  uint64_t v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  uint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_19275B054(_Unwind_Exception *a1)
{
  unint64_t shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389B88;
  *((void *)v10 + 3) = &unk_1EE36C010;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  uint64_t v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  uint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_19275B164(_Unwind_Exception *a1)
{
  unint64_t shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::hx_quantization_converter_helper::conv_hx_weights::~conv_hx_weights(Espresso::HXEngine::hx_quantization_converter_helper::conv_hx_weights *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void Espresso::blob<int,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C010;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<int,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C010;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<int,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<int,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<int,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::blob<unsigned int,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C070;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned int,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C070;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned int,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned int,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389C30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned int,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::HXEngine::hx_quantization_converter_helper::get_pool_weights(Espresso::HXEngine::hx_quantization_converter_helper *this, void *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (*a2 && a2[4])
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v12, 2, 1, 1, 1);
    uint64_t v11 = v12;
    *(_OWORD *)this = v12;
    uint64_t v5 = a2[4];
    uint64_t v4 = a2[5];
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)this + 2) = v5;
    *((void *)this + 3) = v4;
    double v6 = **(float **)(*a2 + 16);
    int v7 = vcvtmd_s64_f64(log2(4096.0 / v6));
    if (v7 >= 20) {
      int v7 = 20;
    }
    if (v7 <= 8) {
      int v8 = 8;
    }
    else {
      int v8 = v7;
    }
    unsigned int v9 = vcvtpd_s64_f64(ldexp(1.0, v8) * v6);
    uint64_t v10 = *(unsigned int **)(v11 + 16);
    unsigned int *v10 = v9;
    v10[1] = v8;
  }
}

void sub_19275B644(_Unwind_Exception *a1)
{
  Espresso::dropout_augment_lowmem::ret_t::~ret_t(v1);
  _Unwind_Resume(a1);
}

void Espresso::get_internal_context(uint64_t **this@<X0>, void *a2@<X8>)
{
  if (!this) {
    goto LABEL_6;
  }
  if (*this != (uint64_t *)0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client((EspressoLight *)this);
LABEL_6:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  uint64_t v4 = this[2];
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
}

void EspressoLight::espresso_plan::add_network(char const*,espresso_storage_type_t,std::shared_ptr<Espresso::net>)::$_0::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void **)(*a1 + 1064);
  if (v2[4] == v2[3])
  {
    if ((***(unsigned int (****)(void))(*v2 + 8))(*(void *)(*v2 + 8)) == 50000
      && (uint64_t v4 = **(unsigned char ***)(v1 + 1064), v4[120])
      && (uint64_t v5 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v4 + 120))(v4),
          [v5 device],
          (id)objc_claimAutoreleasedReturnValue(),
          v5))
    {
      id v6 = v5;
      context_with_args = (uint64_t **)espresso_create_context_with_args(0xC352u, -1);
    }
    else
    {
      id v6 = 0;
      context_with_args = (uint64_t **)espresso_create_context(0xC352u, -3);
    }
    int v8 = context_with_args;
    Espresso::get_internal_context(context_with_args, &v28);
    uint64_t v9 = v28;
    if (!v28) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
    }
    uint64_t v10 = *(uint64_t **)(v1 + 1064);
    uint64_t v12 = *v10;
    uint64_t v11 = (std::__shared_weak_count *)v10[1];
    uint64_t v26 = v12;
    int v27 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 112))(v9, &v26);
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
    int v14 = *(void **)(v1 + 1064);
    uint64_t v15 = v29;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v16 = (std::__shared_weak_count *)v14[1];
    *int v14 = v9;
    v14[1] = v15;
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    *(void *)(*(void *)(v1 + 1064) + 16) = v8;
    if (*(_DWORD *)a1[1])
    {
      int v17 = Espresso::espresso_os_log_subsystem((Espresso *)v16, v13);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1920CB000, v17, OS_LOG_TYPE_DEBUG, "ESPRESSO_ENGINE_METAL_MPS_BUFFERS forcing FP32 compute path.", (uint8_t *)__p, 2u);
      }
    }
    int v18 = (void *)a1[2];
    if (*v18)
    {
      Espresso::reload_network_on_context(v18, *(void *)(v1 + 1064), 0, (uint64_t)__p);
      uint64_t v19 = a1[3];
      unint64_t v20 = *(std::__shared_weak_count **)(v19 + 8);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)__p;
      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, *(char **)a1[4]);
      Espresso::load_network((uint64_t)__p, *(void **)(v1 + 1064), 0, *(unsigned __int8 *)a1[5], (uint64_t *)&v25);
      uint64_t v21 = a1[3];
      uint64_t v22 = *(std::__shared_weak_count **)(v21 + 8);
      *(_OWORD *)uint64_t v21 = v25;
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_19275B93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::espresso_plan_tracer>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<Espresso::tracer>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::unique_ptr<Espresso::tracer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (Espresso::tracer **)**a1;
  if (v2)
  {
    uint64_t v4 = (Espresso::tracer **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<Espresso::tracer>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

Espresso::tracer *std::unique_ptr<Espresso::tracer>::reset[abi:ne180100](Espresso::tracer **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    Espresso::tracer::~tracer(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::espresso_plan_tracer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386E08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::espresso_plan_tracer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t espresso_create_context_with_args(unsigned int a1, int a2)
{
  int v4 = a2;
  unsigned int v5 = a1;
  uint64_t v2 = (void *)MEMORY[0x192FF2020]();
  adjust_espresso_engine((Espresso *)&v5, (char *)&v4);
  if (pre_validate_context(v5)) {
    operator new();
  }
  return 0;
}

void sub_19275BBFC()
{
}

uint64_t EspressoLight::handle_ex_(EspressoLight *this, std::exception *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (const char *)(*(uint64_t (**)(EspressoLight *, std::exception *))(*(void *)this + 16))(this, a2);
  int v4 = strncpy(errbuff, v3, 0x3FFuLL);
  err = 1;
  id v6 = Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = (*(uint64_t (**)(EspressoLight *))(*(void *)this + 16))(this);
    int v11 = 136315138;
    uint64_t v12 = v10;
    _os_log_error_impl(&dword_1920CB000, v6, OS_LOG_TYPE_ERROR, "[Espresso::handle_ex_] exception=%s", (uint8_t *)&v11, 0xCu);
  }

  if (v7) {
    return v7[4];
  }
  if (v9) {
    return (*(uint64_t (**)(void *))(*(void *)v9 + 24))(v9);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C828;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::HXEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C010;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382D10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384718;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C550;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3860B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3860B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void EspressoLight::very_bad_client(EspressoLight *this)
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_fault_impl(&dword_1920CB000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "The client use of the API is invalid and dangerous.", v1, 2u);
  }
}

uint64_t espresso_deinitialize(Espresso::abstract_engine_factory *a1, const char *a2)
{
  if (espresso_initialize_was_called)
  {
    Espresso::abstract_engine_factory::destroy_singleton(a1);
    Espresso::generic_factory_t::destroy_singleton(v2);
    uint64_t result = 0;
    espresso_initialize_was_called = 0;
  }
  else
  {
    int v4 = Espresso::espresso_os_log_subsystem(a1, a2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_error_impl(&dword_1920CB000, v4, OS_LOG_TYPE_ERROR, "espresso_destroy_singletons called without calling espresso_create_singletons first", v5, 2u);
    }

    return 4294967283;
  }
  return result;
}

void EspressoLight::espresso_plan::bind_cvpixelbuffer(void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10)
{
  int v53 = a2;
  id v18 = a6;
  uint64_t v19 = a1[133];
  id v48 = v18;
  if (*(_DWORD *)(v19 + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&__p, *(_DWORD *)(a1[133] + 160));
    long long v43 = std::string::insert(&__p, 0, "Inconsistent phase of espresso_plan: ");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v52);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  unint64_t v20 = (unint64_t)v18;
  EspressoLight::espresso_plan::default_blob_name_if_null(&v52, (void *)v19, a2, 0, a3);
  uint64_t v21 = *(void *)(a1[133] + 24);
  if ((int)a2 >= (unint64_t)((*(void *)(a1[133] + 32) - v21) >> 4))
  {
    unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid network_index.");
    std::runtime_error::runtime_error(v45, &__p);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v45[1].__vftable) = -6;
  }
  uint64_t v22 = (uint64_t *)(v21 + 16 * (int)a2);
  uint64_t v24 = *v22;
  long long v23 = (std::__shared_weak_count *)v22[1];
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v47 = v23;
  if (!v24)
  {
    uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Null network found.");
LABEL_34:
    __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!(a5 | v20) || a5 && v20)
  {
    uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Only one of cvpixelbuffer and tex must be set");
    goto LABEL_34;
  }
  if ((void *)(v24 + 240) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v24 + 232, &v52))
  {
    if ((void *)(v24 + 264) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v24 + 256, &v52))Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Espresso: cvpixelbuffer bind - blob is neither input or output to network"); {
    Espresso::net::get_blob_or_global_with_prefix(v24, &v52, &v49);
    }
    unint64_t v26 = v49;
    if (!v49)
    {
      uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v46, &__p);
      __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v25 = v48;
    if (a8 | a9) {
      goto LABEL_18;
    }
    int v27 = operator new(8uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    *int v27 = a5;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v27 + 1);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v27 + 1);
    int v28 = (*(uint64_t (**)(unint64_t, std::string *))(*(void *)v26 + 160))(v26, &__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (!v28)
    {
LABEL_18:
      uint64_t v30 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1[133] + 144) + 160), a2, &v53);
      std::string::size_type v31 = std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30 + 5, &v52, (uint64_t)&v52);
      std::string v32 = v31;
      long long v33 = v31 + 21;
      unint64_t v34 = (char *)v31[22] - (char *)v31[21];
      if ((int)(v34 >> 4) <= (int)a4)
      {
        std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::resize((char **)v31 + 21, (int)a4 + 1);
        unint64_t v35 = (uint64_t)((v34 << 28) - 0x100000000) >> 32;
        float v36 = v32[21];
        if (v35 < ((char *)v32[22] - (char *)v36) >> 4)
        {
          uint64_t v37 = (16 * v35) | 8;
          do
          {
            uint64_t v38 = *(void **)((char *)v36 + v37);
            uint64_t v39 = &v36[2 * v35];
            uint64_t *v39 = 0;
            v39[1] = 0;

            ++v35;
            float v36 = v32[21];
            v37 += 16;
          }
          while (v35 < ((char *)v32[22] - (char *)v36) >> 4);
        }
      }
      uint64_t v40 = *v33 + 16 * (int)a4;
      *(void *)uint64_t v40 = a5;
      objc_storeStrong((id *)(v40 + 8), a6);
      long long v25 = v48;
    }
    else
    {
      uint64_t v29 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1[133] + 144) + 232), a2, &v53);
      std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>((uint64_t)(v29 + 40), v26, (uint64_t)&v49);
    }
    if (v50) {
      nitro::nitro_function::nitro_function(v50);
    }
  }
  else
  {
    long long v25 = v48;
    (*(void (**)(void *, uint64_t, char *, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t, __int16))(*a1 + 224))(a1, a2, a3, a4, a5, v48, a7, a8, a9, a10);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
}

void sub_19275C754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (int i = (void *)*v11; i; int i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  int v14 = operator new(0x20uLL);
  *int v14 = 0;
  v14[1] = v8;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *int v14 = *v22;
LABEL_38:
    void *v22 = v14;
    goto LABEL_39;
  }
  *int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_19275CADC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  unsigned int v5 = a1[1];
  unint64_t v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        uint8x8_t v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        unsigned int v5 = *v7;
        unint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2)) {
        return v7;
      }
      unint64_t v8 = v7 + 1;
      unsigned int v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    int v11 = (char *)operator new(0xC0uLL);
    v21[0] = v11;
    v21[1] = v6;
    char v22 = 0;
    uint64_t v12 = (std::string *)(v11 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v11 + 6) = *(void *)(a3 + 16);
    }
    *((void *)v11 + 16) = 0;
    *((void *)v11 + 17) = 0;
    *((_DWORD *)v11 + 14) = 1065353216;
    *(void *)(v11 + 76) = 0;
    *(void *)(v11 + 68) = 0;
    *((_DWORD *)v11 + 21) = 0;
    *(void *)(v11 + 60) = 0x100000000;
    *((void *)v11 + 14) = 0;
    *((void *)v11 + 15) = 0;
    *((void *)v11 + 11) = 0;
    *((void *)v11 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((void *)v11 + 13) = _D0;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 11) = 0u;
    char v22 = 1;
    *(void *)int v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v7;
    std::string *v8 = (uint64_t *)v11;
    unint64_t v18 = (uint64_t *)v11;
    unint64_t v19 = (uint64_t *)**a1;
    if (v19)
    {
      *a1 = v19;
      unint64_t v18 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v21[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v21);
  }
  return (uint64_t **)v11;
}

void sub_19275CC60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::resize(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  int v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      for (int i = &v3[16 * a2]; v4 != i; v4 -= 16)

      a1[1] = i;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    unint64_t v7 = a1[2];
    if (a2 - v5 <= (v7 - v4) >> 4)
    {
      bzero(a1[1], 16 * v6);
      a1[1] = &v4[16 * v6];
    }
    else
    {
      if (a2 >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = v7 - v3;
      uint64_t v9 = v8 >> 3;
      if (v8 >> 3 <= a2) {
        uint64_t v9 = a2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[16 * v5];
      int v14 = &v11[16 * v13];
      bzero(v12, 16 * v6);
      float v15 = &v12[16 * v6];
      BOOL v17 = *a1;
      unint64_t v16 = (unint64_t)a1[1];
      if ((char *)v16 == *a1)
      {
        int64x2_t v19 = vdupq_n_s64(v16);
      }
      else
      {
        do
        {
          long long v18 = *(_OWORD *)(v16 - 16);
          v16 -= 16;
          *(void *)(v16 + 8) = 0;
          *((_OWORD *)v12 - 1) = v18;
          v12 -= 16;
        }
        while ((char *)v16 != v17);
        int64x2_t v19 = *(int64x2_t *)a1;
      }
      *a1 = v12;
      a1[1] = v15;
      a1[2] = v14;
      uint64_t v21 = v19.i64[1];
      char v22 = (void *)v19.i64[0];
      if (v19.i64[1] != v19.i64[0])
      {
        do
        {
          unint64_t v23 = (void *)(v21 - 16);

          uint64_t v21 = (uint64_t)v23;
        }
        while (v23 != v22);
      }
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>,0>(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 136);
  std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    int v4 = (id *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 2;

        int v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void EspressoLight::espresso_plan::bind_input_cvpixelbuffer(uint64_t a1, int a2, char *a3, int a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned __int8 a11)
{
  int v85 = a2;
  unint64_t v18 = a6;
  uint64_t v19 = *(void *)(a1 + 1064);
  if (*(_DWORD *)(v19 + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v83, *(_DWORD *)(*(void *)(a1 + 1064) + 160));
    int v63 = std::string::insert(&v83, 0, "Inconsistent phase of espresso_plan: ");
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v84);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v84, (void *)v19, a2, 0, a3);
  uint64_t v20 = *(void *)(*(void *)(a1 + 1064) + 24);
  if (a2 >= (unint64_t)((*(void *)(*(void *)(a1 + 1064) + 32) - v20) >> 4))
  {
    unsigned int v65 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v83, "Invalid network_index.");
    std::runtime_error::runtime_error(v65, &v83);
    v65->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v65[1].__vftable) = -6;
  }
  uint64_t v21 = (uint64_t *)(v20 + 16 * a2);
  uint64_t v23 = *v21;
  char v22 = (std::__shared_weak_count *)v21[1];
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v23)
  {
    uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Null network found.");
LABEL_57:
    __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!(a5 | v18) || a5 && v18)
  {
    uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Only one of cvpixelbuffer and tex must be set");
    goto LABEL_57;
  }
  int v78 = a4;
  Espresso::net::get_blob_or_global_with_prefix(v23, &v84, &v81);
  uint64_t v79 = a5;
  obint j = a6;
  unint64_t v24 = v81;
  if (!v81)
  {
    std::string::size_type v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v66, &v83);
    __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v25 = a9;
  long long v80 = 0uLL;
  if (a8)
  {
    int v77 = *(unsigned __int8 *)(a8 + 16);
    float v26 = *(float *)(a8 + 12);
    unsigned int v75 = *(_DWORD *)(a8 + 8);
    int v27 = *(uint64_t **)a8;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v23 + 336), &v84))
    {
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
      int v28 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v23 + 328), &v84, (uint64_t)&std::piecewise_construct, (long long **)&v83)+ 32);
    }
    else
    {
      int v28 = 0;
    }
    unsigned int v33 = v75;
    goto LABEL_22;
  }
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v23 + 336), &v84))
  {
    int v77 = 0;
    int v28 = 0;
    int v27 = 0;
    float v26 = 1.0;
    unsigned int v33 = 0;
LABEL_22:
    uint64_t v73 = 0;
    int v70 = 0;
    if (a10) {
      int v31 = 1;
    }
    else {
      int v31 = v28;
    }
    int64_t v72 = 0;
    unint64_t v71 = (uint64_t *)v33;
    __asm { FMOV            V10.2S, #1.0 }
    int v76 = 1;
    goto LABEL_26;
  }
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
  uint64_t v29 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v23 + 328), &v84, (uint64_t)&std::piecewise_construct, (long long **)&v83);
  float v26 = *((float *)v29 + 14);
  int v76 = *((_DWORD *)v29 + 16);
  int v77 = *((_DWORD *)v29 + 17);
  int v27 = (uint64_t *)*((void *)v29 + 9);
  long long v80 = *(_OWORD *)(v29 + 88);
  _D10 = (uint64_t *)*((void *)v29 + 13);
  unint64_t v71 = (uint64_t *)*((void *)v29 + 10);
  int64_t v72 = (uint64_t *)*((void *)v29 + 14);
  if (a10) {
    int v31 = 1;
  }
  else {
    int v31 = *((_DWORD *)v29 + 32);
  }
  LODWORD(v73) = *((_DWORD *)v29 + 30);
  HIDWORD(v73) = *((_DWORD *)v29 + 15);
  if (*((_DWORD *)v29 + 31))
  {
    int v70 = *((_DWORD *)v29 + 31);
    if (a9)
    {
      std::string v32 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v83, "Image pre-processing were pre-compiled, cannot change them now");
      std::runtime_error::runtime_error(v32, &v83);
      v32->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
      LODWORD(v32[1].__vftable) = -6;
    }
  }
  else
  {
    int v70 = 0;
  }
LABEL_26:
  if (!(a8 | a9))
  {
    long long v43 = operator new(8uLL);
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    void *v43 = v79;
    v83.__r_.__value_.__l.__size_ = (std::string::size_type)(v43 + 1);
    v83.__r_.__value_.__r.__words[2] = (std::string::size_type)(v43 + 1);
    int v44 = (*(uint64_t (**)(unint64_t, std::string *))(*(void *)v24 + 160))(v24, &v83);
    if (v83.__r_.__value_.__r.__words[0])
    {
      v83.__r_.__value_.__l.__size_ = v83.__r_.__value_.__r.__words[0];
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (v44)
    {
      unint64_t v45 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*(void *)(a1 + 1064) + 144) + 232), a2, &v85);
      std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>((uint64_t)(v45 + 40), v24, (uint64_t)&v81);
      goto LABEL_44;
    }
    long long v68 = v22;
    unint64_t v69 = v18;
    int v41 = 0;
    BOOL v39 = 0;
    BOOL v40 = 0;
    int v25 = 0;
    int v42 = 0;
    int8x16_t v67 = 0u;
    goto LABEL_37;
  }
  long long v68 = v22;
  unint64_t v69 = v18;
  if (a9)
  {
    int8x16_t v38 = *(int8x16_t *)(a9 + 20);
    BOOL v39 = *(_DWORD *)(a9 + 8) != 0;
    BOOL v40 = *(_DWORD *)(a9 + 12) != 0;
    int v41 = *(_DWORD *)a9;
    int v42 = *(_DWORD *)(a9 + 4);
    int v25 = *(_DWORD *)(a9 + 16);
  }
  else
  {
    int v42 = 0;
    BOOL v40 = 0;
    BOOL v39 = 0;
    int v41 = 0;
    int8x16_t v38 = 0uLL;
  }
  int8x16_t v67 = vextq_s8(v38, v38, 8uLL);
  if (!a8)
  {
LABEL_37:
    _ZF = ((std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v23 + 336), &v84) == 0) & a11) == 0;
    int v46 = v77;
    int v47 = v76;
    if (!_ZF) {
      int v46 = v76;
    }
    goto LABEL_39;
  }
  int v46 = v77;
  int v47 = v76;
LABEL_39:
  id v48 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*(void *)(a1 + 1064) + 144) + 136), a2, &v85);
  unint64_t v49 = std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48 + 5, &v84, (uint64_t)&v84);
  long long v50 = v49;
  *((float *)v49 + 14) = v26;
  *((_DWORD *)v49 + 15) = HIDWORD(v73);
  *((_DWORD *)v49 + 16) = v47;
  *((_DWORD *)v49 + 17) = v46;
  v49[9] = v27;
  v49[10] = v71;
  *(_OWORD *)(v49 + 11) = v80;
  v49[13] = _D10;
  v49[14] = v72;
  *((_DWORD *)v49 + 30) = v73;
  *((_DWORD *)v49 + 31) = v70;
  *((_DWORD *)v49 + 32) = v31;
  *((_DWORD *)v49 + 34) = v41;
  *((unsigned char *)v49 + 140) = v39;
  *((unsigned char *)v49 + 141) = v40;
  uint64_t v51 = v49[21];
  std::string v52 = v49[22];
  int v53 = v49 + 21;
  *((_DWORD *)v49 + 36) = v42;
  *((_DWORD *)v49 + 37) = v25;
  int64_t v54 = (char *)v52 - (char *)v51;
  *(int8x16_t *)(v49 + 19) = v67;
  char v22 = v68;
  unint64_t v18 = v69;
  if ((int)((unint64_t)((char *)v52 - (char *)v51) >> 4) <= v78)
  {
    std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::resize((char **)v49 + 21, v78 + 1);
    unint64_t v55 = ((v54 << 28) - 0x100000000) >> 32;
    std::string::size_type v56 = v50[21];
    if (v55 < ((char *)v50[22] - (char *)v56) >> 4)
    {
      uint64_t v57 = (16 * v55) | 8;
      do
      {
        long long v58 = *(void **)((char *)v56 + v57);
        uint64_t v59 = &v56[2 * v55];
        uint64_t *v59 = 0;
        v59[1] = 0;

        ++v55;
        std::string::size_type v56 = v50[21];
        v57 += 16;
      }
      while (v55 < ((char *)v50[22] - (char *)v56) >> 4);
    }
  }
  uint64_t v60 = *v53 + 16 * v78;
  *(void *)uint64_t v60 = v79;
  objc_storeStrong((id *)(v60 + 8), obj);
LABEL_44:
  if (v82) {
    nitro::nitro_function::nitro_function(v82);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
}

void sub_19275D634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      if (a29) {
        nitro::nitro_function::nitro_function(a29);
      }
      if (a12) {
        nitro::nitro_function::nitro_function(a12);
      }
      if (*(char *)(v37 - 137) < 0) {
        operator delete(*(void **)(v37 - 160));
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

uint64_t EspressoLight::espresso_plan::bind_direct_cvpixelbuffer(EspressoLight::espresso_plan *this, int a2, char *a3, __CVBuffer *a4)
{
  int v28 = a2;
  uint64_t v6 = *((void *)this + 133);
  if (*(_DWORD *)(v6 + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&__p, *(_DWORD *)(*((void *)this + 133) + 160));
    uint64_t v19 = std::string::insert(&__p, 0, "Inconsistent phase of espresso_plan: ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v27);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v27, (void *)v6, a2, 0, a3);
  uint64_t v8 = *(void *)(*((void *)this + 133) + 24);
  if (a2 >= (unint64_t)((*(void *)(*((void *)this + 133) + 32) - v8) >> 4))
  {
    uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid network_index.");
    std::runtime_error::runtime_error(v21, &__p);
    v21->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v21[1].__vftable) = -6;
  }
  uint64_t v9 = (uint64_t *)(v8 + 16 * a2);
  uint64_t v10 = *v9;
  int v11 = (std::__shared_weak_count *)v9[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10)
  {
    char v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Null network found.");
    goto LABEL_24;
  }
  if (!a4)
  {
    char v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Pixel buffer must not be null.");
LABEL_24:
    __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  Espresso::net::get_blob_or_global_with_prefix(v10, &v27, &v24);
  unint64_t v12 = v24;
  if (!v24)
  {
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v23, &__p);
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v13 = operator new(8uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  void *v13 = a4;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v13 + 1);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v13 + 1);
  char v14 = (*(uint64_t (**)(unint64_t, std::string *))(*(void *)v12 + 160))(v12, &__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14)
  {
    float v15 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)this + 133) + 144) + 232), a2, &v28);
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>((uint64_t)(v15 + 40), v12, (uint64_t)&v24);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 4294967290;
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_19275DAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void EspressoLight::espresso_plan::bind_input_vimagebuffer_argb8()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented.");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19275DC50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::bind_input_vimagebuffer_XYZA8(uint64_t a1, int a2, char *a3, int a4, void *a5, int a6, uint64_t a7, int a8)
{
  v86[0] = a2;
  uint64_t v10 = *(void *)(a1 + 1064);
  if (*(_DWORD *)(v10 + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v84, *(_DWORD *)(*(void *)(a1 + 1064) + 160));
    std::string v52 = std::string::insert(&v84, 0, "Inconsistent phase of espresso_plan: ");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v85);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v85, (void *)v10, a2, 0, a3);
  uint64_t v16 = *(void *)(*(void *)(a1 + 1064) + 24);
  if (a2 >= (unint64_t)((*(void *)(*(void *)(a1 + 1064) + 32) - v16) >> 4))
  {
    int64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v84, "Invalid network_index.");
    std::runtime_error::runtime_error(v54, &v84);
    v54->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v54[1].__vftable) = -6;
  }
  BOOL v17 = (uint64_t *)(v16 + 16 * a2);
  uint64_t v19 = *v17;
  unint64_t v18 = (std::__shared_weak_count *)v17[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v77 = v18;
  if (!v19)
  {
    unint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Null network found.");
    goto LABEL_43;
  }
  if (!a5)
  {
    unint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Null image buffer");
    goto LABEL_43;
  }
  if (!*a5)
  {
    unint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Null image buffer data");
LABEL_43:
    __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  Espresso::net::get_blob_or_global_with_prefix(v19, &v85, &v82);
  uint64_t v20 = v82;
  if (!v82)
  {
    std::string::size_type v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v56, &v84);
    __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a5[2] != *(_DWORD *)(v82 + 8))
  {
    uint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v79, *(_DWORD *)(v20 + 8));
    long long v58 = std::string::insert(&v79, 0, "Invalid X-dimension ");
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    uint64_t v60 = std::string::append(&v80, "/");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v78, a5[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v62 = &v78;
    }
    else {
      std::string::size_type v62 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v78.__r_.__value_.__l.__size_;
    }
    long long v64 = std::string::append(&v81, (const std::string::value_type *)v62, size);
    long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v57, &v84);
    v57->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v57[1].__vftable) = -7;
  }
  if (a5[1] != *(_DWORD *)(v82 + 12))
  {
    std::string::size_type v66 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v79, *(_DWORD *)(v20 + 12));
    int8x16_t v67 = std::string::insert(&v79, 0, "Invalid Y-dimension ");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    unint64_t v69 = std::string::append(&v80, "/");
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v78, a5[1]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v71 = &v78;
    }
    else {
      unint64_t v71 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v72 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v72 = v78.__r_.__value_.__l.__size_;
    }
    uint64_t v73 = std::string::append(&v81, (const std::string::value_type *)v71, v72);
    long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v66, &v84);
    v66->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v66[1].__vftable) = -7;
  }
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = 0uLL;
  int v76 = a4;
  if (a7)
  {
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    int v24 = *(unsigned __int8 *)(a7 + 16);
    float v25 = *(float *)(a7 + 8);
    float v26 = *(float *)(a7 + 12);
    unsigned int v75 = 0;
    int v27 = 1;
    __asm { FMOV            V9.2S, #1.0 }
    unsigned int v33 = 0;
    float v34 = *(float *)a7;
    int v35 = *(_DWORD *)(a7 + 4);
  }
  else if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v19 + 336), &v85))
  {
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
    float v36 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 328), &v85, (uint64_t)&std::piecewise_construct, (long long **)&v81);
    float v26 = *((float *)v36 + 14);
    int v23 = *((_DWORD *)v36 + 15);
    int v27 = *((_DWORD *)v36 + 16);
    int v24 = *((_DWORD *)v36 + 17);
    float v34 = *((float *)v36 + 18);
    int v35 = *((_DWORD *)v36 + 19);
    float v25 = *((float *)v36 + 20);
    int v21 = *((_DWORD *)v36 + 21);
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)(v36 + 88);
    _D9 = (uint64_t *)*((void *)v36 + 13);
    unsigned int v33 = (uint64_t *)*((void *)v36 + 14);
    unsigned int v75 = (uint64_t *)*((void *)v36 + 15);
    int v22 = *((_DWORD *)v36 + 32);
  }
  else
  {
    int v21 = 0;
    int v24 = 0;
    int v22 = 0;
    int v23 = 0;
    unsigned int v75 = 0;
    float v26 = 1.0;
    int v27 = 1;
    __asm { FMOV            V9.2S, #1.0 }
    unsigned int v33 = 0;
    float v34 = 0.0;
    int v35 = 0;
    float v25 = 0.0;
  }
  if (a6 < 2) {
    int v37 = 1;
  }
  else {
    int v37 = a8;
  }
  if (a6 < 2) {
    a8 = v27;
  }
  if (v37) {
    float v38 = v34;
  }
  else {
    float v38 = v25;
  }
  if (v37) {
    float v39 = v25;
  }
  else {
    float v39 = v34;
  }
  BOOL v40 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*(void *)(a1 + 1064) + 144) + 112), a2, v86);
  int v41 = std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40 + 5, &v85, (uint64_t)&v85);
  int v42 = v41[18];
  *((_DWORD *)v41 + 34) = a6;
  *((float *)v41 + 14) = v26;
  *((_DWORD *)v41 + 15) = v23;
  *((_DWORD *)v41 + 16) = a8;
  *((_DWORD *)v41 + 17) = v24;
  *((float *)v41 + 18) = v38;
  *((_DWORD *)v41 + 19) = v35;
  *((float *)v41 + 20) = v39;
  *((_DWORD *)v41 + 21) = v21;
  *(_OWORD *)(v41 + 11) = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
  v41[13] = _D9;
  v41[14] = v33;
  v41[15] = v75;
  *((_DWORD *)v41 + 32) = v22;
  uint64_t v43 = (char *)v41[19] - (char *)v42;
  if ((int)((unint64_t)v43 >> 5) <= v76)
  {
    std::vector<vImage_Buffer>::resize((char **)v41 + 18, v76 + 1);
    int v42 = v41[18];
    unint64_t v44 = ((char *)v41[19] - (char *)v42) >> 5;
    if (v44 > (int)((unint64_t)v43 >> 5))
    {
      uint64_t v45 = (int)(v43 >> 5);
      uint64_t v46 = v44 - v45;
      uint64_t v47 = 4 * v45;
      do
      {
        id v48 = &v42[v47];
        *(_OWORD *)id v48 = 0uLL;
        *((_OWORD *)v48 + 1) = 0uLL;
        v47 += 4;
        --v46;
      }
      while (v46);
    }
  }
  unint64_t v49 = &v42[4 * v76];
  long long v50 = *((_OWORD *)a5 + 1);
  *(_OWORD *)unint64_t v49 = *(_OWORD *)a5;
  *((_OWORD *)v49 + 1) = v50;
  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }
  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
}

void sub_19275E370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v46 & 1) == 0)
    {
LABEL_14:
      if (a40) {
        nitro::nitro_function::nitro_function(a40);
      }
      if (a12) {
        nitro::nitro_function::nitro_function(a12);
      }
      if (*(char *)(v48 - 153) < 0) {
        operator delete(*(void **)(v48 - 176));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v47);
  goto LABEL_14;
}

uint64_t **std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  unint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2)) {
        return v7;
      }
      uint64_t v8 = v7 + 1;
      unint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    int v11 = (char *)operator new(0xA8uLL);
    v21[0] = v11;
    v21[1] = v6;
    char v22 = 0;
    unint64_t v12 = (std::string *)(v11 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v11 + 6) = *(void *)(a3 + 16);
    }
    *((void *)v11 + 16) = 0;
    *((void *)v11 + 17) = 0;
    *((_DWORD *)v11 + 14) = 1065353216;
    *(void *)(v11 + 76) = 0;
    *(void *)(v11 + 68) = 0;
    *((_DWORD *)v11 + 21) = 0;
    *(void *)(v11 + 60) = 0x100000000;
    *((void *)v11 + 14) = 0;
    *((void *)v11 + 15) = 0;
    *((void *)v11 + 11) = 0;
    *((void *)v11 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((void *)v11 + 13) = _D0;
    *((void *)v11 + 19) = 0;
    *((void *)v11 + 20) = 0;
    *((void *)v11 + 18) = 0;
    char v22 = 1;
    *(void *)int v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v7;
    std::string *v8 = (uint64_t *)v11;
    unint64_t v18 = (uint64_t *)v11;
    uint64_t v19 = (uint64_t *)**a1;
    if (v19)
    {
      *a1 = v19;
      unint64_t v18 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v21[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>>>>::reset[abi:ne180100]((uint64_t)v21);
  }
  return (uint64_t **)v11;
}

void sub_19275E6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<vImage_Buffer>::resize(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  int v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v19 = &v3[32 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 5)
  {
    bzero(a1[1], 32 * v6);
    uint64_t v19 = &v4[32 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 4;
  if (v8 >> 4 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v10);
  unint64_t v12 = &v11[32 * v5];
  char v14 = &v11[32 * v13];
  bzero(v12, 32 * v6);
  float v15 = &v12[32 * v6];
  BOOL v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      long long v18 = *((_OWORD *)v16 - 1);
      *((_OWORD *)v12 - 2) = *((_OWORD *)v16 - 2);
      *((_OWORD *)v12 - 1) = v18;
      v12 -= 32;
      v16 -= 32;
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_image_buffers>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_image_buffers>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void EspressoLight::espresso_plan::submit(EspressoLight::espresso_plan *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void (***v15)(long long *__return_ptr, void, uint64_t, uint64_t);
  void (***v16)(long long *__return_ptr, void, uint64_t, uint64_t);
  std::__shared_weak_count *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t (***v38)(void);
  unsigned int v39;
  uint64_t *v40;
  uint64_t *v41;
  const void *v42;
  std::__shared_weak_count *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id *v51;
  id *v52;
  id v53;
  uint64_t **i;
  std::__shared_weak_count *v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  EspressoLight::espresso_plan *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  void *v69;
  uint64_t v70;
  long long v71;
  long long v72;
  uint64_t v73;
  void *v74;
  std::runtime_error *v75;
  std::runtime_error *exception;
  std::string *v77;
  long long v78;
  void *v79;
  std::__shared_weak_count *v80;
  void *v81;
  EspressoLight::espresso_plan *v82;
  id v83;
  id v84;
  unsigned char __lk[72];
  void *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89[2];
  long long v90;
  uint64_t v91;
  uint64_t v92;
  long long v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void v96[12];
  uint64_t vars8;

  v96[9] = *MEMORY[0x1E4F143B8];
  std::string v83 = a2;
  std::string v84 = a5;
  if ((***(unsigned int (****)(void))(**((void **)a1 + 133) + 8))() == 10007
    || (unint64_t v7 = *(unsigned int (****)(void))(**((void **)a1 + 133) + 8), (**v7)(v7) == 10006))
  {
    id v8 = v83;
    id v9 = v84;
    uint64_t v10 = *((void *)a1 + 133);
    int v11 = *(_DWORD *)(v10 + 160);
    std::string v81 = v9;
    std::string v79 = v8;
    if (v11 != 1) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v11);
    }
    if (!v9) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("A client cannot determine when the data is ready without the callback.");
    }
    unint64_t v12 = *(uint64_t **)(v10 + 24);
    if (*(uint64_t **)(v10 + 32) == v12) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Plan is empty");
    }
    uint64_t v13 = *v12;
    char v14 = *(const void **)(*v12 + 16);
    if (!v14
    {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The Engine must be ANE_RUNTIME");
    }
    uint64_t v16 = v15;
    BOOL v17 = *(std::__shared_weak_count **)(v13 + 24);
    long long v18 = (void *)v10;
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v18 = (void *)*((void *)a1 + 133);
    }
    uint64_t v19 = v18[25];
    if (!v19)
    {
      EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::set_n_async_buffers((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(v18 + 24), 2uLL);
      long long v18 = (void *)*((void *)a1 + 133);
      uint64_t v19 = v18[25];
    }
    uint64_t v20 = v18[18];
    LOBYTE(v96[0]) = *(unsigned char *)(**(void **)(v10 + 24) + 1352);
    memset((char *)v96 + 4, 0, 68);
    if (LOBYTE(v96[0]))
    {
      v96[1] = v20;
      v96[2] = v19;
      v96[3] = 0;
      v96[4] = 0;
      v96[5] = v20;
      v96[6] = v19;
      v96[7] = 0;
      v96[8] = 0;
      HIDWORD(v96[0]) = 723714160;
      kdebug_trace();
    }
    (**v16)(&v90, v16, v20, v19);
    int v21 = *(void **)(v10 + 24);
    (*(void (**)(void, void))(*(void *)v90 + 48))(v90, *v21);
    char v22 = *((void *)a1 + 133);
    *(void *)__luint64_t k = v22 + 208;
    __lk[8] = 1;
    std::mutex::lock((std::mutex *)(v22 + 208));
    while (1)
    {
      int v23 = *(unint64_t **)(v22 + 320);
      int v24 = *(void *)(v22 + 328) - (void)v23;
      if (v24)
      {
        float v25 = v24 >> 3;
        if ((unint64_t)(v24 >> 3) <= 1) {
          float v26 = 1;
        }
        else {
          float v26 = v24 >> 3;
        }
        int v27 = *v23;
        if (*v23)
        {
          int v27 = 0;
          int v28 = v26 - 1;
          while (v28 != v27)
          {
            if (!v23[++v27])
            {
              uint64_t v30 = v27 < v25;
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v30 = 1;
LABEL_25:
          int v31 = *(void *)(v22 + 376);
          *(void *)(v22 + 376) = v31 + 1;
          v23[(int)v27] = v31;
          ++*(void *)(v22 + 368);
          if (v30)
          {
            std::string v80 = v17;
            std::string v32 = (int)v27;
            if (__lk[8]) {
              std::mutex::unlock(*(std::mutex **)__lk);
            }
            unsigned int v33 = v90;
            *(void *)(v90 + 80) = v32;
            *(void *)(v33 + 88) = v31;
            float v34 = *((void *)a1 + 133);
            int v35 = *(void *)(v34 + 144);
            float v36 = *(std::__shared_weak_count **)(v34 + 152);
            long long v94 = v35;
            std::string v95 = v36;
            *(void *)(v34 + 144) = 0;
            *(void *)(v34 + 152) = 0;
            EspressoLight::espresso_plan::create_binding_task(a1);
            int v37 = *v21;
            float v38 = *(uint64_t (****)(void))(*(void *)(*v21 + 16) + 8);
            uint64_t v82 = a1;
            float v39 = (**v38)(v38);
            BOOL v40 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(v37 + 528), v39);
            if (v40)
            {
              int v41 = v40;
              int v42 = (const void *)v40[3];
              uint64_t v43 = (std::__shared_weak_count *)v41[4];
              if (v43) {
                atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v42)
              {
                if (v44)
                {
                  uint64_t v45 = (uint64_t)v44;
                  if (v43)
                  {
                    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
                    nitro::nitro_function::nitro_function(v43);
                  }
                  uint64_t v47 = *(void *)(v45 + 408);
                  int v46 = *(void *)(v45 + 416);
                  if (v46 != v47)
                  {
                    uint64_t v48 = 0;
                    unint64_t v49 = *(void *)(*((void *)a1 + 133) + 200);
                    do
                    {
                      long long v50 = *(void *)(v47 + 8 * v48);
                      std::string v52 = *(id **)(v50 + 216);
                      uint64_t v51 = *(id **)(v50 + 224);
                      if (v52 != v51)
                      {
                        do
                        {
                          long long v53 = *v52;
                          [v53 resizeForMultipleAsyncBuffers:v49];

                          ++v52;
                        }
                        while (v52 != v51);
                        uint64_t v47 = *(void *)(v45 + 408);
                        int v46 = *(void *)(v45 + 416);
                      }
                      ++v48;
                    }
                    while (v48 < (v46 - v47) >> 3);
                  }
                  *(_DWORD *)__luint64_t k = 0;
                  for (int i = (uint64_t **)*((void *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v35 + 232), 0, __lk)+ 7); i; int i = (uint64_t **)*i)
                    (*(void (**)(uint64_t *, long long *))(*i[2] + 168))(i[2], &v90);
                  *(void *)&uint64_t v93 = v35;
                  *((void *)&v93 + 1) = v36;
                  if (v36) {
                    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  unint64_t v55 = (std::__shared_weak_count *)v21[1];
                  v89[0] = *v21;
                  v89[1] = (uint64_t)v55;
                  if (v55) {
                    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  EspressoLight::espresso_plan::__copy_inputs((uint64_t *)&v93, (uint64_t)&v90, 0, v89);
                  if (v55) {
                    nitro::nitro_function::nitro_function(v55);
                  }
                  if (v36) {
                    nitro::nitro_function::nitro_function(v36);
                  }
                  std::string::size_type v56 = *(void **)(*((void *)v82 + 133) + 192);
                  *(void *)__luint64_t k = MEMORY[0x1E4F143A8];
                  *(void *)&__lk[8] = 3321888768;
                  *(void *)&__lk[16] = ___ZN13EspressoLight13espresso_plan10submit_aneEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvP21espresso_error_info_tE_block_invoke;
                  *(void *)&__lk[24] = &unk_1EE38F2D8;
                  *(void *)&__lk[48] = v82;
                  *(_OWORD *)&__lk[56] = v90;
                  if (*((void *)&v90 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v90 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  long long v86 = v21;
                  uint64_t v87 = v35;
                  std::string::size_type v88 = v36;
                  if (v36) {
                    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v57 = v79;
                  *(void *)&__lk[32] = v57;
                  long long v58 = v81;
                  *(void *)&__lk[40] = v58;
                  Espresso::ANERuntimeEngine::compiler::forward_single_ane_segment(v45, (uint64_t *)&v90, v56, __lk);

                  if (v88) {
                    nitro::nitro_function::nitro_function(v88);
                  }
                  if (*(void *)&__lk[64]) {
                    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__lk[64]);
                  }
                  if (v43) {
                    nitro::nitro_function::nitro_function(v43);
                  }
                  if (v36) {
                    nitro::nitro_function::nitro_function(v36);
                  }
                  if (*((void *)&v90 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v90 + 1));
                  }
                  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v96);
                  if (v80) {
                    nitro::nitro_function::nitro_function(v80);
                  }

                  goto LABEL_89;
                }
              }
              if (v43) {
                nitro::nitro_function::nitro_function(v43);
              }
            }
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network missing compiler");
          }
        }
      }
      std::condition_variable::wait((std::condition_variable *)(v22 + 272), (std::unique_lock<std::mutex> *)__lk);
    }
  }
  long long v59 = v83;
  uint64_t v60 = v84;
  long long v61 = a1;
  std::string::size_type v62 = *((void *)a1 + 133);
  if (*(_DWORD *)(v62 + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string((std::string *)v96, *(_DWORD *)(*((void *)v61 + 133) + 160));
    int v77 = std::string::insert((std::string *)v96, 0, "Inconsistent phase of espresso_plan: ");
    std::string v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
    *(void *)&__lk[16] = *((void *)&v77->__r_.__value_.__l + 2);
    *(_OWORD *)__luint64_t k = v78;
    v77->__r_.__value_.__l.__size_ = 0;
    v77->__r_.__value_.__r.__words[2] = 0;
    v77->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)__lk);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  int v63 = **(void **)(v62 + 24);
  long long v65 = *(const void **)(v63 + 16);
  long long v64 = *(std::__shared_weak_count **)(v63 + 24);
  if (v64)
  {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v66 = *((void *)v61 + 133);
    int v63 = **(void **)(v62 + 24);
  }
  else
  {
    std::string::size_type v66 = v62;
  }
  int8x16_t v67 = *(void *)(v66 + 144);
  long long v68 = *(unsigned __int8 *)(v63 + 1352);
  __lk[0] = v68;
  memset(&__lk[4], 0, 68);
  if (v68)
  {
    *(void *)&__lk[8] = v67;
    memset(&__lk[16], 0, 24);
    *(void *)&__lk[40] = v67;
    memset(&__lk[48], 0, 24);
    *(_DWORD *)&__lk[4] = 723714160;
    kdebug_trace();
  }
  if (!v65
  {
    unsigned int v75 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v96, "submit with arguments requires context_metal");
    std::runtime_error::runtime_error(v75, (const std::string *)v96);
    v75->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v75[1].__vftable) = -1;
  }
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v69 + 168))(&v94);
  (*(void (**)(uint64_t, void))(*(void *)v94 + 48))(v94, **(void **)(v62 + 24));
  long long v70 = *((void *)v61 + 133);
  uint64_t v93 = *(_OWORD *)(v70 + 144);
  unint64_t v71 = v93;
  *(void *)(v70 + 144) = 0;
  *(void *)(v70 + 152) = 0;
  std::string::size_type v72 = v71;
  EspressoLight::espresso_plan::create_binding_task(v61);
  EspressoLight::espresso_plan::dispatch_task_on_compute_batch((uint64_t)v61, &v94, (uint64_t ***)&v93);
  long long v90 = v72;
  if (*((void *)&v72 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v73 = MEMORY[0x192FF2250](v60);
  std::string::size_type v92 = v67;
  v96[3] = 0;
  long long v74 = operator new(0x28uLL);
  *long long v74 = &unk_1EE379C50;
  v74[1] = v72;
  size_t v91 = 0;
  long long v90 = 0uLL;
  v74[2] = *((void *)&v72 + 1);
  v74[3] = v73;
  v74[4] = v67;
  v96[3] = v74;
  (*(void (**)(const void *, uint64_t *, id, void *))(*(void *)v65 + 8))(v65, &v94, v59, v96);
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100](v96);
  kdebug_trace();
  (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
  if (*((void *)&v72 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v72 + 1));
  }
  if (v95) {
    nitro::nitro_function::nitro_function(v95);
  }
  if (v64)
  {
    nitro::nitro_function::nitro_function(v64);
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)__lk);
    nitro::nitro_function::nitro_function(v64);
  }
  else
  {
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)__lk);
  }

LABEL_89:
}

void sub_19275F364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, void *a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v39 - 153) < 0)
  {
    operator delete(*(void **)(v39 - 176));
    if ((v35 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void sub_19275F504()
{
}

void sub_19275F514(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (v31) {
    nitro::nitro_function::nitro_function();
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::prepare_for_done_to_async_batch((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(*(void *)(a13 + 1064)+ 192), *(void *)(a31 + 80), *(void *)(a31 + 88)))
    {
      restore_internal_storage_for_network(&a31, 0, v32 - 192);
      EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::done_with_async_batch((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(*(void *)(a13 + 1064) + 192), *(void *)(a31 + 80), v35);
    }
    std::current_exception();
    v36.__ptr_ = &a16;
    std::rethrow_exception(v36);
    sub_19275F5A0();
  }
  JUMPOUT(0x19275F5BCLL);
}

void sub_19275F524()
{
  JUMPOUT(0x19275F530);
}

void sub_19275F5A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception_ptr a16)
{
}

void sub_19275F60C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  return a1;
}

void *std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::target_type()
{
}

uint64_t std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13EspressoLight13espresso_plan10submit_gpuEPU28objcproto17OS_dispatch_queue8NSObjectPvS4_U13block_pointerFvP21espresso_error_info_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::operator()(uint64_t a1, uint64_t a2)
{
  kdebug_trace();
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    if (*(_DWORD *)a2)
    {
      v9[0] = 0xFFFFFFFF00000001;
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v6 = a2 + 8;
      uint64_t v5 = v7;
      if (*(char *)(v6 + 23) >= 0) {
        uint64_t v5 = v6;
      }
      v9[1] = v5;
      return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, v9);
    }
    else
    {
      id v8 = *(uint64_t (**)(void))(result + 16);
      return v8();
    }
  }
  return result;
}

void std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE379C50;
  return std::__compressed_pair_elem<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0 const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void *std::__compressed_pair_elem<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0 const&,0ul>(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = MEMORY[0x192FF2250](a2[2]);
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

void *std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE379C50;
  std::__compressed_pair_elem<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE379C50;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE379C50;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  return a1;
}

char *std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0xE0uLL);
    id v8 = (std::string *)(v6 + 32);
    id v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((void *)v6 + 27) = 0;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19275FAD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoLight::plan_task_t>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::destroy(*(void **)(a1 + 264));
  std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(*(void **)(a1 + 240));
  std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(*(void **)(a1 + 216));
  std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(*(void **)(a1 + 192));
  std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(*(void **)(a1 + 168));
  std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>>>::destroy(*(void **)(a1 + 144));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(void **)(a1 + 120));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(void **)(a1 + 96));
  std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(*(void **)(a1 + 72));
  std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(*(void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::destroy(a1[1]);
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::~__hash_table((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::destroy((void *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::destroy((void *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(a1[1]);
    std::__tree<std::string>::destroy((uint64_t)(a1 + 5), (char *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy((void *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_image_buffers>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<EspressoLight::plan_task_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380700;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<EspressoLight::plan_task_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(int a1)
{
}

void EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::set_n_async_buffers(EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *this, unint64_t a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  *((void *)this + 1) = a2;
  std::vector<unsigned long>::resize((void *)this + 16, a2);
  uint64_t v5 = *((void *)this + 19);
  unint64_t v6 = *((void *)this + 1);
  unint64_t v7 = *((void *)this + 20) - v5;
  if (v6 <= v7)
  {
    if (v6 < v7) {
      *((void *)this + 20) = v5 + v6;
    }
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)this + 19, v6 - v7);
  }

  std::mutex::unlock(v4);
}

void sub_19275FFFC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN13EspressoLight13espresso_plan10submit_aneEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvP21espresso_error_info_tE_block_invoke(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 48);
  if (EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::prepare_for_done_to_async_batch((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(*(void *)(v6 + 1064) + 192), *(void *)(*(void *)(a1 + 56) + 80), *(void *)(*(void *)(a1 + 56) + 88)))
  {
    unint64_t v7 = *(std::__shared_weak_count **)(*(void *)(a1 + 72) + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v8 = *(std::__shared_weak_count **)(a1 + 88);
    v22[0] = *(void *)(a1 + 80);
    v22[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v9 = *(uint64_t **)(a1 + 72);
    long long v10 = (std::__shared_weak_count *)v9[1];
    v21[0] = *v9;
    v21[1] = (uint64_t)v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoLight::espresso_plan::__copy_outputs((uint64_t)v22, a1 + 56, 0, v21);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    int v23 = 0;
    for (int i = (uint64_t **)*((void *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 80) + 232), 0, &v23)+ 7); i; int i = (uint64_t **)*i)
      (*(void (**)(uint64_t *, uint64_t))(*i[2] + 176))(i[2], a1 + 56);
    uint64_t v12 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 80) + 232), 0, &v23);
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear((uint64_t)(v12 + 40));
    EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::done_with_async_batch((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(*(void *)(v6 + 1064) + 192), *(void *)(*(void *)(a1 + 56) + 80));
    uint64_t v13 = *(NSObject **)(a1 + 32);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3321888768;
    v15[2] = ___ZN13EspressoLight13espresso_plan10submit_aneEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvP21espresso_error_info_tE_block_invoke_2;
    v15[3] = &unk_1EE38EF98;
    char v14 = *(std::__shared_weak_count **)(a1 + 88);
    uint64_t v18 = *(void *)(a1 + 80);
    uint64_t v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v16 = v5;
    char v20 = a2;
    id v17 = *(id *)(a1 + 40);
    dispatch_async(v13, v15);

    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
}

void sub_192760228(_Unwind_Exception *a1)
{
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2)
      {
LABEL_8:

        _Unwind_Resume(a1);
      }
LABEL_7:
      nitro::nitro_function::nitro_function(v2);
      goto LABEL_8;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v3);
  if (!v2) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::prepare_for_done_to_async_batch(EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v7 = *((void *)this + 19);
  if (*(unsigned char *)(v7 + a2) || *(void *)(*((void *)this + 16) + 8 * a2) != a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
    *(unsigned char *)(v7 + a2) = 1;
  }
  std::mutex::unlock(v6);
  return v8;
}

void restore_internal_storage_for_network(uint64_t a1, int a2, uint64_t a3)
{
  int v8 = a2;
  for (int i = (uint64_t **)*((void *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)a3 + 232), a2, &v8)+ 7); i; int i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[2] + 176))(i[2], a1);
  uint64_t v7 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)a3 + 232), a2, &v8);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear((uint64_t)(v7 + 40));
}

void EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::done_with_async_batch(EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *this, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  *(void *)(*((void *)this + 16) + 8 * a2) = 0;
  *(unsigned char *)(*((void *)this + 19) + a2) = 0;
  --*((void *)this + 22);
  std::mutex::unlock(v4);

  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 80));
}

void __destroy_helper_block_ea8_56c53_ZTSNSt3__110shared_ptrIN8Espresso14abstract_batchEEE80c56_ZTSNSt3__110shared_ptrIN13EspressoLight11plan_task_tEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void *__copy_helper_block_ea8_56c53_ZTSNSt3__110shared_ptrIN8Espresso14abstract_batchEEE80c56_ZTSNSt3__110shared_ptrIN13EspressoLight11plan_task_tEEE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[11];
  result[10] = a2[10];
  result[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN13EspressoLight13espresso_plan10submit_aneEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvP21espresso_error_info_tE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = [*(id *)(a1 + 32) localizedDescription];
  uint64_t v4 = v3;
  if (*(unsigned char *)(a1 + 64))
  {
    id v5 = 0;
  }
  else
  {
    v6[0] = 0xFFFFFFFF00000001;
    v6[1] = [v3 UTF8String];
    id v5 = v6;
  }
  (*(void (**)(void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v5);

  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void sub_192760530(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c56_ZTSNSt3__110shared_ptrIN13EspressoLight11plan_task_tEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_48c56_ZTSNSt3__110shared_ptrIN13EspressoLight11plan_task_tEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL EspressoLight::espresso_plan::is_in_flight(EspressoLight::espresso_plan *this)
{
  if (atomic_load((unint64_t *)(*((void *)this + 133) + 408))) {
    return 1;
  }
  uint64_t v3 = *((void *)this + 133);
  uint64_t v4 = (std::mutex *)(v3 + 208);
  std::mutex::lock((std::mutex *)(v3 + 208));
  BOOL v2 = *(void *)(v3 + 368) != 0;
  std::mutex::unlock(v4);
  return v2;
}

uint64_t EspressoLight::espresso_plan::is_valid_for_submit(EspressoLight::espresso_plan *this)
{
  uint64_t v1 = *((void *)this + 133);
  if (*(void *)(v1 + 24) == *(void *)(v1 + 32))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "The plan must have at least one network to execute.");
    std::runtime_error::runtime_error(exception, &v10);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -6;
  }
  if (*(_DWORD *)(v1 + 160) != 1)
  {
    uint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v9, *(_DWORD *)(*((void *)this + 133) + 160));
    uint64_t v7 = std::string::insert(&v9, 0, "Inconsistent phase of espresso_plan: ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v6, &v10);
    v6->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v6[1].__vftable) = -5;
  }
  BOOL v2 = *(uint64_t (**)(void))(**(void **)v1 + 152);

  return v2();
}

void sub_192760784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoLight::espresso_plan::query_blob_shape(EspressoLight::espresso_plan *this, int a2, char *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v6 = *(void *)(*((void *)this + 133) + 24);
  if (a2 >= (unint64_t)((*(void *)(*((void *)this + 133) + 32) - v6) >> 4))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v8 = (uint64_t *)(v6 + 16 * a2);
  uint64_t v10 = *v8;
  std::string v9 = (std::__shared_weak_count *)v8[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10)
  {
    id v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Null network found.");
    __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v25, *((void **)this + 133), a2, 0, a3);
  Espresso::net::get_blob_or_global_with_prefix(v10, &v25, &v23);
  if (v23)
  {
    Espresso::abstract_blob_container::shape(v18, v23);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v21, (const Espresso::layer_shape *)v18, 0);
    if (__p)
    {
      char v20 = __p;
      operator delete(__p);
    }
    LODWORD(v11) = v22;
    *a4 = v22;
    if (v11)
    {
      uint64_t v11 = v11;
      uint64_t v12 = (int *)v21;
      do
      {
        unint64_t v13 = *v12++;
        *a5++ = v13;
        --v11;
      }
      while (v11);
    }
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 4294967290;
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  return v14;
}

void sub_192760984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL EspressoLight::espresso_plan::is_output_declared(uint64_t a1, int a2, void *a3)
{
  int v10 = a2;
  uint64_t v3 = *(void **)(a1 + 1064);
  if (a2 >= (unint64_t)((uint64_t)(v3[4] - v3[3]) >> 4)) {
    return 0;
  }
  if (v3[17])
  {
    uint64_t v4 = (uint64_t *)v3[16];
    if (v4)
    {
      uint64_t v6 = (uint64_t **)(v3 + 15);
      do
      {
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
        {
          if (v7 >= a2)
          {
            long long v8 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v6, a2, &v10);
            return std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v8[6], a3) != 0;
          }
          ++v4;
        }
        uint64_t v4 = (uint64_t *)*v4;
      }
      while (v4);
    }
  }
  return 1;
}

BOOL EspressoLight::espresso_plan::is_output_bound(uint64_t a1, int a2, void *a3)
{
  int v16 = a2;
  uint64_t v4 = *(void **)(a1 + 1064);
  if (a2 >= (unint64_t)((uint64_t)(v4[4] - v4[3]) >> 4)) {
    return 0;
  }
  uint64_t v6 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v4[18] + 88), a2, &v16);
  int v7 = v6 + 6;
  long long v8 = v6[6];
  if (!v8) {
    goto LABEL_9;
  }
  std::string v9 = v6 + 6;
  do
  {
    BOOL v10 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a3);
    uint64_t v11 = (uint64_t **)(v8 + 1);
    if (!v10)
    {
      uint64_t v11 = (uint64_t **)v8;
      std::string v9 = (uint64_t **)v8;
    }
    long long v8 = *v11;
  }
  while (*v11);
  if (v9 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v9 + 4))
  {
LABEL_9:
    uint64_t v12 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v4[18] + 208), a2, &v16);
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v12[6], a3))
    {
      return 1;
    }
    uint64_t v14 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v4[18] + 160), a2, &v16);
    BOOL v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v14[6], a3) == 0;
  }
  else
  {
    BOOL v15 = *((unsigned char *)v9 + 56) == 0;
  }
  return !v15;
}

void EspressoLight::espresso_plan::unbind(uint64_t a1, int a2, char *a3, int a4)
{
  int v4 = a2;
  int v26 = a2;
  id v5 = *(void **)(a1 + 1064);
  if (a4 == 0x10000)
  {
    EspressoLight::espresso_plan::default_blob_name_if_null(&__p, v5, a2, 0, a3);
    uint64_t v6 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 16), v4, &v26);
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__erase_unique<std::string>(v6 + 5, &__p);
    int v7 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 64), v4, &v26);
    p_p = &__p;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 5, &__p, (long long **)&p_p)[56] = 0;
    long long v8 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 112), v4, &v26);
    std::string v9 = v8;
    uint64_t v11 = (uint64_t *)(v8 + 6);
    BOOL v10 = v8[6];
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(v8 + 6);
      unint64_t v13 = v8[6];
      do
      {
        BOOL v14 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13 + 4, &__p);
        BOOL v15 = (uint64_t **)(v13 + 1);
        if (!v14)
        {
          BOOL v15 = (uint64_t **)v13;
          uint64_t v12 = v13;
        }
        unint64_t v13 = *v15;
      }
      while (*v15);
      if (v12 != v11 && !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, v12 + 4))
      {
        int v16 = (uint64_t *)v12[1];
        if (v16)
        {
          do
          {
            id v17 = v16;
            int v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
        else
        {
          int v22 = v12;
          do
          {
            id v17 = (uint64_t *)v22[2];
            BOOL v23 = *v17 == (void)v22;
            int v22 = v17;
          }
          while (!v23);
        }
        if (v9[5] == v12) {
          v9[5] = v17;
        }
        v9[7] = (uint64_t *)((char *)v9[7] - 1);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, v12);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_image_buffers>,0>((uint64_t)(v12 + 4));
        operator delete(v12);
        int v4 = v26;
      }
    }
    int v24 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 184), v4, &v26);
    std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__erase_unique<std::string>(v24 + 5, &__p);
    int v21 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 136), v4, &v26);
  }
  else
  {
    EspressoLight::espresso_plan::default_blob_name_if_null(&__p, v5, a2, (const char *)1, a3);
    uint64_t v18 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 40), v4, &v26);
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__erase_unique<std::string>(v18 + 5, &__p);
    uint64_t v19 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 88), v4, &v26);
    p_p = &__p;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19 + 5, &__p, (long long **)&p_p)[56] = 0;
    char v20 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 208), v4, &v26);
    std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__erase_unique<std::string>(v20 + 5, &__p);
    int v21 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 160), v4, &v26);
  }
  std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__erase_unique<std::string>(v21 + 5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192760E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__erase_unique<std::string>(uint64_t **a1, void *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    int v4 = v3;
    id v5 = (uint64_t *)v3[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        id v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      int v7 = v3;
      do
      {
        uint64_t v6 = (uint64_t *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        int v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    std::string v9 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__erase_unique<std::string>(void *a1, void *a2)
{
  uint64_t v3 = a1 + 1;
  BOOL v2 = (uint64_t *)a1[1];
  if (v2)
  {
    uint64_t v6 = a1 + 1;
    int v7 = (void *)a1[1];
    do
    {
      BOOL v8 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
      std::string v9 = v7 + 1;
      if (!v8)
      {
        std::string v9 = v7;
        uint64_t v6 = v7;
      }
      int v7 = (void *)*v9;
    }
    while (*v9);
    if (v6 != v3 && !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4))
    {
      BOOL v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v6;
        do
        {
          uint64_t v11 = (void *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if ((void *)*a1 == v6) {
        *a1 = v11;
      }
      --a1[2];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      if (*((char *)v6 + 55) < 0) {
        operator delete((void *)v6[4]);
      }
      operator delete(v6);
    }
  }
}

void std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__erase_unique<std::string>(uint64_t **a1, void *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 1);
  BOOL v2 = a1[1];
  if (v2)
  {
    uint64_t v6 = (uint64_t *)(a1 + 1);
    int v7 = a1[1];
    do
    {
      BOOL v8 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
      std::string v9 = (uint64_t **)(v7 + 1);
      if (!v8)
      {
        std::string v9 = (uint64_t **)v7;
        uint64_t v6 = v7;
      }
      int v7 = *v9;
    }
    while (*v9);
    if (v6 != v3 && !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4))
    {
      BOOL v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          BOOL v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v6;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>,0>((uint64_t)(v6 + 4));
      operator delete(v6);
    }
  }
}

void EspressoLight::espresso_plan::set_output_raw_ptr(uint64_t a1, int a2, char *a3, long long *a4)
{
  int v76 = a2;
  uint64_t v6 = *(void *)(a1 + 1064);
  if (*(_DWORD *)(v6 + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, *(_DWORD *)(*(void *)(a1 + 1064) + 160));
    BOOL v23 = std::string::insert(&v74, 0, "Inconsistent phase of espresso_plan: ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v75);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v75, (void *)v6, a2, (const char *)1, a3);
  uint64_t v8 = *(void *)(*(void *)(a1 + 1064) + 24);
  if (a2 >= (unint64_t)((*(void *)(*(void *)(a1 + 1064) + 32) - v8) >> 4))
  {
    std::string v25 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Invalid network_index.");
    std::runtime_error::runtime_error(v25, &v74);
    v25->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v25[1].__vftable) = -6;
  }
  std::string v9 = (uint64_t *)(v8 + 16 * a2);
  uint64_t v10 = *v9;
  uint64_t v11 = (std::__shared_weak_count *)v9[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10)
  {
    int v26 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Null network found.");
    std::runtime_error::runtime_error(v26, &v74);
    v26->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v26[1].__vftable) = -6;
  }
  Espresso::net::get_blob_or_global_with_prefix(v10, &v75, &v72);
  if (!v72)
  {
    int v27 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Blob not found.");
    std::runtime_error::runtime_error(v27, &v74);
    v27->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v27[1].__vftable) = -8;
  }
  if (*((void *)a4 + 2) != v72[2])
  {
    int v28 = v72;
    uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v69, v28[2]);
    uint64_t v30 = std::string::insert(&v69, 0, "Invalid X-dimension ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = std::string::append(&v70, "/");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, *((void *)a4 + 2));
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v34 = &v68;
    }
    else {
      float v34 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v68.__r_.__value_.__l.__size_;
    }
    std::exception_ptr v36 = std::string::append(&v71, (const std::string::value_type *)v34, size);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &v74);
    v29->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v29[1].__vftable) = -7;
  }
  if (*((void *)a4 + 3) != v72[3])
  {
    float v38 = v72;
    uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v69, v38[3]);
    BOOL v40 = std::string::insert(&v69, 0, "Invalid Y-dimension ");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    int v42 = std::string::append(&v70, "/");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, *((void *)a4 + 3));
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v44 = &v68;
    }
    else {
      unint64_t v44 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v45 = v68.__r_.__value_.__l.__size_;
    }
    int v46 = std::string::append(&v71, (const std::string::value_type *)v44, v45);
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v39, &v74);
    v39->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v39[1].__vftable) = -7;
  }
  if (*((void *)a4 + 4) != v72[4])
  {
    uint64_t v48 = v72;
    unint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v69, v48[4]);
    long long v50 = std::string::insert(&v69, 0, "Invalid K-dimension ");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::string v52 = std::string::append(&v70, "/");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, *((void *)a4 + 4));
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v54 = &v68;
    }
    else {
      int64_t v54 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v55 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v55 = v68.__r_.__value_.__l.__size_;
    }
    std::string::size_type v56 = std::string::append(&v71, (const std::string::value_type *)v54, v55);
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v49, &v74);
    v49->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v49[1].__vftable) = -7;
  }
  if (*((void *)a4 + 5) != v72[5])
  {
    long long v58 = v72;
    long long v59 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v69, v58[5]);
    uint64_t v60 = std::string::insert(&v69, 0, "Invalid N-dimension ");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v62 = std::string::append(&v70, "/");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, *((void *)a4 + 5));
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v64 = &v68;
    }
    else {
      long long v64 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = v68.__r_.__value_.__l.__size_;
    }
    std::string::size_type v66 = std::string::append(&v71, (const std::string::value_type *)v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v59, &v74);
    v59->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v59[1].__vftable) = -7;
  }
  uint64_t v12 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*(void *)(a1 + 1064) + 144) + 208), a2, &v76);
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  BOOL v13 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12 + 5, &v75, (long long **)&v74);
  long long v14 = *a4;
  long long v15 = a4[1];
  *(_OWORD *)(v13 + 88) = a4[2];
  *(_OWORD *)(v13 + 72) = v15;
  *(_OWORD *)(v13 + 56) = v14;
  long long v16 = a4[3];
  long long v17 = a4[4];
  long long v18 = a4[5];
  *(_OWORD *)(v13 + 152) = a4[6];
  *(_OWORD *)(v13 + 136) = v18;
  *(_OWORD *)(v13 + 120) = v17;
  *(_OWORD *)(v13 + 104) = v16;
  long long v19 = a4[7];
  long long v20 = a4[8];
  long long v21 = a4[9];
  *((void *)v13 + 27) = *((void *)a4 + 20);
  *(_OWORD *)(v13 + 200) = v21;
  *(_OWORD *)(v13 + 184) = v20;
  *(_OWORD *)(v13 + 168) = v19;
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_192761910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a36) {
        nitro::nitro_function::nitro_function(a36);
      }
      if (v36) {
        nitro::nitro_function::nitro_function(v36);
      }
      if (*(char *)(v39 - 41) < 0) {
        operator delete(*(void **)(v39 - 64));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void EspressoLight::espresso_plan::set_input_raw_ptr(uint64_t a1, int a2, char *a3, long long *a4)
{
  int v76 = a2;
  uint64_t v6 = *(void *)(a1 + 1064);
  if (*(_DWORD *)(v6 + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, *(_DWORD *)(*(void *)(a1 + 1064) + 160));
    BOOL v23 = std::string::insert(&v74, 0, "Inconsistent phase of espresso_plan: ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v75);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v75, (void *)v6, a2, 0, a3);
  uint64_t v8 = *(void *)(*(void *)(a1 + 1064) + 24);
  if (a2 >= (unint64_t)((*(void *)(*(void *)(a1 + 1064) + 32) - v8) >> 4))
  {
    std::string v25 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Invalid network_index.");
    std::runtime_error::runtime_error(v25, &v74);
    v25->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v25[1].__vftable) = -6;
  }
  std::string v9 = (uint64_t *)(v8 + 16 * a2);
  uint64_t v10 = *v9;
  uint64_t v11 = (std::__shared_weak_count *)v9[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10)
  {
    int v26 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Null network found.");
    std::runtime_error::runtime_error(v26, &v74);
    v26->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v26[1].__vftable) = -6;
  }
  Espresso::net::get_blob_or_global_with_prefix(v10, &v75, &v72);
  if (!v72)
  {
    int v27 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Blob not found.");
    std::runtime_error::runtime_error(v27, &v74);
    v27->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v27[1].__vftable) = -8;
  }
  if (*((void *)a4 + 2) != v72[2])
  {
    int v28 = v72;
    uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v69, v28[2]);
    uint64_t v30 = std::string::insert(&v69, 0, "Invalid X-dimension ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = std::string::append(&v70, "/");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, *((void *)a4 + 2));
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v34 = &v68;
    }
    else {
      float v34 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v68.__r_.__value_.__l.__size_;
    }
    std::exception_ptr v36 = std::string::append(&v71, (const std::string::value_type *)v34, size);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &v74);
    v29->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v29[1].__vftable) = -7;
  }
  if (*((void *)a4 + 3) != v72[3])
  {
    int v38 = v72;
    uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v69, v38[3]);
    BOOL v40 = std::string::insert(&v69, 0, "Invalid Y-dimension ");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    int v42 = std::string::append(&v70, "/");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, *((void *)a4 + 3));
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v44 = &v68;
    }
    else {
      unint64_t v44 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v45 = v68.__r_.__value_.__l.__size_;
    }
    int v46 = std::string::append(&v71, (const std::string::value_type *)v44, v45);
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v39, &v74);
    v39->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v39[1].__vftable) = -7;
  }
  if (*((void *)a4 + 4) != v72[4])
  {
    uint64_t v48 = v72;
    unint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v69, v48[4]);
    long long v50 = std::string::insert(&v69, 0, "Invalid K-dimension ");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::string v52 = std::string::append(&v70, "/");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, *((void *)a4 + 4));
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v54 = &v68;
    }
    else {
      int64_t v54 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v55 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v55 = v68.__r_.__value_.__l.__size_;
    }
    std::string::size_type v56 = std::string::append(&v71, (const std::string::value_type *)v54, v55);
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v49, &v74);
    v49->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v49[1].__vftable) = -7;
  }
  if (*((void *)a4 + 5) != v72[5])
  {
    long long v58 = v72;
    long long v59 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v69, v58[5]);
    uint64_t v60 = std::string::insert(&v69, 0, "Invalid N-dimension ");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v62 = std::string::append(&v70, "/");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, *((void *)a4 + 5));
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v64 = &v68;
    }
    else {
      long long v64 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = v68.__r_.__value_.__l.__size_;
    }
    std::string::size_type v66 = std::string::append(&v71, (const std::string::value_type *)v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v59, &v74);
    v59->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v59[1].__vftable) = -7;
  }
  uint64_t v12 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*(void *)(a1 + 1064) + 144) + 184), a2, &v76);
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  BOOL v13 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12 + 5, &v75, (long long **)&v74);
  long long v14 = *a4;
  long long v15 = a4[1];
  *(_OWORD *)(v13 + 88) = a4[2];
  *(_OWORD *)(v13 + 72) = v15;
  *(_OWORD *)(v13 + 56) = v14;
  long long v16 = a4[3];
  long long v17 = a4[4];
  long long v18 = a4[5];
  *(_OWORD *)(v13 + 152) = a4[6];
  *(_OWORD *)(v13 + 136) = v18;
  *(_OWORD *)(v13 + 120) = v17;
  *(_OWORD *)(v13 + 104) = v16;
  long long v19 = a4[7];
  long long v20 = a4[8];
  long long v21 = a4[9];
  *((void *)v13 + 27) = *((void *)a4 + 20);
  *(_OWORD *)(v13 + 200) = v21;
  *(_OWORD *)(v13 + 184) = v20;
  *(_OWORD *)(v13 + 168) = v19;
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_192762304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a36) {
        nitro::nitro_function::nitro_function(a36);
      }
      if (v36) {
        nitro::nitro_function::nitro_function(v36);
      }
      if (*(char *)(v39 - 41) < 0) {
        operator delete(*(void **)(v39 - 64));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void EspressoLight::espresso_plan::bind_external_output(uint64_t a1, int a2, char *a3, uint64_t a4)
{
}

void EspressoLight::espresso_plan::generic_bind_external(uint64_t a1, int a2, char *a3, uint64_t a4, char *a5)
{
  int v74 = a2;
  uint64_t v6 = *(void *)(a1 + 1064);
  int v7 = *(_DWORD *)(v6 + 160);
  if (v7 != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
  }
  if (atomic_load((unint64_t *)(v6 + 408)))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Binding buffers cannot be done while a plan is being executed.");
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -1;
  }
  int v9 = (int)a5;
  int v12 = v74;
  EspressoLight::espresso_plan::default_blob_name_if_null(&v73, *(void **)(a1 + 1064), v74, a5, a3);
  uint64_t v13 = *(void *)(*(void *)(a1 + 1064) + 144);
  uint64_t v14 = v13 + 88;
  if (!v9) {
    uint64_t v14 = v13 + 64;
  }
  uint64_t v17 = *(void *)(v14 + 8);
  uint64_t v15 = v14 + 8;
  uint64_t v16 = v17;
  if (!v17) {
    goto LABEL_61;
  }
  uint64_t v18 = v12;
  uint64_t v19 = v15;
  do
  {
    int v20 = *(_DWORD *)(v16 + 32);
    BOOL v21 = v20 < (int)v18;
    if (v20 >= (int)v18) {
      int v22 = (uint64_t *)v16;
    }
    else {
      int v22 = (uint64_t *)(v16 + 8);
    }
    if (!v21) {
      uint64_t v19 = v16;
    }
    uint64_t v16 = *v22;
  }
  while (*v22);
  if (v19 == v15 || (int)v18 < *(_DWORD *)(v19 + 32))
  {
LABEL_61:
    if (v9) {
      long long v61 = "Output not declared";
    }
    else {
      long long v61 = "Input not declared";
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v61);
  }
  BOOL v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v19 + 40, &v73);
  if ((void *)(v19 + 48) == v23)
  {
    long long v63 = "Input";
    if (v9) {
      long long v63 = "Output";
    }
    __p[0] = (void *)v63;
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v64 = &v73;
    }
    else {
      long long v64 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    std::string v75 = v64;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("%s not declared: %s", __p, &v75);
  }
  uint64_t v67 = 16 * v18;
  std::string v68 = v23;
  if (v9)
  {
    long long v24 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 40), v18, &v74);
    std::string v25 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 1064) + 72), v18, &v74);
    int v26 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v25 + 5), &v73);
    if (std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 1064) + 72), v18, &v74)+ 6 == v26)
    {
      uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 1064) + 24) + 16 * v18);
      std::string::basic_string[abi:ne180100]<0>(__p, a3);
      Espresso::net::get_blob_or_global_with_prefix(v27, (std::string *)__p, &v75);
      if ((v70[7] & 0x80000000) != 0) {
        operator delete(__p[0]);
      }
      Espresso::abstract_blob_container::shape((char *)__p, (uint64_t)v75);
      int v28 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 1064) + 72), v18, &v74);
      v78[0] = (long long *)&v73;
      uint64_t v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28 + 5, &v73, v78);
      long long v30 = *(_OWORD *)v70;
      *(_OWORD *)(v29 + 56) = *(_OWORD *)__p;
      *(_OWORD *)(v29 + 72) = v30;
      *((void *)v29 + 11) = *(void *)&v70[16];
      long long v31 = (void *)*((void *)v29 + 12);
      if (v31)
      {
        *((void *)v29 + 13) = v31;
        operator delete(v31);
        *((void *)v29 + 12) = 0;
        *((void *)v29 + 13) = 0;
        *((void *)v29 + 14) = 0;
      }
      *((_OWORD *)v29 + 6) = *(_OWORD *)&v70[24];
      *((void *)v29 + 14) = v71;
      if (v76) {
        nitro::nitro_function::nitro_function(v76);
      }
    }
    uint64_t v32 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 1064) + 72), v18, &v74);
    __p[0] = &v73;
    long long v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32 + 5, &v73, (long long **)__p);
  }
  else
  {
    long long v24 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 16), v18, &v74);
    float v34 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 1064) + 48), v18, &v74);
    unint64_t v35 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v34 + 5), &v73);
    if (std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 1064) + 48), v18, &v74)+ 6 == v35)
    {
      uint64_t v36 = *(void *)(*(void *)(*(void *)(a1 + 1064) + 24) + 16 * v18);
      std::string::basic_string[abi:ne180100]<0>(__p, a3);
      Espresso::net::get_blob_or_global_with_prefix(v36, (std::string *)__p, &v75);
      if ((v70[7] & 0x80000000) != 0) {
        operator delete(__p[0]);
      }
      Espresso::abstract_blob_container::shape((char *)__p, (uint64_t)v75);
      long long v37 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 1064) + 48), v18, &v74);
      v78[0] = (long long *)&v73;
      int v38 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37 + 5, &v73, v78);
      long long v39 = *(_OWORD *)v70;
      *(_OWORD *)(v38 + 56) = *(_OWORD *)__p;
      *(_OWORD *)(v38 + 72) = v39;
      *((void *)v38 + 11) = *(void *)&v70[16];
      BOOL v40 = (void *)*((void *)v38 + 12);
      if (v40)
      {
        *((void *)v38 + 13) = v40;
        operator delete(v40);
        *((void *)v38 + 12) = 0;
        *((void *)v38 + 13) = 0;
        *((void *)v38 + 14) = 0;
      }
      *((_OWORD *)v38 + 6) = *(_OWORD *)&v70[24];
      *((void *)v38 + 14) = v71;
      if (v76) {
        nitro::nitro_function::nitro_function(v76);
      }
    }
    long long v41 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 1064) + 48), v18, &v74);
    __p[0] = &v73;
    long long v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41 + 5, &v73, (long long **)__p);
  }
  int v42 = v33;
  long long v43 = *(std::__shared_weak_count_vtbl **)a4;
  uint64_t v45 = *(void *)(a4 + 104);
  uint64_t v44 = *(void *)(a4 + 112);
  int v46 = (std::__shared_weak_count *)operator new(0x60uLL);
  std::string::size_type v66 = a3;
  v46->__shared_owners_ = 0;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3899C8;
  int v47 = *(_DWORD *)(a4 + 80);
  int64x2_t v48 = *(int64x2_t *)(a4 + 88);
  v46->__shared_weak_owners_ = 0;
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BF10;
  *(_OWORD *)&v46[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v46[3].__shared_owners_ = 0u;
  LODWORD(v46[1].__shared_owners_) = v47;
  HIDWORD(v46[1].__shared_weak_owners_) = v44 * v45;
  v46[2].__vftable = v43;
  LOBYTE(v46[2].__shared_owners_) = 0;
  *(int32x2_t *)v48.i8 = vmovn_s64(v48);
  *(uint64_t *)((char *)&v46[1].__shared_owners_ + 4) = v48.i64[0];
  v48.i64[1] = __PAIR64__(v44, v45);
  __p[0] = &v46[1];
  __p[1] = v46;
  atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_DWORD *)std::string v70 = v47;
  *(int64x2_t *)&v70[4] = v48;
  *(_DWORD *)&v70[20] = -1;
  *(_OWORD *)&v70[24] = 0u;
  long long v71 = 0u;
  std::string::size_type v72 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, 0, 0, 0);
  unint64_t v49 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)(v24 + 5), v78, &v73);
  long long v50 = (std::string *)*v49;
  if (!*v49)
  {
    long long v51 = (uint64_t **)v49;
    long long v50 = (std::string *)operator new(0x88uLL);
    std::string v75 = v50;
    int v76 = (std::__shared_weak_count *)(v24 + 6);
    char v77 = 0;
    std::string v52 = (std::string *)((char *)v50 + 32);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v52, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
      v50[2].__r_.__value_.__r.__words[0] = v73.__r_.__value_.__r.__words[2];
    }
    v50[5].__r_.__value_.__l.__size_ = 0;
    *(_OWORD *)&v50[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v50[4].__r_.__value_.__r.__words[2] = 0u;
    v50[2].__r_.__value_.__l.__size_ = 0;
    v50[2].__r_.__value_.__r.__words[2] = 0;
    LODWORD(v50[3].__r_.__value_.__l.__data_) = 0;
    *(void *)&long long v53 = 0x100000001;
    *((void *)&v53 + 1) = 0x100000001;
    *(_OWORD *)((char *)v50[3].__r_.__value_.__r.__words + 4) = v53;
    HIDWORD(v50[3].__r_.__value_.__r.__words[2]) = -1;
    char v77 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v24 + 5, (uint64_t)v78[0], v51, (uint64_t *)v50);
    std::string v75 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v75);
  }
  long long v54 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v55 = (std::__shared_weak_count *)v50[2].__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50[2].__r_.__value_.__r.__words[1] = v54;
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  std::string::size_type v56 = (void *)v50[4].__r_.__value_.__r.__words[2];
  long long v57 = *(_OWORD *)&v70[16];
  *(_OWORD *)&v50[3].__r_.__value_.__l.__data_ = *(_OWORD *)v70;
  *(_OWORD *)&v50[3].__r_.__value_.__r.__words[2] = v57;
  v50[4].__r_.__value_.__l.__size_ = *(void *)&v70[32];
  if (v56)
  {
    v50[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    operator delete(v56);
    v50[4].__r_.__value_.__r.__words[2] = 0;
    v50[5].__r_.__value_.__r.__words[0] = 0;
    v50[5].__r_.__value_.__l.__size_ = 0;
  }
  *(_OWORD *)&v50[4].__r_.__value_.__r.__words[2] = v71;
  v50[5].__r_.__value_.__l.__size_ = v72;
  std::string::size_type v72 = 0;
  long long v71 = 0uLL;
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
  *((unsigned char *)v68 + 56) = 1;
  BOOL is_blob_dynamic = Espresso::net::is_blob_dynamic(*(Espresso::net **)(*(void *)(*(void *)(a1 + 1064) + 24) + v67), v66);
  unint64_t v59 = *((unsigned int *)v42 + 14);
  unint64_t v60 = *(void *)(a4 + 80);
  if (!is_blob_dynamic)
  {
    if (v60 == (int)v59)
    {
      unint64_t v59 = *((int *)v42 + 15);
      unint64_t v60 = *(void *)(a4 + 88);
      if (v60 == v59)
      {
        unint64_t v59 = *((int *)v42 + 16);
        unint64_t v60 = *(void *)(a4 + 96);
        if (v60 == v59)
        {
          unint64_t v59 = *((int *)v42 + 17);
          unint64_t v60 = *(void *)(a4 + 104);
          if (v60 == v59)
          {
            unint64_t v59 = *((int *)v42 + 18);
            unint64_t v60 = *(void *)(a4 + 112);
            if (v60 == v59) {
              goto LABEL_58;
            }
            std::string::size_type v65 = "Mismatching seq: client:%d != internal:%d";
          }
          else
          {
            std::string::size_type v65 = "Mismatching n: client:%d != internal:%d";
          }
        }
        else
        {
          std::string::size_type v65 = "Mismatching k: client:%d != internal:%d";
        }
      }
      else
      {
        std::string::size_type v65 = "Mismatching h: client:%d != internal:%d";
      }
    }
    else
    {
      std::string::size_type v65 = "Mismatching w: client:%d != internal:%d";
    }
LABEL_80:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>(v65, v59, v60);
  }
  if (v60 < (int)v59)
  {
    std::string::size_type v65 = "Insufficient w: client:%d < internal:%d";
    goto LABEL_80;
  }
  unint64_t v59 = *((int *)v42 + 15);
  unint64_t v60 = *(void *)(a4 + 88);
  if (v60 < v59)
  {
    std::string::size_type v65 = "Insufficient h: client:%d < internal:%d";
    goto LABEL_80;
  }
  unint64_t v59 = *((int *)v42 + 16);
  unint64_t v60 = *(void *)(a4 + 96);
  if (v60 < v59)
  {
    std::string::size_type v65 = "Insufficient k: client:%d != internal:%d";
    goto LABEL_80;
  }
  unint64_t v59 = *((int *)v42 + 17);
  unint64_t v60 = *(void *)(a4 + 104);
  if (v60 < v59)
  {
    std::string::size_type v65 = "Insufficient n: client:%d != internal:%d";
    goto LABEL_80;
  }
  unint64_t v59 = *((int *)v42 + 18);
  unint64_t v60 = *(void *)(a4 + 112);
  if (v60 < v59)
  {
    std::string::size_type v65 = "Insufficient seq: client:%d != internal:%d";
    goto LABEL_80;
  }
LABEL_58:
  nitro::nitro_function::nitro_function(v46);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
}

void sub_192762CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100](v33 - 120);
  std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>::~pair(&a13);
  nitro::nitro_function::nitro_function(v32);
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>::~pair(void *a1)
{
  BOOL v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return a1;
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>(char *a1, uint64_t a2, uint64_t a3)
{
}

void EspressoLight::espresso_plan::bind_external_input(uint64_t a1, int a2, char *a3, uint64_t a4)
{
}

uint64_t EspressoLight::espresso_plan::set_function_name(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 1072), a2);
  return 0;
}

uint64_t std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>::~pair(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void EspressoLight::espresso_plan::unprepare(EspressoLight::espresso_plan *this)
{
  if (*(_DWORD *)(*((void *)this + 133) + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v17, *(_DWORD *)(*((void *)this + 133) + 160));
    uint64_t v14 = std::string::insert(&v17, 0, "Inconsistent phase of espresso_plan: ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  if ((*(unsigned int (**)(EspressoLight::espresso_plan *))(*(void *)this + 184))(this))
  {
    uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v18, "A plan cannot be cleaned while it is being executed.");
    std::runtime_error::runtime_error(v16, &v18);
    v16->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v16[1].__vftable) = -1;
  }
  uint64_t v2 = *((void *)this + 133);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 152);
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = *((void *)this + 133);
  *(_DWORD *)(v4 + 160) = 0;
  id v5 = *(void **)(v4 + 176);
  *(void *)(v4 + 176) = 0;

  uint64_t v6 = *((void *)this + 133);
  uint64_t v7 = *(void *)(v6 + 24);
  if (*(void *)(v6 + 32) != v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (uint64_t *)(v7 + v8);
      uint64_t v12 = *v10;
      uint64_t v11 = (std::__shared_weak_count *)v10[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::net::wipe_layers_blobs((Espresso::net *)v12);
      std::__tree<std::string>::destroy(v12 + 280, *(char **)(v12 + 288));
      *(void *)(v12 + 288) = 0;
      *(void *)(v12 + 296) = 0;
      *(void *)(v12 + 280) = v12 + 288;
      std::__tree<std::string>::destroy(v12 + 304, *(char **)(v12 + 312));
      *(void *)(v12 + 312) = 0;
      *(void *)(v12 + 320) = 0;
      *(void *)(v12 + 304) = v12 + 312;
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      ++v9;
      uint64_t v7 = *(void *)(v6 + 24);
      v8 += 16;
    }
    while (v9 < (*(void *)(v6 + 32) - v7) >> 4);
  }
}

void sub_19276310C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL Espresso::run_pass_on_network<Espresso::pass_multi_head_prune_undeclared>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EE389140;
  uint64_t v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE367E78;
  id v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    unint64_t v10 = (unint64_t)"N8Espresso32pass_multi_head_prune_undeclaredE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v8 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v8);
  if (v8)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v10 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso36analysis_multi_head_prune_undeclaredE");
    }
  }
  int v6 = buf[0];
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
  return v6 != 0;
}

void sub_192763384(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_multi_head_prune_undeclared>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_multi_head_prune_undeclared>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389140;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_multi_head_prune_undeclared>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN13EspressoLight13espresso_plan26prepare_compiler_if_neededEv_block_invoke(uint64_t a1, uint64_t a2)
{
}

void ___ZN13EspressoLight13espresso_plan29prepare_network_two_compilersEm_block_invoke(uint64_t a1, uint64_t a2)
{
}

void EspressoLight::espresso_plan::execute_forward_nocopy(EspressoLight::espresso_plan *this)
{
  void (***v7)(uint64_t *__return_ptr, void);
  int v8;
  void v9[5];
  void v10[9];

  uint64_t v1 = *((void *)this + 133);
  uint64_t v3 = *(uint64_t **)(v1 + 24);
  uint64_t v2 = (uint64_t **)(v1 + 24);
  uint64_t v4 = v2[15];
  uint64_t v5 = *v3;
  uint64_t v7 = *(void (****)(uint64_t *__return_ptr, void))(*v3 + 16);
  int v6 = *(std::__shared_weak_count **)(*v3 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = **v2;
  }
  char v8 = *(unsigned __int8 *)(v5 + 1352);
  LOBYTE(v10[0]) = v8;
  memset((char *)v10 + 4, 0, 68);
  if (v8)
  {
    v10[1] = v4;
    memset(&v10[2], 0, 24);
    v10[5] = v4;
    memset(&v10[6], 0, 24);
    HIDWORD(v10[0]) = 723714128;
    kdebug_trace();
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN13EspressoLight13espresso_plan22execute_forward_nocopyEv_block_invoke;
  void v9[3] = &__block_descriptor_40_e10_v16__0r_v8l;
  v9[4] = v2;
  Espresso::abstract_context::compute_batch_sync(v7, v9);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v10);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19276358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN13EspressoLight13espresso_plan22execute_forward_nocopyEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = **(void **)(a1 + 32);
  if (*(void *)(*(void *)(a1 + 32) + 8) != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (uint64_t *)(v2 + v5);
      uint64_t v9 = *v7;
      char v8 = (std::__shared_weak_count *)v7[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void, uint64_t))(*(void *)*a2 + 48))(*a2, v9);
      Espresso::net::__forward(v9, a2, 0, 0xFFFFFFFFLL);
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      ++v6;
      uint64_t v2 = **(void **)(a1 + 32);
      v5 += 16;
    }
    while (v6 < (*(void *)(*(void *)(a1 + 32) + 8) - v2) >> 4);
  }
}

void sub_192763688(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_plan::wipe_layers(EspressoLight::espresso_plan *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)this + 4) != v1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v1 + v3;
      unint64_t v6 = *(Espresso::net **)v5;
      uint64_t v7 = *(std::__shared_weak_count **)(v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::net::wipe_layers_blobs(v6);
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      ++v4;
      uint64_t v1 = *((void *)this + 3);
      v3 += 16;
    }
    while (v4 < (*((void *)this + 4) - v1) >> 4);
  }
}

void sub_192763724(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_plan::~espresso_plan(EspressoLight::espresso_plan *this)
{
  EspressoLight::espresso_plan::~espresso_plan(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE323F10;
  if (*((char *)this + 1095) < 0) {
    operator delete(*((void **)this + 134));
  }
  std::unique_ptr<EspressoLight::espresso_plan::priv_t>::reset[abi:ne180100]((uint64_t *)this + 133);

  EspressoLight::abstract_espresso_plan::~abstract_espresso_plan(this);
}

uint64_t *std::unique_ptr<EspressoLight::espresso_plan::priv_t>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  Espresso::tracer *result = 0;
  if (v1)
  {
    uint64_t v2 = *(FILE **)(v1 + 184);
    if (v2) {
      fclose(v2);
    }
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3) {
      espresso_context_destroy(v3);
    }
    unint64_t v4 = *(std::__shared_weak_count **)(v1 + 392);
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
    uint64_t v5 = *(void **)(v1 + 344);
    if (v5)
    {
      *(void *)(v1 + 352) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(v1 + 320);
    if (v6)
    {
      *(void *)(v1 + 328) = v6;
      operator delete(v6);
    }
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 272));
    std::mutex::~mutex((std::mutex *)(v1 + 208));

    uint64_t v7 = *(std::__shared_weak_count **)(v1 + 152);
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(void **)(v1 + 128));
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(void **)(v1 + 104));
    std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(*(void **)(v1 + 80));
    std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(*(void **)(v1 + 56));
    uint64_t v9 = (void **)(v1 + 24);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v9);
    char v8 = *(std::__shared_weak_count **)(v1 + 8);
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(a1 + 5), (char *)a1[6]);
    operator delete(a1);
  }
}

void *EspressoLight::espresso_plan::get_networks@<X0>(EspressoLight::espresso_plan *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 133);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(a2, *(void **)(v2 + 24), *(void **)(v2 + 32), (uint64_t)(*(void *)(v2 + 32) - *(void *)(v2 + 24)) >> 4);
}

void EspressoLight::espresso_plan::get_networks(EspressoLight::espresso_plan *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = a2 + 2;
  uint64_t v5 = *(void *)(*((void *)this + 133) + 24);
  uint64_t v6 = *(void *)(*((void *)this + 133) + 32);
  uint64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = v4;
    BOOL v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v7 >> 4);
    long long v24 = v23;
    std::string v25 = v23;
    int v26 = &v23[16 * v8];
    std::vector<std::shared_ptr<Espresso::net const> const,std::allocator<std::shared_ptr<Espresso::net const> const>>::__swap_out_circular_buffer(a2, &v23);
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v23);
    uint64_t v5 = *(void *)(*((void *)this + 133) + 24);
    uint64_t v6 = *(void *)(*((void *)this + 133) + 32);
  }
  if (v6 != v5)
  {
    for (unint64_t i = 0; i < (*(void *)(*((void *)this + 133) + 32) - v5) >> 4; ++i)
    {
      long long v10 = *(_OWORD *)(v5 + 16 * i);
      uint64_t v11 = *(std::__shared_weak_count **)(v5 + 16 * i + 8);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v12 = (_OWORD *)a2[1];
        unint64_t v13 = a2[2];
        if ((unint64_t)v12 >= v13) {
          goto LABEL_12;
        }
        _OWORD *v12 = v10;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v12 = (_OWORD *)a2[1];
        unint64_t v13 = a2[2];
        if ((unint64_t)v12 >= v13)
        {
LABEL_12:
          long long v22 = v10;
          uint64_t v15 = ((uint64_t)v12 - *a2) >> 4;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v13 - *a2;
          if (v17 >> 3 > v16) {
            unint64_t v16 = v17 >> 3;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          uint64_t v27 = v4;
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v18);
          int v20 = &v19[16 * v15];
          BOOL v23 = v19;
          long long v24 = v20;
          int v26 = &v19[16 * v21];
          *(_OWORD *)int v20 = v22;
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v25 = v20 + 16;
          std::vector<std::shared_ptr<Espresso::net const> const,std::allocator<std::shared_ptr<Espresso::net const> const>>::__swap_out_circular_buffer(a2, &v23);
          uint64_t v14 = (_OWORD *)a2[1];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v23);
          goto LABEL_21;
        }
        _OWORD *v12 = v10;
      }
      uint64_t v14 = v12 + 1;
      a2[1] = (uint64_t)(v12 + 1);
LABEL_21:
      a2[1] = (uint64_t)v14;
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      uint64_t v5 = *(void *)(*((void *)this + 133) + 24);
    }
  }
}

void sub_192763B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::shared_ptr<Espresso::net const> const,std::allocator<std::shared_ptr<Espresso::net const> const>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 - 16);
      v2 -= 16;
      *(void *)(v4 - 16) = v5;
      v4 -= 16;
      uint64_t v6 = *(void *)(v2 + 8);
      *(void *)(v4 + 8) = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
    }
    while (v2 != v3);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  Espresso::tracer *result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t EspressoLight::espresso_plan::get_context@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(this + 1064);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

EspressoLight *EspressoLight::espresso_context::unbox(EspressoLight *this, void *a2)
{
  if (this)
  {
    if (*(void *)this != 0x50FBC8A8A6F7B03CLL)
    {
      EspressoLight::very_bad_client(this);
      return 0;
    }
  }
  return this;
}

uint64_t EspressoLight::espresso_context::get_internal_context@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(this + 16);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t get_main_function_name()
{
  return EspressoLight::abstract_espresso_plan::main_function_name;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void ___ZN13EspressoLight13espresso_plan13submit_cameraEU13block_pointerFv18espresso_network_tP21espresso_error_info_tE_block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 40);
  size_t v8 = *(std::__shared_weak_count **)(a1 + 56);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(unsigned int *)(a1 + 64);
  if ((a2 & 1) == 0)
  {
    long long v10 = [v5 localizedDescription];
    uint64_t v11 = v10;
    unint64_t v22 = 0xFFFFFFFF00000001;
    uint64_t v23 = 0;
    if (v6) {
      uint64_t v23 = [v10 UTF8String];
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t v12 = *(void *)(v7 + 1064);
  unint64_t v13 = *(std::__shared_weak_count **)(v12 + 152);
  v21[0] = *(void *)(v12 + 144);
  v21[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *(_DWORD *)(a1 + 64);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 56);
  v20[0] = *(void *)(a1 + 48);
  v20[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  EspressoLight::espresso_plan::__copy_outputs((uint64_t)v21, a1 + 72, v14, v20);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  uint64_t v17 = *(void *)(v7 + 1064);
  LODWORD(v22) = *(_DWORD *)(a1 + 64);
  int v16 = v22;
  for (unint64_t i = (uint64_t **)*((void *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(v17 + 144) + 232), v22, &v22)+ 7); i; unint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[2] + 176))(i[2], a1 + 72);
  uint64_t v19 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(v17 + 144) + 232), v16, &v22);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear((uint64_t)(v19 + 40));
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v7 + 1064) + 408), 0xFFFFFFFFFFFFFFFFLL);
  if (a2) {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v7, v9, 0);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_192763EEC(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE72c53_ZTSNSt3__110shared_ptrIN8Espresso14abstract_batchEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void *__copy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE72c53_ZTSNSt3__110shared_ptrIN8Espresso14abstract_batchEEE(void *result, void *a2)
{
  uint64_t v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN13EspressoLight13espresso_plan20temporal_state_resetEiP37espresso_temporal_smoothing_options_t_block_invoke(uint64_t a1, uint64_t a2)
{
}

uint64_t espresso_context_report_bench(EspressoLight *a1, char *a2, float a3)
{
  if (!a1)
  {
    float v14 = a3;
    __asm { FMOV            V0.4S, #-1.0 }
    long long v15 = _Q0;
    long long v16 = _Q0;
    long long v17 = _Q0;
    int v18 = -1082130432;
    std::string::basic_string[abi:ne180100]<0>(v29, a2);
    std::string::basic_string[abi:ne180100]<0>(v27, "capi");
    std::string::basic_string[abi:ne180100]<0>(v25, "NONE");
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    std::string::basic_string[abi:ne180100]<0>(v21, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::report_benchmark_result((uint64_t)&v14, (const char *)v29, (uint64_t *)v27, (const char *)v25, (uint64_t *)v23, (uint64_t)v21, (uint64_t)__p);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    return 0;
  }
  if (*(void *)a1 == 0x50FBC8A8A6F7B03CLL)
  {
    uint64_t v3 = **((void **)a1 + 2);
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v31 = a3;
    __asm { FMOV            V0.4S, #-1.0 }
    long long v32 = _Q0;
    long long v33 = _Q0;
    long long v34 = _Q0;
    int v35 = -1082130432;
    std::string::basic_string[abi:ne180100]<0>(v29, a2);
    std::string::basic_string[abi:ne180100]<0>(v27, "capi");
    uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    std::string::basic_string[abi:ne180100]<0>(v25, v11);
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    std::string::basic_string[abi:ne180100]<0>(v21, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::report_benchmark_result((uint64_t)&v31, (const char *)v29, (uint64_t *)v27, (const char *)v25, (uint64_t *)v23, (uint64_t)v21, (uint64_t)__p);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
    return 0;
  }
  EspressoLight::very_bad_client(a1);
  return 4294967290;
}

void sub_192764274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v40 - 113) < 0) {
    operator delete(*(void **)(v40 - 136));
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  _Unwind_Resume(exception_object);
}

float EspressoLight::espresso_plan::perfbench(EspressoLight::espresso_plan *this, const char *a2, int a3, double a4)
{
  if (*(_DWORD *)(*((void *)this + 133) + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v20, *(_DWORD *)(*((void *)this + 133) + 160));
    long long v16 = std::string::insert(&v20, 0, "Inconsistent phase of espresso_plan: ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  int v6 = (int)a2;
  if ((int)a2 < 1)
  {
    Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v18, "first", a4);
    uint64_t v7 = *(void *)this;
    if (a3) {
      size_t v8 = (void (**)(EspressoLight::espresso_plan *))(v7 + 24);
    }
    else {
      size_t v8 = (void (**)(EspressoLight::espresso_plan *))(v7 + 32);
    }
    (*v8)(this);
    char v19 = 1;
    v18.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    *(double *)&v18.__r_.__value_.__r.__words[2] = (double)(uint64_t)(v18.__r_.__value_.__l.__size_
                                                                   - v18.__r_.__value_.__r.__words[0])
                                                 * 0.000001;
    float v9 = *(double *)&v18.__r_.__value_.__r.__words[2] * 0.001;
    if ((int)(float)(2.0 / v9) <= 5) {
      int v6 = 5;
    }
    else {
      int v6 = (int)(float)(2.0 / v9);
    }
    Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v18);
  }
  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v18, "n_runs", a4);
  int v10 = v6;
  do
  {
    uint64_t v11 = *(void *)this;
    if (a3) {
      uint64_t v12 = (void (**)(EspressoLight::espresso_plan *))(v11 + 24);
    }
    else {
      uint64_t v12 = (void (**)(EspressoLight::espresso_plan *))(v11 + 32);
    }
    (*v12)(this);
    --v10;
  }
  while (v10);
  char v19 = 1;
  v18.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  *(double *)&v18.__r_.__value_.__r.__words[2] = (double)(uint64_t)(v18.__r_.__value_.__l.__size_
                                                                 - v18.__r_.__value_.__r.__words[0])
                                               * 0.000001;
  float v13 = *(double *)&v18.__r_.__value_.__r.__words[2] / (double)v6;
  printf("[espresso_plan::perfbench] avg runtime (ms) = %.2f\n", v13);
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v18);
  return v13;
}

void sub_192764628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v29 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void *Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::unordered_map<std::string,Espresso::layer_shape>>(Espresso::net *,std::unordered_map<std::string,Espresso::layer_shape> const&)::{lambda(int)#1}::operator()(uint64_t a1)
{
  std::vector<Espresso::layer_shape>::__clear[abi:ne180100](*(uint64_t **)a1);
  unint64_t v2 = 0;
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v12 = v3;
  unint64_t v13 = 0xFFFFFFFF00000001;
  while (1)
  {
    uint64_t v4 = **(void **)(a1 + 8) + 96;
    unint64_t v5 = **(int **)(a1 + 16);
    unint64_t v11 = v5;
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, v5, &v11);
    if (v2 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[4] - result[3]) >> 3)) {
      break;
    }
    uint64_t v7 = *(uint64_t **)a1;
    unint64_t v8 = *(void *)(*(void *)a1 + 8);
    float v9 = *(uint64_t **)a1;
    if (v8 >= *(void *)(*(void *)a1 + 16))
    {
      uint64_t v10 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(v9, &v12);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)v9, &v12);
      uint64_t v10 = v8 + 64;
    }
    v7[1] = v10;
    ++v2;
  }
  return result;
}

const char *espresso_get_status_string(unsigned int a1)
{
  if (a1 != 0 && a1 < 0xFFFFFFF2) {
    return "";
  }
  else {
    return (&off_1E5746F98)[a1 + 14];
  }
}

uint64_t espresso_buffer_set_rank(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t espresso_buffer_get_rank(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t espresso_buffer_get_count(uint64_t a1)
{
  return *(void *)(a1 + 152) * *(void *)(a1 + 112);
}

uint64_t espresso_buffer_get_size(uint64_t a1, char *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 152);
  uint64_t v5 = 4;
  if (v2 <= 131079)
  {
    if (v2 == 65552)
    {
      uint64_t v5 = 2;
      goto LABEL_12;
    }
    if (v2 != 65568) {
      goto LABEL_8;
    }
LABEL_12:
    uint64_t result = 0;
    *(void *)a2 = v4 * v3 * v5;
    return result;
  }
  switch(v2)
  {
    case 131080:
LABEL_5:
      uint64_t v5 = 1;
      goto LABEL_12;
    case 131104:
      goto LABEL_12;
    case 262152:
      goto LABEL_5;
  }
LABEL_8:
  int v6 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109120;
    v8[1] = v2;
    _os_log_impl(&dword_1920CB000, v6, OS_LOG_TYPE_INFO, "Unsupported blob storage type %d", (uint8_t *)v8, 8u);
  }

  return 0xFFFFFFFFLL;
}

const char *espresso_get_last_error()
{
  if (err != 1) {
    return "";
  }
  err = 0;
  return (const char *)&errbuff;
}

uint64_t espresso_device_id_for_metal_device()
{
  return 0xFFFFFFFFLL;
}

uint64_t espresso_autoinitialize_isset()
{
  return g_espresso_autoinitialize;
}

uint64_t espresso_enable_autoinitialize(int a1)
{
  if (espresso_enable_autoinitialize::autoInitializeToken != -1) {
    dispatch_once(&espresso_enable_autoinitialize::autoInitializeToken, &__block_literal_global_2694);
  }
  int v2 = (std::mutex *)g_autoinitialize_mutex;
  std::mutex::lock((std::mutex *)g_autoinitialize_mutex);
  if ((a1 & 1) != 0 || !g_autoinitialize_ctx_count)
  {
    if (!a1 || !singleton)
    {
      uint64_t v8 = 0;
      g_espresso_autoinitialize = a1;
      goto LABEL_12;
    }
    uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      int v6 = "espresso_autoinitialize is enabled after context is created or espresso_initialize is called.";
      uint64_t v7 = (uint8_t *)&v10;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = 0;
      int v6 = "espresso_autoinitialize is being disabled when there are context still being referenced.";
      uint64_t v7 = (uint8_t *)&v11;
LABEL_14:
      _os_log_error_impl(&dword_1920CB000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    }
  }

  uint64_t v8 = 0xFFFFFFFFLL;
LABEL_12:
  std::mutex::unlock(v2);
  return v8;
}

void __espresso_enable_autoinitialize_block_invoke()
{
}

uint64_t espresso_initialize()
{
  espresso_initialize_was_called = 1;
  initialize_static_memory();
  return 0;
}

uint64_t espresso_create_context_auto()
{
  uint64_t v0 = (void *)MEMORY[0x192FF2020]();
  uint64_t v1 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v2 = [v1 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v3 = [v2 objectForKeyedSubscript:@"espresso.enable_experimental_auto_context"];

  if (v3
    && ([v2 objectForKeyedSubscript:@"espresso.enable_experimental_auto_context"],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        char v5 = [v4 BOOLValue],
        v4,
        (v5 & 1) != 0))
  {
    uint64_t context = 0;
  }
  else
  {
    uint64_t context = espresso_create_context(0x2717u, -1);
    if (!context)
    {
      uint64_t context = espresso_create_context(5u, -3);
      if (!context) {
        uint64_t context = espresso_create_context(0, -1);
      }
    }
  }

  return context;
}

void sub_192764BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t espresso_set_quantization_flags(EspressoLight *a1, uint64_t a2)
{
  if (a1)
  {
    if (*(void *)a1 == 0x50FBC8A8A6F7B03CLL)
    {
      int v3 = a2;
      Espresso::keys_translation::cpp_quant_weight_mem_from_c_api(a2);
      uint64_t result = 0;
      *(_DWORD *)(**((void **)a1 + 2) + 76) = v3;
      return result;
    }
    EspressoLight::very_bad_client(a1);
  }
  return 4294967290;
}

uint64_t handle_ex_plan(char *a1, std::exception *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = this->__vftable;
    char v5 = (const std::nested_exception *)__dynamic_cast(this, MEMORY[0x1E4FBA368], (const struct __class_type_info *)off_1E5745178, -2);
    if (!v5)
    {
      int v6 = (const char *)((uint64_t (*)(std::exception *))v4->what)(this);
      strncpy(a1 + 20, v6, 0x3FFuLL);
      *((_DWORD *)a1 + 261) = -1;
      if (v7)
      {
        uint64_t v9 = v7;
        *((_DWORD *)a1 + 261) = *((_DWORD *)v7 + 4);
        __int16 v10 = Espresso::espresso_os_log_subsystem(v7, v8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = ((uint64_t (*)(std::exception *))this->what)(this);
          int v12 = *((_DWORD *)v9 + 4);
          int v25 = 136315394;
          uint64_t v26 = v11;
          __int16 v27 = 1024;
          int v28 = v12;
          unint64_t v13 = "[Espresso::handle_ex_plan] exception=%s status=%d";
LABEL_12:
          char v22 = v10;
          uint32_t v23 = 18;
LABEL_13:
          _os_log_error_impl(&dword_1920CB000, v22, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v25, v23);
        }
      }
      else
      {
        if (!v15)
        {
          __int16 v10 = Espresso::espresso_os_log_subsystem(0, v16);
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            goto LABEL_15;
          }
          uint64_t v24 = ((uint64_t (*)(std::exception *))this->what)(this);
          int v25 = 136315138;
          uint64_t v26 = v24;
          unint64_t v13 = "[Espresso::handle_ex_plan] exception=%s";
          char v22 = v10;
          uint32_t v23 = 12;
          goto LABEL_13;
        }
        long long v17 = v15;
        std::string v18 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v15 + 24))(v15);
        *((_DWORD *)a1 + 261) = v18;
        __int16 v10 = Espresso::espresso_os_log_subsystem(v18, v19);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = ((uint64_t (*)(std::exception *))this->what)(this);
          int v21 = (*(uint64_t (**)(void *))(*(void *)v17 + 24))(v17);
          int v25 = 136315394;
          uint64_t v26 = v20;
          __int16 v27 = 1024;
          int v28 = v21;
          unint64_t v13 = "[Espresso::handle_ex_plan] exception=%s status=%d";
          goto LABEL_12;
        }
      }
LABEL_15:

      return *((unsigned int *)a1 + 261);
    }
    std::nested_exception::rethrow_nested(v5);
    return espresso_plan_add_network_from_memory();
  }
  else
  {
    return EspressoLight::handle_ex_((EspressoLight *)this, this);
  }
}

uint64_t espresso_plan_add_network_from_memory(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v16 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    if (a8 == 65568)
    {
      unsigned int v17 = 0;
    }
    else
    {
      if (a8 != 65552)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        int v37 = a8;
        int v38 = exception;
        std::to_string(&v44, v37);
        long long v39 = std::string::insert(&v44, 0, "Compute path ");
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v46.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        long long v41 = std::string::append(&v46, " not supported.");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v38, &v51);
        __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v17 = 1;
    }
    std::string::basic_string[abi:ne180100](&__dst, a2, a3);
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v51, &__dst);
    std::string::basic_string[abi:ne180100](&v50, a4, a5);
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v46, &v50);
    std::string::basic_string[abi:ne180100]<0>(&v56, "json");
    Espresso::load_network_shape((uint64_t)&v46, &v56, (uint64_t)&v44);
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
    Espresso::load_network_layers((uint64_t)&v51, a6, a7, *(void **)(a1 + 1064), (uint64_t)&v44, v17, (uint64_t *)&v56);
    long long v43 = v56;
    char v19 = (std::__shared_weak_count *)*((void *)&v56 + 1);
    if (*((void *)&v56 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v56 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::shape_network_recursive((Espresso *)v43, (Espresso::net *)&v44, 0, 0);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (!(void)v43)
    {
      int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Cannot load network.");
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
      Espresso::net::wipe_layers_blobs((Espresso::net *)v43);
    }
    uint64_t v20 = *(void **)(a1 + 1064);
    int v21 = (_OWORD *)v20[4];
    unint64_t v22 = v20[5];
    if ((unint64_t)v21 >= v22)
    {
      uint64_t v24 = v20[3];
      uint64_t v25 = ((uint64_t)v21 - v24) >> 4;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v22 - v24;
      if (v27 >> 3 > v26) {
        unint64_t v26 = v27 >> 3;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      unint64_t v59 = v20 + 5;
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v28);
      char v30 = &v29[16 * v25];
      *(void *)&long long v56 = v29;
      *((void *)&v56 + 1) = v30;
      long long v58 = &v29[16 * v31];
      *(_OWORD *)char v30 = v43;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v57 = v30 + 16;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v20 + 3, &v56);
      uint32_t v23 = (_OWORD *)v20[4];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v56);
    }
    else
    {
      _OWORD *v21 = v43;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint32_t v23 = v21 + 1;
      v20[4] = v21 + 1;
    }
    v20[4] = v23;
    *(void *)(v43 + 1240) = a1;
    uint64_t v18 = ((*(void *)(*(void *)(a1 + 1064) + 32) - *(void *)(*(void *)(a1 + 1064) + 24)) >> 4)
        - 1;
    *(_DWORD *)(v43 + 1248) = v18;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v45, v45[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v44, (char *)v44.__r_.__value_.__l.__size_);
    v46.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA410];
    std::string::size_type v32 = v46.__r_.__value_.__r.__words[0];
    std::string::size_type v33 = *(void *)(MEMORY[0x1E4FBA410] + 24);
    *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words
                              + *(void *)(v46.__r_.__value_.__r.__words[0] - 24)) = v33;
    v46.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
    if (v48 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x192FF15B0](&v49);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    v51.__r_.__value_.__r.__words[0] = v32;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + *(void *)(v32 - 24)) = v33;
    v51.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
    if (v53 < 0) {
      operator delete(v52);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x192FF15B0](&v54);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  else
  {
    uint64_t v18 = 4294967290;
  }
  return v18;
}

void sub_192765560(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    if ((v68 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (!v68)
  {
LABEL_10:
    if (a2 == 1)
    {
      long long v71 = (std::exception *)__cxa_begin_catch(a1);
      handle_ex_plan(v66, v71);
      __cxa_end_catch();
      JUMPOUT(0x192765448);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v67);
  goto LABEL_10;
}

uint64_t espresso_plan_activate_debug_firehose(void *a1, char *a2)
{
  if (!a1
  {
    return 4294967290;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v4 = a1[133];
  int v5 = *(_DWORD *)(v4 + 160);
  if (v5) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v5);
  }
  if (*(void *)(v4 + 32) == *(void *)(v4 + 24))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Empty espresso_plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v14 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  printf("[espresso] Dumping to %s\n", (const char *)v6);
  uint64_t v7 = *(std::__shared_weak_count **)(**(void **)(a1[133] + 24) + 24);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v14 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  *(void *)(a1[133] + 184) = fopen((const char *)v8, "wb");
  if (!*(void *)(a1[133] + 184))
  {
    int v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v12, &v15);
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_19276591C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v25)
  {
LABEL_6:
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (a16 < 0) {
      operator delete(a11);
    }
    if (a2 == 1)
    {
      unint64_t v28 = (std::exception *)__cxa_begin_catch(exception_object);
      handle_ex_plan(v22, v28);
      __cxa_end_catch();
      JUMPOUT(0x192765864);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

std::string::size_type espresso_plan_destroy(std::string::size_type a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)MEMORY[0x192FF2020]();
  if (a1)
  {
    if (v3)
    {
      int v5 = Espresso::espresso_os_log_subsystem(v3, v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LODWORD(v10.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)v10.__r_.__value_.__r.__words + 4) = a1;
        _os_log_impl(&dword_1920CB000, v5, OS_LOG_TYPE_INFO, "Destroying plan %zu", (uint8_t *)&v10, 0xCu);
      }

      uint64_t v6 = *(void *)a1;
      if (v7)
      {
        if ((*(uint64_t (**)(void *))(*(void *)v7 + 184))(v7))
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v10, "A plan cannot be destroyed while it is being executed.");
          std::runtime_error::runtime_error(exception, &v10);
          exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
          LODWORD(exception[1].__vftable) = -1;
        }
        uint64_t v6 = *(void *)a1;
      }
      (*(void (**)(std::string::size_type))(v6 + 8))(a1);
      a1 = 0;
    }
    else
    {
      a1 = 4294967290;
    }
  }
  return a1;
}

void sub_192765C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v15)
  {
LABEL_6:
    if (a2 == 1)
    {
      uint64_t v18 = (EspressoLight *)__cxa_begin_catch(exception_object);
      EspressoLight::handle_ex_(v18, v19);
      __cxa_end_catch();
      JUMPOUT(0x192765B64);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t espresso_network_query_blob_shape(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string v10 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v11 = *a1,
  }
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 168))(a1, a2, a3, a4, a5);
  }
  else
  {
    uint64_t v12 = 4294967290;
  }
  return v12;
}

uint64_t espresso_network_unbind_buffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v9 = *a1,
  }
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v9 + 136))(a1, a2, a3, a4);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 4294967290;
  }
  return v10;
}

void tmp_espresso_load_image_bgra(Espresso *a1, const char *a2)
{
}

void tmp_espresso_load_image_grayscale(Espresso *a1, const char *a2)
{
}

uint64_t espresso_network_bind_direct_cvpixelbuffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v9 = *a1,
  }
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v9 + 216))(a1, a2, a3, a4);
  }
  else
  {
    uint64_t v10 = 4294967290;
  }
  return v10;
}

uint64_t espresso_network_bind_cvpixelbuffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 4294967290;
  }
  uint64_t v10 = *a1;
  __int16 v13 = 1;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, __int16))(v10 + 232))(a1, a2, a3, a4, a5, 0, 4, 0, 0, v13);
  return 0;
}

uint64_t espresso_network_bind_cvpixelbuffer_no_channel_swap(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 4294967290;
  }
  uint64_t v10 = *a1;
  __int16 v13 = 257;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, __int16))(v10 + 232))(a1, a2, a3, a4, a5, 0, 4, 0, 0, v13);
  return 0;
}

uint64_t espresso_network_bind_input_cvpixelbuffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v14 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v15 = *a1,
  }
  {
    __int16 v18 = 0;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, __int16))(v15 + 224))(a1, a2, a3, a4, a5, 0, 4, a6, a7, v18);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 4294967290;
  }
  return v16;
}

uint64_t espresso_network_bind_input_metaltexture(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v13 = a5;
  char v14 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v15 = *a1,
  }
  {
    __int16 v18 = 0;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, void, id, uint64_t, uint64_t, uint64_t, __int16))(v15 + 224))(a1, a2, a3, a4, 0, v13, 4, a6, a7, v18);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 4294967290;
  }

  return v16;
}

uint64_t espresso_network_bind_input_vimagebuffer_argb8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v13 = *a1,
  }
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 208))(a1, a2, a3, a4, a5, 4, a6);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 4294967290;
  }
  return v14;
}

uint64_t espresso_network_bind_input_vimagebuffer_bgra8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v13 = *a1,
  }
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 200))(a1, a2, a3, a4, a5, 4, a6, 1);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 4294967290;
  }
  return v14;
}

uint64_t espresso_network_bind_input_vimagebuffer_rgba8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v13 = *a1,
  }
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v13 + 200))(a1, a2, a3, a4, a5, 4, a6, 0);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 4294967290;
  }
  return v14;
}

uint64_t espresso_network_bind_input_vimagebuffer_planar8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v13 = *a1,
  }
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 200))(a1, a2, a3, a4, a5, 1, a6, 1);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 4294967290;
  }
  return v14;
}

void sub_19276696C()
{
}

unint64_t espresso_plan_get_error_info(uint64_t a1)
{
  unint64_t v2 = 0xFFFFFFFA00000000;
  int v3 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 1064) + 160);
    uint64_t v5 = *(unsigned int *)(a1 + 1044);
    *(_DWORD *)(a1 + 1044) = 0;
    unint64_t v2 = v5 << 32;
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v2 | v4;
}

uint64_t espresso_network_change_blob_shape(const void *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v16 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    unsigned int v17 = operator new(8uLL);
    *unsigned int v17 = a3;
    v31[1] = (uint64_t)(v17 + 1);
    _OWORD v31[2] = (uint64_t)(v17 + 1);
    v31[0] = (uint64_t)v17;
    __int16 v18 = operator new(4uLL);
    *__int16 v18 = a4;
    v30[1] = v18 + 1;
    _OWORD v30[2] = v18 + 1;
    v30[0] = v18;
    char v19 = operator new(4uLL);
    *char v19 = a5;
    v29[1] = v19 + 1;
    v29[2] = v19 + 1;
    v29[0] = v19;
    uint64_t v20 = operator new(4uLL);
    *uint64_t v20 = a6;
    v28[1] = v20 + 1;
    v28[2] = v20 + 1;
    v28[0] = v20;
    int v21 = operator new(4uLL);
    _DWORD *v21 = a7;
    v27[1] = v21 + 1;
    v27[2] = v21 + 1;
    v27[0] = v21;
    unint64_t v22 = operator new(4uLL);
    _DWORD *v22 = a8;
    v26[1] = v22 + 1;
    void v26[2] = v22 + 1;
    v26[0] = v22;
    memset(v25, 0, sizeof(v25));
    EspressoLight::espresso_plan::change_input_shapes((uint64_t)a1, a2, v31, v30, v29, v28, v27, v26, v25);
    operator delete(v22);
    operator delete(v21);
    operator delete(v20);
    operator delete(v19);
    operator delete(v18);
    operator delete(v17);
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 4294967290;
  }
  return v23;
}

void sub_192766C1C(_Unwind_Exception *a1, int a2)
{
  operator delete(v7);
  operator delete(v8);
  operator delete(v6);
  operator delete(v5);
  operator delete(v4);
  operator delete(v3);
  if (a2 == 1)
  {
    uint64_t v11 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v2, v11);
    __cxa_end_catch();
    JUMPOUT(0x192766BF0);
  }
  _Unwind_Resume(a1);
}

void sub_192766CC0()
{
}

void sub_192766CCC()
{
}

uint64_t espresso_network_change_input_blob_shapes_seq(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v17 = (void *)MEMORY[0x192FF2020]();
  uint64_t v18 = espresso_network_change_input_blob_shapes_seq_rank(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0);
  return v18;
}

uint64_t espresso_network_change_input_blob_shapes(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v29);
  if (!v29)
  {
    v23[0] = 1;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    int v28 = 0;
    goto LABEL_5;
  }
  v23[0] = *(unsigned char *)(v29 + 1352);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  int v28 = 0;
  if (v23[0])
  {
LABEL_5:
    LODWORD(v24) = 723714072;
    kdebug_trace();
  }
  std::vector<int>::value_type __x = 1;
  uint64_t v16 = std::vector<int>::vector(&v22, a3, &__x);
  std::vector<int>::pointer begin = v22.__begin_;
  uint64_t v18 = (void *)MEMORY[0x192FF2020](v16);
  uint64_t v19 = espresso_network_change_input_blob_shapes_seq_rank(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)begin, 0);
  if (v22.__begin_)
  {
    v22.__end_ = v22.__begin_;
    operator delete(v22.__begin_);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v23);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  return v19;
}

void sub_192766EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 88);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_plan_perfbench(EspressoLight::espresso_plan *a1, uint64_t a2, const char *a3, float *a4)
{
  uint64_t v7 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    float v9 = EspressoLight::espresso_plan::perfbench(a1, a3, 1, v8);
    uint64_t v10 = 0;
    if (a4) {
      *a4 = v9;
    }
  }
  else
  {
    uint64_t v10 = 4294967290;
  }
  return v10;
}

uint64_t espresso_plan_perfbench_nocopy(EspressoLight::espresso_plan *a1, uint64_t a2, const char *a3, float *a4)
{
  uint64_t v7 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    float v9 = EspressoLight::espresso_plan::perfbench(a1, a3, 0, v8);
    uint64_t v10 = 0;
    if (a4) {
      *a4 = v9;
    }
  }
  else
  {
    uint64_t v10 = 4294967290;
  }
  return v10;
}

void *espresso_plan_add_cpp_net(void *lpsrc, long long *a2)
{
  unint64_t v2 = lpsrc;
  if (lpsrc)
  {
    {
      uint64_t v4 = (void *)v2[133];
      uint64_t v5 = (void *)v4[4];
      unint64_t v6 = v4[5];
      if ((unint64_t)v5 >= v6)
      {
        uint64_t v9 = v4[3];
        uint64_t v10 = ((uint64_t)v5 - v9) >> 4;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v6 - v9;
        if (v12 >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        v20[4] = v4 + 5;
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
        uint64_t v15 = &v14[16 * v10];
        v20[0] = v14;
        v20[1] = v15;
        v20[3] = &v14[16 * v16];
        long long v17 = *a2;
        *(_OWORD *)uint64_t v15 = *a2;
        if (*((void *)&v17 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v20[2] = v15 + 16;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v4 + 3, v20);
        double v8 = (void *)v4[4];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v20);
      }
      else
      {
        *uint64_t v5 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        v5[1] = v7;
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        double v8 = v5 + 2;
      }
      v4[4] = v8;
      uint64_t v18 = *(void *)a2;
      *(void *)(v18 + 1240) = v2;
      *(_DWORD *)(v18 + 1248) = ((*(void *)(v2[133] + 32) - *(void *)(v2[133] + 24)) >> 4) - 1;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t espresso_plan_add_cpp_net_and_reload(const void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = Espresso::espresso_os_log_subsystem(v8, v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134218240;
    uint64_t v18 = a1;
    __int16 v19 = 1024;
    int v20 = a3;
    _os_log_impl(&dword_1920CB000, v10, OS_LOG_TYPE_INFO, "espresso_plan_add_cpp_net_and_reload plan=%zu cp=%d", buf, 0x12u);
  }

  unint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  uint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = (*(uint64_t (**)(const void *, void, uint64_t, uint64_t *))(*(void *)a1 + 240))(a1, 0, a3, &v15);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  uint64_t v13 = 0;
  if (a4)
  {
    *(_DWORD *)(a4 + 8) = v12;
    *(void *)a4 = a1;
  }
  return v13;
}

void sub_192767428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a2 == 1)
  {
    uint64_t v14 = (std::exception *)__cxa_begin_catch(exception_object);
    if (v11)
    {
      *(_DWORD *)(v11 + 8) = -1;
      *(void *)uint64_t v11 = 0;
    }
    handle_ex_plan(v10, v14);
    __cxa_end_catch();
    JUMPOUT(0x1927673F0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_plan_build_clean(uint64_t *a1)
{
  unint64_t v2 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v3 = *a1,
  }
  {
    (*(void (**)(uint64_t *))(v3 + 48))(a1);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 4294967290;
  }
  return v4;
}

uint64_t espresso_plan_wipe_tempoary(EspressoLight::espresso_plan **a1)
{
  unint64_t v2 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    EspressoLight::espresso_plan::wipe_layers(a1[133]);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 4294967290;
  }
  return v3;
}

void espresso_create_hx_context()
{
}

void sub_1927676D4(_Unwind_Exception *a1, int a2)
{
  uint64_t v4 = v2;
  MEMORY[0x192FF16B0](v4, 0x1020C406E52F545);
  if (a2 == 1)
  {
    unint64_t v6 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v6, v7);
    __cxa_end_catch();
    JUMPOUT(0x1927676B8);
  }
  _Unwind_Resume(a1);
}

void espresso_create_hx_cva_context()
{
}

void sub_1927677A8(_Unwind_Exception *a1, int a2)
{
  uint64_t v4 = v2;
  MEMORY[0x192FF16B0](v4, 0x1020C406E52F545);
  if (a2 == 1)
  {
    unint64_t v6 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v6, v7);
    __cxa_end_catch();
    JUMPOUT(0x19276778CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_hx_get_processing_session(EspressoLight *a1)
{
  if (!a1) {
LABEL_11:
  }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
  if (*(void *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(a1);
    goto LABEL_11;
  }
  uint64_t v1 = *((void *)a1 + 2);
  if (!*(void *)v1
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v7, "Not an HX context.");
    std::runtime_error::runtime_error(exception, &v7);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -6;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v3) {
    return v2[18];
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v4 = v2[18];
  nitro::nitro_function::nitro_function(v3);
  return v4;
}

void sub_192767960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v16)
  {
LABEL_6:
    if (a2 == 1)
    {
      __int16 v19 = (EspressoLight *)__cxa_begin_catch(exception_object);
      EspressoLight::handle_ex_(v19, v20);
      __cxa_end_catch();
      JUMPOUT(0x1927678BCLL);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t espresso_plan_can_use_submit(uint64_t *lpsrc, _DWORD *a2)
{
  if (!a2) {
    return 4294967290;
  }
  *a2 = 0;
  if (!lpsrc) {
    return 4294967290;
  }
  uint64_t v4 = *lpsrc;
  int v5 = (*(uint64_t (**)(uint64_t *))(v4 + 176))(lpsrc);
  uint64_t v6 = 0;
  *a2 = v5;
  return v6;
}

uint64_t espresso_plan_submit(uint64_t *a1, void *a2, void *a3)
{
  return espresso_plan_submit_with_args(a1, a2, 0, 0, a3);
}

uint64_t espresso_plan_submit_with_args(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  uint64_t v11 = (void *)MEMORY[0x192FF2020]();
  if (a1)
  {
    uint64_t v12 = *a1;
    uint64_t v14 = 4294967290;
    if (v9 {
      && v13
    }
    {
      (*(void (**)(uint64_t *, id, uint64_t, uint64_t, id))(v12 + 192))(a1, v9, a3, a4, v10);
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 4294967290;
  }

  return v14;
}

uint64_t espresso_network_temporal_state_reset(void *a1, int a2, uint64_t a3)
{
  void (***v26)(uint64_t *__return_ptr, void);
  void *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  long long v30;
  void v31[4];
  long long v32;
  long long v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  uint64_t v6 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    uint64_t v7 = *(void *)(a1[133] + 24);
    long long v27 = v6;
    if (a2 >= (unint64_t)((*(void *)(a1[133] + 32) - v7) >> 4))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid network_index.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v8 = *(_OWORD *)(v7 + 16 * a2);
    char v30 = v8;
    id v9 = *(std::__shared_weak_count **)(v7 + 16 * a2 + 8);
    if (*((void *)&v8 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = v9;
    if (!(void)v8)
    {
      long long v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Invalid network");
      __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    id v10 = *(std::__shared_weak_count **)(v8 + 24);
    long long v26 = *(void (****)(uint64_t *__return_ptr, void))(v8 + 16);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v28 = v10;
    if (a3)
    {
      uint64_t v11 = *(void *)a3;
      std::string::size_type v33 = v8;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::auto_add_auto_temporal_smoothing_before_softmaxes((uint64_t *)&v33, v11, &v34);
      if (v35) {
        nitro::nitro_function::nitro_function(v35);
      }
      if (*((void *)&v33 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v33 + 1));
      }
      uint64_t v12 = *(void *)(v30 + 32);
      if (*(void *)(v30 + 40) != v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        do
        {
          uint64_t v15 = (uint64_t *)(v12 + v13);
          uint64_t v17 = *v15;
          int v16 = (std::__shared_weak_count *)v15[1];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v18 = *(const void **)(v17 + 64);
          if (v18)
          {
            if (v19)
            {
              int v20 = *(std::__shared_weak_count **)(v17 + 72);
              if (v20) {
                atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v21 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v19 + 320))(v19);
              _DWORD *v21 = *(_DWORD *)a3;
              v21[1] = *(_DWORD *)(a3 + 4);
              if (v20) {
                nitro::nitro_function::nitro_function(v20);
              }
            }
          }
          if (v16) {
            nitro::nitro_function::nitro_function(v16);
          }
          ++v14;
          uint64_t v12 = *(void *)(v30 + 32);
          v13 += 16;
        }
        while (v14 < (*(void *)(v30 + 40) - v12) >> 4);
      }
    }
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3321888768;
    _OWORD v31[2] = ___ZN13EspressoLight13espresso_plan20temporal_state_resetEiP37espresso_temporal_smoothing_options_t_block_invoke;
    void v31[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
    std::string::size_type v32 = v30;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = v27;
    Espresso::abstract_context::compute_batch_sync(v26, v31);
    if (*((void *)&v32 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v32 + 1));
    }
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 4294967290;
  }
  return v22;
}

void sub_192767FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a2 == 1)
  {
    long long v25 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v22, v25);
    __cxa_end_catch();
    JUMPOUT(0x192767F10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_plan_set_execution_queue(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    int v5 = v3;
    uint64_t v6 = (_DWORD *)a1[133];
    int v7 = v6[40];
    if (v7) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
    }
    if ((***(unsigned int (****)(void))(*(void *)v6 + 8))(*(void *)(*(void *)v6 + 8)) >> 1 != 5003) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Setting the execution queue is not supported on this engine.");
    }
    uint64_t v8 = a1[133];
    id v9 = *(void **)(v8 + 168);
    *(void *)(v8 + 168) = v5;

    if (v5)
    {
      dispatch_queue_t v10 = dispatch_queue_create_with_target_V2("com.espresso.multi_buffers_ane_q", 0, v5);
      uint64_t v11 = a1[133];
      uint64_t v12 = *(void **)(v11 + 192);
      *(void *)(v11 + 192) = v10;
    }
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 4294967290;
  }

  return v13;
}

void sub_1927681D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1927681E8(void *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v6 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v2, v6);
    __cxa_end_catch();
    JUMPOUT(0x19276819CLL);
  }
  JUMPOUT(0x1927681DCLL);
}

void sub_192768220()
{
}

uint64_t espresso_plan_submit_set_multiple_buffering(void *a1, unint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x192FF2020]();
  if (a1)
  {
    uint64_t v6 = 4294967290;
    if (a2 && v5)
    {
      uint64_t v7 = a1[133];
      if (*(_DWORD *)(v7 + 160))
      {
        uint64_t v6 = 4294967291;
      }
      else
      {
        EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::set_n_async_buffers((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(v7 + 192), a2);
        uint64_t v6 = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = 4294967290;
  }
  return v6;
}

uint64_t espresso_plan_submit_camera(void *a1, void *a2)
{
  void (***v11)(void **__return_ptr, void, uint64_t);
  void (***v12)(void **__return_ptr, void, uint64_t);
  std::__shared_weak_count *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  long long v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t **i;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  const void *v30;
  std::__shared_weak_count *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  std::runtime_error *v36;
  const char *v37;
  std::runtime_error *exception;
  std::__shared_weak_count *v39;
  id v40;
  void *v41;
  long long v42;
  std::string v43;
  void *v44;
  id v45;
  void *v46;
  long long v47;
  unint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  long long v51;
  uint64_t v52[2];
  void *lpsrc;
  std::__shared_weak_count *v54;
  void v55[9];
  _DWORD v56[5];

  id v3 = a2;
  if (!a1
  {
    uint64_t v15 = 4294967290;
    goto LABEL_57;
  }
  id v4 = v3;
  uint64_t v5 = a1[133];
  int v6 = *(_DWORD *)(v5 + 160);
  if (v6 != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v6);
  }
  if (!v4)
  {
    int v37 = "A client cannot determine when the data is ready without the callback.";
    goto LABEL_65;
  }
  if (!*(void *)(v5 + 176))
  {
    int v37 = "Missing execution queue";
LABEL_65:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v37);
  }
  long long v40 = v3;
  long long v41 = v4;
  uint64_t v8 = *(uint64_t **)(v5 + 24);
  uint64_t v7 = *(uint64_t **)(v5 + 32);
  if (v7 == v8)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v43, "Plan is empty");
    std::runtime_error::runtime_error(exception, &v43);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -6;
  }
  uint64_t v9 = *v8;
  dispatch_queue_t v10 = *(const void **)(*v8 + 16);
  if (!v10
  {
    uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v43, "The Engine must be ANE_RUNTIME");
    std::runtime_error::runtime_error(v36, &v43);
    v36->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(v36[1].__vftable) = -6;
  }
  uint64_t v12 = v11;
  uint64_t v13 = *(std::__shared_weak_count **)(v9 + 24);
  long long v39 = v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v14 = (void *)a1[133];
    uint64_t v8 = (uint64_t *)v14[3];
    uint64_t v7 = (uint64_t *)v14[4];
  }
  else
  {
    unint64_t v14 = (void *)v5;
  }
  int v16 = 0;
  atomic_compare_exchange_strong(v14 + 51, (unint64_t *)&v16, ((char *)v7 - (char *)v8) >> 4);
  if (v16) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("A plan cannot be run again until all of its networks are executed.");
  }
  uint64_t v17 = *(void *)(a1[133] + 144);
  LOBYTE(v55[0]) = *(unsigned char *)(**(void **)(v5 + 24) + 1352);
  memset((char *)v55 + 4, 0, 68);
  if (LOBYTE(v55[0]))
  {
    v55[1] = v17;
    memset(&v55[2], 0, 24);
    v55[5] = v17;
    memset(&v55[6], 0, 24);
    HIDWORD(v55[0]) = 723714160;
    kdebug_trace();
  }
  (**v12)(&lpsrc, v12, v17);
  uint64_t v18 = *(void **)(v5 + 24);
  if (v18 != *(void **)(v5 + 32)) {
    (*(void (**)(void *, void))(*(void *)lpsrc + 48))(lpsrc, *v18);
  }
  EspressoLight::plan_task_t::disable_memory_lingering_if_needed(*(void **)(a1[133] + 144), lpsrc);
  __int16 v19 = *(void *)(v5 + 24);
  if (*(void *)(v5 + 32) != v19)
  {
    int v20 = 0;
    while (1)
    {
      uint64_t v21 = *(_OWORD *)(v19 + 16 * v20);
      long long v42 = v21;
      uint64_t v22 = *(std::__shared_weak_count **)(v19 + 16 * v20 + 8);
      if (*((void *)&v21 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = a1[133];
      v56[0] = v20;
      for (unint64_t i = (uint64_t **)*((void *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(v23 + 144) + 232), v20, v56)+ 7); i; unint64_t i = (uint64_t **)*i)
        (*(void (**)(uint64_t *, void **))(*i[2] + 168))(i[2], &lpsrc);
      long long v25 = a1[133];
      long long v26 = *(std::__shared_weak_count **)(v25 + 152);
      v52[0] = *(void *)(v25 + 144);
      v52[1] = (uint64_t)v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v51 = v42;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      EspressoLight::espresso_plan::__copy_inputs(v52, (uint64_t)&lpsrc, v20, (uint64_t *)&v51);
      if (*((void *)&v51 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v51 + 1));
      }
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
      long long v27 = (***(uint64_t (****)(void))(*(void *)(v42 + 16) + 8))(*(void *)(*(void *)(v42 + 16) + 8));
      int v28 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(v42 + 528), v27);
      if (!v28) {
        goto LABEL_60;
      }
      uint64_t v29 = v28;
      char v30 = (const void *)v28[3];
      uint64_t v31 = (std::__shared_weak_count *)v29[4];
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v30) {
        break;
      }
      if (!v32) {
        break;
      }
      std::string::size_type v33 = (uint64_t)v32;
      if (v31)
      {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v31);
      }
      long long v34 = *(void **)(a1[133] + 176);
      v43.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      v43.__r_.__value_.__l.__size_ = 3321888768;
      v43.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN13EspressoLight13espresso_plan13submit_cameraEU13block_pointerFv18espresso_network_tP21espresso_error_info_tE_block_invoke;
      std::string v44 = &unk_1EE38F168;
      std::string v46 = a1;
      int v47 = v42;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v48 = v20;
      uint64_t v45 = v41;
      uint64_t v49 = lpsrc;
      std::string v50 = v54;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANERuntimeEngine::compiler::forward_single_ane_segment(v33, (uint64_t *)&lpsrc, v34, &v43);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }

      if (*((void *)&v47 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v47 + 1));
      }
      if (v31) {
        nitro::nitro_function::nitro_function(v31);
      }
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      ++v20;
      __int16 v19 = *(void *)(v5 + 24);
      if (v20 >= (*(void *)(v5 + 32) - v19) >> 4) {
        goto LABEL_52;
      }
    }
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
LABEL_60:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network missing compiler");
  }
LABEL_52:
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v55);
  id v3 = v40;
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }

  uint64_t v15 = 0;
LABEL_57:

  return v15;
}

void sub_19276898C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  if (a21 < 0)
  {
    operator delete(__p);
    long long v41 = a12;
    if ((v36 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v41 = a12;
    if (!v36)
    {
LABEL_6:

      if (a2 == 1)
      {
        long long v42 = (std::exception *)__cxa_begin_catch(a1);
        handle_ex_plan(v37, v42);
        __cxa_end_catch();
        JUMPOUT(0x192768814);
      }

      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v38);
  goto LABEL_6;
}

void sub_192768B20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
}

void sub_192768B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192768B50()
{
}

uint64_t espresso_dump_ir(void *a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x192FF2020]();
  if (a1)
  {
    uint64_t v6 = 4294967290;
    if (a2 && v5)
    {
      long long v24 = v4;
      uint64_t v7 = (uint64_t)std::string::basic_string[abi:ne180100]<0>(__p, *(char **)a2);
      uint64_t v9 = (void *)a1[133];
      if (*(unsigned char *)(*v9 + 124))
      {
        dispatch_queue_t v10 = (uint64_t *)v9[3];
        uint64_t v11 = (uint64_t *)v9[4];
        if (v10 != v11)
        {
          do
          {
            uint64_t v12 = *v10;
            uint64_t v13 = (std::__shared_weak_count *)v10[1];
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v14 = (***(uint64_t (****)(void))(*(void *)(v12 + 16) + 8))(*(void *)(*(void *)(v12 + 16)
                                                                                                  + 8));
            uint64_t v15 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(v12 + 528), v14);
            if (v15)
            {
              int v16 = (std::__shared_weak_count *)v15[4];
              if (v16) {
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              int v16 = 0;
            }
            if (*(char *)(v12 + 471) < 0)
            {
              if (!*(void *)(v12 + 456))
              {
LABEL_24:
                unsigned int v19 = (***(uint64_t (****)(void))(*(void *)(v12 + 16) + 8))(*(void *)(*(void *)(v12 + 16) + 8));
                uint64_t v7 = (uint64_t)std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(v12 + 528), v19);
                if (v7)
                {
                  uint64_t v20 = v7;
                  uint64_t v7 = *(void *)(v7 + 24);
                  uint64_t v21 = *(std::__shared_weak_count **)(v20 + 32);
                  if (v21) {
                    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v7) {
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, __p);
                  }
                  if (v21) {
                    nitro::nitro_function::nitro_function(v21);
                  }
                }
                char v17 = 0;
                if (!v16) {
                  goto LABEL_16;
                }
LABEL_15:
                nitro::nitro_function::nitro_function(v16);
                goto LABEL_16;
              }
            }
            else if (!*(unsigned char *)(v12 + 471))
            {
              goto LABEL_24;
            }
            uint64_t v7 = printf("Dump_directory detected, IR already generated during plan_build");
            char v17 = 1;
            if (v16) {
              goto LABEL_15;
            }
LABEL_16:
            if (v13) {
              nitro::nitro_function::nitro_function(v13);
            }
            v10 += 2;
            if (v10 == v11) {
              char v18 = 1;
            }
            else {
              char v18 = v17;
            }
          }
          while ((v18 & 1) == 0);
        }
      }
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      id v4 = v24;
      if (*(unsigned char *)(a2 + 8) && !*(unsigned char *)(*(void *)a1[133] + 124))
      {
        uint64_t v22 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_error_impl(&dword_1920CB000, v22, OS_LOG_TYPE_ERROR, "Primary context is not associated with a compiler. Cannot dump ir. It's possible that the model was forced to CPU due to an unsupported feature for the requested compilation platform (i.e. control flow or dynamic allocation)", (uint8_t *)__p, 2u);
        }

        uint64_t v6 = 4294967291;
      }
      else
      {
        uint64_t v6 = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = 4294967290;
  }
  return v6;
}

void sub_192768E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2 == 1)
  {
    char v17 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v16, v17);
    __cxa_end_catch();
    JUMPOUT(0x192768DD0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_compiler_set_metadata_key(const void *a1, int a2, uint64_t a3)
{
  if (!a1
  {
    return 4294967290;
  }
  memset(&__str, 0, sizeof(__str));
  if (a3) {
    MEMORY[0x192FF0F50](&__str, a3);
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v8);
  if (v8)
  {
    std::string::operator=((std::string *)(v8 + 728), &__str);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 4294967291;
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_192768FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *espresso_get_internal_queue(void *result)
{
  if (result)
  {
    if (*result == 0x50FBC8A8A6F7B03CLL)
    {
      uint64_t result = *(void **)result[2];
      if (result)
      {
        if (result) {
          return (void *)result[24];
        }
      }
    }
    else
    {
      EspressoLight::very_bad_client((EspressoLight *)result);
      return 0;
    }
  }
  return result;
}

uint64_t espresso_recommended_device_id()
{
  return 0xFFFFFFFFLL;
}

void dump_test_vector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (!*a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected null network");
    goto LABEL_121;
  }
  uint64_t v2 = *(void *)(*a1 + 16);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected null context");
LABEL_121:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)(v2 + 44)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = getenv("ESPRESSO_LITE_TEST_VECTORS") == 0;
  }
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (uint64_t *)*a2;
  }
  uint64_t v96 = [NSString stringWithUTF8String:v6];
  char v119 = 0;
  uint64_t v7 = [MEMORY[0x1E4F28CB8] defaultManager];
  char v8 = [v7 fileExistsAtPath:v96 isDirectory:&v119];

  if (v8)
  {
    char v9 = 1;
  }
  else
  {
    dispatch_queue_t v10 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v118 = 0;
    [v10 createDirectoryAtPath:v96 withIntermediateDirectories:1 attributes:0 error:&v118];
    id v11 = v118;

    uint64_t v12 = [MEMORY[0x1E4F28CB8] defaultManager];
    char v9 = [v12 fileExistsAtPath:v96 isDirectory:&v119];
  }
  if (!v119 || (v9 & 1) == 0)
  {
    std::string v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v79, &v113);
    __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::size_type v100 = objc_opt_new();
  id v92 = [v96 stringByAppendingPathComponent:@"blobs.bin"];
  id v93 = [v96 stringByAppendingPathComponent:@"test_vector.json"];
  id v94 = [v96 stringByAppendingPathComponent:@"test_vector.plist"];
  id v95 = v92;
  __streauint64_t m = fopen((const char *)[v95 UTF8String], "wb");
  if (!__stream)
  {
    std::string v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v117, (char *)[v95 UTF8String]);
    std::string v81 = std::string::insert(&v117, 0, "Cannot create file: ");
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v113.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v80, &v113);
    __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memset(&v117, 0, sizeof(v117));
  v116[0] = 0;
  v116[1] = 0;
  long long v115 = v116;
  uint64_t v13 = *a1;
  if (*(void *)(*a1 + 40) != *(void *)(*a1 + 32))
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = 0;
      for (unint64_t i = 0; ; ++i)
      {
        v113.__r_.__value_.__r.__words[0] = v14;
        char v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13 + 56, v14, &v113);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17[4] - v17[3]) >> 3) <= i) {
          break;
        }
        uint64_t v18 = *a1 + 56;
        v113.__r_.__value_.__r.__words[0] = v14;
        unsigned int v19 = (long long *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, v14, &v113)[3]+ v15);
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v19, *((void *)v19 + 1));
        }
        else
        {
          long long v20 = *v19;
          v124.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v20;
        }
        if (v5
          || (uint64_t v21 = *a1,
              std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*a1 + 240), &v124))|| std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v21 + 264), &v124))
        {
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
          if (!std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v115, &v124, (long long **)&v111)[56])
          {
            Espresso::net::get_blob_or_global_with_prefix(*a1, &v124, &v111);
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v113, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
            }
            else {
              std::string v113 = v124;
            }
            long long v114 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
            std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::push_back[abi:ne180100]((void **)&v117.__r_.__value_.__l.__data_, (long long *)&v113);
            if (*((void *)&v114 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v114 + 1));
            }
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v113.__r_.__value_.__l.__data_);
            }
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
            std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v115, &v124, (long long **)&v111)[56] = 1;
          }
        }
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        uint64_t v13 = *a1;
        v15 += 24;
      }
      uint64_t v22 = 0;
      for (unint64_t j = 0; ; ++j)
      {
        uint64_t v24 = *a1 + 96;
        v113.__r_.__value_.__r.__words[0] = v14;
        long long v25 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v14, &v113);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v25 + 4) - *((void *)v25 + 3)) >> 3) <= j) {
          break;
        }
        uint64_t v28 = *a1 + 96;
        v113.__r_.__value_.__r.__words[0] = v14;
        uint64_t v29 = (long long *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28, v14, &v113)[3]+ v22);
        if (*((char *)v29 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v29, *((void *)v29 + 1));
        }
        else
        {
          long long v30 = *v29;
          v124.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v30;
        }
        uint64_t v31 = *a1;
        if (v5
          || std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v31 + 240), &v124)|| std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v31 + 264), &v124))
        {
          Espresso::net::get_blob_or_global_with_prefix(v31, &v124, &v111);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v113, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
          }
          else {
            std::string v113 = v124;
          }
          long long v114 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
          std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::push_back[abi:ne180100]((void **)&v117.__r_.__value_.__l.__data_, (long long *)&v113);
          if (*((void *)&v114 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v114 + 1));
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v22 += 24;
      }
      ++v14;
      uint64_t v13 = *a1;
    }
    while (v14 < (uint64_t)(*(void *)(*a1 + 40) - *(void *)(*a1 + 32)) >> 4);
    std::string::size_type size = v117.__r_.__value_.__l.__size_;
    std::string::size_type v32 = v117.__r_.__value_.__r.__words[0];
    if (v117.__r_.__value_.__r.__words[0] != v117.__r_.__value_.__l.__size_)
    {
      uint64_t v109 = 0;
      *(void *)&long long v27 = 136315138;
      long long v91 = v27;
      do
      {
        if (*(char *)(v32 + 23) < 0)
        {
          std::string::size_type v34 = v32;
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v32, *(void *)(v32 + 8));
          std::string::size_type v32 = v34;
        }
        else
        {
          long long v33 = *(_OWORD *)v32;
          v113.__r_.__value_.__r.__words[2] = *(void *)(v32 + 16);
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v33;
        }
        uint64_t v36 = *(void *)(v32 + 24);
        uint64_t v35 = *(void *)(v32 + 32);
        *(void *)&long long v114 = v36;
        *((void *)&v114 + 1) = v35;
        std::string::size_type v101 = v32;
        if (v35
          && (atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed),
              uint64_t v36 = v114,
              *((void *)&v114 + 1)))
        {
          char v107 = 0;
          std::string v108 = (std::__shared_weak_count *)*((void *)&v114 + 1);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v114 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        else
        {
          char v107 = 1;
          std::string v108 = 0;
        }
        int v37 = Espresso::espresso_os_log_subsystem(v25, v26);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          int v68 = &v113;
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v68 = (std::string *)v113.__r_.__value_.__r.__words[0];
          }
          LODWORD(v124.__r_.__value_.__l.__data_) = v91;
          *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
          _os_log_debug_impl(&dword_1920CB000, v37, OS_LOG_TYPE_DEBUG, "blob: %s\n", (uint8_t *)&v124, 0xCu);
        }

        v112[0] = v36;
        v112[1] = v108;
        if ((v107 & 1) == 0) {
          atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::sync_copy_to_host(&v124, v112);
        long long v38 = *(_OWORD *)&v124.__r_.__value_.__l.__data_;
        if (v108) {
          nitro::nitro_function::nitro_function(v108);
        }
        v123[0] = @"blobs.bin";
        v122[0] = @"binary_file";
        v122[1] = @"offset";
        std::string v104 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", v109, v91);
        v123[1] = v104;
        v122[2] = @"w";
        std::string v102 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 8)];
        v123[2] = v102;
        v122[3] = @"h";
        v123[3] = [NSNumber numberWithInt:*(unsigned int *)(v114 + 12)];
        v122[4] = @"k";
        long long v39 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 16)];
        v123[4] = v39;
        v122[5] = @"n";
        long long v40 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 20)];
        v123[5] = v40;
        v122[6] = @"seq";
        long long v41 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 24)];
        uint64_t v42 = 0;
        v123[6] = v41;
        v122[7] = @"size";
        uint64_t v43 = *(int *)(v38 + 8);
        do
        {
          v43 *= *(int *)(v38 + 12 + v42);
          v42 += 4;
        }
        while (v42 != 12);
        std::string v44 = [NSNumber numberWithUnsignedLong:4 * v43];
        v123[7] = v44;
        uint64_t v45 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v123 forKeys:v122 count:8];
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v46 = &v113;
        }
        else {
          std::string v46 = (std::string *)v113.__r_.__value_.__r.__words[0];
        }
        int v47 = [NSString stringWithUTF8String:v46];
        [v100 setObject:v45 forKeyedSubscript:v47];

        uint64_t v48 = 0;
        uint64_t v49 = *(int *)(v38 + 8);
        do
        {
          v49 *= *(int *)(v38 + 12 + v48);
          v48 += 4;
        }
        while (v48 != 12);
        if (fwrite(*(const void **)(v38 + 24), 4 * v49, 1uLL, __stream) != 1)
        {
          std::string::size_type v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v111, (char *)[v95 UTF8String]);
          std::string v73 = std::string::insert(&v111, 0, "Cannot write file: ");
          long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v72, &v124);
          __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        for (uint64_t k = 0; k != 12; k += 4)
          uint64_t v51 = *((void *)&v38 + 1) * *(int *)(v38 + 12 + k);
        if (*((void *)&v38 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v38 + 1));
        }
        size_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 128))(v36);
        size_t v53 = v52;
        v109 += 4 * v51;
        if (v52)
        {
          uint64_t v54 = malloc_type_malloc(v52, 0xD3E3DF1DuLL);
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(uint64_t, std::string *, void *))(*(void *)v36 + 112))(v36, &v124, v54);
          if (v124.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v124.__r_.__value_.__l.__size_);
          }
          v120[0] = @"binary_file";
          v120[1] = @"raw";
          v121[0] = @"blobs.bin";
          v121[1] = MEMORY[0x1E4F1CC38];
          v120[2] = @"offset";
          uint64_t v55 = [NSNumber numberWithUnsignedLongLong:v109];
          id v121[2] = v55;
          v120[3] = @"w";
          uint64_t v56 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 8)];
          v121[3] = v56;
          v120[4] = @"h";
          uint64_t v57 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 12)];
          v121[4] = v57;
          v120[5] = @"k";
          std::string v103 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 16)];
          std::string v105 = (void *)v56;
          v121[5] = v103;
          v120[6] = @"n";
          std::string v106 = (void *)v55;
          unsigned __int8 v98 = (void *)v57;
          long long v58 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 20)];
          v121[6] = v58;
          v120[7] = @"seq";
          unint64_t v59 = [NSNumber numberWithInt:*(unsigned int *)(v114 + 24)];
          v121[7] = v59;
          v120[8] = @"size";
          unint64_t v60 = [NSNumber numberWithUnsignedLong:v53];
          v121[8] = v60;
          long long v61 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v121 forKeys:v120 count:9];
          std::string::size_type v62 = NSString;
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v63 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v63 = v113.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v124, v63 + 7);
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v64 = &v124;
          }
          else {
            long long v64 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          if (v63)
          {
            if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v65 = &v113;
            }
            else {
              std::string::size_type v65 = (std::string *)v113.__r_.__value_.__r.__words[0];
            }
            memmove(v64, v65, v63);
          }
          strcpy((char *)v64 + v63, "__raw__");
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v66 = &v124;
          }
          else {
            std::string::size_type v66 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          uint64_t v67 = [v62 stringWithUTF8String:v66];
          [v100 setObject:v61 forKeyedSubscript:v67];

          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }

          if (fwrite(v54, v53, 1uLL, __stream) != 1)
          {
            std::string v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v111, (char *)[v95 UTF8String]);
            int v76 = std::string::insert(&v111, 0, "Cannot write file: ");
            long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            v124.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v75, &v124);
            __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          free(v54);
          v109 += v53;
        }
        if ((v107 & 1) == 0) {
          nitro::nitro_function::nitro_function(v108);
        }
        long long v25 = (Espresso *)*((void *)&v114 + 1);
        if (*((void *)&v114 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v114 + 1));
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        std::string::size_type v32 = v101 + 40;
      }
      while (v101 + 40 != size);
    }
  }
  fclose(__stream);
  id v69 = v100;
  id v110 = 0;
  std::string v70 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v69 options:1 error:&v110];
  id v71 = v110;
  if (([v70 writeToFile:v93 atomically:1] & 1) == 0)
  {
    std::string v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string v84 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v124, (char *)[v93 UTF8String]);
    std::string v85 = std::string::insert(v84, 0, "Cannot write file: ");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v113.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v83, &v113);
    __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (([v69 writeToFile:v94 atomically:1] & 1) == 0)
  {
    uint64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::size_type v88 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v124, (char *)[v94 UTF8String]);
    uint64_t v89 = std::string::insert(v88, 0, "Cannot write file: ");
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v113.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v87, &v113);
    __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  std::__tree<std::string>::destroy((uint64_t)&v115, v116[0]);
  v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
}

void sub_19276A1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if ((v62 & 1) == 0) {
    nitro::nitro_function::nitro_function(v63);
  }
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)v64);
  std::__tree<std::string>::destroy((uint64_t)v65, v65[1]);
  v64[0] = &v66;
  std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::__destroy_vector::operator()[abi:ne180100](v64);

  _Unwind_Resume(a1);
}

void sub_19276A4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    nitro::nitro_function::nitro_function(a30);
  }
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  std::__tree<std::string>::destroy((uint64_t)v37, v37[1]);
  uint64_t v36 = &v38;
  std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::__destroy_vector::operator()[abi:ne180100](&v36);

  JUMPOUT(0x19276A5A4);
}

void sub_19276A550()
{
}

void std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::push_back[abi:ne180100](void **a1, long long *a2)
{
  id v4 = (char *)a1[1];
  BOOL v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v9 = 0x666666666666666;
    }
    if (v9 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 5 * v9;
    uint64_t v12 = (char *)operator new(40 * v9);
    uint64_t v13 = &v12[40 * v8];
    unint64_t v14 = &v12[8 * v11];
    *(_OWORD *)uint64_t v13 = *a2;
    *((void *)v13 + 2) = *((void *)a2 + 2);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v13 + 24) = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 2) = 0;
    uint64_t v7 = v13 + 40;
    uint64_t v15 = (char *)*a1;
    int v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
    }
    else
    {
      do
      {
        long long v17 = *(_OWORD *)(v16 - 40);
        *((void *)v13 - 3) = *((void *)v16 - 3);
        *(_OWORD *)(v13 - 40) = v17;
        *((void *)v16 - 4) = 0;
        *((void *)v16 - 3) = 0;
        *((void *)v16 - 5) = 0;
        *((_OWORD *)v13 - 1) = *((_OWORD *)v16 - 1);
        v13 -= 40;
        *((void *)v16 - 2) = 0;
        *((void *)v16 - 1) = 0;
        v16 -= 40;
      }
      while (v16 != v15);
      int v16 = (char *)*a1;
      uint64_t v18 = (uint64_t)a1[1];
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
      while ((char *)v18 != v16)
      {
        v18 -= 40;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>(v18);
      }
    }
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v4 + 2) = *((void *)a2 + 2);
    *(_OWORD *)id v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v4 + 24) = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    uint64_t v7 = v4 + 40;
  }
  a1[1] = v7;
}

void std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>(v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t espresso_network_dump_test_vector(const void *a1, int a2, char *a3)
{
  if (!a1) {
    return 4294967290;
  }
  uint64_t v7 = 4294967290;
  if (a3 && v6)
  {
    Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v13);
    unint64_t v8 = (std::__shared_weak_count *)v14;
    v12[0] = v13;
    v12[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    dump_test_vector(v12, (uint64_t *)__p);
    if (v11 < 0)
    {
      operator delete(__p[0]);
      if (v8) {
        goto LABEL_8;
      }
    }
    else if (v8)
    {
LABEL_8:
      nitro::nitro_function::nitro_function(v8);
      uint64_t v7 = 0;
      nitro::nitro_function::nitro_function(v8);
      return v7;
    }
    return 0;
  }
  return v7;
}

void sub_19276A8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (a2 == 1)
  {
    uint64_t v23 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v19, v23);
    __cxa_end_catch();
    if (!a19) {
      JUMPOUT(0x19276A8A8);
    }
    JUMPOUT(0x19276A884);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(exception_object);
}

Espresso *espresso_context_create_for_cpu_test_vectors()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t context = (Espresso *)espresso_create_context(1u, -1);
  uint64_t v2 = Espresso::espresso_os_log_subsystem(context, v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 134217984;
    BOOL v5 = context;
    _os_log_debug_impl(&dword_1920CB000, v2, OS_LOG_TYPE_DEBUG, "Creating test vectors context %zu", (uint8_t *)&v4, 0xCu);
  }

  espresso_enable_test_vector_mode((uint64_t **)context, 1);
  return context;
}

uint64_t espresso_enable_test_vector_mode(uint64_t **a1, char a2)
{
  Espresso::get_internal_context(a1, &v6);
  uint64_t v3 = v6;
  if (v6)
  {
    uint64_t v4 = 0;
    if (!getenv("ESPRESSO_LITE_TEST_VECTORS")) {
      *(unsigned char *)(v3 + 44) = a2 ^ 1;
    }
  }
  else
  {
    uint64_t v4 = 4294967290;
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return v4;
}

uint64_t c_network_get_input_names(const void *a1, int a2, uint64_t a3)
{
  if (!a1
  {
    return 4294967290;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v8);
  if (v8 + 640 != a3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(std::string **)(v8 + 640), *(std::string **)(v8 + 648), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 648) - *(void *)(v8 + 640)) >> 3));
  }
  uint64_t v6 = 0;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  return v6;
}

uint64_t c_network_get_output_names(const void *a1, int a2, uint64_t a3)
{
  if (!a1
  {
    return 4294967290;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v8);
  if (v8 + 664 != a3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(std::string **)(v8 + 664), *(std::string **)(v8 + 672), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 672) - *(void *)(v8 + 664)) >> 3));
  }
  uint64_t v6 = 0;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  return v6;
}

uint64_t espresso_set_image_preprocessing_params(void *a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (!a1
  {
    return 4294967290;
  }
  if (*(_DWORD *)(a1[133] + 160)) {
    return 4294967291;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v25);
  memset(&v24, 0, sizeof(v24));
  if (a3)
  {
    MEMORY[0x192FF0F50](&v24, a3);
    unint64_t v10 = (uint64_t **)v25;
LABEL_11:
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v10[30], &v24)&& (*(void *)&long long v23 = &v24, std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 29, &v24, (long long **)&v23)[56]))
    {
      if (a4)
      {
        long long v23 = 0uLL;
        int v12 = *((unsigned __int8 *)a4 + 16);
        int v13 = *((_DWORD *)a4 + 2);
        int v14 = *((_DWORD *)a4 + 3);
        uint64_t v15 = *a4;
        long long v27 = &v24;
        int v16 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 41, &v24, (uint64_t)&std::piecewise_construct, (long long **)&v27);
        uint64_t v8 = 0;
        *((_DWORD *)v16 + 14) = v14;
        *(void *)(v16 + 60) = 0x100000000;
        *((_DWORD *)v16 + 17) = v12;
        *((void *)v16 + 9) = v15;
        *((_DWORD *)v16 + 20) = v13;
        *((_DWORD *)v16 + 21) = 0;
        *(_OWORD *)(v16 + 88) = v23;
        __asm { FMOV            V0.2S, #1.0 }
        *((void *)v16 + 13) = _D0;
        *((void *)v16 + 14) = 0;
        *((void *)v16 + 15) = 0;
        *((_DWORD *)v16 + 32) = 0;
      }
      else
      {
        uint64_t v22 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v10 + 41), &v24);
        if (v10 + 42 == v22)
        {
          uint64_t v8 = 4294967290;
        }
        else
        {
          std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(v10 + 41, (uint64_t)v22);
          uint64_t v8 = 0;
        }
      }
    }
    else
    {
      uint64_t v8 = 4294967288;
    }
    goto LABEL_20;
  }
  unint64_t v10 = (uint64_t **)v25;
  char v11 = *(const std::string **)(v25 + 640);
  if (*(const std::string **)(v25 + 648) != v11)
  {
    std::string::operator=(&v24, v11);
    goto LABEL_11;
  }
  uint64_t v8 = 4294967291;
LABEL_20:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  return v8;
}

void sub_19276AEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    BOOL v5 = (void *)a2;
    do
    {
      uint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      BOOL v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }

  operator delete((void *)a2);
}

uint64_t espresso_blob_set_int_option(uint64_t a1, int a2, char *a3, char *__s1, int a5)
{
  if (strncmp(__s1, "no_alpha_premultiply", 0x100uLL)) {
    return 4294967290;
  }
  Espresso::get_internal_network(a1, a2, (uint64_t)&v17);
  uint64_t v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v10 + 240), __p);
  uint64_t v12 = v11;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v12) {
      goto LABEL_5;
    }
  }
  else if (v11)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    unsigned int v19 = __p;
    int v13 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 328), __p, (_OWORD **)&v19);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = 0;
    *((_DWORD *)v13 + 32) = a5;
    goto LABEL_10;
  }
  uint64_t v9 = 4294967288;
LABEL_10:
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  return v9;
}

void sub_19276B0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

char *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  BOOL v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v16, a2);
  BOOL v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    BOOL v6 = (char *)operator new(0x88uLL);
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    *((_OWORD *)v6 + 2) = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    _DWORD v8[2] = 0;
    *((_DWORD *)v6 + 14) = 1065353216;
    *((_DWORD *)v6 + 21) = 0;
    *(void *)(v6 + 68) = 0;
    *(void *)(v6 + 76) = 0;
    *(void *)(v6 + 60) = 0x100000000;
    *((_DWORD *)v6 + 32) = 0;
    *((void *)v6 + 14) = 0;
    *((void *)v6 + 15) = 0;
    *((void *)v6 + 11) = 0;
    *((void *)v6 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((void *)v6 + 13) = _D0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v16, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t **espresso_get_input_blob_name(uint64_t a1, int a2, unint64_t a3)
{
  Espresso::get_internal_network(a1, a2, (uint64_t)&v7);
  uint64_t v4 = *(void *)(v7 + 640);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v7 + 648) - v4) >> 3) <= a3)
  {
    BOOL v5 = 0;
  }
  else
  {
    BOOL v5 = (uint64_t **)(v4 + 24 * a3);
    if (*((char *)v5 + 23) < 0) {
      BOOL v5 = (uint64_t **)*v5;
    }
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v5;
}

uint64_t **espresso_get_output_blob_name(uint64_t a1, int a2, unint64_t a3)
{
  Espresso::get_internal_network(a1, a2, (uint64_t)&v7);
  uint64_t v4 = *(void *)(v7 + 664);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v7 + 672) - v4) >> 3) <= a3)
  {
    BOOL v5 = 0;
  }
  else
  {
    BOOL v5 = (uint64_t **)(v4 + 24 * a3);
    if (*((char *)v5 + 23) < 0) {
      BOOL v5 = (uint64_t **)*v5;
    }
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v5;
}

uint64_t espresso_context_set_int_option(EspressoLight *a1, char *__s1, uint64_t a3)
{
  if (!a1) {
    return 4294967290;
  }
  if (*(void *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(a1);
    return 4294967290;
  }
  if (!__s1) {
    return 4294967290;
  }
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v7 = *(Espresso::abstract_context **)v5;
  BOOL v6 = *(std::__shared_weak_count **)(v5 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = Espresso::abstract_context::set_generic_option(v7, __s1, a3);
  if (v8 | (*(unsigned int (**)(Espresso::abstract_context *, char *, uint64_t))(*(void *)v7 + 144))(v7, __s1, a3))uint64_t v9 = 0; {
  else
  }
    uint64_t v9 = 4294967290;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v9;
}

void sub_19276B390(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_set_function_name(const void *a1, uint64_t a2, char *a3)
{
  if (!a1
  {
    return 4294967290;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  uint64_t v5 = (*(uint64_t (**)(const void *, void **))(*(void *)a1 + 72))(a1, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_19276B474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_set_memory_pool_id(uint64_t a1, int a2, uint64_t a3)
{
  Espresso::get_internal_network(a1, a2, (uint64_t)v6);
  uint64_t v4 = (std::__shared_weak_count *)v6[1];
  *(void *)(v6[0] + 1360) = a3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return 0;
}

uint64_t espresso_set_breakpoint(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a1
  {
    uint64_t v5 = MEMORY[0x192FF2250](v4);
    BOOL v6 = (void *)a1[1];
    a1[1] = v5;

    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 4294967290;
  }

  return v7;
}

uint64_t Espresso::get_default_compute_path(uint64_t (***a1)(void))
{
  int v1 = (**a1)(a1);
  uint64_t result = 0;
  if (v1 > 50001)
  {
    unsigned int v3 = v1 - 50002;
    BOOL v4 = v3 > 6;
    int v5 = (1 << v3) & 0x49;
    if (v4 || v5 == 0) {
      return 1;
    }
  }
  else
  {
    if (!v1) {
      return result;
    }
    if (v1 != 5)
    {
      if (v1 == 100) {
        return result;
      }
      return 1;
    }
    return 4;
  }
  return result;
}

uint64_t espresso_get_default_storage_type(EspressoLight *a1)
{
  uint64_t v1 = 65552;
  if (!a1) {
    return v1;
  }
  if (*(void *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(a1);
    return v1;
  }
  unsigned int v3 = *(unsigned int (****)(void))(**((void **)a1 + 2) + 8);
  if ((**v3)(v3) == 5) {
    return 0x80000;
  }
  int v5 = (uint64_t *)*((void *)a1 + 2);
  uint64_t v6 = *v5;
  uint64_t v7 = (std::__shared_weak_count *)v5[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  default_compute_path = (Espresso::keys_translation *)Espresso::get_default_compute_path(*(uint64_t (****)(void))(v6 + 8));
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  return Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path(default_compute_path);
}

void sub_19276B6E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *espresso_create_plan_and_load_network(EspressoLight *a1, char a2, char *__s, void *a4)
{
  if (!a1) {
    return 0;
  }
  if (*(void *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(a1);
    return 0;
  }
  plauint64_t n = 0;
  if (__s && a4)
  {
    *a4 = 0;
    a4[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(v25, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, "code.nitroir");
    if ((v24 & 0x80u) == 0) {
      char v8 = __p;
    }
    else {
      char v8 = (void **)__p[0];
    }
    if ((v24 & 0x80u) == 0) {
      int64_t v9 = v24;
    }
    else {
      int64_t v9 = (int64_t)__p[1];
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v10 = v25;
    }
    else {
      uint64_t v10 = (void **)v25[0];
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v11 = v26;
    }
    else {
      uint64_t v11 = (uint64_t)v25[1];
    }
    if (v9)
    {
      if (v11 >= v9)
      {
        uint64_t v12 = (char *)v10 + v11;
        int v13 = *(char *)v8;
        uint64_t v14 = v11;
        uint64_t v15 = v10;
        do
        {
          uint64_t v16 = v14 - v9;
          if (v16 == -1) {
            break;
          }
          uint64_t v17 = (char *)memchr(v15, v13, v16 + 1);
          if (!v17) {
            break;
          }
          uint64_t v18 = v17;
          if (!memcmp(v17, v8, v9))
          {
            if (v18 != v12)
            {
              long long v20 = (unsigned char *)(v18 - (char *)v10);
              if (v18 - (char *)v10 != -1) {
                goto LABEL_29;
              }
            }
            break;
          }
          uint64_t v15 = (void **)(v18 + 1);
          uint64_t v14 = v12 - (v18 + 1);
        }
        while (v14 >= v9);
      }
    }
    else
    {
      long long v20 = 0;
LABEL_29:
      if (v20 == (unsigned char *)(v11 - v9)) {
        a2 |= 4u;
      }
    }
    plauint64_t n = (unsigned char *)espresso_create_plan(a1, a2);
    if (plan)
    {
      uint64_t default_storage_type = espresso_get_default_storage_type(a1);
      uint64_t v22 = (v26 & 0x80u) == 0 ? (char *)v25 : (char *)v25[0];
      if (espresso_plan_add_network(plan, v22, default_storage_type, (uint64_t)a4))
      {
        espresso_plan_destroy((std::string::size_type)plan);
        plauint64_t n = 0;
      }
    }
    if ((char)v24 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v26 < 0) {
      operator delete(v25[0]);
    }
  }
  return plan;
}

void sub_19276B8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_buffer_pack_tensor_shape(uint64_t a1, std::vector<int>::size_type __n, uint64_t a3)
{
  if (!a1) {
    return 4294967290;
  }
  std::vector<int>::size_type v4 = __n;
  if (__n) {
    BOOL v6 = a3 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  char v7 = v6;
  uint64_t result = 4294967290;
  if (__n <= 0xA && (v7 & 1) == 0)
  {
    *(void *)(a1 + 8) = __n;
    std::vector<int>::vector(&v26, __n);
    for (std::vector<int>::pointer i = v26.__begin_; v4; --v4)
      i[v4 - 1] = *(void *)(a3 - 8 + 8 * v4);
    v23[0] = 0;
    v23[1] = 0;
    int v24 = 0;
    uint64_t v10 = (char *)v26.__end_ - (char *)i;
    if (v26.__end_ != i)
    {
      uint64_t v11 = v10 >> 2;
      if ((unint64_t)(v10 >> 2) <= 1) {
        uint64_t v11 = 1;
      }
      uint64_t v12 = (int *)v23;
      do
      {
        int v13 = *i++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    int v25 = (unint64_t)v10 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v23, 0, (uint64_t)v19);
    v14[0] = v19[0];
    v14[1] = v19[1];
    uint64_t v15 = v20;
    std::string __p = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
    setup_espresso_buffer_with_shape(a1, (int *)v14);
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      uint64_t v22 = v21;
      operator delete(v21);
    }
    if (v26.__begin_)
    {
      v26.__end_ = v26.__begin_;
      operator delete(v26.__begin_);
    }
    return 0;
  }
  return result;
}

void sub_19276BA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  std::vector<int> v26 = *(void **)(v23 - 56);
  if (v26)
  {
    *(void *)(v23 - 48) = v26;
    operator delete(v26);
  }
  if (a2 == 1)
  {
    long long v27 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v27, v28);
    __cxa_end_catch();
    JUMPOUT(0x19276BA48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_destroy_global_ref(EspressoLight *a1)
{
  if (a1)
  {
    if (*(void *)a1 == 0xA17F78C9A32)
    {
      uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 2);
      if (v2) {
        nitro::nitro_function::nitro_function(v2);
      }
      MEMORY[0x192FF16B0](a1, 0x1020C4023CB03E4);
    }
    else
    {
      EspressoLight::very_bad_client(a1);
    }
  }
  return 0;
}

void espresso_network_swap_global(const void *a1, int a2, char *a3, uint64_t a4, void *a5)
{
  uint64_t v10 = (void *)MEMORY[0x192FF2020]();
  if (!a1) {
    goto LABEL_20;
  }
  if (!a3 || !v11) {
    goto LABEL_20;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v22);
  uint64_t v12 = v22;
  if (!v22)
  {
LABEL_18:
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
LABEL_20:
    return;
  }
  int v13 = (EspressoLight *)std::string::basic_string[abi:ne180100]<0>(__p, a3);
  if (!a5)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
LABEL_12:
    Espresso::net::swap_global(v12, (long long *)__p, &v16, &v20);
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v19 < 0)
    {
      operator delete(__p[0]);
      if (a4) {
LABEL_16:
      }
        operator new();
    }
    else if (a4)
    {
      goto LABEL_16;
    }
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    goto LABEL_18;
  }
  uint64_t v14 = (void *)*a5;
  if (*(void *)*a5 == 0xA17F78C9A32)
  {
    uint64_t v15 = (std::__shared_weak_count *)v14[2];
    uint64_t v16 = v14[1];
    uint64_t v17 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    goto LABEL_12;
  }
  EspressoLight::very_bad_client(v13);
  __break(1u);
}

void sub_19276BD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a2 == 1)
  {
    int v24 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v21, v24);
    __cxa_end_catch();
    JUMPOUT(0x19276BCC4);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_sync_copy_global(const void *a1, int a2, uint64_t a3, uint64_t a4)
{
  char v8 = (void *)MEMORY[0x192FF2020]();
  if (a1)
  {
    uint64_t v10 = 4294967290;
    if (a4 && a3 && v9)
    {
      Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v12);
      if (v12) {
        operator new();
      }
      uint64_t v10 = 4294967291;
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
    }
  }
  else
  {
    uint64_t v10 = 4294967290;
  }
  return v10;
}

void sub_19276BF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v22 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v19, v22);
    __cxa_end_catch();
    JUMPOUT(0x19276BEE0);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_bind_buffer_to_global(uint64_t *a1, uint64_t a2, const std::string::value_type *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (!a3) {
    return 4294967290;
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, Espresso::net::bind_global_prefix[0]);
  uint64_t v14 = std::string::append(&v19, a3);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v21 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v21 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  uint64_t v17 = espresso_network_bind_buffer(a1, a2, (uint64_t)v16, a4, a5, a6, a7);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  return v17;
}

void sub_19276C07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_unbind_buffer_to_global(uint64_t *a1, uint64_t a2, const std::string::value_type *a3, uint64_t a4)
{
  if (!a3) {
    return 4294967290;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, Espresso::net::bind_global_prefix[0]);
  char v8 = std::string::append(&v13, a3);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v15 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (v15 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  uint64_t v11 = espresso_network_unbind_buffer(a1, a2, (uint64_t)v10, a4);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_19276C174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_set_inference_weights(uint64_t a1, int a2, uint64_t a3, int a4)
{
  Espresso::get_internal_network(a1, a2, (uint64_t)&v97);
  uint64_t v6 = v97;
  Espresso::get_internal_network(a3, a4, (uint64_t)&v95);
  char v7 = v95;
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)v95);
  uint64_t v89 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v7);
  uint64_t v8 = *(void *)(v6 + 32);
  if (*(void *)(v6 + 40) != v8)
  {
    unint64_t v9 = 0;
    id v92 = v7 + 116;
    uint64_t v93 = (uint64_t)(v7 + 7);
    std::string::size_type v88 = v7;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v8 + 16 * v9);
      uint64_t v12 = *v10;
      uint64_t v11 = (std::__shared_weak_count *)v10[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v13 = *(const void **)(v12 + 64);
      if (!v13
      {
        goto LABEL_139;
      }
      uint64_t v14 = *(std::__shared_weak_count **)(v12 + 72);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v14);
      }
      int64_t v15 = (void *)(*(void *)(v6 + 32) + 16 * v9);
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v92, *v15 + 16))
      {
        uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v92, *v15 + 16);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        unint64_t v17 = v16[5];
      }
      else
      {
        unint64_t v17 = -1;
      }
      uint64_t v18 = (uint64_t *)(v7[4] + 16 * v17);
      uint64_t v20 = *v18;
      std::string v19 = (std::__shared_weak_count *)v18[1];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int64_t v21 = *(const void **)(v20 + 64);
      id v94 = v19;
      if (!v21) {
LABEL_182:
      }
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("Currently only supports networks where only inner product and convolution layers have weights");
      {
        break;
      }
      {
        std::vector<int> v26 = *(std::__shared_weak_count **)(v20 + 72);
        if (v26)
        {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          nitro::nitro_function::nitro_function(v26);
        }
        long long v27 = *(const void **)(v12 + 64);
        if (v27)
        {
          if (v28)
          {
            int v25 = *(std::__shared_weak_count **)(v12 + 72);
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            }
LABEL_84:
            v118.__r_.__value_.__r.__words[0] = v17;
            uint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v93, v17, &v118);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51[4] - v51[3]) >> 3) >= 2)
            {
              Espresso::get_layer_parameter_name((const void **)(v20 + 16), 1, &v117);
              uint64_t v52 = Espresso::net::loaded_global_name(v7, (uint64_t)&v117);
              if (*(char *)(v52 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v52, *(void *)(v52 + 8));
              }
              else
              {
                long long v53 = *(_OWORD *)v52;
                v118.__r_.__value_.__r.__words[2] = *(void *)(v52 + 16);
                *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v53;
              }
              if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v117.__r_.__value_.__l.__data_);
              }
              Espresso::net::get_global(&v117, (uint64_t)v7, (unsigned __int8 *)&v118);
              std::string::size_type size = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
              if (v117.__r_.__value_.__r.__words[0])
              {
                long long v106 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
                if (v117.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v117.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                long long v91 = v25;
                Espresso::sync_copy_to_host(&v115, &v106);
                if (size) {
                  nitro::nitro_function::nitro_function(size);
                }
                uint64_t v56 = v115;
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v109, v115[2], v115[3]);
                uint64_t v57 = 0;
                uint64_t v58 = v109;
                uint64_t v59 = v56[2];
                do
                {
                  v59 *= v56[v57 + 3];
                  ++v57;
                }
                while (v57 != 3);
                memcpy(*(void **)(v109 + 16), *((const void **)v56 + 3), 4 * v59);
                unint64_t v60 = v110;
                uint64_t v104 = v58;
                std::string v105 = v110;
                if (v110) {
                  atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                (*(void (**)(void *, uint64_t *))(*(void *)v28 + 400))(v28, &v104);
                if (v105) {
                  nitro::nitro_function::nitro_function(v105);
                }
                if (v60) {
                  nitro::nitro_function::nitro_function(v60);
                }
                if (v116) {
                  nitro::nitro_function::nitro_function(v116);
                }
                int v25 = v91;
              }
              if (size) {
                nitro::nitro_function::nitro_function(size);
              }
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v118.__r_.__value_.__l.__data_);
              }
            }
            v118.__r_.__value_.__r.__words[0] = v17;
            long long v61 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v93, v17, &v118);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61[4] - v61[3]) >> 3) >= 3)
            {
              Espresso::get_layer_parameter_name((const void **)(v20 + 16), 2, &v117);
              uint64_t v62 = Espresso::net::loaded_global_name(v7, (uint64_t)&v117);
              if (*(char *)(v62 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v62, *(void *)(v62 + 8));
              }
              else
              {
                long long v63 = *(_OWORD *)v62;
                v118.__r_.__value_.__r.__words[2] = *(void *)(v62 + 16);
                *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v63;
              }
              if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v117.__r_.__value_.__l.__data_);
              }
              Espresso::net::get_global(&v117, (uint64_t)v7, (unsigned __int8 *)&v118);
              std::string v44 = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
              if (v117.__r_.__value_.__r.__words[0])
              {
                long long v103 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
                if (v117.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v117.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                Espresso::sync_copy_to_host(&v115, &v103);
                if (v44) {
                  nitro::nitro_function::nitro_function(v44);
                }
                long long v64 = v115;
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v109, v115[4]);
                uint64_t v65 = 0;
                uint64_t v66 = v109;
                uint64_t v67 = v64[2];
                do
                {
                  v67 *= v64[v65 + 3];
                  ++v65;
                }
                while (v65 != 3);
                memcpy(*(void **)(v109 + 16), *((const void **)v64 + 3), 4 * v67);
                uint64_t v49 = v110;
                uint64_t v101 = v66;
                std::string v102 = v110;
                if (v110) {
                  atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                (*(void (**)(void *, uint64_t *))(*(void *)v28 + 392))(v28, &v101);
                std::string v50 = v102;
                if (!v102)
                {
LABEL_78:
                  if (v49) {
                    nitro::nitro_function::nitro_function(v49);
                  }
                  if (v116) {
                    nitro::nitro_function::nitro_function(v116);
                  }
                  goto LABEL_130;
                }
LABEL_77:
                nitro::nitro_function::nitro_function(v50);
                goto LABEL_78;
              }
LABEL_130:
              if (v44) {
                nitro::nitro_function::nitro_function(v44);
              }
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v118.__r_.__value_.__l.__data_);
              }
            }
LABEL_134:
            uint64_t v54 = v94;
            goto LABEL_135;
          }
        }
        else
        {
          uint64_t v28 = 0;
        }
        int v25 = 0;
        goto LABEL_84;
      }
      if (v32)
      {
        long long v33 = v32;
        std::string::size_type v34 = *(std::__shared_weak_count **)(v20 + 72);
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v90 = v34;
        uint64_t v35 = *(const void **)(v12 + 64);
        if (v35)
        {
          if (v36)
          {
            uint64_t v37 = *(void *)(v12 + 72);
            if (v37)
            {
              uint64_t v87 = *(std::__shared_weak_count **)(v12 + 72);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
              goto LABEL_145;
            }
          }
        }
        else
        {
          uint64_t v36 = 0;
        }
        uint64_t v87 = 0;
LABEL_145:
        int v25 = v90;
        uint64_t v68 = (*(uint64_t (**)(void *))(*(void *)v33 + 384))(v33);
        uint64_t v54 = v94;
        char v7 = v88;
        if (*(_DWORD *)(v68 + 4)) {
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("training mode batchnorm is not supported");
        }
        v118.__r_.__value_.__r.__words[0] = v17;
        id v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v93, v17, &v118);
        if (v69[4] - v69[3] != 48) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("number of batchnorm inputs != 2");
        }
        v117.__r_.__value_.__r.__words[0] = v17;
        uint64_t v70 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v93, v17, &v117)[3];
        if (*(char *)(v70 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v70 + 24), *(void *)(v70 + 32));
        }
        else {
          std::string v118 = *(std::string *)(v70 + 24);
        }
        id v71 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v89 + 2, (unsigned __int8 *)&v118);
        if (!v71) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        unint64_t v72 = *((int *)v71 + 10);
        uint64_t v73 = v89[19];
        if (v72 >= (v89[20] - v73) >> 3) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v74 = *(void *)(v88[4] + 16 * *(void *)(v73 + 8 * v72));
        std::string v75 = *(const void **)(v74 + 64);
        if (v75)
        {
          if (v76)
          {
            long long v77 = *(std::__shared_weak_count **)(v74 + 72);
            if (v77) {
              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v117, v76 + 43);
            uint64_t v78 = 0;
            std::string::size_type v79 = v117.__r_.__value_.__r.__words[0];
            int v80 = *(_DWORD *)(v117.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v80 *= *(_DWORD *)(v117.__r_.__value_.__r.__words[0] + 12 + v78);
              v78 += 4;
            }
            while (v78 != 12);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,unsigned long,void>(&v115, v80);
            uint64_t v81 = 0;
            long long v82 = v115;
            uint64_t v83 = *(int *)(v79 + 8);
            do
            {
              v83 *= *(int *)(v79 + 12 + v81);
              v81 += 4;
            }
            while (v81 != 12);
            memcpy(*((void **)v115 + 2), *(const void **)(v79 + 24), 4 * v83);
            std::string v84 = v116;
            uint64_t v99 = v82;
            std::string::size_type v100 = v116;
            if (v116) {
              atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, int **))(*(void *)v36 + 392))(v36, &v99);
            if (v100) {
              nitro::nitro_function::nitro_function(v100);
            }
            if (v84) {
              nitro::nitro_function::nitro_function(v84);
            }
            if (v117.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v117.__r_.__value_.__l.__size_);
            }
            uint64_t v54 = v94;
            if (v77) {
              nitro::nitro_function::nitro_function(v77);
            }
          }
        }
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
        if (v87) {
          nitro::nitro_function::nitro_function(v87);
        }
LABEL_135:
        if (!v25) {
          goto LABEL_137;
        }
        goto LABEL_136;
      }
      {
        uint64_t v54 = v94;
        char v7 = v88;
        if (!v85) {
          goto LABEL_182;
        }
        int v25 = *(std::__shared_weak_count **)(v20 + 72);
        if (!v25) {
          goto LABEL_137;
        }
LABEL_176:
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_136:
        nitro::nitro_function::nitro_function(v25);
        goto LABEL_137;
      }
      int v25 = *(std::__shared_weak_count **)(v20 + 72);
      uint64_t v54 = v94;
      char v7 = v88;
      if (v25) {
        goto LABEL_176;
      }
LABEL_137:
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
LABEL_139:
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      ++v9;
      uint64_t v8 = *(void *)(v6 + 32);
      if (v9 >= (*(void *)(v6 + 40) - v8) >> 4) {
        goto LABEL_177;
      }
    }
    uint64_t v22 = *(std::__shared_weak_count **)(v20 + 72);
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v22);
    }
    uint64_t v23 = *(const void **)(v12 + 64);
    if (v23)
    {
      if (v24)
      {
        int v25 = *(std::__shared_weak_count **)(v12 + 72);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_32:
        v118.__r_.__value_.__r.__words[0] = v17;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v93, v17, &v118);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[4] - v29[3]) >> 3) >= 2)
        {
          Espresso::get_layer_parameter_name((const void **)(v20 + 16), 1, &v117);
          uint64_t v30 = Espresso::net::loaded_global_name(v7, (uint64_t)&v117);
          if (*(char *)(v30 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v30, *(void *)(v30 + 8));
          }
          else
          {
            long long v31 = *(_OWORD *)v30;
            v118.__r_.__value_.__r.__words[2] = *(void *)(v30 + 16);
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v31;
          }
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v117.__r_.__value_.__l.__data_);
          }
          Espresso::net::get_global(&v117, (uint64_t)v7, (unsigned __int8 *)&v118);
          uint64_t v38 = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
          if (v117.__r_.__value_.__r.__words[0])
          {
            long long v114 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
            if (v117.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v117.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            Espresso::sync_copy_to_host(&v115, &v114);
            long long v39 = v25;
            if (v38) {
              nitro::nitro_function::nitro_function(v38);
            }
            long long v40 = v116;
            long long v112 = v115;
            std::string v113 = v116;
            if (v116) {
              atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, int **))(*(void *)v24 + 400))(v24, &v112);
            if (v113) {
              nitro::nitro_function::nitro_function(v113);
            }
            if (v40) {
              nitro::nitro_function::nitro_function(v40);
            }
            int v25 = v39;
          }
          if (v38) {
            nitro::nitro_function::nitro_function(v38);
          }
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v118.__r_.__value_.__l.__data_);
          }
        }
        v118.__r_.__value_.__r.__words[0] = v17;
        long long v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v93, v17, &v118);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41[4] - v41[3]) >> 3) >= 3)
        {
          Espresso::get_layer_parameter_name((const void **)(v20 + 16), 2, &v117);
          uint64_t v42 = Espresso::net::loaded_global_name(v7, (uint64_t)&v117);
          if (*(char *)(v42 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v42, *(void *)(v42 + 8));
          }
          else
          {
            long long v43 = *(_OWORD *)v42;
            v118.__r_.__value_.__r.__words[2] = *(void *)(v42 + 16);
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v43;
          }
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v117.__r_.__value_.__l.__data_);
          }
          Espresso::net::get_global(&v117, (uint64_t)v7, (unsigned __int8 *)&v118);
          std::string v44 = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
          if (v117.__r_.__value_.__r.__words[0])
          {
            long long v111 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
            if (v117.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v117.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            Espresso::sync_copy_to_host(&v115, &v111);
            if (v44) {
              nitro::nitro_function::nitro_function(v44);
            }
            uint64_t v45 = v115;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v109, v115[4]);
            uint64_t v46 = 0;
            uint64_t v47 = v109;
            uint64_t v48 = v45[2];
            do
            {
              v48 *= v45[v46 + 3];
              ++v46;
            }
            while (v46 != 3);
            memcpy(*(void **)(v109 + 16), *((const void **)v45 + 3), 4 * v48);
            uint64_t v49 = v110;
            uint64_t v107 = v47;
            std::string v108 = v110;
            if (v110) {
              atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, uint64_t *))(*(void *)v24 + 392))(v24, &v107);
            std::string v50 = v108;
            if (!v108) {
              goto LABEL_78;
            }
            goto LABEL_77;
          }
          goto LABEL_130;
        }
        goto LABEL_134;
      }
    }
    else
    {
      int v24 = 0;
    }
    int v25 = 0;
    goto LABEL_32;
  }
LABEL_177:
  if (v96) {
    nitro::nitro_function::nitro_function(v96);
  }
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  return 0;
}

void sub_19276CEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  long long v39 = *(std::__shared_weak_count **)(v36 - 144);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (*(char *)(v36 - 105) < 0) {
    operator delete(*(void **)(v36 - 128));
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a2 == 1)
  {
    long long v40 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v40, v41);
    __cxa_end_catch();
    JUMPOUT(0x19276CE7CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_context_set_low_precision_accumulation(uint64_t **a1, int a2)
{
  Espresso::get_internal_context(a1, &v5);
  if (v5)
  {
    uint64_t v3 = 0;
    *(_DWORD *)(v5 + 68) = a2;
  }
  else
  {
    uint64_t v3 = 4294967290;
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v3;
}

uint64_t espresso_will_share_intermediate_buffer_with_existing_plan(char *__s, void *lpsrc)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!__s) {
    return 4294967290;
  }
  if (lpsrc)
  {
    if (v5)
    {
      if (*(_DWORD *)(*((void *)lpsrc + 133) + 160) != 1)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent phase of espresso_plan");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      char v7 = Espresso::espresso_os_log_subsystem(v5, v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = __s;
        *(_WORD *)&__p[12] = 2048;
        *(void *)&__p[14] = lpsrc;
        _os_log_debug_impl(&dword_1920CB000, v7, OS_LOG_TYPE_DEBUG, "IntermediateSharing espresso_will_share_intermediate_buffer_with_existing_plan (1/3) %s %llu", __p, 0x16u);
      }

      uint64_t v8 = *(void *)(*((void *)lpsrc + 133) + 400);
      if (EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken != -1) {
        dispatch_once(&EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken, &__block_literal_global_265);
      }
      uint64_t v9 = EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      int v10 = *(_DWORD *)(*((void *)lpsrc + 133) + 164);
      std::mutex::lock((std::mutex *)v9);
      unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
      unint64_t v12 = v11;
      unint64_t v13 = *(void *)(v9 + 72);
      if (v13)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        unint64_t v15 = v14.u32[0];
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v2 = v11;
          if (v11 >= v13) {
            unint64_t v2 = v11 % v13;
          }
        }
        else
        {
          unint64_t v2 = (v13 - 1) & v11;
        }
        int64_t v21 = *(void ***)(*(void *)(v9 + 64) + 8 * v2);
        if (v21)
        {
          uint64_t v22 = (char *)*v21;
          if (*v21)
          {
            do
            {
              unint64_t v23 = *((void *)v22 + 1);
              if (v23 == v12)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v22 + 16, __p)) {
                  goto LABEL_115;
                }
              }
              else
              {
                if (v15 > 1)
                {
                  if (v23 >= v13) {
                    v23 %= v13;
                  }
                }
                else
                {
                  v23 &= v13 - 1;
                }
                if (v23 != v2) {
                  break;
                }
              }
              uint64_t v22 = *(char **)v22;
            }
            while (v22);
          }
        }
      }
      uint64_t v22 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + 1) = v12;
      int v24 = (std::string *)(v22 + 16);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        *((void *)v22 + 4) = *(void *)&__p[16];
      }
      int v25 = (void *)(v9 + 80);
      *((void *)v22 + 5) = 0;
      *((void *)v22 + 6) = 0;
      float v26 = (float)(unint64_t)(*(void *)(v9 + 88) + 1);
      float v27 = *(float *)(v9 + 96);
      if (v13 && (float)(v27 * (float)v13) >= v26)
      {
LABEL_105:
        std::string v50 = *(void **)(*(void *)(v9 + 64) + 8 * v2);
        if (v50)
        {
          *(void *)uint64_t v22 = *v50;
        }
        else
        {
          *(void *)uint64_t v22 = *(void *)(v9 + 80);
          *(void *)(v9 + 80) = v22;
          *(void *)(*(void *)(v9 + 64) + 8 * v2) = v25;
          if (!*(void *)v22) {
            goto LABEL_114;
          }
          unint64_t v51 = *(void *)(*(void *)v22 + 8);
          if ((v13 & (v13 - 1)) != 0)
          {
            if (v51 >= v13) {
              v51 %= v13;
            }
          }
          else
          {
            v51 &= v13 - 1;
          }
          std::string v50 = (void *)(*(void *)(v9 + 64) + 8 * v51);
        }
        void *v50 = v22;
LABEL_114:
        ++*(void *)(v9 + 88);
LABEL_115:
        *((void *)v22 + 5) = v8;
        *((_DWORD *)v22 + 12) = v10;
        goto LABEL_116;
      }
      BOOL v28 = 1;
      if (v13 >= 3) {
        BOOL v28 = (v13 & (v13 - 1)) != 0;
      }
      unint64_t v29 = v28 | (2 * v13);
      unint64_t v30 = vcvtps_u32_f32(v26 / v27);
      if (v29 <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      else {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v13 = *(void *)(v9 + 72);
      if (*(void *)&prime > v13) {
        goto LABEL_53;
      }
      if (*(void *)&prime < v13)
      {
        unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(v9 + 88) / *(float *)(v9 + 96));
        if (v13 < 3 || (uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
        {
          unint64_t v41 = std::__next_prime(v41);
        }
        else
        {
          uint64_t v43 = 1 << -(char)__clz(v41 - 1);
          if (v41 >= 2) {
            unint64_t v41 = v43;
          }
        }
        if (*(void *)&prime <= v41) {
          int8x8_t prime = (int8x8_t)v41;
        }
        if (*(void *)&prime >= v13)
        {
          unint64_t v13 = *(void *)(v9 + 72);
        }
        else
        {
          if (prime)
          {
LABEL_53:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v35 = operator new(8 * *(void *)&prime);
            uint64_t v36 = *(void **)(v9 + 64);
            *(void *)(v9 + 64) = v35;
            if (v36) {
              operator delete(v36);
            }
            uint64_t v37 = 0;
            *(int8x8_t *)(v9 + 72) = prime;
            do
              *(void *)(*(void *)(v9 + 64) + 8 * v37++) = 0;
            while (*(void *)&prime != v37);
            uint64_t v38 = (void *)*v25;
            if (*v25)
            {
              unint64_t v39 = v38[1];
              uint8x8_t v40 = (uint8x8_t)vcnt_s8(prime);
              v40.i16[0] = vaddlv_u8(v40);
              if (v40.u32[0] > 1uLL)
              {
                if (v39 >= *(void *)&prime) {
                  v39 %= *(void *)&prime;
                }
              }
              else
              {
                v39 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)(v9 + 64) + 8 * v39) = v25;
              uint64_t v47 = (void *)*v38;
              if (*v38)
              {
                do
                {
                  unint64_t v48 = v47[1];
                  if (v40.u32[0] > 1uLL)
                  {
                    if (v48 >= *(void *)&prime) {
                      v48 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v48 &= *(void *)&prime - 1;
                  }
                  if (v48 != v39)
                  {
                    uint64_t v49 = *(void *)(v9 + 64);
                    if (!*(void *)(v49 + 8 * v48))
                    {
                      *(void *)(v49 + 8 * v48) = v38;
                      goto LABEL_96;
                    }
                    *uint64_t v38 = *v47;
                    *uint64_t v47 = **(void **)(*(void *)(v9 + 64) + 8 * v48);
                    **(void **)(*(void *)(v9 + 64) + 8 * v48) = v47;
                    uint64_t v47 = v38;
                  }
                  unint64_t v48 = v39;
LABEL_96:
                  uint64_t v38 = v47;
                  uint64_t v47 = (void *)*v47;
                  unint64_t v39 = v48;
                }
                while (v47);
              }
            }
            unint64_t v13 = (unint64_t)prime;
            goto LABEL_100;
          }
          long long v53 = *(void **)(v9 + 64);
          *(void *)(v9 + 64) = 0;
          if (v53) {
            operator delete(v53);
          }
          unint64_t v13 = 0;
          *(void *)(v9 + 72) = 0;
        }
      }
LABEL_100:
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v12 >= v13) {
          unint64_t v2 = v12 % v13;
        }
        else {
          unint64_t v2 = v12;
        }
      }
      else
      {
        unint64_t v2 = (v13 - 1) & v12;
      }
      goto LABEL_105;
    }
    return 4294967290;
  }
  if (EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken != -1) {
    dispatch_once(&EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken, &__block_literal_global_265);
  }
  uint64_t v9 = EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  std::mutex::lock((std::mutex *)v9);
  uint64_t v16 = (void *)(v9 + 64);
  unint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v9 + 64), __p);
  if (v17)
  {
    int8x8_t v18 = *(int8x8_t *)(v9 + 72);
    unint64_t v19 = *((void *)v17 + 1);
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v18) {
        v19 %= *(void *)&v18;
      }
    }
    else
    {
      v19 &= *(void *)&v18 - 1;
    }
    std::string::size_type v32 = *(unsigned __int8 **)(*v16 + 8 * v19);
    do
    {
      long long v33 = v32;
      std::string::size_type v32 = *(unsigned __int8 **)v32;
    }
    while (v32 != v17);
    if (v33 == (unsigned __int8 *)(v9 + 80)) {
      goto LABEL_75;
    }
    unint64_t v34 = *((void *)v33 + 1);
    if (v20.u32[0] > 1uLL)
    {
      if (v34 >= *(void *)&v18) {
        v34 %= *(void *)&v18;
      }
    }
    else
    {
      v34 &= *(void *)&v18 - 1;
    }
    if (v34 != v19)
    {
LABEL_75:
      if (!*(void *)v17) {
        goto LABEL_76;
      }
      unint64_t v44 = *(void *)(*(void *)v17 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v44 >= *(void *)&v18) {
          v44 %= *(void *)&v18;
        }
      }
      else
      {
        v44 &= *(void *)&v18 - 1;
      }
      if (v44 != v19) {
LABEL_76:
      }
        *(void *)(*v16 + 8 * v19) = 0;
    }
    uint64_t v45 = *(void *)v17;
    if (*(void *)v17)
    {
      unint64_t v46 = *(void *)(v45 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v46 >= *(void *)&v18) {
          v46 %= *(void *)&v18;
        }
      }
      else
      {
        v46 &= *(void *)&v18 - 1;
      }
      if (v46 != v19)
      {
        *(void *)(*v16 + 8 * v46) = v33;
        uint64_t v45 = *(void *)v17;
      }
    }
    *(void *)long long v33 = v45;
    *(void *)unint64_t v17 = 0;
    --*(void *)(v9 + 88);
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, (void **)v17);
  }
LABEL_116:
  std::mutex::unlock((std::mutex *)v9);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return 0;
}

uint64_t espresso_plan_share_intermediate_buffer(void *lpsrc, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294967290;
  if (!lpsrc || !a2) {
    return result;
  }
  if (!v5) {
    return 4294967290;
  }
  uint64_t v7 = *((void *)lpsrc + 133);
  if (*(_DWORD *)(v7 + 160))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent phase of espresso_plan");
    goto LABEL_18;
  }
  if (*(_DWORD *)(a2[133] + 160) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent phase of src espresso_plan");
LABEL_18:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(void *)(v7 + 24) == *(void *)(v7 + 32)) {
    return 4294967290;
  }
  uint64_t v8 = Espresso::espresso_os_log_subsystem(v5, v6);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 134218240;
    uint64_t v16 = lpsrc;
    __int16 v17 = 2048;
    int8x8_t v18 = a2;
    _os_log_debug_impl(&dword_1920CB000, v8, OS_LOG_TYPE_DEBUG, "IntermediateSharing espresso_plan_share_intermediate_buffer (1/3) %llu %llu", (uint8_t *)&v15, 0x16u);
  }

  uint64_t v9 = *((void *)lpsrc + 133);
  int v10 = *(uint64_t **)(v9 + 24);
  unint64_t v11 = *(uint64_t **)(v9 + 32);
  if (v10 != v11)
  {
    uint64_t v12 = *(void *)(a2[133] + 400);
    do
    {
      uint64_t v13 = *v10;
      v10 += 2;
      *(void *)(v13 + 1272) = v12;
      *(unsigned char *)(v13 + 1280) = 1;
    }
    while (v10 != v11);
  }
  return 0;
}

void sub_19276DCCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t espresso_ane_cache_has_network(Espresso *a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (Espresso *)MEMORY[0x192FF2020]();
      uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315138;
        uint64_t v9 = a1;
        _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "ANECache lookup path=%s", buf, 0xCu);
      }

      [MEMORY[0x1E4F4E030] sharedConnection];
      objc_claimAutoreleasedReturnValue();
      operator new();
    }
    uint64_t v6 = Espresso::espresso_os_log_subsystem(a1, 0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1920CB000, v6, OS_LOG_TYPE_ERROR, "espresso_ane_cache_has_network 'exists' arg is null", buf, 2u);
    }
  }
  else
  {
    uint64_t v6 = Espresso::espresso_os_log_subsystem(0, a2);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1920CB000, v6, OS_LOG_TYPE_ERROR, "espresso_ane_cache_has_network 'path' arg is null", buf, 2u);
    }
  }

  return 4294967290;
}

void sub_19276DF4C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int buf, long long a12)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  if (a2 == 1)
  {
    __int16 v17 = (Espresso *)__cxa_begin_catch(a1);
    uint64_t v19 = Espresso::espresso_os_log_subsystem(v17, v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = (*(uint64_t (**)(Espresso *))(*(void *)v17 + 16))(v17);
      long long buf = 136315394;
      WORD2(a12) = 2080;
      *(void *)((char *)&a12 + 6) = v20;
      _os_log_debug_impl(&dword_1920CB000, v19, OS_LOG_TYPE_DEBUG, "ane_cache_has_network %s exception: %s", (uint8_t *)&buf, 0x16u);
    }

    __cxa_end_catch();
    JUMPOUT(0x19276DE80);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_ane_cache_purge_network(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x192FF2020]();
    [MEMORY[0x1E4F4E030] sharedConnection];
    objc_claimAutoreleasedReturnValue();
    operator new();
  }
  return 4294967290;
}

void sub_19276E18C(_Unwind_Exception *a1, int a2)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x19276E174);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_is_ane_arch_greater_than_or_equal(const char *a1, unsigned char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__s1, "H13");
  size_t v4 = strlen(a1);
  if ((char)v18 < 0)
  {
    if (v4 == v17)
    {
      if (v4 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v6 = __s1;
      int v7 = memcmp(__s1, a1, v4);
      operator delete(v6);
      if (!v7) {
        goto LABEL_8;
      }
    }
    else
    {
      operator delete(__s1);
    }
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(&__s1, "H14");
    size_t v9 = strlen(a1);
    if ((char)v18 < 0)
    {
      if (v9 == v17)
      {
        if (v9 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v11 = __s1;
        int v12 = memcmp(__s1, a1, v9);
        operator delete(v11);
        if (!v12) {
          goto LABEL_17;
        }
      }
      else
      {
        operator delete(__s1);
      }
    }
    else if (v9 == v18 && !memcmp(&__s1, a1, v9))
    {
LABEL_17:
      char is_mix_e = Espresso::ANECompilerEngine::is_mix_e(0, v10);
      goto LABEL_18;
    }
    char v15 = 0;
    uint64_t result = 4294967290;
    goto LABEL_21;
  }
  if (v4 != v18 || memcmp(&__s1, a1, v4)) {
    goto LABEL_10;
  }
LABEL_8:
  char is_mix_e = Espresso::ANECompilerEngine::is_mix(0, v5);
LABEL_18:
  char v13 = is_mix_e;
  uint64_t result = 0;
  char v15 = v13 ^ 1;
LABEL_21:
  *a2 = v15;
  return result;
}

uint64_t espresso_get_metadata_for_key(const void *a1, int a2, char *a3, uint64_t a4, int a5)
{
  uint64_t v10 = (void *)MEMORY[0x192FF2020]();
  if (!a1
  {
LABEL_19:
    uint64_t v20 = 4294967290;
    goto LABEL_20;
  }
  if (a5 != 0x10000)
  {
    int64_t v21 = Espresso::espresso_os_log_subsystem(v11, v12);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_1920CB000, v21, OS_LOG_TYPE_ERROR, "espresso_get_metadata_for_key requires Espresso managed buffer.", (uint8_t *)buf, 2u);
    }

    goto LABEL_19;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v43);
  uint64_t v13 = v43;
  if (v43)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, a3);
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v13 + 1304), (unsigned __int8 *)v41))
    {
      uint8x8_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v13 + 1304), (unsigned __int8 *)v41);
      if (!v14) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::pair[abi:ne180100]((uint64_t)v35, (long long *)(v14 + 40));
      long long v29 = v35[0];
      long long v30 = v35[1];
      uint64_t v31 = v36;
      std::string::size_type v32 = 0;
      long long v33 = 0;
      uint64_t v34 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v32, v37, (uint64_t)v38, (v38 - (unsigned char *)v37) >> 2);
      memset((char *)buf + 8, 0, 160);
      v23[0] = v29;
      v23[1] = v30;
      uint64_t v24 = v31;
      std::string __p = 0;
      float v26 = 0;
      uint64_t v27 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v32, (uint64_t)v33, (v33 - (unsigned char *)v32) >> 2);
      setup_espresso_buffer_with_shape((uint64_t)buf, (uint64_t)v23);
      if (__p)
      {
        float v26 = __p;
        operator delete(__p);
      }
      *(void *)&buf[0] = *(void *)(v39 + 32);
      long long v15 = buf[9];
      *(_OWORD *)(a4 + 128) = buf[8];
      *(_OWORD *)(a4 + 144) = v15;
      *(void *)(a4 + 160) = *(void *)&buf[10];
      long long v16 = buf[5];
      *(_OWORD *)(a4 + 64) = buf[4];
      *(_OWORD *)(a4 + 80) = v16;
      long long v17 = buf[7];
      *(_OWORD *)(a4 + 96) = buf[6];
      *(_OWORD *)(a4 + 112) = v17;
      long long v18 = buf[3];
      *(_OWORD *)(a4 + 32) = buf[2];
      *(_OWORD *)(a4 + 48) = v18;
      long long v19 = buf[1];
      *(_OWORD *)a4 = buf[0];
      *(_OWORD *)(a4 + 16) = v19;
      if (v32)
      {
        long long v33 = v32;
        operator delete(v32);
      }
      if (v40) {
        nitro::nitro_function::nitro_function(v40);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = 4294967288;
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
  }
  else
  {
    uint64_t v20 = 4294967291;
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
LABEL_20:
  return v20;
}

void sub_19276E648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  if (__p) {
    operator delete(__p);
  }
  if (a44) {
    operator delete(a44);
  }
  std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::~pair((void *)(v46 - 184));
  if (*(char *)(v46 - 81) < 0) {
    operator delete(*(void **)(v46 - 104));
  }
  if (a2 == 1)
  {
    uint64_t v49 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v45, v49);
    __cxa_end_catch();
    JUMPOUT(0x19276E5FCLL);
  }
  std::string v50 = *(std::__shared_weak_count **)(v46 - 72);
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::pair[abi:ne180100](uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 40), *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  uint64_t v6 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

char *espresso_get_analysis_model_metadata_for_key(uint64_t a1, int a2, const char *a3)
{
  uint64_t v6 = (void *)MEMORY[0x192FF2020]();
  Espresso::get_internal_network(a1, a2, (uint64_t)&v28);
  if (!v28)
  {
    int v7 = 0;
    goto LABEL_40;
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(v28, &v26);
  if (v26)
  {
    Espresso::model_metadata_t::model_metadata_t(&v13, (const Espresso::model_metadata_t *)(v26 + 8));
    if (!strcmp(a3, "bundle"))
    {
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v13;
      }
      else {
        uint64_t v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
    }
    else
    {
      if (!strcmp(a3, "name"))
      {
        size_t v9 = &v14;
        int v10 = v15;
        unint64_t v11 = (std::string *)v14;
      }
      else if (!strcmp(a3, "path"))
      {
        size_t v9 = &v16;
        int v10 = v17;
        unint64_t v11 = (std::string *)v16;
      }
      else if (!strcmp(a3, "version"))
      {
        size_t v9 = &v18;
        int v10 = v19;
        unint64_t v11 = (std::string *)v18;
      }
      else if (!strcmp(a3, "product"))
      {
        size_t v9 = &v20;
        int v10 = v21;
        unint64_t v11 = (std::string *)v20;
      }
      else
      {
        if (strcmp(a3, "usecase"))
        {
          int v7 = 0;
LABEL_24:
          if (v25 < 0) {
            operator delete(__p);
          }
          if (v23 < 0) {
            operator delete(v22);
          }
          if (v21 < 0) {
            operator delete(v20);
          }
          if (v19 < 0) {
            operator delete(v18);
          }
          if (v17 < 0) {
            operator delete(v16);
          }
          if (v15 < 0) {
            operator delete(v14);
          }
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v13.__r_.__value_.__l.__data_);
          }
          goto LABEL_38;
        }
        size_t v9 = &v22;
        int v10 = v23;
        unint64_t v11 = (std::string *)v22;
      }
      if (v10 >= 0) {
        uint64_t v8 = (std::string *)v9;
      }
      else {
        uint64_t v8 = v11;
      }
    }
    int v7 = strdup((const char *)v8);
    goto LABEL_24;
  }
  int v7 = 0;
LABEL_38:
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
LABEL_40:
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  return v7;
}

void sub_19276E99C(_Unwind_Exception *exception_object, int a2)
{
  long long v5 = *(std::__shared_weak_count **)(v2 - 72);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 - 56);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19276E978);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_set_analysis_model_metadata_for_key(const void *a1, int a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = (void *)MEMORY[0x192FF2020]();
  if (!a1
  {
    uint64_t v14 = 4294967290;
    goto LABEL_41;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v31);
  uint64_t v9 = v31;
  if (v31)
  {
    Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(v31, &v30);
    int v10 = (char *)v30;
    if (!(void)v30)
    {
      unint64_t v11 = operator new(0xF0uLL);
      v11[1] = 0;
      void v11[2] = 0;
      void *v11 = &unk_1EE387A80;
      int v10 = (char *)(v11 + 3);
      void v11[3] = &unk_1EE359F38;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 6) = 0u;
      *((_OWORD *)v11 + 7) = 0u;
      *((_OWORD *)v11 + 8) = 0u;
      *((_OWORD *)v11 + 9) = 0u;
      *((_OWORD *)v11 + 10) = 0u;
      *((_OWORD *)v11 + 11) = 0u;
      *((_OWORD *)v11 + 12) = 0u;
      *((_OWORD *)v11 + 13) = 0u;
      v11[28] = 0;
      *((_DWORD *)v11 + 58) = 1065353216;
      *(void *)&long long v12 = v11 + 3;
      *((void *)&v12 + 1) = v11;
      std::string v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
      long long v30 = v12;
      if (v13)
      {
        nitro::nitro_function::nitro_function(v13);
        int v10 = (char *)v30;
      }
    }
    Espresso::model_metadata_t::model_metadata_t(&v17, (const Espresso::model_metadata_t *)(v10 + 8));
    if (!strcmp(a3, "bundle"))
    {
      char v15 = &v17;
    }
    else if (!strcmp(a3, "name"))
    {
      char v15 = (std::string *)&v18;
    }
    else if (!strcmp(a3, "path"))
    {
      char v15 = (std::string *)&v20;
    }
    else if (!strcmp(a3, "version"))
    {
      char v15 = (std::string *)&v22;
    }
    else if (!strcmp(a3, "product"))
    {
      char v15 = (std::string *)&v24;
    }
    else
    {
      if (strcmp(a3, "usecase"))
      {
        uint64_t v14 = 4294967290;
LABEL_23:
        if (v29 < 0) {
          operator delete(__p);
        }
        if (v27 < 0) {
          operator delete(v26);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        if (v23 < 0) {
          operator delete(v22);
        }
        if (v21 < 0) {
          operator delete(v20);
        }
        if (v19 < 0) {
          operator delete(v18);
        }
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        if (*((void *)&v30 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v30 + 1));
        }
        goto LABEL_39;
      }
      char v15 = (std::string *)&v26;
    }
    MEMORY[0x192FF0F50](v15, a4);
    Espresso::analysis_debug_metadata::set_model_metadata(v30, &v17);
    Espresso::net::set_analysis<Espresso::analysis_debug_metadata>(v9, &v30);
    uint64_t v14 = 0;
    goto LABEL_23;
  }
  uint64_t v14 = 4294967291;
LABEL_39:
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
LABEL_41:
  return v14;
}

void sub_19276ECCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v14 = *(std::__shared_weak_count **)(v11 - 72);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  char v15 = *(std::__shared_weak_count **)(v11 - 56);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (a2 == 1)
  {
    long long v16 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v10, v16);
    __cxa_end_catch();
    JUMPOUT(0x19276ECA8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_plan_start_profiling_with_options(uint64_t a1, int a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a1
  {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(a1 + 1064);
  long long v5 = *(void **)(v4 + 24);
  if (*(void *)(v4 + 32) - (void)v5 != 16) {
    return 4294967290;
  }
  uint64_t v6 = operator new(0xC8uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE381490;
  int v7 = (Espresso *)Espresso::profiler_t::profiler_t((uint64_t)(v6 + 3), v5);
  *(void *)&long long v9 = v7;
  *((void *)&v9 + 1) = v6;
  int v10 = (Espresso **)(a1 + 1048);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 1056);
  *(_OWORD *)(a1 + 1048) = v9;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    int v7 = *v10;
  }
  *(_DWORD *)int v7 = a2;
  if ((a2 & 2) == 0) {
    goto LABEL_13;
  }
  long long v12 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v13 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v13 setDateFormat:@"yyyy-MM-dd-HH-mm-ss"];
  uint64_t v14 = [MEMORY[0x1E4F1C9C8] date];
  char v15 = [v13 stringFromDate:v14];
  long long v16 = [NSString stringWithFormat:@"/tmp/compiler_analytics_%@_%u", v15, arc4random() & 0x3FF];
  id v31 = 0;
  char v17 = [v12 createDirectoryAtPath:v16 withIntermediateDirectories:1 attributes:0 error:&v31];
  long long v18 = (Espresso *)v31;
  uint64_t v20 = v18;
  if (v17)
  {
    char v21 = *v10;
    uint64_t v22 = v16;
    char v23 = (Espresso *)MEMORY[0x192FF0F50]((char *)v21 + 56, [(__CFString *)v22 UTF8String]);
    char v25 = Espresso::espresso_os_log_subsystem(v23, v24);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    *(_DWORD *)long long buf = 138412290;
    long long v33 = v22;
    uint64_t v26 = "EspressoProfiler: espresso_plan_start_profiling_with_options compiler analytics written to: %@";
    char v27 = v25;
    uint32_t v28 = 12;
  }
  else
  {
    char v25 = Espresso::espresso_os_log_subsystem(v18, v19);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    *(_DWORD *)long long buf = 138412546;
    long long v33 = @"/tmp";
    __int16 v34 = 2112;
    uint64_t v35 = v20;
    uint64_t v26 = "Failed to create directory \"%@\". Error: %@";
    char v27 = v25;
    uint32_t v28 = 22;
  }
  _os_log_debug_impl(&dword_1920CB000, v27, OS_LOG_TYPE_DEBUG, v26, buf, v28);
LABEL_12:

  if ((v17 & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
LABEL_13:
  long long v30 = Espresso::espresso_os_log_subsystem(v7, v8);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v33) = a2;
    _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "EspressoProfiler: espresso_plan_start_profiling_with_options option: %d", buf, 8u);
  }

  return 0;
}

void sub_19276F090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::profiler_t>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::profiler_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381490;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::profiler_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t espresso_plan_start_profiling(uint64_t a1)
{
  return espresso_plan_start_profiling_with_options(a1, 0);
}

uint64_t espresso_network_query_quantization_info(void *a1, int a2, char *a3, uint64_t a4)
{
  if (!a1) {
    return 4294967290;
  }
  uint64_t result = 4294967290;
  if (a4 && v8)
  {
    *(_DWORD *)(a4 + 8) = 0;
    *(void *)a4 = 0;
    uint64_t v10 = *(void *)(a1[133] + 24) + 16 * a2;
    uint64_t v11 = *(void *)v10;
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    long long v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v11 + 136), (unsigned __int8 *)__p);
    id v13 = v12;
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      if (!v13)
      {
LABEL_10:
        LODWORD(__p[0]) = 1065353216;
        *(void **)((char *)__p + 4) = (void *)0xFFFFFFFF00000000;
        HIDWORD(__p[1]) = 1;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        char v21 = 0;
        uint64_t v15 = *(void *)v10;
        std::string::basic_string[abi:ne180100]<0>(v18, a3);
        long long v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v15 + 352, v18);
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        if ((void *)(*(void *)v10 + 360) != v16)
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v16 + 7);
          if (__p != v16 + 7) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v21, (char *)v16[9], v16[10], (uint64_t)(v16[10] - v16[9]) >> 2);
          }
        }
        uint64_t default_compute_path = LODWORD(__p[1]);
        if (LODWORD(__p[1]) == -1)
        {
          uint64_t default_compute_path = Espresso::get_default_compute_path(*(uint64_t (****)(void))(*(void *)(*(void *)v10 + 16) + 8));
          LODWORD(__p[1]) = default_compute_path;
        }
        *(_DWORD *)a4 = Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path((Espresso::keys_translation *)default_compute_path);
        *(_DWORD *)(a4 + 8) = __p[0];
        if (v21)
        {
          uint64_t v22 = v21;
          operator delete(v21);
        }
        return 0;
      }
    }
    else if (!v12)
    {
      goto LABEL_10;
    }
    uint64_t v14 = (Espresso::keys_translation *)(*(uint64_t (**)(void))(**((void **)v13 + 5) + 32))(*((void *)v13 + 5));
    *(_DWORD *)(a4 + 4) = Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path(v14);
    goto LABEL_10;
  }
  return result;
}

void sub_19276F378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (a2 == 1)
  {
    long long v16 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v16, v17);
    __cxa_end_catch();
    JUMPOUT(0x19276F364);
  }
  _Unwind_Resume(exception_object);
}

void espresso_upgrade_eir_to_mil(const char *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a6 && a7) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Cannot generate fp16 model and share weight file at the same time. Please provide only one of the option.");
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "/tmp");
  Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory((uint64_t)v54, (const void **)__p);
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v59, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else {
    std::string v59 = v55;
  }
  Espresso::get_real_file_path(&__dst.__pn_, (const char *)&v59);
  std::__fs::filesystem::path v51 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  Espresso::get_real_file_path(&__dst.__pn_, a1);
  std::__fs::filesystem::path v50 = __dst;
  std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)&__dst, &v50);
  std::__fs::filesystem::operator/[abi:ne180100](&__dst, (uint64_t)&v51, &v49);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)&__dst, &v50);
  memset(&v59, 0, sizeof(v59));
  std::string::append[abi:ne180100]<char const*,0>(&v59, (std::string *)".shape", (std::string *)"");
  long long v12 = std::__fs::filesystem::path::replace_extension(&__dst, (const std::__fs::filesystem::path *)&v59);
  std::__fs::filesystem::operator/[abi:ne180100](v12, (uint64_t)&v51, &v48);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v47.__pn_, a2);
  std::string::size_type size = HIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]);
  if ((v47.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v47.__pn_.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (std::__fs::filesystem::path::__parent_path(&v47).__size_)
    {
      Espresso::get_real_file_path(&__dst.__pn_, (const char *)a2);
      if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__pn_.__r_.__value_.__l.__data_);
      }
      std::__fs::filesystem::path v47 = __dst;
      goto LABEL_46;
    }
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v59, &v50);
    std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)&v56, &v47);
    std::__fs::filesystem::operator/[abi:ne180100](&v56, (uint64_t)&v59, &__dst);
    if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__pn_.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::path v47 = __dst;
    *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = 0;
    __dst.__pn_.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v16 = (void *)v59.__r_.__value_.__r.__words[0];
LABEL_45:
      operator delete(v16);
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v56, &v50);
  std::__fs::filesystem::path::__string_view v14 = std::__fs::filesystem::path::__stem(&v50);
  if (v14.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v14.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v17 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v17 = v14.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v18 = v17 + 1;
    p_dst = operator new(v17 + 1);
    __dst.__pn_.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    __dst.__pn_.__r_.__value_.__l.__size_ = v14.__size_;
  }
  else
  {
    *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = v14.__size_;
    p_dst = &__dst;
    if (!v14.__size_)
    {
LABEL_37:
      p_dst[v14.__size_] = 0;
      std::__fs::filesystem::path v46 = __dst;
      memset(&__dst, 0, sizeof(__dst));
      std::string::append[abi:ne180100]<char const*,0>(&__dst.__pn_, (std::string *)".mil", (std::string *)"");
      char v19 = std::__fs::filesystem::path::replace_extension(&v46, &__dst);
      std::__fs::filesystem::operator/[abi:ne180100](v19, (uint64_t)&v56, (std::__fs::filesystem::path *)&v59);
      if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__pn_.__r_.__value_.__l.__data_);
      }
      v47.__pn_ = v59;
      *((unsigned char *)&v59.__r_.__value_.__s + 23) = 0;
      v59.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        long long v16 = (void *)v56.__pn_.__r_.__value_.__r.__words[0];
        goto LABEL_45;
      }
LABEL_46:
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v46.__pn_, a3);
      std::string::size_type v20 = HIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]);
      if ((v46.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v20 = v46.__pn_.__r_.__value_.__l.__size_;
      }
      if (v20)
      {
        if (std::__fs::filesystem::path::__parent_path(&v46).__size_)
        {
          Espresso::get_real_file_path(&__dst.__pn_, (const char *)a3);
          if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v46.__pn_.__r_.__value_.__l.__data_);
          }
          std::__fs::filesystem::path v46 = __dst;
          goto LABEL_72;
        }
        std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v59, &v47);
        std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)&v56, &v46);
        std::__fs::filesystem::operator/[abi:ne180100](&v56, (uint64_t)&v59, &__dst);
        if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__pn_.__r_.__value_.__l.__data_);
        }
        std::__fs::filesystem::path v46 = __dst;
        *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = 0;
        __dst.__pn_.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_70:
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
LABEL_72:
          if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&pn, v47.__pn_.__r_.__value_.__l.__data_, v47.__pn_.__r_.__value_.__l.__size_);
          }
          else {
            puint64_t n = v47.__pn_;
          }
          std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&__dst, &v47);
          std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v59, &v46);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v26.__data_ = (const std::string_view::value_type *)&v59;
          }
          else {
            v26.__data_ = (const std::string_view::value_type *)v59.__r_.__value_.__r.__words[0];
          }
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v26.__size_ = HIBYTE(v59.__r_.__value_.__r.__words[2]);
          }
          else {
            v26.__size_ = v59.__r_.__value_.__l.__size_;
          }
          int v27 = std::__fs::filesystem::path::__compare(&__dst, v26);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
          }
          if (!v27)
          {
            std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&__dst, &v47);
            std::__fs::filesystem::__status(&__dst, 0);
            unsigned __int8 v28 = v59.__r_.__value_.__s.__data_[0];
            if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
            }
            if (v28 != 255 && v28)
            {
              LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 80000;
              Espresso::create_context((int *)&__dst, &v43);
              uint64_t v29 = v43;
              *(unsigned char *)(v43 + 53) = 1;
              *(unsigned char *)(v29 + 72) = 1;
              Espresso::load_network((uint64_t)a1, &v43, 0, 0, &v41);
              uint64_t v30 = v41;
              if (v41)
              {
                if (a7)
                {
                  uint64_t v31 = *(void *)(v41 + 576);
                  if (v31) {
                    (*(void (**)(std::__fs::filesystem::path *__return_ptr))(*(void *)v31 + 40))(&__dst);
                  }
                  else {
                    std::string::basic_string[abi:ne180100]<0>(&__dst, "");
                  }
                  std::string::size_type v32 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                  char v33 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                  std::string::size_type v34 = __dst.__pn_.__r_.__value_.__l.__size_;
                  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v35 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v35 = __dst.__pn_.__r_.__value_.__l.__size_;
                  }
                  if (v35)
                  {
                    if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    {
                      *v46.__pn_.__r_.__value_.__l.__data_ = 0;
                      v46.__pn_.__r_.__value_.__l.__size_ = 0;
                      std::string::size_type v32 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                      std::string::size_type v34 = __dst.__pn_.__r_.__value_.__l.__size_;
                      char v33 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                    }
                    else
                    {
                      v46.__pn_.__r_.__value_.__s.__data_[0] = 0;
                      *((unsigned char *)&v46.__pn_.__r_.__value_.__s + 23) = 0;
                    }
                    if (v33 >= 0) {
                      uint64_t v36 = &__dst;
                    }
                    else {
                      uint64_t v36 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
                    }
                    if (v33 < 0) {
                      std::string::size_type v32 = v34;
                    }
                    std::string::append[abi:ne180100]<char const*,0>(&v46.__pn_, &v36->__pn_, (std::string *)((char *)&v36->__pn_ + v32));
                    char v33 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                  }
                  if (v33 < 0) {
                    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
                  }
                  uint64_t v30 = v41;
                }
                v39[0] = v30;
                v39[1] = v42;
                if (v42) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
                }
                Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&__dst);
                *(void *)&long long v38 = __dst.__pn_.__r_.__value_.__r.__words[0];
                if (__dst.__pn_.__r_.__value_.__r.__words[0]) {
                  operator new();
                }
                long long v38 = 0uLL;
                __dst.__pn_.__r_.__value_.__r.__words[0] = 0;
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table((uint64_t)v37, a4);
                Espresso::MILTranslator::TranslateNetwork((uint64_t)&v40, (const Espresso::net *)v39, &v38, (uint64_t *)v37);
              }
              Espresso::throw_exception_selector<Espresso::io_error>("unable to load network");
            }
            Espresso::throw_exception_selector<Espresso::io_error>("The output directory does not exist.");
          }
        }
        uint64_t v22 = (void *)v56.__pn_.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v59, &v47);
        std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)&v44, &v47);
        int v21 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&pn, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
        }
        else {
          puint64_t n = v44;
        }
        uint64_t v23 = std::string::append(&pn, ".weights");
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
        *(void *)uint64_t v58 = v23->__r_.__value_.__l.__size_;
        *(void *)&v58[7] = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)&v56.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)&v58[7];
        v56.__pn_.__r_.__value_.__r.__words[0] = v24;
        v56.__pn_.__r_.__value_.__l.__size_ = *(void *)v58;
        *((unsigned char *)&v56.__pn_.__r_.__value_.__s + 23) = v25;
        std::__fs::filesystem::operator/[abi:ne180100](&v56, (uint64_t)&v59, &__dst);
        if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__pn_.__r_.__value_.__l.__data_);
        }
        std::__fs::filesystem::path v46 = __dst;
        *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = 0;
        __dst.__pn_.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(pn.__r_.__value_.__l.__data_);
          if ((v21 & 0x80000000) == 0) {
            goto LABEL_70;
          }
        }
        else if ((v21 & 0x80000000) == 0)
        {
          goto LABEL_70;
        }
        uint64_t v22 = (void *)v44.__r_.__value_.__r.__words[0];
      }
      operator delete(v22);
      goto LABEL_70;
    }
  }
  memmove(p_dst, v14.__data_, v14.__size_);
  goto LABEL_37;
}

void sub_192770760(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  operator delete(__p);
  if (*(char *)(v75 - 121) < 0) {
    operator delete(*(void **)(v75 - 144));
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)&a75);
  if (a2 == 1)
  {
    uint64_t v78 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v78, v79);
    __cxa_end_catch();
    JUMPOUT(0x1927706B4);
  }
  _Unwind_Resume(a1);
}

void sub_192770E00()
{
}

void sub_192770E08()
{
}

double std::__fs::filesystem::path::filename[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

void sub_192770F2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

void espresso_upgrade_net_to_mil(const char *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t a5)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table((uint64_t)v10, a4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ios15");
  espresso_upgrade_eir_to_mil(a1, a2, a3, (uint64_t *)v10, a5, 0, 1);
}

void sub_1927710BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a15);
  if (a2 == 1)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v17 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v17, v18);
    __cxa_end_catch();
    JUMPOUT(0x1927710A4);
  }
  _Unwind_Resume(a1);
}

void espresso_upgrade_to_mil(std::string *a1, char *a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v18 = a1;
  LODWORD(v14.__r_.__value_.__l.__data_) = 80000;
  Espresso::create_context((int *)&v14, &v17);
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>(&v14, (char *)a1);
  Espresso::load_network((uint64_t)v4, &v17, 0, 0, &v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = v15;
  if (v15)
  {
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, a2);
    }
    else
    {
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v18);
      std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v13, (std::__fs::filesystem::path *)&__p);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      {
        std::basic_string_view<_CharT, _Traits>::size_type v6 = (void *)v13.__r_.__value_.__r.__words[0];
        std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
        operator delete(v6);
      }
      else
      {
        std::string v14 = v13;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v13);
    if (v13.__r_.__value_.__r.__words[0]) {
      operator new();
    }
    v11[0] = v5;
    v11[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0uLL;
    *(_OWORD *)int v7 = 0u;
    long long v8 = 0u;
    int v9 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&v13, "ios15");
    Espresso::MILTranslator::TranslateNetwork((uint64_t)&__p, (const Espresso::net *)v11, &v10, (uint64_t *)v7);
  }
  Espresso::throw_exception_selector<Espresso::io_error>("unable to load network");
}

void sub_192771400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  operator delete(v40);
  if (a40 < 0) {
    operator delete(__p);
  }
  std::string v44 = *(std::__shared_weak_count **)(v41 - 80);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v41 - 64);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (a2 == 1)
  {
    std::__fs::filesystem::path v46 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v46, v47);
    __cxa_end_catch();
    JUMPOUT(0x1927713D4);
  }
  _Unwind_Resume(a1);
}

void sub_1927715A8()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x192771568);
}

void sub_1927715C4()
{
}

void sub_1927715D0()
{
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, std::string **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = *a2;
  uint64_t v4 = (std::string *)((char *)v3 - 1);
  do
  {
    int v5 = v4->__r_.__value_.__s.__data_[1];
    uint64_t v4 = (std::string *)((char *)v4 + 1);
  }
  while (v5);
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_192771620(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void espresso_upgrade_net_to_mil_program(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  v9[0] = *a1;
  v9[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[1];
  *(void *)&long long v8 = *a2;
  *((void *)&v8 + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int v5 = 0u;
  long long v6 = 0u;
  int v7 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ios15");
  Espresso::MILTranslator::TranslateNetwork((uint64_t)&v10, (const Espresso::net *)v9, &v8, (uint64_t *)v5);
}

void sub_192771750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a16);
  char v19 = *(std::__shared_weak_count **)(v16 - 48);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  std::string::size_type v20 = *(std::__shared_weak_count **)(v16 - 32);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (a2 == 1)
  {
    int v21 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v21, v22);
    __cxa_end_catch();
    JUMPOUT(0x19277173CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_compile_mil_to_eir(char *a1, std::string *a2)
{
  char v19 = a2;
  uint64_t v4 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v18, &v19);
  if (std::__fs::filesystem::path::__parent_path(v4).__size_)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v19);
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v17, (std::__fs::filesystem::path *)&__p);
    std::__fs::filesystem::__status(&v17, 0);
    if (v20) {
      BOOL v5 = v20 == 255;
    }
    else {
      BOOL v5 = 1;
    }
    int v6 = v5;
    if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v6 = 0;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v6) {
    Espresso::throw_exception_selector<Espresso::io_error>("The output directory does not exist.");
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, a1);
  std::string::basic_string[abi:ne180100]<0>(&v17, "main");
  Espresso::MILTranslator::TranslateProgram((uint64_t *)&__p, (uint64_t)&v18, (uint64_t)&v17);
  if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
  MEMORY[0x192FF0F50](__p.__r_.__value_.__r.__words[0] + 592, a2);
  std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  unsigned long long v15 = __PAIR128__(__p.__r_.__value_.__l.__size_, v7);
  if (__p.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)a2);
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  Espresso::dump_network((uint64_t *)&v15, &__str, (uint64_t)v12, (uint64_t)v10);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (size)
  {
    nitro::nitro_function::nitro_function(size);
    nitro::nitro_function::nitro_function(size);
  }
  return 0;
}

void sub_19277199C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 49) < 0) {
    operator delete(*(void **)(v34 - 72));
  }
  if (a2 == 1)
  {
    uint64_t v37 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v37, v38);
    __cxa_end_catch();
    JUMPOUT(0x192771974);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_plan_add_cpp_net_from_mil_program_and_reload(const void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = Espresso::espresso_os_log_subsystem(v8, v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v24 = 1024;
    int v25 = a3;
    _os_log_impl(&dword_1920CB000, v10, OS_LOG_TYPE_INFO, "espresso_plan_add_cpp_net_from_mil_program_and_reload plan=%zu cp=%d", buf, 0x12u);
  }

  char v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v18 = *a2;
  char v19 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "main");
  Espresso::MILTranslator::TranslateProgram((MIL::PassManager *)&v18, (uint64_t)buf, 1, 1, 1, 0, &v20);
  if (v26 < 0) {
    operator delete(*(void **)buf);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  uint64_t v12 = v20;
  std::string::basic_string[abi:ne180100]<0>(buf, "in_memory_model");
  uint64_t v22 = buf;
  char v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v12 + 472), buf, (uint64_t)&std::piecewise_construct, &v22);
  MEMORY[0x192FF0F50]((char *)v13 + 56, "1");
  if (v26 < 0) {
    operator delete(*(void **)buf);
  }
  std::string v14 = (std::__shared_weak_count *)v21;
  v17[0] = v12;
  v17[1] = v21;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v15 = espresso_plan_add_cpp_net_and_reload(a1, v17, a3, a4);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  return v15;
}

void sub_192771CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  int v25 = v24;
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a2 == 1)
  {
    unsigned __int8 v28 = (std::exception *)__cxa_begin_catch(exception_object);
    if (v23)
    {
      *(_DWORD *)(v23 + 8) = -1;
      *(void *)uint64_t v23 = 0;
    }
    handle_ex_plan(v22, v28);
    __cxa_end_catch();
    JUMPOUT(0x192771CB0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_set_compilation_platform(EspressoLight::espresso_aot_plan *a1, int a2)
{
  return 0;
}

uint64_t espresso_gpu_prefer_integrated()
{
  return 0;
}

uint64_t espresso_network_pin_weights_blob_storage(const void *a1, int a2)
{
}

uint64_t anonymous namespace'::network_weights_pin_unpin(const void *a1, int a2, uint64_t a3)
{
  if (!a1
  {
    return 4294967290;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v10);
  if (!v10 || (uint64_t v6 = *(void *)(v10 + 16)) == 0)
  {
    uint64_t v8 = 4294967291;
    goto LABEL_14;
  }
  if (a3)
  {
    if (!*(unsigned char *)(v6 + 72) || (uint64_t v7 = *(void *)(v10 + 576)) == 0) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Context has not kept weights blob storage alive. Cannot pin it now.");
    }
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(v10 + 576);
  if (v7) {
LABEL_12:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a3);
  uint64_t v8 = 0;
LABEL_14:
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  return v8;
}

uint64_t espresso_network_unpin_weights_blob_storage(const void *a1, int a2)
{
}

void EspressoLight::abstract_espresso_plan::bind_cvpixelbuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v6 = a6;
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_cvpixelbuffer");
}

void sub_192771FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EspressoLight::abstract_espresso_plan::bind_input_cvpixelbuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v6 = a6;
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_input_cvpixelbuffer");
}

void sub_192771FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::abstract_espresso_plan::bind_direct_cvpixelbuffer(EspressoLight::abstract_espresso_plan *this, int a2, const char *a3, __CVBuffer *a4)
{
  return 4294967287;
}

void EspressoLight::abstract_espresso_plan::bind_input_vimagebuffer_argb8()
{
}

void EspressoLight::abstract_espresso_plan::bind_input_vimagebuffer_XYZA8()
{
}

void EspressoLight::abstract_espresso_plan::submit(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a2;
  id v7 = a5;
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("submit");
}

void sub_19277207C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::abstract_espresso_plan::is_in_flight(EspressoLight::abstract_espresso_plan *this)
{
  return 0;
}

uint64_t EspressoLight::abstract_espresso_plan::is_valid_for_submit(EspressoLight::abstract_espresso_plan *this)
{
  return 0;
}

void EspressoLight::abstract_espresso_plan::unbind()
{
}

void EspressoLight::abstract_espresso_plan::bind_dyn_output(EspressoLight::abstract_espresso_plan *this, int a2, const char *a3)
{
}

void EspressoLight::abstract_espresso_plan::set_output_raw_ptr()
{
}

void EspressoLight::abstract_espresso_plan::set_input_raw_ptr()
{
}

void EspressoLight::abstract_espresso_plan::output_raw_ptr(EspressoLight::abstract_espresso_plan *this, int a2, const char *a3)
{
}

void EspressoLight::abstract_espresso_plan::input_raw_ptr(EspressoLight::abstract_espresso_plan *this, int a2, const char *a3)
{
}

void EspressoLight::abstract_espresso_plan::bind_external_output()
{
}

void EspressoLight::abstract_espresso_plan::bind_external_input()
{
}

uint64_t EspressoLight::abstract_espresso_plan::set_function_name()
{
  return 4294967287;
}

void EspressoLight::espresso_error::~espresso_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

EspressoLight::abstract_espresso_plan *EspressoLight::abstract_espresso_plan::abstract_espresso_plan(EspressoLight::abstract_espresso_plan *this, EspressoLight::espresso_context *a2, int a3)
{
  *(void *)this = &unk_1EE3242F0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = a3;
  bzero((char *)this + 20, 0x414uLL);
  return this;
}

void EspressoLight::abstract_espresso_plan::~abstract_espresso_plan(EspressoLight::abstract_espresso_plan *this)
{
  *(void *)this = &unk_1EE3242F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 132);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

uint64_t EspressoLight::abstract_espresso_plan::set_breakpoint_block(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x192FF2250](a2);
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v3;

  return 0;
}

uint64_t NDShapeUtils::compute_strides(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != result)
  {
    uint64_t v4 = (a2 - result) >> 2;
    if (v4 != (a4 - a3) >> 2) {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("Mismatch between lengths of shape and strides");
    }
    *(_DWORD *)(a3 + 4 * (v4 - 1)) = 1;
    if (v4 != 1)
    {
      int v5 = 1;
      do
      {
        v5 *= *(_DWORD *)(result - 4 + 4 * v4);
        *(_DWORD *)(a3 - 8 + 4 * v4--) = v5;
      }
      while (v4 != 1);
    }
  }
  return result;
}

int *NDShapeUtils::ravel_multi_index(int *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  unint64_t v6 = (a4 - a3) >> 2;
  if (v6 != (a2 - (uint64_t)result) >> 2) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid multi_index");
  }
  *a6 = 0;
  if (a4 != a3)
  {
    int v7 = 0;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      int v9 = *a5++;
      int v8 = v9;
      int v10 = *result++;
      v7 += v10 * v8;
      *a6 = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t NDShapeUtils::unravel_index(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = (a3 - a2) >> 2;
  if (v5 != (a5 - (uint64_t)a4) >> 2) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid multi_index");
  }
  while (--v5)
  {
    a4[v5] = (int)result % *(_DWORD *)(a2 + 4 * v5);
    double result = ((int)result / *(_DWORD *)(a2 + 4 * v5));
  }
  *a4 = result;
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int const&>(int a1, int a2)
{
}

void apply_func_on_nd_slice(const void *a1, uint64_t a2, uint64_t a3, int **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  long long v114 = 0;
  long long v115 = 0;
  uint64_t v116 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v114, a1, a2, (a2 - (uint64_t)a1) >> 2);
  std::__fs::filesystem::path v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 2;
  long long v112 = 0;
  uint64_t v113 = 0;
  long long v111 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v111, v17, v18, v19);
  int v110 = 0;
  uint64_t v20 = a12[1] - *a12;
  std::vector<int>::vector(&v109, (int)(v20 >> 2));
  std::vector<int>::vector(&v108, (int)(v20 >> 2));
  std::vector<int>::vector(&v107, (int)(v20 >> 2));
  std::vector<int>::vector(&v106, (int)(v20 >> 2));
  unint64_t v21 = (unint64_t)v20 >> 2;
  uint64_t v99 = ((unint64_t)v20 >> 2);
  if ((int)((unint64_t)v20 >> 2) < 1)
  {
    int v97 = 0;
    LODWORD(v63) = 0;
    uint64_t v64 = 0;
    std::string __p = 0;
    uint64_t v104 = 0;
    int v65 = 1;
    unint64_t v105 = 0;
    goto LABEL_81;
  }
  unint64_t v22 = 0;
  uint64_t v23 = *a5;
  __int16 v24 = *a4;
  uint64_t v25 = *a12;
  char v26 = v114;
  do
  {
    if ((*(void *)(v23 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22))
    {
      if (v24[v22] <= 0) {
        int v27 = *(_DWORD *)(v25 + 4 * v22) - 1;
      }
      else {
        int v27 = 0;
      }
    }
    else
    {
      int v27 = v26[v22];
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      v27 += *(_DWORD *)(v25 + 4 * v22);
    }
    v26[v22] = v27;
    if (v27 < 0) {
      goto LABEL_116;
    }
LABEL_10:
    if (v27 >= *(_DWORD *)(v25 + 4 * v22)) {
LABEL_116:
    }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel_cpu: Invalid values in begin_ids");
    ++v22;
  }
  while (v99 != v22);
  unint64_t v28 = 0;
  uint64_t v29 = *a7;
  uint64_t v30 = v114;
  uint64_t v31 = v111;
  std::string::size_type v32 = *a4;
  uint64_t v33 = *a6;
  uint64_t v34 = *a12;
  do
  {
    if ((*(void *)(v29 + 8 * (v28 >> 6)) & (1 << v28)) != 0)
    {
      int v35 = v30[v28];
      v31[v28] = v35;
      if (v32[v28] >= 1) {
        int v36 = v35 + 1;
      }
      else {
        int v36 = v35 - 1;
      }
LABEL_17:
      v31[v28] = v36;
      goto LABEL_18;
    }
    if ((*(void *)(v33 + 8 * (v28 >> 6)) & (1 << v28)) != 0)
    {
      if (v32[v28] < 1) {
        int v36 = -1;
      }
      else {
        int v36 = *(_DWORD *)(v34 + 4 * v28);
      }
      goto LABEL_17;
    }
    int v36 = v31[v28];
    if (v36 < 0)
    {
      v36 += *(_DWORD *)(v34 + 4 * v28);
      v31[v28] = v36;
      if (v36 < 0) {
LABEL_117:
      }
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel_cpu: Invalid values in end_ids");
    }
LABEL_18:
    if (v36 > *(_DWORD *)(v34 + 4 * v28)) {
      goto LABEL_117;
    }
    ++v28;
  }
  while (v99 != v28);
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  int v39 = 0;
  std::string __p = 0;
  uint64_t v104 = 0;
  unint64_t v105 = 0;
  do
  {
    if ((*(void *)(*a7 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38))
    {
      if ((unint64_t)v37 >= v105)
      {
        uint64_t v42 = (char *)__p;
        uint64_t v43 = (v37 - (unsigned char *)__p) >> 2;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v105 - (void)__p;
        if ((uint64_t)(v105 - (void)__p) >> 1 > v44) {
          unint64_t v44 = v45 >> 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v44;
        }
        if (v46)
        {
          unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46);
          uint64_t v42 = (char *)__p;
          uint64_t v37 = v104;
        }
        else
        {
          uint64_t v47 = 0;
        }
        uint64_t v54 = (char *)(v46 + 4 * v43);
        *(_DWORD *)uint64_t v54 = 1;
        std::string v55 = v54 + 4;
        while (v37 != v42)
        {
          int v56 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v54 - 1) = v56;
          v54 -= 4;
        }
        std::string __p = v54;
        uint64_t v104 = v55;
        unint64_t v105 = v46 + 4 * v47;
        if (v42) {
          operator delete(v42);
        }
        uint64_t v37 = v55;
      }
      else
      {
        *(_DWORD *)uint64_t v37 = 1;
        v37 += 4;
      }
    }
    else
    {
      int v40 = v39 + 1;
      uint64_t v41 = *a9;
      if ((unint64_t)v37 >= v105)
      {
        std::__fs::filesystem::path v48 = (char *)__p;
        uint64_t v49 = (v37 - (unsigned char *)__p) >> 2;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = v105 - (void)__p;
        if ((uint64_t)(v105 - (void)__p) >> 1 > v50) {
          unint64_t v50 = v51 >> 1;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v52);
          std::__fs::filesystem::path v48 = (char *)__p;
          uint64_t v37 = v104;
        }
        else
        {
          uint64_t v53 = 0;
        }
        uint64_t v57 = (char *)(v52 + 4 * v49);
        *(_DWORD *)uint64_t v57 = *(_DWORD *)(v41 + 4 * v39);
        uint64_t v58 = v57 + 4;
        while (v37 != v48)
        {
          int v59 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v57 - 1) = v59;
          v57 -= 4;
        }
        std::string __p = v57;
        uint64_t v104 = v58;
        unint64_t v105 = v52 + 4 * v53;
        if (v48) {
          operator delete(v48);
        }
        uint64_t v37 = v58;
      }
      else
      {
        *(_DWORD *)uint64_t v37 = *(_DWORD *)(v41 + 4 * v39);
        v37 += 4;
      }
      int v39 = v40;
    }
    uint64_t v104 = v37;
    ++v38;
  }
  while (v38 != v99);
  uint64_t v60 = (char *)__p;
  long long v61 = (char *)__p + 4;
  if (__p == v37 || v61 == v37)
  {
    LODWORD(v63) = 0;
    int v97 = 0;
    if (__p != v37)
    {
      uint64_t v64 = 0;
      goto LABEL_79;
    }
    int v65 = 1;
    uint64_t v64 = 0;
  }
  else
  {
    int v66 = *(_DWORD *)__p;
    uint64_t v67 = __p;
    uint64_t v68 = (char *)__p + 4;
    do
    {
      int v70 = *(_DWORD *)v68;
      v68 += 4;
      int v69 = v70;
      BOOL v71 = v66 < v70;
      if (v66 <= v70) {
        int v66 = v69;
      }
      if (v71) {
        uint64_t v67 = v61;
      }
      long long v61 = v68;
    }
    while (v68 != v37);
    uint64_t v64 = v67 - (unsigned char *)__p;
    uint64_t v63 = (v67 - (unsigned char *)__p) >> 2;
    int v97 = v63;
LABEL_79:
    int v65 = 1;
    do
    {
      int v72 = *(_DWORD *)v60;
      v60 += 4;
      v65 *= v72;
    }
    while (v60 != v37);
  }
LABEL_81:
  NDShapeUtils::compute_strides(*a12, a12[1], (uint64_t)v109.__begin_, (uint64_t)v109.__end_);
  NDShapeUtils::compute_strides((uint64_t)__p, (uint64_t)v104, (uint64_t)v108.__begin_, (uint64_t)v108.__end_);
  if (v65 >= 1)
  {
    int v73 = 0;
    uint64_t v74 = (int)(v64 >> 2);
    int v75 = *(int *)((char *)*a4 + (v64 << 30 >> 30))
        * *(std::vector<int>::pointer)((char *)v109.__begin_ + (v64 << 30 >> 30));
    std::vector<int>::pointer begin = v108.__begin_;
    int v95 = v65;
    do
    {
      if (begin[v74] >= 1)
      {
        uint64_t v77 = 0;
        do
        {
          NDShapeUtils::unravel_index((v73 + v77), (uint64_t)__p, (uint64_t)v104, v106.__begin_, (uint64_t)v106.__end_);
          if ((int)v21 >= 1)
          {
            std::vector<int>::pointer v78 = v106.__begin_;
            uint64_t v79 = v99;
            int v80 = *a4;
            uint64_t v81 = v114;
            long long v82 = (int *)*a12;
            std::vector<int>::pointer v83 = v107.__begin_;
            do
            {
              int v85 = *v78++;
              int v84 = v85;
              int v87 = *v80++;
              int v86 = v87;
              int v88 = *v81++;
              int v89 = v88 + v86 * v84;
              if (v89 < 0 || v89 >= *v82) {
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel_cpu: Invalid values in arguments (begin_ids, end_ids, strides)");
              }
              *v83++ = v89;
              ++v82;
              --v79;
            }
            while (v79);
          }
          std::string::size_type v100 = 0;
          uint64_t v101 = 0;
          uint64_t v102 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v100, v109.__begin_, (uint64_t)v109.__end_, v109.__end_ - v109.__begin_);
          NDShapeUtils::ravel_multi_index(v107.__begin_, (uint64_t)v107.__end_, *a12, a12[1], (int *)v100, &v110);
          if (v100)
          {
            uint64_t v101 = v100;
            operator delete(v100);
          }
          int v90 = *((_DWORD *)__p + v74);
          int v91 = v110 + (((v90 - 1) * v75) & (v75 >> 31));
          int v92 = v108.__begin_[v74];
          uint64_t v121 = a11 + 4 * v91;
          uint64_t v122 = a10 + 4 * v91;
          int v120 = v75;
          uint64_t v119 = a8 + 4 * v73 + 4 * v77;
          int v117 = v90;
          int v118 = v92;
          uint64_t v93 = *(void *)(a13 + 24);
          if (!v93) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t *, int *, uint64_t *, int *, int *))(*(void *)v93 + 48))(v93, &v122, &v121, &v120, &v119, &v118, &v117);
          ++v77;
          std::vector<int>::pointer begin = v108.__begin_;
        }
        while (v77 < v108.__begin_[v74]);
        int v65 = v95;
      }
      int v94 = v65;
      if (v97 > 0) {
        int v94 = begin[(v63 - 1)];
      }
      v73 += v94;
    }
    while (v73 < v65);
  }
  if (__p)
  {
    uint64_t v104 = (char *)__p;
    operator delete(__p);
  }
  if (v106.__begin_)
  {
    v106.__end_ = v106.__begin_;
    operator delete(v106.__begin_);
  }
  if (v107.__begin_)
  {
    v107.__end_ = v107.__begin_;
    operator delete(v107.__begin_);
  }
  if (v108.__begin_)
  {
    v108.__end_ = v108.__begin_;
    operator delete(v108.__begin_);
  }
  if (v109.__begin_)
  {
    v109.__end_ = v109.__begin_;
    operator delete(v109.__begin_);
  }
  if (v111)
  {
    long long v112 = v111;
    operator delete(v111);
  }
  if (v114)
  {
    long long v115 = v114;
    operator delete(v114);
  }
}

void sub_192772AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  uint64_t v34 = *(void **)(v32 - 176);
  if (v34)
  {
    *(void *)(v32 - 168) = v34;
    operator delete(v34);
  }
  int v35 = *(void **)(v32 - 152);
  if (v35)
  {
    *(void *)(v32 - 144) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

uint64_t std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8NDLayers8slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfS6_PfS6_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, uint64_t a3, const int *a4, float **a5, const int *a6, const int *a7)
{
}

void std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E320;
}

void *std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EE37E320;
  return result;
}

void std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
}

void *std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_192772F7C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int const&>(int a1)
{
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, float **a3, int *a4, const float **a5, int *a6, int *a7)
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E2C8;
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EE37E2C8;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, float **a3, int *a4, const float **a5, int *a6, int *a7)
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E270;
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EE37E270;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, float **a3, int *a4, const float **a5, int *a6, int *a7)
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E218;
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EE37E218;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, float **a3, int *a4, const float **a5, int *a6, int *a7)
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E1C0;
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EE37E1C0;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, uint64_t a2, float **a3, const int *a4, const float **a5, const int *a6, const int *a7)
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E168;
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EE37E168;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
}

void Espresso::analysis_tag_dynamic_blobs::~analysis_tag_dynamic_blobs(Espresso::analysis_tag_dynamic_blobs *this)
{
  *(void *)this = &unk_1EE35E0D0;
  uint64_t v1 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v1);

  JUMPOUT(0x192FF16B0);
}

{
  char *v1;

  *(void *)this = &unk_1EE35E0D0;
  uint64_t v1 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v1);
}

void Espresso::pass_tag_dynamic_blobs::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = (char *)operator new(0x70uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1EE388490;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((void *)v5 + 3) = &unk_1EE35E0D0;
  *((_OWORD *)v5 + 2) = 0u;
  unint64_t v6 = v5 + 32;
  *((_OWORD *)v5 + 3) = 0u;
  *((_DWORD *)v5 + 16) = 1065353216;
  *(_OWORD *)(v5 + 72) = 0u;
  int v7 = v5 + 72;
  *(_OWORD *)(v5 + 88) = 0u;
  *((_DWORD *)v5 + 26) = 1065353216;
  uint64_t v40 = *((void *)a1 + 121);
  int v8 = (std::__shared_weak_count *)*((void *)a1 + 122);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = v8;
  if (v40)
  {
    Espresso::net::get_analysis_if_existing<Espresso::control_flow_graph>(&v46, (uint64_t)a1);
    Espresso::net::get_analysis_if_existing<Espresso::analysis_make_ssa>(&v44, (uint64_t)a1);
    if (v46)
    {
      Espresso::control_flow_graph::blob_defined_in_block((char *)&__p, v46);
      int v9 = *(unsigned __int8 **)(v44 + 104);
      if (v9)
      {
        while (1)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v9 + 6) - *((void *)v9 + 5)) >> 3) >= 2)
          {
            std::__fs::filesystem::path v48 = (long long *)(v9 + 16);
            int v10 = std::__hash_table<std::__hash_value_type<std::string,Espresso::basic_block *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::basic_block *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&__p, v9 + 16, &v48);
            uint64_t v12 = (unsigned __int8 *)*((void *)v9 + 5);
            char v11 = (unsigned __int8 *)*((void *)v9 + 6);
            if (v12 != v11) {
              break;
            }
          }
LABEL_40:
          int v9 = *(unsigned __int8 **)v9;
          if (!v9) {
            goto LABEL_41;
          }
        }
        uint64_t v13 = *((void *)v10 + 5);
        while (1)
        {
          std::__fs::filesystem::path v48 = (long long *)v12;
          if (*((void *)std::__hash_table<std::__hash_value_type<std::string,Espresso::basic_block *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::basic_block *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&__p, v12, &v48)+ 5) == v13)
          {
            uint64_t v14 = v9[39];
            if ((v14 & 0x80u) == 0) {
              uint64_t v15 = v9[39];
            }
            else {
              uint64_t v15 = *((void *)v9 + 3);
            }
            uint64_t v16 = v12[23];
            int v17 = (char)v16;
            if ((v16 & 0x80u) != 0) {
              uint64_t v16 = *((void *)v12 + 1);
            }
            if (v15 == v16)
            {
              if (v17 >= 0) {
                uint64_t v18 = v12;
              }
              else {
                uint64_t v18 = *(unsigned __int8 **)v12;
              }
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v9 + 2), v18, *((void *)v9 + 3))) {
                  goto LABEL_37;
                }
              }
              else
              {
                if (!v9[39]) {
                  goto LABEL_37;
                }
                unint64_t v19 = v9 + 16;
                while (*v19 == *v18)
                {
                  ++v19;
                  ++v18;
                  if (!--v14) {
                    goto LABEL_37;
                  }
                }
              }
            }
          }
          if (!v13) {
            goto LABEL_39;
          }
          uint64_t v20 = **(void **)(*(void *)(v13 + 8) + 16);
          unint64_t v21 = (void *)(v20 + 40);
          int v22 = *(char *)(v20 + 63);
          if (v22 < 0)
          {
            if (*(void *)(v20 + 48) != 16) {
              goto LABEL_39;
            }
            unint64_t v21 = (void *)*v21;
          }
          else if (v22 != 16)
          {
            goto LABEL_39;
          }
          __int16 v24 = (void *)*v21;
          uint64_t v23 = v21[1];
          if (v24 != (void *)0x5F747865746E6F63 || v23 != 0x726566736E617274)
          {
LABEL_39:
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v6, (uint64_t)(v9 + 16), (uint64_t)(v9 + 16));
            goto LABEL_40;
          }
LABEL_37:
          v12 += 24;
          if (v12 == v11) {
            goto LABEL_40;
          }
        }
      }
LABEL_41:
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p.__r_.__value_.__r.__words[2]);
      char v26 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v26) {
        operator delete(v26);
      }
    }
    uint64_t v38 = a2;
    std::__fs::filesystem::path v48 = 0;
    if (*((void *)a1 + 5) != *((void *)a1 + 4))
    {
      int v27 = (void *)(v40 + 184);
      do
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
        unint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, (unint64_t *)&v48, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        uint64_t v29 = v28[3];
        uint64_t v30 = v28[4];
        uint64_t v31 = v29;
        if (v29 != v30)
        {
          do
          {
            Espresso::map_const_get<std::unordered_map<std::string,std::string>>(&__p, v27, v29, v29);
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, (uint64_t)&__p))
            {
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v7, (unint64_t *)&v48, &v48);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            v29 += 24;
          }
          while (v29 != v30);
          uint64_t v29 = v28[3];
          uint64_t v31 = v28[4];
        }
        uint64_t v32 = *(void *)(*(void *)(*((void *)a1 + 4) + 16 * (void)v48) + 64);
        if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v32 + 264))(v32, 0xAAAAAAAAAAAAAAABLL * ((v31 - v29) >> 3)) & 1) != 0|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v7, (unint64_t)v48))
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
          uint64_t v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 96, (unint64_t *)&v48, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
          uint64_t v34 = v33[3];
          uint64_t v35 = v33[4];
          if (v34 != v35)
          {
            do
            {
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v6, v34, v34);
              v34 += 24;
            }
            while (v34 != v35);
            uint64_t v36 = v33[3];
            uint64_t v37 = v33[4];
            while (v36 != v37)
            {
              Espresso::map_const_get<std::unordered_map<std::string,std::string>>(&__p, v27, v36, v36);
              v41[0] = MEMORY[0x1E4F143A8];
              v41[1] = 3321888768;
              void v41[2] = ___ZN8Espresso22pass_tag_dynamic_blobs14run_on_networkERNS_3netE_block_invoke;
              v41[3] = &__block_descriptor_48_ea8_32c65_ZTSNSt3__110shared_ptrIN8Espresso26analysis_tag_dynamic_blobsEEE_e10_v16__0r_v8l;
              v41[4] = v5 + 24;
              uint64_t v42 = (std::__shared_weak_count *)v5;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
              Espresso::interpreter_t::iterate_all_ssa_versions(v40, (uint64_t)&__p, v41);
              if (v42) {
                nitro::nitro_function::nitro_function(v42);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              v36 += 24;
            }
          }
        }
        std::__fs::filesystem::path v48 = (long long *)((char *)v48 + 1);
      }
      while ((unint64_t)v48 < (uint64_t)(*((void *)a1 + 5) - *((void *)a1 + 4)) >> 4);
    }
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    a2 = v38;
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = v5 + 24;
  *(void *)(a2 + 16) = v5;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
}

void sub_192773A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    nitro::nitro_function::nitro_function(a32);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v33 - 128);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  nitro::nitro_function::nitro_function(v32);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,Espresso::basic_block *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::basic_block *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = (std::string *)(v13 + 16);
  uint64_t v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  uint64_t v18 = a1 + 2;
  *((void *)v13 + 5) = 0;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v25 = operator new(8 * *(void *)&prime);
          char v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          unint64_t v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *unint64_t v28 = *v34;
                  void *v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                unint64_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  uint64_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)uint64_t v13 = *v37;
LABEL_75:
    *uint64_t v37 = v13;
    goto LABEL_76;
  }
  *(void *)uint64_t v13 = *v18;
  *uint64_t v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    uint64_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_192773EF0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t *___ZN8Espresso22pass_tag_dynamic_blobs14run_on_networkERNS_3netE_block_invoke(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(void *)(a1 + 32) + 8, a2, a2);
}

void __destroy_helper_block_ea8_32c65_ZTSNSt3__110shared_ptrIN8Espresso26analysis_tag_dynamic_blobsEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c65_ZTSNSt3__110shared_ptrIN8Espresso26analysis_tag_dynamic_blobsEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_tag_dynamic_blobs>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::analysis_tag_dynamic_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388490;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_tag_dynamic_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_tag_dynamic_blobs::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

void Espresso::pass_tag_dynamic_blobs::~pass_tag_dynamic_blobs(Espresso::pass_tag_dynamic_blobs *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t Espresso::CPUFP16Engine::convolution_kernel_cpu::get_f16_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 584);
  *a2 = *(void *)(this + 576);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::get_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::CPUFP16Engine::convolution_kernel_cpu::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 568);
  *a2 = *(void *)(this + 560);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::set_weights()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "shuffled weights not supported");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192774140(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 Espresso::CPUFP16Engine::convolution_kernel_cpu::set_weights@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v18, *(void *)a2 + 8);
  _D0 = v18;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 584);
  *(_OWORD *)(a1 + 576) = v18;
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
    uint64_t v6 = *(void *)(a1 + 576);
  }
  else
  {
    uint64_t v6 = _D0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = *(int **)(*(void *)a2 + 24);
  unint64_t v9 = *(_WORD **)(v6 + 24);
  uint64_t v10 = *(int *)(v6 + 8);
  uint64_t v11 = v6 + 12;
  do
  {
    v10 *= *(int *)(v11 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  for (; v10; --v10)
  {
    int v12 = *v8++;
    LODWORD(_D0) = v12;
    __asm { FCVT            H0, S0 }
    *v9++ = _D0;
  }
  return _D0;
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 560) = v5;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 568);
  *(void *)(a1 + 568) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(a1 + 336) = *a2 != 0;
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::share_weights(void *a1, const void **a2)
{
  if (*a2)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = v3[72];
      uint64_t v6 = v3[73];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      a1[72] = v5;
      uint64_t v7 = (std::__shared_weak_count *)a1[73];
      a1[73] = v6;
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      uint64_t v8 = v4[70];
      uint64_t v9 = v4[71];
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      a1[70] = v8;
      uint64_t v10 = (std::__shared_weak_count *)a1[71];
      a1[71] = v9;
      if (v10)
      {
        nitro::nitro_function::nitro_function(v10);
      }
    }
  }
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v5)
  {
    uint64_t v6 = (std::__shared_weak_count *)v5[23];
    uint64_t v176 = v5[22];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v176 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v7)
  {
    uint64_t v8 = v7[22];
    uint64_t v9 = (std::__shared_weak_count *)v7[23];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  int v205 = *(_DWORD *)(v8 + 8);
  uint64_t v174 = v8 + 8;
  int v204 = *(_DWORD *)(v8 + 12);
  int v10 = *(_DWORD *)(v176 + 8);
  int v11 = *(_DWORD *)(v176 + 12);
  int v12 = *(_DWORD *)(a1 + 352);
  int v13 = *(_DWORD *)(a1 + 356);
  int v14 = *(__int16 *)(a1 + 376);
  uint64_t v179 = v8;
  switch(v14)
  {
    case 4:
      goto LABEL_12;
    case 2:
      *(void *)long long v199 = 0;
      uint64_t v15 = (_DWORD *)a1;
      break;
    case 1:
LABEL_12:
      uint64_t v15 = (_DWORD *)a1;
      int v16 = v13 - v204 + (v11 - 1) * *(__int16 *)(a1 + 398);
      int v17 = v12 - v205 + (v10 - 1) * *(__int16 *)(a1 + 396);
      unsigned int v18 = v16 & ~(v16 >> 31);
      unsigned int v19 = v17 & ~(v17 >> 31);
      int v20 = *(unsigned __int16 *)(a1 + 376);
      unsigned int v21 = v19 >> 1;
      unsigned int v22 = v19 - (v19 >> 1);
      unsigned int v23 = v18 >> 1;
      unsigned int v24 = v18 - (v18 >> 1);
      _ZF = v20 == 1;
      if (v20 == 1) {
        int v26 = v23;
      }
      else {
        int v26 = v24;
      }
      v199[1] = v26;
      if (_ZF) {
        int v27 = v21;
      }
      else {
        int v27 = v22;
      }
      v199[0] = v27;
      break;
    default:
      uint64_t v15 = (_DWORD *)a1;
      v199[0] = *(__int16 *)(a1 + 384);
      v199[1] = *(__int16 *)(a1 + 388);
      break;
  }
  int v28 = v15[105];
  if (v28 <= 1) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v28;
  }
  int v30 = (v15[87] - 1) / (int)v29;
  uint64_t v180 = v29;
  int v175 = (v15[86] - 1) / (int)v29;
  if (v30 + 1 < 8) {
    int v31 = v30 + 1;
  }
  else {
    int v31 = 8;
  }
  if (v10 < 65) {
    unsigned int v32 = 1;
  }
  else {
    unsigned int v32 = 2;
  }
  if (v10 >= 129) {
    uint64_t v33 = 4;
  }
  else {
    uint64_t v33 = v32;
  }
  if (v11 < 65) {
    int v34 = 1;
  }
  else {
    int v34 = 2;
  }
  if (v11 >= 129) {
    int v35 = 4;
  }
  else {
    int v35 = v34;
  }
  int v212 = v30 + 1;
  int v189 = v175 + 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v224, v12, v13, v30 + 1, v175 + 1);
  uint64_t v173 = v33;
  int v36 = (v10 - 1) / (int)v33;
  uint64_t v37 = (v36 + 1);
  int v172 = v35;
  int v196 = (v11 - 1) / v35;
  int v202 = v31;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v222, v36 + 1, v196 + 1, v15[88] * v31 * v15[89], 1);
  *(void *)char v213 = (v196 + 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v220, v36 + 1, v213[0], v175 + 1, 1);
  unsigned int v170 = v9;
  uint64_t v171 = v6;
  if (*(_DWORD *)(a1 + 412))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&src, v36 + 1, v213[0], 2, 1);
    int data = (void **)src.data;
    height = (std::__shared_weak_count *)src.height;
  }
  else
  {
    int data = 0;
    height = 0;
  }
  int v39 = v196 + 1;
  int v186 = 0;
  int v40 = 0;
  int v201 = v10;
  uint64_t v41 = (v213[0] * v37);
  uint64_t __ldb = (int)v41;
  int v200 = v11;
  BOOL v44 = v10 < 65 && v11 < 65;
  BOOL v188 = v44;
  uint64_t v45 = 4 * (int)v41;
  uint64_t v46 = 8;
  if (v212 < 8) {
    uint64_t v46 = v212;
  }
  uint64_t v198 = v46;
  uint64_t v217 = v224;
  uint64_t v197 = v222;
  unsigned int v47 = v202;
  uint64_t v210 = v47 + v47 * (v30 / v202);
  uint64_t v48 = v176;
  uint64_t v49 = a1;
  uint64_t v50 = v173;
  int v51 = v172;
  int __N = v213[0] * v37;
  uint64_t v214 = v220;
  uint64_t v209 = 4 * (int)v37;
  do
  {
    uint64_t v52 = 0;
    uint64_t v206 = 0;
    int v203 = v40;
    int v185 = v40 * v39;
    int v184 = v40 * v39 + v39;
    do
    {
      if (*(int *)(v48 + 20) >= 1)
      {
        int v178 = 0;
        uint64_t v190 = v52;
        do
        {
          uint64_t v53 = 0;
          uint64_t v177 = v48;
          std::string v55 = *(void **)(v48 + 8);
          uint64_t v54 = v48 + 8;
          LODWORD(src.height) = *(_DWORD *)(v54 + 8);
          src.int data = v55;
          int v56 = 1;
          do
          {
            v56 *= *(_DWORD *)(v54 + v53);
            v53 += 4;
          }
          while (v53 != 12);
          uint64_t v57 = *(void *)(v177 + 24);
          uint64_t v58 = operator new(0x60uLL);
          uint64_t v59 = 0;
          v58[1] = 0;
          v58[2] = 0;
          *uint64_t v58 = &unk_1EE389D48;
          *((_OWORD *)v58 + 4) = 0u;
          *((_OWORD *)v58 + 5) = 0u;
          uint64_t v60 = src.data;
          v58[3] = &unk_1EE36C110;
          v58[4] = v60;
          *((_DWORD *)v58 + 10) = src.height;
          v58[6] = v57 + 2 * v56 * v178;
          uint64_t v195 = v58;
          *((unsigned char *)v58 + 56) = 0;
          src.int data = *(void **)v174;
          LODWORD(src.height) = *(_DWORD *)(v174 + 8);
          int v61 = 1;
          do
          {
            v61 *= *(_DWORD *)(v179 + 8 + v59);
            v59 += 4;
          }
          while (v59 != 12);
          uint64_t v62 = *(void *)(v179 + 24);
          uint64_t v63 = (std::__shared_weak_count *)operator new(0x60uLL);
          uint64_t v181 = 0;
          uint64_t v182 = 0;
          v63->__shared_owners_ = 0;
          v63->__shared_weak_owners_ = 0;
          v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D48;
          uint64_t v64 = src.data;
          v63[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36C110;
          v63[1].__shared_owners_ = (uint64_t)v64;
          LODWORD(v63[1].__shared_weak_owners_) = src.height;
          *(_OWORD *)&v63[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v63[3].__shared_owners_ = 0u;
          v63[2].__vftable = (std::__shared_weak_count_vtbl *)(v62 + 2 * v61 * v178);
          char v207 = v63;
          LOBYTE(v63[2].__shared_owners_) = 0;
          int v65 = v175 + 1;
          uint64_t v52 = v190;
          uint64_t v191 = v65 + v65 * (v175 / v189);
          uint64_t v66 = v214;
          do
          {
            if ((int)v191 >= 1)
            {
              int v67 = *(_DWORD *)(v49 + 352) * *(_DWORD *)(v49 + 356);
              uint64_t v193 = v181 * v189;
              uint64_t v187 = v67 * v212 * (int)v181 * v189;
              uint64_t v208 = v212 * (int)v181 * *(_DWORD *)(v179 + 8) * *(_DWORD *)(v179 + 12);
              uint64_t v68 = 0;
              uint64_t v183 = v67 * (int)v182;
              int v194 = HIDWORD(v182);
              do
              {
                uint64_t v192 = v68 & ~((int)v68 >> 31);
                uint64_t v69 = (v65 - v192);
                uint64_t v215 = v68;
                uint64_t v216 = v69;
                if (*(_DWORD *)(v49 + 416) || (uint64_t v71 = *(void *)(v49 + 560)) == 0)
                {
                  uint64_t v70 = v181 * v189;
                  if ((int)v69 * (uint64_t)(int)__ldb)
                  {
                    bzero(*(void **)(v66 + 24), v45 * (v189 - v192));
                    uint64_t v69 = v216;
                  }
                }
                else
                {
                  uint64_t v70 = v181 * v189;
                  if ((int)v69 >= 1)
                  {
                    uint64_t v72 = 0;
                    for (uint64_t i = 0; i != v69; ++i)
                    {
                      if (__ldb)
                      {
                        uint64_t v74 = *(void *)(v71 + 16);
                        int v75 = (_DWORD *)(*(void *)(v66 + 24) + v72);
                        uint64_t v76 = v41;
                        do
                        {
                          *v75++ = *(_DWORD *)(v74 + 4 * (v215 + v193 + i));
                          --v76;
                        }
                        while (v76);
                      }
                      v72 += v45;
                    }
                  }
                }
                uint64_t v77 = *(void *)(v49 + 576);
                if (v77)
                {
                  int v78 = *(_DWORD *)(v49 + 352);
                  int v79 = *(_DWORD *)(v49 + 356);
                  int v80 = *(void **)(v217 + 24);
                  src.int data = (void *)(*(void *)(v77 + 24) + 2 * v187 + 2 * v212 * (int)v215 * v78 * v79);
                  src.height = 1;
                  src.width = (int)v69 * v212 * v78 * v79;
                  src.rowBytes = 2 * src.width;
                  dest.int data = v80;
                  dest.height = 1;
                  dest.width = src.width;
                  dest.rowBytes = 4 * src.width;
                  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                  int v81 = v196 + 1;
                  uint64_t v69 = v216;
                }
                else
                {
                  uint64_t v82 = *(void *)(v49 + 504);
                  int v81 = v196 + 1;
                  if (!v82 || (uint64_t v83 = *(void *)(v49 + 520)) == 0)
                  {
                    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Conv fp16 weights not set");
                    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  if ((int)v69 >= 1)
                  {
                    uint64_t v84 = 0;
                    uint64_t v85 = v215;
                    uint64_t v86 = *(int *)(v49 + 352) * (uint64_t)v212 * *(int *)(v49 + 356);
                    uint64_t v87 = *(void *)(v82 + 16);
                    uint64_t v88 = *(int *)(v49 + 344);
                    uint64_t v89 = (*(_DWORD *)(v49 + 352) * v212 * *(_DWORD *)(v49 + 356));
                    uint64_t v90 = v183 + v215 * v86;
                    do
                    {
                      if ((int)v89 >= 1)
                      {
                        float v91 = *(float *)(v87 + 4 * (v85 + v70));
                        float v92 = *(float *)(v87 + 4 * (v85 + v70 + v88)) - v91;
                        uint64_t v93 = (float *)(*(void *)(v217 + 24) + v84);
                        int v94 = (unsigned __int8 *)(*(void *)(v83 + 24) + v90);
                        uint64_t v95 = v89;
                        do
                        {
                          unsigned int v96 = *v94++;
                          *v93++ = v91 + (float)((float)((float)v96 * 0.0039216) * v92);
                          --v95;
                        }
                        while (v95);
                      }
                      ++v85;
                      v84 += 4 * v86;
                      v90 += v86;
                    }
                    while (v85 < v215 + (int)v69);
                  }
                }
                int v97 = *(_DWORD *)(v49 + 412);
                if (v97)
                {
                  int v98 = *((_DWORD *)data + 2);
                  int v99 = *((_DWORD *)data + 3);
                  uint64_t v100 = *((int *)data + 4);
                  if (v99 * (uint64_t)v98 * v100)
                  {
                    bzero(data[3], 4 * v98 * (uint64_t)v99 * v100);
                    uint64_t v69 = v216;
                    int v81 = v196 + 1;
                  }
                }
                if ((int)v210 >= 1)
                {
                  uint64_t v101 = 0;
                  do
                  {
                    uint64_t v219 = v101 + v198;
                    if (v101 + v198 <= v212) {
                      unint64_t v102 = v47;
                    }
                    else {
                      unint64_t v102 = (v212 - v101);
                    }
                    Espresso::CPUFP16Engine::image2colbuffer_f32_partitioned(*(void *)(v197 + 24), (float *)((char *)v207[2].__vftable + 2 * v208 + 2 * v101 * v204 * v205), (const unsigned __int16 *)v102, v204, v205, v200, v201, *(_DWORD *)(a1 + 356), *(_DWORD *)(a1 + 352), v199[1], v199[0], *(__int16 *)(a1 + 398), *(__int16 *)(a1 + 396), v37, v81, v206, v203, v168);
                    uint64_t v103 = *(int *)(a1 + 356) * (uint64_t)*(int *)(a1 + 352);
                    int v104 = v103 * v102;
                    uint64_t v66 = v214;
                    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v216, __N, v104, 1.0, (const float *)(*(void *)(v217 + 24) + 4 * v101 * v103), v103 * v212, *(const float **)(v197 + 24), __ldb, 1.0, *(float **)(v214 + 24), __N);
                    unsigned int v47 = v202;
                    int v81 = v196 + 1;
                    if (!v215 && *(_DWORD *)(a1 + 412) && (v196 & 0x80000000) == 0)
                    {
                      uint64_t v105 = 0;
                      uint64_t v106 = 0;
                      LODWORD(v107) = 0;
                      int v108 = *(_DWORD *)(a1 + 352) * v202 * *(_DWORD *)(a1 + 356);
                      do
                      {
                        if ((v36 & 0x80000000) == 0)
                        {
                          uint64_t v109 = 0;
                          int v110 = (float *)data[3];
                          uint64_t v107 = (int)v107;
                          long long v111 = (float *)(*(void *)(v197 + 24) + v105);
                          do
                          {
                            long long v112 = v111;
                            int v113 = v108;
                            if (v108 >= 1)
                            {
                              do
                              {
                                float v114 = *v112;
                                v110[v107] = *v112 + v110[v107];
                                v110[v107 + __ldb] = v110[v107 + __ldb] + (float)(v114 * v114);
                                long long v112 = (float *)((char *)v112 + v45);
                                --v113;
                              }
                              while (v113);
                            }
                            ++v107;
                            ++v109;
                            ++v111;
                          }
                          while (v109 != v37);
                        }
                        ++v106;
                        v105 += v209;
                      }
                      while (v106 != *(void *)v213);
                    }
                    v101 += v198;
                  }
                  while (v219 < v210);
                  uint64_t v49 = a1;
                  int v97 = *(_DWORD *)(a1 + 412);
                  uint64_t v69 = v216;
                }
                uint64_t v41 = (v213[0] * v37);
                if (v97 && (v196 & 0x80000000) == 0)
                {
                  int v115 = 0;
                  int v116 = 0;
                  float v117 = 1.0 / (float)(*(_DWORD *)(v49 + 352) * v212 * *(_DWORD *)(v49 + 356));
                  do
                  {
                    if ((v36 & 0x80000000) == 0)
                    {
                      int v118 = 0;
                      uint64_t v119 = (float *)data[3];
                      int v120 = *(_DWORD *)(v49 + 344);
                      uint64_t v121 = v116;
                      uint64_t v122 = 4 * v116;
                      do
                      {
                        float v123 = v119[v121 + __ldb] + (float)((float)-(float)(v119[v121] * v119[v121]) * v117);
                        if (v123 < 0.000001) {
                          float v123 = 0.000001;
                        }
                        if (v120 >= 1)
                        {
                          float v124 = 1.0 / sqrtf(v123);
                          uint64_t v125 = (float *)(*(void *)(v66 + 24) + v122);
                          int v126 = v120;
                          do
                          {
                            *uint64_t v125 = v124 * *v125;
                            uint64_t v125 = (float *)((char *)v125 + v45);
                            --v126;
                          }
                          while (v126);
                        }
                        ++v121;
                        v122 += 4;
                        _ZF = v118++ == v36;
                      }
                      while (!_ZF);
                      int v116 = v121;
                    }
                    _ZF = v115++ == v196;
                  }
                  while (!_ZF);
                }
                if (*(_DWORD *)(v49 + 416)) {
                  BOOL v127 = (int)v69 < 1;
                }
                else {
                  BOOL v127 = 1;
                }
                if (!v127)
                {
                  uint64_t v128 = 0;
                  uint64_t v129 = 0;
                  int v130 = v215 + v193;
                  uint64_t v131 = *(void *)(*(void *)(v49 + 560) + 16);
                  do
                  {
                    if (__N >= 1)
                    {
                      uint64_t v132 = (float *)(v131 + 16 * (v130 + (int)v129));
                      float v133 = *v132;
                      float v134 = *(float *)(v131 + 16 * (v130 + (int)v129) + 4);
                      float v135 = v132[2];
                      float v136 = 1.0 / v132[3];
                      uint64_t v137 = (float *)(*(void *)(v66 + 24) + v128);
                      uint64_t v138 = (v213[0] * v37);
                      do
                      {
                        float *v137 = v134 + (float)((float)(v136 * (float)(*v137 - v135)) * v133);
                        ++v137;
                        --v138;
                      }
                      while (v138);
                    }
                    ++v129;
                    v128 += v45;
                  }
                  while (v129 != v69);
                }
                int v139 = *(_DWORD *)(v49 + 328);
                if (v139 == 1)
                {
                  LODWORD(src.data) = 0;
                  vDSP_vthr(*(const float **)(v66 + 24), 1, (const float *)&src, *(float **)(v66 + 24), 1, *(int *)(v66 + 12) * (uint64_t)*(int *)(v66 + 8) * *(int *)(v66 + 16));
                }
                else if (v139 == 2)
                {
                  uint64_t v140 = *(int *)(v66 + 12) * (uint64_t)*(int *)(v66 + 8) * *(int *)(v66 + 16);
                  if (v140)
                  {
                    std::string::size_type v141 = *(float **)(v66 + 24);
                    do
                    {
                      if (*v141 < 0.0) {
                        *std::string::size_type v141 = *v141 * 0.25;
                      }
                      ++v141;
                      --v140;
                    }
                    while (v140);
                  }
                }
                if (*(_DWORD *)(v49 + 332))
                {
                  uint64_t v142 = *(int *)(v214 + 12) * (uint64_t)*(int *)(v214 + 8) * *(int *)(v214 + 16);
                  if (v142)
                  {
                    std::string::size_type v143 = *(float **)(v214 + 24);
                    do
                    {
                      float *v143 = tanhf(*v143);
                      ++v143;
                      --v142;
                    }
                    while (v142);
                  }
                }
                int v144 = *((_DWORD *)v195 + 9);
                uint64_t v145 = *((int *)v195 + 8);
                if (v188)
                {
                  int v65 = v175 + 1;
                  uint64_t v52 = v190;
                  uint64_t v66 = v214;
                  if (v144 * v145 * v216)
                  {
                    unint64_t v146 = *(int **)(v214 + 24);
                    uint64_t v147 = v144 * (int)v145 * (v175 + 1 - (int)v192);
                    long long v148 = (_WORD *)(v195[6] + 2 * v144 * (int)v145 * v194);
                    do
                    {
                      int v149 = *v146++;
                      _S0 = v149;
                      __asm { FCVT            H0, S0 }
                      *v148++ = _S0;
                      --v147;
                    }
                    while (v147);
                  }
                }
                else
                {
                  int v65 = v175 + 1;
                  uint64_t v52 = v190;
                  uint64_t v66 = v214;
                  if ((int)v216 >= 1)
                  {
                    int v154 = 0;
                    int v155 = 0;
                    uint64_t v156 = 0;
                    int v157 = v144 - v185;
                    if (v184 <= v144) {
                      int v157 = v196 + 1;
                    }
                    int v158 = v144 * v145;
                    uint64_t v159 = 2 * v158 * v194 + 2 * v186 * (int)v145;
                    int v160 = v145 - v206 * v37;
                    if (v206 * (int)v37 + (int)v37 <= v145) {
                      int v160 = v36 + 1;
                    }
                    uint64_t v161 = 2 * v145;
                    do
                    {
                      if (v157 >= 1)
                      {
                        int v162 = 0;
                        uint64_t v163 = v195[6] + v190 + v159 + 2 * v155;
                        uint64_t v164 = *(void *)(v214 + 24) + 4 * v154;
                        do
                        {
                          if (v160)
                          {
                            for (uint64_t j = 0; j != v160; *(_WORD *)(v163 + 2 * j++) = _S0)
                            {
                              _S0 = *(_DWORD *)(v164 + 4 * j);
                              __asm { FCVT            H0, S0 }
                            }
                          }
                          ++v162;
                          v163 += v161;
                          v164 += v209;
                        }
                        while (v162 < v157);
                      }
                      ++v156;
                      v155 += v158;
                      v154 += __ldb;
                    }
                    while (v156 != v216);
                  }
                }
                uint64_t v68 = v215 + v189;
                v194 += v65;
              }
              while (v68 < v191);
            }
            LODWORD(v182) = v182 + v189 * v212;
            HIDWORD(v182) += v65;
            ++v181;
          }
          while (v181 != v180);
          nitro::nitro_function::nitro_function(v207);
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v195);
          uint64_t v48 = v177;
          ++v178;
        }
        while (v178 < *(_DWORD *)(v177 + 20));
        uint64_t v50 = v173;
        int v51 = v172;
        int v39 = v196 + 1;
      }
      v52 += 2 * (int)v37;
      ++v206;
    }
    while (v206 != v50);
    int v40 = v203 + 1;
    v186 += v39;
  }
  while (v203 + 1 != v51);
  if (height) {
    nitro::nitro_function::nitro_function(height);
  }
  if (v221) {
    nitro::nitro_function::nitro_function(v221);
  }
  if (v223) {
    nitro::nitro_function::nitro_function(v223);
  }
  if (v225) {
    nitro::nitro_function::nitro_function(v225);
  }
  if (v170) {
    nitro::nitro_function::nitro_function(v170);
  }
  if (v171) {
    nitro::nitro_function::nitro_function(v171);
  }
}

void sub_1927751F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v60 = *(std::__shared_weak_count **)(v58 - 232);
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  int v61 = *(std::__shared_weak_count **)(v58 - 216);
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  uint64_t v62 = *(std::__shared_weak_count **)(v58 - 200);
  if (v62)
  {
    nitro::nitro_function::nitro_function(v62);
    if (!v57)
    {
LABEL_7:
      if (!v56) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (!v57)
  {
    goto LABEL_7;
  }
  nitro::nitro_function::nitro_function(v57);
  if (!v56) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_8:
  nitro::nitro_function::nitro_function(v56);
  goto LABEL_9;
}

void Espresso::blob<unsigned short,3>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C110;
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned short,3>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C110;
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::~convolution_kernel_cpu(Espresso::CPUFP16Engine::convolution_kernel_cpu *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

void Espresso::CPUFP16Engine::pool_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v8 = v6[22];
    uint64_t v7 = (std::__shared_weak_count *)v6[23];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  float v114 = v7;
  if (!v9)
  {
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)v9 + 22);
  uint64_t v10 = *((void *)v9 + 23);
  if (!v10)
  {
LABEL_9:
    int v113 = 0;
    goto LABEL_10;
  }
  int v113 = (std::__shared_weak_count *)*((void *)v9 + 23);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
LABEL_10:
  uint64_t v12 = 0;
  int v13 = *(_DWORD *)(a1 + 304);
  int v14 = *(_DWORD *)(a1 + 308);
  uint64_t v15 = *(unsigned int *)(a1 + 312);
  int v16 = *(_DWORD *)(a1 + 320);
  int v17 = *(_DWORD *)(a1 + 324);
  int v18 = *(_DWORD *)(a1 + 332);
  int v19 = *(__int16 *)(a1 + 340);
  unsigned int v20 = *(__int16 *)(a1 + 348);
  unsigned int v141 = *(__int16 *)(a1 + 352);
  int v125 = *(unsigned __int16 *)(a1 + 364);
  int v120 = *(unsigned __int16 *)(a1 + 366);
  int v117 = *(unsigned __int16 *)(a1 + 372);
  uint64_t v21 = 1;
  long long v149 = 0u;
  long long v150 = 0u;
  do
  {
    *((void *)&v149 + v12) = (int)v21;
    v21 *= *(int *)(v11 + 8 + 4 * v12++);
  }
  while (v12 != 4);
  uint64_t v22 = 0;
  uint64_t v151 = v21;
  uint64_t v148 = 0;
  long long v146 = 0u;
  long long v147 = 0u;
  uint64_t v23 = 1;
  do
  {
    *((void *)&v146 + v22) = (int)v23;
    v23 *= *(unsigned int *)(v8 + 4 * v22++ + 8);
  }
  while (v22 != 4);
  if (v19 != 4)
  {
    if (v19 == 2)
    {
      unsigned int v141 = 0;
      unsigned int v20 = 0;
      goto LABEL_24;
    }
    if (v19 != 1) {
      goto LABEL_24;
    }
  }
  int v24 = v15 - *(_DWORD *)(v11 + 12) + (*(_DWORD *)(v8 + 12) - 1) * v17;
  int v25 = v14 - *(_DWORD *)(v11 + 8) + (*(_DWORD *)(v8 + 8) - 1) * v16;
  unsigned int v26 = v24 & ~(v24 >> 31);
  unsigned int v27 = v25 & ~(v25 >> 31);
  unsigned int v28 = v27 >> 1;
  unsigned int v29 = v27 - (v27 >> 1);
  unsigned int v30 = v26 >> 1;
  unsigned int v31 = v26 - (v26 >> 1);
  _ZF = v19 == 1;
  if (v19 == 1) {
    unsigned int v33 = v30;
  }
  else {
    unsigned int v33 = v31;
  }
  unsigned int v141 = v33;
  if (_ZF) {
    unsigned int v20 = v28;
  }
  else {
    unsigned int v20 = v29;
  }
LABEL_24:
  int v139 = v17;
  if (!v117) {
    int v117 = *(_DWORD *)(v8 + 16);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v144, *(_DWORD *)(v11 + 8), *(_DWORD *)(v11 + 12));
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v142, *(_DWORD *)(v8 + 8), *(_DWORD *)(v8 + 12));
  if (*(int *)(v8 + 20) >= 1)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v115 = *((void *)&v150 + 1);
    uint64_t v124 = v150;
    uint64_t v123 = v144;
    uint64_t v116 = 2 * *((void *)&v147 + 1);
    uint64_t v121 = 2 * v147;
    uint64_t v135 = v11;
    int v122 = v13;
    do
    {
      if (v117 >= 1)
      {
        uint64_t v36 = 0;
        uint64_t v118 = v35;
        uint64_t v119 = v34;
        uint64_t v134 = v142;
        uint64_t v126 = v144;
        uint64_t v127 = v115 * v35;
        uint64_t v131 = v8;
        do
        {
          uint64_t v132 = v34;
          uint64_t v133 = v36;
          uint64_t v37 = (void *)(*(void *)(v11 + 24)
                       + 2 * v127
                       + 2 * v124 * v36
                       + 2 * *(_DWORD *)(v11 + 8) * v125 * *(_DWORD *)(v11 + 12));
          uint64_t v130 = *(void *)(v8 + 24);
          int v128 = *(_DWORD *)(v8 + 12);
          int v129 = *(_DWORD *)(v8 + 8);
          unint64_t v38 = *(void **)(v123 + 16);
          vImagePixelCount v39 = *(int *)(v123 + 12) * (uint64_t)*(int *)(v123 + 8);
          src.int data = v37;
          src.height = 1;
          src.width = v39;
          src.rowBytes = 2 * v39;
          dest.int data = v38;
          dest.height = 1;
          dest.width = v39;
          dest.rowBytes = 4 * v39;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          int v40 = *(int **)(v134 + 16);
          uint64_t v140 = *(void *)(v126 + 16);
          if (v13)
          {
            if (v13 == 1)
            {
              int v85 = *(_DWORD *)(v8 + 12);
              if (v85 >= 1)
              {
                int v86 = 0;
                int v87 = *(_DWORD *)(v11 + 12);
                int v88 = *(_DWORD *)(v131 + 8);
                uint64_t v89 = 4 * *((void *)&v149 + 1);
                int v90 = -v141;
                float v91 = *(float **)(v134 + 16);
                do
                {
                  int v92 = v86 * v139 - v141;
                  int v93 = v92 + v15;
                  if (v92 + (int)v15 >= v87) {
                    int v93 = v87;
                  }
                  if (v88 >= 1)
                  {
                    int v94 = 0;
                    int v95 = v92 & ~(v92 >> 31);
                    int v96 = *(_DWORD *)(v11 + 8);
                    int v97 = -v20;
                    do
                    {
                      float v98 = 0.0;
                      if (v95 < v93)
                      {
                        int v99 = v94 * v16 - v20;
                        if (v99 + v14 >= v96) {
                          int v100 = v96;
                        }
                        else {
                          int v100 = v99 + v14;
                        }
                        int v101 = v99 & ~(v99 >> 31);
                        char v102 = 1;
                        uint64_t v103 = v140 + v89 * (v90 & ~(v90 >> 31));
                        int v104 = v95;
                        do
                        {
                          uint64_t v105 = v97 & ~(v97 >> 31);
                          if (v101 < v100)
                          {
                            do
                            {
                              if ((*(float *)(v103 + 4 * v105) > v98) | v102 & 1) {
                                float v98 = *(float *)(v103 + 4 * v105);
                              }
                              ++v105;
                              char v102 = 0;
                            }
                            while (v105 < v100);
                          }
                          ++v104;
                          v103 += v89;
                        }
                        while (v104 < v93);
                      }
                      *v91++ = v98;
                      ++v94;
                      v97 += v16;
                    }
                    while (v94 != v88);
                  }
                  ++v86;
                  v90 += v139;
                }
                while (v86 != v85);
              }
            }
            else if (v13 == 2)
            {
              int v41 = *(_DWORD *)(v131 + 12);
              if (v41 >= 1)
              {
                int v42 = 0;
                int v43 = *(_DWORD *)(v11 + 12);
                int v44 = *(_DWORD *)(v131 + 8);
                uint64_t v45 = 4 * *((void *)&v149 + 1);
                int v46 = -v141;
                unsigned int v47 = *(float **)(v134 + 16);
                do
                {
                  int v48 = v42 * v139 - v141;
                  int v49 = v48 + v15;
                  if (v48 + (int)v15 >= v43) {
                    int v49 = v43;
                  }
                  if (v44 >= 1)
                  {
                    int v50 = 0;
                    int v51 = v48 & ~(v48 >> 31);
                    int v52 = *(_DWORD *)(v11 + 8);
                    int v53 = -v20;
                    do
                    {
                      float v54 = 0.0;
                      if (v51 < v49)
                      {
                        int v55 = v50 * v16 - v20;
                        if (v55 + v14 >= v52) {
                          int v56 = v52;
                        }
                        else {
                          int v56 = v55 + v14;
                        }
                        int v57 = v55 & ~(v55 >> 31);
                        uint64_t v58 = v140 + v45 * (v46 & ~(v46 >> 31));
                        int v59 = v51;
                        do
                        {
                          uint64_t v60 = v53 & ~(v53 >> 31);
                          if (v57 < v56)
                          {
                            do
                            {
                              float v54 = v54 + (float)(*(float *)(v58 + 4 * v60) * *(float *)(v58 + 4 * v60));
                              ++v60;
                            }
                            while (v60 < v56);
                          }
                          ++v59;
                          v58 += v45;
                        }
                        while (v59 < v49);
                      }
                      if (v54 < 0.0001) {
                        float v54 = 0.0001;
                      }
                      *v47++ = sqrtf(v54);
                      ++v50;
                      v53 += v16;
                    }
                    while (v50 != v44);
                  }
                  ++v42;
                  v46 += v139;
                }
                while (v42 != v41);
              }
            }
          }
          else
          {
            int v138 = *(_DWORD *)(v8 + 12);
            int v61 = v139;
            if (v138 >= 1)
            {
              int v62 = 0;
              int v136 = *(_DWORD *)(v11 + 12) + v141;
              int v137 = *(_DWORD *)(v11 + 12);
              int v63 = *(_DWORD *)(v131 + 8);
              uint64_t v64 = 4 * *((void *)&v149 + 1);
              int v65 = -v141;
              uint64_t v66 = *(float **)(v134 + 16);
              do
              {
                int v67 = v62 * v61 - v141;
                uint64_t v68 = v15;
                if (v67 + (int)v15 >= v136) {
                  int v69 = v136;
                }
                else {
                  int v69 = v67 + v15;
                }
                if (v69 >= v137) {
                  int v70 = v137;
                }
                else {
                  int v70 = v69;
                }
                if (v63 >= 1)
                {
                  int v71 = 0;
                  int v72 = v67 & ~(v67 >> 31);
                  int v73 = *(_DWORD *)(v11 + 8);
                  int v74 = v69 - v67;
                  int v75 = -v20;
                  do
                  {
                    int v76 = v71 * v16 - v20;
                    if (v76 + v14 >= (int)(v73 + v20)) {
                      int v77 = v73 + v20;
                    }
                    else {
                      int v77 = v76 + v14;
                    }
                    int v78 = v76 & ~(v76 >> 31);
                    if (v77 >= v73) {
                      int v79 = v73;
                    }
                    else {
                      int v79 = v77;
                    }
                    float v80 = 0.0;
                    if (v70 > v72)
                    {
                      uint64_t v81 = v140 + v64 * (v65 & ~(v65 >> 31));
                      int v82 = v72;
                      do
                      {
                        uint64_t v83 = v75 & ~(v75 >> 31);
                        if (v79 > v78)
                        {
                          do
                            float v80 = v80 + *(float *)(v81 + 4 * v83++);
                          while (v83 < v79);
                        }
                        ++v82;
                        v81 += v64;
                      }
                      while (v82 < v70);
                    }
                    int v84 = (v77 - v76) * v74;
                    if (v18) {
                      int v84 = (v79 - v78) * (v70 - v72);
                    }
                    *v66++ = (float)(1.0 / (float)v84) * v80;
                    ++v71;
                    v75 += v16;
                  }
                  while (v71 != v63);
                }
                ++v62;
                int v61 = v139;
                v65 += v139;
                uint64_t v11 = v135;
                uint64_t v15 = v68;
              }
              while (v62 != v138);
            }
          }
          uint64_t v106 = *(int *)(v134 + 12) * (uint64_t)*(int *)(v134 + 8);
          if (v106)
          {
            uint64_t v107 = (_WORD *)(v130 + v132 + 2 * v129 * v120 * v128);
            do
            {
              int v108 = *v40++;
              _S0 = v108;
              __asm { FCVT            H0, S0 }
              *v107++ = _S0;
              --v106;
            }
            while (v106);
          }
          uint64_t v36 = v133 + 1;
          uint64_t v34 = v132 + v121;
          uint64_t v8 = v131;
          int v13 = v122;
        }
        while (v133 + 1 != v117);
        uint64_t v35 = v118;
        uint64_t v34 = v119;
      }
      ++v35;
      v34 += v116;
    }
    while (v35 < *(int *)(v8 + 20));
  }
  if (v143) {
    nitro::nitro_function::nitro_function(v143);
  }
  if (v145) {
    nitro::nitro_function::nitro_function(v145);
  }
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
  if (v114) {
    nitro::nitro_function::nitro_function(v114);
  }
}

void sub_192775CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a40) {
    nitro::nitro_function::nitro_function(a40);
  }
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::CPUFP16Engine::pool_kernel_cpu::~pool_kernel_cpu(Espresso::CPUFP16Engine::pool_kernel_cpu *this)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::CPUFP16Engine::lrn_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v143 = *((void *)v6 + 22);
    uint64_t v7 = *((void *)v6 + 23);
    if (v7)
    {
      int v113 = (std::__shared_weak_count *)*((void *)v6 + 23);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      int v113 = 0;
    }
  }
  else
  {
    int v113 = 0;
    uint64_t v143 = 0;
  }
  uint64_t v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v8)
  {
    uint64_t v10 = *((void *)v8 + 22);
    uint64_t v9 = *((void *)v8 + 23);
    uint64_t v11 = v143;
    if (v9)
    {
      long long v112 = (std::__shared_weak_count *)*((void *)v8 + 23);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v112 = 0;
    }
  }
  else
  {
    long long v112 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v143;
  }
  uint64_t v12 = 0;
  float v13 = *(float *)(a1 + 280);
  float v14 = *(float *)(a1 + 284);
  int v15 = *(_DWORD *)(a1 + 288);
  uint64_t v166 = 0;
  long long v164 = 0u;
  long long v165 = 0u;
  uint64_t v16 = 1;
  do
  {
    *((void *)&v164 + v12) = (int)v16;
    v16 *= *(unsigned int *)(v10 + 8 + 4 * v12++);
  }
  while (v12 != 4);
  uint64_t v17 = 0;
  uint64_t v163 = 0;
  long long v161 = 0u;
  long long v162 = 0u;
  uint64_t v18 = 1;
  do
  {
    *((void *)&v161 + v17) = (int)v18;
    v18 *= *(unsigned int *)(v11 + 4 * v17++ + 8);
  }
  while (v17 != 4);
  if (v15) {
    int v19 = v15;
  }
  else {
    int v19 = 3;
  }
  float v20 = v13 / (float)v19;
  uint64_t v128 = v10;
  if (v15 == 3 || !v15)
  {
    uint64_t v21 = (std::__shared_weak_count *)operator new(0x60uLL);
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
    int v22 = *(_DWORD *)(v10 + 8);
    int v23 = *(_DWORD *)(v10 + 12);
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BEF0;
    *(_OWORD *)&v21[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v21[3].__shared_owners_ = 0u;
    LODWORD(v21[1].__shared_owners_) = v22;
    HIDWORD(v21[1].__shared_owners_) = v23;
    LODWORD(v21[1].__shared_weak_owners_) = 3;
    size_t v24 = 12 * v22 * (uint64_t)v23;
    uint64_t v126 = v21;
    int v25 = (std::__shared_weak_count_vtbl *)Espresso::kern_alloc_uninitialized((Espresso *)v24);
    bzero(v25, v24);
    v21[2].__vftable = v25;
    LOBYTE(v21[2].__shared_owners_) = 1;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v159, *(_DWORD *)(v11 + 8), *(_DWORD *)(v11 + 12));
    if (*(int *)(v11 + 20) < 1) {
      goto LABEL_68;
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v116 = *((void *)&v165 + 1);
    uint64_t v28 = v165;
    float v29 = -v14;
    uint64_t v139 = v159;
    int v30 = *(_DWORD *)(v11 + 16);
    uint64_t v147 = 4 * *((void *)&v164 + 1);
    uint64_t v149 = 4 * *((void *)&v161 + 1);
    uint64_t v114 = 2 * *((void *)&v162 + 1);
    uint64_t v122 = 2 * v162;
    uint64_t v124 = v165;
    while (1)
    {
      uint64_t v31 = 0;
      uint64_t v118 = v27;
      uint64_t v120 = v26;
      uint64_t v129 = v116 * v27;
      while (v31 < v30)
      {
        uint64_t v32 = *(void *)(v10 + 24) + 2 * v129;
        uint64_t v135 = v31 + 1;
        uint64_t v137 = v26;
        unsigned int v33 = (float *)v21[2].__vftable;
        vImagePixelCount v34 = *(int *)(v10 + 12) * (uint64_t)*(int *)(v10 + 8);
        if (v31) {
          uint64_t v35 = v21[2].__vftable;
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v36 = (v30 - 1);
        if (v31 == v36) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = (void *)(v32 + 2 * v28 * (v31 + 1));
        }
        if (v31 == v36) {
          unint64_t v38 = 0;
        }
        else {
          unint64_t v38 = &v33[v34];
        }
        if (v35)
        {
          vImagePixelCount v39 = (void *)(v32 + 2 * v28 * (v31 - 1));
          if (!v31) {
            vImagePixelCount v39 = 0;
          }
          src.int data = v39;
          src.height = 1;
          src.width = v34;
          src.rowBytes = 2 * v34;
          dest.int data = v35;
          dest.height = 1;
          dest.width = v34;
          dest.rowBytes = 4 * v34;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        }
        int v40 = &v33[2 * v34];
        if (v33)
        {
          int v41 = *(_DWORD *)(v10 + 8);
          int v42 = *(_DWORD *)(v10 + 12);
          src.int data = (void *)(v32 + 2 * v28 * v31);
          src.height = 1;
          src.width = v42 * (uint64_t)v41;
          src.rowBytes = 2 * src.width;
          dest.int data = v40;
          dest.height = 1;
          dest.width = src.width;
          dest.rowBytes = 4 * src.width;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        }
        if (v38)
        {
          vImagePixelCount v43 = *(int *)(v10 + 12) * (uint64_t)*(int *)(v10 + 8);
          src.int data = v37;
          src.height = 1;
          src.width = v43;
          src.rowBytes = 2 * v43;
          dest.int data = v38;
          dest.height = 1;
          dest.width = v43;
          dest.rowBytes = 4 * v43;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        }
        uint64_t v44 = (*(_DWORD *)(v143 + 16) - 1);
        int v133 = *(_DWORD *)(v143 + 16);
        unsigned int v141 = *(int **)(v139 + 16);
        uint64_t v131 = *(void *)(v143 + 24);
        if (v31)
        {
          uint64_t v45 = *(unsigned int *)(v143 + 12);
          int v46 = v40;
          if (v31 != v44)
          {
            if ((int)v45 >= 1)
            {
              uint64_t v47 = 0;
              int v48 = *(float **)(v139 + 16);
              uint64_t v156 = *(unsigned int *)(v143 + 8);
              uint64_t v151 = *(unsigned int *)(v143 + 12);
              do
              {
                int v49 = v46;
                int v50 = v46;
                int v51 = (float *)v35;
                int v52 = v38;
                int v53 = v48;
                uint64_t v54 = v156;
                if ((int)v156 >= 1)
                {
                  do
                  {
                    float v55 = *v50++;
                    float v56 = v55;
                    float v57 = *v51++;
                    float v58 = (float)((float)(v57 * v57) + 0.0) + (float)(v56 * v56);
                    float v59 = *v52++;
                    *v53++ = v56 * powf((float)(v20 * (float)(v58 + (float)(v59 * v59))) + 1.0, v29);
                    --v54;
                  }
                  while (v54);
                }
                ++v47;
                int v48 = (float *)((char *)v48 + v149);
                unint64_t v38 = (float *)((char *)v38 + v147);
                uint64_t v35 = (std::__shared_weak_count_vtbl *)((char *)v35 + v147);
                int v46 = &v49[(unint64_t)v147 / 4];
              }
              while (v47 != v151);
            }
            goto LABEL_63;
          }
        }
        else
        {
          unsigned int v33 = 0;
          uint64_t v45 = *(unsigned int *)(v143 + 12);
          int v46 = v40;
        }
        if (v31 == v44) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = v38;
        }
        if ((int)v45 >= 1)
        {
          uint64_t v61 = 0;
          int v62 = *(float **)(v139 + 16);
          uint64_t v145 = *(unsigned int *)(v143 + 8);
          int v63 = v33;
          uint64_t v64 = v60;
          uint64_t v152 = v45;
          do
          {
            uint64_t v154 = v61;
            int v157 = v46;
            int v65 = v63;
            uint64_t v66 = v64;
            int v67 = v62;
            uint64_t v68 = v145;
            if ((int)v145 >= 1)
            {
              do
              {
                if (v33) {
                  float v69 = (float)(*v65 * *v65) + 0.0;
                }
                else {
                  float v69 = 0.0;
                }
                float v70 = *v46;
                float v71 = v69 + (float)(v70 * v70);
                if (v60) {
                  float v71 = v71 + (float)(*v66 * *v66);
                }
                *v67++ = v70 * powf((float)(v20 * v71) + 1.0, v29);
                ++v66;
                ++v65;
                ++v46;
                --v68;
              }
              while (v68);
            }
            uint64_t v61 = v154 + 1;
            int v62 = (float *)((char *)v62 + v149);
            uint64_t v64 = (float *)((char *)v64 + v147);
            int v63 = (float *)((char *)v63 + v147);
            int v46 = &v157[(unint64_t)v147 / 4];
          }
          while (v154 + 1 != v152);
        }
LABEL_63:
        uint64_t v72 = *(int *)(v139 + 12) * (uint64_t)*(int *)(v139 + 8);
        int v73 = v141;
        if (v72)
        {
          int v74 = (_WORD *)(v131 + v137);
          do
          {
            int v75 = *v73++;
            _S0 = v75;
            __asm { FCVT            H0, S0 }
            *v74++ = _S0;
            --v72;
          }
          while (v72);
        }
        uint64_t v28 = v124;
        uint64_t v26 = v137 + v122;
        uint64_t v31 = v135;
        uint64_t v11 = v143;
        uint64_t v21 = v126;
        uint64_t v10 = v128;
        int v30 = v133;
      }
      uint64_t v27 = v118 + 1;
      uint64_t v26 = v120 + v114;
      if (v118 + 1 >= *(int *)(v11 + 20))
      {
LABEL_68:
        if (v160) {
          nitro::nitro_function::nitro_function(v160);
        }
        nitro::nitro_function::nitro_function(v21);
        goto LABEL_95;
      }
    }
  }
  int v81 = v15 + (v15 < 0);
  if (*(int *)(v11 + 20) >= 1)
  {
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    int v148 = v81 >> 1;
    uint64_t v115 = *((void *)&v162 + 1);
    float v84 = -v14;
    uint64_t v125 = v162;
    uint64_t v127 = v165;
    uint64_t v138 = *((void *)&v161 + 1);
    uint64_t v140 = *((void *)&v164 + 1);
    uint64_t v117 = *((void *)&v165 + 1);
    uint64_t v119 = 2 * *((void *)&v165 + 1);
    uint64_t v85 = 2 * v165;
    uint64_t v150 = 2 * *((void *)&v164 + 1);
    do
    {
      uint64_t v121 = v83;
      uint64_t v123 = v82;
      if (*(int *)(v11 + 16) >= 1)
      {
        uint64_t v86 = 0;
        uint64_t v87 = v117 * v83;
        uint64_t v134 = v115 * v83;
        uint64_t v88 = *(void *)(v10 + 24);
        uint64_t v130 = v88 + v82;
        uint64_t v132 = v88 + 2 * v87;
        do
        {
          uint64_t v136 = v86;
          if (*(int *)(v11 + 12) >= 1)
          {
            uint64_t v89 = 0;
            uint64_t v90 = *(void *)(v11 + 24) + 2 * v134 + 2 * v125 * v86;
            uint64_t v91 = v132 + 2 * v127 * v86;
            if ((int)v86 - v148 >= 1) {
              int v92 = v148;
            }
            else {
              int v92 = v86;
            }
            int v93 = -v92;
            int v146 = v148 + v86;
            int v142 = ~v86;
            int v158 = ~v92;
            int v94 = (_WORD *)(v130 + v85 * ((int)v86 - v92));
            do
            {
              if (*(int *)(v11 + 8) >= 1)
              {
                uint64_t v95 = 0;
                uint64_t v96 = v140 * v89;
                uint64_t v153 = v94;
                uint64_t v155 = v89;
                uint64_t v97 = v138 * v89;
                int v98 = *(_DWORD *)(v11 + 16);
                int v99 = v98 - 1;
                int v100 = v98 + v142;
                if (v146 >= v99) {
                  int v101 = v100;
                }
                else {
                  int v101 = v148;
                }
                uint64_t v144 = v11;
                int v102 = *(_DWORD *)(v11 + 8);
                if (v102 <= 1) {
                  uint64_t v103 = 1;
                }
                else {
                  uint64_t v103 = v102;
                }
                do
                {
                  float v104 = 0.0;
                  if (v101 >= v93)
                  {
                    uint64_t v105 = v94;
                    int v106 = v158;
                    do
                    {
                      _H1 = *v105;
                      __asm { FCVT            S1, H1 }
                      float v104 = v104 + (float)(_S1 * _S1);
                      ++v106;
                      uint64_t v105 = (__int16 *)((char *)v105 + v85);
                    }
                    while (v106 < v101);
                  }
                  _H1 = *(_WORD *)(v91 + 2 * (v96 + v95));
                  __asm { FCVT            S11, H1 }
                  _S0 = powf((float)(v20 * v104) + 1.0, v84) * _S11;
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)(v90 + 2 * (v97 + v95++)) = LOWORD(_S0);
                  ++v94;
                }
                while (v95 != v103);
                uint64_t v11 = v144;
                int v94 = v153;
                uint64_t v89 = v155;
              }
              ++v89;
              int v94 = (_WORD *)((char *)v94 + v150);
            }
            while (v89 < *(int *)(v11 + 12));
          }
          uint64_t v86 = v136 + 1;
        }
        while (v136 + 1 < *(int *)(v11 + 16));
      }
      uint64_t v83 = v121 + 1;
      uint64_t v82 = v123 + v119;
      uint64_t v10 = v128;
    }
    while (v121 + 1 < *(int *)(v11 + 20));
  }
LABEL_95:
  if (v112) {
    nitro::nitro_function::nitro_function(v112);
  }
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
}

void sub_192776558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  nitro::nitro_function::nitro_function(v34);
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

void Espresso::CPUFP16Engine::lrn_kernel_cpu::~lrn_kernel_cpu(Espresso::CPUFP16Engine::lrn_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::CPUFP16Engine::softmax_kernel_cpu::__reset_temporal_state(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 320);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::CPUFP16Engine::softmax_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v30, *(uint64_t **)a3);
  }
  uint64_t v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v7)
  {
    uint64_t v9 = *((void *)v7 + 22);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 23);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v28, *(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 12), *(_DWORD *)(v9 + 16), *(_DWORD *)(v9 + 20));
  uint64_t v10 = v28;
  uint64_t v11 = *(void **)(v28 + 24);
  vImagePixelCount v12 = *(int *)(v28 + 8);
  for (uint64_t i = 12; i != 24; i += 4)
    v12 *= *(int *)(v28 + i);
  src.int data = *(void **)(v9 + 24);
  src.height = 1;
  src.width = v12;
  src.rowBytes = 2 * v12;
  dest.int data = v11;
  dest.height = 1;
  dest.width = v12;
  dest.rowBytes = 4 * v12;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  if (v30)
  {
    Espresso::compute_softmax_cpu(v30, v10, *(_DWORD *)(a1 + 300), *(unsigned char *)(a1 + 306));
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, *(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 12), *(_DWORD *)(v9 + 16), *(_DWORD *)(v9 + 20));
    float v14 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
    if (v14)
    {
      uint64_t v16 = *((void *)v14 + 22);
      int v15 = (std::__shared_weak_count *)*((void *)v14 + 23);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v16 = 0;
      int v15 = 0;
    }
    int data = src.data;
    Espresso::compute_softmax_cpu((uint64_t)src.data, v10, *(_DWORD *)(a1 + 300), *(unsigned char *)(a1 + 306));
    uint64_t v18 = 0;
    int v19 = (int *)data[3];
    float v20 = *(_WORD **)(v16 + 24);
    uint64_t v21 = *(int *)(v16 + 8);
    do
    {
      v21 *= *(int *)(v16 + 12 + v18);
      v18 += 4;
    }
    while (v18 != 12);
    for (; v21; --v21)
    {
      int v22 = *v19++;
      _S0 = v22;
      __asm { FCVT            H0, S0 }
      *v20++ = _S0;
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
}

void sub_192776804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::CPUFP16Engine::softmax_kernel_cpu::~softmax_kernel_cpu(Espresso::CPUFP16Engine::softmax_kernel_cpu *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::CPUFP16Engine::concat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v4)
  {
    uint64_t v25 = *((void *)v4 + 22);
    uint64_t v5 = *((void *)v4 + 23);
    if (v5)
    {
      int v23 = (std::__shared_weak_count *)*((void *)v4 + 23);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  int v23 = 0;
LABEL_6:
  uint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  if (v7 != *a4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 2 * *(_DWORD *)(v25 + 12) * *(_DWORD *)(v25 + 8) * *(_DWORD *)(v25 + 16);
    do
    {
      uint64_t v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v6, v7, v8);
      uint64_t v12 = *((void *)v11 + 22);
      float v13 = (std::__shared_weak_count *)*((void *)v11 + 23);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = *(_DWORD *)(v12 + 16);
      if (!v8)
      {
        int v14 = *(unsigned __int16 *)(a1 + 320);
        if (!*(_WORD *)(a1 + 320)) {
          int v14 = *(_DWORD *)(v12 + 16);
        }
      }
      int v15 = *(_DWORD *)(v12 + 12) * *(_DWORD *)(v12 + 8);
      int v16 = v15 * v14;
      if (*(int *)(v12 + 20) <= 0)
      {
        uint64_t v22 = v16;
        if (!v13) {
          goto LABEL_18;
        }
      }
      else
      {
        int v17 = 0;
        uint64_t v18 = *(char **)(v12 + 24);
        int v19 = (char *)(*(void *)(v25 + 24) + 2 * v9);
        uint64_t v27 = v16;
        size_t v20 = 2 * v16;
        uint64_t v21 = 2 * v15 * *(_DWORD *)(v12 + 16);
        do
        {
          memcpy(v19, v18, v20);
          ++v17;
          v18 += v21;
          v19 += v10;
        }
        while (v17 < *(_DWORD *)(v12 + 20));
        uint64_t v22 = v27;
        if (!v13) {
          goto LABEL_18;
        }
      }
      nitro::nitro_function::nitro_function(v13);
LABEL_18:
      v9 += v22;
      ++v8;
      uint64_t v6 = *a4;
      uint64_t v7 = a4[1];
    }
    while (v8 < (v7 - *a4) >> 4);
  }
  if (v23)
  {
    nitro::nitro_function::nitro_function(v23);
  }
}

void Espresso::CPUFP16Engine::concat_kernel_cpu::~concat_kernel_cpu(Espresso::CPUFP16Engine::concat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::CPUFP16Engine::elementwise_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v7 = (std::__shared_weak_count *)v6[23];
    uint64_t v180 = v6[22];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v180 = 0;
    uint64_t v7 = 0;
  }
  long long v167 = v7;
  unint64_t v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v8)
  {
    uint64_t v10 = *((void *)v8 + 22);
    uint64_t v9 = *((void *)v8 + 23);
    if (v9)
    {
      std::string v169 = (std::__shared_weak_count *)*((void *)v8 + 23);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::string v169 = 0;
LABEL_10:
  uint64_t v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (!v11)
  {
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  uint64_t v13 = *((void *)v11 + 22);
  uint64_t v12 = *((void *)v11 + 23);
  if (!v12)
  {
LABEL_14:
    int v168 = 0;
    goto LABEL_15;
  }
  int v168 = (std::__shared_weak_count *)*((void *)v11 + 23);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
LABEL_15:
  uint64_t v14 = 12;
  uint64_t v15 = *(unsigned int *)(v180 + 8);
  do
  {
    v15 *= *(unsigned int *)(v180 + v14);
    v14 += 4;
  }
  while (v14 != 24);
  int v16 = *(_DWORD *)(a1 + 280);
  int v17 = (uint64_t *)*a4;
  uint64_t v18 = a4[1];
  unint64_t v19 = v18 - *a4;
  uint64_t v170 = a1;
  if (v19 == 16)
  {
    if (!v16) {
      int v16 = 2;
    }
    if (v16 == 1)
    {
      int v16 = 3;
      goto LABEL_102;
    }
    goto LABEL_44;
  }
  int v20 = *(_DWORD *)(v10 + 8);
  int v21 = *(_DWORD *)(v13 + 8);
  if (v20 == v21
    && *(_DWORD *)(v10 + 12) == *(_DWORD *)(v13 + 12)
    && *(_DWORD *)(v10 + 16) == *(_DWORD *)(v13 + 16)
    && *(_DWORD *)(v10 + 20) == *(_DWORD *)(v13 + 20))
  {
    goto LABEL_44;
  }
  if (v21 == 1
    && *(_DWORD *)(v13 + 12) == 1
    && *(_DWORD *)(v13 + 20) == 1
    && *(_DWORD *)(v10 + 16) == *(_DWORD *)(v13 + 16))
  {
    if (!v16)
    {
      int v16 = 5;
      goto LABEL_102;
    }
    if (v16 == 1)
    {
      int v16 = 8;
      goto LABEL_102;
    }
  }
  else
  {
    if (*(_DWORD *)(v13 + 20) != 1) {
      goto LABEL_221;
    }
    if (v20 != v21) {
      goto LABEL_221;
    }
    int v22 = *(_DWORD *)(v10 + 12);
    int v23 = *(_DWORD *)(v13 + 12);
    if (v22 != v23) {
      goto LABEL_221;
    }
    int v24 = *(_DWORD *)(v13 + 16);
    if (*(_DWORD *)(v10 + 16) == v24)
    {
      if (!v16)
      {
        int v16 = 6;
        goto LABEL_102;
      }
      if (v16 == 1)
      {
        int v16 = 9;
        goto LABEL_102;
      }
      goto LABEL_44;
    }
    if (v24 != 1 || v22 != v23)
    {
LABEL_221:
      Espresso::abstract_blob_container::shape((char *)&src, *v17);
      Espresso::abstract_blob_container::shape((char *)&dest, *(void *)(*a4 + 16));
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>("[%d,%d,%d,%d,%d], [%d,%d,%d,%d,%d]", LODWORD(src.data), HIDWORD(src.data), HIDWORD(src.height), LODWORD(src.height), LODWORD(src.width), LODWORD(dest.data), HIDWORD(dest.data), HIDWORD(dest.height), dest.height, dest.width);
    }
    if (!v16)
    {
LABEL_48:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v192, v20, v22, 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v190, *(_DWORD *)(v10 + 8), *(_DWORD *)(v10 + 12), 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v188, *(_DWORD *)(v180 + 8), *(_DWORD *)(v180 + 12), 1, 1);
      uint64_t v25 = 0;
      int v26 = *(_DWORD *)(v180 + 8);
      int v27 = *(_DWORD *)(v180 + 12);
      uint64_t v28 = *(void **)(v192 + 24);
      vImagePixelCount v29 = *(int *)(v192 + 8);
      uint64_t v178 = v192;
      do
      {
        v29 *= *(int *)(v192 + 12 + v25);
        v25 += 4;
      }
      while (v25 != 12);
      src.int data = *(void **)(v13 + 24);
      src.height = 1;
      src.width = v29;
      src.rowBytes = 2 * v29;
      dest.int data = v28;
      dest.height = 1;
      dest.width = v29;
      dest.rowBytes = 4 * v29;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      if (*(int *)(v180 + 20) > 0)
      {
        uint64_t v165 = v15;
        int v172 = 0;
        int v185 = 0;
        int v30 = v27 * v26;
        vDSP_Length v31 = v27 * v26;
        uint64_t v32 = (const float *)(v170 + 288);
        unsigned int v33 = (const float *)(v170 + 292);
        vImagePixelCount v34 = v189;
        uint64_t v35 = v190;
        uint64_t v36 = v188;
        int v182 = v30;
        __B = (float *)(2 * v30);
        uint64_t v37 = v180;
        do
        {
          uint64_t v180 = v37;
          if (*(int *)(v37 + 16) >= 1)
          {
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            do
            {
              vImagePixelCount v40 = *(int *)(v10 + 12) * (uint64_t)*(int *)(v10 + 8);
              int v41 = *(void **)(v35 + 24);
              src.int data = (void *)(*(void *)(v10 + 24) + 2 * *(_DWORD *)(v10 + 16) * v185 * (int)v40 + 2 * v39 * v40);
              src.height = 1;
              src.width = v40;
              src.rowBytes = 2 * v40;
              dest.int data = v41;
              dest.height = 1;
              dest.width = v40;
              dest.rowBytes = 4 * v40;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              vDSP_vadd(*(const float **)(v35 + 24), 1, *(const float **)(v178 + 24), 1, *(float **)(v36 + 24), 1, v31);
              if (v34) {
                atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (*v32 != 1.0) {
                vDSP_vsmul(*(const float **)(v36 + 24), 1, v32, *(float **)(v36 + 24), 1, v31);
              }
              if (*v33 != 0.0) {
                vDSP_vsadd(*(const float **)(v36 + 24), 1, v33, *(float **)(v36 + 24), 1, v31);
              }
              if (v34) {
                nitro::nitro_function::nitro_function(v34);
              }
              uint64_t v42 = *(int *)(v180 + 16);
              if (v182)
              {
                vImagePixelCount v43 = *(int **)(v36 + 24);
                uint64_t v44 = (_WORD *)(*(void *)(v180 + 24) + v38 + 2 * v172 * (int)v42);
                vDSP_Length v45 = v31;
                do
                {
                  int v46 = *v43++;
                  _S0 = v46;
                  __asm { FCVT            H0, S0 }
                  *v44++ = _S0;
                  --v45;
                }
                while (v45);
              }
              ++v39;
              v38 += (uint64_t)__B;
            }
            while (v39 < v42);
          }
          uint64_t v37 = v180;
          v172 += v182;
          ++v185;
        }
        while (v185 < *(_DWORD *)(v180 + 20));
LABEL_88:
        uint64_t v15 = v165;
        goto LABEL_90;
      }
      goto LABEL_89;
    }
    if (v16 == 1)
    {
LABEL_69:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v192, v20, v22, 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v190, *(_DWORD *)(v10 + 8), *(_DWORD *)(v10 + 12), 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v188, *(_DWORD *)(v180 + 8), *(_DWORD *)(v180 + 12), 1, 1);
      uint64_t v52 = 0;
      int v53 = *(_DWORD *)(v180 + 8);
      int v54 = *(_DWORD *)(v180 + 12);
      float v55 = *(void **)(v192 + 24);
      vImagePixelCount v56 = *(int *)(v192 + 8);
      uint64_t v179 = v192;
      do
      {
        v56 *= *(int *)(v192 + 12 + v52);
        v52 += 4;
      }
      while (v52 != 12);
      src.int data = *(void **)(v13 + 24);
      src.height = 1;
      src.width = v56;
      src.rowBytes = 2 * v56;
      dest.int data = v55;
      dest.height = 1;
      dest.width = v56;
      dest.rowBytes = 4 * v56;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      if (*(int *)(v180 + 20) > 0)
      {
        uint64_t v165 = v15;
        int v173 = 0;
        int v186 = 0;
        int v57 = v54 * v53;
        vDSP_Length v58 = v54 * v53;
        float v59 = (const float *)(v170 + 288);
        uint64_t v60 = (const float *)(v170 + 292);
        vImagePixelCount v34 = v189;
        uint64_t v61 = v190;
        uint64_t v62 = v188;
        int v183 = v57;
        __Ba = (float *)(2 * v57);
        uint64_t v63 = v180;
        do
        {
          uint64_t v180 = v63;
          if (*(int *)(v63 + 16) >= 1)
          {
            uint64_t v64 = 0;
            uint64_t v65 = 0;
            do
            {
              vImagePixelCount v66 = *(int *)(v10 + 12) * (uint64_t)*(int *)(v10 + 8);
              int v67 = *(void **)(v61 + 24);
              src.int data = (void *)(*(void *)(v10 + 24) + 2 * *(_DWORD *)(v10 + 16) * v186 * (int)v66 + 2 * v65 * v66);
              src.height = 1;
              src.width = v66;
              src.rowBytes = 2 * v66;
              dest.int data = v67;
              dest.height = 1;
              dest.width = v66;
              dest.rowBytes = 4 * v66;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              vDSP_vmul(*(const float **)(v61 + 24), 1, *(const float **)(v179 + 24), 1, *(float **)(v62 + 24), 1, v58);
              if (v34) {
                atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (*v59 != 1.0) {
                vDSP_vsmul(*(const float **)(v62 + 24), 1, v59, *(float **)(v62 + 24), 1, v58);
              }
              if (*v60 != 0.0) {
                vDSP_vsadd(*(const float **)(v62 + 24), 1, v60, *(float **)(v62 + 24), 1, v58);
              }
              if (v34) {
                nitro::nitro_function::nitro_function(v34);
              }
              uint64_t v68 = *(int *)(v180 + 16);
              if (v183)
              {
                float v69 = *(int **)(v62 + 24);
                float v70 = (_WORD *)(*(void *)(v180 + 24) + v64 + 2 * v173 * (int)v68);
                vDSP_Length v71 = v58;
                do
                {
                  int v72 = *v69++;
                  _S0 = v72;
                  __asm { FCVT            H0, S0 }
                  *v70++ = _S0;
                  --v71;
                }
                while (v71);
              }
              ++v65;
              v64 += (uint64_t)__Ba;
            }
            while (v65 < v68);
          }
          uint64_t v63 = v180;
          v173 += v183;
          ++v186;
        }
        while (v186 < *(_DWORD *)(v180 + 20));
        goto LABEL_88;
      }
LABEL_89:
      vImagePixelCount v34 = v189;
LABEL_90:
      int v74 = v167;
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      if (v191) {
        nitro::nitro_function::nitro_function(v191);
      }
      int v75 = v193;
      uint64_t v76 = v180;
      if (v193) {
        goto LABEL_176;
      }
      goto LABEL_177;
    }
  }
LABEL_44:
  switch(v16)
  {
    case 0:
      int v77 = *(short float **)(v180 + 24);
      int v78 = *(short float **)(v10 + 24);
      uint64_t v79 = v15 << 32;
      if (v19 < 0x11)
      {
        uint64_t v140 = 0;
        uint64_t v141 = *(int *)(v10 + 8);
        do
        {
          v141 *= *(int *)(v10 + 12 + v140);
          v140 += 4;
        }
        while (v140 != 12);
        memcpy(*(void **)(v180 + 24), *(const void **)(v10 + 24), 2 * v141);
        int v17 = (uint64_t *)*a4;
        uint64_t v18 = a4[1];
        unint64_t v19 = v18 - *a4;
      }
      else if (v79)
      {
        float v80 = *(short float **)(v13 + 24);
        uint64_t v81 = (int)v15;
        do
        {
          short float v82 = *v78++;
          short float v83 = v82;
          short float v84 = *v80++;
          *v77++ = v83 + v84;
          --v81;
        }
        while (v81);
      }
      if (v19 >= 0x21)
      {
        unint64_t v142 = 2;
        do
        {
          uint64_t v143 = *(short float **)(v180 + 24);
          uint64_t v144 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v17, v18, v142);
          uint64_t v146 = *((void *)v144 + 22);
          uint64_t v145 = (std::__shared_weak_count *)*((void *)v144 + 23);
          if (v145) {
            atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v79)
          {
            uint64_t v147 = *(short float **)(v146 + 24);
            uint64_t v148 = (int)v15;
            do
            {
              short float v149 = *v147++;
              short float *v143 = *v143 + v149;
              ++v143;
              --v148;
            }
            while (v148);
          }
          if (v145) {
            nitro::nitro_function::nitro_function(v145);
          }
          ++v142;
          int v17 = (uint64_t *)*a4;
          uint64_t v18 = a4[1];
        }
        while (v142 < (v18 - *a4) >> 4);
      }
      int v74 = v167;
      uint64_t v76 = v180;
      if (*(float *)(v170 + 288) != 1.0 || *(float *)(v170 + 292) != 0.0)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v192, *(_DWORD *)(v180 + 8), *(_DWORD *)(v180 + 12), *(_DWORD *)(v180 + 16), *(_DWORD *)(v180 + 20));
        uint64_t v150 = v192;
        uint64_t v151 = *(void **)(v192 + 24);
        vImagePixelCount v152 = *(int *)(v180 + 12) * (uint64_t)*(int *)(v180 + 8) * *(int *)(v180 + 16) * *(int *)(v180 + 20);
        src.int data = *(void **)(v180 + 24);
        src.height = 1;
        src.width = v152;
        src.rowBytes = 2 * v152;
        dest.int data = v151;
        dest.height = 1;
        dest.width = v152;
        dest.rowBytes = 4 * v152;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        uint64_t v153 = (const float *)(v170 + 288);
        uint64_t v154 = v193;
        if (v193) {
          atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*v153 != 1.0) {
          vDSP_vsmul(*(const float **)(v150 + 24), 1, v153, *(float **)(v150 + 24), 1, (int)v15);
        }
        if (*(float *)(v170 + 292) != 0.0) {
          vDSP_vsadd(*(const float **)(v150 + 24), 1, (const float *)(v170 + 292), *(float **)(v150 + 24), 1, (int)v15);
        }
        if (v154) {
          nitro::nitro_function::nitro_function(v154);
        }
        uint64_t v155 = *(int *)(v180 + 12) * (uint64_t)*(int *)(v180 + 8) * *(int *)(v180 + 16) * *(int *)(v180 + 20);
        if (v155)
        {
          uint64_t v156 = *(int **)(v150 + 24);
          int v157 = *(_WORD **)(v180 + 24);
          do
          {
            int v158 = *v156++;
            _S0 = v158;
            __asm { FCVT            H0, S0 }
            *v157++ = _S0;
            --v155;
          }
          while (v155);
        }
        if (v154) {
          nitro::nitro_function::nitro_function(v154);
        }
        uint64_t v76 = v180;
      }
      goto LABEL_177;
    case 7:
      int v20 = *(_DWORD *)(v13 + 8);
      int v22 = *(_DWORD *)(v13 + 12);
      goto LABEL_69;
    case 4:
      int v20 = *(_DWORD *)(v13 + 8);
      int v22 = *(_DWORD *)(v13 + 12);
      goto LABEL_48;
  }
LABEL_102:
  int __val = v16;
  uint64_t v76 = v180;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v192, *(_DWORD *)(v180 + 8), *(_DWORD *)(v180 + 12), 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v190, *(_DWORD *)(v10 + 8), *(_DWORD *)(v10 + 12), 1, 1);
  uint64_t v174 = v13;
  uint64_t v166 = v15;
  if (v13)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, *(_DWORD *)(v13 + 8), *(_DWORD *)(v13 + 12), 1, 1);
    int data = src.data;
    height = (std::__shared_weak_count *)src.height;
  }
  else
  {
    height = 0;
    int data = 0;
  }
  if (*(int *)(v180 + 20) >= 1)
  {
    int v184 = 0;
    uint64_t v86 = (const float *)(a1 + 288);
    int v87 = __val - 1;
    __Bb = (float *)(a1 + 292);
    uint64_t v171 = data;
    do
    {
      if (*(int *)(v76 + 16) >= 1)
      {
        int v88 = 0;
        uint64_t v187 = v190;
        uint64_t v181 = v76;
        do
        {
          vImagePixelCount v89 = *(int *)(v10 + 12) * (uint64_t)*(int *)(v10 + 8);
          uint64_t v90 = *(void **)(v187 + 24);
          src.int data = (void *)(*(void *)(v10 + 24)
                            + 2 * *(_DWORD *)(v10 + 16) * v184 * (int)v89
                            + 2 * (int)v89 * v88);
          src.height = 1;
          src.width = v89;
          src.rowBytes = 2 * v89;
          dest.int data = v90;
          dest.height = 1;
          dest.width = v89;
          dest.rowBytes = 4 * v89;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          int v92 = *(_DWORD *)(v76 + 8);
          int v91 = *(_DWORD *)(v76 + 12);
          int v93 = v91 * v92;
          switch(v87)
          {
            case 0:
              vImagePixelCount v94 = *(int *)(v174 + 12) * (uint64_t)*(int *)(v174 + 8);
              uint64_t v95 = (void *)*((void *)v171 + 3);
              src.int data = (void *)(*(void *)(v174 + 24)
                                + 2 * *(_DWORD *)(v174 + 16) * v184 * (int)v94
                                + 2 * (int)v94 * v88);
              src.height = 1;
              src.width = v94;
              src.rowBytes = 2 * v94;
              dest.int data = v95;
              dest.height = 1;
              dest.width = v94;
              dest.rowBytes = 4 * v94;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              uint64_t v96 = v192;
              vDSP_vmul(*(const float **)(v187 + 24), 1, *((const float **)v171 + 3), 1, *(float **)(v192 + 24), 1, v93);
              uint64_t v97 = v193;
              if (v193) {
                atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (*v86 != 1.0) {
                vDSP_vsmul(*(const float **)(v96 + 24), 1, v86, *(float **)(v96 + 24), 1, v93);
              }
              if (*__Bb != 0.0) {
                goto LABEL_163;
              }
              goto LABEL_164;
            case 1:
              uint64_t v96 = v192;
              if (v93 >= 1)
              {
                uint64_t v124 = *(float **)(v187 + 24);
                uint64_t v125 = *(float **)(v192 + 24);
                uint64_t v126 = (v91 * v92);
                do
                {
                  float v127 = *v124++;
                  *v125++ = v127 + *v86;
                  --v126;
                }
                while (v126);
              }
              break;
            case 2:
              uint64_t v96 = v192;
              if (v93 >= 1)
              {
                uint64_t v114 = *(float **)(v187 + 24);
                uint64_t v115 = *(float **)(v192 + 24);
                uint64_t v116 = (v91 * v92);
                do
                {
                  float v117 = *v114++;
                  *v115++ = v117 * *v86;
                  --v116;
                }
                while (v116);
              }
              break;
            case 4:
              vImagePixelCount v122 = *(int *)(v174 + 12) * (uint64_t)*(int *)(v174 + 8);
              uint64_t v123 = (void *)*((void *)v171 + 3);
              src.int data = (void *)(*(void *)(v174 + 24) + 2 * (int)v122 * v88);
              src.height = 1;
              src.width = v122;
              src.rowBytes = 2 * v122;
              dest.int data = v123;
              dest.height = 1;
              dest.width = v122;
              dest.rowBytes = 4 * v122;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              uint64_t v96 = v192;
              vDSP_vsadd(*(const float **)(v187 + 24), 1, *((const float **)v171 + 3), *(float **)(v192 + 24), 1, v93);
              uint64_t v97 = v193;
              if (v193) {
                atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (*v86 != 1.0) {
                vDSP_vsmul(*(const float **)(v96 + 24), 1, v86, *(float **)(v96 + 24), 1, v93);
              }
              if (*__Bb != 0.0) {
                goto LABEL_163;
              }
              goto LABEL_164;
            case 5:
              vImagePixelCount v110 = *(int *)(v174 + 12) * (uint64_t)*(int *)(v174 + 8);
              long long v111 = (void *)*((void *)v171 + 3);
              src.int data = (void *)(*(void *)(v174 + 24) + 2 * (int)v110 * v88);
              src.height = 1;
              src.width = v110;
              src.rowBytes = 2 * v110;
              dest.int data = v111;
              dest.height = 1;
              dest.width = v110;
              dest.rowBytes = 4 * v110;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              uint64_t v96 = v192;
              vDSP_vadd(*(const float **)(v187 + 24), 1, *((const float **)v171 + 3), 1, *(float **)(v192 + 24), 1, v93);
              uint64_t v97 = v193;
              if (v193) {
                atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (*v86 != 1.0) {
                vDSP_vsmul(*(const float **)(v96 + 24), 1, v86, *(float **)(v96 + 24), 1, v93);
              }
              if (*__Bb != 0.0) {
                goto LABEL_163;
              }
              goto LABEL_164;
            case 7:
              vImagePixelCount v112 = *(int *)(v174 + 12) * (uint64_t)*(int *)(v174 + 8);
              int v113 = (void *)*((void *)v171 + 3);
              src.int data = (void *)(*(void *)(v174 + 24) + 2 * (int)v112 * v88);
              src.height = 1;
              src.width = v112;
              src.rowBytes = 2 * v112;
              dest.int data = v113;
              dest.height = 1;
              dest.width = v112;
              dest.rowBytes = 4 * v112;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              uint64_t v96 = v192;
              vDSP_vsmul(*(const float **)(v187 + 24), 1, *((const float **)v171 + 3), *(float **)(v192 + 24), 1, v93);
              uint64_t v97 = v193;
              if (v193) {
                atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (*v86 != 1.0) {
                vDSP_vsmul(*(const float **)(v96 + 24), 1, v86, *(float **)(v96 + 24), 1, v93);
              }
              if (*__Bb != 0.0) {
                goto LABEL_163;
              }
              goto LABEL_164;
            case 8:
              vImagePixelCount v128 = *(int *)(v174 + 12) * (uint64_t)*(int *)(v174 + 8);
              uint64_t v129 = (void *)*((void *)v171 + 3);
              src.int data = (void *)(*(void *)(v174 + 24) + 2 * (int)v128 * v88);
              src.height = 1;
              src.width = v128;
              src.rowBytes = 2 * v128;
              dest.int data = v129;
              dest.height = 1;
              dest.width = v128;
              dest.rowBytes = 4 * v128;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              uint64_t v96 = v192;
              vDSP_vmul(*(const float **)(v187 + 24), 1, *((const float **)v171 + 3), 1, *(float **)(v192 + 24), 1, v93);
              uint64_t v97 = v193;
              if (v193) {
                atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (*v86 != 1.0) {
                vDSP_vsmul(*(const float **)(v96 + 24), 1, v86, *(float **)(v96 + 24), 1, v93);
              }
              if (*__Bb != 0.0) {
LABEL_163:
              }
                vDSP_vsadd(*(const float **)(v96 + 24), 1, __Bb, *(float **)(v96 + 24), 1, v93);
LABEL_164:
              uint64_t v76 = v181;
              if (v97) {
                nitro::nitro_function::nitro_function(v97);
              }
              break;
            case 9:
              uint64_t v96 = v192;
              if (v93 >= 1)
              {
                uint64_t v118 = *(float **)(v187 + 24);
                uint64_t v119 = *(float **)(v192 + 24);
                uint64_t v120 = (v91 * v92);
                do
                {
                  float v121 = *v118++;
                  *v119++ = 1.0 / (float)(v121 + *(float *)(a1 + 296));
                  --v120;
                }
                while (v120);
              }
              break;
            case 10:
              uint64_t v96 = v192;
              if (v93 >= 1)
              {
                int v106 = *(float **)(v187 + 24);
                uint64_t v107 = *(float **)(v192 + 24);
                uint64_t v108 = (v91 * v92);
                do
                {
                  float v109 = *v106++;
                  *v107++ = sqrtf(v109);
                  --v108;
                }
                while (v108);
              }
              break;
            case 11:
              uint64_t v96 = v192;
              if (v93 >= 1)
              {
                int v98 = *(float **)(v187 + 24);
                int v99 = *(float **)(v192 + 24);
                uint64_t v100 = (v91 * v92);
                do
                {
                  float v101 = *v98++;
                  *v99++ = 1.0 / sqrtf(v101 + *(float *)(a1 + 296));
                  --v100;
                }
                while (v100);
              }
              break;
            case 12:
              uint64_t v96 = v192;
              if (v93 >= 1)
              {
                int v102 = *(float **)(v187 + 24);
                uint64_t v103 = *(float **)(v192 + 24);
                uint64_t v104 = (v91 * v92);
                do
                {
                  float v105 = *v102++;
                  *v103++ = powf(v105, *v86);
                  --v104;
                }
                while (v104);
                a1 = v170;
                uint64_t v76 = v181;
              }
              break;
            default:
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::to_string((std::string *)&dest, __val);
              long long v161 = std::string::insert((std::string *)&dest, 0, "Elwise Op not implemented");
              long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
              src.width = v161->__r_.__value_.__r.__words[2];
              *(_OWORD *)&src.int data = v162;
              v161->__r_.__value_.__l.__size_ = 0;
              v161->__r_.__value_.__r.__words[2] = 0;
              v161->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)&src);
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v130 = *(_DWORD *)(v76 + 16);
          if (v93)
          {
            uint64_t v131 = *(int **)(v96 + 24);
            uint64_t v132 = v93;
            int v133 = (_WORD *)(*(void *)(v76 + 24) + 2 * v184 * v91 * v130 * v92 + 2 * v93 * v88);
            do
            {
              int v134 = *v131++;
              _S0 = v134;
              __asm { FCVT            H0, S0 }
              *v133++ = _S0;
              --v132;
            }
            while (v132);
          }
          ++v88;
          int v87 = __val - 1;
        }
        while (v88 < v130);
      }
      ++v184;
    }
    while (v184 < *(_DWORD *)(v76 + 20));
  }
  if (height) {
    nitro::nitro_function::nitro_function(height);
  }
  uint64_t v15 = v166;
  int v74 = v167;
  if (v191) {
    nitro::nitro_function::nitro_function(v191);
  }
  int v75 = v193;
  if (v193) {
LABEL_176:
  }
    nitro::nitro_function::nitro_function(v75);
LABEL_177:
  if (*(_DWORD *)(v170 + 284) == 1 && v15 << 32)
  {
    uint64_t v136 = *(__int16 **)(v76 + 24);
    uint64_t v137 = (int)v15;
    do
    {
      __int16 v138 = *v136;
      __asm { FCMP            H0, #0 }
      if (_NF) {
        __int16 v138 = 0;
      }
      *v136++ = v138;
      --v137;
    }
    while (v137);
  }
  if (v168) {
    nitro::nitro_function::nitro_function(v168);
  }
  if (v169) {
    nitro::nitro_function::nitro_function(v169);
  }
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }
}

void sub_192777D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (a30) {
    nitro::nitro_function::nitro_function(a30);
  }
  int v41 = a16;
  if (a15)
  {
    nitro::nitro_function::nitro_function(a15);
    int v41 = a16;
    if (!a16)
    {
LABEL_5:
      if (!a14) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!a16)
  {
    goto LABEL_5;
  }
  nitro::nitro_function::nitro_function(v41);
  if (!a14) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_6:
  nitro::nitro_function::nitro_function(a14);
  goto LABEL_7;
}

void Espresso::CPUFP16Engine::elementwise_kernel_cpu::~elementwise_kernel_cpu(Espresso::CPUFP16Engine::elementwise_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::CPUFP16Engine::split_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v6)
  {
    uint64_t v8 = v6[22];
    uint64_t v7 = (std::__shared_weak_count *)v6[23];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(int *)(v8 + 12) * (uint64_t)*(int *)(v8 + 8);
  uint64_t v10 = (int)v9 * (uint64_t)*(int *)(v8 + 16);
  vImagePixelCount v40 = v7;
  if (a1[74])
  {
    uint64_t v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
    if (v11)
    {
      uint64_t v13 = *((void *)v11 + 22);
      uint64_t v12 = *((void *)v11 + 23);
      if (v12)
      {
        uint64_t v39 = (std::__shared_weak_count *)*((void *)v11 + 23);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
LABEL_18:
        int v20 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 1);
        if (v20)
        {
          uint64_t v22 = v20[22];
          int v21 = (std::__shared_weak_count *)v20[23];
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v22 = 0;
          int v21 = 0;
        }
        uint64_t v38 = v21;
        int v23 = a1[73];
        if (v23 <= 0) {
          int v23 = *(_DWORD *)(v8 + 16) / 2;
        }
        if (*(int *)(v8 + 20) >= 1)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v41 = 2 * v23 * (int)v9;
          uint64_t v27 = 2 * (int)v10;
          do
          {
            uint64_t v28 = (char *)(*(void *)(v8 + 24) + v24);
            vImagePixelCount v29 = (void *)(*(void *)(v22 + 24) + 2 * v25 * *(int *)(v22 + 16));
            memcpy((void *)(*(void *)(v13 + 24) + 2 * v25 * *(int *)(v13 + 16)), v28, 2 * *(_DWORD *)(v13 + 16) * (int)v9);
            memcpy(v29, &v28[v41], 2 * *(_DWORD *)(v22 + 16) * (int)v9);
            ++v26;
            v25 += (int)v9;
            v24 += v27;
          }
          while (v26 < *(int *)(v8 + 20));
        }
        if (v38) {
          nitro::nitro_function::nitro_function(v38);
        }
        if (v39) {
          nitro::nitro_function::nitro_function(v39);
        }
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v39 = 0;
    goto LABEL_18;
  }
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  if (a1[71] == 3)
  {
    if (v15 != v14)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      do
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v42, *(void **)(v14 + v16), *(std::__shared_weak_count **)(v14 + v16 + 8));
        uint64_t v19 = *(int *)(v42 + 20);
        memcpy(*(void **)(v42 + 24), (const void *)(*(void *)(v8 + 24) + 2 * v18 * v10), 2 * (int)v19 * (int)v10);
        if (v43) {
          nitro::nitro_function::nitro_function(v43);
        }
        v18 += v19;
        ++v17;
        uint64_t v14 = *a3;
        v16 += 16;
      }
      while (v17 < (a3[1] - *a3) >> 4);
    }
  }
  else if (v15 != v14)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 2 * (int)v10;
    do
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v42, *(void **)(v14 + 16 * v30), *(std::__shared_weak_count **)(v14 + 16 * v30 + 8));
      uint64_t v33 = v42;
      if (*(int *)(v8 + 20) >= 1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 2 * v9 * v31;
        do
        {
          memcpy((void *)(*(void *)(v33 + 24) + 2 * v34 * *(int *)(v33 + 16)), (const void *)(*(void *)(v8 + 24) + v36), 2 * *(_DWORD *)(v33 + 16) * (int)v9);
          ++v35;
          v34 += v9;
          v36 += v32;
        }
        while (v35 < *(int *)(v8 + 20));
      }
      uint64_t v37 = *(int *)(v33 + 16);
      if (v43) {
        nitro::nitro_function::nitro_function(v43);
      }
      v31 += v37;
      ++v30;
      uint64_t v14 = *a3;
    }
    while (v30 < (a3[1] - *a3) >> 4);
  }
LABEL_39:
  if (v40)
  {
    nitro::nitro_function::nitro_function(v40);
  }
}

void sub_1927782F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::CPUFP16Engine::split_kernel_cpu::~split_kernel_cpu(Espresso::CPUFP16Engine::split_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::CPUFP16Engine::upsample_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 22);
    uint64_t v7 = *((void *)v6 + 23);
    if (v7)
    {
      uint64_t v62 = (std::__shared_weak_count *)*((void *)v6 + 23);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v62 = 0;
LABEL_6:
  uint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (!v9)
  {
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  uint64_t v10 = *((void *)v9 + 22);
  uint64_t v11 = *((void *)v9 + 23);
  if (!v11)
  {
LABEL_10:
    uint64_t v61 = 0;
    goto LABEL_11;
  }
  uint64_t v61 = (std::__shared_weak_count *)*((void *)v9 + 23);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
LABEL_11:
  uint64_t v12 = 0;
  uint64_t v68 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v13 = 1;
  do
  {
    *((void *)&v66 + v12) = (int)v13;
    v13 *= *(unsigned int *)(v8 + 8 + 4 * v12++);
  }
  while (v12 != 4);
  uint64_t v14 = 0;
  uint64_t v65 = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  uint64_t v15 = 1;
  do
  {
    *((void *)&v63 + v14) = (int)v15;
    v15 *= *(unsigned int *)(v10 + 8 + 4 * v14++);
  }
  while (v14 != 4);
  if (*(_DWORD *)(a1 + 292)) {
    goto LABEL_55;
  }
  if (*(unsigned char *)(a1 + 304))
  {
    if (!*(_DWORD *)(a1 + 300))
    {
      uint64_t v16 = *(unsigned int *)(v10 + 20);
      if ((int)v16 >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v20 = *(unsigned int *)(v10 + 8);
        uint64_t v19 = *(unsigned int *)(v10 + 12);
        float v21 = (float)*(int *)(v8 + 12) / (float)(int)v19;
        uint64_t v22 = *(unsigned int *)(v10 + 16);
        long long v23 = v67;
        uint64_t v24 = *((void *)&v66 + 1);
        uint64_t v25 = 2 * *((void *)&v64 + 1);
        uint64_t v26 = 2 * v64;
        uint64_t v27 = 2 * *((void *)&v63 + 1);
        float v28 = (float)*(int *)(v8 + 8) / (float)(int)v20;
        do
        {
          if ((int)v22 >= 1)
          {
            uint64_t v29 = 0;
            uint64_t v30 = *(void *)(v8 + 24) + 2 * *((void *)&v23 + 1) * v18;
            uint64_t v31 = *(void *)(v10 + 24) + v17;
            do
            {
              if ((int)v19 >= 1)
              {
                uint64_t v32 = 0;
                uint64_t v33 = v31;
                do
                {
                  if ((int)v20 >= 1)
                  {
                    uint64_t v34 = 0;
                    uint64_t v35 = v24 * (int)vcvtms_s32_f32(v21 * (float)(int)v32);
                    do
                    {
                      *(_WORD *)(v33 + 2 * v34) = *(_WORD *)(v30
                                                           + 2 * v23 * v29
                                                           + 2 * (v35 + (int)vcvtms_s32_f32(v28 * (float)(int)v34)));
                      ++v34;
                    }
                    while (v20 != v34);
                  }
                  ++v32;
                  v33 += v27;
                }
                while (v32 != v19);
              }
              ++v29;
              v31 += v26;
            }
            while (v29 != v22);
          }
          ++v18;
          v17 += v25;
        }
        while (v18 != v16);
      }
      goto LABEL_48;
    }
LABEL_55:
    Espresso::throw_exception_selector<Espresso::generic_error>("Nearest neighbor sampling mode with fractional scale factors cannot be used in legacy mode in kernel upsample_kernel_cpu.");
  }
  uint64_t v36 = *(unsigned int *)(v10 + 20);
  if ((int)v36 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = *(unsigned int *)(v10 + 16);
    long long v40 = v67;
    uint64_t v41 = *((void *)&v63 + 1);
    uint64_t v42 = 2 * *((void *)&v64 + 1);
    uint64_t v43 = *((void *)&v66 + 1);
    uint64_t v44 = 2 * v64;
    uint64_t v45 = 2 * *((void *)&v63 + 1);
    do
    {
      if ((int)v39 >= 1)
      {
        uint64_t v46 = 0;
        uint64_t v47 = *(void *)(v8 + 24) + 2 * *((void *)&v40 + 1) * v38;
        int v48 = *(_DWORD *)(v8 + 12);
        uint64_t v49 = *(void *)(v10 + 24) + v37;
        do
        {
          if (v48 >= 1)
          {
            int v50 = 0;
            uint64_t v51 = v47 + 2 * v40 * v46;
            uint64_t v52 = *(unsigned int *)(v8 + 8);
            do
            {
              if ((int)v52 >= 1)
              {
                uint64_t v53 = 0;
                uint64_t v54 = *(unsigned int *)(a1 + 288);
                do
                {
                  if ((int)v54 >= 1)
                  {
                    uint64_t v55 = 0;
                    __int16 v56 = *(_WORD *)(v51 + 2 * v53);
                    uint64_t v57 = *(unsigned int *)(a1 + 284);
                    vDSP_Length v58 = (_WORD *)(v49 + 2 * (v41 * (int)v54 * v50 + (int)v57 * (int)v53));
                    do
                    {
                      float v59 = v58;
                      uint64_t v60 = v57;
                      if ((int)v57 >= 1)
                      {
                        do
                        {
                          *v59++ = v56;
                          --v60;
                        }
                        while (v60);
                      }
                      ++v55;
                      vDSP_Length v58 = (_WORD *)((char *)v58 + v45);
                    }
                    while (v55 != v54);
                  }
                  ++v53;
                }
                while (v53 != v52);
              }
              v51 += 2 * v43;
              ++v50;
            }
            while (v50 != v48);
          }
          ++v46;
          v49 += v44;
        }
        while (v46 != v39);
      }
      ++v38;
      v37 += v42;
    }
    while (v38 != v36);
  }
LABEL_48:
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v62)
  {
    nitro::nitro_function::nitro_function(v62);
  }
}

void sub_192778704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::CPUFP16Engine::upsample_kernel_cpu::~upsample_kernel_cpu(Espresso::CPUFP16Engine::upsample_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::abstract_batch::copy_parameters_from(uint64_t this, Espresso::abstract_batch *a2)
{
  if (a2)
  {
    *(void *)(this + 80) = *((void *)a2 + 10);
    *(unsigned char *)(this + 96) = *((unsigned char *)a2 + 96);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 40);
  }
  return this;
}

void Espresso::batch_cpu::~batch_cpu(Espresso::batch_cpu *this)
{
  Espresso::abstract_batch::~abstract_batch(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::context_cpu::network_transform_post_load(Espresso::context_cpu *this, Espresso::net *a2)
{
  if ((***((unsigned int (****)(void))this + 1))(*((void *)this + 1)) != 80000 && *((unsigned char *)this + 54))
  {
    Espresso::net::get_analysis_if_existing<Espresso::analysis_pass_insert_casts>(&v8, (uint64_t)a2);
    uint64_t v4 = v8;
    if (!v8
      || (unsigned int v5 = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1)),
          !Espresso::analysis_pass_insert_casts::has_platform(v4, v5)))
    {
      int v6 = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
      uint64_t v7 = operator new(0x28uLL);
      v7[1] = 0;
      void v7[2] = 0;
      *uint64_t v7 = &unk_1EE388068;
      v7[3] = &unk_1EE35CD30;
      *((_DWORD *)v7 + 8) = v6;
      Espresso::run_pass_on_network<Espresso::pass_insert_casts,Espresso::pass_params_insert_casts>();
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
}

void sub_192778930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  nitro::nitro_function::nitro_function(v12);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_params_insert_casts>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_params_insert_casts>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL Espresso::context_cpu::set_platform_specific_option(Espresso::context_cpu *this, const char *__s1, int a3)
{
  int v5 = strcmp(__s1, "use_sequential_cblas");
  if (!v5) {
    *((unsigned char *)this + 125) = a3 != 0;
  }
  return v5 == 0;
}

void Espresso::abstract_context::get_internal_fallback_context(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::abstract_context::get_arg_a(Espresso::abstract_context *this)
{
  return 0;
}

void Espresso::context_cpu::create_compiler_for_network(uint64_t a1, uint64_t a2)
{
  unsigned int v10 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  unint64_t v3 = operator new(0x80uLL);
  uint64_t v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  *unint64_t v3 = &unk_1EE3818F0;
  int v5 = v3 + 3;
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = *(_DWORD **)a2;
  v11[1] = (_DWORD *)v6;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    Espresso::compiler_cpu::compiler_cpu((uint64_t)(v3 + 3), (uint64_t *)v11);
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  }
  else
  {
    Espresso::compiler_cpu::compiler_cpu((uint64_t)(v3 + 3), (uint64_t *)v11);
  }
  uint64_t v7 = *(void *)a2 + 528;
  v11[0] = &v10;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v7, &v10, (uint64_t)&std::piecewise_construct, v11);
  uint64_t v9 = (std::__shared_weak_count *)v8[4];
  void v8[3] = v5;
  v8[4] = v4;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192778B34(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::compiler_cpu::compiler_cpu(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = &unk_1EE32A7F8;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
    int v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void Espresso::compiler_cpu::__forward_segment()
{
}

void Espresso::compiler_cpu::build_segment()
{
}

void Espresso::compiler_cpu::dump_ir(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    int v5 = std::__shared_weak_count::lock(v4);
    uint64_t v12 = v5;
    if (v5) {
      uint64_t v11 = *(void *)(a1 + 8);
    }
  }
  else
  {
    int v5 = 0;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::dump_network(&v11, &__str, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192778CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::compiler_cpu::~compiler_cpu(Espresso::compiler_cpu *this)
{
  *(void *)this = &unk_1EE35F3A0;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  uint64_t v4 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_1EE32A8C8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(void *)this = &unk_1EE35F3A0;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  uint64_t v4 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_1EE32A8C8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::compiler_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::compiler_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3818F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::compiler_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3818F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::abstract_context::compute_batch_sync_or_enqueue(void (***a1)(uint64_t *__return_ptr, void), void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (*a2) {
    (*((void (**)(id, void *))v5 + 2))(v5, a2);
  }
  else {
    Espresso::abstract_context::compute_batch_sync(a1, v5);
  }
}

void sub_192779080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::abstract_context::compute_batch_sync_retry(void (***a1)(uint64_t *__return_ptr, void), void *a2, uint64_t a3, int a4)
{
  id v6 = a2;
  if (a4 >= 1) {
    Espresso::abstract_context::compute_batch_sync(a1, v6);
  }
}

void sub_192779160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192779168(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

void *Espresso::context_cpu::get_device_model_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CPU");
}

void std::__shared_ptr_emplace<Espresso::batch_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::batch_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_139@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1E8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE388AE8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE363750;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((void *)v6 + 50) = 0;
  *(_OWORD *)(v6 + 344) = xmmword_192DC3600;
  *((void *)v6 + 45) = 0xFFFFFFFF00000001;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *(_OWORD *)(v6 + 408) = xmmword_192DC3600;
  *((void *)v6 + 53) = 0xFFFFFFFF00000001;
  *((void *)v6 + 59) = 0;
  *((void *)v6 + 60) = 0;
  *((void *)v6 + 58) = 0;
  *((void *)v6 + 38) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927792E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::linear_dequantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::linear_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388AE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::linear_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388AE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_138@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1E8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE3885A8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE35F248;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((void *)v6 + 50) = 0;
  *(_OWORD *)(v6 + 344) = xmmword_192DC3600;
  *((void *)v6 + 45) = 0xFFFFFFFF00000001;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *(_OWORD *)(v6 + 408) = xmmword_192DC3600;
  *((void *)v6 + 53) = 0xFFFFFFFF00000001;
  *((void *)v6 + 59) = 0;
  *((void *)v6 + 60) = 0;
  *((void *)v6 + 58) = 0;
  *((void *)v6 + 38) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192779474(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::linear_quantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::linear_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3885A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::linear_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3885A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_137@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x138uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE386660;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  void v8[3] = &unk_1EE34DCE8;
  *((_DWORD *)v8 + 76) = *a2;
  *((_DWORD *)v8 + 77) = a3;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1927795CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::degamma_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::degamma_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386660;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::degamma_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_136@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x140uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE381AB0;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  void v8[3] = &unk_1EE32AA78;
  v8[38] = *a2;
  *((_DWORD *)v8 + 78) = a3;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192779724(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::plane_rw_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::plane_rw_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::plane_rw_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_135@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388C70;
  uint64_t v7 = Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE363D80;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192779868(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::tunneled_ane_unit_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::tunneled_ane_unit_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388C70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::tunneled_ane_unit_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_134@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x248uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3887A0;
  uint64_t v7 = Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE35FC78;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927799AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::tunneled_ane_op_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::tunneled_ane_op_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3887A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::tunneled_ane_op_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3887A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_133@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x140uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE3892C8;
  result.n128_u64[0] = Espresso::furthest_point_sampling_kernel_cpu::furthest_point_sampling_kernel_cpu((uint64_t)(v8 + 3), a1, a3, a2);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192779AE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::furthest_point_sampling_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::furthest_point_sampling_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3892C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::furthest_point_sampling_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3892C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_132@<Q0>(uint64_t *a1@<X1>, const std::string *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE386350;
  result.n128_u64[0] = (unint64_t)Espresso::einsum_kernel_cpu::einsum_kernel_cpu((char *)v6 + 24, a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192779C0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::einsum_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::einsum_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386350;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::einsum_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_131@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE389370;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE369660;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192779D54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::resize_nearest_neighbor_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::resize_nearest_neighbor_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389370;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::resize_nearest_neighbor_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_130@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x228uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE389060;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE366520;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  long long v8 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v8;
  *((void *)v6 + 50) = *(void *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192779ED0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::general_slice_update_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::general_slice_update_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389060;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::general_slice_update_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_129@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1E0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE386A50;
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 54) = 0;
  *((void *)v6 + 55) = 0;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((void *)v6 + 3) = &unk_1EE34F1A8;
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v9;
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277A040(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::deconv3d_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::deconv3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386A50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::deconv3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_128@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x1B8uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3893E0;
  Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE369AA8;
  long long v7 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v6 + 25) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v6 + 26) = v7;
  *(void *)((char *)v6 + 431) = *(void *)(a2 + 127);
  long long v8 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v11;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277A1AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::fused_inner_product_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::fused_inner_product_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3893E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::fused_inner_product_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3893E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_127@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3891E8;
  result.n128_u64[0] = Espresso::fused_convolution_grad_kernel_cpu::fused_convolution_grad_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277A2D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::fused_convolution_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::fused_convolution_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3891E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::fused_convolution_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3891E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_126@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE388C38;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 45) = 0;
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 3) = &unk_1EE363BE8;
  long long v8 = a2[1];
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 344) = v8;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277A430(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::static_dequantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::static_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388C38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::static_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_125@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388730;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35F9C8;
  v6[38] = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277A580(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::static_quantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::static_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388730;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::static_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_124@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x150uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE387E00;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE35B310;
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)((char *)a2 + 12);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277A6D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::slice_update_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::slice_update_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387E00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::slice_update_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_123@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x198uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE3864D8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE34D448;
  *((void *)v6 + 49) = 0;
  *((void *)v6 + 50) = 0;
  *((void *)v6 + 48) = 0;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  v6[308] = *(unsigned char *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277A83C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::argsort_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::argsort_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3864D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::argsort_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3864D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_122@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1E0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE386270;
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 54) = 0;
  *((void *)v6 + 55) = 0;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((void *)v6 + 3) = &unk_1EE34C6D8;
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v9;
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277A9AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::conv3d_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::conv3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386270;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::conv3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_121@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x280uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE3894C0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE36A380;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *((void *)v6 + 79) = 0;
  long long v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  long long v8 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = v9;
  *((_OWORD *)v6 + 20) = v7;
  long long v10 = *(_OWORD *)(a2 + 96);
  long long v11 = *(_OWORD *)(a2 + 112);
  *((_DWORD *)v6 + 108) = *(_DWORD *)(a2 + 128);
  *((_OWORD *)v6 + 26) = v11;
  *((_OWORD *)v6 + 25) = v10;
  *((_OWORD *)v6 + 24) = v8;
  uint64_t v12 = *((int *)v6 + 101);
  if (v12)
  {
    if ((v12 & 0x80000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
    bzero(v13, 16 * v12);
    *((void *)v6 + 58) = v13;
    *((void *)v6 + 59) = &v13[16 * v12];
    *((void *)v6 + 60) = &v13[16 * v12];
    uint64_t v14 = (char *)operator new(16 * v12);
    bzero(v14, 16 * v12);
    *((void *)v6 + 55) = v14;
    *((void *)v6 + 56) = &v14[16 * v12];
    *((void *)v6 + 57) = &v14[16 * v12];
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277AC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::hierarchical_inner_product_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::hierarchical_inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3894C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::hierarchical_inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3894C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_120@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x170uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE386468;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE34D198;
  long long v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_OWORD *)v6 + 21) = a2[2];
  *(_OWORD *)(v6 + 348) = *(_OWORD *)((char *)a2 + 44);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277ADF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::pool3d_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pool3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pool3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_119@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::loopkit_kernel_cpu,std::allocator<Espresso::loopkit_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::loopkit_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::loopkit_kernel_cpu,std::allocator<Espresso::loopkit_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::loopkit_params_t const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  id v6 = (char *)operator new(0x230uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE386740;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE34E568;
  *((void *)v6 + 52) = 0;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_DWORD *)v6 + 106) = 1;
  *((void *)v6 + 60) = 0;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *((void *)v6 + 65) = 0;
  *((_DWORD *)v6 + 132) = 1065353216;
  *((void *)v6 + 69) = 0;
  *(_OWORD *)(v6 + 536) = 0u;
  std::string::operator=((std::string *)(v6 + 304), (const std::string *)a3);
  if (v6 + 304 == (char *)a3)
  {
    std::string::operator=((std::string *)(v6 + 352), (const std::string *)(a3 + 48));
    std::string::operator=((std::string *)(v6 + 376), (const std::string *)(a3 + 72));
  }
  else
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 328, *(char **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
    std::string::operator=((std::string *)(v6 + 352), (const std::string *)(a3 + 48));
    std::string::operator=((std::string *)(v6 + 376), (const std::string *)(a3 + 72));
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 400, *(char **)(a3 + 96), *(void *)(a3 + 104), (uint64_t)(*(void *)(a3 + 104) - *(void *)(a3 + 96)) >> 2);
  }
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a3 + 120);
  Espresso::func_argv_name((uint64_t)v18, (const void **)v6 + 38, 0);
  if (v6[399] < 0)
  {
    if (*((void *)v6 + 48)) {
      goto LABEL_34;
    }
  }
  else if (v6[399])
  {
    goto LABEL_34;
  }
  if (Espresso::loopkit_kernel_cpu::loopkit_kernel_cpu(std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path,Espresso::loopkit_params_t const&)::onceToken != -1) {
    dispatch_once(&Espresso::loopkit_kernel_cpu::loopkit_kernel_cpu(std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path,Espresso::loopkit_params_t const&)::onceToken, &__block_literal_global_4_20082);
  }
  if (!getenv("ESPRESSO_LK_CUSTOM_DYLIB"))
  {
    if (v6[375] < 0)
    {
      if (*((void *)v6 + 45)) {
        goto LABEL_19;
      }
    }
    else if (v6[375])
    {
LABEL_19:
      if (Espresso::loopkit_dylib_cache::shared(void)::onceToken != -1) {
        dispatch_once(&Espresso::loopkit_dylib_cache::shared(void)::onceToken, &__block_literal_global_20066);
      }
      Espresso::loopkit_dylib_cache::get_dylib((uint64_t **)__p, Espresso::loopkit_dylib_cache::shared(void)::ret, (uint64_t)(v6 + 352));
      long long v10 = (std::__shared_weak_count *)*((void *)v6 + 55);
      long long v11 = *(_OWORD *)__p;
LABEL_28:
      *((_OWORD *)v6 + 27) = v11;
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      goto LABEL_30;
    }
    if (Espresso::loopkit_dylib_cache::shared(void)::onceToken != -1) {
      dispatch_once(&Espresso::loopkit_dylib_cache::shared(void)::onceToken, &__block_literal_global_20066);
    }
    uint64_t v12 = Espresso::loopkit_dylib_cache::shared(void)::ret;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::loopkit_dylib_cache::get_dylib((uint64_t **)&v17, v12, (uint64_t)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    long long v10 = (std::__shared_weak_count *)*((void *)v6 + 55);
    long long v11 = v17;
    goto LABEL_28;
  }
  if (Espresso::loopkit_dylib_cache::shared(void)::onceToken != -1) {
    dispatch_once(&Espresso::loopkit_dylib_cache::shared(void)::onceToken, &__block_literal_global_20066);
  }
  uint64_t v7 = Espresso::loopkit_dylib_cache::shared(void)::ret;
  long long v8 = getenv("ESPRESSO_LK_CUSTOM_DYLIB");
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  Espresso::loopkit_dylib_cache::get_dylib((uint64_t **)&v17, v7, (uint64_t)__p);
  long long v9 = (std::__shared_weak_count *)*((void *)v6 + 55);
  *((_OWORD *)v6 + 27) = v17;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
LABEL_30:
  if (v19 >= 0) {
    uint64_t v13 = v18;
  }
  else {
    uint64_t v13 = (void **)v18[0];
  }
  uint64_t v14 = dlsym(**((void ***)v6 + 54), (const char *)v13);
  *((void *)v6 + 61) = v14;
  if (!v14)
  {
    uint64_t v15 = v18;
    if (v19 < 0) {
      uint64_t v15 = (void **)v18[0];
    }
    __p[0] = v15;
    uint64_t v16 = v6 + 352;
    if (v6[375] < 0) {
      uint64_t v16 = (void *)*v16;
    }
    *(void *)&long long v17 = v16;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("Fail to load function '%s' from dylib %s", __p, &v17);
  }
LABEL_34:
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_19277B2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  uint64_t v27 = *(void **)(v25 + 512);
  if (v27)
  {
    v23[22].__shared_weak_owners_ = (uint64_t)v27;
    operator delete(v27);
  }
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::~__hash_table((uint64_t)&v23[20].__shared_weak_owners_);
  Espresso::generic_loopkit_kernel::~generic_loopkit_kernel(v24);
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::loopkit_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::loopkit_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386740;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::loopkit_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_118@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x208uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE3883B0;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 39) = 0;
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 38) = v8 + 312;
  *((void *)v8 + 3) = &unk_1EE35DC58;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *((_DWORD *)v8 + 94) = 1065353216;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = 1065353216;
  *((_DWORD *)v8 + 85) = a3;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  v8[336] = *(unsigned char *)(a2 + 8);
  *((void *)v8 + 41) = *(void *)a2;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19277B4B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::self_attention_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::self_attention_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3883B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::self_attention_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3883B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_117@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x1E8uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE388CA8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 39) = 0;
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 38) = v8 + 312;
  *((void *)v8 + 3) = &unk_1EE364068;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *((_DWORD *)v8 + 94) = 1065353216;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = 1065353216;
  *((_DWORD *)v8 + 85) = a3;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  uint64_t v10 = *a2;
  *((_DWORD *)v8 + 84) = *((_DWORD *)a2 + 2);
  *((void *)v8 + 41) = v10;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19277B644(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::bahdanau_attention_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::bahdanau_attention_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::bahdanau_attention_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_116@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388B20;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE3638A8;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277B78C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::local_correlation_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::local_correlation_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388B20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::local_correlation_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_115@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x150uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE386B30;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE350140;
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 313) = *(_OWORD *)((char *)a2 + 9);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277B8E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::resample_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::resample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386B30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::resample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_114@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE387F88;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35C8C0;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  *((_WORD *)v6 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277BA30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::grid_sampling_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::grid_sampling_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387F88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::grid_sampling_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_113@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE387B60;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35A378;
  v6[38] = v8;
  v6[39] = v7;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277BB80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::dropout_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::dropout_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387B60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dropout_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_112@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x168uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3888F0;
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE360740;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277BCF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::elementwise_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::elementwise_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3888F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::elementwise_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3888F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_111@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1D0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE3894F8;
  long long v15 = a2[6];
  long long v16 = a2[7];
  int v17 = *((_DWORD *)a2 + 32);
  long long v11 = a2[2];
  long long v12 = a2[3];
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v9 = *a2;
  long long v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE36A4D8;
  *((_DWORD *)v6 + 114) = v17;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277BE94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::inner_product_weights_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::inner_product_weights_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3894F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::inner_product_weights_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3894F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_110@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1D0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE388D88;
  long long v15 = a2[6];
  long long v16 = a2[7];
  int v17 = *((_DWORD *)a2 + 32);
  long long v11 = a2[2];
  long long v12 = a2[3];
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v9 = *a2;
  long long v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE364C20;
  *((_DWORD *)v6 + 114) = v17;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277C030(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::inner_product_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::inner_product_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388D88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::inner_product_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_109@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388AB0;
  uint64_t v7 = *a2;
  LODWORD(a2) = *((_DWORD *)a2 + 2);
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE3635F8;
  v6[38] = v7;
  *((_DWORD *)v6 + 78) = a2;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277C188(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::l2_normalize_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::l2_normalize_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::l2_normalize_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_108@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x198uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE388228;
  long long v11 = a2[2];
  *(_OWORD *)long long v12 = a2[3];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a2 + 60);
  long long v9 = *a2;
  long long v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE35D010;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)&v12[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277C308(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::batchnorm_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::batchnorm_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388228;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::batchnorm_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_107@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x150uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386CB8;
  uint64_t v7 = *a2;
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = 0;
  v6[39] = 0;
  v6[40] = 0;
  v6[3] = &unk_1EE350988;
  *((_DWORD *)v6 + 82) = v7;
  *((unsigned char *)v6 + 332) = BYTE4(v7);
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277C460(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::bias_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::bias_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::bias_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_106@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x170uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE382FB0;
  uint64_t v7 = *a2;
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[39] = 0;
  v6[40] = 0;
  v6[38] = v6 + 39;
  v6[42] = 0;
  v6[43] = 0;
  v6[3] = &unk_1EE332470;
  v6[44] = 0;
  v6[45] = 0;
  *((_DWORD *)v6 + 82) = v7;
  *((unsigned char *)v6 + 332) = BYTE4(v7);
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277C5C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::bias_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::bias_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::bias_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_105@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x150uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE388C00;
  *(_OWORD *)long long v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE363A90;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277C730(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::softmax_loss_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::softmax_loss_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388C00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::softmax_loss_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_104@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x170uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE387738;
  long long v9 = *a2;
  long long v10 = a2[1];
  *(_OWORD *)long long v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE357760;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277C8A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::concat_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::concat_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387738;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::concat_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_103@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::nonlinearity_grad_cpu,std::allocator<Espresso::nonlinearity_grad_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::nonlinearity_grad_cpu,std::allocator<Espresso::nonlinearity_grad_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  id v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE387498;
  __n128 v9 = *a3;
  __n128 v10 = a3[1];
  unsigned __int32 v11 = a3[2].n128_u32[0];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE356DA8;
  v6[21].n128_u64[1] = 0;
  v6[22].n128_u64[0] = 0;
  __n128 result = v9;
  v6[19] = v9;
  v6[20] = v10;
  v6[21].n128_u32[0] = v11;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19277CA40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::nonlinearity_grad_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::nonlinearity_grad_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387498;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::nonlinearity_grad_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_102@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::nonlinearity_grad_cpu,std::allocator<Espresso::nonlinearity_grad_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_101@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x1A0uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386F90;
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE352390;
  *((_OWORD *)v6 + 23) = v13;
  *((_OWORD *)v6 + 24) = v14;
  *((_OWORD *)v6 + 25) = v15;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277CC00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::pool_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pool_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386F90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pool_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_100@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1F0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE3893A8;
  long long v17 = a2[8];
  *(_OWORD *)uint64_t v18 = a2[9];
  *(void *)&v18[16] = *((void *)a2 + 20);
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v16 = a2[7];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 38) = 0;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((void *)v6 + 3) = &unk_1EE369948;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(void *)(v7 + 157) = *(void *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277CDC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::convolution_weights_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::convolution_weights_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3893A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::convolution_weights_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3893A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_99@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1F0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE388848;
  long long v17 = a2[8];
  *(_OWORD *)uint64_t v18 = a2[9];
  *(void *)&v18[16] = *((void *)a2 + 20);
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v16 = a2[7];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 38) = 0;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((void *)v6 + 3) = &unk_1EE35FF58;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(void *)(v7 + 157) = *(void *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277CF90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::convolution_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::convolution_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388848;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::convolution_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_98@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x1A0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE3890D0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 43) = 0;
  *((void *)v6 + 44) = 0;
  *((void *)v6 + 3) = &unk_1EE367420;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *((void *)v6 + 41) = *(void *)a2;
  *((_DWORD *)v6 + 84) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277D100(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::sparse_inner_product_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::sparse_inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3890D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::sparse_inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3890D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dev_op_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dev_op_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_96@<Q0>(uint64_t *a1@<X1>, _WORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3862A8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE34C8B8;
  *((_WORD *)v6 + 152) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277D2BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cumsum_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cumsum_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3862A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cumsum_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3862A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_95@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3867B0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE34E818;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277D404(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::one_hot_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::one_hot_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3867B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::one_hot_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3867B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_94@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0x138uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE388ED8;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE365F48;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19277D540(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::precompiled_segment_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::precompiled_segment_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::precompiled_segment_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_93@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0x150uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE386778;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE34E6C0;
  v4[40] = 0;
  v4[41] = 0;
  v4[39] = 0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19277D684(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::nonzero_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::nonzero_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386778;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::nonzero_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_92@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x158uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3874D0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE356F30;
  v6[41] = 0;
  v6[42] = 0;
  v6[40] = 0;
  v6[38] = *a2;
  *(void *)((char *)v6 + 310) = *(void *)((char *)a2 + 6);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277D7E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::scatter_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::scatter_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3874D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::scatter_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3874D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::gather_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386E78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::gather_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::non_maximum_suppression_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::non_maximum_suppression_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389300;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::non_maximum_suppression_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_89@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE382F78;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE3322E8;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277DA38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::adam_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::adam_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382F78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::adam_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_88@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::sgd_kernel_cpu,std::allocator<Espresso::sgd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::sgd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_87@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE387EE0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35B718;
  v6[38] = *(void *)a2;
  *((unsigned char *)v6 + 312) = *(unsigned char *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277DBC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cross_entropy_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cross_entropy_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cross_entropy_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_86@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3879A0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE359C80;
  v6[38] = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277DD08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::reverse_seq_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::reverse_seq_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3879A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::reverse_seq_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3879A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_85@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3886F8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35F870;
  v6[38] = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277DE58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::sliding_windows_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::sliding_windows_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3886F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::sliding_windows_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3886F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_84@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::softmax_nd_kernel_cpu,std::allocator<Espresso::softmax_nd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_83@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x368uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE386B68;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE350298;
  *(_OWORD *)(v6 + 824) = 0u;
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  memcpy(v6 + 304, a2, 0x208uLL);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277E000(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::split_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::split_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386B68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::split_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386B68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_82@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE386BA0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE3503F0;
  *((void *)v6 + 47) = 0;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *((_DWORD *)v6 + 76) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277E15C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::stack_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::stack_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386BA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::stack_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386BA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::general_slice_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387F50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::general_slice_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_80@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::transplant_kernel_cpu,std::allocator<Espresso::transplant_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transplant_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_79@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x1F8uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386510;
  result.n128_u64[0] = Espresso::builtin_kernel_cpu::builtin_kernel_cpu((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277E330(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::builtin_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::builtin_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386510;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::builtin_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_78@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x170uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE387460;
  result.n128_u64[0] = Espresso::gumbel_max_kernel_cpu::gumbel_max_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277E458(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::gumbel_max_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::gumbel_max_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387460;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::gumbel_max_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_77@<D0>(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>((uint64_t *)&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_76@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::instancenorm_1d_kernel_cpu,std::allocator<Espresso::instancenorm_1d_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::instancenorm_1d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_75@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3878F8;
  result.n128_u64[0] = Espresso::multinomial_kernel_cpu::multinomial_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277E5F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::multinomial_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::multinomial_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3878F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::multinomial_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3878F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_74@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x150uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE387AB8;
  *(_OWORD *)long long v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE359F68;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 313) = *(_OWORD *)&v9[9];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277E75C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::array_gather_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::array_gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::array_gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_71@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x240uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388768;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35FB20;
  memcpy(v6 + 38, a2, 0x109uLL);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277E8BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::tensor_zero_pad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::tensor_zero_pad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388768;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::tensor_zero_pad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_70@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x158uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE383090;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE332A10;
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((unsigned char *)v6 + 336) = *(unsigned char *)(a2 + 32);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277EA0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::fill_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::fill_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383090;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::fill_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_69@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::matrix_band_part_kernel_cpu,std::allocator<Espresso::matrix_band_part_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::matrix_band_part_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_68@<Q0>(uint64_t *a1@<X1>, unsigned __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE387AF0;
  int v7 = *((unsigned __int8 *)a2 + 2);
  LODWORD(a2) = *a2;
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35A0C0;
  *((_WORD *)v6 + 152) = (_WORD)a2;
  *((unsigned char *)v6 + 306) = (a2 | (v7 << 16)) >> 16;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277EBA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::batch_matmul_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::batch_matmul_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::batch_matmul_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_67@<D0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::range_kernel_cpu,std::allocator<Espresso::range_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::range_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_66@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x170uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3878C0;
  result.n128_u64[0] = Espresso::load_random_kernel_cpu::load_random_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277ED04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::load_random_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::load_random_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3878C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::load_random_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3878C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_65@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x148uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3868C8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE34EB88;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(void *)((char *)v6 + 319) = *(void *)(a2 + 15);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277EE58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::scatter_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::scatter_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3868C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::scatter_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3868C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_63@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  long long v4 = operator new(0x160uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE386580;
  long long v5 = Espresso::generic_cf_else_kernel::generic_cf_else_kernel(v4 + 3, a1);
  v4[3] = &unk_1EE34D850;
  v4[39] = &unk_1EE34D9A8;
  result.n128_u64[0] = (unint64_t)v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19277EFB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_else_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_else_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386580;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_else_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_62@<D0>(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::cf_end_kernel_cpu,std::allocator<Espresso::cf_end_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_end_params_t const&,void>((uint64_t *)&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double std::allocate_shared[abi:ne180100]<Espresso::cf_end_kernel_cpu,std::allocator<Espresso::cf_end_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_end_params_t const&,void>(uint64_t *a1, uint64_t *a2)
{
  long long v4 = (char *)operator new(0x160uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)long long v4 = &unk_1EE3861C8;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 24), a2);
  v4[305] = 0;
  *((void *)v4 + 43) = 0;
  double result = 0.0;
  *((void *)v4 + 3) = &unk_1EE34C2B0;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *a1 = v5;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_19277F134(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_end_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_end_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3861C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_end_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3861C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_61@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x1A0uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE386200;
  uint64_t v9 = *a2;
  uint64_t v10 = Espresso::generic_cf_for_kernel::generic_cf_for_kernel((uint64_t)(v8 + 3), a1);
  void v8[3] = &unk_1EE34C408;
  v8[48] = 0;
  v8[49] = 0;
  *((_DWORD *)v8 + 100) = a3;
  *(void *)((char *)v8 + 404) = 0;
  v8[38] = v9;
  v8[39] = &unk_1EE34C560;
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19277F2B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_for_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_for_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386200;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_for_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_60@<D0>(uint64_t *a1@<X1>, int *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::cf_loop_kernel_cpu,std::allocator<Espresso::cf_loop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_loop_params_t const&,void>(&v5, a1, *a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void *std::allocate_shared[abi:ne180100]<Espresso::cf_loop_kernel_cpu,std::allocator<Espresso::cf_loop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_loop_params_t const&,void>(void *a1, uint64_t *a2, int a3)
{
  id v6 = operator new(0x160uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3865F0;
  double result = Espresso::generic_cf_loop_kernel::generic_cf_loop_kernel(v6 + 3, a2);
  v6[3] = &unk_1EE34DB40;
  v6[39] = &unk_1EE34DC98;
  *((_DWORD *)v6 + 76) = a3;
  *a1 = result;
  a1[1] = v6;
  return result;
}

void sub_19277F44C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_loop_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_loop_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3865F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_loop_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3865F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_59@<D0>(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::cf_if_kernel_cpu,std::allocator<Espresso::cf_if_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_if_params_t const&,void>(&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void *std::allocate_shared[abi:ne180100]<Espresso::cf_if_kernel_cpu,std::allocator<Espresso::cf_if_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_if_params_t const&,void>(void *a1, uint64_t *a2)
{
  long long v4 = operator new(0x160uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE3847C0;
  double result = Espresso::generic_cf_if_kernel::generic_cf_if_kernel(v4 + 3, a2);
  v4[3] = &unk_1EE33DC30;
  v4[39] = &unk_1EE33DD88;
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_19277F5D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_if_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_if_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3847C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_if_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3847C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_58@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_57@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_56@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::dynamic_dequantize_kernel_cpu,std::allocator<Espresso::dynamic_dequantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_dequantize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::dynamic_dequantize_kernel_cpu,std::allocator<Espresso::dynamic_dequantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_dequantize_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v6 = operator new(0x190uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388CE0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  v6[3] = &unk_1EE364228;
  __n128 result = *(__n128 *)a3;
  long long v9 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v9;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19277F7CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::dynamic_dequantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::dynamic_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dynamic_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_55@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::dynamic_quantize_kernel_cpu,std::allocator<Espresso::dynamic_quantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_quantize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::dynamic_quantize_kernel_cpu,std::allocator<Espresso::dynamic_quantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_quantize_params_t const&,void>(uint64_t *a1, uint64_t *a2, void *a3)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3888B8;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE3605E0;
  v6[38] = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19277F944(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::dynamic_quantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::dynamic_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3888B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dynamic_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3888B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_54@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE384750;
  uint64_t v7 = *a2;
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33D978;
  *((_DWORD *)v6 + 76) = v7;
  *((unsigned char *)v6 + 308) = BYTE4(v7);
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277FA94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::alloc_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::alloc_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384750;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::alloc_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::general_concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3882D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::general_concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3882D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_52@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x148uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386388;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE34CCC0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277FC58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::gather_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386388;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::topk_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::topk_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_50@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386EB0;
  uint64_t v7 = *a2;
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE351AE8;
  v6[38] = v7;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19277FE14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::get_shape_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::get_shape_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::get_shape_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  long long v4 = operator new(0x138uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE386D98;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE350F20;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19277FF50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_return_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_return_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386D98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_return_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x158uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386548;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  Espresso::cf_call_kernel_cpu::cf_call_kernel_cpu(v6 + 3, a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927800C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_call_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_call_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_call_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x160uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3865B8;
  LODWORD(a2) = *a2;
  uint64_t v7 = Espresso::generic_cf_jump_kernel::generic_cf_jump_kernel(v6 + 3, a1);
  v6[3] = &unk_1EE34D9C8;
  v6[39] = &unk_1EE34DB20;
  *((_DWORD *)v6 + 76) = a2;
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192780240(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_jump_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_jump_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3865B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_jump_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3865B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x168uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386D60;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v8 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string __p = *(std::string *)(a2 + 24);
  }
  int v10 = *(_DWORD *)(a2 + 48);
  Espresso::cf_branch_kernel_cpu::cf_branch_kernel_cpu((uint64_t)(v6 + 3), a1, (uint64_t)&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192780400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void Espresso::cf_branch_params_t::~cf_branch_params_t(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_branch_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cf_branch_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386D60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cf_branch_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x148uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388F10;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE3660A0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  v6[40] = *(void *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927805C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::spatial_transformer_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::spatial_transformer_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388F10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::spatial_transformer_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE388A08;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 43) = 0;
  *((void *)v6 + 44) = 0;
  *((void *)v6 + 3) = &unk_1EE3613B8;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 328) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192780728(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::quantized_gather_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::quantized_gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388A08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::quantized_gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::dynamic_dequantize_kernel_cpu,std::allocator<Espresso::dynamic_dequantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_dequantize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::dynamic_quantize_kernel_cpu,std::allocator<Espresso::dynamic_quantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_quantize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE3884C8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE35E100;
  long long v8 = a2[3];
  *((_OWORD *)v6 + 21) = a2[2];
  *((_OWORD *)v6 + 22) = v8;
  *(_OWORD *)(v6 + 365) = *(_OWORD *)((char *)a2 + 61);
  long long v9 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v9;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927808F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::crop_and_resize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::crop_and_resize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3884C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::crop_and_resize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3884C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE388650;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE35F460;
  long long v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *(_OWORD *)(v6 + 329) = *(_OWORD *)((char *)a2 + 25);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192780A48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::patch_extractor_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::patch_extractor_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388650;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::patch_extractor_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(uint64_t *a1@<X1>, const std::string *a2@<X2>, unsigned int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x170uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE3863C0;
  unsigned int v11 = a3;
  uint64_t v9 = Espresso::generic_lambda_kernel::generic_lambda_kernel((uint64_t)(v8 + 3), a1, &v11, a2);
  void v8[3] = &unk_1EE34CE38;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192780BA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::lambda_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::lambda_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3863C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::lambda_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3863C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  long long v4 = operator new(0x138uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE387EA8;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE35B5C0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_192780CE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::compute_stats_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::compute_stats_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::compute_stats_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cast_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::cast_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x158uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386D28;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE350C70;
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((unsigned char *)v6 + 336) = *(unsigned char *)(a2 + 32);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192780EA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::broadcast_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::broadcast_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386D28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::broadcast_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::slice_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384980;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::slice_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388420;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35DF48;
  v6[38] = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19278106C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::space_to_depth_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::space_to_depth_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388420;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::space_to_depth_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x158uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3883E8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35DDF0;
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *(void *)((char *)v6 + 333) = *(void *)(a2 + 29);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927811C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::space_to_batch_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::space_to_batch_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3883E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::space_to_batch_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3883E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x150uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3866D0;
  result.n128_u64[0] = Espresso::dropout_kernel_cpu::dropout_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927812E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3866D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3866D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x150uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE389098;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE3672C8;
  v6[40] = 0;
  v6[41] = 0;
  v6[38] = *a2;
  v6[39] = 0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192781434(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::prediction_smoothing_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::prediction_smoothing_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389098;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::prediction_smoothing_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::crop_kernel_cpu,std::allocator<Espresso::crop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3886C0;
  LODWORD(a2) = *a2;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35F718;
  *((_DWORD *)v6 + 76) = a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927815B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::sequence_repeat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::sequence_repeat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3886C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::sequence_repeat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3886C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE388688;
  LODWORD(a2) = *a2;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35F5C0;
  *((_DWORD *)v6 + 76) = a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927816FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::sequence_concat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::sequence_concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::sequence_concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  long long v4 = operator new(0x138uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE388A40;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE361568;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_192781838(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::sequence_reverse_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::sequence_reverse_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388A40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::sequence_reverse_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x140uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE387BD0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE35AF70;
  v6[38] = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192781988(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::l2_normalize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::l2_normalize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::l2_normalize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x138uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE386708;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE34DF98;
  v6[38] = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192781AD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::flatten_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::flatten_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386708;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::flatten_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x148uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE3831E0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE332D90;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192781C20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::tile_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::tile_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3831E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::tile_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3831E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE387D58;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE35B168;
  long long v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *(_OWORD *)(v6 + 333) = *(_OWORD *)((char *)a2 + 29);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192781D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::reshape_like_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::reshape_like_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387D58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::reshape_like_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::reshape_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::reshape_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386890;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::reshape_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::transpose_kernel_cpu,std::allocator<Espresso::transpose_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::general_padding_kernel_cpu,std::allocator<Espresso::general_padding_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::context_transfer_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::context_transfer_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388810;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::context_transfer_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::reduce_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3864A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::reduce_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3864A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = (char *)operator new(0x380uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)id v6 = &unk_1EE382E60;
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *(_OWORD *)(v6 + 312) = 0u;
  *((void *)v6 + 38) = v6 + 312;
  *((_DWORD *)v6 + 98) = 0;
  *((_OWORD *)v6 + 52) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  *((_OWORD *)v6 + 40) = 0u;
  *((_OWORD *)v6 + 41) = 0u;
  *((_OWORD *)v6 + 42) = 0u;
  *((_OWORD *)v6 + 43) = 0u;
  *((_OWORD *)v6 + 44) = 0u;
  *((_OWORD *)v6 + 45) = 0u;
  *((_OWORD *)v6 + 46) = 0u;
  *((_OWORD *)v6 + 47) = 0u;
  *((_OWORD *)v6 + 48) = 0u;
  *((_OWORD *)v6 + 49) = 0u;
  *((_OWORD *)v6 + 50) = 0u;
  *((void *)v6 + 102) = 0;
  *((void *)v6 + 103) = v6 + 832;
  *((void *)v6 + 106) = 0;
  *(_OWORD *)(v6 + 856) = 0u;
  *((void *)v6 + 3) = &unk_1EE331E38;
  *((_OWORD *)v6 + 55) = 0u;
  *((void *)v6 + 109) = v6 + 880;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  if (*((_DWORD *)v6 + 82) == 2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "GRU Not implemented");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927821F4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v3);
  Espresso::generic_rnn_kernel::~generic_rnn_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::rnn_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rnn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382E60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rnn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::activation_kernel_cpu,std::allocator<Espresso::activation_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  id v6 = operator new(0x168uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1EE384788;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE33DAD0;
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  v6[44] = *(void *)(a2 + 48);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927823AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::axpby_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::axpby_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384788;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::axpby_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::deconvolution_kernel_cpu,std::allocator<Espresso::deconvolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::split_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::split_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::split_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::CPUFP16Engine::elementwise_kernel_cpu,std::allocator<Espresso::CPUFP16Engine::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  id v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE381CE0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32B888;
  __n128 v8 = a3[1];
  v6[19] = *a3;
  v6[20] = v8;
  __n128 result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1927825B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::elementwise_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::elementwise_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::elementwise_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::elementwise_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3877E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::elementwise_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3877E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::upsample_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::upsample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381C70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::upsample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::concat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381C00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::concat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386238;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a3 == 1)
  {
    uint64_t v7 = operator new(0x168uLL);
    v7[1] = 0;
    void v7[2] = 0;
    *uint64_t v7 = &unk_1EE381C38;
    uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 3), a1);
    long long v9 = (char *)(v7 + 38);
    *((_DWORD *)v7 + 83) = 0;
    long long v10 = &unk_1EE32B358;
    goto LABEL_5;
  }
  if (!a3)
  {
    uint64_t v7 = operator new(0x168uLL);
    v7[1] = 0;
    void v7[2] = 0;
    *uint64_t v7 = &unk_1EE386938;
    uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 3), a1);
    long long v9 = (char *)(v7 + 38);
    *((_DWORD *)v7 + 83) = 0;
    long long v10 = &unk_1EE34ECE0;
LABEL_5:
    v7[3] = v10;
    v7[43] = 0;
    v7[44] = 0;
    v7[42] = 0;
    *((_OWORD *)v7 + 19) = *a2;
    *(_OWORD *)(v9 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(void *)&long long v11 = v8;
    *((void *)&v11 + 1) = v7;
    *(_OWORD *)a4 = v11;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

void sub_1927829E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::softmax_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 344);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::softmax_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381C38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::softmax_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::softmax_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::softmax_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386938;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::softmax_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a3 == 1)
  {
    uint64_t v8 = (char *)operator new(0x150uLL);
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(void *)uint64_t v8 = &unk_1EE381B58;
    uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
    *((void *)v8 + 3) = &unk_1EE32ADB8;
    *((_OWORD *)v8 + 19) = *a2;
    *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
    *(void *)&long long v7 = v9;
    *((void *)&v7 + 1) = v8;
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::lrn_kernel_cpu,std::allocator<Espresso::lrn_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v10, a1, (uint64_t)a2);
    long long v7 = v10;
LABEL_5:
    *(_OWORD *)a4 = v7;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

void sub_192782C2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::lrn_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::lrn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381B58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::lrn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  int v6 = a3;
  if (a3 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::pool_kernel,std::allocator<Espresso::BNNSEngine::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(&v5, a1, &v6, a2);
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::pool_kernel_cpu,std::allocator<Espresso::pool_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(&v5, a1, a2);
LABEL_5:
    *(_OWORD *)a4 = v5;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381110;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  int v6 = a3;
  if (a3 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::convolution_kernel,std::allocator<Espresso::BNNSEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, &v6, a2);
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::convolution_kernel_cpu,std::allocator<Espresso::convolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, (uint64_t)a2);
LABEL_5:
    *(_OWORD *)a4 = v5;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3811F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3811F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::engine_cpu::~engine_cpu(Espresso::engine_cpu *this)
{
  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void std::__shared_ptr_emplace<Espresso::context_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381848;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::context_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double Espresso::batch_cpu::batch_cpu(Espresso::batch_cpu *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((unsigned char *)this + 40) = 1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_WORD *)this + 48) = 256;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *(void *)this = &unk_1EE377560;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((unsigned char *)this + 40) = 1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_WORD *)this + 48) = 256;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *(void *)this = &unk_1EE377560;
  return result;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_gather_kernel::~mix_gather_kernel(Espresso::ANECompilerEngine::mix_gather_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_gather_kernel *)((char *)this - 304);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_gather_kernel *)((char *)this - 304);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_gather_kernel::compile(Espresso::ANECompilerEngine::mix_gather_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_gather_kernel::compile(Espresso::ANECompilerEngine::mix_gather_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  int v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v6 && (int v6 = std::__shared_weak_count::lock(v6)) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v141 = v6;
  int v172 = a3;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)&v172);
  uint64_t v10 = *((void *)v8 + 5);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v172 = a3[6];
  long long v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v172, (long long **)&v172);
  uint64_t v13 = *((void *)v11 + 5);
  long long v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v137 = v12;
  uint64_t v159 = 0;
  int v160 = 0;
  unint64_t v161 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v148, a3);
  obuint64_t j = (id)objc_opt_new();
  long long v14 = objc_opt_new();
  Espresso::abstract_blob_container::shape((char *)&v172, v13);
  uint64_t v138 = v10;
  if (v174 == 1) {
    int v15 = 4;
  }
  else {
    int v15 = 5;
  }
  if (HIDWORD(v174) == -1) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = HIDWORD(v174);
  }
  if (__p)
  {
    v177[0] = __p;
    operator delete(__p);
  }
  if (*((_DWORD *)this + 70) != -1)
  {
    if (v16 > 5) {
      goto LABEL_226;
    }
    [v14 addObject:@"Width"];
  }
  if (*((_DWORD *)this + 71) != -1)
  {
    if (v16 > 5) {
      goto LABEL_226;
    }
    [v14 addObject:@"Height"];
  }
  if (*((_DWORD *)this + 72) != -1)
  {
    if (v16 > 5) {
      goto LABEL_226;
    }
    if (*(unsigned char *)(v7 + 1281)) {
      _ZF = v16 == 5;
    }
    else {
      _ZF = 0;
    }
    if (_ZF) {
      uint64_t v18 = @"Depth";
    }
    else {
      uint64_t v18 = @"Channel";
    }
    [v14 addObject:v18];
  }
  if (*((_DWORD *)this + 73) != -1)
  {
    if (v16 > 5) {
      goto LABEL_226;
    }
    if (*(unsigned char *)(v7 + 1281)) {
      BOOL v19 = v16 == 5;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19) {
      uint64_t v20 = @"Channel";
    }
    else {
      uint64_t v20 = @"Batch";
    }
    [v14 addObject:v20];
  }
  if (*((_DWORD *)this + 74) == -1) {
    goto LABEL_50;
  }
  if (v16 > 5) {
LABEL_226:
  }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
  if (*(unsigned char *)(v7 + 1281)) {
    BOOL v21 = v16 == 5;
  }
  else {
    BOOL v21 = 0;
  }
  if (v21) {
    uint64_t v22 = @"Batch";
  }
  else {
    uint64_t v22 = @"Depth";
  }
  [v14 addObject:v22];
LABEL_50:
  long long v23 = v157;
  int v157 = @"Gather";

  [obj setObject:v14 forKeyedSubscript:@"GatherNDAxes"];
  uint64_t v147 = 0;
  memset(v146, 0, sizeof(v146));
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v144, 1, 1, [v14 count], 1);
  int v24 = *((_DWORD *)this + 70);
  if (v24 < 0)
  {
    unsigned int v25 = 0;
  }
  else
  {
    **(float **)(v144 + 24) = (float)v24;
    unsigned int v25 = 1;
  }
  int v26 = *((_DWORD *)this + 71);
  if ((v26 & 0x80000000) == 0) {
    *(float *)(*(void *)(v144 + 24) + 4 * v25++) = (float)v26;
  }
  int v27 = *((_DWORD *)this + 72);
  if ((v27 & 0x80000000) == 0) {
    *(float *)(*(void *)(v144 + 24) + 4 * v25++) = (float)v27;
  }
  int v28 = *((_DWORD *)this + 73);
  if ((v28 & 0x80000000) == 0) {
    *(float *)(*(void *)(v144 + 24) + 4 * v25++) = (float)v28;
  }
  int v29 = *((_DWORD *)this + 74);
  if ((v29 & 0x80000000) == 0) {
    *(float *)(*(void *)(v144 + 24) + 4 * v25) = (float)v29;
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v30 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v30 = (size_t)a3[1];
  }
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v30 + 9);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v30)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v32 = a3;
    }
    else {
      uint64_t v32 = (void **)*a3;
    }
    memmove(p_str, v32, v30);
  }
  strcpy((char *)p_str + v30, "@__indice");
  std::string::operator=((std::string *)v146, &__str);
  uint64_t v34 = v144;
  uint64_t v33 = v145;
  if (v145) {
    atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v147;
  *(void *)&v146[24] = v34;
  uint64_t v147 = v33;
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  int v172 = &__str;
  uint64_t v36 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &__str, (long long **)&v172);
  std::string::operator=((std::string *)(v36 + 56), (const std::string *)v146);
  uint64_t v38 = *(void *)&v146[24];
  uint64_t v37 = v147;
  if (v147) {
    atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v39 = (std::__shared_weak_count *)*((void *)v36 + 11);
  *((void *)v36 + 10) = v38;
  *((void *)v36 + 11) = v37;
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  objc_storeStrong(&v158, obj);
  long long v40 = v152;
  if ((char *)v152 - (char *)v151 == 24)
  {
    if ((unint64_t)v152 >= v153)
    {
      uint64_t v42 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v151, (uint64_t)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v152, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v41 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v152->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
      }
      uint64_t v42 = v40 + 1;
    }
    vImagePixelCount v152 = v42;
  }
  else if (0xAAAAAAAAAAAAAAABLL * (((char *)v152 - (char *)v151) >> 3) >= 2)
  {
    std::string::operator=(v151 + 1, &__str);
  }
  uint64_t v43 = v160;
  if ((unint64_t)v160 >= v161)
  {
    unint64_t v45 = 0x8E38E38E38E38E39 * (((uint64_t)v160 - v159) >> 4);
    if (v45 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v46 = 0x1C71C71C71C71C72 * ((uint64_t)(v161 - v159) >> 4);
    if (v46 <= v45 + 1) {
      unint64_t v46 = v45 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v161 - v159) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v47 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v47 = v46;
    }
    v175[1] = &v161;
    if (v47) {
      unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v47);
    }
    else {
      uint64_t v48 = 0;
    }
    int v172 = (void *)v47;
    int v173 = (std::string *)(v47 + 144 * v45);
    uint64_t v174 = v173;
    v175[0] = v47 + 144 * v48;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v173, (uint64_t)v148);
    v174 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v159, &v172);
    uint64_t v44 = v160;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v172);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v160, (uint64_t)v148);
    uint64_t v44 = v43 + 6;
  }
  int v160 = v44;
  if (v141) {
    atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v172);
  id v181 = 0;
  id v180 = 0;
  uint64_t v182 = 0x100000000;
  uint64_t v49 = *((void *)this + 46);
  int v50 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v49 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 38) + 104))() + 40))
  {
    float v51 = *(float *)(v138 + 112);
    v165[0] = v49;
    v165[1] = v50;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = (std::__shared_weak_count *)*((void *)this + 49);
    v164[0] = *((void *)this + 48);
    v164[1] = (uint64_t)v52;
    if (v52) {
      atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v165, v164, (uint64_t)&v166, v51);
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    if (v50) {
      nitro::nitro_function::nitro_function(v50);
    }
    uint64_t v53 = *(unsigned int *)(v49 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v162, 2 * v53, 1, 1, 1);
    uint64_t v54 = (int)v53;
    uint64_t v55 = *((void *)this + 48);
    int v56 = v53;
    if (v55) {
      int v56 = *(_DWORD *)(v55 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v194, 4 * v53);
      uint64_t v104 = *(int **)(v194.__r_.__value_.__r.__words[0] + 16);
      int v140 = v53 - 1;
      if ((int)v53 >= 1)
      {
        for (uint64_t i = 0; i != v53; ++i)
        {
          float v106 = *(float *)(*(void *)(v49 + 16) + i * 4);
          *(float *)&int v107 = ldexp(1.0, -v170) * v106;
          v104[i] = v107;
        }
      }
      if (v53)
      {
        uint64_t v108 = *(_WORD **)(v162 + 16);
        do
        {
          int v109 = *v104++;
          _S0 = v109;
          __asm { FCVT            H0, S0 }
          *v108++ = _S0;
          --v54;
        }
        while (v54);
      }
      if (*((void *)this + 48))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v56);
        uint64_t v112 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v56);
        uint64_t v135 = *(void *)buf;
        int v113 = *(int **)(v112 + 16);
        if (v56 >= 1)
        {
          for (uint64_t j = 0; j != v56; ++j)
          {
            int v115 = v140;
            if (v140 >= (int)j) {
              int v115 = j;
            }
            *(float *)&int v116 = *(float *)(*(void *)(v168 + 16) + 4 * j)
                            * *(float *)(*(void *)(v166 + 16) + 4 * v115);
            v113[j] = v116;
            unsigned int v117 = v171;
            unsigned int v118 = v170;
            *(float *)&int v119 = ldexp(1.0, v171 - v170) * *(float *)&v116;
            v113[j] = v119;
            float v122 = ldexp(1.0, v118 - v117) * *(float *)&v119;
            if (v122 < -127.0 || v122 > 255.0)
            {
              uint64_t v124 = Espresso::espresso_os_log_subsystem(v120, v121);
              if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
              {
                double v125 = *(float *)&v113[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v122;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v171;
                __int16 v184 = 1024;
                int v185 = v170;
                __int16 v186 = 2048;
                double v187 = v125;
                _os_log_error_impl(&dword_1920CB000, v124, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v56)
        {
          uint64_t v126 = v56;
          float v127 = *(_WORD **)(v135 + 16);
          do
          {
            int v128 = *v113++;
            _S0 = v128;
            __asm { FCVT            H0, S0 }
            *v127++ = _S0;
            --v126;
          }
          while (v126);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v130 = v171;
    uint64_t v57 = v162;
    if (v53)
    {
      vDSP_Length v58 = *(int **)(v166 + 16);
      float v59 = *(_WORD **)(v162 + 16);
      do
      {
        int v60 = *v58++;
        _S0 = v60;
        __asm { FCVT            H0, S0 }
        *v59++ = _S0;
        --v54;
      }
      while (v54);
    }
    if (v55)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v56, 1, 1, 1);
      int v134 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v131 = *(void *)buf;
      if (v56)
      {
        uint64_t v65 = v56;
        long long v66 = *(_WORD **)(*(void *)buf + 16);
        long long v67 = *(int **)(v168 + 16);
        do
        {
          int v68 = *v67++;
          _S0 = v68;
          __asm { FCVT            H0, S0 }
          *v66++ = _S0;
          --v65;
        }
        while (v65);
      }
    }
    else
    {
      int v134 = 0;
      uint64_t v131 = 0;
    }
    int v132 = *((unsigned __int8 *)a2 + 552);
    int v133 = (Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128);
    float v70 = v163;
    if (v163) {
      atomic_fetch_add_explicit(&v163->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v71 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v133, *(const unsigned __int8 **)(v57 + 16), *(int *)(v57 + 8));
    if (v70) {
      nitro::nitro_function::nitro_function(v70);
    }
    id v136 = (id)objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v72 = *(id *)(v159 + 128);

      id v136 = v72;
    }
    uint64_t v139 = objc_opt_new();
    int v73 = [NSNumber numberWithInt:v53];
    [v139 setObject:v73 forKeyedSubscript:@"ScaleCount"];

    int v74 = [NSNumber numberWithInt:v71];
    [v139 setObject:v74 forKeyedSubscript:@"ScaleOffset"];

    int v75 = NSNumber;
    if (v132) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v77 = [v75 numberWithUnsignedLong:weights_file_index];
    }
    [v139 setObject:v77 forKeyedSubscript:@"ScaleIndex"];

    [v139 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    int v78 = [NSNumber numberWithInt:v170];
    [v136 setObject:v78 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 48))
    {
      if (v134) {
        atomic_fetch_add_explicit(&v134->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v79 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v133, *(const unsigned __int8 **)(v131 + 16), *(int *)(v131 + 8));
      if (v134) {
        nitro::nitro_function::nitro_function(v134);
      }
      float v80 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 48) + 8)];
      [v139 setObject:v80 forKeyedSubscript:@"BiasCount"];

      uint64_t v81 = [NSNumber numberWithInt:v79];
      [v139 setObject:v81 forKeyedSubscript:@"BiasOffset"];

      short float v82 = NSNumber;
      if (v132) {
        uint64_t v83 = 0;
      }
      else {
      short float v84 = [v82 numberWithUnsignedLong:v83];
      }
      [v139 setObject:v84 forKeyedSubscript:@"BiasIndex"];

      [v139 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v85 = [NSNumber numberWithInt:v130];
      [v136 setObject:v85 forKeyedSubscript:@"BiasShift"];
    }
    [v136 setObject:v139 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    uint64_t v86 = v160;
    if (v160 == (std::string *)v159) {
      goto LABEL_171;
    }
    int v87 = v160 - 6;
    uint64_t v88 = HIBYTE(v160[-6].__r_.__value_.__r.__words[2]);
    char v89 = v88;
    std::string::size_type size = v160[-6].__r_.__value_.__l.__size_;
    if ((v88 & 0x80u) == 0) {
      std::string::size_type v91 = HIBYTE(v160[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v91 = v160[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v92 = HIBYTE(v185);
    if (v185 < 0) {
      uint64_t v92 = *(void *)&buf[8];
    }
    if (v91 != v92) {
      goto LABEL_165;
    }
    if (v185 >= 0) {
      int v93 = buf;
    }
    else {
      int v93 = *(unsigned __int8 **)buf;
    }
    if ((char)v88 < 0)
    {
      int data = (const std::string::value_type *)v87->__r_.__value_.__r.__words[0];
      if (memcmp(v87->__r_.__value_.__l.__data_, v93, v160[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_168;
      }
    }
    else if ((_BYTE)v88)
    {
      vImagePixelCount v94 = v160 - 6;
      while (v94->__r_.__value_.__s.__data_[0] == *v93)
      {
        vImagePixelCount v94 = (std::string *)((char *)v94 + 1);
        ++v93;
        if (!--v88) {
          goto LABEL_164;
        }
      }
      goto LABEL_165;
    }
LABEL_164:
    std::string::append(v86 - 6, "__@pre_scale_bias");
    char v89 = HIBYTE(v86[-6].__r_.__value_.__r.__words[2]);
LABEL_165:
    if ((v89 & 0x80) == 0)
    {
      long long v96 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v194.__r_.__value_.__r.__words[2] = v86[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v96;
      goto LABEL_169;
    }
    int data = v86[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v86[-6].__r_.__value_.__l.__size_;
LABEL_168:
    std::string::__init_copy_ctor_external(&v194, data, size);
LABEL_169:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v188, &v194, &v195, 1uLL);
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v194.__r_.__value_.__l.__data_);
    }
LABEL_171:
    uint64_t v97 = v192;
    uint64_t v192 = @"GOC";

    objc_storeStrong(&v193, v136);
    if (!*((unsigned char *)a2 + 121))
    {
      int v98 = v160;
      if ((unint64_t)v160 >= v161)
      {
        unint64_t v100 = 0x8E38E38E38E38E39 * (((uint64_t)v160 - v159) >> 4);
        if (v100 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v101 = 0x1C71C71C71C71C72 * ((uint64_t)(v161 - v159) >> 4);
        if (v101 <= v100 + 1) {
          unint64_t v101 = v100 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v161 - v159) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v102 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v102 = v101;
        }
        *((void *)&v195 + 1) = &v161;
        if (v102) {
          unint64_t v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v102);
        }
        else {
          uint64_t v103 = 0;
        }
        v194.__r_.__value_.__r.__words[0] = v102;
        v194.__r_.__value_.__l.__size_ = v102 + 144 * v100;
        v194.__r_.__value_.__r.__words[2] = v194.__r_.__value_.__l.__size_;
        *(void *)&long long v195 = v102 + 144 * v103;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v194.__r_.__value_.__l.__size_, (uint64_t)buf);
        v194.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v159, &v194);
        int v99 = v160;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v194);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v160, (uint64_t)buf);
        int v99 = v98 + 6;
      }
      int v160 = v99;
    }

    if (v190 < 0) {
      operator delete(v189);
    }
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
    if (SHIBYTE(v185) < 0) {
      operator delete(*(void **)buf);
    }

    if (v134) {
      nitro::nitro_function::nitro_function(v134);
    }
    if (v163) {
      nitro::nitro_function::nitro_function(v163);
    }
    if (v169) {
      nitro::nitro_function::nitro_function(v169);
    }
    if (v167) {
      nitro::nitro_function::nitro_function(v167);
    }
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }

  if (v178 < 0) {
    operator delete((void *)v177[4]);
  }
  *(void *)long long buf = v177;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v175;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v174) < 0) {
    operator delete(v172);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v141) {
    nitro::nitro_function::nitro_function(v141);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 38) + 32))((char *)this + 304, a2, &v159);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v145) {
    nitro::nitro_function::nitro_function(v145);
  }
  if (v147) {
    nitro::nitro_function::nitro_function(v147);
  }
  if ((v146[23] & 0x80000000) != 0) {
    operator delete(*(void **)v146);
  }

  if (v155 < 0) {
    operator delete(v154);
  }
  int v172 = &v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  int v172 = &v150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  int v172 = &v159;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  if (v137) {
    nitro::nitro_function::nitro_function(v137);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v141) {
    nitro::nitro_function::nitro_function(v141);
  }
}